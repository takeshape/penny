"""
An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
Learn more about
[editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).

Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
then you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted
access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
[Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.

**Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
"""
type Shopify_Order implements Shopify_CommentEventSubject & Shopify_HasEvents & Shopify_HasLocalizationExtensions & Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_LegacyInteroperability & Shopify_Node {
  """A list of sales agreements associated with the order."""
  agreements(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """
    Supported filter parameters:
     - `happened_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_SalesAgreementConnection!

  """A list of messages that appear on the order page in the Shopify admin."""
  alerts: [Shopify_ResourceAlert!]!

  """The application that created the order."""
  app: Shopify_OrderApp

  """The billing address of the customer."""
  billingAddress: Shopify_MailingAddress

  """Whether the billing address matches the shipping address."""
  billingAddressMatchesShippingAddress: Boolean!

  """Whether the order can be manually marked as paid."""
  canMarkAsPaid: Boolean!

  """Whether a customer email exists for the order."""
  canNotifyCustomer: Boolean!

  """
  The reason provided when the order was canceled.
  Returns `null` if the order wasn't canceled.
  """
  cancelReason: Shopify_OrderCancelReason

  """
  The date and time when the order was canceled.
  Returns `null` if the order wasn't canceled.
  """
  cancelledAt: DateTime

  """Whether payment for the order can be captured."""
  capturable: Boolean!

  """
  The total order-level discount amount, before returns, in shop currency.
  """
  cartDiscountAmount: Money @deprecated(reason: "Use `cartDiscountAmountSet` instead.")

  """
  The total order-level discount amount, before returns, in shop and presentment currencies.
  """
  cartDiscountAmountSet: Shopify_MoneyBag

  """The channel that created the order."""
  channel: Shopify_Channel @deprecated(reason: "Use `publication` instead.")

  """Details about the channel that created the order."""
  channelInformation: Shopify_ChannelInformation

  """The IP address of the API client that created the order."""
  clientIp: String

  """Whether the order is closed."""
  closed: Boolean!

  """
  The date and time when the order was closed.
  Returns `null` if the order is not closed.
  """
  closedAt: DateTime

  """Whether inventory has been reserved for the order."""
  confirmed: Boolean!

  """Date and time when the order was created in Shopify."""
  createdAt: DateTime!

  """The shop currency when the order was placed."""
  currencyCode: Shopify_CurrencyCode!

  """
  The current order-level discount amount after all order updates, in shop and presentment currencies.
  """
  currentCartDiscountAmountSet: Shopify_MoneyBag!

  """
  The sum of the quantities for all line items that contribute to the order's current subtotal price.
  """
  currentSubtotalLineItemsQuantity: Int!

  """
  The sum of the prices for all line items after discounts and returns, in shop and presentment currencies.
  If `taxesIncluded` is `true`, then the subtotal also includes tax.
  """
  currentSubtotalPriceSet: Shopify_MoneyBag!

  """
  A list of all tax lines applied to line items on the order, after returns.
  Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
  """
  currentTaxLines: [Shopify_TaxLine!]!

  """
  The total amount discounted on the order after returns, in shop and presentment currencies.
  This includes both order and line level discounts.
  """
  currentTotalDiscountsSet: Shopify_MoneyBag!

  """
  The total amount of duties after returns, in shop and presentment currencies.
  Returns `null` if duties aren't applicable.
  """
  currentTotalDutiesSet: Shopify_MoneyBag

  """
  The total price of the order, after returns, in shop and presentment currencies.
  This includes taxes and discounts.
  """
  currentTotalPriceSet: Shopify_MoneyBag!

  """
  The sum of the prices of all tax lines applied to line items on the order, after returns, in shop and presentment currencies.
  """
  currentTotalTaxSet: Shopify_MoneyBag!

  """The total weight of the order after returns, in grams."""
  currentTotalWeight: UnsignedInt64!

  """A list of the custom attributes added to the order."""
  customAttributes: [Shopify_Attribute!]!

  """The customer that placed the order."""
  customer: Shopify_Customer

  """Whether the customer agreed to receive marketing materials."""
  customerAcceptsMarketing: Boolean!

  """
  The customer's visits and interactions with the online store before placing the order.
  """
  customerJourney: Shopify_CustomerJourney @deprecated(reason: "Use `customerJourneySummary` instead.")

  """
  The customer's visits and interactions with the online store before placing the order.
  """
  customerJourneySummary: Shopify_CustomerJourneySummary

  """
  A two-letter or three-letter language code, optionally followed by a region modifier.
  """
  customerLocale: String

  """A list of discounts that are applied to the order."""
  discountApplications(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_DiscountApplicationConnection!

  """The discount code used for the order."""
  discountCode: String

  """The discount codes used for the order."""
  discountCodes: [String!]!

  """
  The primary address of the customer.
  Returns `null` if neither the shipping address nor the billing address was provided.
  """
  displayAddress: Shopify_MailingAddress

  """
  The financial status of the order that can be shown to the merchant.
  This field does not capture all the details of an order's financial state. It should only be used for display summary purposes.
  """
  displayFinancialStatus: Shopify_OrderDisplayFinancialStatus

  """
  The fulfillment status for the order that can be shown to the merchant.
  This field does not capture all the details of an order's fulfillment state. It should only be used for display summary purposes.
  For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
  """
  displayFulfillmentStatus: Shopify_OrderDisplayFulfillmentStatus!

  """A list of the disputes associated with the order."""
  disputes: [Shopify_OrderDisputeSummary!]!

  """Whether the order has had any edits applied."""
  edited: Boolean!

  """The email address associated with the customer."""
  email: String

  """
  Whether taxes on the order are estimated.
  This field returns `false` when taxes on the order are finalized and aren't subject to any changes.
  """
  estimatedTaxes: Boolean!

  """A list of events associated with the order."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_EventSortKeys = ID

    """
    Supported filter parameters:
     - `comments`
     - `created_at`
     - `subject_type`
     - `verb`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_EventConnection!

  """
  Whether there are line items that can be fulfilled.
  This field returns `false` when the order has no fulfillable line items.
  For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
  """
  fulfillable: Boolean!

  """A list of fulfillment orders for the order."""
  fulfillmentOrders(
    """
    Whether fulfillment orders that are hidden from the merchant are included.
    For example, fulfillment orders that were closed after being combined or moved are hidden.
    """
    displayable: Boolean = false

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """
    Supported filter parameters:
     - `assigned_location_id`
     - `status`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_FulfillmentOrderConnection!

  """List of shipments for the order."""
  fulfillments(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_Fulfillment!]!

  """Whether the order has been paid in full."""
  fullyPaid: Boolean!

  """Whether the merchant added a timeline comment to the order."""
  hasTimelineComment: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """
  The URL of the first page of the online store that the customer visited before they submitted the order.
  """
  landingPageDisplayText: String @deprecated(reason: "Use `customerJourneySummary.lastVisit.landingPageHtml` instead")

  """
  The first page of the online store that the customer visited before they submitted the order.
  """
  landingPageUrl: Url @deprecated(reason: "Use `customerJourneySummary.lastVisit.landingPage` instead")

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """A list of the order's line items."""
  lineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_LineItemConnection!

  """A list of the order's line items."""
  lineItemsMutable(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_LineItemMutableConnection! @deprecated(reason: "Use `lineItems` instead.")

  """List of localization extensions for the resource."""
  localizationExtensions(
    """The country codes of the extensions."""
    countryCodes: [Shopify_CountryCode]

    """The purpose of the extensions."""
    purposes: [Shopify_LocalizationExtensionPurpose]

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_LocalizationExtensionConnection!

  """
  The fulfillment location that was assigned when the order was created.
  Use the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder) object for up-to-date fulfillment location information.
  """
  location: String @deprecated(reason: "Use `physicalLocation` instead.")

  """
  Whether the order can be edited by the merchant. For example, canceled orders can’t be edited.
  """
  merchantEditable: Boolean!

  """
  A list of reasons why the order can't be edited. For example, "Canceled orders can’t be edited".
  """
  merchantEditableErrors: [String!]!

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String!

    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield

  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID

    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!

  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!

  """
  The unique identifier for the order that appears on the order page in the Shopify admin and the order status page.
  For example, "#1001", "EN1001", or "1001-A".
  This value isn't unique across multiple stores.
  """
  name: String!

  """
  The net payment for the order, based on the total amount received minus the total amount refunded, in shop currency.
  """
  netPayment: Money! @deprecated(reason: "Use `netPaymentSet` instead.")

  """
  The net payment for the order, based on the total amount received minus the total amount refunded, in shop and presentment currencies.
  """
  netPaymentSet: Shopify_MoneyBag!

  """
  A list of line items that can't be fulfilled.
  For example, tips and fully refunded line items can't be fulfilled.
  For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
  """
  nonFulfillableLineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_LineItemConnection!

  """The contents of the note associated with the order."""
  note: String

  """
  The total amount of duties before returns, in shop and presentment currencies.
  Returns `null` if duties aren't applicable.
  """
  originalTotalDutiesSet: Shopify_MoneyBag

  """
  The total price of the order at the time of order creation, in shop and presentment currencies.
  """
  originalTotalPriceSet: Shopify_MoneyBag!

  """The payment collection details for the order."""
  paymentCollectionDetails: Shopify_OrderPaymentCollectionDetails!

  """
  A list of the names of all payment gateways used for the order.
  For example, "Shopify Payments" and "Cash on Delivery (COD)".
  """
  paymentGatewayNames: [String!]!

  """The payment terms associated with the order."""
  paymentTerms: Shopify_PaymentTerms

  """The phone number associated with the customer."""
  phone: String

  """
  The fulfillment location that was assigned when the order was created.
  Use the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder) object for up to date fulfillment location information.
  """
  physicalLocation: Shopify_Location

  """The payment `CurrencyCode` of the customer for the order."""
  presentmentCurrencyCode: Shopify_CurrencyCode!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!

    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!

  """
  The date and time when the order was processed.
  This date and time might not match the date and time when the order was created.
  """
  processedAt: DateTime!

  """The publication that the order was created from."""
  publication: Shopify_Publication

  """
  The marketing referral code from the link that the customer clicked to visit the store.
  Supports the following URL attributes: "ref", "source", or "r".
  For example, if the URL is `{shop}.myshopify.com/products/slide?ref=j2tj1tn2`, then this value is `j2tj1tn2`.
  """
  referralCode: String @deprecated(reason: "Use `customerJourneySummary.lastVisit.referralCode` instead")

  """
  A web domain or short description of the source that sent the customer to your online store. For example, "shopify.com" or "email".
  """
  referrerDisplayText: String @deprecated(reason: "Use `customerJourneySummary.lastVisit.referralInfoHtml` instead")

  """
  The URL of the webpage where the customer clicked a link that sent them to your online store.
  """
  referrerUrl: Url @deprecated(reason: "Use `customerJourneySummary.lastVisit.referrerUrl` instead")

  """
  The difference between the suggested and actual refund amount of all refunds that have been applied to the order. A positive value indicates a difference in the merchant's favor, and a negative value indicates a difference in the customer's favor.
  """
  refundDiscrepancySet: Shopify_MoneyBag!

  """Whether the order can be refunded."""
  refundable: Boolean!

  """A list of refunds that have been applied to the order."""
  refunds(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_Refund!]!

  """
  The URL of the source that the order originated from, if found in the domain registry.
  """
  registeredSourceUrl: Url

  """
  Whether the order has shipping lines or at least one line item on the order that requires shipping.
  """
  requiresShipping: Boolean!

  """Whether any line item on the order can be restocked."""
  restockable: Boolean!

  """The fraud risk level of the order."""
  riskLevel: Shopify_OrderRiskLevel!

  """A list of risks associated with the order."""
  risks(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_OrderRisk!]!

  """The mailing address of the customer."""
  shippingAddress: Shopify_MailingAddress

  """A summary of all shipping costs on the order."""
  shippingLine: Shopify_ShippingLine

  """A list of the order's shipping lines."""
  shippingLines(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ShippingLineConnection!

  """
  A unique POS or third party order identifier.
  For example, "1234-12-1000" or "111-98567-54". The `receipt_number` field is derived from this value for POS orders.
  """
  sourceIdentifier: String

  """
  The sum of the quantities for all line items that contribute to the order's subtotal price.
  """
  subtotalLineItemsQuantity: Int!

  """
  The sum of the prices for all line items after discounts and before returns, in shop currency.
  If `taxesIncluded` is `true`, then the subtotal also includes tax.
  """
  subtotalPrice: Money @deprecated(reason: "Use `subtotalPriceSet` instead.")

  """
  The sum of the prices for all line items after discounts and before returns, in shop and presentment currencies.
  If `taxesIncluded` is `true`, then the subtotal also includes tax.
  """
  subtotalPriceSet: Shopify_MoneyBag

  """A suggested refund for the order."""
  suggestedRefund(
    """
    The amount to refund for shipping. Overrides the `refundShipping` argument.
    Use the `shippingAmountV2` argument for multi-currency orders.
    """
    shippingAmount: Money

    """Whether to refund the full shipping amount."""
    refundShipping: Boolean

    """The line items from the order to include in the refund."""
    refundLineItems: [Shopify_RefundLineItemInput]

    """The duties from the order to include in the refund."""
    refundDuties: [Shopify_RefundDutyInput]

    """
    Whether the suggested refund should be created from all refundable line items on the order.
    If `true`, the `refundLineItems` argument will be ignored.
    """
    suggestFullRefund: Boolean = false
  ): Shopify_SuggestedRefund

  """
  A comma separated list of tags associated with the order. Updating `tags` overwrites
  any existing tags that were previously added to the order. To add new tags without overwriting
  existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
  mutation.
  """
  tags: [String!]!

  """
  A list of all tax lines applied to line items on the order, before returns.
  Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
  """
  taxLines: [Shopify_TaxLine!]!

  """Whether taxes are included in the subtotal price of the order."""
  taxesIncluded: Boolean!

  """
  Whether the order is a test.
  Test orders are made using the Shopify Bogus Gateway or a payment provider with test mode enabled.
  A test order cannot be converted into a real order and vice versa.
  """
  test: Boolean!

  """
  The authorized amount that is uncaptured or undercaptured, in shop currency.
  This amount isn't adjusted for returns.
  """
  totalCapturable: Money! @deprecated(reason: "Use `totalCapturableSet` instead.")

  """
  The authorized amount that is uncaptured or undercaptured, in shop and presentment currencies.
  This amount isn't adjusted for returns.
  """
  totalCapturableSet: Shopify_MoneyBag!

  """
  The total amount discounted on the order before returns, in shop currency.
  This includes both order and line level discounts.
  """
  totalDiscounts: Money @deprecated(reason: "Use `totalDiscountsSet` instead.")

  """
  The total amount discounted on the order before returns, in shop and presentment currencies.
  This includes both order and line level discounts.
  """
  totalDiscountsSet: Shopify_MoneyBag

  """
  The total amount not yet transacted for the order, in shop and presentment currencies.
  A positive value indicates a difference in the merchant's favor (payment from customer to merchant) and a negative value indicates a difference in the customer's favor (refund from merchant to customer).
  """
  totalOutstandingSet: Shopify_MoneyBag!

  """
  The total price of the order, before returns, in shop currency.
  This includes taxes and discounts.
  """
  totalPrice: Money! @deprecated(reason: "Use `totalPriceSet` instead.")

  """
  The total price of the order, before returns, in shop and presentment currencies.
  This includes taxes and discounts.
  """
  totalPriceSet: Shopify_MoneyBag!

  """
  The total amount received from the customer before returns, in shop currency.
  """
  totalReceived: Money! @deprecated(reason: "Use `totalReceivedSet` instead.")

  """
  The total amount received from the customer before returns, in shop and presentment currencies.
  """
  totalReceivedSet: Shopify_MoneyBag!

  """The total amount that was refunded, in shop currency."""
  totalRefunded: Money! @deprecated(reason: "Use `totalRefundedSet` instead.")

  """
  The total amount that was refunded, in shop and presentment currencies.
  """
  totalRefundedSet: Shopify_MoneyBag!

  """
  The total amount of shipping that was refunded, in shop and presentment currencies.
  """
  totalRefundedShippingSet: Shopify_MoneyBag!

  """
  The total shipping amount before discounts and returns, in shop currency.
  """
  totalShippingPrice: Money! @deprecated(reason: "Use `totalShippingPriceSet` instead.")

  """
  The total shipping amount before discounts and returns, in shop and presentment currencies.
  """
  totalShippingPriceSet: Shopify_MoneyBag!

  """The total tax amount before returns, in shop currency."""
  totalTax: Money @deprecated(reason: "Use `totalTaxSet` instead.")

  """
  The total tax amount before returns, in shop and presentment currencies.
  """
  totalTaxSet: Shopify_MoneyBag

  """The sum of all tip amounts for the order, in shop currency."""
  totalTipReceived: Shopify_MoneyV2! @deprecated(reason: "Use `totalTipReceivedSet` instead.")

  """
  The sum of all tip amounts for the order, in shop and presentment currencies.
  """
  totalTipReceivedSet: Shopify_MoneyBag!

  """The total weight of the order before returns, in grams."""
  totalWeight: UnsignedInt64

  """A list of transactions associated with the order."""
  transactions(
    """Truncate the array result to this size."""
    first: Int

    """Filter transactions by whether they are capturable."""
    capturable: Boolean

    """
    Filter transactions by whether they can be resolved manually.
    For example, fully captured or voided transactions aren't manually resolvable.
    """
    manuallyResolvable: Boolean
  ): [Shopify_OrderTransaction!]!

  """Whether no payments have been made for the order."""
  unpaid: Boolean!

  """The date and time when the order was modified last."""
  updatedAt: DateTime!
}

"""The subject line of a comment event."""
interface Shopify_CommentEventSubject {
  """
  Whether the timeline subject has a timeline comment. If true, then a timeline comment exists.
  """
  hasTimelineComment: Boolean!

  """A globally-unique identifier."""
  id: ID!
}

"""Represents an object that has a list of events."""
interface Shopify_HasEvents {
  """The paginated list of events associated with the host subject."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_EventSortKeys = ID

    """
    Supported filter parameters:
     - `comments`
     - `created_at`
     - `subject_type`
     - `verb`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_EventConnection!
}

"""An auto-generated type for paginating through multiple Events."""
type Shopify_EventConnection {
  """A list of edges."""
  edges: [Shopify_EventEdge!]!

  """A list of the nodes contained in EventEdge."""
  nodes: [Shopify_Event!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Event and a cursor during pagination.
"""
type Shopify_EventEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of EventEdge."""
  node: Shopify_Event!
}

"""
Events chronicle resource activities such as the creation of an article, the fulfillment of an order, or the
addition of a product.
"""
interface Shopify_Event {
  """The name of the app that created the event."""
  appTitle: String

  """Whether the event was created by an app."""
  attributeToApp: Boolean!

  """Whether the event was caused by an admin user."""
  attributeToUser: Boolean!

  """The date and time when the event was created."""
  createdAt: DateTime!

  """Whether the event is critical."""
  criticalAlert: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """Human readable text that describes the event."""
  message: FormattedString!
}

scalar DateTime

scalar FormattedString

"""
Returns information about pagination in a connection, in accordance with the
[Relay specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).
"""
type Shopify_PageInfo {
  """The cursor corresponding to the last node in edges."""
  endCursor: String

  """Whether there are more pages to fetch following the current page."""
  hasNextPage: Boolean!

  """Whether there are any pages prior to the current page."""
  hasPreviousPage: Boolean!

  """The cursor corresponding to the first node in edges."""
  startCursor: String
}

enum Shopify_EventSortKeys {
  CREATED_AT
  ID
  RELEVANCE
}

"""
Localization extensions associated with the specified resource. For example, the tax id for government invoice.
"""
interface Shopify_HasLocalizationExtensions {
  """List of localization extensions for the resource."""
  localizationExtensions(
    """The country codes of the extensions."""
    countryCodes: [Shopify_CountryCode]

    """The purpose of the extensions."""
    purposes: [Shopify_LocalizationExtensionPurpose]

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_LocalizationExtensionConnection!
}

"""
An auto-generated type for paginating through multiple LocalizationExtensions.
"""
type Shopify_LocalizationExtensionConnection {
  """A list of edges."""
  edges: [Shopify_LocalizationExtensionEdge!]!

  """A list of the nodes contained in LocalizationExtensionEdge."""
  nodes: [Shopify_LocalizationExtension!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one LocalizationExtension and a cursor during pagination.
"""
type Shopify_LocalizationExtensionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of LocalizationExtensionEdge."""
  node: Shopify_LocalizationExtension!
}

"""
Represents the value captured by a localization extension. Localization extensions are additional fields required by certain countries on international orders. For example, some countries require additional fields for customs information or tax identification numbers.
"""
type Shopify_LocalizationExtension {
  """Country ISO 3166-1 alpha-2 code."""
  countryCode: Shopify_CountryCode!

  """The localized extension keys that are allowed."""
  key: Shopify_LocalizationExtensionKey!

  """The purpose of this localization extension."""
  purpose: Shopify_LocalizationExtensionPurpose!

  """The localized extension title."""
  title: String!

  """The value of the field."""
  value: String!
}

enum Shopify_CountryCode {
  AF
  AX
  AL
  DZ
  AD
  AO
  AI
  AG
  AR
  AM
  AW
  AC
  AU
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BM
  BT
  BO
  BA
  BW
  BV
  BR
  IO
  BN
  BG
  BF
  BI
  KH
  CA
  CV
  BQ
  KY
  CF
  TD
  CL
  CN
  CX
  CC
  CO
  KM
  CG
  CD
  CK
  CR
  HR
  CU
  CW
  CY
  CZ
  CI
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GQ
  ER
  EE
  SZ
  ET
  FK
  FO
  FJ
  FI
  FR
  GF
  PF
  TF
  GA
  GM
  GE
  DE
  GH
  GI
  GR
  GL
  GD
  GP
  GT
  GG
  GN
  GW
  GY
  HT
  HM
  VA
  HN
  HK
  HU
  IS
  IN
  ID
  IR
  IQ
  IE
  IM
  IL
  IT
  JM
  JP
  JE
  JO
  KZ
  KE
  KI
  KP
  XK
  KW
  KG
  LA
  LV
  LB
  LS
  LR
  LY
  LI
  LT
  LU
  MO
  MG
  MW
  MY
  MV
  ML
  MT
  MQ
  MR
  MU
  YT
  MX
  MD
  MC
  MN
  ME
  MS
  MA
  MZ
  MM
  NA
  NR
  NP
  NL
  AN
  NC
  NZ
  NI
  NE
  NG
  NU
  NF
  MK
  NO
  OM
  PK
  PS
  PA
  PG
  PY
  PE
  PH
  PN
  PL
  PT
  QA
  CM
  RE
  RO
  RU
  RW
  BL
  SH
  KN
  LC
  MF
  PM
  WS
  SM
  ST
  SA
  SN
  RS
  SC
  SL
  SG
  SX
  SK
  SI
  SB
  SO
  ZA
  GS
  KR
  SS
  ES
  LK
  VC
  SD
  SR
  SJ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TL
  TG
  TK
  TO
  TT
  TA
  TN
  TR
  TM
  TC
  TV
  UG
  UA
  AE
  GB
  US
  UM
  UY
  UZ
  VU
  VE
  VN
  VG
  WF
  EH
  YE
  ZM
  ZW
  ZZ
}

enum Shopify_LocalizationExtensionKey {
  TAX_CREDENTIAL_BR
  SHIPPING_CREDENTIAL_BR
  SHIPPING_CREDENTIAL_CN
  TAX_CREDENTIAL_IT
  TAX_EMAIL_IT
  SHIPPING_CREDENTIAL_KR
}

enum Shopify_LocalizationExtensionPurpose {
  SHIPPING
  TAX
}

"""Resources that metafield definitions can be applied to."""
interface Shopify_HasMetafieldDefinitions {
  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID

    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!
}

"""
An auto-generated type for paginating through multiple MetafieldDefinitions.
"""
type Shopify_MetafieldDefinitionConnection {
  """A list of edges."""
  edges: [Shopify_MetafieldDefinitionEdge!]!

  """A list of the nodes contained in MetafieldDefinitionEdge."""
  nodes: [Shopify_MetafieldDefinition!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one MetafieldDefinition and a cursor during pagination.
"""
type Shopify_MetafieldDefinitionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MetafieldDefinitionEdge."""
  node: Shopify_MetafieldDefinition!
}

enum Shopify_MetafieldDefinitionPinnedStatus {
  ANY
  PINNED
  UNPINNED
}

enum Shopify_MetafieldDefinitionSortKeys {
  ID
  NAME
  PINNED_POSITION
  RELEVANCE
}

"""
Represents information about the metafields associated to the specified resource.
"""
interface Shopify_HasMetafields {
  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String!

    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield

  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!

    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!
}

"""An auto-generated type for paginating through multiple Metafields."""
type Shopify_MetafieldConnection {
  """A list of edges."""
  edges: [Shopify_MetafieldEdge!]!

  """A list of the nodes contained in MetafieldEdge."""
  nodes: [Shopify_Metafield!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Metafield and a cursor during pagination.
"""
type Shopify_MetafieldEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MetafieldEdge."""
  node: Shopify_Metafield!
}

"""
An auto-generated type for paginating through multiple PrivateMetafields.
"""
type Shopify_PrivateMetafieldConnection {
  """A list of edges."""
  edges: [Shopify_PrivateMetafieldEdge!]!

  """A list of the nodes contained in PrivateMetafieldEdge."""
  nodes: [Shopify_PrivateMetafield!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one PrivateMetafield and a cursor during pagination.
"""
type Shopify_PrivateMetafieldEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of PrivateMetafieldEdge."""
  node: Shopify_PrivateMetafield!
}

"""
Interoperability metadata for types that directly correspond to a REST Admin API resource.
For example, on the Product type, LegacyInteroperability returns metadata for the corresponding [Product object](https://shopify.dev/api/admin-graphql/latest/objects/product) in the REST Admin API.
"""
interface Shopify_LegacyInteroperability {
  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!
}

scalar UnsignedInt64

"""
An object with an ID field to support global identification, in accordance with the
[Relay specification](https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface).
This interface is used by the [node](https://shopify.dev/api/admin-graphql/unstable/queries/node)
and [nodes](https://shopify.dev/api/admin-graphql/unstable/queries/nodes) queries.
"""
interface Shopify_Node {
  """A globally-unique identifier."""
  id: ID!
}

"""
An auto-generated type for paginating through multiple SalesAgreements.
"""
type Shopify_SalesAgreementConnection {
  """A list of edges."""
  edges: [Shopify_SalesAgreementEdge!]!

  """A list of the nodes contained in SalesAgreementEdge."""
  nodes: [Shopify_SalesAgreement!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SalesAgreement and a cursor during pagination.
"""
type Shopify_SalesAgreementEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SalesAgreementEdge."""
  node: Shopify_SalesAgreement!
}

"""
A contract between a merchant and a customer to do business. Shopify creates a sales agreement whenever an order is placed, edited, or refunded. A sales agreement has one or more sales records, which provide itemized details about the initial agreement or subsequent changes made to the order. For example, when a customer places an order, Shopify creates the order, generates a sales agreement, and records a sale for each line item purchased in the order. A sale record is specific to a type of order line. Order lines can represent different things such as a purchased product, a tip added by a customer, shipping costs collected at checkout, and more.
"""
interface Shopify_SalesAgreement {
  """The application that created the agreement."""
  app: Shopify_App

  """The date and time at which the agreement occured."""
  happenedAt: DateTime!

  """The unique identifier for the agreement."""
  id: ID!

  """The reason the agremeent was created."""
  reason: Shopify_OrderActionType!

  """The sales associated with the agreement."""
  sales(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SaleConnection!

  """The staff member associated with the agreement."""
  user: Shopify_StaffMember
}

enum Shopify_OrderActionType {
  ORDER
  ORDER_EDIT
  REFUND
  UNKNOWN
}

"""An auto-generated type for paginating through multiple Sales."""
type Shopify_SaleConnection {
  """A list of edges."""
  edges: [Shopify_SaleEdge!]!

  """A list of the nodes contained in SaleEdge."""
  nodes: [Shopify_Sale!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Sale and a cursor during pagination.
"""
type Shopify_SaleEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SaleEdge."""
  node: Shopify_Sale!
}

"""
An individual sale record associated with a sales agreement. Every money value in an order's sales data is represented in the currency's smallest unit. When amounts are divided across multiple line items, such as taxes or order discounts, the amounts might not divide evenly across all of the line items on the order. To address this, the remaining currency units that couldn't be divided evenly are allocated one at a time, starting with the first line item, until they are all accounted for. In aggregate, the values sum up correctly. In isolation, one line item might have a different tax or discount amount than another line item of the same price, before taxes and discounts. This is because the amount could not be divided evenly across the items. The allocation of currency units across line items is immutable. After they are allocated, currency units are never reallocated or redistributed among the line items.
"""
interface Shopify_Sale {
  """The type of order action that the sale represents."""
  actionType: Shopify_SaleActionType!

  """The unique identifier for the sale."""
  id: ID!

  """The line type assocated with the sale."""
  lineType: Shopify_SaleLineType!

  """The number of units either ordered or intended to be returned."""
  quantity: Int

  """All individual taxes associated with the sale."""
  taxes: [Shopify_SaleTax!]!

  """The total sale amount after taxes and discounts."""
  totalAmount: Shopify_MoneyBag!

  """The total discounts allocated to the sale after taxes."""
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag!

  """The total discounts allocated to the sale before taxes."""
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag!

  """The total amount of taxes for the sale."""
  totalTaxAmount: Shopify_MoneyBag!
}

enum Shopify_SaleActionType {
  ORDER
  RETURN
  UPDATE
  UNKNOWN
}

enum Shopify_SaleLineType {
  PRODUCT
  TIP
  GIFT_CARD
  SHIPPING
  DUTY
  UNKNOWN
  ADJUSTMENT
}

"""The tax allocated to a sale from a single tax line."""
type Shopify_SaleTax {
  """
  The portion of the total tax amount on the related sale that comes from the associated tax line.
  """
  amount: Shopify_MoneyBag!

  """The unique identifier for the sale tax."""
  id: ID!

  """The tax line associated with the sale."""
  taxLine: Shopify_TaxLine!
}

"""
A collection of monetary values in their respective currencies. Typically used in the context of multi-currency pricing and transactions,
when an amount in the shop's currency is converted to the customer's currency of choice (the presentment currency).
"""
type Shopify_MoneyBag {
  """Amount in presentment currency."""
  presentmentMoney: Shopify_MoneyV2!

  """Amount in shop currency."""
  shopMoney: Shopify_MoneyV2!
}

"""A monetary value with currency."""
type Shopify_MoneyV2 {
  """Decimal money amount."""
  amount: Decimal!

  """Currency of the money."""
  currencyCode: Shopify_CurrencyCode!
}

scalar Decimal

enum Shopify_CurrencyCode {
  USD
  EUR
  GBP
  CAD
  AFN
  ALL
  DZD
  AOA
  ARS
  AMD
  AWG
  AUD
  BBD
  AZN
  BDT
  BSD
  BHD
  BIF
  BZD
  BMD
  BTN
  BAM
  BRL
  BOB
  BWP
  BND
  BGN
  MMK
  KHR
  CVE
  KYD
  XAF
  CLP
  CNY
  COP
  KMF
  CDF
  CRC
  HRK
  CZK
  DKK
  DOP
  XCD
  EGP
  ETB
  XPF
  FJD
  GMD
  GHS
  GTQ
  GYD
  GEL
  HTG
  HNL
  HKD
  HUF
  ISK
  INR
  IDR
  ILS
  IQD
  JMD
  JPY
  JEP
  JOD
  KZT
  KES
  KWD
  KGS
  LAK
  LVL
  LBP
  LSL
  LRD
  LTL
  MGA
  MKD
  MOP
  MWK
  MVR
  MXN
  MYR
  MUR
  MDL
  MAD
  MNT
  MZN
  NAD
  NPR
  ANG
  NZD
  NIO
  NGN
  NOK
  OMR
  PAB
  PKR
  PGK
  PYG
  PEN
  PHP
  PLN
  QAR
  RON
  RUB
  RWF
  WST
  SAR
  RSD
  SCR
  SGD
  SDG
  SYP
  ZAR
  KRW
  SSP
  SBD
  LKR
  SRD
  SZL
  SEK
  CHF
  TWD
  THB
  TZS
  TTD
  TND
  TRY
  TMT
  UGX
  UAH
  AED
  UYU
  UZS
  VUV
  VND
  XOF
  YER
  ZMW
  BYN
  BYR
  DJF
  ERN
  FKP
  GIP
  GNF
  IRR
  KID
  LYD
  MRU
  SLL
  SHP
  SOS
  STD
  STN
  TJS
  TOP
  VED
  VEF
  VES
  XXX
}

"""Represents a single tax applied to the associated line item."""
type Shopify_TaxLine {
  """
  Whether the channel that submitted the tax line is liable for remitting. A value of null indicates unknown liability for this tax line.
  """
  channelLiable: Boolean

  """
  The amount of tax, in shop currency, after discounts and before returns.
  """
  price: Money! @deprecated(reason: "Use `priceSet` instead.")

  """
  The amount of tax, in shop and presentment currencies, after discounts and before returns.
  """
  priceSet: Shopify_MoneyBag!

  """
  The proportion of the line item price that the tax represents as a decimal.
  """
  rate: Float

  """
  The proportion of the line item price that the tax represents as a percentage.
  """
  ratePercentage: Float

  """The name of the tax."""
  title: String!
}

scalar Money

"""
An alert message that appears in the Shopify admin about a problem with a store resource, with 1 or more actions to take. For example, you could use an alert to indicate that you're not charging taxes on some product variants.
They can optionally have a specific icon and be dismissed by merchants.
"""
type Shopify_ResourceAlert {
  """
  Buttons in the alert that link to related information.
  For example, _Edit variants_.
  """
  actions: [Shopify_ResourceAlertAction!]!

  """
  The secondary text in the alert that includes further information or instructions about how to solve a problem.
  """
  content: Html!

  """
  Unique identifier that appears when an alert is manually closed by the merchant.
  Most alerts cannot be manually closed.
  """
  dismissibleHandle: String

  """An icon that is optionally displayed with the alert."""
  icon: Shopify_ResourceAlertIcon

  """Indication of how important the alert is."""
  severity: Shopify_ResourceAlertSeverity!

  """
  The primary text in the alert that includes information or describes the problem.
  """
  title: String!
}

"""An action associated to a resource alert, such as editing variants."""
type Shopify_ResourceAlertAction {
  """Whether the action appears as a button or as a link."""
  primary: Boolean!

  """Resource for the action to show."""
  show: String

  """The text for the button in the alert. For example, _Edit variants_."""
  title: String!

  """The target URL that the button links to."""
  url: Url!
}

scalar Url

scalar Html

enum Shopify_ResourceAlertIcon {
  CHECKMARK_CIRCLE
  INFORMATION_CIRCLE
}

enum Shopify_ResourceAlertSeverity {
  DEFAULT
  INFO
  WARNING
  SUCCESS
  CRITICAL
  ERROR
}

"""The [application](https://shopify.dev/apps) that created the order."""
type Shopify_OrderApp {
  """The application icon."""
  icon: Shopify_Image!

  """The name of the application."""
  name: String!
}

enum Shopify_OrderCancelReason {
  CUSTOMER
  FRAUD
  INVENTORY
  DECLINED
  OTHER
}

"""Represents a generic custom attribute."""
type Shopify_Attribute {
  """Key or name of the attribute."""
  key: String!

  """Value of the attribute."""
  value: String
}

"""Represents a customer's visiting activities on a shop's online store."""
type Shopify_CustomerJourney {
  """The position of the current order within the customer's order history."""
  customerOrderIndex: Int!

  """
  The amount of days between first session and order creation date. First session represents first session since the last order, or first session within the 30 day attribution window, if more than 30 days has passed since the last order.
  """
  daysToConversion: Int!

  """The customer's first session going into the shop."""
  firstVisit: Shopify_CustomerVisit!

  """The last session before an order is made."""
  lastVisit: Shopify_CustomerVisit

  """Events preceding a customer order, such as shop sessions."""
  moments: [Shopify_CustomerMoment!]!
}

"""
Represents a session preceding an order, often used for building a timeline of events leading to an order.
"""
interface Shopify_CustomerMoment {
  """The date and time when the customer's session occurred."""
  occurredAt: DateTime!
}

"""Represents a customer's visiting activities on a shop's online store."""
type Shopify_CustomerJourneySummary {
  """
  The position of the current order within the customer's order history. Test orders aren't included.
  """
  customerOrderIndex: Int

  """
  The number of days between the first session and the order creation date. The first session represents the first session since the last order, or the first session within the 30 day attribution window, if more than 30 days have passed since the last order.
  """
  daysToConversion: Int

  """The customer's first session going into the shop."""
  firstVisit: Shopify_CustomerVisit

  """The last session before an order is made."""
  lastVisit: Shopify_CustomerVisit

  """The events preceding a customer's order, such as shop sessions."""
  moments(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CustomerMomentConnection

  """
  The total number of customer moments associated with this order. Returns null if the order is still in the process of being attributed.
  """
  momentsCount: Int

  """Whether the attributed sessions for the order have been created yet."""
  ready: Boolean!
}

"""
An auto-generated type for paginating through multiple CustomerMoments.
"""
type Shopify_CustomerMomentConnection {
  """A list of edges."""
  edges: [Shopify_CustomerMomentEdge!]!

  """A list of the nodes contained in CustomerMomentEdge."""
  nodes: [Shopify_CustomerMoment!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one CustomerMoment and a cursor during pagination.
"""
type Shopify_CustomerMomentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CustomerMomentEdge."""
  node: Shopify_CustomerMoment!
}

"""
An auto-generated type for paginating through multiple DiscountApplications.
"""
type Shopify_DiscountApplicationConnection {
  """A list of edges."""
  edges: [Shopify_DiscountApplicationEdge!]!

  """A list of the nodes contained in DiscountApplicationEdge."""
  nodes: [Shopify_DiscountApplication!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one DiscountApplication and a cursor during pagination.
"""
type Shopify_DiscountApplicationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DiscountApplicationEdge."""
  node: Shopify_DiscountApplication!
}

"""
Discount applications capture the intentions of a discount source at
the time of application on an order's line items or shipping lines.

Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
"""
interface Shopify_DiscountApplication {
  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: Shopify_DiscountApplicationAllocationMethod!

  """
  An ordered index that can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.
  """
  index: Int!

  """How the discount amount is distributed on the discounted lines."""
  targetSelection: Shopify_DiscountApplicationTargetSelection!

  """Whether the discount is applied on line items or shipping lines."""
  targetType: Shopify_DiscountApplicationTargetType!

  """The value of the discount application."""
  value: Shopify_PricingValue!
}

enum Shopify_DiscountApplicationAllocationMethod {
  ACROSS
  EACH
  ONE
}

enum Shopify_DiscountApplicationTargetSelection {
  ALL
  ENTITLED
  EXPLICIT
}

enum Shopify_DiscountApplicationTargetType {
  LINE_ITEM
  SHIPPING_LINE
}

"""
The type of value given to a customer when a discount is applied to an order. For example, the application of the discount might give the customer a percentage off a specified item. Alternatively, the application of the discount might give the customer a monetary value in a given currency off an order.
"""
union Shopify_PricingValue = Shopify_MoneyV2 | Shopify_PricingPercentageValue

"""
One type of value given to a customer when a discount is applied to an order.
The application of a discount with this value gives the customer the specified percentage off a specified item.
"""
type Shopify_PricingPercentageValue {
  """
  The percentage value of the object. This is a number between -100 (free) and 0 (no discount).
  """
  percentage: Float!
}

enum Shopify_OrderDisplayFinancialStatus {
  PENDING
  AUTHORIZED
  PARTIALLY_PAID
  PARTIALLY_REFUNDED
  VOIDED
  PAID
  REFUNDED
  EXPIRED
}

enum Shopify_OrderDisplayFulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  RESTOCKED
  PENDING_FULFILLMENT
  OPEN
  IN_PROGRESS
  ON_HOLD
  SCHEDULED
}

"""
An auto-generated type for paginating through multiple FulfillmentOrders.
"""
type Shopify_FulfillmentOrderConnection {
  """A list of edges."""
  edges: [Shopify_FulfillmentOrderEdge!]!

  """A list of the nodes contained in FulfillmentOrderEdge."""
  nodes: [Shopify_FulfillmentOrder!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one FulfillmentOrder and a cursor during pagination.
"""
type Shopify_FulfillmentOrderEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentOrderEdge."""
  node: Shopify_FulfillmentOrder!
}

"""An auto-generated type for paginating through multiple LineItems."""
type Shopify_LineItemConnection {
  """A list of edges."""
  edges: [Shopify_LineItemEdge!]!

  """A list of the nodes contained in LineItemEdge."""
  nodes: [Shopify_LineItem!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one LineItem and a cursor during pagination.
"""
type Shopify_LineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of LineItemEdge."""
  node: Shopify_LineItem!
}

"""
An auto-generated type for paginating through multiple LineItemMutables.
"""
type Shopify_LineItemMutableConnection {
  """A list of edges."""
  edges: [Shopify_LineItemMutableEdge!]!

  """A list of the nodes contained in LineItemMutableEdge."""
  nodes: [Shopify_LineItemMutable!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one LineItemMutable and a cursor during pagination.
"""
type Shopify_LineItemMutableEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of LineItemMutableEdge."""
  node: Shopify_LineItemMutable!
}

"""
The payment collection details for an order that requires additional payment following an edit to the order.
"""
type Shopify_OrderPaymentCollectionDetails {
  """The URL to use for collecting an additional payment on the order."""
  additionalPaymentCollectionUrl: Url

  """
  The list of vaulted payment methods for the order with their permissions.
  """
  vaultedPaymentMethods: [Shopify_PaymentMandate]
}

enum Shopify_OrderRiskLevel {
  LOW
  MEDIUM
  HIGH
}

"""Represents a fraud check on an order."""
type Shopify_OrderRisk {
  """
  Whether the risk level is shown in the Shopify admin. If false, then this order risk is ignored when Shopify determines the overall risk level for the order.
  """
  display: Boolean!

  """
  The likelihood that an order is fraudulent, based on this order risk.
  
  The level can be set by Shopify risk analysis or by an app.
  """
  level: Shopify_OrderRiskLevel

  """The risk message that's shown to the merchant in the Shopify admin."""
  message: String
}

"""
Represents the shipping details that the customer chose for their order.
"""
type Shopify_ShippingLine {
  """
  A reference to the carrier service that provided the rate.
  Present when the rate was computed by a third-party carrier service.
  """
  carrierIdentifier: String

  """A reference to the shipping method."""
  code: String

  """Whether the shipping line is custom or not."""
  custom: Boolean!

  """The general classification of the delivery method."""
  deliveryCategory: String

  """The discounts that have been allocated to the shipping line."""
  discountAllocations: [Shopify_DiscountAllocation!]!

  """The pre-tax shipping price with discounts applied."""
  discountedPrice: Shopify_MoneyV2! @deprecated(reason: "Use `discountedPriceSet` instead.")

  """The pre-tax shipping price with discounts applied."""
  discountedPriceSet: Shopify_MoneyBag!

  """A globally-unique identifier."""
  id: ID

  """The pre-tax shipping price without any discounts applied."""
  originalPrice: Shopify_MoneyV2! @deprecated(reason: "Use `originalPriceSet` instead.")

  """The pre-tax shipping price without any discounts applied."""
  originalPriceSet: Shopify_MoneyBag!

  """The phone number at the shipping address."""
  phone: String

  """Returns the price of the shipping line."""
  price: Money! @deprecated(reason: "Use `originalPriceSet` instead.")

  """
  The fulfillment service requested for the shipping method.
  Present if the shipping method requires processing by a third party fulfillment service.
  """
  requestedFulfillmentService: Shopify_FulfillmentService

  """
  A unique identifier for the shipping rate. The format can change without notice and is not meant to be shown to users.
  """
  shippingRateHandle: String

  """Returns the rate source for the shipping line."""
  source: String

  """The TaxLine objects connected to this shipping line."""
  taxLines: [Shopify_TaxLine!]!

  """Returns the title of the shipping line."""
  title: String!
}

"""
An amount that's allocated to a line based on an associated discount application.
"""
type Shopify_DiscountAllocation {
  """
  The money amount that's allocated to a line based on the associated discount application.
  """
  allocatedAmount: Shopify_MoneyV2! @deprecated(reason: "Use `allocatedAmountSet` instead.")

  """
  The money amount that's allocated to a line based on the associated discount application in shop and presentment currencies.
  """
  allocatedAmountSet: Shopify_MoneyBag!

  """The discount application that the allocated amount originated from."""
  discountApplication: Shopify_DiscountApplication!
}

"""
Represents a fulfillment service. A fulfillment service is a third-party service that prepares and ships orders on behalf of the store owner.
"""
type Shopify_FulfillmentService {
  """The callback URL the fulfillment service has registered for requests."""
  callbackUrl: Url

  """
  Whether the fulfillment service has opted into fulfillment order based requests.
  """
  fulfillmentOrdersOptIn: Boolean!

  """Human-readable unique identifier for this fulfillment service."""
  handle: String!

  """The ID of the fulfillment service."""
  id: ID!

  """
  Whether the fulfillment service tracks product inventory and provides updates to Shopify.
  """
  inventoryManagement: Boolean!

  """Location associated with the fulfillment service."""
  location: Shopify_Location

  """
  Whether the fulfillment service can stock inventory alongside other locations.
  """
  permitsSkuSharing: Boolean!

  """Whether the fulfillment service supports local deliveries."""
  productBased: Boolean!

  """The name of the fulfillment service as seen by merchants."""
  serviceName: String!

  """Shipping methods associated with the fulfillment service provider."""
  shippingMethods: [Shopify_ShippingMethod!]!

  """Type associated with the fulfillment service."""
  type: Shopify_FulfillmentServiceType!
}

"""
The shipping method for the delivery. Customers will see applicable shipping methods in the shipping section of checkout.
"""
type Shopify_ShippingMethod {
  """A unique code associated with the rate. For example: `expedited_mail`"""
  code: String!

  """
  A description of the rate, which customers will see at checkout.
  For example: `Local delivery`, `Free Express Worldwide`, `Includes tracking and insurance`.
  """
  label: String!
}

enum Shopify_FulfillmentServiceType {
  GIFT_CARD
  MANUAL
  THIRD_PARTY
}

"""An auto-generated type for paginating through multiple ShippingLines."""
type Shopify_ShippingLineConnection {
  """A list of edges."""
  edges: [Shopify_ShippingLineEdge!]!

  """A list of the nodes contained in ShippingLineEdge."""
  nodes: [Shopify_ShippingLine!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ShippingLine and a cursor during pagination.
"""
type Shopify_ShippingLineEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ShippingLineEdge."""
  node: Shopify_ShippingLine!
}

"""
Represents a refund suggested by Shopify based on the items being reimbursed. You can then use the suggested refund object to generate an actual refund.
"""
type Shopify_SuggestedRefund {
  """The total monetary value to be refunded."""
  amount: Money! @deprecated(reason: "Use `amountSet` instead.")

  """
  The total monetary value to be refunded in shop and presentment currencies.
  """
  amountSet: Shopify_MoneyBag!

  """The sum of all the discounted prices of the line items being refunded."""
  discountedSubtotalSet: Shopify_MoneyBag!

  """The total monetary value available to refund."""
  maximumRefundable: Money! @deprecated(reason: "Use `maximumRefundableSet` instead.")

  """
  The total monetary value available to refund in shop and presentment currencies.
  """
  maximumRefundableSet: Shopify_MoneyBag!

  """A list of duties to be refunded from the order."""
  refundDuties: [Shopify_RefundDuty!]!

  """A list of line items to be refunded, along with restock instructions."""
  refundLineItems: [Shopify_RefundLineItem!]!

  """The shipping costs to be refunded from the order."""
  shipping: Shopify_ShippingRefund!

  """The sum of all the prices of the line items being refunded."""
  subtotal: Money! @deprecated(reason: "Use `subtotalSet` instead.")

  """
  The sum of all the prices of the line items being refunded in shop and presentment currencies.
  """
  subtotalSet: Shopify_MoneyBag!

  """A list of suggested order transactions."""
  suggestedTransactions: [Shopify_SuggestedOrderTransaction!]!

  """
  The total cart discount amount that was applied to all line items in this refund.
  """
  totalCartDiscountAmountSet: Shopify_MoneyBag!

  """
  The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive.
  """
  totalDutiesSet: Shopify_MoneyBag!

  """
  The sum of the taxes being refunded from the order in shop and presentment currencies. The value must be positive.
  """
  totalTaxSet: Shopify_MoneyBag!

  """
  The sum of the taxes being refunded from the order. The value must be positive.
  """
  totalTaxes: Money! @deprecated(reason: "Use `totalTaxSet` instead.")
}

"""Represents a refunded duty."""
type Shopify_RefundDuty {
  """The amount of a refunded duty in shop and presentment currencies."""
  amountSet: Shopify_MoneyBag!

  """The duty associated with this refunded duty."""
  originalDuty: Shopify_Duty
}

"""A line item that's included in a refund."""
type Shopify_RefundLineItem {
  """The `LineItem` resource associated to the refunded line item."""
  lineItem: Shopify_LineItem!

  """The inventory restock location."""
  location: Shopify_Location

  """The price of a refunded line item."""
  price: Money! @deprecated(reason: "Use `priceSet` instead.")

  """The price of a refunded line item in shop and presentment currencies."""
  priceSet: Shopify_MoneyBag!

  """The quantity of a refunded line item."""
  quantity: Int!

  """The type of restock for the refunded line item."""
  restockType: Shopify_RefundLineItemRestockType!

  """
  Whether the refunded line item was restocked. Not applicable in the context of a SuggestedRefund.
  """
  restocked: Boolean!

  """The subtotal price of a refunded line item."""
  subtotal: Money! @deprecated(reason: "Use `subtotalSet` instead.")

  """
  The subtotal price of a refunded line item in shop and presentment currencies.
  """
  subtotalSet: Shopify_MoneyBag!

  """The total tax charged on a refunded line item."""
  totalTax: Money! @deprecated(reason: "Use `totalTaxSet` instead.")

  """
  The total tax charged on a refunded line item in shop and presentment currencies.
  """
  totalTaxSet: Shopify_MoneyBag!
}

enum Shopify_RefundLineItemRestockType {
  RETURN
  CANCEL
  LEGACY_RESTOCK
  NO_RESTOCK
}

"""Represents the shipping costs refunded on the Refund."""
type Shopify_ShippingRefund {
  """The monetary value of the shipping fees to be refunded."""
  amount: Money! @deprecated(reason: "Use `amountSet` instead.")

  """
  The monetary value of the shipping fees to be refunded in shop and presentment currencies.
  """
  amountSet: Shopify_MoneyBag!

  """The maximum amount of shipping fees currently refundable."""
  maximumRefundable: Money! @deprecated(reason: "Use `maximumRefundableSet` instead.")

  """
  The maximum amount of shipping fees currently refundable in shop and presentment currencies.
  """
  maximumRefundableSet: Shopify_MoneyBag!

  """
  The monetary value of the tax allocated to shipping fees to be refunded.
  """
  tax: Money! @deprecated(reason: "Use `taxSet` instead.")

  """
  The monetary value of the tax allocated to shipping fees to be refunded in shop and presentment currencies.
  """
  taxSet: Shopify_MoneyBag!
}

"""
A suggested transaction. Suggested transaction are usually used in the context of refunds
and exchanges.
"""
type Shopify_SuggestedOrderTransaction {
  """The masked account number associated with the payment method."""
  accountNumber: String

  """The amount of the transaction."""
  amount: Money! @deprecated(reason: "Use `amountSet` instead.")

  """
  The amount and currency of the suggested order transaction in shop and presentment currencies.
  """
  amountSet: Shopify_MoneyBag!

  """
  The human-readable payment gateway name suggested to process the transaction.
  """
  formattedGateway: String

  """The suggested payment gateway used to process the transaction."""
  gateway: String

  """Specifies the kind of the suggested order transaction."""
  kind: Shopify_SuggestedOrderTransactionKind!

  """
  Specifies the available amount to refund on the gateway. Only available within SuggestedRefund.
  """
  maximumRefundable: Money @deprecated(reason: "Use `maximumRefundableSet` instead.")

  """
  Specifies the available amount to refund on the gateway in shop and presentment currencies. Only available within SuggestedRefund.
  """
  maximumRefundableSet: Shopify_MoneyBag

  """
  The associated parent transaction, for example the authorization of a capture.
  """
  parentTransaction: Shopify_OrderTransaction
}

enum Shopify_SuggestedOrderTransactionKind {
  SUGGESTED_REFUND
}

"""The fields required to reimburse line items on a refund."""
input Shopify_RefundLineItemInput {
  """The ID of the line item in the refund."""
  lineItemId: ID!

  """The quantity of the associated line item to be refunded."""
  quantity: Int!

  """The type of restock for this line item."""
  restockType: Shopify_RefundLineItemRestockType

  """
  The intended location for restocking. If the `restockType` is set to `NO_RESTOCK`, then this value is empty.`
  """
  locationId: ID
}

"""The fields required to reimburse duties on a refund."""
input Shopify_RefundDutyInput {
  """The ID of the duty in the refund."""
  dutyId: ID!

  """The type of refund for this duty."""
  refundType: Shopify_RefundDutyRefundType
}

enum Shopify_RefundDutyRefundType {
  PROPORTIONAL
  FULL
}

"""
Represents information about a customer of the shop, such as the customer's contact details, their order
history, and whether they've agreed to receive marketing material by email.

**Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
"""
type Shopify_Customer implements Shopify_CommentEventSubject & Shopify_HasEvents & Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_LegacyInteroperability & Shopify_Node {
  """Whether the customer has agreed to receive marketing material."""
  acceptsMarketing: Boolean! @deprecated(reason: "Use `emailMarketingConsent` instead.")

  """
  The date and time when the customer consented or objected to receiving marketing material by email.
  """
  acceptsMarketingUpdatedAt: DateTime! @deprecated(reason: "Use `emailMarketingConsent` instead.")

  """A list of addresses associated with the customer."""
  addresses(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_MailingAddress!]!

  """
  The total amount that the customer has spent on orders in their lifetime.
  """
  amountSpent: Shopify_MoneyV2!

  """The average amount that the customer spent per order."""
  averageOrderAmount: Money @deprecated(reason: "Use `averageOrderAmountV2` instead.")

  """The average amount that the customer spent per order."""
  averageOrderAmountV2: Shopify_MoneyV2

  """
  Whether the merchant can delete the customer from their store.
  
  A customer can be deleted from a store only if they have not yet made an order. After a customer makes an
  order, they can't be deleted from a store.
  """
  canDelete: Boolean!

  """The date and time when the customer was added to the store."""
  createdAt: DateTime!

  """The default address associated with the customer."""
  defaultAddress: Shopify_MailingAddress

  """
  The full name of the customer, based on the values for first_name and last_name. If the first_name and
  last_name are not available, then this falls back to the customer's email address, and if that is not available, the customer's phone number.
  """
  displayName: String!

  """The customer's email address."""
  email: String

  """
  The current email marketing state for the customer.
  If the customer doesn't have an email address, then this property is `null`.
  """
  emailMarketingConsent: Shopify_CustomerEmailMarketingConsentState

  """A list of events associated with the customer."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_EventSortKeys = ID

    """
    Supported filter parameters:
     - `comments`
     - `created_at`
     - `subject_type`
     - `verb`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_EventConnection!

  """The customer's first name."""
  firstName: String

  """
  Whether the timeline subject has a timeline comment. If true, then a timeline comment exists.
  """
  hasTimelineComment: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """The image associated with the customer."""
  image: Shopify_Image!

  """The customer's last name."""
  lastName: String

  """The customer's last order."""
  lastOrder: Shopify_Order

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """
  The amount of time since the customer was first added to the store.
  
  Example: 'about 12 years'.
  """
  lifetimeDuration: String!

  """The customer's locale."""
  locale: String!

  """The market that includes the customer’s default address."""
  market: Shopify_Market

  """
  The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines, that the
  customer gave when they consented to receive marketing material by email.
  
  If the customer does not accept email marketing, then this property is `null`.
  """
  marketingOptInLevel: Shopify_CustomerMarketingOptInLevel @deprecated(reason: "Use `emailMarketingConsent` instead.")

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String!

    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield

  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID

    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!

  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!

  """A unique identifier for the customer that's used with Multipass login."""
  multipassIdentifier: String

  """A note about the customer."""
  note: String

  """
  The number of orders that the customer has made at the store in their lifetime.
  """
  numberOfOrders: UnsignedInt64!

  """A list of the customer's orders."""
  orders(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_OrderSortKeys = ID

    """
    Supported filter parameters:
     - `cart_token`
     - `channel`
     - `channel_id`
     - `chargeback_status`
     - `checkout_token`
     - `created_at`
     - `credit_card_last4`
     - `customer_id`
     - `delivery_method`
     - `discount_code`
     - `earliest_fulfill_by`
     - `email`
     - `financial_status`
     - `fraud_protection_level`
     - `fulfillment_location_id`
     - `fulfillment_status`
     - `gateway`
     - `location_id`
     - `name`
     - `payment_id`
     - `payment_provider_id`
     - `processed_at`
     - `reference_location_id`
     - `return_status`
     - `risk_level`
     - `sales_channel`
     - `source_identifier`
     - `source_name`
     - `status`
     - `tag`
     - `tag_not`
     - `test`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_OrderConnection!

  """A list of the customer's payment methods."""
  paymentMethods(
    """Whether to show the customer's revoked payment method."""
    showRevoked: Boolean = false

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CustomerPaymentMethodConnection!

  """The customer's phone number."""
  phone: String

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!

    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!

  """
  Possible subscriber states of a customer defined by their subscription contracts.
  """
  productSubscriberStatus: Shopify_CustomerProductSubscriberStatus!

  """
  The current SMS marketing state for the customer's phone number.
  
  If the customer does not have a phone number, then this property is `null`.
  """
  smsMarketingConsent: Shopify_CustomerSmsMarketingConsentState

  """The state of the customer's account with the shop."""
  state: Shopify_CustomerState!

  """The statistics for a given customer."""
  statistics: Shopify_CustomerStatistics!

  """A list of the customer's subscription contracts."""
  subscriptionContracts(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionContractConnection!

  """A comma separated list of tags that have been added to the customer."""
  tags: [String!]!

  """
  Whether the customer is exempt from being charged taxes on their orders.
  """
  taxExempt: Boolean!

  """The list of tax exemptions applied to the customer."""
  taxExemptions: [Shopify_TaxExemption!]!

  """The URL to unsubscribe the customer from the mailing list."""
  unsubscribeUrl: Url!

  """The date and time when the customer was last updated."""
  updatedAt: DateTime!

  """
  Whether the email address is formatted correctly.
  
  Returns `true` when the email is formatted correctly and
  belongs to an existing domain. This doesn't guarantee that
  the email address actually exists.
  """
  validEmailAddress: Boolean!

  """
  Whether the customer has verified their email address. Defaults to `true` if the customer is created through the Shopify admin or API.
  """
  verifiedEmail: Boolean!
}

"""
The record of when a customer consented to receive marketing material by email.
"""
type Shopify_CustomerEmailMarketingConsentState {
  """
  The date and time at which the customer consented to receive marketing material by email.
  The customer's consent state reflects the consent record with the most recent `consent_updated_at` date.
  If no date is provided, then the date and time at which the consent information was sent is used.
  """
  consentUpdatedAt: DateTime

  """
  The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines,
  that the customer gave when they consented to receive marketing material by email.
  """
  marketingOptInLevel: Shopify_CustomerMarketingOptInLevel

  """The current email marketing state for the customer."""
  marketingState: Shopify_CustomerEmailMarketingState!
}

enum Shopify_CustomerMarketingOptInLevel {
  SINGLE_OPT_IN
  CONFIRMED_OPT_IN
  UNKNOWN
}

enum Shopify_CustomerEmailMarketingState {
  NOT_SUBSCRIBED
  PENDING
  SUBSCRIBED
  UNSUBSCRIBED
  REDACTED
  INVALID
}

"""An auto-generated type for paginating through multiple Orders."""
type Shopify_OrderConnection {
  """A list of edges."""
  edges: [Shopify_OrderEdge!]!

  """A list of the nodes contained in OrderEdge."""
  nodes: [Shopify_Order!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Order and a cursor during pagination.
"""
type Shopify_OrderEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of OrderEdge."""
  node: Shopify_Order!
}

enum Shopify_OrderSortKeys {
  CREATED_AT
  CUSTOMER_NAME
  FINANCIAL_STATUS
  FULFILLMENT_STATUS
  ORDER_NUMBER
  PROCESSED_AT
  TOTAL_PRICE
  UPDATED_AT
  ID
  RELEVANCE
}

"""
An auto-generated type for paginating through multiple CustomerPaymentMethods.
"""
type Shopify_CustomerPaymentMethodConnection {
  """A list of edges."""
  edges: [Shopify_CustomerPaymentMethodEdge!]!

  """A list of the nodes contained in CustomerPaymentMethodEdge."""
  nodes: [Shopify_CustomerPaymentMethod!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one CustomerPaymentMethod and a cursor during pagination.
"""
type Shopify_CustomerPaymentMethodEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CustomerPaymentMethodEdge."""
  node: Shopify_CustomerPaymentMethod!
}

enum Shopify_CustomerProductSubscriberStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  FAILED
  NEVER_SUBSCRIBED
  PAUSED
}

"""
The record of when a customer consented to receive marketing material by SMS.

The customer's consent state reflects the record with the most recent date when consent was updated.
"""
type Shopify_CustomerSmsMarketingConsentState {
  """
  The source from which the SMS marketing information for the customer was collected.
  """
  consentCollectedFrom: Shopify_CustomerConsentCollectedFrom

  """
  The date and time when the customer consented to receive marketing material by SMS.
  If no date is provided, then the date and time when the consent information was sent is used.
  """
  consentUpdatedAt: DateTime

  """
  The marketing subscription opt-in level that was set when the customer consented to receive marketing information.
  """
  marketingOptInLevel: Shopify_CustomerMarketingOptInLevel!

  """The current SMS marketing state for the customer."""
  marketingState: Shopify_CustomerSmsMarketingState!
}

enum Shopify_CustomerConsentCollectedFrom {
  SHOPIFY
  OTHER
}

enum Shopify_CustomerSmsMarketingState {
  NOT_SUBSCRIBED
  PENDING
  SUBSCRIBED
  UNSUBSCRIBED
  REDACTED
}

enum Shopify_CustomerState {
  DECLINED
  DISABLED
  ENABLED
  INVITED
}

"""A customer's computed statistics."""
type Shopify_CustomerStatistics {
  """The predicted spend tier of a customer with a shop."""
  predictedSpendTier: Shopify_CustomerPredictedSpendTier
}

enum Shopify_CustomerPredictedSpendTier {
  HIGH
  MEDIUM
  LOW
}

"""
An auto-generated type for paginating through multiple SubscriptionContracts.
"""
type Shopify_SubscriptionContractConnection {
  """A list of edges."""
  edges: [Shopify_SubscriptionContractEdge!]!

  """A list of the nodes contained in SubscriptionContractEdge."""
  nodes: [Shopify_SubscriptionContract!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SubscriptionContract and a cursor during pagination.
"""
type Shopify_SubscriptionContractEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SubscriptionContractEdge."""
  node: Shopify_SubscriptionContract!
}

enum Shopify_TaxExemption {
  CA_STATUS_CARD_EXEMPTION
  CA_BC_RESELLER_EXEMPTION
  CA_MB_RESELLER_EXEMPTION
  CA_SK_RESELLER_EXEMPTION
  CA_DIPLOMAT_EXEMPTION
  CA_BC_COMMERCIAL_FISHERY_EXEMPTION
  CA_MB_COMMERCIAL_FISHERY_EXEMPTION
  CA_NS_COMMERCIAL_FISHERY_EXEMPTION
  CA_PE_COMMERCIAL_FISHERY_EXEMPTION
  CA_SK_COMMERCIAL_FISHERY_EXEMPTION
  CA_BC_PRODUCTION_AND_MACHINERY_EXEMPTION
  CA_SK_PRODUCTION_AND_MACHINERY_EXEMPTION
  CA_BC_SUB_CONTRACTOR_EXEMPTION
  CA_SK_SUB_CONTRACTOR_EXEMPTION
  CA_BC_CONTRACTOR_EXEMPTION
  CA_SK_CONTRACTOR_EXEMPTION
  CA_ON_PURCHASE_EXEMPTION
  CA_MB_FARMER_EXEMPTION
  CA_NS_FARMER_EXEMPTION
  CA_SK_FARMER_EXEMPTION
}

"""
An order that a merchant creates on behalf of a customer. Draft orders are useful for merchants that need to do the following tasks:

- Create new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.
- Send invoices to customers to pay with a secure checkout link.
- Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
- Re-create orders manually from active sales channels.
- Sell products at discount or wholesale rates.
- Take pre-orders.
- Save an order as a draft and resume working on it later.

**Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
"""
type Shopify_DraftOrder implements Shopify_CommentEventSubject & Shopify_HasEvents & Shopify_HasLocalizationExtensions & Shopify_HasMetafields & Shopify_LegacyInteroperability & Shopify_Node {
  """The order-level discount applied to the draft order."""
  appliedDiscount: Shopify_DraftOrderAppliedDiscount

  """The billing address of the customer."""
  billingAddress: Shopify_MailingAddress

  """
  The date and time when the draft order converted to a new order,
  and the draft order's status changed to **Completed**.
  """
  completedAt: DateTime

  """The date and time when the draft order was created in Shopify."""
  createdAt: DateTime!

  """
  The three letter code for the currency of the store at the time of the most recent update to the draft order.
  """
  currencyCode: Shopify_CurrencyCode!

  """
  The custom information added to the draft order on behalf of the customer.
  """
  customAttributes: [Shopify_Attribute!]!

  """
  The customer who will be sent an invoice for the draft order, if there is one.
  """
  customer: Shopify_Customer

  """
  The email address of the customer, which is used to send notifications.
  """
  email: String

  """The list of events associated with the draft order."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_EventSortKeys = ID

    """
    Supported filter parameters:
     - `comments`
     - `created_at`
     - `subject_type`
     - `verb`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_EventConnection!

  """Whether the merchant has added timeline comments to the draft order."""
  hasTimelineComment: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """The date and time when the invoice was last emailed to the customer."""
  invoiceSentAt: DateTime

  """
  The link to the checkout, which is sent to the customer in the invoice email.
  """
  invoiceUrl: Url

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The list of the line items in the draft order."""
  lineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_DraftOrderLineItemConnection!

  """List of localization extensions for the resource."""
  localizationExtensions(
    """The country codes of the extensions."""
    countryCodes: [Shopify_CountryCode]

    """The purpose of the extensions."""
    purposes: [Shopify_LocalizationExtensionPurpose]

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_LocalizationExtensionConnection!

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String!

    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield

  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!

  """
  The identifier for the draft order, which is unique within the store. For example, _#D1223_.
  """
  name: String!

  """The text from an optional note attached to the draft order."""
  note2: String

  """The order that was created from this draft order."""
  order: Shopify_Order

  """The associated payment terms for this draft order."""
  paymentTerms: Shopify_PaymentTerms

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!

    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!

  """
  Whether the Draft Order is ready and can be completed. Draft Orders
          might have asynchronous operations that can take time to finish.
  """
  ready: Boolean!

  """The shipping address of the customer."""
  shippingAddress: Shopify_MailingAddress

  """The line item that contains the shipping costs."""
  shippingLine: Shopify_ShippingLine

  """Status of the draft order."""
  status: Shopify_DraftOrderStatus!

  """
  The subtotal of the line items and their discounts. The subtotal doesn't include shipping charges, shipping discounts, or taxes.
  """
  subtotalPrice: Money!

  """
  A comma separated list of tags associated with the draft order. Updating `tags` overwrites
  any existing tags that were previously added to the draft order. To add new tags without overwriting
  existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
  mutation.
  """
  tags: [String!]!

  """Whether the draft order is tax exempt."""
  taxExempt: Boolean!

  """Total amount of taxes charged for each line item and shipping line."""
  taxLines: [Shopify_TaxLine!]!

  """Whether the line item prices include taxes."""
  taxesIncluded: Boolean!

  """
  The total amount of the draft order, including taxes, shipping charges, and discounts.
  """
  totalPrice: Money!

  """The total shipping charge for the draft order."""
  totalShippingPrice: Money!

  """The total amount of taxes for the draft order."""
  totalTax: Money!

  """The total weight in grams of the draft order."""
  totalWeight: UnsignedInt64!

  """
  The date and time when the draft order was last changed.
  The format is YYYY-MM-DD HH:mm:ss. For example, 2016-02-05 17:04:01.
  """
  updatedAt: DateTime!
}

"""The order-level discount applied to a draft order."""
type Shopify_DraftOrderAppliedDiscount {
  """Amount of the order-level discount that is applied to the draft order."""
  amount: Money! @deprecated(reason: "Use `amountV2` instead.")

  """Amount of money discounted."""
  amountV2: Shopify_MoneyV2!

  """Description of the order-level discount."""
  description: String!

  """Name of the order-level discount."""
  title: String

  """
  The order level discount amount. If `valueType` is `"percentage"`,
  then `value` is the percentage discount.
  """
  value: Float!

  """Type of the order-level discount."""
  valueType: Shopify_DraftOrderAppliedDiscountType!
}

enum Shopify_DraftOrderAppliedDiscountType {
  FIXED_AMOUNT
  PERCENTAGE
}

"""
An auto-generated type for paginating through multiple DraftOrderLineItems.
"""
type Shopify_DraftOrderLineItemConnection {
  """A list of edges."""
  edges: [Shopify_DraftOrderLineItemEdge!]!

  """A list of the nodes contained in DraftOrderLineItemEdge."""
  nodes: [Shopify_DraftOrderLineItem!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one DraftOrderLineItem and a cursor during pagination.
"""
type Shopify_DraftOrderLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DraftOrderLineItemEdge."""
  node: Shopify_DraftOrderLineItem!
}

enum Shopify_DraftOrderStatus {
  COMPLETED
  INVOICE_SENT
  OPEN
}

"""
Price rules are a set of conditions, including entitlements and prerequisites, that must be met in order for a discount code to apply. We recommend using the [Discount types](https://shopify.dev/api/examples/discounts) available in the GraphQL Admin API, which are intended to replace the GraphQL `PriceRule` object and REST Admin `PriceRule` and `DiscountCode` resources.
"""
type Shopify_PriceRule implements Shopify_CommentEventSubject & Shopify_HasEvents & Shopify_LegacyInteroperability & Shopify_Node {
  """
  The maximum number of times that the price rule can be allocated onto an order.
  """
  allocationLimit: Int

  """
  The method by which the price rule's value is allocated to its entitled items.
  """
  allocationMethod: Shopify_PriceRuleAllocationMethod!

  """The application that created the price rule."""
  app: Shopify_App

  """Determines which discount classes the discount can combine with."""
  combinesWith: Shopify_DiscountCombinesWith!

  """The date and time when the price rule was created."""
  createdAt: DateTime!

  """The customers that can use this price rule."""
  customerSelection: Shopify_PriceRuleCustomerSelection!

  """The class of the discount for combining purposes."""
  discountClass: Shopify_DiscountClass!

  """List of the price rule's discount codes."""
  discountCodes(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_DiscountCodeSortKeys = ID

    """
    Supported filter parameters:
     - `times_used`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_PriceRuleDiscountCodeConnection!

  """How many discount codes associated with the price rule."""
  discountCodesCount: Int!

  """
  The date and time when the price rule ends. For open-ended price rules, use `null`.
  """
  endsAt: DateTime

  """
  Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
  """
  entitlementToPrerequisiteQuantityRatio: Shopify_PriceRuleEntitlementToPrerequisiteQuantityRatio @deprecated(reason: "Use `prerequisiteToEntitlementQuantityRatio` instead.")

  """The paginated list of events associated with the price rule."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_EventSortKeys = ID

    """
    Supported filter parameters:
     - `comments`
     - `created_at`
     - `subject_type`
     - `verb`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_EventConnection!

  """A list of the price rule's features."""
  features: [Shopify_PriceRuleFeature!]!

  """Indicates whether there are any timeline comments on the price rule."""
  hasTimelineComment: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """The items to which the price rule applies."""
  itemEntitlements: Shopify_PriceRuleItemEntitlements!

  """The items required for the price rule to be applicable."""
  itemPrerequisites: Shopify_PriceRuleLineItemPrerequisites!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """Whether the price rule can be applied only once per customer."""
  oncePerCustomer: Boolean!

  """
  The number of the entitled items must fall within this range for the price rule to be applicable.
  """
  prerequisiteQuantityRange: Shopify_PriceRuleQuantityRange

  """
  The shipping cost must fall within this range for the price rule to be applicable.
  """
  prerequisiteShippingPriceRange: Shopify_PriceRuleMoneyRange

  """
  The sum of the entitled items subtotal prices must fall within this range for the price rule to be applicable.
  """
  prerequisiteSubtotalRange: Shopify_PriceRuleMoneyRange

  """
  Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
  """
  prerequisiteToEntitlementQuantityRatio: Shopify_PriceRulePrerequisiteToEntitlementQuantityRatio

  """URLs that can be used to share the discount."""
  shareableUrls: [Shopify_PriceRuleShareableUrl!]!

  """The shipping lines to which the price rule applies."""
  shippingEntitlements: Shopify_PriceRuleShippingLineEntitlements!

  """The date and time when the price rule starts."""
  startsAt: DateTime!

  """The status of the price rule."""
  status: Shopify_PriceRuleStatus!

  """A detailed summary of the price rule."""
  summary: String

  """
  The type of lines (line_item or shipping_line) to which the price rule applies.
  """
  target: Shopify_PriceRuleTarget!

  """The title of the price rule."""
  title: String!

  """The total sales from orders where the price rule was used."""
  totalSales: Shopify_MoneyV2

  """A list of the price rule's features."""
  traits: [Shopify_PriceRuleTrait!]! @deprecated(reason: "Use `features` instead.")

  """
  The number of times that the price rule has been used. This value is updated asynchronously and can be different than the actual usage count.
  """
  usageCount: Int!

  """The maximum number of times that the price rule can be used in total."""
  usageLimit: Int

  """A time period during which a price rule is applicable."""
  validityPeriod: Shopify_PriceRuleValidityPeriod!

  """The value of the price rule."""
  value: Shopify_PriceRuleValue! @deprecated(reason: "Use `valueV2` instead.")

  """The value of the price rule."""
  valueV2: Shopify_PricingValue!
}

enum Shopify_PriceRuleAllocationMethod {
  EACH
  ACROSS
}

"""Determines which discount classes the discount can combine with."""
type Shopify_DiscountCombinesWith {
  """Combines with order discounts."""
  orderDiscounts: Boolean!

  """Combines with product discounts."""
  productDiscounts: Boolean!

  """Combines with shipping discounts."""
  shippingDiscounts: Boolean!
}

"""A selection of customers for whom the price rule applies."""
type Shopify_PriceRuleCustomerSelection {
  """List of customers to whom the price rule applies."""
  customers(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_CustomerSortKeys = ID

    """
    Supported filter parameters:
     - `accepts_marketing`
     - `country`
     - `customer_date`
     - `email`
     - `last_abandoned_order_date`
     - `order_date`
     - `orders_count`
     - `phone`
     - `state`
     - `tag`
     - `tag_not`
     - `total_spent`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_CustomerConnection!

  """Whether the price rule applies to all customers."""
  forAllCustomers: Boolean!

  """
  A list of customer segments that contain the customers who can use the price rule.
  """
  segments: [Shopify_Segment!]!
}

"""An auto-generated type for paginating through multiple Customers."""
type Shopify_CustomerConnection {
  """A list of edges."""
  edges: [Shopify_CustomerEdge!]!

  """A list of the nodes contained in CustomerEdge."""
  nodes: [Shopify_Customer!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Customer and a cursor during pagination.
"""
type Shopify_CustomerEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CustomerEdge."""
  node: Shopify_Customer!
}

enum Shopify_CustomerSortKeys {
  CREATED_AT
  NAME
  LOCATION
  ORDERS_COUNT
  LAST_ORDER_DATE
  TOTAL_SPENT
  UPDATED_AT
  ID
  RELEVANCE
}

enum Shopify_DiscountClass {
  PRODUCT
  ORDER
  SHIPPING
}

"""
An auto-generated type for paginating through multiple PriceRuleDiscountCodes.
"""
type Shopify_PriceRuleDiscountCodeConnection {
  """A list of edges."""
  edges: [Shopify_PriceRuleDiscountCodeEdge!]!

  """A list of the nodes contained in PriceRuleDiscountCodeEdge."""
  nodes: [Shopify_PriceRuleDiscountCode!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one PriceRuleDiscountCode and a cursor during pagination.
"""
type Shopify_PriceRuleDiscountCodeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of PriceRuleDiscountCodeEdge."""
  node: Shopify_PriceRuleDiscountCode!
}

enum Shopify_DiscountCodeSortKeys {
  CODE
  CREATED_AT
  ID
  RELEVANCE
}

"""
Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
"""
type Shopify_PriceRuleEntitlementToPrerequisiteQuantityRatio {
  """The quantity of entitled items in the ratio."""
  entitlementQuantity: Int!

  """The quantity of prerequisite items in the ratio."""
  prerequisiteQuantity: Int!
}

enum Shopify_PriceRuleFeature {
  BUY_ONE_GET_ONE
  BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT
  BULK
  SPECIFIC_CUSTOMERS
  QUANTITY_DISCOUNTS
}

"""
The items to which this price rule applies. This may be multiple products, product variants, collections or combinations of the aforementioned.
"""
type Shopify_PriceRuleItemEntitlements {
  """The collections to which the price rule applies."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CollectionConnection!

  """The product variants to which the price rule applies."""
  productVariants(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductVariantConnection!

  """The products to which the price rule applies."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductConnection!

  """Whether the price rule applies to all line items."""
  targetAllLineItems: Boolean!
}

"""An auto-generated type for paginating through multiple Collections."""
type Shopify_CollectionConnection {
  """A list of edges."""
  edges: [Shopify_CollectionEdge!]!

  """A list of the nodes contained in CollectionEdge."""
  nodes: [Shopify_Collection!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Collection and a cursor during pagination.
"""
type Shopify_CollectionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CollectionEdge."""
  node: Shopify_Collection!
}

type Shopify_Collection {
  """
  A single-line, text-only description of the collection, stripped of any HTML tags and formatting that were included in the description.
  """
  description(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String!

  """
  The description of the collection, including any HTML tags and formatting. This content is typically displayed to customers, such as on an online store, depending on the theme.
  """
  descriptionHtml: Html!

  """
  Information about the collection that's provided through resource feedback.
  """
  feedback: Shopify_ResourceFeedback

  """
  A unique string that identifies the collection. If a handle isn't specified when a collection is created, it's automatically generated from the collection's original title, and typically includes words from the title separated by hyphens. For example, a collection that was created with the title `Summer Catalog 2022` might have the handle `summer-catalog-2022`.
  
  If the title is changed, the handle doesn't automatically change.
  
  The handle can be used in themes by the Liquid templating language to refer to the collection, but using the ID is preferred because it never changes.
  """
  handle: String!

  """Whether the collection includes the specified product."""
  hasProduct(
    """The ID of the product to check."""
    id: ID!
  ): Boolean!

  """A globally-unique identifier."""
  id: ID!

  """The image associated with the collection."""
  image: Shopify_Image

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String!

    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield

  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID

    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!

  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!

    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!

  """The products that are included in the collection."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductCollectionSortKeys = COLLECTION_DEFAULT
  ): Shopify_ProductConnection!

  """The number of products in the collection."""
  productsCount: Int!

  """Check to see whether the resource is published to a given channel."""
  publishedOnChannel(
    """The ID of the channel to check."""
    channelId: ID!
  ): Boolean! @deprecated(reason: "Use `publishedOnPublication` instead.")

  """Check to see whether the resource is published to a given publication."""
  publishedOnPublication(
    """The ID of the publication to check."""
    publicationId: ID!
  ): Boolean!

  """
  For a smart (automated) collection, specifies the rules that determine whether a product is included.
  """
  ruleSet: Shopify_CollectionRuleSet

  """
  If the default SEO fields for page title and description have been modified, contains the modified information.
  """
  seo: Shopify_SEO!

  """
  The order in which the products in the collection are displayed by default in the Shopify admin and in sales channels, such as an online store.
  """
  sortOrder: Shopify_CollectionSortOrder!

  """
  The Storefront GraphQL API ID of the `Collection`.
  
  As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
  """
  storefrontId: StorefrontId! @deprecated(reason: "Use `id` instead.")

  """
  The suffix of the Liquid template being used to show the collection in an online store. For example, if the value is `custom`, then the collection is using the `collection.custom.liquid` template. If the value is `null`, then the collection is using the default `collection.liquid` template.
  """
  templateSuffix: String

  """
  The name of the collection. It's displayed in the Shopify admin and is typically displayed in sales channels, such as an online store.
  """
  title: String!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [Shopify_PublishedTranslation!]!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the collection was last modified.
  """
  updatedAt: DateTime!
  takeshape: Collection
}

"""
Represents feedback from apps about a resource, and the steps required to set up the apps on the shop.
"""
type Shopify_ResourceFeedback {
  """
  Feedback from an app about the steps a merchant needs to take to set up the app on their store.
  """
  appFeedback: [Shopify_AppFeedback!]! @deprecated(reason: "Use `details` instead.")

  """List of AppFeedback detailing issues regarding a resource."""
  details: [Shopify_AppFeedback!]!

  """Summary of resource feedback pertaining to the resource."""
  summary: String!
}

"""
Reports the status of shops and their resources and displays this information
within Shopify admin. AppFeedback is used to notify merchants about steps they need to take
to set up an app on their store.
"""
type Shopify_AppFeedback {
  """The application associated to the feedback."""
  app: Shopify_App!

  """A link to where merchants can resolve errors."""
  link: Shopify_Link

  """The feedback message presented to the merchant."""
  messages: [Shopify_UserError!]!
}

"""An auto-generated type for paginating through multiple Products."""
type Shopify_ProductConnection {
  """A list of edges."""
  edges: [Shopify_ProductEdge!]!

  """A list of the nodes contained in ProductEdge."""
  nodes: [Shopify_Product!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Product and a cursor during pagination.
"""
type Shopify_ProductEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ProductEdge."""
  node: Shopify_Product!
}

type Shopify_Product implements TSSearchable {
  """The description of the product, complete with HTML formatting."""
  bodyHtml: String @deprecated(reason: "Use `descriptionHtml` instead.")

  """A list of the collections that include the product."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_CollectionSortKeys = ID

    """
    Supported filter parameters:
     - `collection_type`
     - `publishable_status`
     - `published_status`
     - `title`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_CollectionConnection!

  """The pricing that applies for a customer in a given context."""
  contextualPricing(
    """The context used to generate contextual pricing for the variant."""
    context: Shopify_ContextualPricingContextInput!
  ): Shopify_ProductContextualPricing!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was created.
  """
  createdAt: DateTime!

  """The custom product type specified by the merchant."""
  customProductType: String @deprecated(reason: "Deprecated in API version 2022-10. Use `productType` instead.")

  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """
  A stripped description of the product, single line with HTML tags removed.
  """
  description(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String!

  """The description of the product, complete with HTML formatting."""
  descriptionHtml: Html!

  """
  Stripped description of the product, single line with HTML tags removed.
  Truncated to 60 characters.
  """
  descriptionPlainSummary: String! @deprecated(reason: "Use `description` instead.")

  """The featured image for the product."""
  featuredImage: Shopify_Image

  """The featured media for the product."""
  featuredMedia: Shopify_Media

  """
  Information about the product that's provided through resource feedback.
  """
  feedback: Shopify_ResourceFeedback

  """The theme template used when viewing the gift card in a store."""
  giftCardTemplateSuffix: String

  """A unique human-friendly string of the product's title."""
  handle: String!

  """
  Whether the product has only a single variant with the default option and value.
  """
  hasOnlyDefaultVariant: Boolean!

  """Whether the product has out of stock variants."""
  hasOutOfStockVariants: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """The images associated with the product."""
  images(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductImageSortKeys = POSITION
  ): Shopify_ImageConnection!

  """Whether the product is in a given collection."""
  inCollection(
    """The ID of the collection to check."""
    id: ID!
  ): Boolean!

  """Whether the product is a gift card."""
  isGiftCard: Boolean!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """
  The media associated with the product. This can include images, 3D models, or videos.
  """
  media(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductMediaSortKeys = POSITION
  ): Shopify_MediaConnection!

  """Total count of media belonging to a product."""
  mediaCount: Int!

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String!

    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield

  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID

    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!

  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!

  """The online store preview URL."""
  onlineStorePreviewUrl: Url

  """
  The online store URL for the product.
  A value of `null` indicates that the product is not published to the Online Store sales channel.
  """
  onlineStoreUrl: Url

  """
  A list of product options. The limit is specified by Shop.resourceLimits.maxProductOptions.
  """
  options(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_ProductOption!]!

  """The price range of the product."""
  priceRange: Shopify_ProductPriceRange! @deprecated(reason: "Deprecated in API version 2020-10. Use `priceRangeV2` instead.")

  """The price range of the product with prices formatted as decimals."""
  priceRangeV2: Shopify_ProductPriceRangeV2!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!

    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!

  """The product type specified by the merchant."""
  productType: String!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was published to the Online Store.
  """
  publishedAt: DateTime

  """Check to see whether the resource is published to a given channel."""
  publishedOnChannel(
    """The ID of the channel to check."""
    channelId: ID!
  ): Boolean! @deprecated(reason: "Use `publishedOnPublication` instead.")

  """Check to see whether the resource is published to a given publication."""
  publishedOnPublication(
    """The ID of the publication to check."""
    publicationId: ID!
  ): Boolean!

  """
  Whether the product can only be purchased with a selling plan (subscription). Products that are sold on subscription (`requiresSellingPlan: true`) can be updated only for online stores. If you update a product to be subscription only, then the product is unpublished from all channels except the online store.
  """
  requiresSellingPlan: Boolean!

  """
  The resource that is either published or staged to be published to the calling app's publication. Requires the `read_product_listings` scope.
  """
  resourcePublicationOnCurrentPublication: Shopify_ResourcePublicationV2

  """Count of selling plan groups associated with the product."""
  sellingPlanGroupCount: Int!

  """
  A list of all selling plan groups defined in the current shop associated with the product either directly or through any of its variants.
  """
  sellingPlanGroups(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SellingPlanGroupConnection!

  """SEO information of the product."""
  seo: Shopify_SEO!

  """The standardized product type in the Shopify product taxonomy."""
  standardizedProductType: Shopify_StandardizedProductType @deprecated(reason: "Deprecated in API version 2022-10. Use `productCategory` instead.")

  """The product status. This controls visibility across all channels."""
  status: Shopify_ProductStatus!

  """
  The Storefront GraphQL API ID of the `Product`.
  
  As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
  """
  storefrontId: StorefrontId! @deprecated(reason: "Use `id` instead.")

  """
  A comma separated list of tags associated with the product. Updating `tags` overwrites
  any existing tags that were previously added to the product. To add new tags without overwriting
  existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
  mutation.
  """
  tags: [String!]!

  """The theme template used when viewing the product in a store."""
  templateSuffix: String

  """The title of the product."""
  title: String!

  """The quantity of inventory in stock."""
  totalInventory: Int!

  """The number of variants that are associated with the product."""
  totalVariants: Int!

  """Whether inventory tracking has been enabled for the product."""
  tracksInventory: Boolean!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [Shopify_PublishedTranslation!]!

  """
  The date and time when the product was last modified.
  A product's `updatedAt` value can change for different reasons. For example, if an order
  is placed for a product that has inventory tracking set up, then the inventory adjustment
  is counted as an update.
  """
  updatedAt: DateTime!

  """A list of variants associated with the product."""
  variants(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductVariantSortKeys = POSITION
  ): Shopify_ProductVariantConnection!

  """The name of the product's vendor."""
  vendor: String!
  reviews(page: Int, per_page: Int, photos: Int, verified_only: Int, comments_only: Int, minRating: Int, include_unpublished_images: Int, include_moderated: Int, min_date: String, max_date: String): ReviewsIo_ListProductReviewsResponse
  trustpilotReviews(
    """
    The page to retrieve. If the page number requested is higher than the available number of pages an empty array will be returned.
    Constraints: The allowed range is minimum: 1, maximum: 2147483647
    Default value: 1
    """
    page: Int

    """
    The number of reviews to retrieve per page.
    Constraints: The allowed range is minimum: 1, maximum: 100
    Default value: 20
    """
    perPage: Int

    """The url of the product. Optional only if sku is provided."""
    productUrl: [String]

    """Filter reviews by language."""
    language: String

    """
    Filter reviews with a specific number of stars.
    Constraints: Allowed values are 1, 2, 3, 4, 5
    """
    stars: [Int]

    """
    The language in which the attributes, if any, are returned
    Default value: en-US
    """
    locale: String

    """A comma-separated list of attribute ids"""
    attributeIds: [String]
  ): TrustpilotProductReviews
  trustpilotReviewsSummary: TrustpilotProductReviewsSummary
  takeshape: Product
  _shapeId: String
  _id: ID
  searchSummary: String
}

interface TSSearchable {
  _id: ID
  _shapeId: String
  searchSummary: String
}

enum Shopify_CollectionSortKeys {
  TITLE
  UPDATED_AT
  ID
  RELEVANCE
}

"""
The price of a product in a specific country.
Prices vary between countries.
"""
type Shopify_ProductContextualPricing {
  """
  The pricing of the variant with the highest price in the given context.
  """
  maxVariantPricing: Shopify_ProductVariantContextualPricing

  """The pricing of the variant with the lowest price in the given context."""
  minVariantPricing: Shopify_ProductVariantContextualPricing

  """The price range of the product with prices formatted as decimals."""
  priceRange: Shopify_ProductPriceRangeV2!
}

"""
The price of a product variant in a specific country.
Prices vary between countries.
"""
type Shopify_ProductVariantContextualPricing {
  """The final compare-at price after all adjustments are applied."""
  compareAtPrice: Shopify_MoneyV2

  """The final price after all adjustments are applied."""
  price: Shopify_MoneyV2!
}

"""The price range of the product."""
type Shopify_ProductPriceRangeV2 {
  """The highest variant's price."""
  maxVariantPrice: Shopify_MoneyV2!

  """The lowest variant's price."""
  minVariantPrice: Shopify_MoneyV2!
}

"""The context data that determines the pricing of a variant."""
input Shopify_ContextualPricingContextInput {
  """The country code used to fetch country-specific prices."""
  country: Shopify_CountryCode
}

"""Represents a media interface."""
interface Shopify_Media {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  """The media content type."""
  mediaContentType: Shopify_MediaContentType!

  """Any errors which have occurred on the media."""
  mediaErrors: [Shopify_MediaError!]!

  """The warnings attached to the media."""
  mediaWarnings: [Shopify_MediaWarning!]!

  """The preview image for the media."""
  preview: Shopify_MediaPreviewImage

  """Current status of the media."""
  status: Shopify_MediaStatus!
}

enum Shopify_MediaContentType {
  VIDEO
  EXTERNAL_VIDEO
  MODEL_3D
  IMAGE
}

"""
Represents a media error. This typically occurs when there is an issue with the media itself causing it to fail validation.
Check the media before attempting to upload again.
"""
type Shopify_MediaError {
  """Code representing the type of error."""
  code: Shopify_MediaErrorCode!

  """Additional details regarding the error."""
  details: String

  """Translated error message."""
  message: String!
}

enum Shopify_MediaErrorCode {
  UNKNOWN
  INVALID_SIGNED_URL
  IMAGE_DOWNLOAD_FAILURE
  IMAGE_PROCESSING_FAILURE
  MEDIA_TIMEOUT_ERROR
  EXTERNAL_VIDEO_NOT_FOUND
  EXTERNAL_VIDEO_UNLISTED
  EXTERNAL_VIDEO_INVALID_ASPECT_RATIO
  EXTERNAL_VIDEO_EMBED_DISABLED
  EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING
  GENERIC_FILE_DOWNLOAD_FAILURE
  GENERIC_FILE_INVALID_SIZE
  VIDEO_METADATA_READ_ERROR
  VIDEO_INVALID_FILETYPE_ERROR
  VIDEO_MIN_WIDTH_ERROR
  VIDEO_MAX_WIDTH_ERROR
  VIDEO_MIN_HEIGHT_ERROR
  VIDEO_MAX_HEIGHT_ERROR
  VIDEO_MIN_DURATION_ERROR
  VIDEO_MAX_DURATION_ERROR
  VIDEO_VALIDATION_ERROR
  MODEL3D_VALIDATION_ERROR
  MODEL3D_THUMBNAIL_GENERATION_ERROR
  MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR
  MODEL3D_GLB_OUTPUT_CREATION_ERROR
  MODEL3D_PROCESSING_FAILURE
  UNSUPPORTED_IMAGE_FILE_TYPE
  INVALID_IMAGE_FILE_SIZE
  INVALID_IMAGE_ASPECT_RATIO
  INVALID_IMAGE_RESOLUTION
  FILE_STORAGE_LIMIT_EXCEEDED
}

"""
Represents a media warning. This occurs when there is a non-blocking concern regarding your media.
Consider reviewing your media to ensure it is correct and its parameters are as expected.
"""
type Shopify_MediaWarning {
  """The code representing the type of warning."""
  code: Shopify_MediaWarningCode!

  """Translated warning message."""
  message: String
}

enum Shopify_MediaWarningCode {
  MODEL_SMALL_PHYSICAL_SIZE
  MODEL_LARGE_PHYSICAL_SIZE
}

"""Represents the preview image for a media."""
type Shopify_MediaPreviewImage {
  """
  The preview image for the media. Returns `null` until `status` is `READY`.
  """
  image: Shopify_Image

  """Current status of the preview image."""
  status: Shopify_MediaPreviewImageStatus!
}

enum Shopify_MediaPreviewImageStatus {
  UPLOADED
  PROCESSING
  READY
  FAILED
}

enum Shopify_MediaStatus {
  UPLOADED
  PROCESSING
  READY
  FAILED
}

"""An auto-generated type for paginating through multiple Images."""
type Shopify_ImageConnection {
  """A list of edges."""
  edges: [Shopify_ImageEdge!]!

  """A list of the nodes contained in ImageEdge."""
  nodes: [Shopify_Image!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Image and a cursor during pagination.
"""
type Shopify_ImageEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ImageEdge."""
  node: Shopify_Image!
}

enum Shopify_ProductImageSortKeys {
  CREATED_AT
  POSITION
  ID
  RELEVANCE
}

"""An auto-generated type for paginating through multiple Media."""
type Shopify_MediaConnection {
  """A list of edges."""
  edges: [Shopify_MediaEdge!]!

  """A list of the nodes contained in MediaEdge."""
  nodes: [Shopify_Media!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Media and a cursor during pagination.
"""
type Shopify_MediaEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MediaEdge."""
  node: Shopify_Media!
}

enum Shopify_ProductMediaSortKeys {
  POSITION
  ID
  RELEVANCE
}

"""The price range of the product."""
type Shopify_ProductPriceRange {
  """The highest variant's price."""
  maxVariantPrice: Shopify_MoneyV2!

  """The lowest variant's price."""
  minVariantPrice: Shopify_MoneyV2!
}

"""
A resource publication represents that a resource either has been published or will be published to a publication.
"""
type Shopify_ResourcePublicationV2 {
  """
  Whether the resource publication is published. If true, then the resource publication is published to the publication.
  If false, then the resource publication is staged to be published to the publication.
  """
  isPublished: Boolean!

  """The publication the resource publication is published to."""
  publication: Shopify_Publication!

  """
  The date that the resource publication was or is going to be published to the publication.
  """
  publishDate: DateTime

  """The resource published to the publication."""
  publishable: Shopify_Publishable!
}

"""
Represents a resource that can be published to a channel.
A publishable resource can be either a Product or Collection.
"""
interface Shopify_Publishable {
  """Check to see whether the resource is published to a given channel."""
  publishedOnChannel(
    """The ID of the channel to check."""
    channelId: ID!
  ): Boolean! @deprecated(reason: "Use `publishedOnPublication` instead.")

  """Check to see whether the resource is published to a given publication."""
  publishedOnPublication(
    """The ID of the publication to check."""
    publicationId: ID!
  ): Boolean!
}

"""
An auto-generated type for paginating through multiple SellingPlanGroups.
"""
type Shopify_SellingPlanGroupConnection {
  """A list of edges."""
  edges: [Shopify_SellingPlanGroupEdge!]!

  """A list of the nodes contained in SellingPlanGroupEdge."""
  nodes: [Shopify_SellingPlanGroup!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SellingPlanGroup and a cursor during pagination.
"""
type Shopify_SellingPlanGroupEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SellingPlanGroupEdge."""
  node: Shopify_SellingPlanGroup!
}

"""SEO information."""
type Shopify_SEO {
  """SEO Description."""
  description: String

  """SEO Title."""
  title: String
}

"""
Represents the details of a specific type of product within the [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt).
"""
type Shopify_StandardizedProductType {
  """
  The product taxonomy node associated with the standardized product type.
  """
  productTaxonomyNode: Shopify_ProductTaxonomyNode
}

enum Shopify_ProductStatus {
  ACTIVE
  ARCHIVED
  DRAFT
}

scalar StorefrontId

"""Published translation of a field of a resource."""
type Shopify_PublishedTranslation {
  """The resource field that is being translated."""
  key: String!

  """The locale of this translation."""
  locale: String!

  """The translation value."""
  value: String
}

"""
An auto-generated type for paginating through multiple ProductVariants.
"""
type Shopify_ProductVariantConnection {
  """A list of edges."""
  edges: [Shopify_ProductVariantEdge!]!

  """A list of the nodes contained in ProductVariantEdge."""
  nodes: [Shopify_ProductVariant!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ProductVariant and a cursor during pagination.
"""
type Shopify_ProductVariantEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ProductVariantEdge."""
  node: Shopify_ProductVariant!
}

enum Shopify_ProductVariantSortKeys {
  TITLE
  NAME
  SKU
  INVENTORY_QUANTITY
  INVENTORY_MANAGEMENT
  INVENTORY_LEVELS_AVAILABLE
  INVENTORY_POLICY
  FULL_TITLE
  POPULAR
  POSITION
  ID
  RELEVANCE
}

type ReviewsIo_ListProductReviewsResponse {
  write_review_link: String
  word: String
  stats: ReviewsIo_ListProductReviewsResponseStatsProperty
  store: ReviewsIo_ListProductReviewsResponseStoreProperty
  reviews: ReviewsIo_ListProductReviewsResponseReviewsProperty
  products: [ReviewsIo_ListProductReviewsResponseProductsProperty]
  ratings: [JSONObject]
  settings: [JSONObject]
}

type ReviewsIo_ListProductReviewsResponseStatsProperty {
  average: Float
  count: Int
}

type ReviewsIo_ListProductReviewsResponseStoreProperty {
  name: String
  logo: String
}

type ReviewsIo_ListProductReviewsResponseReviewsProperty {
  total: Int
  per_page: Int
  current_page: Int
  last_page: Int
  from: Int
  to: Int
  data: [ReviewsIo_ProductReview]
}

type ReviewsIo_ProductReview {
  product_review_id: Int!
  product_make: String!
  order_id: String
  name: String!
  sku: String!
  review: String!
  title: String
  rating: Int!
  date_created: String!
  votes: String
  flags: String
  timeago: String!
  date_formatted: String!
  product: ReviewsIo_Product!
  ratings: [ReviewsIo_ProductReviewRatingsProperty!]!
  reviewer: ReviewsIo_Reviewer!
  images: [JSONObject!]!
  replies: [JSONObject!]!
  tags: [String!]!
  author: ReviewsIo_ProductReviewAuthorProperty!
}

type ReviewsIo_Product {
  """Product unique ID"""
  sku: String

  """Product name"""
  name: String

  """Product description"""
  description: String

  """Product image URL"""
  image_url: String

  """Product link URL"""
  link: String

  """Product MPN"""
  mpn: String

  """Product GTIN"""
  gtin: String

  """Product brand"""
  brand: String

  """Product category"""
  category: String

  """Product custom property"""
  custom: String

  """Product page url"""
  pageUrl: String
}

type ReviewsIo_ProductReviewRatingsProperty {
  name: String
  score: String
}

type ReviewsIo_Reviewer {
  user_id: Int
  first_name: String
  last_name: String
  verified_buyer: ReviewsIo_ReviewerVerifiedBuyerProperty
  address: String
  profile_picture: String
  gravatar: String
  email: String
  name_formatted: String
}

enum ReviewsIo_ReviewerVerifiedBuyerProperty {
  yes
  no
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type ReviewsIo_ProductReviewAuthorProperty {
  email: String
}

type ReviewsIo_ListProductReviewsResponseProductsProperty {
  sku: String
  name: String
}

type TrustpilotProductReviews {
  productReviews: [TrustpilotProductReviewsProductReviewsProperty!]!
  links: [TrustpilotLink!]!
}

type TrustpilotProductReviewsProductReviewsProperty {
  id: String!
  createdAt: String!
  stars: Int!
  content: String!
  consumer: TrustpilotProductReviewsProductReviewsConsumerProperty!
  language: String
  attributeRatings: [TrustpilotAttributeRating]
  attachments: [TrustpilotAttachment]
}

type TrustpilotProductReviewsProductReviewsConsumerProperty {
  id: String!
  displayName: String!
}

type TrustpilotAttributeRating {
  attributeId: String
  attributeName: String
  rating: Int
}

type TrustpilotAttachment {
  id: String
  state: String
  processedFiles: [TrustpilotAttachmentProcessedFiles]
}

type TrustpilotAttachmentProcessedFiles {
  dimension: String
  mimeType: String
  url: String
}

type TrustpilotLink {
  href: String
  method: String
  rel: String
}

type TrustpilotProductReviewsSummary {
  starsAverage: Float!
  numberOfReviews: TrustpilotProductReviewsSummaryNumberOfReviewsProperty!
  links: [TrustpilotLink!]!
}

type TrustpilotProductReviewsSummaryNumberOfReviewsProperty {
  total: Int!
  oneStar: Int!
  twoStars: Int!
  threeStars: Int!
  fourStars: Int!
  fiveStars: Int!
}

type Product implements TSSearchable {
  """Initialized with title from shopify"""
  name: String

  """"""
  productComponent: String

  """"""
  hideBreadcrumbs: Boolean

  """"""
  hideRelatedProducts: Boolean

  """"""
  hideReviews: Boolean

  """"""
  showPolicies: Boolean

  """"""
  policies(enableLocaleFallback: Boolean = true, locale: String): ProductPagePolicies

  """"""
  showDetails: Boolean

  """"""
  details(enableLocaleFallback: Boolean = true, locale: String): ProductPageDetails

  """"""
  lineItemAttributes(enableLocaleFallback: Boolean = true, locale: String): LineItemAttributes
  shopifyProductId: String
  shopifyProduct: Shopify_Product
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean @deprecated(reason: "Use _status instead")
  _enabledAt: String @deprecated(reason: "Use a custom date field instead")
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type ProductPagePolicies implements TSSearchable {
  """"""
  name: String!

  """"""
  policies: [ProductPagePoliciesPolicies!]!
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean @deprecated(reason: "Use _status instead")
  _enabledAt: String @deprecated(reason: "Use a custom date field instead")
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type ProductPagePoliciesPolicies {
  name: JSON!
  nameHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be added to all CSS classes in the generated HTML"""
    classPrefix: String = ""

    """
    A prefix to be added to all id properties on header elements in the generated HTML
    """
    headerIdPrefix: String = ""
  ): String
  description: JSON!
  descriptionHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be added to all CSS classes in the generated HTML"""
    classPrefix: String = ""

    """
    A prefix to be added to all id properties on header elements in the generated HTML
    """
    headerIdPrefix: String = ""
  ): String

  """"""
  image(enableLocaleFallback: Boolean = true, locale: String): Asset
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input TSImagesConfig {
  """Default image parameters. See https://docs.imgix.com/apis/url """
  default: JSON

  """Small image parameters. See https://docs.imgix.com/apis/url """
  small: JSON

  """Medium image parameters. See https://docs.imgix.com/apis/url """
  medium: JSON

  """Large image parameters. See https://docs.imgix.com/apis/url """
  large: JSON
}

type Asset implements TSSearchable {
  title: String
  description: String
  filename: String!
  caption: JSON
  captionHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be added to all CSS classes in the generated HTML"""
    classPrefix: String = ""

    """
    A prefix to be added to all id properties on header elements in the generated HTML
    """
    headerIdPrefix: String = ""
  ): String
  credit: JSON
  creditHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be added to all CSS classes in the generated HTML"""
    classPrefix: String = ""

    """
    A prefix to be added to all id properties on header elements in the generated HTML
    """
    headerIdPrefix: String = ""
  ): String
  path: String!
  mimeType: String
  sourceUrl: String
  uploadStatus: String
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean @deprecated(reason: "Use _status instead")
  _enabledAt: String @deprecated(reason: "Use a custom date field instead")
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  s3Key: String @deprecated(reason: "Use path instead")
  searchSummary: String
}

type TSUser {
  id: String!
  email: String!
  fullName: String!
  avatarPath: String
}

enum DefaultWorkflow {
  disabled
  enabled
}

type ProductPageDetails implements TSSearchable {
  """"""
  name: String!

  """"""
  text: ProductPageDetailsText!

  """"""
  details: [ProductPageDetailsDetails!]!
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean @deprecated(reason: "Use _status instead")
  _enabledAt: String @deprecated(reason: "Use a custom date field instead")
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type ProductPageDetailsText {
  primary: JSON!
  primaryHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be added to all CSS classes in the generated HTML"""
    classPrefix: String = ""

    """
    A prefix to be added to all id properties on header elements in the generated HTML
    """
    headerIdPrefix: String = ""
  ): String
  secondary: JSON!
  secondaryHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be added to all CSS classes in the generated HTML"""
    classPrefix: String = ""

    """
    A prefix to be added to all id properties on header elements in the generated HTML
    """
    headerIdPrefix: String = ""
  ): String
}

type ProductPageDetailsDetails {
  """"""
  image(enableLocaleFallback: Boolean = true, locale: String): Asset
  description: JSON!
  descriptionHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be added to all CSS classes in the generated HTML"""
    classPrefix: String = ""

    """
    A prefix to be added to all id properties on header elements in the generated HTML
    """
    headerIdPrefix: String = ""
  ): String
}

type LineItemAttributes implements TSSearchable {
  """"""
  name: String!

  """"""
  attributes: [LineItemAttributesAttributes!]!
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean @deprecated(reason: "Use _status instead")
  _enabledAt: String @deprecated(reason: "Use a custom date field instead")
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type LineItemAttributesAttributes {
  """The property key."""
  key: String!

  """Optional values for the property."""
  values: [LineItemAttributesAttributesValues]
}

type LineItemAttributesAttributesValues {
  """"""
  value: String
}

enum Shopify_ProductCollectionSortKeys {
  TITLE
  PRICE
  BEST_SELLING
  CREATED
  ID
  MANUAL
  COLLECTION_DEFAULT
  RELEVANCE
}

"""
The set of rules that are used to determine which products are included in the collection.
"""
type Shopify_CollectionRuleSet {
  """
  Whether products must match any or all of the rules to be included in the collection.
  If true, then products must match at least one of the rules to be included in the collection.
  If false, then products must match all of the rules to be included in the collection.
  """
  appliedDisjunctively: Boolean!

  """The rules used to assign products to the collection."""
  rules: [Shopify_CollectionRule!]!
}

"""Represents at rule that's used to assign products to a collection."""
type Shopify_CollectionRule {
  """
  The attribute that the rule focuses on. For example, `title` or `product_type`.
  """
  column: Shopify_CollectionRuleColumn!

  """The value that the operator is applied to. For example, `Hats`."""
  condition: String!

  """
  The type of operator that the rule is based on. For example, `equals`, `contains`, or `not_equals`.
  """
  relation: Shopify_CollectionRuleRelation!
}

enum Shopify_CollectionRuleColumn {
  TAG
  TITLE
  TYPE
  VENDOR
  VARIANT_PRICE
  IS_PRICE_REDUCED
  VARIANT_COMPARE_AT_PRICE
  VARIANT_WEIGHT
  VARIANT_INVENTORY
  VARIANT_TITLE
}

enum Shopify_CollectionRuleRelation {
  CONTAINS
  ENDS_WITH
  EQUALS
  GREATER_THAN
  IS_NOT_SET
  IS_SET
  LESS_THAN
  NOT_CONTAINS
  NOT_EQUALS
  STARTS_WITH
}

enum Shopify_CollectionSortOrder {
  ALPHA_ASC
  ALPHA_DESC
  BEST_SELLING
  CREATED
  CREATED_DESC
  MANUAL
  PRICE_ASC
  PRICE_DESC
}

type Collection implements TSSearchable {
  """Initialized with title from shopify"""
  name: String

  """An alternate title to use in breadcrumbs"""
  breadcrumbTitle: String

  """"""
  parent(enableLocaleFallback: Boolean = true, locale: String): Collection
  shopifyCollectionId: String
  shopifyCollection: Shopify_Collection
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean @deprecated(reason: "Use _status instead")
  _enabledAt: String @deprecated(reason: "Use a custom date field instead")
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

"""
Single or multiple line item products, product variants or collections required for the price rule to be applicable, can also be provided in combination.
"""
type Shopify_PriceRuleLineItemPrerequisites {
  """The collections required for the price rule to be applicable."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CollectionConnection!

  """The product variants required for the price rule to be applicable."""
  productVariants(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductVariantConnection!

  """The products required for the price rule to be applicable."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductConnection!
}

"""A quantity range within which the price rule is applicable."""
type Shopify_PriceRuleQuantityRange {
  """The lower bound of the quantity range."""
  greaterThan: Int

  """The lower bound or equal of the quantity range."""
  greaterThanOrEqualTo: Int

  """The upper bound of the quantity range."""
  lessThan: Int

  """The upper bound or equal of the quantity range."""
  lessThanOrEqualTo: Int
}

"""A money range within which the price rule is applicable."""
type Shopify_PriceRuleMoneyRange {
  """The lower bound of the money range."""
  greaterThan: Money

  """The lower bound or equal of the money range."""
  greaterThanOrEqualTo: Money

  """The upper bound of the money range."""
  lessThan: Money

  """The upper bound or equal of the money range."""
  lessThanOrEqualTo: Money
}

"""
Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
"""
type Shopify_PriceRulePrerequisiteToEntitlementQuantityRatio {
  """The quantity of entitled items in the ratio."""
  entitlementQuantity: Int!

  """The quantity of prerequisite items in the ratio."""
  prerequisiteQuantity: Int!
}

"""Shareable URL for the discount code associated with the price rule."""
type Shopify_PriceRuleShareableUrl {
  """
  The image URL of the item (product or collection) to which the discount applies.
  """
  targetItemImage: Shopify_Image

  """The type of page that's associated with the URL."""
  targetType: Shopify_PriceRuleShareableUrlTargetType!

  """The title of the page that's associated with the URL."""
  title: String!

  """The URL for the discount code."""
  url: Url!
}

enum Shopify_PriceRuleShareableUrlTargetType {
  HOME
  PRODUCT
  COLLECTION
}

"""The shipping lines to which the price rule applies to."""
type Shopify_PriceRuleShippingLineEntitlements {
  """The codes for the countries to which the price rule applies to."""
  countryCodes: [Shopify_CountryCode!]!

  """
  Whether the price rule is applicable to countries that have not been defined in the shop's shipping zones.
  """
  includeRestOfWorld: Boolean!

  """Whether the price rule applies to all shipping lines."""
  targetAllShippingLines: Boolean!
}

enum Shopify_PriceRuleStatus {
  ACTIVE
  EXPIRED
  SCHEDULED
}

enum Shopify_PriceRuleTarget {
  LINE_ITEM
  SHIPPING_LINE
}

enum Shopify_PriceRuleTrait {
  BUY_ONE_GET_ONE
  BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT
  BULK
  SPECIFIC_CUSTOMERS
  QUANTITY_DISCOUNTS
}

"""A time period during which a price rule is applicable."""
type Shopify_PriceRuleValidityPeriod {
  """The time after which the price rule becomes invalid."""
  end: DateTime

  """The time after which the price rule is valid."""
  start: DateTime!
}

"""
The type of the price rule value. The price rule value might be a percentage value, or a fixed amount.
"""
union Shopify_PriceRuleValue = Shopify_PriceRuleFixedAmountValue | Shopify_PriceRulePercentValue

"""The value of a fixed amount price rule."""
type Shopify_PriceRuleFixedAmountValue {
  """The monetary value of the price rule."""
  amount: Money!
}

"""The value of a percent price rule."""
type Shopify_PriceRulePercentValue {
  """The percent value of the price rule."""
  percentage: Float!
}

"""A node containing an automatic discount and its related events."""
type Shopify_DiscountAutomaticNode implements Shopify_HasEvents & Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_Node {
  """The automatic discount object."""
  automaticDiscount: Shopify_DiscountAutomatic!

  """The paginated list of events associated with the host subject."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_EventSortKeys = ID

    """
    Supported filter parameters:
     - `comments`
     - `created_at`
     - `subject_type`
     - `verb`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_EventConnection!

  """A globally-unique identifier."""
  id: ID!

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String!

    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield

  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID

    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!

  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!

    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!
}

"""
The type of discount associated to the automatic discount. For example, the automatic discount might offer a basic discount using a fixed percentage, or a fixed amount, on specific products from the order. The automatic discount may also be a BXGY discount, which offers customer discounts on select products if they add a specific product to their order.
"""
union Shopify_DiscountAutomatic = Shopify_DiscountAutomaticApp | Shopify_DiscountAutomaticBasic | Shopify_DiscountAutomaticBxgy

"""An automatic app discount."""
type Shopify_DiscountAutomaticApp {
  """The app discount type providing the discount type."""
  appDiscountType: Shopify_AppDiscountType!

  """Determines which discount classes the discount can combine with."""
  combinesWith: Shopify_DiscountCombinesWith!

  """The class of the discount for combining purposes."""
  discountClass: Shopify_DiscountClass!

  """The ID for the discount."""
  discountId: ID!

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """The error history on the most recent version of the app discount."""
  errorHistory: Shopify_FunctionsErrorHistory

  """The date and time when the discount starts."""
  startsAt: DateTime!

  """The status of the discount."""
  status: Shopify_DiscountStatus!

  """The title of the discount."""
  title: String!
}

"""A script that defines a discount type."""
type Shopify_AppDiscountType {
  """The app providing the app discount type."""
  app: Shopify_App!

  """The App Bridge details for discount type configuration."""
  appBridge: Shopify_FunctionsAppBridge!

  """The API key of the app providing the app discount type."""
  appKey: String!

  """A description of the app discount type."""
  description: String

  """The class of the app discount type."""
  discountClass: Shopify_DiscountClass!

  """The ID of the function providing the app discount type."""
  functionId: String!

  """
  The target type of the app discount type. Possible values: `SHIPPING_LINE` and `LINE_ITEM`.
  """
  targetType: Shopify_DiscountApplicationTargetType!

  """The title of the app discount type."""
  title: String!
}

"""The App Bridge information for a Shopify Function."""
type Shopify_FunctionsAppBridge {
  """The relative path for creating a customization."""
  createPath: String!

  """The relative path for viewing a customization."""
  detailsPath: String!
}

"""The error history from running a Shopify Function."""
type Shopify_FunctionsErrorHistory {
  """The date and time that the first error occurred."""
  errorsFirstOccurredAt: DateTime!

  """The date and time that the first error occurred."""
  firstOccurredAt: DateTime!

  """
  Whether the merchant has shared all the recent errors with the developer.
  """
  hasBeenSharedSinceLastError: Boolean!

  """
  Whether the merchant has shared all the recent errors with the developer.
  """
  hasSharedRecentErrors: Boolean!
}

enum Shopify_DiscountStatus {
  ACTIVE
  EXPIRED
  SCHEDULED
}

"""
An automatic discount that offers customers a percentage discount, or fixed amount discount, on specific products, collections, or the entire order.
"""
type Shopify_DiscountAutomaticBasic {
  """
  The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count.
  """
  asyncUsageCount: Int!

  """Determines which discount classes the discount can combine with."""
  combinesWith: Shopify_DiscountCombinesWith!

  """The date and time when the discount was created."""
  createdAt: DateTime!

  """
  The qualifying items in an order, the quantity of each one, and the total value of the discount.
  """
  customerGets: Shopify_DiscountCustomerGets!

  """The class of the discount for combining purposes."""
  discountClass: Shopify_MerchandiseDiscountClass!

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """
  The minimum subtotal or quantity that's required for the discount to be applied.
  """
  minimumRequirement: Shopify_DiscountMinimumRequirement!

  """A short summary of the discount."""
  shortSummary: String!

  """The date and time when the discount starts."""
  startsAt: DateTime!

  """The status of the discount."""
  status: Shopify_DiscountStatus!

  """A detailed summary of the discount."""
  summary: String!

  """The title of the discount."""
  title: String!

  """The number of times that the discount has been used."""
  usageCount: Int! @deprecated(reason: "Use `asyncUsageCount` instead.")
}

"""
The qualifying items in an order, the quantity of each one, and the total value of the discount.
"""
type Shopify_DiscountCustomerGets {
  """Whether the discount applies on regular one-time-purchase items."""
  appliesOnOneTimePurchase: Boolean!

  """Whether the discount applies on subscription items."""
  appliesOnSubscription: Boolean!

  """The items to which the discount applies."""
  items: Shopify_DiscountItems!

  """Entitled quantity and the discount value."""
  value: Shopify_DiscountCustomerGetsValue!
}

"""
The type used to target the items required for discount eligibility, or the items to which the application of a discount might apply. For example, for a customer to be eligible for a discount, they're required to add an item from a specified collection to their order. Alternatively, a customer might be required to add a specific product or product variant. When using this type to target which items the discount will apply to, the discount might apply to all items on the order, or to specific products and product variants, or items in a given collection.
"""
union Shopify_DiscountItems = Shopify_AllDiscountItems | Shopify_DiscountCollections | Shopify_DiscountProducts

"""Targets all items the cart for a specified discount."""
type Shopify_AllDiscountItems {
  """
  Whether all items are eligible for the discount. This value always returns `true`.
  """
  allItems: Boolean!
}

"""
A list of collections that the discount can have as a prerequisite or a list of collections to which the discount can be applied.
"""
type Shopify_DiscountCollections {
  """
  The list of collections that the discount can have as a prerequisite or the list of collections to which the discount can be applied.
  """
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CollectionConnection!
}

"""
A list of products and product variants that the discount can have as a prerequisite or a list of products and product variants to which the discount can be applied.
"""
type Shopify_DiscountProducts {
  """
  The list of product variants that the discount can have as a prerequisite or the list of product variants to which the discount can be applied.
  """
  productVariants(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductVariantConnection!

  """
  The list of products that the discount can have as a prerequisite or the list of products to which the discount can be applied.
  """
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductConnection!
}

"""
The type of the discount value and how it will be applied. For example, it might be a percentage discount on a fixed number of items. Alternatively, it might be a fixed amount evenly distributed across all items or on each individual item. A third example is a percentage discount on all items.
"""
union Shopify_DiscountCustomerGetsValue = Shopify_DiscountAmount | Shopify_DiscountOnQuantity | Shopify_DiscountPercentage

"""
The fixed amount value of a discount, and whether the amount is applied to each entitled item or spread evenly across the entitled items.
"""
type Shopify_DiscountAmount {
  """The value of the discount."""
  amount: Shopify_MoneyV2!

  """
  If true, then the discount is applied to each of the entitled items. If false, then the amount is split across all of the entitled items.
  """
  appliesOnEachItem: Boolean!
}

"""
The quantity of items discounted, the discount value, and how the discount will be applied.
"""
type Shopify_DiscountOnQuantity {
  """The discount's effect on qualifying items."""
  effect: Shopify_DiscountEffect!

  """
  The number of items being discounted. The customer must have at least this many items of specified products or product variants in their order to be eligible for the discount.
  """
  quantity: Shopify_DiscountQuantity!
}

"""
The type of discount that will be applied. Currently, only a percentage discount is supported.
"""
union Shopify_DiscountEffect = Shopify_DiscountPercentage

"""
A discount effect that gives customers a percentage off of specified items on their order.
"""
type Shopify_DiscountPercentage {
  """The percentage value of the discount."""
  percentage: Float!
}

"""
A quantity of items in the context of a discount. This object can be used to define the minimum quantity of items required to apply a discount. Alternatively, it can be used to define the quantity of items that can be discounted.
"""
type Shopify_DiscountQuantity {
  """The quantity of items."""
  quantity: UnsignedInt64!
}

enum Shopify_MerchandiseDiscountClass {
  PRODUCT
  ORDER
}

"""
The type of mimumum requirement that must be met for the discount to be applied. For example, a customer must spend a minimum subtotal to be eligible for the discount. Alternatively, a customer must purchase a minimum quantity of items to be eligible for the discount.
"""
union Shopify_DiscountMinimumRequirement = Shopify_DiscountMinimumQuantity | Shopify_DiscountMinimumSubtotal

"""The minimum quantity of items required for the discount to apply."""
type Shopify_DiscountMinimumQuantity {
  """
  The minimum quantity of items that's required for the discount to be applied.
  """
  greaterThanOrEqualToQuantity: UnsignedInt64!
}

"""The minimum subtotal required for the discount to apply."""
type Shopify_DiscountMinimumSubtotal {
  """The minimum subtotal that's required for the discount to be applied."""
  greaterThanOrEqualToSubtotal: Shopify_MoneyV2!
}

"""A node containing a code discount and its related events."""
type Shopify_DiscountCodeNode implements Shopify_HasEvents & Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_Node {
  """The underlying code discount object."""
  codeDiscount: Shopify_DiscountCode!

  """The paginated list of events associated with the host subject."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_EventSortKeys = ID

    """
    Supported filter parameters:
     - `comments`
     - `created_at`
     - `subject_type`
     - `verb`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_EventConnection!

  """A globally-unique identifier."""
  id: ID!

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String!

    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield

  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID

    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!

  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!

    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!
}

"""
The type of discount associated with the discount code. For example, the discount code might offer a basic discount of a fixed percentage, or a fixed amount, on specific products or the order. Alternatively, the discount might offer the customer free shipping on their order. A third option is a Buy X, Get Y (BXGY) discount, which offers a customer discounts on select products if they add a specific product to their order.
"""
union Shopify_DiscountCode = Shopify_DiscountCodeApp | Shopify_DiscountCodeBasic | Shopify_DiscountCodeBxgy | Shopify_DiscountCodeFreeShipping

"""A code app discount."""
type Shopify_DiscountCodeApp {
  """The app discount type providing the discount type."""
  appDiscountType: Shopify_AppDiscountType!

  """Whether the discount can be applied only once per customer."""
  appliesOncePerCustomer: Boolean!

  """The number of times that the discount has been used."""
  asyncUsageCount: Int!

  """The number of redeem codes for the discount."""
  codeCount: Int!

  """A list of redeem codes for the discount."""
  codes(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_DiscountCodeSortKeys = ID

    """
    Supported filter parameters:
     - `times_used`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_DiscountRedeemCodeConnection!

  """Determines which discount classes the discount can combine with."""
  combinesWith: Shopify_DiscountCombinesWith!

  """The date and time when the discount was created."""
  createdAt: DateTime!

  """The customers that can use the discount."""
  customerSelection: Shopify_DiscountCustomerSelection!

  """The class of the discount for combining purposes."""
  discountClass: Shopify_DiscountClass!

  """The ID for the discount."""
  discountId: ID!

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """The error history on the most recent version of the discount."""
  errorHistory: Shopify_FunctionsErrorHistory

  """Indicates whether there are any timeline comments on the discount."""
  hasTimelineComment: Boolean!

  """
  The number of times a discount applies on recurring purchases (subscriptions).
  """
  recurringCycleLimit: Int

  """URLs that can be used to share the discount."""
  shareableUrls: [Shopify_DiscountShareableUrl!]!

  """The date and time when the discount starts."""
  startsAt: DateTime!

  """The status of the discount."""
  status: Shopify_DiscountStatus!

  """The title of the discount."""
  title: String!

  """The total sales from orders where the discount was used."""
  totalSales: Shopify_MoneyV2

  """The maximum number of times that the discount can be used."""
  usageLimit: Int
}

"""
An auto-generated type for paginating through multiple DiscountRedeemCodes.
"""
type Shopify_DiscountRedeemCodeConnection {
  """A list of edges."""
  edges: [Shopify_DiscountRedeemCodeEdge!]!

  """A list of the nodes contained in DiscountRedeemCodeEdge."""
  nodes: [Shopify_DiscountRedeemCode!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one DiscountRedeemCode and a cursor during pagination.
"""
type Shopify_DiscountRedeemCodeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DiscountRedeemCodeEdge."""
  node: Shopify_DiscountRedeemCode!
}

"""
A code that a customer can use at checkout to receive a discount. For example, a customer can use the redeem code 'SUMMER20' at checkout to receive a 20% discount on their entire order.
"""
type Shopify_DiscountRedeemCode {
  """
  The number of times that the discount redeem code has been used. This value is updated asynchronously and can be different than the actual usage count.
  """
  asyncUsageCount: Int!

  """The code that a customer can use at checkout to receive a discount."""
  code: String!

  """The application that created the discount redeem code."""
  createdBy: Shopify_App

  """A globally-unique identifier of the discount redeem code."""
  id: ID!
}

"""
The type used for targeting a set of customers who are eligible for the discount. For example, the discount might be available to all customers or it might only be available to a specific set of customers. You can define the set of customers by targeting a list of customer segments, or by targeting a list of specific customers.
"""
union Shopify_DiscountCustomerSelection = Shopify_DiscountCustomerAll | Shopify_DiscountCustomerSegments | Shopify_DiscountCustomers

"""
The `DiscountCustomerAll` object lets you target all customers for discount eligibility.
"""
type Shopify_DiscountCustomerAll {
  """
  Whether the discount can be applied by all customers. This value is always `true`.
  """
  allCustomers: Boolean!
}

"""
A list of customer segments that contain the customers that the discount applies to.
"""
type Shopify_DiscountCustomerSegments {
  """
  A list of customer segments that contain the customers who can use the discount.
  """
  segments: [Shopify_Segment!]!
}

"""A list of customers eligible for the discount."""
type Shopify_DiscountCustomers {
  """The list of customers eligible for the discount."""
  customers: [Shopify_Customer!]!
}

"""A shareable URL for a discount code."""
type Shopify_DiscountShareableUrl {
  """
  The image URL of the item (product or collection) to which the discount applies.
  """
  targetItemImage: Shopify_Image

  """The type of page that's associated with the URL."""
  targetType: Shopify_DiscountShareableUrlTargetType!

  """The title of the page that's associated with the URL."""
  title: String!

  """The URL for the discount code."""
  url: Url!
}

enum Shopify_DiscountShareableUrlTargetType {
  HOME
  PRODUCT
  COLLECTION
}

"""
A code discount that offers customers a percentage or fixed amount discount on specific products, collections, or the entire order.
"""
type Shopify_DiscountCodeBasic {
  """Whether the discount can be applied only once per customer."""
  appliesOncePerCustomer: Boolean!

  """The number of times that the discount has been used."""
  asyncUsageCount: Int!

  """The number of redeem codes for the discount."""
  codeCount: Int!

  """A list of redeem codes for the discount."""
  codes(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_DiscountCodeSortKeys = ID

    """
    Supported filter parameters:
     - `times_used`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_DiscountRedeemCodeConnection!

  """Determines which discount classes the discount can combine with."""
  combinesWith: Shopify_DiscountCombinesWith!

  """The date and time when the discount was created."""
  createdAt: DateTime!

  """
  The qualifying items in an order, the quantity of each one, and the total value of the discount.
  """
  customerGets: Shopify_DiscountCustomerGets!

  """The customers that can use the discount."""
  customerSelection: Shopify_DiscountCustomerSelection!

  """The class of the discount for combining purposes."""
  discountClass: Shopify_MerchandiseDiscountClass!

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """Indicates whether there are any timeline comments on the discount."""
  hasTimelineComment: Boolean!

  """
  The minimum subtotal or quantity that's required for the discount to be applied.
  """
  minimumRequirement: Shopify_DiscountMinimumRequirement

  """
  The number of times a discount applies on recurring purchases (subscriptions).
  """
  recurringCycleLimit: Int

  """URLs that can be used to share the discount."""
  shareableUrls: [Shopify_DiscountShareableUrl!]!

  """A short summary of the discount."""
  shortSummary: String!

  """The date and time when the discount starts."""
  startsAt: DateTime!

  """The status of the discount."""
  status: Shopify_DiscountStatus!

  """A detailed summary of the discount."""
  summary: String!

  """The title of the discount."""
  title: String!

  """The total sales from orders where the discount was used."""
  totalSales: Shopify_MoneyV2

  """The maximum number of times that the discount can be used."""
  usageLimit: Int
}

"""A code discount that offers customers a Buy X, Get Y (BXGY) discount."""
type Shopify_DiscountCodeBxgy {
  """Whether the discount can be applied only once per customer."""
  appliesOncePerCustomer: Boolean!

  """The number of times that the discount has been used."""
  asyncUsageCount: Int!

  """The number of redeem codes for the discount."""
  codeCount: Int!

  """A list of redeem codes for the discount."""
  codes(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_DiscountCodeSortKeys = ID

    """
    Supported filter parameters:
     - `times_used`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_DiscountRedeemCodeConnection!

  """Determines which discount classes the discount can combine with."""
  combinesWith: Shopify_DiscountCombinesWith!

  """The date and time when the discount was created."""
  createdAt: DateTime!

  """
  The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
  """
  customerBuys: Shopify_DiscountCustomerBuys!

  """
  The qualifying items in an order, the quantity of each one, and the total value of the discount.
  """
  customerGets: Shopify_DiscountCustomerGets!

  """The customers that can use the discount."""
  customerSelection: Shopify_DiscountCustomerSelection!

  """The class of the discount for combining purposes."""
  discountClass: Shopify_MerchandiseDiscountClass!

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """Indicates whether there are any timeline comments on the discount."""
  hasTimelineComment: Boolean!

  """URLs that can be used to share the discount."""
  shareableUrls: [Shopify_DiscountShareableUrl!]!

  """The date and time when the discount starts."""
  startsAt: DateTime!

  """The status of the discount."""
  status: Shopify_DiscountStatus!

  """A detailed summary of the discount."""
  summary: String!

  """The title of the discount."""
  title: String!

  """The total sales from orders where the discount was used."""
  totalSales: Shopify_MoneyV2

  """The maximum number of times that the discount can be used."""
  usageLimit: Int

  """
  The maximum number of times that the discount can be applied to an order.
  """
  usesPerOrderLimit: Int
}

"""
The prerequisite items and prerequisite value that a customer must have on the order for the discount to be applicable.
"""
type Shopify_DiscountCustomerBuys {
  """The items required for the discount to be applicable."""
  items: Shopify_DiscountItems!

  """The prerequisite value."""
  value: Shopify_DiscountCustomerBuysValue!
}

"""
The prerequisite for the discount to be applicable. For example, the discount might require a customer to buy a minimum quantity of select items. Alternatively, the discount might require a customer to spend a minimum amount on select items.
"""
union Shopify_DiscountCustomerBuysValue = Shopify_DiscountPurchaseAmount | Shopify_DiscountQuantity

"""
A purchase amount in the context of a discount. This object can be used to define the minimum purchase amount required for a discount to be applicable.
"""
type Shopify_DiscountPurchaseAmount {
  """The purchase amount in decimal format."""
  amount: Decimal!
}

"""A code discount that offers customers free shipping on their order."""
type Shopify_DiscountCodeFreeShipping {
  """
  Whether the discount applies on regular one-time-purchase shipping lines.
  """
  appliesOnOneTimePurchase: Boolean!

  """Whether the discount applies on subscription shipping lines."""
  appliesOnSubscription: Boolean!

  """Whether the discount can be applied only once per customer."""
  appliesOncePerCustomer: Boolean!

  """The number of times that the discount has been used."""
  asyncUsageCount: Int!

  """The number of redeem codes for the discount."""
  codeCount: Int!

  """A list of redeem codes for the discount."""
  codes(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_DiscountCodeSortKeys = ID

    """
    Supported filter parameters:
     - `times_used`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_DiscountRedeemCodeConnection!

  """Determines which discount classes the discount can combine with."""
  combinesWith: Shopify_DiscountCombinesWith!

  """The date and time when the discount was created."""
  createdAt: DateTime!

  """The customers that can use the discount."""
  customerSelection: Shopify_DiscountCustomerSelection!

  """A shipping destination that qualifies for the discount."""
  destinationSelection: Shopify_DiscountShippingDestinationSelection!

  """The class of the discount for combining purposes."""
  discountClass: Shopify_ShippingDiscountClass!

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """Indicates whether there are any timeline comments on the discount."""
  hasTimelineComment: Boolean!

  """
  The maximum shipping price amount accepted to qualify for the discount.
  """
  maximumShippingPrice: Shopify_MoneyV2

  """
  The minimum subtotal or quantity that's required for the discount to be applied.
  """
  minimumRequirement: Shopify_DiscountMinimumRequirement

  """
  The number of times a discount applies on recurring purchases (subscriptions).
  """
  recurringCycleLimit: Int

  """URLs that can be used to share the discount."""
  shareableUrls: [Shopify_DiscountShareableUrl!]!

  """A short summary of the discount."""
  shortSummary: String!

  """The date and time when the discount starts."""
  startsAt: DateTime!

  """The status of the discount."""
  status: Shopify_DiscountStatus!

  """A detailed summary of the discount."""
  summary: String!

  """The title of the discount."""
  title: String!

  """The total sales from orders where the discount was used."""
  totalSales: Shopify_MoneyV2

  """The maximum number of times that the discount can be used."""
  usageLimit: Int
}

"""
The type used to target the eligible countries of an order's shipping destination for which the discount applies. For example, the discount might be applicable when shipping to all countries, or only to a set of countries.
"""
union Shopify_DiscountShippingDestinationSelection = Shopify_DiscountCountries | Shopify_DiscountCountryAll

"""The shipping destinations where the discount can be applied."""
type Shopify_DiscountCountries {
  """The codes for the countries where the discount can be applied."""
  countries: [Shopify_CountryCode!]!

  """
  Whether the discount is applicable to countries that have not been defined in the shop's shipping zones.
  """
  includeRestOfWorld: Boolean!
}

"""
The `DiscountCountryAll` object lets you target all countries as shipping destination for discount eligibility.
"""
type Shopify_DiscountCountryAll {
  """
  Whether the discount can be applied to all countries as shipping destination. This value is always `true`.
  """
  allCountries: Boolean!
}

enum Shopify_ShippingDiscountClass {
  SHIPPING
}

"""A discount wrapper node."""
type Shopify_DiscountNode implements Shopify_HasEvents & Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_Node {
  """A discount."""
  discount: Shopify_Discount!

  """The paginated list of events associated with the host subject."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_EventSortKeys = ID

    """
    Supported filter parameters:
     - `comments`
     - `created_at`
     - `subject_type`
     - `verb`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_EventConnection!

  """A globally-unique identifier."""
  id: ID!

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String!

    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield

  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID

    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!

  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!

    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!
}

"""A discount."""
union Shopify_Discount = Shopify_DiscountAutomaticApp | Shopify_DiscountAutomaticBasic | Shopify_DiscountAutomaticBxgy | Shopify_DiscountCodeApp | Shopify_DiscountCodeBasic | Shopify_DiscountCodeBxgy | Shopify_DiscountCodeFreeShipping

"""
An automatic discount that offers customers a Buy X, Get Y (BXGY) discount.
"""
type Shopify_DiscountAutomaticBxgy implements Shopify_HasEvents & Shopify_Node {
  """
  The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count.
  """
  asyncUsageCount: Int!

  """Determines which discount classes the discount can combine with."""
  combinesWith: Shopify_DiscountCombinesWith!

  """The date and time when the discount was created."""
  createdAt: DateTime!

  """
  The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
  """
  customerBuys: Shopify_DiscountCustomerBuys!

  """
  The qualifying items in an order, the quantity of each one, and the total value of the discount.
  """
  customerGets: Shopify_DiscountCustomerGets!

  """The class of the discount for combining purposes."""
  discountClass: Shopify_MerchandiseDiscountClass!

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """The paginated list of events associated with the host subject."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_EventSortKeys = ID

    """
    Supported filter parameters:
     - `comments`
     - `created_at`
     - `subject_type`
     - `verb`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_EventConnection!

  """A legacy unique identifier for the discount."""
  id: ID! @deprecated(reason: "Use DiscountAutomaticNode.id instead.")

  """The date and time when the discount starts."""
  startsAt: DateTime!

  """The status of the discount."""
  status: Shopify_DiscountStatus!

  """A detailed summary of the discount."""
  summary: String!

  """The title of the discount."""
  title: String!

  """The number of times that the discount has been used."""
  usageCount: Int! @deprecated(reason: "Use `asyncUsageCount` instead.")

  """
  The maximum number of times that the discount can be applied to an order.
  """
  usesPerOrderLimit: Int
}

"""Represents a product variant."""
type Shopify_ProductVariant implements Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_HasPublishedTranslations & Shopify_LegacyInteroperability & Shopify_Navigable & Shopify_Node {
  """Whether the product variant is available for sale."""
  availableForSale: Boolean!

  """The value of the barcode associated with the product."""
  barcode: String

  """The compare-at price of the variant in the default shop currency."""
  compareAtPrice: Money

  """The pricing that applies for a customer in a given context."""
  contextualPricing(
    """The context used to generate contextual pricing for the variant."""
    context: Shopify_ContextualPricingContextInput!
  ): Shopify_ProductVariantContextualPricing!

  """The date and time when the variant was created."""
  createdAt: DateTime!

  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """The delivery profile for the variant."""
  deliveryProfile: Shopify_DeliveryProfile

  """
  Display name of the variant, based on product's title + variant's title.
  """
  displayName: String!

  """The fulfillment service associated with the product."""
  fulfillmentService: Shopify_FulfillmentService @deprecated(reason: "Multi-managed inventory introduced a [breaking change](https://shopify.dev/api/release-notes/2022-07#shipping-and-fulfillment) to this field, therefore this field will no longer be supported. Fulfillment services will all be opted into SKU sharing in 2023-04. To see all associated fulfillment services use [InventoryLevelConnection](https://shopify.dev/api/admin-graphql/latest/connections/InventoryLevelConnection#field-location-inventorylevels) and [InventoryLevel#location](https://shopify.dev/api/admin-graphql/latest/objects/InventoryLevel#field-inventorylevel-location).")

  """
  Whether changes to the fulfillment service for the product variant are allowed.
  """
  fulfillmentServiceEditable: Shopify_EditableProperty!

  """The Harmonized System Code (or HS Tariff Code) for the variant."""
  harmonizedSystemCode: String @deprecated(reason: "Use `InventoryItem.harmonizedSystemCode` instead.")

  """A globally-unique identifier."""
  id: ID!

  """The featured image for the variant."""
  image: Shopify_Image

  """The inventory item, which is used to query for inventory information."""
  inventoryItem: Shopify_InventoryItem!

  """
  The fulfillment service that tracks the number of items in stock for the product variant.
  """
  inventoryManagement: Shopify_ProductVariantInventoryManagement! @deprecated(reason: "Use tracked attribute on `inventoryItem` instead.")

  """
  Whether customers are allowed to place an order for the product variant when it's out of stock.
  """
  inventoryPolicy: Shopify_ProductVariantInventoryPolicy!

  """The total sellable quantity of the variant."""
  inventoryQuantity: Int

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The media associated with the product variant."""
  media(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MediaConnection!

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String!

    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield

  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID

    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!

  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!

  """
  The order of the product variant in the list of product variants. The first position in the list is 1.
  """
  position: Int!

  """
  List of prices and compare-at prices in the presentment currencies for this shop.
  """
  presentmentPrices(
    """The presentment currencies prices should return in."""
    presentmentCurrencies: [Shopify_CurrencyCode]

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductVariantPricePairConnection! @deprecated(reason: "Use `contextualPricing` instead.")

  """The price of the product variant in the default shop currency."""
  price: Money!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!

    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!

  """The product that this variant belongs to."""
  product: Shopify_Product!

  """
  Whether a customer needs to provide a shipping address when placing an order for the product variant.
  """
  requiresShipping: Boolean! @deprecated(reason: "Use `InventoryItem.requiresShipping` instead.")

  """List of product options applied to the variant."""
  selectedOptions: [Shopify_SelectedOption!]!

  """
  The total sellable quantity of the variant for online channels.
  This doesn't represent the total available inventory or capture
  [limitations based on customer location](https://help.shopify.com/manual/markets/inventory_and_fulfillment).
  """
  sellableOnlineQuantity: Int!

  """Count of selling plan groups associated with the product variant."""
  sellingPlanGroupCount: Int!

  """
  A list of all selling plan groups defined in the current shop associated with the product variant.
  """
  sellingPlanGroups(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SellingPlanGroupConnection!

  """
  An identifier for the product variant in the shop. Required in order to connect to a fulfillment service.
  """
  sku: String

  """
  The Storefront GraphQL API ID of the `ProductVariant`.
  
  As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
  """
  storefrontId: StorefrontId! @deprecated(reason: "Use `id` instead.")

  """The tax code for the product variant."""
  taxCode: String

  """Whether a tax is charged when the product variant is sold."""
  taxable: Boolean!

  """The title of the product variant."""
  title: String!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [Shopify_PublishedTranslation!]!

  """
  The date and time (ISO 8601 format) when the product variant was last modified.
  """
  updatedAt: DateTime!

  """
  The weight of the product variant in the unit system specified with weight_unit.
  """
  weight: Float

  """
  The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: `g`, `kg`, `oz`, `lb`.
  """
  weightUnit: Shopify_WeightUnit!
}

"""Published translations associated with the resource."""
interface Shopify_HasPublishedTranslations {
  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [Shopify_PublishedTranslation!]!
}

"""
A default cursor that you can use in queries to paginate your results. Each edge in a connection can
return a cursor, which is a reference to the edge's position in the connection. You can use an edge's cursor as
the starting point to retrieve the nodes before or after it in a connection.

To learn more about using cursor-based pagination, refer to
[Paginating results with GraphQL](https://shopify.dev/api/usage/pagination-graphql).
"""
interface Shopify_Navigable {
  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!
}

"""The attribute editable information."""
type Shopify_EditableProperty {
  """Whether the attribute is locked for editing."""
  locked: Boolean!

  """The reason the attribute is locked for editing."""
  reason: FormattedString
}

enum Shopify_ProductVariantInventoryManagement {
  SHOPIFY
  NOT_MANAGED
  FULFILLMENT_SERVICE
}

enum Shopify_ProductVariantInventoryPolicy {
  DENY
  CONTINUE
}

"""
An auto-generated type for paginating through multiple ProductVariantPricePairs.
"""
type Shopify_ProductVariantPricePairConnection {
  """A list of edges."""
  edges: [Shopify_ProductVariantPricePairEdge!]!

  """A list of the nodes contained in ProductVariantPricePairEdge."""
  nodes: [Shopify_ProductVariantPricePair!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ProductVariantPricePair and a cursor during pagination.
"""
type Shopify_ProductVariantPricePairEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ProductVariantPricePairEdge."""
  node: Shopify_ProductVariantPricePair!
}

"""The compare-at price and price of a variant sharing a currency."""
type Shopify_ProductVariantPricePair {
  """The compare-at price of the variant with associated currency."""
  compareAtPrice: Shopify_MoneyV2

  """The price of the variant with associated currency."""
  price: Shopify_MoneyV2!
}

"""
Properties used by customers to select a product variant.
Products can have multiple options, like different sizes or colors.
"""
type Shopify_SelectedOption {
  """The product option’s name."""
  name: String!

  """The product option’s value."""
  value: String!
}

enum Shopify_WeightUnit {
  KILOGRAMS
  GRAMS
  POUNDS
  OUNCES
}

"""Represents the location where the physical good resides."""
type Shopify_Location implements Shopify_HasMetafieldDefinitions & Shopify_LegacyInteroperability & Shopify_Node {
  """Whether this location can be reactivated."""
  activatable: Boolean!

  """The address of this location."""
  address: Shopify_LocationAddress!

  """Whether the location address has been verified."""
  addressVerified: Boolean!

  """Whether this location can be deactivated."""
  deactivatable: Boolean!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) that the location was deactivated at. For example, 3:30 pm on September 7, 2019 in the time zone of UTC (Universal Time Coordinated) is represented as `"2019-09-07T15:50:00Z`".
  """
  deactivatedAt: String

  """Whether this location can be deleted."""
  deletable: Boolean!

  """Name of the service provider that fulfills from this location."""
  fulfillmentService: Shopify_FulfillmentService

  """Whether this location can fulfill online orders."""
  fulfillsOnlineOrders: Boolean!

  """Whether this location has active inventory."""
  hasActiveInventory: Boolean!

  """Whether this location has orders that need to be fulfilled."""
  hasUnfulfilledOrders: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """The quantities of an inventory item at this location."""
  inventoryLevel(
    """The ID of the inventory item to obtain the inventory level for."""
    inventoryItemId: ID!
  ): Shopify_InventoryLevel

  """
  A list of the quantities of the inventory items that can be stocked at this location.
  """
  inventoryLevels(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """
    Supported filter parameters:
     - `created_at`
     - `inventory_group_id`
     - `inventory_item_id`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_InventoryLevelConnection!

  """Whether the location is active."""
  isActive: Boolean!

  """Whether the location is your primary location for shipping inventory."""
  isPrimary: Boolean! @deprecated(reason: "The concept of a primary location is deprecated, shipsInventory can be used to get a fallback location")

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID

    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!

  """The name of the location."""
  name: String!

  """
  Whether this location is used for calculating shipping rates. In multi-origin shipping mode, this flag is ignored.
  """
  shipsInventory: Boolean!

  """List of suggested addresses for this location (empty if none)."""
  suggestedAddresses: [Shopify_LocationSuggestedAddress!]!
}

"""Represents the address of a location."""
type Shopify_LocationAddress {
  """The first line of the address for the location."""
  address1: String

  """The second line of the address for the location."""
  address2: String

  """The city of the location."""
  city: String

  """The country of the location."""
  country: String

  """The country code of the location."""
  countryCode: String

  """A formatted version of the address for the location."""
  formatted: [String!]!

  """The latitude coordinates of the location."""
  latitude: Float

  """The longitude coordinates of the location."""
  longitude: Float

  """The phone number of the location."""
  phone: String

  """The province of the location."""
  province: String

  """
  The code for the province, state, or district of the address of the location.
  """
  provinceCode: String

  """The ZIP code of the location."""
  zip: String
}

"""
An auto-generated type for paginating through multiple InventoryLevels.
"""
type Shopify_InventoryLevelConnection {
  """A list of edges."""
  edges: [Shopify_InventoryLevelEdge!]!

  """A list of the nodes contained in InventoryLevelEdge."""
  nodes: [Shopify_InventoryLevel!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one InventoryLevel and a cursor during pagination.
"""
type Shopify_InventoryLevelEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of InventoryLevelEdge."""
  node: Shopify_InventoryLevel!
}

"""Represents a suggested address for a location."""
type Shopify_LocationSuggestedAddress {
  """The first line of the suggested address."""
  address1: String

  """The second line of the suggested address."""
  address2: String

  """The city of the suggested address."""
  city: String

  """The country of the suggested address."""
  country: String

  """The country code of the suggested address."""
  countryCode: Shopify_CountryCode

  """A formatted version of the suggested address."""
  formatted: [String!]!

  """The province of the suggested address."""
  province: String

  """
  The code for the province, state, or district of the suggested address.
  """
  provinceCode: String

  """The ZIP code of the suggested address."""
  zip: String
}

"""
Represents a collection of the general settings and information about the shop.
"""
type Shopify_Shop implements Shopify_HasMetafields & Shopify_HasPublishedTranslations & Shopify_Node {
  """
  A list of the shop's active alert messages that appear in the Shopify admin.
  """
  alerts: [Shopify_ShopAlert!]!

  """The token required to query the shop's reports or dashboards."""
  analyticsToken: String! @deprecated(reason: "Not supported anymore.")

  """
  The paginated list of fulfillment orders assigned to fulfillment services.
  """
  assignedFulfillmentOrders(
    """
    The assigment status of the fulfillment orders that should be returned.
    """
    assignmentStatus: Shopify_FulfillmentOrderAssignmentStatus

    """
    Returns fulfillment orders only for certain locations, specified by a list of location IDs.
    """
    locationIds: [ID]

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_FulfillmentOrderSortKeys = ID
  ): Shopify_FulfillmentOrderConnection!

  """The list of sales channels not currently installed on the shop."""
  availableChannelApps(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_AppConnection!

  """The shop's billing address information."""
  billingAddress: Shopify_MailingAddress!

  """Exposes the number of channels."""
  channelCount: Int! @deprecated(reason: "Use `publicationCount` instead.")

  """List of all channel definitions associated with a shop."""
  channelDefinitionsForInstalledChannels: [Shopify_AvailableChannelDefinitionsByChannel!]!

  """List of the shop's active sales channels."""
  channels(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ChannelConnection! @deprecated(reason: "Use `QueryRoot.channels` instead.")

  """Specifies whether the shop supports checkouts via Checkout API."""
  checkoutApiSupported: Boolean!

  """Return a collection by its handle."""
  collectionByHandle(
    """The handle of the collection."""
    handle: String!
  ): Shopify_Collection @deprecated(reason: "Use `QueryRoot.collectionByHandle` instead.")

  """List of the shop's collection saved searches."""
  collectionSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.collectionSavedSearches` instead.")

  """List of the shop's collections."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_CollectionSortKeys = ID

    """
    Supported filter parameters:
     - `collection_type`
     - `publishable_status`
     - `published_status`
     - `title`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_CollectionConnection! @deprecated(reason: "Use `QueryRoot.collections` instead.")

  """
  The public-facing contact email address for the shop.
  Customers will use this email to communicate with the shop owner.
  """
  contactEmail: String!

  """Countries that have been defined in shipping zones for the shop."""
  countriesInShippingZones: Shopify_CountriesInShippingZones!

  """The three letter code for the currency that the shop sells in."""
  currencyCode: Shopify_CurrencyCode!

  """How currencies are displayed on your store."""
  currencyFormats: Shopify_CurrencyFormats!

  """
  The presentment currency settings for the shop excluding the shop's own currency.
  """
  currencySettings(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CurrencySettingConnection!

  """
  Whether customer accounts are required, optional, or disabled for the shop.
  """
  customerAccounts: Shopify_ShopCustomerAccountsSetting!

  """List of the shop's customer saved searches."""
  customerSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_CustomerSavedSearchSortKeys = ID

    """
    Supported filter parameters:
     - `name`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.customerSavedSearches` instead.")

  """A list of tags that have been added to customer accounts."""
  customerTags(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): Shopify_StringConnection!

  """Customer accounts associated to the shop."""
  customers(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_CustomerSortKeys = ID

    """
    Supported filter parameters:
     - `accepts_marketing`
     - `country`
     - `customer_date`
     - `email`
     - `last_abandoned_order_date`
     - `order_date`
     - `orders_count`
     - `phone`
     - `state`
     - `tag`
     - `tag_not`
     - `total_spent`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_CustomerConnection! @deprecated(reason: "Use `QueryRoot.customers` instead.")

  """The shop's meta description used in search engine results."""
  description: String

  """The domains configured for the shop."""
  domains: [Shopify_Domain!]! @deprecated(reason: "Use `domainsPaginated` instead.")

  """List of the shop's draft order saved searches."""
  draftOrderSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.draftOrderSavedSearches` instead.")

  """A list of tags that have been added to draft orders."""
  draftOrderTags(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): Shopify_StringConnection!

  """List of saved draft orders on the shop."""
  draftOrders(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_DraftOrderSortKeys = ID

    """
    Supported filter parameters:
     - `created_at`
     - `customer_id`
     - `source`
     - `status`
     - `tag`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_DraftOrderConnection! @deprecated(reason: "Use `QueryRoot.draftOrders` instead.")

  """
  The shop owner's email address.
  Shopify will use this email address to communicate with the shop owner.
  """
  email: String!

  """The presentment currencies enabled for the shop."""
  enabledPresentmentCurrencies: [Shopify_CurrencyCode!]!

  """The set of features enabled for the shop."""
  features: Shopify_ShopFeatures!

  """
  The paginated list of merchant-managed and third-party fulfillment orders.
  """
  fulfillmentOrders(
    """Whether to include closed fulfillment orders."""
    includeClosed: Boolean = false

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_FulfillmentOrderSortKeys = ID

    """
    Supported filter parameters:
     - `assigned_location_id`
     - `status`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_FulfillmentOrderConnection!

  """List of the shop's installed fulfillment services."""
  fulfillmentServices: [Shopify_FulfillmentService!]!

  """The shop's time zone as defined by the IANA."""
  ianaTimezone: String!

  """A globally-unique identifier."""
  id: ID!

  """List of the shop's inventory items."""
  inventoryItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """
    Supported filter parameters:
     - `created_at`
     - `id`
     - `sku`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_InventoryItemConnection! @deprecated(reason: "Use `QueryRoot.inventoryItems` instead.")

  """
  The number of pendings orders on the shop.
  Limited to a maximum of 10000.
  """
  limitedPendingOrderCount: Shopify_LimitedPendingOrderCount!

  """List of active locations of the shop."""
  locations(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_LocationSortKeys = NAME

    """
    Supported filter parameters:
     - `active`
     - `address1`
     - `address2`
     - `city`
     - `country`
     - `legacy`
     - `name`
     - `province`
     - `zip`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """If true, also include the legacy locations of fulfillment services."""
    includeLegacy: Boolean = false

    """If true, also include the locations that are deactivated."""
    includeInactive: Boolean = false
  ): Shopify_LocationConnection! @deprecated(reason: "Use `QueryRoot.locations` instead.")

  """List of a shop's marketing events."""
  marketingEvents(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_MarketingEventSortKeys = ID

    """
    Supported filter parameters:
     - `app_id`
     - `description`
     - `started_at`
     - `type`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MarketingEventConnection! @deprecated(reason: "Use `QueryRoot.marketingEvents` instead.")

  """The approval signals for a shop to support onboarding to channel apps."""
  merchantApprovalSignals: Shopify_MerchantApprovalSignals

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String!

    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield

  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!

  """The shop's .myshopify.com domain name."""
  myshopifyDomain: String!

  """The shop's name."""
  name: String!

  """The shop's settings related to navigation."""
  navigationSettings: [Shopify_NavigationItem!]!

  """The prefix that appears before order numbers."""
  orderNumberFormatPrefix: String!

  """The suffix that appears after order numbers."""
  orderNumberFormatSuffix: String!

  """List of the shop's order saved searches."""
  orderSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.orderSavedSearches` instead.")

  """A list of tags that have been added to orders."""
  orderTags(
    """Returns up to the first `n` elements from the list."""
    first: Int!

    """Sort type."""
    sort: Shopify_ShopTagSort = ALPHABETICAL
  ): Shopify_StringConnection!

  """A list of the shop's orders."""
  orders(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_OrderSortKeys = PROCESSED_AT

    """
    Supported filter parameters:
     - `cart_token`
     - `channel`
     - `channel_id`
     - `chargeback_status`
     - `checkout_token`
     - `created_at`
     - `credit_card_last4`
     - `customer_id`
     - `delivery_method`
     - `discount_code`
     - `earliest_fulfill_by`
     - `email`
     - `financial_status`
     - `fraud_protection_level`
     - `fulfillment_location_id`
     - `fulfillment_status`
     - `gateway`
     - `location_id`
     - `name`
     - `payment_id`
     - `payment_provider_id`
     - `processed_at`
     - `reference_location_id`
     - `return_status`
     - `risk_level`
     - `sales_channel`
     - `source_identifier`
     - `source_name`
     - `status`
     - `tag`
     - `tag_not`
     - `test`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_OrderConnection! @deprecated(reason: "Use `QueryRoot.orders` instead.")

  """The shop's settings related to payments."""
  paymentSettings: Shopify_PaymentSettings!

  """Number of pending orders on the shop."""
  pendingOrderCount: Int! @deprecated(reason: "Use `limitedPendingOrderCount` instead.")

  """The shop's billing plan."""
  plan: Shopify_ShopPlan!

  """List of the shop's price rule saved searches."""
  priceRuleSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.priceRuleSavedSearches` instead.")

  """List of the shop’s price rules."""
  priceRules(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_PriceRuleSortKeys = ID

    """
    Supported filter parameters:
     - `created_at`
     - `discount_type`
     - `ends_at`
     - `starts_at`
     - `status`
     - `times_used`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_PriceRuleConnection! @deprecated(reason: "Use `QueryRoot.priceRules` instead.")

  """The primary domain of the shop's online store."""
  primaryDomain: Shopify_Domain!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!

    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!

  """Return a product by its handle."""
  productByHandle(
    """
    A unique string that identifies the product. Handles are automatically generated based on the product's title, and are always lowercase. Whitespace and special characters are replaced with a hyphen: `-`. If there are multiple consecutive whitespace or special characters, then they're replaced with a single hyphen. Whitespace or special characters at the beginning are removed. If a duplicate product title is used, then the handle is auto-incremented by one. For example, if you had two products called `Potion`, then their handles would be `potion` and `potion-1`. After a product has been created, changing the product title doesn't update the handle.
    """
    handle: String!
  ): Shopify_Product @deprecated(reason: "Use `QueryRoot.productByHandle` instead.")

  """The list of all images of all products for the shop."""
  productImages(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductImageSortKeys = CREATED_AT
  ): Shopify_ImageConnection!

  """List of the shop's product saved searches."""
  productSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.productSavedSearches` instead.")

  """A list of tags that have been added to products."""
  productTags(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): Shopify_StringConnection!

  """The list of types added to products."""
  productTypes(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): Shopify_StringConnection!

  """List of the shop's product variants."""
  productVariants(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductVariantSortKeys = ID

    """
    Supported filter parameters:
     - `barcode`
     - `collection`
     - `delivery_profile_id`
     - `exclude_composite`
     - `gift_card`
     - `inventory_quantity`
     - `location_id`
     - `managed`
     - `managed_by`
     - `product_id`
     - `product_status`
     - `product_type`
     - `publishable_status`
     - `published_status`
     - `sku`
     - `tag`
     - `tag_not`
     - `taxable`
     - `title`
     - `updated_at`
     - `vendor`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_ProductVariantConnection! @deprecated(reason: "Use `QueryRoot.productVariants` instead.")

  """The list of vendors added to products."""
  productVendors(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): Shopify_StringConnection!

  """List of the shop's products."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductSortKeys = ID

    """
    Supported filter parameters:
     - `barcode`
     - `created_at`
     - `delivery_profile_id`
     - `error_feedback`
     - `gift_card`
     - `has_only_composites`
     - `has_only_default_variant`
     - `id`
     - `inventory_total`
     - `is_price_reduced`
     - `out_of_stock_somewhere`
     - `price`
     - `product_type`
     - `publishable_status`
     - `published_status`
     - `sku`
     - `status`
     - `tag`
     - `tag_not`
     - `title`
     - `updated_at`
     - `vendor`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_ProductConnection! @deprecated(reason: "Use `QueryRoot.products`.")

  """
  The shop's limits for specific resources. For example, the maximum number ofvariants allowed per product, or the maximum number of locations allowed.
  """
  resourceLimits: Shopify_ShopResourceLimits!

  """The URL of the rich text editor that can be used for mobile devices."""
  richTextEditorUrl: Url!

  """Fetches a list of admin search results by a specified query."""
  search(
    """The search query to filter by."""
    query: String!

    """The search result types to filter by."""
    types: [Shopify_SearchResultType]

    """Returns up to the first `n` elements from the list."""
    first: Int!

    """Returns the elements that come after the specified cursor."""
    after: String
  ): Shopify_SearchResultConnection!

  """
  The list of search filter options for the shop. These can be used to filter productvisibility for the shop.
  """
  searchFilters: Shopify_SearchFilterOptions!

  """Whether the shop has outstanding setup steps."""
  setupRequired: Boolean!

  """The list of countries that the shop ships to."""
  shipsToCountries: [Shopify_CountryCode!]!

  """The list of all legal policies associated with a shop."""
  shopPolicies: [Shopify_ShopPolicy!]!

  """Shopify Payments account information, including balances and payouts."""
  shopifyPaymentsAccount: Shopify_ShopifyPaymentsAccount @deprecated(reason: "Use `QueryRoot.shopifyPaymentsAccount` instead.")

  """The paginated list of the shop's staff members."""
  staffMembers(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_StaffMemberConnection!

  """
  The storefront access token of a private application. These are scoped per-application.
  """
  storefrontAccessTokens(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_StorefrontAccessTokenConnection!

  """The URL of the shop's storefront."""
  storefrontUrl: Url! @deprecated(reason: "Use `url` instead.")

  """Whether the shop charges taxes for shipping."""
  taxShipping: Boolean!

  """Whether applicable taxes are included in the shop's product prices."""
  taxesIncluded: Boolean!

  """The shop's time zone abbreviation."""
  timezoneAbbreviation: String!

  """The shop's time zone offset."""
  timezoneOffset: String!

  """The shop's time zone offset expressed as a number of minutes."""
  timezoneOffsetMinutes: Int!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [Shopify_PublishedTranslation!]!

  """The shop's unit system for weights and measures."""
  unitSystem: Shopify_UnitSystem!

  """Fetches a list of images uploaded to the shop by their IDs."""
  uploadedImagesByIds(
    """The IDs of the uploaded images."""
    imageIds: [ID!]!
  ): [Shopify_Image!]!

  """The URL of the shop's online store."""
  url: Url!

  """The shop's primary unit of weight for products and shipping."""
  weightUnit: Shopify_WeightUnit!
}

"""
An alert message that appears in the Shopify admin about a problem with a store setting, with an action to take. For example, you could show an alert to ask the merchant to enter their billing information to activate Shopify Plus.
"""
type Shopify_ShopAlert {
  """
  The text for the button in the alert that links to related information. For example, _Add credit card_.
  """
  action: Shopify_ShopAlertAction!

  """
  A description of the alert and further information, such as whether the merchant will be charged.
  """
  description: String!
}

"""An action associated to a shop alert, such as adding a credit card."""
type Shopify_ShopAlertAction {
  """The text for the button in the alert. For example, _Add credit card_."""
  title: String!

  """The target URL that the button links to."""
  url: Url!
}

enum Shopify_FulfillmentOrderAssignmentStatus {
  CANCELLATION_REQUESTED
  FULFILLMENT_REQUESTED
  FULFILLMENT_ACCEPTED
}

enum Shopify_FulfillmentOrderSortKeys {
  ID
  RELEVANCE
}

"""An auto-generated type for paginating through multiple Apps."""
type Shopify_AppConnection {
  """A list of edges."""
  edges: [Shopify_AppEdge!]!

  """A list of the nodes contained in AppEdge."""
  nodes: [Shopify_App!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one App and a cursor during pagination.
"""
type Shopify_AppEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of AppEdge."""
  node: Shopify_App!
}

"""
Represents an object containing all information for channels available to a shop.
"""
type Shopify_AvailableChannelDefinitionsByChannel {
  """The channel definitions for channels installed on a shop."""
  channelDefinitions: [Shopify_ChannelDefinition!]!

  """The name of the channel."""
  channelName: String!
}

"""An auto-generated type for paginating through multiple Channels."""
type Shopify_ChannelConnection {
  """A list of edges."""
  edges: [Shopify_ChannelEdge!]!

  """A list of the nodes contained in ChannelEdge."""
  nodes: [Shopify_Channel!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Channel and a cursor during pagination.
"""
type Shopify_ChannelEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ChannelEdge."""
  node: Shopify_Channel!
}

"""An auto-generated type for paginating through multiple SavedSearches."""
type Shopify_SavedSearchConnection {
  """A list of edges."""
  edges: [Shopify_SavedSearchEdge!]!

  """A list of the nodes contained in SavedSearchEdge."""
  nodes: [Shopify_SavedSearch!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SavedSearch and a cursor during pagination.
"""
type Shopify_SavedSearchEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SavedSearchEdge."""
  node: Shopify_SavedSearch!
}

"""
The list of all the countries from the combined shipping zones for the shop.
"""
type Shopify_CountriesInShippingZones {
  """The list of all the countries from all the combined shipping zones."""
  countryCodes: [Shopify_CountryCode!]!

  """Whether 'Rest of World' has been defined in any of the shipping zones."""
  includeRestOfWorld: Boolean!
}

"""
Currency formats configured for the merchant. These formats are available to use within Liquid.
"""
type Shopify_CurrencyFormats {
  """Money without currency in HTML."""
  moneyFormat: FormattedString!

  """Money without currency in emails."""
  moneyInEmailsFormat: String!

  """Money with currency in HTML."""
  moneyWithCurrencyFormat: FormattedString!

  """Money with currency in emails."""
  moneyWithCurrencyInEmailsFormat: String!
}

"""
An auto-generated type for paginating through multiple CurrencySettings.
"""
type Shopify_CurrencySettingConnection {
  """A list of edges."""
  edges: [Shopify_CurrencySettingEdge!]!

  """A list of the nodes contained in CurrencySettingEdge."""
  nodes: [Shopify_CurrencySetting!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one CurrencySetting and a cursor during pagination.
"""
type Shopify_CurrencySettingEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CurrencySettingEdge."""
  node: Shopify_CurrencySetting!
}

"""A setting for a presentment currency."""
type Shopify_CurrencySetting {
  """The currency's ISO code."""
  currencyCode: Shopify_CurrencyCode!

  """The full name of the currency."""
  currencyName: String!

  """
  Whether the currency is enabled or not. An enabled currency setting is visible to buyers and allows orders to be generated with that currency as presentment.
  """
  enabled: Boolean!

  """
  The date and time when the active exchange rate for the currency was last modified. It can be the automatic rate's creation date, or the manual rate's last updated at date if active.
  """
  rateUpdatedAt: DateTime
}

enum Shopify_ShopCustomerAccountsSetting {
  REQUIRED
  OPTIONAL
  DISABLED
}

enum Shopify_CustomerSavedSearchSortKeys {
  NAME
  ID
  RELEVANCE
}

"""An auto-generated type for paginating through a list of Strings."""
type Shopify_StringConnection {
  """A list of edges."""
  edges: [Shopify_StringEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one String and a cursor during pagination.
"""
type Shopify_StringEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of StringEdge."""
  node: String!
}

"""An auto-generated type for paginating through multiple DraftOrders."""
type Shopify_DraftOrderConnection {
  """A list of edges."""
  edges: [Shopify_DraftOrderEdge!]!

  """A list of the nodes contained in DraftOrderEdge."""
  nodes: [Shopify_DraftOrder!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one DraftOrder and a cursor during pagination.
"""
type Shopify_DraftOrderEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DraftOrderEdge."""
  node: Shopify_DraftOrder!
}

enum Shopify_DraftOrderSortKeys {
  NUMBER
  UPDATED_AT
  STATUS
  TOTAL_PRICE
  CUSTOMER_NAME
  ID
  RELEVANCE
}

"""
Represents the feature set available to the shop.
Most fields specify whether a feature is enabled for a shop, and some fields return information
related to specific features.
"""
type Shopify_ShopFeatures {
  """Whether a shop has access to Avalara AvaTax."""
  avalaraAvatax: Boolean!

  """
  The branding of the shop, which influences its look and feel in the Shopify admin.
  """
  branding: Shopify_ShopBranding!

  """Whether a shop's online store can have CAPTCHA protection."""
  captcha: Boolean!

  """
  Whether a shop's online store can have CAPTCHA protection for domains not managed by Shopify.
  """
  captchaExternalDomains: Boolean!

  """Whether the delivery profiles functionality is enabled for this shop."""
  deliveryProfiles: Boolean! @deprecated(reason: "Delivery profiles are now 100% enabled across Shopify.")

  """
  Whether a shop has access to the Google Analytics dynamic remarketing feature.
  """
  dynamicRemarketing: Boolean!

  """Whether a shop can be migrated to use Shopify subscriptions."""
  eligibleForSubscriptionMigration: Boolean!

  """Whether a shop is configured properly to sell subscriptions."""
  eligibleForSubscriptions: Boolean!

  """Whether a shop can create gift cards."""
  giftCards: Boolean!

  """
  Whether a shop displays Harmonized System codes on products. This is used for customs when shipping
  internationally.
  """
  harmonizedSystemCode: Boolean!

  """Whether a shop can enable international domains."""
  internationalDomains: Boolean!

  """Whether a shop can enable international price overrides."""
  internationalPriceOverrides: Boolean!

  """Whether a shop can enable international price rules."""
  internationalPriceRules: Boolean!

  """
  Whether a shop has enabled a legacy subscription gateway to handle older subscriptions.
  """
  legacySubscriptionGatewayEnabled: Boolean!

  """
  Whether to show the Live View metrics in the Shopify admin. Live view is hidden from merchants that are on a trial
  or don't have a storefront.
  """
  liveView: Boolean!

  """Whether a shop has multi-location functionality."""
  multiLocation: Boolean! @deprecated(reason: "All shops support multi-location inventory. Use `QueryRoot.locations` to determine whether shop has more than one location.\n")

  """Whether a shop has access to the onboarding visual."""
  onboardingVisual: Boolean!

  """
  Whether a shop is configured to sell subscriptions with PayPal Express.
  """
  paypalExpressSubscriptionGatewayStatus: Shopify_PaypalExpressSubscriptionsGatewayStatus!

  """Whether a shop has access to all reporting features."""
  reports: Boolean!

  """Whether a shop has ever had subscription products."""
  sellsSubscriptions: Boolean!

  """Whether the shop has a Shopify Plus subscription."""
  shopifyPlus: Boolean! @deprecated(reason: "Use Shop.plan.shopifyPlus instead.")

  """
  Whether to show metrics in the Shopify admin. Metrics are hidden for new merchants until they become meaningful.
  """
  showMetrics: Boolean!

  """Whether a shop has an online store."""
  storefront: Boolean!

  """Whether a shop is using Shopify Balance."""
  usingShopifyBalance: Boolean!
}

enum Shopify_ShopBranding {
  SHOPIFY_GOLD
  SHOPIFY_PLUS
  ROGERS
  SHOPIFY
}

enum Shopify_PaypalExpressSubscriptionsGatewayStatus {
  ENABLED
  DISABLED
  PENDING
}

"""An auto-generated type for paginating through multiple InventoryItems."""
type Shopify_InventoryItemConnection {
  """A list of edges."""
  edges: [Shopify_InventoryItemEdge!]!

  """A list of the nodes contained in InventoryItemEdge."""
  nodes: [Shopify_InventoryItem!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one InventoryItem and a cursor during pagination.
"""
type Shopify_InventoryItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of InventoryItemEdge."""
  node: Shopify_InventoryItem!
}

"""
The total number of pending orders on a shop if less then a maximum, or that maximum.
The atMax field indicates when this maximum has been reached.
"""
type Shopify_LimitedPendingOrderCount {
  """This is set when the number of pending orders has reached the maximum."""
  atMax: Boolean!

  """
  The number of pendings orders on the shop.
  Limited to a maximum of 10000.
  """
  count: Int!
}

"""An auto-generated type for paginating through multiple Locations."""
type Shopify_LocationConnection {
  """A list of edges."""
  edges: [Shopify_LocationEdge!]!

  """A list of the nodes contained in LocationEdge."""
  nodes: [Shopify_Location!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Location and a cursor during pagination.
"""
type Shopify_LocationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of LocationEdge."""
  node: Shopify_Location!
}

enum Shopify_LocationSortKeys {
  NAME
  ID
  RELEVANCE
}

"""
An auto-generated type for paginating through multiple MarketingEvents.
"""
type Shopify_MarketingEventConnection {
  """A list of edges."""
  edges: [Shopify_MarketingEventEdge!]!

  """A list of the nodes contained in MarketingEventEdge."""
  nodes: [Shopify_MarketingEvent!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one MarketingEvent and a cursor during pagination.
"""
type Shopify_MarketingEventEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MarketingEventEdge."""
  node: Shopify_MarketingEvent!
}

enum Shopify_MarketingEventSortKeys {
  STARTED_AT
  ID
  RELEVANCE
}

"""
Merchant approval for accelerated onboarding to channel integration apps.
"""
type Shopify_MerchantApprovalSignals {
  """
  Whether the shop's Shopify Payments account identity is verified. Returns `false` if the identity is unverified or if the shop doesn't have a Shopify Payments account.
  """
  identityVerified: Boolean!

  """
  Whether Shopify has pre-verified the merchant's business for onboarding to channel integration apps. Returns `false` if the shop is not marked for verification.
  """
  verifiedByShopify: Boolean!
}

"""A navigation item, holding basic link attributes."""
type Shopify_NavigationItem {
  """The unique identifier of the navigation item."""
  id: String!

  """The name of the navigation item."""
  title: String!

  """The URL of the page that the navigation item links to."""
  url: Url!
}

enum Shopify_ShopTagSort {
  ALPHABETICAL
  POPULAR
}

"""Settings related to payments."""
type Shopify_PaymentSettings {
  """List of the digital wallets which the shop supports."""
  supportedDigitalWallets: [Shopify_DigitalWallet!]!
}

enum Shopify_DigitalWallet {
  APPLE_PAY
  ANDROID_PAY
  GOOGLE_PAY
  SHOPIFY_PAY
}

"""The billing plan of the shop."""
type Shopify_ShopPlan {
  """The name of the shop's billing plan."""
  displayName: String!

  """Whether the shop is a partner development shop for testing purposes."""
  partnerDevelopment: Boolean!

  """Whether the shop has a Shopify Plus subscription."""
  shopifyPlus: Boolean!
}

"""An auto-generated type for paginating through multiple PriceRules."""
type Shopify_PriceRuleConnection {
  """A list of edges."""
  edges: [Shopify_PriceRuleEdge!]!

  """A list of the nodes contained in PriceRuleEdge."""
  nodes: [Shopify_PriceRule!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one PriceRule and a cursor during pagination.
"""
type Shopify_PriceRuleEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of PriceRuleEdge."""
  node: Shopify_PriceRule!
}

enum Shopify_PriceRuleSortKeys {
  STARTS_AT
  ENDS_AT
  TITLE
  CREATED_AT
  UPDATED_AT
  ID
  RELEVANCE
}

enum Shopify_ProductSortKeys {
  TITLE
  PRODUCT_TYPE
  VENDOR
  INVENTORY_TOTAL
  UPDATED_AT
  CREATED_AT
  PUBLISHED_AT
  ID
  RELEVANCE
}

"""Resource limits of a shop."""
type Shopify_ShopResourceLimits {
  """Maximum number of locations allowed."""
  locationLimit: Int!

  """Maximum number of product options allowed."""
  maxProductOptions: Int!

  """The maximum number of variants allowed per product."""
  maxProductVariants: Int!

  """
  Whether the shop has reached the limit of the number of URL redirects it can make for resources.
  """
  redirectLimitReached: Boolean!

  """
  The maximum number of variants allowed per shop. If the shop has unlimited SKUs, then the quantity used cannot be retrieved.
  """
  skuResourceLimits: Shopify_ResourceLimit!
}

"""A resource limit represents the limits that the resource has."""
type Shopify_ResourceLimit {
  """Whether the resource is available."""
  available: Boolean!

  """Quantity available. If null the quantity available is unlimited."""
  quantityAvailable: Int

  """Quantity limit of the resource. If null the quantity is unlimited."""
  quantityLimit: Int

  """
  Quantity used of the resource. If null the quantity used cannot be retrieved.
  """
  quantityUsed: Int
}

"""The connection type for SearchResult."""
type Shopify_SearchResultConnection {
  """A list of edges."""
  edges: [Shopify_SearchResultEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!

  """Information to aid in pagination."""
  resultsAfterCount: Int! @deprecated(reason: "The provided information is not accurate.")
}

"""
An auto-generated type which holds one SearchResult and a cursor during pagination.
"""
type Shopify_SearchResultEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SearchResultEdge."""
  node: Shopify_SearchResult!
}

"""Represents an individual result returned from a search."""
type Shopify_SearchResult {
  """Returns the search result description text."""
  description: String

  """Returns the Image resource presented to accompany a search result."""
  image: Shopify_Image

  """Returns the ID of the resource returned in the search result."""
  reference: Shopify_Node!

  """Returns the resource title."""
  title: String!

  """Returns the absolute URL to the resource in the search result."""
  url: Url!
}

enum Shopify_SearchResultType {
  ORDER
  CUSTOMER
  PRODUCT
  ONLINE_STORE_PAGE
  ONLINE_STORE_BLOG
  ONLINE_STORE_ARTICLE
  COLLECTION
  DRAFT_ORDER
  PRICE_RULE
  DISCOUNT_REDEEM_CODE
  FILE
  URL_REDIRECT
}

"""
A list of search filters along with their specific options in value and label pair for filtering.
"""
type Shopify_SearchFilterOptions {
  """A list of options that can be use to filter product availability."""
  productAvailability: [Shopify_FilterOption!]!
}

"""A filter option is one possible value in a search filter."""
type Shopify_FilterOption {
  """The filter option's label for display purposes."""
  label: String!

  """The filter option's value."""
  value: String!
}

"""An auto-generated type for paginating through multiple StaffMembers."""
type Shopify_StaffMemberConnection {
  """A list of edges."""
  edges: [Shopify_StaffMemberEdge!]!

  """A list of the nodes contained in StaffMemberEdge."""
  nodes: [Shopify_StaffMember!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one StaffMember and a cursor during pagination.
"""
type Shopify_StaffMemberEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of StaffMemberEdge."""
  node: Shopify_StaffMember!
}

"""
An auto-generated type for paginating through multiple StorefrontAccessTokens.
"""
type Shopify_StorefrontAccessTokenConnection {
  """A list of edges."""
  edges: [Shopify_StorefrontAccessTokenEdge!]!

  """A list of the nodes contained in StorefrontAccessTokenEdge."""
  nodes: [Shopify_StorefrontAccessToken!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one StorefrontAccessToken and a cursor during pagination.
"""
type Shopify_StorefrontAccessTokenEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of StorefrontAccessTokenEdge."""
  node: Shopify_StorefrontAccessToken!
}

enum Shopify_UnitSystem {
  IMPERIAL_SYSTEM
  METRIC_SYSTEM
}

"""Represents an installed application on a shop."""
type Shopify_AppInstallation implements Shopify_HasMetafields & Shopify_Node {
  """
  The access scopes granted to the application by a merchant during installation.
  """
  accessScopes: [Shopify_AccessScope!]!

  """
  The active application subscriptions billed to the shop on a recurring basis.
  """
  activeSubscriptions: [Shopify_AppSubscription!]!

  """All subscriptions created for a shop."""
  allSubscriptions(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_AppSubscriptionSortKeys = CREATED_AT
  ): Shopify_AppSubscriptionConnection!

  """Application which is installed."""
  app: Shopify_App!

  """Channel associated with the installed application."""
  channel: Shopify_Channel @deprecated(reason: "Use `publication` instead.")

  """Credits that can be used towards future app purchases."""
  credits(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_AppTransactionSortKeys = CREATED_AT
  ): Shopify_AppCreditConnection!

  """A globally-unique identifier."""
  id: ID!

  """The URL to launch the application."""
  launchUrl: Url!

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String!

    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield

  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!

  """One-time purchases to a shop."""
  oneTimePurchases(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_AppTransactionSortKeys = CREATED_AT
  ): Shopify_AppPurchaseOneTimeConnection!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!

    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!

  """The publication associated with the installed application."""
  publication: Shopify_Publication

  """
  The records that track the externally-captured revenue for the app. The records are used for revenue attribution purposes.
  """
  revenueAttributionRecords(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_AppRevenueAttributionRecordSortKeys = CREATED_AT
  ): Shopify_AppRevenueAttributionRecordConnection!

  """Subscriptions charge to a shop on a recurring basis."""
  subscriptions: [Shopify_AppSubscription!]! @deprecated(reason: "Use `activeSubscriptions` instead.")

  """The URL to uninstall the application."""
  uninstallUrl: Url
}

"""
The permission required to access a Shopify Admin API or Storefront API resource for a shop. Merchants grant access scopes that are requested by applications.
"""
type Shopify_AccessScope {
  """
  A description of the actions that the access scope allows an app to perform.
  """
  description: String!

  """
  A readable string that represents the access scope. The string usually follows the format `{action}_{resource}`. `{action}` is `read` or `write`, and `{resource}` is the resource that the action can be performed on. `{action}` and `{resource}` are separated by an underscore. For example, `read_orders` or `write_products`.
  """
  handle: String!
}

"""
An auto-generated type for paginating through multiple AppSubscriptions.
"""
type Shopify_AppSubscriptionConnection {
  """A list of edges."""
  edges: [Shopify_AppSubscriptionEdge!]!

  """A list of the nodes contained in AppSubscriptionEdge."""
  nodes: [Shopify_AppSubscription!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one AppSubscription and a cursor during pagination.
"""
type Shopify_AppSubscriptionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of AppSubscriptionEdge."""
  node: Shopify_AppSubscription!
}

enum Shopify_AppSubscriptionSortKeys {
  CREATED_AT
  ID
  RELEVANCE
}

"""An auto-generated type for paginating through multiple AppCredits."""
type Shopify_AppCreditConnection {
  """A list of edges."""
  edges: [Shopify_AppCreditEdge!]!

  """A list of the nodes contained in AppCreditEdge."""
  nodes: [Shopify_AppCredit!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one AppCredit and a cursor during pagination.
"""
type Shopify_AppCreditEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of AppCreditEdge."""
  node: Shopify_AppCredit!
}

enum Shopify_AppTransactionSortKeys {
  CREATED_AT
  ID
  RELEVANCE
}

"""
An auto-generated type for paginating through multiple AppPurchaseOneTimes.
"""
type Shopify_AppPurchaseOneTimeConnection {
  """A list of edges."""
  edges: [Shopify_AppPurchaseOneTimeEdge!]!

  """A list of the nodes contained in AppPurchaseOneTimeEdge."""
  nodes: [Shopify_AppPurchaseOneTime!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one AppPurchaseOneTime and a cursor during pagination.
"""
type Shopify_AppPurchaseOneTimeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of AppPurchaseOneTimeEdge."""
  node: Shopify_AppPurchaseOneTime!
}

"""
An auto-generated type for paginating through multiple AppRevenueAttributionRecords.
"""
type Shopify_AppRevenueAttributionRecordConnection {
  """A list of edges."""
  edges: [Shopify_AppRevenueAttributionRecordEdge!]!

  """A list of the nodes contained in AppRevenueAttributionRecordEdge."""
  nodes: [Shopify_AppRevenueAttributionRecord!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one AppRevenueAttributionRecord and a cursor during pagination.
"""
type Shopify_AppRevenueAttributionRecordEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of AppRevenueAttributionRecordEdge."""
  node: Shopify_AppRevenueAttributionRecord!
}

enum Shopify_AppRevenueAttributionRecordSortKeys {
  CREATED_AT
  ID
  RELEVANCE
}

"""Represents an image resource."""
type Shopify_Image implements Shopify_HasMetafields {
  """A word or phrase to share the nature or contents of an image."""
  altText: String

  """
  The original height of the image in pixels. Returns `null` if the image is not hosted by Shopify.
  """
  height: Int

  """A unique identifier for the image."""
  id: ID

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String!

    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield

  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!

  """
  The location of the original image as a URL.
  
  If there are any existing transformations in the original source URL, they will remain and not be stripped.
  """
  originalSrc: Url! @deprecated(reason: "Use `url` instead.")

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!

    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!

  """The location of the image as a URL."""
  src: Url! @deprecated(reason: "Use `url` instead.")

  """
  The location of the transformed image as a URL.
  
  All transformation arguments are considered "best-effort". If they can be applied to an image, they will be.
  Otherwise any transformations which an image type does not support will be ignored.
  """
  transformedSrc(
    """Image width in pixels between 1 and 5760."""
    maxWidth: Int

    """Image height in pixels between 1 and 5760."""
    maxHeight: Int

    """Crops the image according to the specified region."""
    crop: Shopify_CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int = 1

    """
    Best effort conversion of image into content type (SVG -> PNG, Anything -> JPG, Anything -> WEBP are supported).
    """
    preferredContentType: Shopify_ImageContentType
  ): Url! @deprecated(reason: "Use `url(transform:)` instead")

  """
  The location of the image as a URL.
  
  If no transform options are specified, then the original image will be preserved including any pre-applied transforms.
  
  All transformation options are considered "best-effort". Any transformation that the original image type doesn't support will be ignored.
  
  If you need multiple variations of the same image, then you can use [GraphQL aliases](https://graphql.org/learn/queries/#aliases).
  """
  url(
    """A set of options to transform the original image."""
    transform: Shopify_ImageTransformInput
  ): Url!

  """
  The original width of the image in pixels. Returns `null` if the image is not hosted by Shopify.
  """
  width: Int
}

enum Shopify_CropRegion {
  CENTER
  TOP
  BOTTOM
  LEFT
  RIGHT
}

enum Shopify_ImageContentType {
  PNG
  JPG
  WEBP
}

"""
The available options for transforming an image.

All transformation options are considered best effort. Any transformation that the original image type doesn't support will be ignored.
"""
input Shopify_ImageTransformInput {
  """
  The region of the image to remain after cropping.
  Must be used in conjunction with the `maxWidth` and/or `maxHeight` fields, where the `maxWidth` and `maxHeight` aren't equal.
  The `crop` argument should coincide with the smaller value. A smaller `maxWidth` indicates a `LEFT` or `RIGHT` crop, while
  a smaller `maxHeight` indicates a `TOP` or `BOTTOM` crop. For example, `{ maxWidth: 5, maxHeight: 10, crop: LEFT }` will result
  in an image with a width of 5 and height of 10, where the right side of the image is removed.
  """
  crop: Shopify_CropRegion

  """Image width in pixels between 1 and 5760."""
  maxWidth: Int

  """Image height in pixels between 1 and 5760."""
  maxHeight: Int

  """
  Image size multiplier for high-resolution retina displays. Must be within 1..3.
  """
  scale: Int = 1

  """
  Convert the source image into the preferred content type.
  Supported conversions: `.svg` to `.png`, any file type to `.jpg`, and any file type to `.webp`.
  """
  preferredContentType: Shopify_ImageContentType
}

"""
Represents the goods available to be shipped to a customer.
It holds essential information about the goods, including SKU and whether it is tracked.
"""
type Shopify_InventoryItem implements Shopify_LegacyInteroperability & Shopify_Node {
  """The ISO 3166-1 alpha-2 country code of where the item originated from."""
  countryCodeOfOrigin: Shopify_CountryCode

  """A list of country specific harmonized system codes."""
  countryHarmonizedSystemCodes(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CountryHarmonizedSystemCodeConnection!

  """The date and time when the inventory item was created."""
  createdAt: DateTime!

  """The number of inventory items that share the same SKU with this item."""
  duplicateSkuCount: Int!

  """The harmonized system code of the item."""
  harmonizedSystemCode: String

  """A globally-unique identifier."""
  id: ID!

  """The URL that points to the inventory history for the item."""
  inventoryHistoryUrl: Url

  """The inventory item's quantities at the specified location."""
  inventoryLevel(
    """ID of the location for which the inventory level is requested."""
    locationId: ID!
  ): Shopify_InventoryLevel

  """
  A list of the inventory item's quantities for each location that the inventory item can be stocked at.
  """
  inventoryLevels(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """
    Supported filter parameters:
     - `created_at`
     - `inventory_group_id`
     - `inventory_item_id`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_InventoryLevelConnection!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The number of locations where this inventory item is stocked."""
  locationsCount: Int!

  """
  The ISO 3166-2 alpha-2 province code of where the item originated from.
  """
  provinceCodeOfOrigin: String

  """Whether the inventory item requires shipping."""
  requiresShipping: Boolean!

  """Inventory item SKU."""
  sku: String

  """Whether inventory levels are tracked for the item."""
  tracked: Boolean!

  """
  Whether the value of the `tracked` field for the inventory item can be changed.
  """
  trackedEditable: Shopify_EditableProperty!

  """Unit cost associated with the inventory item."""
  unitCost: Shopify_MoneyV2

  """The date and time when the inventory item was updated."""
  updatedAt: DateTime!

  """The variant that owns this inventory item."""
  variant: Shopify_ProductVariant!
}

"""
An auto-generated type for paginating through multiple CountryHarmonizedSystemCodes.
"""
type Shopify_CountryHarmonizedSystemCodeConnection {
  """A list of edges."""
  edges: [Shopify_CountryHarmonizedSystemCodeEdge!]!

  """A list of the nodes contained in CountryHarmonizedSystemCodeEdge."""
  nodes: [Shopify_CountryHarmonizedSystemCode!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one CountryHarmonizedSystemCode and a cursor during pagination.
"""
type Shopify_CountryHarmonizedSystemCodeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CountryHarmonizedSystemCodeEdge."""
  node: Shopify_CountryHarmonizedSystemCode!
}

"""
The country-specific harmonized system code and ISO country code for an inventory item.
"""
type Shopify_CountryHarmonizedSystemCode {
  """
  The ISO 3166-1 alpha-2 country code for the country that issued the specified harmonized system code.
  """
  countryCode: Shopify_CountryCode!

  """
  The country-specific harmonized system code. These are usually longer than 6 digits.
  """
  harmonizedSystemCode: String!
}

"""
Metafields enable you to attach additional information to a Shopify resource, such as a [Product](https://shopify.dev/api/admin-graphql/latest/objects/product) or a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection).
For more information about where you can attach metafields refer to [HasMetafields](https://shopify.dev/api/admin/graphql/reference/common-objects/HasMetafields).
Some examples of the data that metafields enable you to store are specifications, size charts, downloadable documents, release dates, images, or part numbers.
Metafields are identified by an owner resource, namespace, and key. and store a value along with type information for that value.
"""
type Shopify_Metafield implements Shopify_LegacyInteroperability & Shopify_Node {
  """The date and time when the metafield was created."""
  createdAt: DateTime!

  """
  The optional, associated metafield definition that maps to this metafield's namespace and key pair.
  """
  definition: Shopify_MetafieldDefinition

  """The description of the metafield."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  """The unique identifier for the metafield in its namespace."""
  key: String!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """
  A container for a group of metafields.
  Grouping metafields within a namespace prevents your metafields from conflicting with other metafields that have the same key name.
  """
  namespace: String!

  """The resource that the metafield is attached to."""
  owner: Shopify_HasMetafields!

  """The resource that the metafield is attached to."""
  ownerType: Shopify_MetafieldOwnerType!

  """
  Returns a reference object if the metafield definition's type is a resource reference.
  """
  reference: Shopify_MetafieldReference

  """
  The type of data that the metafield stores in the `value` field.
  See the list of [supported types](https://shopify.dev/apps/metafields/types).
  """
  type: String!

  """The date and time when the metafield was updated."""
  updatedAt: DateTime!

  """
  The data to store in the metafield. The data is always stored as a string, regardless of the metafield's type.
  """
  value: String!
}

enum Shopify_MetafieldOwnerType {
  API_PERMISSION
  ARTICLE
  BLOG
  COLLECTION
  CUSTOMER
  DISCOUNT
  DRAFTORDER
  ORDER
  PAGE
  PRODUCT
  PRODUCTIMAGE
  PRODUCTVARIANT
  SHOP
}

"""The resource referenced by the metafield value."""
union Shopify_MetafieldReference = Shopify_GenericFile | Shopify_MediaImage | Shopify_OnlineStorePage | Shopify_Product | Shopify_ProductVariant | Shopify_Video

"""
Represents a fulfillment. In Shopify, a fulfillment represents a shipment of one or more items in an order. When an order has been completely fulfilled, it means that all the items that are included in the order have been sent to the customer. There can be more than one fulfillment for an order.
"""
type Shopify_Fulfillment implements Shopify_LegacyInteroperability & Shopify_Node {
  """The date and time when the fulfillment was created."""
  createdAt: DateTime!

  """The date that this fulfillment was delivered."""
  deliveredAt: DateTime

  """Human readable display status for this fulfillment."""
  displayStatus: Shopify_FulfillmentDisplayStatus

  """The estimated date that this fulfillment will arrive."""
  estimatedDeliveryAt: DateTime

  """The history of events associated with this fulfillment."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_FulfillmentEventSortKeys = HAPPENED_AT
  ): Shopify_FulfillmentEventConnection!

  """List of the fulfillment's line items."""
  fulfillmentLineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_FulfillmentLineItemConnection!

  """A paginated list of fulfillment orders for the fulfillment."""
  fulfillmentOrders(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_FulfillmentOrderConnection!

  """A globally-unique identifier."""
  id: ID!

  """The date and time when the fulfillment went into transit."""
  inTransitAt: DateTime

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The location that the fulfillment was processed at."""
  location: Shopify_Location

  """Human readable reference identifier for this fulfillment."""
  name: String!

  """The order for which the fulfillment was created."""
  order: Shopify_Order!

  """
  The address at which the fulfillment occurred. Typically this is the address of the warehouse or fulfillment center.
  """
  originAddress: Shopify_FulfillmentOriginAddress

  """Whether any of the line items in the fulfillment require shipping."""
  requiresShipping: Boolean!

  """Fulfillment service associated with the fulfillment."""
  service: Shopify_FulfillmentService

  """The status of the fulfillment."""
  status: Shopify_FulfillmentStatus!

  """Sum of all line item quantities for the fulfillment."""
  totalQuantity: Int!

  """
  Tracking information associated with the fulfillment,
  such as the tracking company, tracking number, and tracking URL.
  """
  trackingInfo(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_FulfillmentTrackingInfo!]!

  """The date and time when the fulfillment was last modified."""
  updatedAt: DateTime!
}

enum Shopify_FulfillmentDisplayStatus {
  ATTEMPTED_DELIVERY
  CANCELED
  CONFIRMED
  DELIVERED
  FAILURE
  FULFILLED
  IN_TRANSIT
  LABEL_PRINTED
  LABEL_PURCHASED
  LABEL_VOIDED
  MARKED_AS_FULFILLED
  NOT_DELIVERED
  OUT_FOR_DELIVERY
  READY_FOR_PICKUP
  PICKED_UP
  SUBMITTED
}

"""
An auto-generated type for paginating through multiple FulfillmentEvents.
"""
type Shopify_FulfillmentEventConnection {
  """A list of edges."""
  edges: [Shopify_FulfillmentEventEdge!]!

  """A list of the nodes contained in FulfillmentEventEdge."""
  nodes: [Shopify_FulfillmentEvent!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one FulfillmentEvent and a cursor during pagination.
"""
type Shopify_FulfillmentEventEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentEventEdge."""
  node: Shopify_FulfillmentEvent!
}

enum Shopify_FulfillmentEventSortKeys {
  HAPPENED_AT
  ID
  RELEVANCE
}

"""
An auto-generated type for paginating through multiple FulfillmentLineItems.
"""
type Shopify_FulfillmentLineItemConnection {
  """A list of edges."""
  edges: [Shopify_FulfillmentLineItemEdge!]!

  """A list of the nodes contained in FulfillmentLineItemEdge."""
  nodes: [Shopify_FulfillmentLineItem!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination.
"""
type Shopify_FulfillmentLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentLineItemEdge."""
  node: Shopify_FulfillmentLineItem!
}

"""
The address at which the fulfillment occurred. Typically this is the address of the warehouse or fulfillment center.
"""
type Shopify_FulfillmentOriginAddress {
  """The street address of the fulfillment location."""
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """The city in which the fulfillment location is located."""
  city: String

  """The country code of the fulfillment location."""
  countryCode: String!

  """The province code of the fulfillment location."""
  provinceCode: String

  """The zip code of the fulfillment location."""
  zip: String
}

enum Shopify_FulfillmentStatus {
  PENDING
  OPEN
  SUCCESS
  CANCELLED
  ERROR
  FAILURE
}

"""Represents the tracking information for a fulfillment."""
type Shopify_FulfillmentTrackingInfo {
  """The name of the tracking company."""
  company: String

  """The tracking number of the fulfillment."""
  number: String

  """The URLs to track the fulfillment."""
  url: Url
}

"""
The record of the line items and transactions that were refunded to a customer, along with restocking instructions for refunded line items.
"""
type Shopify_Refund implements Shopify_LegacyInteroperability & Shopify_Node {
  """The date and time when the refund was created."""
  createdAt: DateTime

  """A list of the refunded duties as part of this refund."""
  duties: [Shopify_RefundDuty]

  """A globally-unique identifier."""
  id: ID!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The optional note associated with the refund."""
  note: String

  """The order associated with the refund."""
  order: Shopify_Order!

  """The `RefundLineItem` resources attached to the refund."""
  refundLineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_RefundLineItemConnection!

  """The staff member who created the refund."""
  staffMember: Shopify_StaffMember

  """The total amount across all transactions for the refund."""
  totalRefunded: Shopify_MoneyV2! @deprecated(reason: "Use `totalRefundedSet` instead.")

  """
  The total amount across all transactions for the refund, in shop and presentment currencies.
  """
  totalRefundedSet: Shopify_MoneyBag!

  """The transactions associated with the refund."""
  transactions(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_OrderTransactionConnection!

  """The date and time when the refund was updated."""
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple RefundLineItems.
"""
type Shopify_RefundLineItemConnection {
  """A list of edges."""
  edges: [Shopify_RefundLineItemEdge!]!

  """A list of the nodes contained in RefundLineItemEdge."""
  nodes: [Shopify_RefundLineItem!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one RefundLineItem and a cursor during pagination.
"""
type Shopify_RefundLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of RefundLineItemEdge."""
  node: Shopify_RefundLineItem!
}

"""
An auto-generated type for paginating through multiple OrderTransactions.
"""
type Shopify_OrderTransactionConnection {
  """A list of edges."""
  edges: [Shopify_OrderTransactionEdge!]!

  """A list of the nodes contained in OrderTransactionEdge."""
  nodes: [Shopify_OrderTransaction!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one OrderTransaction and a cursor during pagination.
"""
type Shopify_OrderTransactionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of OrderTransactionEdge."""
  node: Shopify_OrderTransaction!
}

"""
A saved search is a representation of a search query saved in the admin.
"""
type Shopify_SavedSearch implements Shopify_LegacyInteroperability & Shopify_Node {
  """The filters of a saved search."""
  filters: [Shopify_SearchFilter!]!

  """A globally-unique identifier."""
  id: ID!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The name of a saved search."""
  name: String!

  """
  The query string of a saved search. This includes search terms and filters.
  """
  query: String!

  """The type of resource this saved search is searching in."""
  resourceType: Shopify_SearchResultType!

  """The search terms of a saved search."""
  searchTerms: String!
}

"""A filter in a search query represented by a key value pair."""
type Shopify_SearchFilter {
  """The key of the search filter."""
  key: String!

  """The value of the search filter."""
  value: String!
}

"""Represents actions that market a merchant's store or products."""
type Shopify_MarketingEvent implements Shopify_LegacyInteroperability & Shopify_Node {
  """The app that the marketing event is attributed to."""
  app: Shopify_App!

  """The marketing channel used by the marketing event."""
  channel: Shopify_MarketingChannel

  """A human-readable description of the marketing event."""
  description: String

  """The date and time when the marketing event ended."""
  endedAt: DateTime

  """A globally-unique identifier."""
  id: ID!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The URL where the marketing event can be managed."""
  manageUrl: Url

  """The URL where the marketing event can be previewed."""
  previewUrl: Url

  """An optional ID that helps Shopify validate engagement data."""
  remoteId: String

  """The date and time when the marketing event is scheduled to end."""
  scheduledToEndAt: DateTime

  """
  Where the `MarketingEvent` occurred and what kind of content was used.
  Because `utmSource` and `utmMedium` are often used interchangeably, this is
  based on a combination of `marketingChannel`, `referringDomain`, and `type` to
  provide a consistent representation for any given piece of marketing
  regardless of the app that created it.
  """
  sourceAndMedium: String!

  """The date and time when the marketing event started."""
  startedAt: DateTime!

  """The display text for the marketing event type."""
  targetTypeDisplayText: String! @deprecated(reason: "Use `sourceAndMedium` instead.")

  """The marketing event type."""
  type: Shopify_MarketingTactic!

  """The name of the marketing campaign."""
  utmCampaign: String

  """
  The medium that the marketing campaign is using. Example values: `cpc`, `banner`.
  """
  utmMedium: String

  """
  The referrer of the marketing event. Example values: `google`, `newsletter`.
  """
  utmSource: String
}

enum Shopify_MarketingChannel {
  SEARCH
  DISPLAY
  SOCIAL
  EMAIL
  REFERRAL
}

enum Shopify_MarketingTactic {
  ABANDONED_CART
  AD
  AFFILIATE
  LINK
  LOYALTY
  MESSAGE
  NEWSLETTER
  NOTIFICATION
  POST
  RETARGETING
  TRANSACTIONAL
  SEO
  DIRECT
  STOREFRONT_APP
  DISPLAY
  SEARCH
  FOLLOW_UP
  RECEIPT
}

"""
A dispute occurs when a buyer questions the legitimacy of a charge with their financial institution.
"""
type Shopify_ShopifyPaymentsDispute implements Shopify_LegacyInteroperability & Shopify_Node {
  """The total amount disputed by the cardholder."""
  amount: Shopify_MoneyV2!

  """The deadline for evidence submission."""
  evidenceDueBy: Date

  """
  The date when evidence was sent. Returns null if evidence has not yet been sent.
  """
  evidenceSentOn: Date

  """
  The date when this dispute was resolved. Returns null if the dispute is not yet resolved.
  """
  finalizedOn: Date

  """A globally-unique identifier."""
  id: ID!

  """The date when this dispute was initiated."""
  initiatedAt: DateTime!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The order that contains the charge that is under dispute."""
  order: Shopify_Order

  """The reason of the dispute."""
  reasonDetails: Shopify_ShopifyPaymentsDisputeReasonDetails!

  """The current state of the dispute."""
  status: Shopify_DisputeStatus!

  """
  Indicates if this dispute is still in the inquiry phase or has turned into a chargeback.
  """
  type: Shopify_DisputeType!
}

scalar Date

"""Details regarding a dispute reason."""
type Shopify_ShopifyPaymentsDisputeReasonDetails {
  """The raw code provided by the payment network."""
  networkReasonCode: String

  """The reason for the dispute provided by the cardholder's banks."""
  reason: Shopify_ShopifyPaymentsDisputeReason!
}

enum Shopify_ShopifyPaymentsDisputeReason {
  FRAUDULENT
  GENERAL
  UNRECOGNIZED
  DUPLICATE
  SUBSCRIPTION_CANCELLED
  PRODUCT_UNACCEPTABLE
  PRODUCT_NOT_RECEIVED
  CREDIT_NOT_PROCESSED
  INCORRECT_ACCOUNT_DETAILS
  INSUFFICIENT_FUNDS
  BANK_CANNOT_PROCESS
  DEBIT_NOT_AUTHORIZED
  CUSTOMER_INITIATED
}

enum Shopify_DisputeStatus {
  NEEDS_RESPONSE
  UNDER_REVIEW
  CHARGE_REFUNDED
  ACCEPTED
  WON
  LOST
}

enum Shopify_DisputeType {
  CHARGEBACK
  INQUIRY
}

"""
Payouts represent the movement of money between a merchant's Shopify
Payments balance and their bank account.
"""
type Shopify_ShopifyPaymentsPayout implements Shopify_LegacyInteroperability & Shopify_Node {
  """The bank account for the payout."""
  bankAccount: Shopify_ShopifyPaymentsBankAccount

  """The total amount and currency of the payout."""
  gross: Shopify_MoneyV2! @deprecated(reason: "Use `net` instead.")

  """A globally-unique identifier."""
  id: ID!

  """
  The exact time when the payout was issued. The payout only contains
  balance transactions that were available at this time.
  """
  issuedAt: DateTime!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The total amount and currency of the payout."""
  net: Shopify_MoneyV2!

  """The transfer status of the payout."""
  status: Shopify_ShopifyPaymentsPayoutStatus!

  """The summary of the payout."""
  summary: Shopify_ShopifyPaymentsPayoutSummary!

  """The direction of the payout."""
  transactionType: Shopify_ShopifyPaymentsPayoutTransactionType!
}

enum Shopify_ShopifyPaymentsPayoutStatus {
  SCHEDULED
  IN_TRANSIT
  PAID
  FAILED
  CANCELED
}

"""
Breakdown of the total fees and gross of each of the different types of transactions associated
with the payout.
"""
type Shopify_ShopifyPaymentsPayoutSummary {
  """Total fees for all adjustments including disputes."""
  adjustmentsFee: Shopify_MoneyV2!

  """Total gross amount for all adjustments including disputes."""
  adjustmentsGross: Shopify_MoneyV2!

  """Total fees for all charges."""
  chargesFee: Shopify_MoneyV2!

  """Total gross amount for all charges."""
  chargesGross: Shopify_MoneyV2!

  """Total fees for all refunds."""
  refundsFee: Shopify_MoneyV2!

  """Total gross amount for all refunds."""
  refundsFeeGross: Shopify_MoneyV2!

  """Total fees for all reserved funds."""
  reservedFundsFee: Shopify_MoneyV2!

  """Total gross amount for all reserved funds."""
  reservedFundsGross: Shopify_MoneyV2!

  """Total fees for all retried payouts."""
  retriedPayoutsFee: Shopify_MoneyV2!

  """Total gross amount for all retried payouts."""
  retriedPayoutsGross: Shopify_MoneyV2!
}

enum Shopify_ShopifyPaymentsPayoutTransactionType {
  DEPOSIT
  WITHDRAWAL
}

"""
By default, the Storefront API can't read metafields. To make specific metafields visible in the Storefront API,
you need to create a `MetafieldStorefrontVisibility` record. A `MetafieldStorefrontVisibility` record is a list
of the metafields, defined by the `owner_type`, `namespace`, and `key`, to make visible in the Storefront API.

Learn about [exposing metafields in the Storefront API]
(https://shopify.dev/custom-storefronts/products-collections/metafields)
for more details.
"""
type Shopify_MetafieldStorefrontVisibility implements Shopify_LegacyInteroperability & Shopify_Node {
  """
  The date and time when the metafield was set to visible in the Storefront API.
  """
  createdAt: DateTime!

  """A globally-unique identifier."""
  id: ID!

  """The key of a metafield to make visible in the Storefront API."""
  key: String!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The namespace of a metafield to make visible in the Storefront API."""
  namespace: String!

  """The owner type of a metafield to make visible in the Storefront API."""
  ownerType: Shopify_MetafieldOwnerType!

  """
  The date and time when the `MetafieldStorefrontVisilibty` record was updated.
  """
  updatedAt: DateTime!
}

"""
A script tag represents remote JavaScript code that is loaded into the pages of a shop's storefront or the order status page of checkout.
"""
type Shopify_ScriptTag implements Shopify_LegacyInteroperability & Shopify_Node {
  """
  Whether the Shopify CDN can cache and serve the script tag.
  If `true`, then the script will be cached and served by the CDN.
  The cache expires 15 minutes after the script tag is successfully returned.
  If `false`, then the script will be served as is.
  """
  cache: Boolean!

  """The date and time when the script tag was created."""
  createdAt: DateTime!

  """
  The page or pages on the online store that the script should be included.
  """
  displayScope: Shopify_ScriptTagDisplayScope!

  """A globally-unique identifier."""
  id: ID!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The URL to the remote script."""
  src: Url!

  """The date and time when the script tag was last updated."""
  updatedAt: DateTime!
}

enum Shopify_ScriptTagDisplayScope {
  ALL
  ORDER_STATUS
  ONLINE_STORE
}

"""
A webhook subscription is a persisted data object created by an app using the REST Admin API or GraphQL Admin API.
It describes the topic that the app wants to receive, and a destination where Shopify should send webhooks of the specified topic.
When an event for a given topic occurs, the webhook subscription sends a relevant payload to the destination.
Learn more about the [webhooks system](https://shopify.dev/apps/webhooks).
"""
type Shopify_WebhookSubscription implements Shopify_LegacyInteroperability & Shopify_Node {
  """
  The destination URI to which the webhook subscription will send a message when an event occurs.
  """
  callbackUrl: Url! @deprecated(reason: "Use `endpoint` instead.")

  """The date and time when the webhook subscription was created."""
  createdAt: DateTime!

  """The endpoint to which the webhook subscription will send events."""
  endpoint: Shopify_WebhookSubscriptionEndpoint!

  """The format in which the webhook subscription should send the data."""
  format: Shopify_WebhookSubscriptionFormat!

  """A globally-unique identifier."""
  id: ID!

  """
  An optional array of top-level resource fields that should be serialized and sent in the webhook message. If null, then all fields will be sent.
  """
  includeFields: [String!]!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """
  The list of namespaces for any metafields that should be included in the webhook subscription.
  """
  metafieldNamespaces: [String!]!

  """
  The list of namespaces for private metafields that should be included in the webhook subscription.
  """
  privateMetafieldNamespaces: [String!]!

  """
  The type of event that triggers the webhook. The topic determines when the webhook subscription sends a webhook, as well as what class of data object that webhook contains.
  """
  topic: Shopify_WebhookSubscriptionTopic!

  """The date and time when the webhook subscription was updated."""
  updatedAt: DateTime!
}

"""An endpoint to which webhook subscriptions send webhooks events."""
union Shopify_WebhookSubscriptionEndpoint = Shopify_WebhookEventBridgeEndpoint | Shopify_WebhookHttpEndpoint | Shopify_WebhookPubSubEndpoint

"""
An Amazon EventBridge partner event source to which webhook subscriptions publish events.
"""
type Shopify_WebhookEventBridgeEndpoint {
  """The ARN of this EventBridge partner event source."""
  arn: Arn!
}

scalar Arn

"""An HTTPS endpoint to which webhook subscriptions send POST requests."""
type Shopify_WebhookHttpEndpoint {
  """The URL to which the webhooks events are sent."""
  callbackUrl: Url!
}

"""
A Google Cloud Pub/Sub topic to which webhook subscriptions publish events.
"""
type Shopify_WebhookPubSubEndpoint {
  """The Google Cloud Pub/Sub project ID."""
  pubSubProject: String!

  """The Google Cloud Pub/Sub topic ID."""
  pubSubTopic: String!
}

enum Shopify_WebhookSubscriptionFormat {
  JSON
  XML
}

enum Shopify_WebhookSubscriptionTopic {
  APP_UNINSTALLED
  CARTS_CREATE
  CARTS_UPDATE
  CHANNELS_DELETE
  CHECKOUTS_CREATE
  CHECKOUTS_DELETE
  CHECKOUTS_UPDATE
  CUSTOMER_PAYMENT_METHODS_CREATE
  CUSTOMER_PAYMENT_METHODS_UPDATE
  CUSTOMER_PAYMENT_METHODS_REVOKE
  COLLECTION_LISTINGS_ADD
  COLLECTION_LISTINGS_REMOVE
  COLLECTION_LISTINGS_UPDATE
  COLLECTION_PUBLICATIONS_CREATE
  COLLECTION_PUBLICATIONS_DELETE
  COLLECTION_PUBLICATIONS_UPDATE
  COLLECTIONS_CREATE
  COLLECTIONS_DELETE
  COLLECTIONS_UPDATE
  CUSTOMER_GROUPS_CREATE
  CUSTOMER_GROUPS_DELETE
  CUSTOMER_GROUPS_UPDATE
  CUSTOMERS_CREATE
  CUSTOMERS_DELETE
  CUSTOMERS_DISABLE
  CUSTOMERS_ENABLE
  CUSTOMERS_UPDATE
  CUSTOMERS_MARKETING_CONSENT_UPDATE
  DISPUTES_CREATE
  DISPUTES_UPDATE
  DRAFT_ORDERS_CREATE
  DRAFT_ORDERS_DELETE
  DRAFT_ORDERS_UPDATE
  FULFILLMENT_EVENTS_CREATE
  FULFILLMENT_EVENTS_DELETE
  FULFILLMENTS_CREATE
  FULFILLMENTS_UPDATE
  ATTRIBUTED_SESSIONS_FIRST
  ATTRIBUTED_SESSIONS_LAST
  ORDER_TRANSACTIONS_CREATE
  ORDERS_CANCELLED
  ORDERS_CREATE
  ORDERS_DELETE
  ORDERS_EDITED
  ORDERS_FULFILLED
  ORDERS_PAID
  ORDERS_PARTIALLY_FULFILLED
  ORDERS_UPDATED
  PRODUCT_LISTINGS_ADD
  PRODUCT_LISTINGS_REMOVE
  PRODUCT_LISTINGS_UPDATE
  SCHEDULED_PRODUCT_LISTINGS_ADD
  SCHEDULED_PRODUCT_LISTINGS_UPDATE
  SCHEDULED_PRODUCT_LISTINGS_REMOVE
  PRODUCT_PUBLICATIONS_CREATE
  PRODUCT_PUBLICATIONS_DELETE
  PRODUCT_PUBLICATIONS_UPDATE
  PRODUCTS_CREATE
  PRODUCTS_DELETE
  PRODUCTS_UPDATE
  REFUNDS_CREATE
  SEGMENTS_CREATE
  SEGMENTS_DELETE
  SEGMENTS_UPDATE
  SHIPPING_ADDRESSES_CREATE
  SHIPPING_ADDRESSES_UPDATE
  SHOP_UPDATE
  TAX_SERVICES_CREATE
  TAX_SERVICES_UPDATE
  THEMES_CREATE
  THEMES_DELETE
  THEMES_PUBLISH
  THEMES_UPDATE
  VARIANTS_IN_STOCK
  VARIANTS_OUT_OF_STOCK
  INVENTORY_LEVELS_CONNECT
  INVENTORY_LEVELS_UPDATE
  INVENTORY_LEVELS_DISCONNECT
  INVENTORY_ITEMS_CREATE
  INVENTORY_ITEMS_UPDATE
  INVENTORY_ITEMS_DELETE
  LOCATIONS_CREATE
  LOCATIONS_UPDATE
  LOCATIONS_DELETE
  TENDER_TRANSACTIONS_CREATE
  APP_PURCHASES_ONE_TIME_UPDATE
  APP_SUBSCRIPTIONS_APPROACHING_CAPPED_AMOUNT
  APP_SUBSCRIPTIONS_UPDATE
  LOCALES_CREATE
  LOCALES_UPDATE
  DOMAINS_CREATE
  DOMAINS_UPDATE
  DOMAINS_DESTROY
  SUBSCRIPTION_CONTRACTS_CREATE
  SUBSCRIPTION_CONTRACTS_UPDATE
  PROFILES_CREATE
  PROFILES_UPDATE
  PROFILES_DELETE
  SUBSCRIPTION_BILLING_ATTEMPTS_SUCCESS
  SUBSCRIPTION_BILLING_ATTEMPTS_FAILURE
  SUBSCRIPTION_BILLING_ATTEMPTS_CHALLENGED
  PAYMENT_TERMS_CREATE
  PAYMENT_TERMS_DELETE
  PAYMENT_TERMS_UPDATE
  SELLING_PLAN_GROUPS_CREATE
  SELLING_PLAN_GROUPS_UPDATE
  SELLING_PLAN_GROUPS_DELETE
  BULK_OPERATIONS_FINISH
  MARKETS_CREATE
  MARKETS_UPDATE
  MARKETS_DELETE
}

"""A customer's payment method."""
type Shopify_CustomerPaymentMethod implements Shopify_Node {
  """The customer to whom the payment method belongs."""
  customer: Shopify_Customer

  """The ID of this payment method."""
  id: ID!

  """The instrument for this payment method."""
  instrument: Shopify_CustomerPaymentInstrument

  """The time that the payment method was revoked."""
  revokedAt: DateTime

  """The revocation reason for this payment method."""
  revokedReason: Shopify_CustomerPaymentMethodRevocationReason

  """List Subscription Contracts."""
  subscriptionContracts(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionContractConnection!
}

"""All possible instruments for CustomerPaymentMethods."""
union Shopify_CustomerPaymentInstrument = Shopify_CustomerCreditCard | Shopify_CustomerPaypalBillingAgreement | Shopify_CustomerShopPayAgreement

"""Represents a card instrument for customer payment method."""
type Shopify_CustomerCreditCard {
  """The billing address of the card."""
  billingAddress: Shopify_CustomerCreditCardBillingAddress

  """The brand of the card."""
  brand: String!

  """Whether the card is about to expire."""
  expiresSoon: Boolean!

  """The expiry month of the card."""
  expiryMonth: Int!

  """The expiry year of the card."""
  expiryYear: Int!

  """The card's BIN number."""
  firstDigits: String

  """
  The payment method can be revoked if there are no active subscription contracts.
  """
  isRevocable: Boolean!

  """The last 4 digits of the card."""
  lastDigits: String!

  """The masked card number with only the last 4 digits displayed."""
  maskedNumber: String!

  """The name of the card holder."""
  name: String!

  """The source of the card if coming from a wallet such as Apple Pay."""
  source: String

  """The last 4 digits of the Device Account Number."""
  virtualLastDigits: String
}

"""The billing address of a credit card payment instrument."""
type Shopify_CustomerCreditCardBillingAddress {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """The name of the city, district, village, or town."""
  city: String

  """The name of the country."""
  country: String

  """
  The two-letter code for the country of the address.
  For example, US.
  """
  countryCode: Shopify_CountryCode

  """The region of the address, such as the province, state, or district."""
  province: String

  """
  The two-letter code for the region.
  For example, ON.
  """
  provinceCode: String

  """The zip or postal code of the address."""
  zip: String
}

"""Represents a PayPal instrument for customer payment method."""
type Shopify_CustomerPaypalBillingAgreement {
  """The billing address of this payment method."""
  billingAddress: Shopify_CustomerPaymentInstrumentBillingAddress

  """Whether the PayPal billing agreement is inactive."""
  inactive: Boolean!

  """
  Whether the payment method can be revoked.The payment method can be revoked if there are no active subscription contracts.
  """
  isRevocable: Boolean!

  """The customers's PayPal account email address."""
  paypalAccountEmail: String
}

"""The billing address of a payment instrument."""
type Shopify_CustomerPaymentInstrumentBillingAddress {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """The name of the city, district, village, or town."""
  city: String

  """The name of the country."""
  country: String

  """
  The two-letter code for the country of the address.
  For example, US.
  """
  countryCode: Shopify_CountryCode

  """The name of the buyer of the address."""
  name: String

  """The region of the address, such as the province, state, or district."""
  province: String

  """
  The two-letter code for the region.
  For example, ON.
  """
  provinceCode: String

  """The zip or postal code of the address."""
  zip: String
}

"""Represents a Shop Pay card instrument for customer payment method."""
type Shopify_CustomerShopPayAgreement {
  """Whether the card is about to expire."""
  expiresSoon: Boolean!

  """The expiry month of the card."""
  expiryMonth: Int!

  """The expiry year of the card."""
  expiryYear: Int!

  """Whether the Shop Pay billing agreement is inactive."""
  inactive: Boolean!

  """
  The payment method can be revoked if there are no active subscription contracts.
  """
  isRevocable: Boolean!

  """The last 4 digits of the card."""
  lastDigits: String!

  """The masked card number with only the last 4 digits displayed."""
  maskedNumber: String!

  """The name of the card holder."""
  name: String!
}

enum Shopify_CustomerPaymentMethodRevocationReason {
  AUTHORIZE_NET_GATEWAY_NOT_ENABLED
  AUTHORIZE_NET_RETURNED_NO_PAYMENT_METHOD
  FAILED_TO_UPDATE_CREDIT_CARD
  STRIPE_API_AUTHENTICATION_ERROR
  STRIPE_API_INVALID_REQUEST_ERROR
  STRIPE_GATEWAY_NOT_ENABLED
  STRIPE_RETURNED_NO_PAYMENT_METHOD
  STRIPE_PAYMENT_METHOD_NOT_CARD
  BRAINTREE_API_AUTHENTICATION_ERROR
  BRAINTREE_GATEWAY_NOT_ENABLED
  BRAINTREE_RETURNED_NO_PAYMENT_METHOD
  BRAINTREE_PAYMENT_METHOD_NOT_CARD
  MANUALLY_REVOKED
  MERGED
}

"""A Shopify application."""
type Shopify_App implements Shopify_Node {
  """A unique application API identifier."""
  apiKey: String!

  """App store page URL of the app."""
  appStoreAppUrl: Url

  """App store page URL of the developer who created the app."""
  appStoreDeveloperUrl: Url

  """The access scopes available to the app."""
  availableAccessScopes: [Shopify_AccessScope!]!

  """Banner image for the app."""
  banner: Shopify_Image!

  """Description of the app."""
  description: String

  """The name of the app developer."""
  developerName: String

  """The type of app developer."""
  developerType: Shopify_AppDeveloperType!

  """Website of the developer who created the app."""
  developerUrl: Url! @deprecated(reason: "Use `appStoreDeveloperUrl` instead.")

  """Whether the app uses the Embedded App SDK."""
  embedded: Boolean!

  """Requirements that must be met before the app can be installed."""
  failedRequirements: [Shopify_FailedRequirement!]!

  """
  A list of app features that are shown in the Shopify App Store listing.
  """
  features: [String!]!

  """Feedback from this app about the store."""
  feedback: Shopify_AppFeedback

  """Handle of the app."""
  handle: String

  """Icon that represents the app."""
  icon: Shopify_Image!

  """A globally-unique identifier."""
  id: ID!

  """Webpage where you can install the app."""
  installUrl: Url

  """
  Corresponding AppInstallation for this shop and App.
  Returns null if the App is not installed.
  """
  installation: Shopify_AppInstallation

  """
  Whether the app is the [post purchase](https://shopify.dev/apps/checkout/post-purchase) app in use.
  """
  isPostPurchaseAppInUse: Boolean!

  """Webpage that the app starts in."""
  launchUrl: Url! @deprecated(reason: "Use AppInstallation.launchUrl instead")

  """
  Menu items for the app, which also appear as submenu items in left navigation sidebar in the Shopify admin.
  """
  navigationItems: [Shopify_NavigationItem!]! @deprecated(reason: "Use AppInstallation.navigationItems instead")

  """Whether the app was previously installed on the current shop."""
  previouslyInstalled: Boolean!

  """Detailed information about the app pricing."""
  pricingDetails: String

  """Summary of the app pricing details."""
  pricingDetailsSummary: String!

  """Link to app privacy policy."""
  privacyPolicyUrl: Url

  """The public category for the app."""
  publicCategory: Shopify_AppPublicCategory!

  """Whether the app is published to the Shopify App Store."""
  published: Boolean!

  """The access scopes requested by the app."""
  requestedAccessScopes: [Shopify_AccessScope!]!

  """Screenshots of the app."""
  screenshots: [Shopify_Image!]!

  """Whether the app was developed by Shopify."""
  shopifyDeveloped: Boolean!

  """Name of the app."""
  title: String!

  """
  Message that appears when the app is uninstalled. For example:
  By removing this app, you will no longer be able to publish products to MySocialSite or view this app in your Shopify admin. You can re-enable this channel at any time.
  """
  uninstallMessage: String!

  """Webpage where you can uninstall the app."""
  uninstallUrl: Url @deprecated(reason: "Use AppInstallation.uninstallUrl instead")

  """The webhook API version for the app."""
  webhookApiVersion: String!
}

enum Shopify_AppDeveloperType {
  SHOPIFY
  PARTNER
  MERCHANT
  UNKNOWN
}

"""Requirements that must be met before an app can be installed."""
type Shopify_FailedRequirement {
  """
  Action to be taken to resolve a failed requirement, including URL link.
  """
  action: Shopify_NavigationItem

  """
  A concise set of copy strings to be displayed to merchants, to guide them in resolving problems your app
  encounters when trying to make use of their Shop and its resources.
  """
  message: String!
}

enum Shopify_AppPublicCategory {
  PRIVATE
  PUBLIC
  CUSTOM
  OTHER
}

"""
A shipping profile. In Shopify, a shipping profile is a set of shipping rates scoped to a set of products or variants that can be shipped from selected locations to zones.
"""
type Shopify_DeliveryProfile implements Shopify_Node {
  """The number of active shipping rates for the profile."""
  activeMethodDefinitionsCount: Int!

  """Whether this is the default profile."""
  default: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """
  Whether this shop has enabled legacy compatibility mode for delivery profiles.
  """
  legacyMode: Boolean!

  """The number of locations without rates defined."""
  locationsWithoutRatesCount: Int!

  """The name of the delivery profile."""
  name: String!

  """The number of active origin locations for the profile."""
  originLocationCount: Int!

  """
  The number of product variants for this profile. The count for the default profile is not supported and will return -1.
  """
  productVariantsCount: Int! @deprecated(reason: "Use `productVariantsCountV2` instead.")

  """How many product variants are in this profile."""
  productVariantsCountV2: Shopify_DeliveryProductVariantsCount!

  """The products and variants associated with this profile."""
  profileItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_DeliveryProfileItemConnection!

  """The location groups and associated zones using this profile."""
  profileLocationGroups: [Shopify_DeliveryProfileLocationGroup!]!

  """Selling plan groups associated with the specified delivery profile."""
  sellingPlanGroups(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SellingPlanGroupConnection!

  """
  List of locations that have not been assigned to a location group for this profile.
  """
  unassignedLocations: [Shopify_Location!]!

  """The number of countries with active rates to deliver to."""
  zoneCountryCount: Int!
}

"""
How many product variants are in a profile. This count is capped at 500.
"""
type Shopify_DeliveryProductVariantsCount {
  """Whether the count has reached the cap of 500."""
  capped: Boolean!

  """The product variant count."""
  count: Int!
}

"""
An auto-generated type for paginating through multiple DeliveryProfileItems.
"""
type Shopify_DeliveryProfileItemConnection {
  """A list of edges."""
  edges: [Shopify_DeliveryProfileItemEdge!]!

  """A list of the nodes contained in DeliveryProfileItemEdge."""
  nodes: [Shopify_DeliveryProfileItem!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one DeliveryProfileItem and a cursor during pagination.
"""
type Shopify_DeliveryProfileItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DeliveryProfileItemEdge."""
  node: Shopify_DeliveryProfileItem!
}

"""
Links a location group with zones. Both are associated to a delivery profile.
"""
type Shopify_DeliveryProfileLocationGroup {
  """
  The countries already selected in any zone for the specified location group.
  """
  countriesInAnyZone: [Shopify_DeliveryCountryAndZone!]!

  """The collection of locations that make up the specified location group."""
  locationGroup: Shopify_DeliveryLocationGroup!

  """The applicable zones associated to the specified location group."""
  locationGroupZones(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_DeliveryLocationGroupZoneConnection!
}

"""The country details and the associated shipping zone."""
type Shopify_DeliveryCountryAndZone {
  """The country details."""
  country: Shopify_DeliveryCountry!

  """The name of the shipping zone."""
  zone: String!
}

"""
An auto-generated type for paginating through multiple DeliveryLocationGroupZones.
"""
type Shopify_DeliveryLocationGroupZoneConnection {
  """A list of edges."""
  edges: [Shopify_DeliveryLocationGroupZoneEdge!]!

  """A list of the nodes contained in DeliveryLocationGroupZoneEdge."""
  nodes: [Shopify_DeliveryLocationGroupZone!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one DeliveryLocationGroupZone and a cursor during pagination.
"""
type Shopify_DeliveryLocationGroupZoneEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DeliveryLocationGroupZoneEdge."""
  node: Shopify_DeliveryLocationGroupZone!
}

"""
Links a location group with a zone and the associated method definitions.
"""
type Shopify_DeliveryLocationGroupZone {
  """The number of method definitions for the zone."""
  methodDefinitionCounts: Shopify_DeliveryMethodDefinitionCounts!

  """The method definitions associated to a zone and location group."""
  methodDefinitions(
    """Return only eligible or ineligible method definitions."""
    eligible: Boolean

    """Return only merchant or participant method definitions."""
    type: Shopify_DeliveryMethodDefinitionType

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_MethodDefinitionSortKeys = ID
  ): Shopify_DeliveryMethodDefinitionConnection!

  """The zone associated to a location group."""
  zone: Shopify_DeliveryZone!
}

"""
The number of method definitions for a zone, separated into merchant-owned and participant definitions.
"""
type Shopify_DeliveryMethodDefinitionCounts {
  """The number of participant method definitions for the specified zone."""
  participantDefinitionsCount: Int!

  """
  The number of merchant-defined method definitions for the specified zone.
  """
  rateDefinitionsCount: Int!
}

"""
An auto-generated type for paginating through multiple DeliveryMethodDefinitions.
"""
type Shopify_DeliveryMethodDefinitionConnection {
  """A list of edges."""
  edges: [Shopify_DeliveryMethodDefinitionEdge!]!

  """A list of the nodes contained in DeliveryMethodDefinitionEdge."""
  nodes: [Shopify_DeliveryMethodDefinition!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one DeliveryMethodDefinition and a cursor during pagination.
"""
type Shopify_DeliveryMethodDefinitionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DeliveryMethodDefinitionEdge."""
  node: Shopify_DeliveryMethodDefinition!
}

enum Shopify_DeliveryMethodDefinitionType {
  MERCHANT
  PARTICIPANT
}

enum Shopify_MethodDefinitionSortKeys {
  RATE_PROVIDER_TYPE
  ID
  RELEVANCE
}

"""
Private metafields represent custom metadata that is attached to a resource.
Private metafields are accessible only by the application that created them and only from the GraphQL Admin API.

An application can create a maximum of 10 private metafields per shop resource.
"""
type Shopify_PrivateMetafield implements Shopify_Node {
  """The date and time when the private metafield was created."""
  createdAt: DateTime!

  """The id of the private metafield."""
  id: ID!

  """The key name of the private metafield."""
  key: String!

  """The namespace of the private metafield."""
  namespace: String!

  """The date and time when the private metafield was updated."""
  updatedAt: DateTime!

  """The value of a private metafield."""
  value: String!

  """Represents the private metafield value type."""
  valueType: Shopify_PrivateMetafieldValueType!
}

enum Shopify_PrivateMetafieldValueType {
  STRING
  INTEGER
  JSON_STRING
}

"""
Represents a customer mailing address.

For example, a customer's default address and an order's billing address are both mailling addresses.
"""
type Shopify_MailingAddress implements Shopify_Node {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """The name of the city, district, village, or town."""
  city: String

  """The name of the customer's company or organization."""
  company: String

  """Whether the address coordinates are valid."""
  coordinatesValidated: Boolean!

  """The name of the country."""
  country: String

  """
  The two-letter code for the country of the address.
  
  For example, US.
  """
  countryCode: String @deprecated(reason: "Use `countryCodeV2` instead.")

  """
  The two-letter code for the country of the address.
  
  For example, US.
  """
  countryCodeV2: Shopify_CountryCode

  """The first name of the customer."""
  firstName: String

  """
  A formatted version of the address, customized by the provided arguments.
  """
  formatted(
    """Whether to include the customer's name in the formatted address."""
    withName: Boolean = false

    """Whether to include the customer's company in the formatted address."""
    withCompany: Boolean = true
  ): [String!]!

  """A comma-separated list of the values for city, province, and country."""
  formattedArea: String

  """A globally-unique identifier."""
  id: ID!

  """The last name of the customer."""
  lastName: String

  """The latitude coordinate of the customer address."""
  latitude: Float

  """The longitude coordinate of the customer address."""
  longitude: Float

  """The full name of the customer, based on firstName and lastName."""
  name: String

  """
  A unique phone number for the customer.
  
  Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String

  """The region of the address, such as the province, state, or district."""
  province: String

  """
  The two-letter code for the region.
  
  For example, ON.
  """
  provinceCode: String

  """The zip or postal code of the address."""
  zip: String
}

"""
A channel represents an app where you sell a group of products and collections.
A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
"""
type Shopify_Channel implements Shopify_Node {
  """The underlying app used by the channel."""
  app: Shopify_App!

  """
  The collection publications for the list of collections published to the channel.
  """
  collectionPublicationsV3(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ResourcePublicationConnection!

  """The list of collections published to the channel."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CollectionConnection!

  """The unique identifier for the channel."""
  handle: String! @deprecated(reason: "Use `id` instead.")

  """Whether the collection is available to the channel."""
  hasCollection(
    """The collection ID to check."""
    id: ID!
  ): Boolean!

  """A globally-unique identifier."""
  id: ID!

  """The name of the channel."""
  name: String!

  """
  The menu items for the channel, which also appear as submenu items in the left navigation sidebar in the Shopify admin.
  """
  navigationItems: [Shopify_NavigationItem!]! @deprecated(reason: "Use [AppInstallation.navigationItems](\n          https://shopify.dev/api/admin-graphql/current/objects/AppInstallation#field-appinstallation-navigationitems) instead.")

  """Home page for the channel."""
  overviewPath: Url @deprecated(reason: "Use [AppInstallation.launchUrl](\n          https://shopify.dev/api/admin-graphql/current/objects/AppInstallation#field-appinstallation-launchurl) instead.")

  """
  The product publications for the list of products published to the channel.
  """
  productPublicationsV3(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ResourcePublicationConnection!

  """The list of products published to the channel."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductConnection!

  """Whether the channel supports future publishing."""
  supportsFuturePublishing: Boolean!
}

"""
An auto-generated type for paginating through multiple ResourcePublications.
"""
type Shopify_ResourcePublicationConnection {
  """A list of edges."""
  edges: [Shopify_ResourcePublicationEdge!]!

  """A list of the nodes contained in ResourcePublicationEdge."""
  nodes: [Shopify_ResourcePublication!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ResourcePublication and a cursor during pagination.
"""
type Shopify_ResourcePublicationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ResourcePublicationEdge."""
  node: Shopify_ResourcePublication!
}

"""
A resource publication represents that a resource has been published to a publication.
"""
type Shopify_ResourcePublication {
  """The channel the resource publication is published to."""
  channel: Shopify_Channel! @deprecated(reason: "Use `publication` instead.")

  """
  Whether the resource publication is published. Also returns true if the resource publication is scheduled to be published.
  If false, then the resource publication is neither published nor scheduled to be published.
  """
  isPublished: Boolean!

  """The publication the resource publication is published to."""
  publication: Shopify_Publication!

  """
  The date that the resource publication was or is going to be published to the publication.
  """
  publishDate: DateTime!

  """The resource published to the publication."""
  publishable: Shopify_Publishable!
}

"""Contains the information for a given sales channel."""
type Shopify_ChannelInformation implements Shopify_Node {
  """The app associated with the channel."""
  app: Shopify_App!

  """The channel definition associated with the channel."""
  channelDefinition: Shopify_ChannelDefinition

  """The unique identifier for the channel."""
  channelId: ID!

  """A globally-unique identifier."""
  id: ID!
}

"""A summary of the important details for a dispute on an order."""
type Shopify_OrderDisputeSummary implements Shopify_Node {
  """A globally-unique identifier."""
  id: ID!

  """The type that the dispute was initiated as."""
  initiatedAs: Shopify_DisputeType!

  """The current status of the dispute."""
  status: Shopify_DisputeStatus!
}

"""Represents the payment terms for an order or draft order."""
type Shopify_PaymentTerms implements Shopify_Node {
  """
  Duration of payment terms in days based on the payment terms template used to create the payment terms.
  """
  dueInDays: Int

  """A globally-unique identifier."""
  id: ID!

  """Whether the payment terms have overdue payment schedules."""
  overdue: Boolean!

  """List of schedules for the payment terms."""
  paymentSchedules(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PaymentScheduleConnection!

  """
  The name of the payment terms template used to create the payment terms.
  """
  paymentTermsName: String!

  """The payment terms template type used to create the payment terms."""
  paymentTermsType: Shopify_PaymentTermsType!

  """
  The payment terms name, translated into the shop admin's preferred language.
  """
  translatedName: String!
}

"""
An auto-generated type for paginating through multiple PaymentSchedules.
"""
type Shopify_PaymentScheduleConnection {
  """A list of edges."""
  edges: [Shopify_PaymentScheduleEdge!]!

  """A list of the nodes contained in PaymentScheduleEdge."""
  nodes: [Shopify_PaymentSchedule!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one PaymentSchedule and a cursor during pagination.
"""
type Shopify_PaymentScheduleEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of PaymentScheduleEdge."""
  node: Shopify_PaymentSchedule!
}

enum Shopify_PaymentTermsType {
  RECEIPT
  NET
  FIXED
  UNKNOWN
}

"""
A publication is a group of products and collections that is published to an app.
"""
type Shopify_Publication implements Shopify_Node {
  """The app associated with the publication."""
  app: Shopify_App!

  """
  The collection publications for the list of collections published to the publication.
  """
  collectionPublicationsV3(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ResourcePublicationConnection!

  """The list of collections published to the publication."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CollectionConnection!

  """Whether the collection is available to the publication."""
  hasCollection(
    """Collection ID to check."""
    id: ID!
  ): Boolean!

  """A globally-unique identifier."""
  id: ID!

  """Name of the publication."""
  name: String!

  """
  The product publications for the list of products published to the publication.
  """
  productPublicationsV3(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ResourcePublicationConnection!

  """The list of products published to the publication."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductConnection!

  """Whether the publication supports future publishing."""
  supportsFuturePublishing: Boolean!
}

"""A payment transaction in the context of an order."""
type Shopify_OrderTransaction implements Shopify_Node {
  """The masked account number associated with the payment method."""
  accountNumber: String

  """The amount of money."""
  amount: Money! @deprecated(reason: "Use `amountSet` instead.")

  """
  The amount and currency of the transaction in shop and presentment currencies.
  """
  amountSet: Shopify_MoneyBag!

  """The amount and currency of the transaction."""
  amountV2: Shopify_MoneyV2! @deprecated(reason: "Use `amountSet` instead.")

  """Authorization code associated with the transaction."""
  authorizationCode: String

  """
  The time when the authorization expires. This field is available only to stores on a Shopify Plus plan and is populated only for Shopify Payments authorizations.
  """
  authorizationExpiresAt: DateTime

  """Date and time when the transaction was created."""
  createdAt: DateTime!

  """A standardized error code, independent of the payment provider."""
  errorCode: Shopify_OrderTransactionErrorCode

  """
  The transaction fees charged on the order transaction. Only present for Shopify Payments transactions.
  """
  fees: [Shopify_TransactionFee!]!

  """
  The human-readable payment gateway name used to process the transaction.
  """
  formattedGateway: String

  """The payment gateway used to process the transaction."""
  gateway: String

  """A globally-unique identifier."""
  id: ID!

  """The kind of transaction."""
  kind: Shopify_OrderTransactionKind!

  """Whether the transaction can be manually captured."""
  manuallyCapturable: Boolean!

  """
  Specifies the available amount to refund on the gateway.
  This value is only available for transactions of type `SuggestedRefund`.
  """
  maximumRefundable: Money @deprecated(reason: "Use `maximumRefundableV2` instead.")

  """
  Specifies the available amount with currency to refund on the gateway.
  This value is only available for transactions of type `SuggestedRefund`.
  """
  maximumRefundableV2: Shopify_MoneyV2

  """The associated order."""
  order: Shopify_Order

  """
  The associated parent transaction, for example the authorization of a capture.
  """
  parentTransaction: Shopify_OrderTransaction

  """The payment icon to display for the transaction."""
  paymentIcon: Shopify_Image

  """
  The payment method used for the transaction. This value is `null` if the payment method is unknown.
  """
  paymentMethod: Shopify_PaymentMethods @deprecated(reason: "Use `paymentIcon` instead.")

  """Date and time when the transaction was processed."""
  processedAt: DateTime

  """
  The transaction receipt that the payment gateway attaches to the transaction.
  The value of this field depends on which payment gateway processed the transaction.
  """
  receipt: String @deprecated(reason: "Use `receiptJson` instead.")

  """
  The transaction receipt that the payment gateway attaches to the transaction.
  The value of this field depends on which payment gateway processed the transaction.
  """
  receiptJson: Json

  """The settlement currency."""
  settlementCurrency: Shopify_CurrencyCode

  """
  The rate used when converting the transaction amount to settlement currency.
  """
  settlementCurrencyRate: Decimal

  """
  Contains all Shopify Payments information related to an order transaction. This field is available only to stores on a Shopify Plus plan.
  """
  shopifyPaymentsSet: Shopify_ShopifyPaymentsTransactionSet

  """The status of this transaction."""
  status: Shopify_OrderTransactionStatus!

  """Whether the transaction is a test transaction."""
  test: Boolean!

  """
  Specifies the available amount to capture on the gateway.
  Only available when an amount is capturable or manually mark as paid.
  """
  totalUnsettled: Money @deprecated(reason: "Use `totalUnsettledSet` instead.")

  """
  Specifies the available amount with currency to capture on the gateway in shop and presentment currencies.
  Only available when an amount is capturable or manually mark as paid.
  """
  totalUnsettledSet: Shopify_MoneyBag

  """
  Specifies the available amount with currency to capture on the gateway.
  Only available when an amount is capturable or manually mark as paid.
  """
  totalUnsettledV2: Shopify_MoneyV2 @deprecated(reason: "Use `totalUnsettledSet` instead.")

  """
  Staff member who was logged into the Shopify POS device when the transaction was processed.
  """
  user: Shopify_StaffMember
}

enum Shopify_OrderTransactionErrorCode {
  INCORRECT_NUMBER
  INVALID_NUMBER
  INVALID_EXPIRY_DATE
  INVALID_CVC
  EXPIRED_CARD
  INCORRECT_CVC
  INCORRECT_ZIP
  INCORRECT_ADDRESS
  INCORRECT_PIN
  CARD_DECLINED
  PROCESSING_ERROR
  CALL_ISSUER
  PICK_UP_CARD
  CONFIG_ERROR
  TEST_MODE_LIVE_CARD
  UNSUPPORTED_FEATURE
  GENERIC_ERROR
  INVALID_COUNTRY
  INVALID_AMOUNT
  PAYMENT_METHOD_UNAVAILABLE
  AMAZON_PAYMENTS_INVALID_PAYMENT_METHOD
  AMAZON_PAYMENTS_MAX_AMOUNT_CHARGED
  AMAZON_PAYMENTS_MAX_AMOUNT_REFUNDED
  AMAZON_PAYMENTS_MAX_AUTHORIZATIONS_CAPTURED
  AMAZON_PAYMENTS_MAX_REFUNDS_PROCESSED
  AMAZON_PAYMENTS_ORDER_REFERENCE_CANCELED
  AMAZON_PAYMENTS_STALE
}

enum Shopify_OrderTransactionKind {
  SALE
  CAPTURE
  AUTHORIZATION
  VOID
  REFUND
  CHANGE
  EMV_AUTHORIZATION
  SUGGESTED_REFUND
}

enum Shopify_PaymentMethods {
  VISA
  MASTERCARD
  DISCOVER
  AMERICAN_EXPRESS
  DINERS_CLUB
  JCB
  UNIONPAY
  ELO
  DANKORT
  MAESTRO
  FORBRUGSFORENINGEN
  PAYPAL
  BOGUS
  BITCOIN
  LITECOIN
  DOGECOIN
  INTERAC
}

scalar Json

"""
Presents all Shopify Payments specific information related to an order transaction.
"""
type Shopify_ShopifyPaymentsTransactionSet {
  """Contains all fields related to an extended authorization."""
  extendedAuthorizationSet: Shopify_ShopifyPaymentsExtendedAuthorization

  """Contains all fields related to a refund."""
  refundSet: Shopify_ShopifyPaymentsRefundSet
}

"""
Presents all Shopify Payments information related to an extended authorization.
"""
type Shopify_ShopifyPaymentsExtendedAuthorization {
  """
  The time after which the extended authorization expires. After the expiry, the merchant is unable to capture the payment.
  """
  extendedAuthorizationExpiresAt: DateTime!

  """The time after which capture will incur an additional fee."""
  standardAuthorizationExpiresAt: DateTime!
}

"""
Presents all Shopify Payments specific information related to an order refund.
"""
type Shopify_ShopifyPaymentsRefundSet {
  """
  The acquirer reference number (ARN) code generated for Visa/Mastercard transactions.
  """
  acquirerReferenceNumber: String
}

enum Shopify_OrderTransactionStatus {
  SUCCESS
  FAILURE
  PENDING
  ERROR
  AWAITING_RESPONSE
  UNKNOWN
}

"""
The product property names. For example, "Size", "Color", and "Material".
Variants are selected based on permutations of these options.
The limit for each product property name is 255 characters.
"""
type Shopify_ProductOption implements Shopify_HasPublishedTranslations & Shopify_Node {
  """A globally-unique identifier."""
  id: ID!

  """The product option’s name."""
  name: String!

  """The product option's position."""
  position: Int!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [Shopify_PublishedTranslation!]!

  """The corresponding value to the product option name."""
  values: [String!]!
}

"""
A market is a group of one or more regions that you want to target for international sales.
By creating a market, you can configure a distinct, localized shopping experience for
customers from a specific area of the world. For example, you can
[change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
[configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
"""
type Shopify_Market implements Shopify_Node {
  """The market’s currency settings."""
  currencySettings: Shopify_MarketCurrencySettings!

  """
  Whether the market is enabled to receive visitors and sales. **Note**: Regions in inactive
  markets cannot be selected on the storefront or in checkout.
  """
  enabled: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """The name of the market. Not shown to customers."""
  name: String!

  """
  The market’s price list, which specifies a percentage-based price adjustment as well as
  fixed price overrides for specific variants.
  """
  priceList: Shopify_PriceList

  """Whether the market is the shop’s primary market."""
  primary: Boolean!

  """The regions that comprise the market."""
  regions(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MarketRegionConnection!

  """
  The market’s web presence, which defines its SEO strategy. This can be a different domain,
  subdomain, or subfolders of the primary domain. Each web presence comprises one or more
  language variants. If a market doesn't have its own web presence, then the market is accessible on the
  shop’s primary domain using [country
  selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).
  """
  webPresence: Shopify_MarketWebPresence
}

"""A market's currency settings."""
type Shopify_MarketCurrencySettings {
  """
  The currency which this market's prices are defined in, and the
  currency which its customers must use if local currencies are disabled.
  """
  baseCurrency: Shopify_CurrencySetting!

  """
  Whether or not local currencies are enabled. If enabled, then prices will
  be converted to give each customer the best experience based on their
  region. If disabled, then all customers in this market will see prices
  in the market's base currency.
  """
  localCurrencies: Boolean!
}

"""An auto-generated type for paginating through multiple MarketRegions."""
type Shopify_MarketRegionConnection {
  """A list of edges."""
  edges: [Shopify_MarketRegionEdge!]!

  """A list of the nodes contained in MarketRegionEdge."""
  nodes: [Shopify_MarketRegion!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one MarketRegion and a cursor during pagination.
"""
type Shopify_MarketRegionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MarketRegionEdge."""
  node: Shopify_MarketRegion!
}

"""A geographic region which comprises a market."""
interface Shopify_MarketRegion {
  """A globally-unique identifier."""
  id: ID!

  """The name of the region."""
  name: String!
}

"""
A unique string that represents the address of a Shopify store on the Internet.
"""
type Shopify_Domain implements Shopify_Node {
  """The host name of the domain. For example, `example.com`."""
  host: String!

  """A globally-unique identifier."""
  id: ID!

  """The localization of the domain, if the domain doesn't redirect."""
  localization: Shopify_DomainLocalization

  """The web presence of the domain."""
  marketWebPresence: Shopify_MarketWebPresence

  """Whether SSL is enabled."""
  sslEnabled: Boolean!

  """The URL of the domain (for example, `https://example.com`)."""
  url: Url!
}

"""The country and language settings assigned to a domain."""
type Shopify_DomainLocalization {
  """
  The ISO codes for the domain’s alternate locales. For example, `["en"]`.
  """
  alternateLocales: [String!]!

  """
  The ISO code for the country assigned to the domain. For example, `"CA"` or "*" for a domain set to "Rest of world".
  """
  country: String

  """The ISO code for the domain’s default locale. For example, `"en"`."""
  defaultLocale: String!
}

"""
Policy that a merchant has configured for their store, such as their refund or privacy policy.
"""
type Shopify_ShopPolicy implements Shopify_HasPublishedTranslations & Shopify_Node {
  """The text of the policy. The maximum size is 512kb."""
  body: Html!

  """A globally-unique identifier."""
  id: ID!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [Shopify_PublishedTranslation!]!

  """The shop policy type."""
  type: Shopify_ShopPolicyType!

  """The public URL of the policy."""
  url: Url!
}

enum Shopify_ShopPolicyType {
  REFUND_POLICY
  SHIPPING_POLICY
  PRIVACY_POLICY
  TERMS_OF_SERVICE
  TERMS_OF_SALE
  LEGAL_NOTICE
  SUBSCRIPTION_POLICY
}

"""
Balance and payout information for a
[Shopify Payments](https://help.shopify.com/manual/payments/shopify-payments/getting-paid-with-shopify-payments)
account. Balance includes all balances for the currencies supported by the shop.
You can also query for a list of payouts, where each payout includes the corresponding currencyCode field.
"""
type Shopify_ShopifyPaymentsAccount implements Shopify_Node {
  """Whether the Shopify Payments setup is completed."""
  activated: Boolean!

  """Current balances in all currencies for the account."""
  balance: [Shopify_MoneyV2!]!

  """All bank accounts configured for the Shopify Payments account."""
  bankAccounts(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ShopifyPaymentsBankAccountConnection!

  """
  The statement descriptor used for charges.
  
  The statement descriptor appears on a customer's credit card or bank statement when they make a purchase.
  """
  chargeStatementDescriptor: String @deprecated(reason: "Use `chargeStatementDescriptors` instead.")

  """
  The statement descriptors used for charges.
  
  These descriptors appear on a customer's credit card or bank statement when they make a purchase.
  """
  chargeStatementDescriptors: Shopify_ShopifyPaymentsChargeStatementDescriptor

  """The Shopify Payments account country."""
  country: String!

  """The default payout currency for the Shopify Payments account."""
  defaultCurrency: Shopify_CurrencyCode!

  """All disputes related to the Shopify Payments account."""
  disputes(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """
    Supported filter parameters:
     - `id`
     - `initiated_at`
     - `status`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_ShopifyPaymentsDisputeConnection!

  """The fraud settings of the Shopify Payments account."""
  fraudSettings: Shopify_ShopifyPaymentsFraudSettings!

  """A globally-unique identifier."""
  id: ID!

  """The notifications settings for the account."""
  notificationSettings: Shopify_ShopifyPaymentsNotificationSettings!

  """Whether the Shopify Payments account can be onboarded."""
  onboardable: Boolean!

  """The payout schedule for the account."""
  payoutSchedule: Shopify_ShopifyPaymentsPayoutSchedule!

  """
  The descriptor used for payouts.
  
  The descriptor appears on a merchant's bank statement when they receive a payout.
  """
  payoutStatementDescriptor: String

  """
  All current and previous payouts made between the account and the bank account.
  """
  payouts(
    """Filter the direction of the payout."""
    transactionType: Shopify_ShopifyPaymentsPayoutTransactionType

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ShopifyPaymentsPayoutConnection!

  """The permitted documents for identity verification."""
  permittedVerificationDocuments: [Shopify_ShopifyPaymentsVerificationDocument!]!

  """The verifications necessary for this account."""
  verifications: [Shopify_ShopifyPaymentsVerification!]!
}

"""
An auto-generated type for paginating through multiple ShopifyPaymentsBankAccounts.
"""
type Shopify_ShopifyPaymentsBankAccountConnection {
  """A list of edges."""
  edges: [Shopify_ShopifyPaymentsBankAccountEdge!]!

  """A list of the nodes contained in ShopifyPaymentsBankAccountEdge."""
  nodes: [Shopify_ShopifyPaymentsBankAccount!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ShopifyPaymentsBankAccount and a cursor during pagination.
"""
type Shopify_ShopifyPaymentsBankAccountEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ShopifyPaymentsBankAccountEdge."""
  node: Shopify_ShopifyPaymentsBankAccount!
}

"""The charge descriptors for a payments account."""
interface Shopify_ShopifyPaymentsChargeStatementDescriptor {
  """The default charge statement descriptor."""
  default: String

  """The prefix of the statement descriptor."""
  prefix: String!
}

"""
An auto-generated type for paginating through multiple ShopifyPaymentsDisputes.
"""
type Shopify_ShopifyPaymentsDisputeConnection {
  """A list of edges."""
  edges: [Shopify_ShopifyPaymentsDisputeEdge!]!

  """A list of the nodes contained in ShopifyPaymentsDisputeEdge."""
  nodes: [Shopify_ShopifyPaymentsDispute!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ShopifyPaymentsDispute and a cursor during pagination.
"""
type Shopify_ShopifyPaymentsDisputeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ShopifyPaymentsDisputeEdge."""
  node: Shopify_ShopifyPaymentsDispute!
}

"""The fraud settings of a payments account."""
type Shopify_ShopifyPaymentsFraudSettings {
  """Decline a charge if there is an AVS failure."""
  declineChargeOnAvsFailure: Boolean!

  """Decline a charge if there is an CVC failure."""
  declineChargeOnCvcFailure: Boolean!
}

"""The notification settings for the account."""
type Shopify_ShopifyPaymentsNotificationSettings {
  """Receive email notifications when new payouts are sent or payouts fail."""
  payouts: Boolean!
}

"""The payment schedule for a payments account."""
type Shopify_ShopifyPaymentsPayoutSchedule {
  """The interval at which payouts are sent to the connected bank account."""
  interval: Shopify_ShopifyPaymentsPayoutInterval!

  """
  The day of the month funds will be paid out.
  
  The value can be any day of the month from the 1st to the 31st.
  If the payment interval is set to monthly, this value will be used.
  Payouts scheduled between 29-31st of the month are sent on the last day of shorter months.
  """
  monthlyAnchor: Int

  """
  The day of the week funds will be paid out.
  
  The value can be any weekday from Monday to Friday.
  If the payment interval is set to weekly, this value will be used.
  """
  weeklyAnchor: Shopify_DayOfTheWeek
}

enum Shopify_ShopifyPaymentsPayoutInterval {
  DAILY
  WEEKLY
  MONTHLY
  MANUAL
}

enum Shopify_DayOfTheWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

"""
An auto-generated type for paginating through multiple ShopifyPaymentsPayouts.
"""
type Shopify_ShopifyPaymentsPayoutConnection {
  """A list of edges."""
  edges: [Shopify_ShopifyPaymentsPayoutEdge!]!

  """A list of the nodes contained in ShopifyPaymentsPayoutEdge."""
  nodes: [Shopify_ShopifyPaymentsPayout!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ShopifyPaymentsPayout and a cursor during pagination.
"""
type Shopify_ShopifyPaymentsPayoutEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ShopifyPaymentsPayoutEdge."""
  node: Shopify_ShopifyPaymentsPayout!
}

"""A document which can be used to verify an individual."""
type Shopify_ShopifyPaymentsVerificationDocument {
  """True if the back side of the document is required."""
  backRequired: Boolean!

  """True if the front side of the document is required."""
  frontRequired: Boolean!

  """The type of the document which can be used for verification."""
  type: Shopify_ShopifyPaymentsVerificationDocumentType!
}

enum Shopify_ShopifyPaymentsVerificationDocumentType {
  DRIVERS_LICENSE
  GOVERNMENT_IDENTIFICATION
  PASSPORT
}

"""
Provides users access to services and/or features for a duration of time.
"""
type Shopify_AppSubscription implements Shopify_Node {
  """The date and time when the app subscription was created."""
  createdAt: DateTime!

  """
  The date and time when the current app subscription period ends. Returns `null` if the subscription isn't active.
  """
  currentPeriodEnd: DateTime

  """A globally-unique identifier."""
  id: ID!

  """The plans attached to the app subscription."""
  lineItems: [Shopify_AppSubscriptionLineItem!]!

  """The name of the app subscription."""
  name: String!

  """
  The URL that the merchant is redirected to after approving the app subscription.
  """
  returnUrl: Url!

  """The status of the app subscription."""
  status: Shopify_AppSubscriptionStatus!

  """Specifies whether the app subscription is a test transaction."""
  test: Boolean!

  """
  The number of free trial days, starting at the subscription's creation date, by which billing is delayed.
  """
  trialDays: Int!
}

"""The plan attached to an app subscription."""
type Shopify_AppSubscriptionLineItem {
  """A globally-unique identifier."""
  id: ID!

  """The pricing model for the app subscription."""
  plan: Shopify_AppPlanV2!

  """A list of the store's usage records for a usage pricing plan."""
  usageRecords(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_AppUsageRecordSortKeys = CREATED_AT
  ): Shopify_AppUsageRecordConnection!
}

"""The app plan that the merchant is subscribed to."""
type Shopify_AppPlanV2 {
  """The plan billed to a shop on a recurring basis."""
  pricingDetails: Shopify_AppPricingDetails!
}

"""
The information about the price that's charged to a shop every plan period.
The concrete type can be `AppRecurringPricing` for recurring billing or `AppUsagePricing` for usage-based billing.
"""
union Shopify_AppPricingDetails = Shopify_AppRecurringPricing | Shopify_AppUsagePricing

"""
The pricing information about a subscription app.
The object contains an interval (the frequency at which the shop is billed for an app subscription) and
a price (the amount to be charged to the subscribing shop at each interval).
"""
type Shopify_AppRecurringPricing {
  """
  The discount applied to the subscription for a given number of billing intervals.
  """
  discount: Shopify_AppSubscriptionDiscount

  """
  The frequency at which the subscribing shop is billed for an app subscription.
  """
  interval: Shopify_AppPricingInterval!

  """
  The amount and currency to be charged to the subscribing shop every billing interval.
  """
  price: Shopify_MoneyV2!
}

"""Discount applied to the recurring pricing portion of a subscription."""
type Shopify_AppSubscriptionDiscount {
  """
  The total number of billing intervals to which the discount will be applied.
  The discount will be applied to an indefinite number of billing intervals if this value is blank.
  """
  durationLimitInIntervals: Int

  """The price of the subscription after the discount is applied."""
  priceAfterDiscount: Shopify_MoneyV2!

  """
  The remaining number of billing intervals to which the discount will be applied.
  """
  remainingDurationInIntervals: Int

  """The value of the discount applied every billing interval."""
  value: Shopify_AppSubscriptionDiscountValue!
}

"""The value of the discount."""
union Shopify_AppSubscriptionDiscountValue = Shopify_AppSubscriptionDiscountAmount | Shopify_AppSubscriptionDiscountPercentage

"""The fixed amount value of a discount."""
type Shopify_AppSubscriptionDiscountAmount {
  """The fixed amount value of a discount."""
  amount: Shopify_MoneyV2!
}

"""The percentage value of a discount."""
type Shopify_AppSubscriptionDiscountPercentage {
  """The percentage value of a discount."""
  percentage: Float!
}

enum Shopify_AppPricingInterval {
  ANNUAL
  EVERY_30_DAYS
}

"""
Defines a usage pricing model for the app subscription.
These charges are variable based on how much the merchant uses the app.
"""
type Shopify_AppUsagePricing {
  """The total usage records for interval."""
  balanceUsed: Shopify_MoneyV2!

  """
  The capped amount prevents the merchant from being charged for any usage over that amount during a billing period.
  This prevents billing from exceeding a maximum threshold over the duration of the billing period.
  For the merchant to continue using the app after exceeding a capped amount, they would need to agree to a new usage charge.
  """
  cappedAmount: Shopify_MoneyV2!

  """The frequency with which the app usage records are billed."""
  interval: Shopify_AppPricingInterval!

  """
  The terms and conditions for app usage pricing.
  Must be present in order to create usage charges.
  The terms are presented to the merchant when they approve an app's usage charges.
  """
  terms: String!
}

"""
An auto-generated type for paginating through multiple AppUsageRecords.
"""
type Shopify_AppUsageRecordConnection {
  """A list of edges."""
  edges: [Shopify_AppUsageRecordEdge!]!

  """A list of the nodes contained in AppUsageRecordEdge."""
  nodes: [Shopify_AppUsageRecord!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one AppUsageRecord and a cursor during pagination.
"""
type Shopify_AppUsageRecordEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of AppUsageRecordEdge."""
  node: Shopify_AppUsageRecord!
}

enum Shopify_AppUsageRecordSortKeys {
  CREATED_AT
  ID
  RELEVANCE
}

enum Shopify_AppSubscriptionStatus {
  PENDING
  ACCEPTED
  ACTIVE
  DECLINED
  EXPIRED
  FROZEN
  CANCELLED
}

"""
The quantities of an inventory item that are related to a specific location.
"""
type Shopify_InventoryLevel implements Shopify_Node {
  """
  The quantity of inventory items that are available at the inventory level's associated location.
  """
  available: Int!

  """
  Whether the inventory items associated with the inventory level can be deactivated.
  """
  canDeactivate: Boolean!

  """The date and time when the inventory level was created."""
  createdAt: DateTime!

  """
  Describes either the impact of deactivating the inventory level, or why the inventory level can't be deactivated.
  """
  deactivationAlert: String

  """
  Describes, in HTML with embedded URLs, either the impact of deactivating the inventory level or why the inventory level can't be deactivated.
  """
  deactivationAlertHtml: FormattedString

  """A globally-unique identifier."""
  id: ID!

  """
  The quantity of inventory items that are going to the inventory level's associated location.
  """
  incoming: Int!

  """Inventory item associated with the inventory level."""
  item: Shopify_InventoryItem!

  """The location associated with the inventory level."""
  location: Shopify_Location!

  """The date and time when the inventory level was updated."""
  updatedAt: DateTime!
}

"""
Metafield definitions enable you to define additional validation constraints for metafields, and enable the
merchant to edit metafield values in context.
"""
type Shopify_MetafieldDefinition implements Shopify_Node {
  """The description of a metafield definition."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  """
  The key name used to identify a metafield definition within a namespace.
  """
  key: String!

  """The list of metafields associated with a metafield definition."""
  metafields(
    """Returns the metafields filtered by the validation status."""
    validationStatus: Shopify_MetafieldValidationStatus = ANY

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!

  """The count of metafields under a metafield definition."""
  metafieldsCount(
    """The current validation status."""
    validationStatus: Shopify_MetafieldValidationStatus
  ): Int!

  """The human-readable name for the metafield definition."""
  name: String!

  """
  The namespace of the metafield definition. You can use a namespace to group related metafields.
  """
  namespace: String!

  """
  The resource type that the metafield definition is attached to. For example, `Product` or `Collection`.
  """
  ownerType: Shopify_MetafieldOwnerType!

  """The position of the metafield definition in the pinned list."""
  pinnedPosition: Int

  """
  The standard metafield definition template associated with a metafield definition.
  """
  standardTemplate: Shopify_StandardMetafieldDefinitionTemplate

  """The type of data that the metafield will store."""
  type: Shopify_MetafieldDefinitionType!

  """
  The validation status for the existing metafields within a metafield definition.
  """
  validationStatus: Shopify_MetafieldDefinitionValidationStatus!

  """
  A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
  the metafield. For example, for a metafield with the type `date`, you can set a minimum date validation, so
  that the metafield will only store dates after the specific minimum date.
  """
  validations: [Shopify_MetafieldDefinitionValidation!]!

  """
  Whether metafields for the metafield definition are visible using the Storefront API.
  """
  visibleToStorefrontApi: Boolean!
}

enum Shopify_MetafieldValidationStatus {
  ANY
  VALID
  INVALID
}

"""
A metafield definition type provides basic foundation and validation for a metafield.
"""
type Shopify_MetafieldDefinitionType {
  """The category associated with the metafield definition type."""
  category: String!

  """
  The name of the type for the metafield definition.
  See the list of [supported types](https://shopify.dev/apps/metafields/types).
  """
  name: String!

  """The supported validations for a metafield definition type."""
  supportedValidations: [Shopify_MetafieldDefinitionSupportedValidation!]!

  """
  Whether metafields without a definition can be migrated to a definition of this type.
  """
  supportsDefinitionMigrations: Boolean!

  """The value type for a metafield created with this definition type."""
  valueType: Shopify_MetafieldValueType! @deprecated(reason: "`valueType` is deprecated and `name` should be used for type information.")
}

"""
The type and name for the optional validation configuration of a metafield.

For example, a supported validation might consist of a `max` name and a `number_integer` type.
This validation can then be used to enforce a maximum character length for a `single_line_text_field` metafield.
"""
type Shopify_MetafieldDefinitionSupportedValidation {
  """The name of the metafield definition validation."""
  name: String!

  """The type of input for the validation."""
  type: String!
}

enum Shopify_MetafieldValueType {
  STRING
  INTEGER
  JSON_STRING
  BOOLEAN
}

enum Shopify_MetafieldDefinitionValidationStatus {
  ALL_VALID
  IN_PROGRESS
  SOME_INVALID
}

"""
A configured metafield definition validation.

For example, for a metafield definition of `number_integer` type, you can set a validation with the name `max`
and a value of `15`. This validation will ensure that the value of the metafield is a number less than or equal to 15.

Refer to the [list of supported validations](https://shopify.dev/api/admin/graphql/reference/common-objects/metafieldDefinitionTypes#examples-Fetch_all_metafield_definition_types).
"""
type Shopify_MetafieldDefinitionValidation {
  """The validation name."""
  name: String!

  """The name for the metafield type of this validation."""
  type: String!

  """The validation value."""
  value: String
}

"""
Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
and associated records (selling plans and policies) are deleted 48 hours after a merchant
uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
"""
type Shopify_SellingPlanGroup implements Shopify_Node {
  """The identifier for app, exposed in Liquid and product JSON."""
  appId: String

  """
  Whether the given product is directly associated to the selling plan group.
  """
  appliesToProduct(
    """The ID of the product."""
    productId: ID!
  ): Boolean!

  """
  Whether the given product variant is directly associated to the selling plan group.
  """
  appliesToProductVariant(
    """The ID of the product."""
    productVariantId: ID!
  ): Boolean!

  """
  Whether any of the product variants of the given product are associated to the selling plan group.
  """
  appliesToProductVariants(
    """The ID of the product."""
    productId: ID!
  ): Boolean!

  """The date and time when the selling plan group was created."""
  createdAt: DateTime!

  """The merchant-facing description of the selling plan group."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  """The merchant-facing label of the selling plan group."""
  merchantCode: String!

  """The buyer-facing label of the selling plan group."""
  name: String!

  """
  The values of all options available on the selling plan group. Selling plans are grouped together in Liquid when they are created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
  """
  options: [String!]!

  """The relative position of the selling plan group for display."""
  position: Int

  """A count of products associated to the selling plan group."""
  productCount: Int!

  """A count of product variants associated to the selling plan group."""
  productVariantCount(
    """The ID of the product to scope the count to."""
    productId: ID
  ): Int!

  """Product variants associated to the selling plan group."""
  productVariants(
    """Filters the product variants by a product ID."""
    productId: ID

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductVariantConnection!

  """Products associated to the selling plan group."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductConnection!

  """Selling plans associated to the selling plan group."""
  sellingPlans(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SellingPlanConnection!

  """A summary of the policies associated to the selling plan group."""
  summary: String
}

"""An auto-generated type for paginating through multiple SellingPlans."""
type Shopify_SellingPlanConnection {
  """A list of edges."""
  edges: [Shopify_SellingPlanEdge!]!

  """A list of the nodes contained in SellingPlanEdge."""
  nodes: [Shopify_SellingPlan!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SellingPlan and a cursor during pagination.
"""
type Shopify_SellingPlanEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SellingPlanEdge."""
  node: Shopify_SellingPlan!
}

"""
A channel definition represents channels surfaces on the platform.
A channel definition can be a platform or a subsegment of it such as Facebook Home, Instagram Live, Instagram Shops, or WhatsApp chat.
"""
type Shopify_ChannelDefinition implements Shopify_Node {
  """Name of the channel that this sub channel belongs to."""
  channelName: String!

  """Unique string used as a public identifier for the channel definition."""
  handle: String!

  """The unique identifier for the channel definition."""
  id: ID!

  """
  Name of the sub channel (e.g. Online Store, Instagram Shopping, TikTok Live).
  """
  subChannelName: String!

  """Icon displayed when showing the channel in admin."""
  svgIcon: String
}

"""
Represents a customer's session visiting a shop's online store, including information about the marketing activity attributed to starting the session.
"""
type Shopify_CustomerVisit implements Shopify_CustomerMoment & Shopify_Node {
  """A globally-unique identifier."""
  id: ID!

  """URL of the first page the customer landed on for the session."""
  landingPage: Url

  """
  Landing page information with URL linked in HTML. For example, the first page the customer visited was store.myshopify.com/products/1.
  """
  landingPageHtml: Html

  """
  Represent actions taken by an app, on behalf of a merchant,
  to market Shopify resources such as products, collections, and discounts.
  """
  marketingEvent: Shopify_MarketingEvent

  """The date and time when the customer's session occurred."""
  occurredAt: DateTime!

  """
  Marketing referral code from the link that the customer clicked to visit the store.
  Supports the following URL attributes: _ref_, _source_, or _r_.
  For example, if the URL is myshopifystore.com/products/slide?ref=j2tj1tn2, then this value is j2tj1tn2.
  """
  referralCode: String

  """Referral information with URLs linked in HTML."""
  referralInfoHtml: FormattedString!

  """
  Webpage where the customer clicked a link that sent them to the online store.
  For example, _https://randomblog.com/page1_ or _android-app://com.google.android.gm_.
  """
  referrerUrl: Url

  """
  Source from which the customer visited the store, such as a platform (Facebook, Google), email, direct,
  a website domain, QR code, or unknown.
  """
  source: String!

  """Describes the source explicitly for first or last session."""
  sourceDescription: String

  """Type of marketing tactic."""
  sourceType: Shopify_MarketingTactic

  """
  A set of UTM parameters gathered from the URL parameters of the referrer.
  """
  utmParameters: Shopify_UTMParameters
}

"""Represents a set of UTM parameters."""
type Shopify_UTMParameters {
  """The name of a marketing campaign."""
  campaign: String

  """
  Identifies specific content in a marketing campaign. Used to differentiate between similar content or links in a marketing campaign to determine which is the most effective.
  """
  content: String

  """
  The medium of a marketing campaign, such as a banner or email newsletter.
  """
  medium: String

  """
  The source of traffic to the merchant's store, such as Google or an email newsletter.
  """
  source: String

  """Paid search terms used by a marketing campaign."""
  term: String
}

"""
Represents a fulfillment order. In Shopify, a fulfillment order represents a group of one or more items
in an order that are to be fulfilled from the same location. There can be more than one fulfillment order
for an order at a given location. Fulfillment orders are created automatically when an order is created.
To learn how to build a fulfillment app, refer to [Fulfillment apps](https://shopify.dev/apps/fulfillment).
"""
type Shopify_FulfillmentOrder implements Shopify_Node {
  """
  The fulfillment order's assigned location. This is the location expected to perform fulfillment.
  """
  assignedLocation: Shopify_FulfillmentOrderAssignedLocation!

  """Delivery method of this fulfillment order."""
  deliveryMethod: Shopify_DeliveryMethod

  """The destination where the items should be sent."""
  destination: Shopify_FulfillmentOrderDestination

  """
  The date and time at which the fulfillment order will be fulfillable. When this date and time is reached, the scheduled fulfillment order is automatically transitioned to open. For example, the `fulfill_at` date for a subscription order might be the 1st of each month, a pre-order `fulfill_at` date would be `nil`, and a standard order `fulfill_at` date would be the order creation date.
  """
  fulfillAt: DateTime

  """
  The latest date and time by which all items in the fulfillment order need to be fulfilled.
  """
  fulfillBy: DateTime

  """The fulfillment holds applied on the fulfillment order."""
  fulfillmentHolds: [Shopify_FulfillmentHold!]!

  """A list of fulfillments for the fulfillment order."""
  fulfillments(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_FulfillmentConnection!

  """A globally-unique identifier."""
  id: ID!

  """The duties delivery method of this fulfillment order."""
  internationalDuties: Shopify_FulfillmentOrderInternationalDuties

  """A list of the fulfillment order's line items."""
  lineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_FulfillmentOrderLineItemConnection!

  """
  A list of locations that the fulfillment order can potentially move to.
  """
  locationsForMove(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_FulfillmentOrderLocationForMoveConnection!

  """
  A list of requests sent by the merchant to the fulfillment service for this fulfillment order.
  """
  merchantRequests(
    """The kind of request the merchant sent."""
    kind: Shopify_FulfillmentOrderMerchantRequestKind

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_FulfillmentOrderMerchantRequestConnection!

  """The order that's associated with the fulfillment order."""
  order: Shopify_Order!

  """The request status of the fulfillment order."""
  requestStatus: Shopify_FulfillmentOrderRequestStatus!

  """The status of the fulfillment order."""
  status: Shopify_FulfillmentOrderStatus!

  """The actions that can be performed on this fulfillment order."""
  supportedActions: [Shopify_FulfillmentOrderSupportedAction!]!
}

"""
Represents the assigned location of a fulfillment order, which is a snapshot of the location
at which the fulfillment order was created. The assigned location is expected to perform fulfillment.
"""
type Shopify_FulfillmentOrderAssignedLocation {
  """The first line of the address for the location."""
  address1: String

  """The second line of the address for the location."""
  address2: String

  """The city of the location."""
  city: String

  """The two-letter country code of the location."""
  countryCode: Shopify_CountryCode!

  """
  The location where the fulfillment order was created. This can differ from the
  `FulfillmentOrderAssignedLocation` if the location was updated since the fulfillment order
  was closed.
  """
  location: Shopify_Location

  """The name of the location."""
  name: String!

  """The phone number of the location."""
  phone: String

  """The province of the location."""
  province: String

  """The ZIP code of the location."""
  zip: String
}

"""A fulfillment hold currently applied on a fulfillment order."""
type Shopify_FulfillmentHold {
  """The reason for the fulfillment hold."""
  reason: Shopify_FulfillmentHoldReason!

  """Additional information about the fulfillment hold reason."""
  reasonNotes: String
}

enum Shopify_FulfillmentHoldReason {
  AWAITING_PAYMENT
  HIGH_RISK_OF_FRAUD
  INCORRECT_ADDRESS
  INVENTORY_OUT_OF_STOCK
  UNKNOWN_DELIVERY_DATE
  OTHER
}

"""An auto-generated type for paginating through multiple Fulfillments."""
type Shopify_FulfillmentConnection {
  """A list of edges."""
  edges: [Shopify_FulfillmentEdge!]!

  """A list of the nodes contained in FulfillmentEdge."""
  nodes: [Shopify_Fulfillment!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Fulfillment and a cursor during pagination.
"""
type Shopify_FulfillmentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentEdge."""
  node: Shopify_Fulfillment!
}

"""The international duties relevant to a fulfillment order."""
type Shopify_FulfillmentOrderInternationalDuties {
  """The method of duties payment. Example values: `DDP`, `DAP`."""
  incoterm: String!
}

"""
An auto-generated type for paginating through multiple FulfillmentOrderLineItems.
"""
type Shopify_FulfillmentOrderLineItemConnection {
  """A list of edges."""
  edges: [Shopify_FulfillmentOrderLineItemEdge!]!

  """A list of the nodes contained in FulfillmentOrderLineItemEdge."""
  nodes: [Shopify_FulfillmentOrderLineItem!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one FulfillmentOrderLineItem and a cursor during pagination.
"""
type Shopify_FulfillmentOrderLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentOrderLineItemEdge."""
  node: Shopify_FulfillmentOrderLineItem!
}

"""
An auto-generated type for paginating through multiple FulfillmentOrderLocationForMoves.
"""
type Shopify_FulfillmentOrderLocationForMoveConnection {
  """A list of edges."""
  edges: [Shopify_FulfillmentOrderLocationForMoveEdge!]!

  """A list of the nodes contained in FulfillmentOrderLocationForMoveEdge."""
  nodes: [Shopify_FulfillmentOrderLocationForMove!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one FulfillmentOrderLocationForMove and a cursor during pagination.
"""
type Shopify_FulfillmentOrderLocationForMoveEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentOrderLocationForMoveEdge."""
  node: Shopify_FulfillmentOrderLocationForMove!
}

"""A location that a fulfillment order can potentially move to."""
type Shopify_FulfillmentOrderLocationForMove {
  """
  The location being considered as the fulfillment order's new assigned location.
  """
  location: Shopify_Location!

  """
  A human-readable string with the reason why the fulfillment order, or some of its line items, can't be
  moved to the location.
  """
  message: String

  """Whether the fulfillment order can be moved to the location."""
  movable: Boolean!
}

"""
An auto-generated type for paginating through multiple FulfillmentOrderMerchantRequests.
"""
type Shopify_FulfillmentOrderMerchantRequestConnection {
  """A list of edges."""
  edges: [Shopify_FulfillmentOrderMerchantRequestEdge!]!

  """A list of the nodes contained in FulfillmentOrderMerchantRequestEdge."""
  nodes: [Shopify_FulfillmentOrderMerchantRequest!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one FulfillmentOrderMerchantRequest and a cursor during pagination.
"""
type Shopify_FulfillmentOrderMerchantRequestEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentOrderMerchantRequestEdge."""
  node: Shopify_FulfillmentOrderMerchantRequest!
}

enum Shopify_FulfillmentOrderMerchantRequestKind {
  FULFILLMENT_REQUEST
  CANCELLATION_REQUEST
}

enum Shopify_FulfillmentOrderRequestStatus {
  UNSUBMITTED
  SUBMITTED
  ACCEPTED
  REJECTED
  CANCELLATION_REQUESTED
  CANCELLATION_ACCEPTED
  CANCELLATION_REJECTED
  CLOSED
}

enum Shopify_FulfillmentOrderStatus {
  OPEN
  IN_PROGRESS
  CANCELLED
  INCOMPLETE
  CLOSED
  SCHEDULED
  ON_HOLD
}

"""
One of the actions that the fulfillment order supports in its current state.
"""
type Shopify_FulfillmentOrderSupportedAction {
  """The action value."""
  action: Shopify_FulfillmentOrderAction!

  """
  The external URL to be used to initiate the fulfillment process outside Shopify.
  Applicable only when the `action` value is `EXTERNAL`.
  """
  externalUrl: Url
}

enum Shopify_FulfillmentOrderAction {
  CREATE_FULFILLMENT
  REQUEST_FULFILLMENT
  CANCEL_FULFILLMENT_ORDER
  MOVE
  REQUEST_CANCELLATION
  MARK_AS_OPEN
  RELEASE_HOLD
  HOLD
  EXTERNAL
}

"""Represents a single line item on an order."""
type Shopify_LineItem implements Shopify_Node {
  """Whether the line item can be restocked."""
  canRestock: Boolean! @deprecated(reason: "Use `restockable` instead.")

  """The subscription contract associated with this line item."""
  contract: Shopify_SubscriptionContract

  """The line item's quantity, minus the removed quantity."""
  currentQuantity: Int!

  """
  A list of attributes that represent custom features or special requests.
  """
  customAttributes: [Shopify_Attribute!]!

  """
  The discounts that have been allocated onto the line item by discount applications.
  """
  discountAllocations: [Shopify_DiscountAllocation!]!

  """The total line price after discounts are applied, in shop currency."""
  discountedTotal: Money! @deprecated(reason: "Use `discountedTotalSet` instead.")

  """
  The total line price after discounts are applied, in shop and presentment currencies.
  """
  discountedTotalSet: Shopify_MoneyBag!

  """
  The approximate split price of a line item unit, in shop currency. This value doesn't include discounts applied to the entire order.
  """
  discountedUnitPrice: Money! @deprecated(reason: "Use `discountedUnitPriceSet` instead.")

  """
  The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order.
  """
  discountedUnitPriceSet: Shopify_MoneyBag!

  """The duties associated with the line item."""
  duties: [Shopify_Duty!]!

  """The total number of units to fulfill."""
  fulfillableQuantity: Int! @deprecated(reason: "Use [FulfillmentOrderLineItem#remainingQuantity](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderLineItem#field-fulfillmentorderlineitem-remainingquantity) instead.")

  """
  The service provider that fulfills the line item.
  
  Deleted fulfillment services will return null.
  """
  fulfillmentService: Shopify_FulfillmentService @deprecated(reason: "Multi-managed inventory introduced a [breaking change](https://shopify.dev/api/release-notes/2022-07#shipping-and-fulfillment) to this field, therefore this field will no longer be supported. Fulfillment services will all be opted into SKU sharing in 2023-04. Use [FulfillmentOrder#assignedLocation](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder#field-fulfillmentorder-assignedlocation) instead.")

  """
  The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
  'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
  """
  fulfillmentStatus: String! @deprecated(reason: "Use [FulfillmentOrderLineItem#remainingQuantity](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderLineItem#field-fulfillmentorderlineitem-remainingquantity) instead")

  """A globally-unique identifier."""
  id: ID!

  """The image associated to the line item's variant."""
  image: Shopify_Image

  """Whether the line item can be edited or not."""
  merchantEditable: Boolean!

  """The name of the product."""
  name: String!

  """
  The total number of units that can't be fulfilled.
          For example, if items have been refunded, or the item is not something that can be fulfilled,
          like a tip.Please see the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object for more fulfillment details.
  """
  nonFulfillableQuantity: Int!

  """
  The total price without discounts applied, in shop currency.
  This value is based on the unit price of the variant x quantity.
  """
  originalTotal: Money! @deprecated(reason: "Use `originalTotalSet` instead.")

  """
  The total price in shop and presentment currencies, without discounts applied. This value is based on the unit price of the variant x quantity.
  """
  originalTotalSet: Shopify_MoneyBag!

  """The variant unit price without discounts applied, in shop currency."""
  originalUnitPrice: Money! @deprecated(reason: "Use `originalUnitPriceSet` instead.")

  """
  The variant unit price without discounts applied, in shop and presentment currencies.
  """
  originalUnitPriceSet: Shopify_MoneyBag!

  """The Product object associated with this line item's variant."""
  product: Shopify_Product

  """The number of variant units ordered."""
  quantity: Int!

  """The line item's quantity, minus the removed quantity."""
  refundableQuantity: Int!

  """Whether physical shipping is required for the variant."""
  requiresShipping: Boolean!

  """Whether the line item can be restocked."""
  restockable: Boolean!

  """The selling plan details associated with the line item."""
  sellingPlan: Shopify_LineItemSellingPlan

  """The variant SKU number."""
  sku: String

  """Staff attributed to the initial sale of the line item."""
  staffMember: Shopify_StaffMember

  """The taxes charged for this line item."""
  taxLines(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_TaxLine!]!

  """Whether the variant is taxable."""
  taxable: Boolean!

  """The title of the product."""
  title: String!

  """
  The total amount of the discount allocated to the line item in the shop currency.
  """
  totalDiscount: Money! @deprecated(reason: "Use `totalDiscountSet` instead.")

  """
  The total amount of the discount that's allocated to the line item, in the shop and presentment currencies. This field must be explicitly set using draft orders, Shopify scripts, or the API.
  """
  totalDiscountSet: Shopify_MoneyBag!

  """The total discounted value of unfulfilled units, in shop currency."""
  unfulfilledDiscountedTotal: Money! @deprecated(reason: "Use `unfulfilledDiscountedTotalSet` instead.")

  """
  The total discounted value of unfulfilled units, in shop and presentment currencies.
  """
  unfulfilledDiscountedTotalSet: Shopify_MoneyBag!

  """
  The total price, without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop currency.
  """
  unfulfilledOriginalTotal: Money! @deprecated(reason: "Use `unfulfilledOriginalTotalSet` instead.")

  """
  The total price, without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop and presentment currencies.
  """
  unfulfilledOriginalTotalSet: Shopify_MoneyBag!

  """The number of units not yet fulfilled."""
  unfulfilledQuantity: Int!

  """The Variant object associated with this line item."""
  variant: Shopify_ProductVariant

  """The name of the variant."""
  variantTitle: String

  """The name of the vendor who made the variant."""
  vendor: String
}

"""Represents the selling plan for a line item."""
type Shopify_LineItemSellingPlan {
  """The name of the selling plan for display purposes."""
  name: String!

  """The ID of the selling plan associated with the line item."""
  sellingPlanId: ID
}

"""Represents a single line item on an order."""
type Shopify_LineItemMutable implements Shopify_Node {
  """Whether the line item can be restocked."""
  canRestock: Boolean! @deprecated(reason: "Use `restockable` instead.")

  """
  A list of attributes that represent custom features or special requests.
  """
  customAttributes: [Shopify_Attribute!]!

  """
  The discounts that have been allocated onto the line item by discount applications.
  """
  discountAllocations: [Shopify_DiscountAllocation!]!

  """The total line price after discounts are applied, in shop currency."""
  discountedTotal: Money! @deprecated(reason: "Use `discountedTotalSet` instead.")

  """
  The total line price after discounts are applied, in shop and presentment currencies.
  """
  discountedTotalSet: Shopify_MoneyBag!

  """
  The approximate split price of a line item unit, in shop currency. This value doesn't include discounts applied to the entire order.
  """
  discountedUnitPrice: Money! @deprecated(reason: "Use `discountedUnitPriceSet` instead.")

  """
  The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order.
  """
  discountedUnitPriceSet: Shopify_MoneyBag!

  """The total number of units to fulfill."""
  fulfillableQuantity: Int!

  """
  The service provider that fulfills the line item.
  
  Deleted fulfillment services will return null.
  """
  fulfillmentService: Shopify_FulfillmentService

  """
  The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
  'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
  """
  fulfillmentStatus: String!

  """A globally-unique identifier."""
  id: ID!

  """The image associated to the line item's variant."""
  image: Shopify_Image

  """Whether the line item can be edited or not."""
  merchantEditable: Boolean!

  """The name of the product."""
  name: String!

  """
  The total number of units that can't be fulfilled. For example, if items have been refunded, or the item is not something that can be fulfilled, like a tip.
  """
  nonFulfillableQuantity: Int!

  """
  The total price without any discounts applied, in shop currency. ""This value is based on the unit price of the variant x quantity.
  """
  originalTotal: Money! @deprecated(reason: "Use `originalTotalSet` instead.")

  """
  The total price in shop and presentment currencies, without discounts applied. This value is based on the unit price of the variant x quantity.
  """
  originalTotalSet: Shopify_MoneyBag!

  """The variant unit price without discounts applied, in shop currency."""
  originalUnitPrice: Money! @deprecated(reason: "Use `originalUnitPriceSet` instead.")

  """
  The variant unit price without discounts applied, in shop and presentment currencies.
  """
  originalUnitPriceSet: Shopify_MoneyBag!

  """The Product object associated with this line item's variant."""
  product: Shopify_Product

  """The number of variant units ordered."""
  quantity: Int!

  """The line item's quantity, minus the removed quantity."""
  refundableQuantity: Int!

  """Whether physical shipping is required for the variant."""
  requiresShipping: Boolean!

  """Whether the line item can be restocked."""
  restockable: Boolean!

  """The variant SKU number."""
  sku: String

  """Staff attributed to the initial sale of the line item."""
  staffMember: Shopify_StaffMember

  """The TaxLine object connected to this line item."""
  taxLines(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_TaxLine!]!

  """Whether the variant is taxable."""
  taxable: Boolean!

  """The title of the product."""
  title: String!

  """
  The total amount of the discount allocated to the line item in the shop currency. This field must be explicitly set using draft orders, Shopify scripts, or the API. Instead of using this field, Shopify recommends using `discountAllocations`, which provides the same information.
  """
  totalDiscount: Money! @deprecated(reason: "Use `totalDiscountSet` instead.")

  """
  The total amount of the discount allocated to the line item in the presentment currency. This field must be explicitly set using draft orders, Shopify scripts, or the API. Instead of using this field, Shopify recommends using `discountAllocations`, which provides the same information.
  """
  totalDiscountSet: Shopify_MoneyBag!

  """The total discounted value of unfulfilled units, in shop currency."""
  unfulfilledDiscountedTotal: Money! @deprecated(reason: "Use `unfulfilledDiscountedTotalSet` instead.")

  """
  The total discounted value of unfulfilled units, in shop and presentment currencies.
  """
  unfulfilledDiscountedTotalSet: Shopify_MoneyBag!

  """
  The total price without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop currency.
  """
  unfulfilledOriginalTotal: Money! @deprecated(reason: "Use `unfulfilledOriginalTotalSet` instead.")

  """
  The total price without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop and presentment currencies.
  """
  unfulfilledOriginalTotalSet: Shopify_MoneyBag!

  """The number of units not yet fulfilled."""
  unfulfilledQuantity: Int!

  """The Variant object associated with this line item."""
  variant: Shopify_ProductVariant

  """The name of the variant."""
  variantTitle: String

  """The name of the vendor who made the variant."""
  vendor: String
}

"""
A payment instrument and the permission
the owner of the instrument gives to the merchant to debit it.
"""
type Shopify_PaymentMandate implements Shopify_Node {
  """The unique identifier of a payment mandate."""
  id: ID!

  """The outputs details of the payment instrument."""
  paymentInstrument: Shopify_PaymentInstrument!
}

"""All possible instrument outputs for Payment Mandates."""
union Shopify_PaymentInstrument = Shopify_VaultCreditCard | Shopify_VaultPaypalBillingAgreement

"""Represents a credit card payment instrument."""
type Shopify_VaultCreditCard {
  """The billing address of the card."""
  billingAddress: Shopify_CustomerCreditCardBillingAddress

  """The brand for the card."""
  brand: String!

  """Whether the card has been expired."""
  expired: Boolean!

  """The expiry month of the card."""
  expiryMonth: Int!

  """The expiry year of the card."""
  expiryYear: Int!

  """The last four digits for the card."""
  lastDigits: String!

  """The name of the card holder."""
  name: String!
}

"""Represents a paypal billing agreement payment instrument."""
type Shopify_VaultPaypalBillingAgreement {
  """Whether the paypal billing agreement is inactive."""
  inactive: Boolean!

  """The paypal account name."""
  name: String!

  """The paypal account email address."""
  paypalAccountEmail: String!
}

"""
Represents the data about a staff member's Shopify account. Merchants can use staff member data to get more information about the staff members in their store.
"""
type Shopify_StaffMember implements Shopify_Node {
  """Whether the staff member is active."""
  active: Boolean!

  """The image used as the staff member's avatar in the Shopify admin."""
  avatar(
    """The default image returned if the staff member has no avatar."""
    fallback: Shopify_StaffMemberDefaultImage = DEFAULT
  ): Shopify_Image!

  """The staff member's email address."""
  email: String!

  """Whether the staff member's account exists."""
  exists: Boolean!

  """The staff member's first name."""
  firstName: String

  """A globally-unique identifier."""
  id: ID!

  """The staff member's initials, if available."""
  initials: [String]

  """Whether the staff member is the shop owner."""
  isShopOwner: Boolean!

  """The staff member's last name."""
  lastName: String

  """
  The staff member's preferred locale. Locale values use the format `language` or `language-COUNTRY`, where `language` is a two-letter language code, and `COUNTRY` is a two-letter country code. For example: `en` or `en-US`
  """
  locale: String!

  """The staff member's full name."""
  name: String!

  """The staff member's phone number."""
  phone: String

  """
  The data used to customize the Shopify admin experience for the staff member.
  """
  privateData: Shopify_StaffMemberPrivateData!
}

enum Shopify_StaffMemberDefaultImage {
  DEFAULT
  TRANSPARENT
  NOT_FOUND
}

"""
Represents the data used to customize the Shopify admin experience for a logged-in staff member.
"""
type Shopify_StaffMemberPrivateData {
  """The URL to the staff member's account settings page."""
  accountSettingsUrl: Url!

  """The date and time when the staff member was created."""
  createdAt: DateTime!

  """Access permissions for the staff member."""
  permissions: [Shopify_StaffMemberPermission!]! @deprecated(reason: "Use StaffMember.permissions.userPermissions instead")
}

enum Shopify_StaffMemberPermission {
  APPLICATIONS
  CHANNELS
  CUSTOMERS
  DASHBOARD
  DOMAINS
  DRAFT_ORDERS
  EDIT_ORDERS
  FULL
  GIFT_CARDS
  LINKS
  LOCATIONS
  MARKETING
  MARKETING_SECTION
  ORDERS
  OVERVIEWS
  PAGES
  PAY_ORDERS_BY_VAULTED_CARD
  PREFERENCES
  PRODUCTS
  REPORTS
  THEMES
  TRANSLATIONS
}

"""Transaction fee related to an order transaction."""
type Shopify_TransactionFee implements Shopify_Node {
  """Amount of the fee."""
  amount: Shopify_MoneyV2!

  """Flat rate charge for a transaction."""
  flatFee: Shopify_MoneyV2!

  """Name of the credit card flat fee."""
  flatFeeName: String

  """A globally-unique identifier."""
  id: ID!

  """Percentage charge."""
  rate: Decimal!

  """Name of the credit card rate."""
  rateName: String

  """Tax amount charged on the fee."""
  taxAmount: Shopify_MoneyV2!

  """Name of the type of fee."""
  type: String!
}

"""
Represents a [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt) node.
"""
type Shopify_ProductTaxonomyNode implements Shopify_Node {
  """
  The full name of the product taxonomy node. For example,  Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds.
  """
  fullName: String!

  """The ID of the product taxonomy node."""
  id: ID!

  """Whether the node is a leaf node."""
  isLeaf: Boolean!

  """Whether the node is a root node."""
  isRoot: Boolean!

  """The name of the product taxonomy node. For example, Dog Beds."""
  name: String!
}

"""
Represents a price list, including information about related prices and eligibility rules.
You can use price lists to specify either fixed prices or adjusted relative prices that
override initial product variant prices. Price lists are applied to customers
using context rules, which determine price list eligibility.

  For more information on price lists, refer to
  [Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
"""
type Shopify_PriceList implements Shopify_Node {
  """
  A set of facts about the customer, used to determine price list eligibility.
  """
  contextRule: Shopify_PriceListContextRule

  """The currency for fixed prices associated with this price list."""
  currency: Shopify_CurrencyCode!

  """A globally-unique identifier."""
  id: ID!

  """
  The unique name of the price list, used as a human-readable identifier.
  """
  name: String!

  """Relative adjustments to other prices."""
  parent: Shopify_PriceListParent

  """A list of prices associated with the price list."""
  prices(
    """
    The origin of this price, either fixed (defined on the price list)
                   or relative (calculated using an adjustment via a price list parent configuration).
    """
    originType: Shopify_PriceListPriceOriginType

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PriceListPriceConnection!
}

"""
Facts about the customer that was used to determine the price list eligibility.
For example, if the `PriceListContextRule` is for a US market, then the price list will be eligible to all customers in the US.
For more information on price lists, refer to
[Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
"""
type Shopify_PriceListContextRule {
  """
  A list of two letter country codes that determines price list eligibility.
  """
  countries: [Shopify_CountryCode!]!

  """The associated market."""
  market: Shopify_Market
}

"""
Represents relative adjustments from one price list to other prices.
  You can use a `PriceListParent` to specify an adjusted relative price using a percentage-based
  adjustment. Adjusted prices work in conjunction with exchange rules and rounding.

  [Adjustment types](https://shopify.dev/api/admin-graphql/latest/enums/pricelistadjustmenttype)
  support both percentage increases and decreases.
"""
type Shopify_PriceListParent {
  """A price list adjustment."""
  adjustment: Shopify_PriceListAdjustment!
}

"""
The type and value of a price list adjustment.

For more information on price lists, refer to
[Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
"""
type Shopify_PriceListAdjustment {
  """The type of price adjustment, such as percentage increase or decrease."""
  type: Shopify_PriceListAdjustmentType!

  """
  The value of price adjustment, where positive numbers reduce the prices and negative numbers
  increase them.
  """
  value: Float!
}

enum Shopify_PriceListAdjustmentType {
  PERCENTAGE_DECREASE
  PERCENTAGE_INCREASE
}

"""
An auto-generated type for paginating through multiple PriceListPrices.
"""
type Shopify_PriceListPriceConnection {
  """A list of edges."""
  edges: [Shopify_PriceListPriceEdge!]!

  """A list of the nodes contained in PriceListPriceEdge."""
  nodes: [Shopify_PriceListPrice!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one PriceListPrice and a cursor during pagination.
"""
type Shopify_PriceListPriceEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of PriceListPriceEdge."""
  node: Shopify_PriceListPrice!
}

"""
Represents information about pricing for a product variant
        as defined on a price list, such as the price, compare at price, and origin type. You can use a PriceListPrice to specify a fixed price for a specific product variant.
"""
type Shopify_PriceListPrice {
  """The compare-at price of the product variant on this price list."""
  compareAtPrice: Shopify_MoneyV2

  """
  The origin of a price, either fixed (defined on the price list) or relative (calculated using a price list adjustment configuration).
  """
  originType: Shopify_PriceListPriceOriginType!

  """The price of the product variant on this price list."""
  price: Shopify_MoneyV2!

  """The product variant associated with this price."""
  variant: Shopify_ProductVariant!
}

enum Shopify_PriceListPriceOriginType {
  FIXED
  RELATIVE
}

"""
The market’s web presence, which defines its SEO strategy. This can be a different domain
(e.g. `example.ca`), subdomain (e.g. `ca.example.com`), or subfolders of the primary
domain (e.g. `example.com/en-ca`). Each web presence comprises one or more language
variants. If a market does not have its own web presence, it is accessible on the shop’s
primary domain via [country
selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).

Note: while the domain/subfolders defined by a market’s web presence are not applicable to
custom storefronts, which must manage their own domains and routing, the languages chosen
here do govern [the languages available on the Storefront
API](https://shopify.dev/custom-storefronts/internationalization/multiple-languages) for the countries in
this market.
"""
type Shopify_MarketWebPresence implements Shopify_Node {
  """
  The ISO codes for the alternate locales. When a domain is used, these locales will be
  available as language-specific subfolders. For example, if English is an
  alternate locale, and `example.ca` is the market’s domain, then
  `example.ca/en` will load in English.
  """
  alternateLocales: [String!]!

  """
  The ISO code for the default locale. When a domain is used, this is the locale that will
  be used when the domain root is accessed. For example, if French is the default locale,
  and `example.ca` is the market’s domian, then `example.ca` will load in French.
  """
  defaultLocale: String!

  """
  The web presence’s domain.
  This field will be null if `subfolderSuffix` isn't null.
  """
  domain: Shopify_Domain

  """A globally-unique identifier."""
  id: ID!

  """The associated market."""
  market: Shopify_Market!

  """The list of root URLs for each of the web presence’s locales."""
  rootUrls: [Shopify_MarketWebPresenceRootUrl!]!

  """
  The market-specific suffix of the subfolders defined by the web presence. Example: in `/en-us` the subfolder suffix is `us`. This field will be null if `domain` isn't null.
  """
  subfolderSuffix: String
}

"""
The URL for the homepage of the online store in the context of a particular market and a
particular locale.
"""
type Shopify_MarketWebPresenceRootUrl {
  """The locale that the storefront loads in."""
  locale: String!

  """The URL."""
  url: Url!
}

"""Represents a Subscription Contract."""
type Shopify_SubscriptionContract implements Shopify_Node {
  """The subscription app that this subscription contract is registered to."""
  app: Shopify_App

  """URL of the subscription contract page on the subscription app."""
  appAdminUrl: Url

  """
  The list of billing attempts associated with the subscription contract.
  """
  billingAttempts(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionBillingAttemptConnection!

  """The billing policy associated with the subscription contract."""
  billingPolicy: Shopify_SubscriptionBillingPolicy!

  """The date and time when the subscription contract was created."""
  createdAt: DateTime!

  """The currency used for the subscription contract."""
  currencyCode: Shopify_CurrencyCode!

  """A list of the custom attributes to be added to the generated orders."""
  customAttributes: [Shopify_Attribute!]!

  """The customer to whom the subscription contract belongs."""
  customer: Shopify_Customer

  """The customer payment method used for the subscription contract."""
  customerPaymentMethod(
    """Whether to show the customer's revoked payment method."""
    showRevoked: Boolean = false
  ): Shopify_CustomerPaymentMethod

  """The delivery method for each billing of the subscription contract."""
  deliveryMethod: Shopify_SubscriptionDeliveryMethod

  """The delivery policy associated with the subscription contract."""
  deliveryPolicy: Shopify_SubscriptionDeliveryPolicy!

  """The delivery price for each billing of the subscription contract."""
  deliveryPrice: Shopify_MoneyV2!

  """
  The list of subscription discounts associated with the subscription contract.
  """
  discounts(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionManualDiscountConnection!

  """A globally-unique identifier."""
  id: ID!

  """The current status of the last payment."""
  lastPaymentStatus: Shopify_SubscriptionContractLastPaymentStatus

  """The number of lines associated with the subscription contract."""
  lineCount: Int!

  """
  The list of subscription lines associated with the subscription contract.
  """
  lines(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionLineConnection!

  """The next billing date for the subscription contract."""
  nextBillingDate: DateTime

  """The note field that will be applied to the generated orders."""
  note: String

  """A list of the subscription contract's orders."""
  orders(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_OrderConnection!

  """The order from which this contract originated."""
  originOrder: Shopify_Order

  """The current status of the subscription contract."""
  status: Shopify_SubscriptionContractSubscriptionStatus!

  """The date and time when the subscription contract was updated."""
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple SubscriptionBillingAttempts.
"""
type Shopify_SubscriptionBillingAttemptConnection {
  """A list of edges."""
  edges: [Shopify_SubscriptionBillingAttemptEdge!]!

  """A list of the nodes contained in SubscriptionBillingAttemptEdge."""
  nodes: [Shopify_SubscriptionBillingAttempt!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SubscriptionBillingAttempt and a cursor during pagination.
"""
type Shopify_SubscriptionBillingAttemptEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SubscriptionBillingAttemptEdge."""
  node: Shopify_SubscriptionBillingAttempt!
}

"""Represents a Subscription Billing Policy."""
type Shopify_SubscriptionBillingPolicy {
  """
  Specific anchor dates upon which the billing interval calculations should be made.
  """
  anchors: [Shopify_SellingPlanAnchor!]!

  """
  The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
  """
  interval: Shopify_SellingPlanInterval!

  """The number of billing intervals between invoices."""
  intervalCount: Int!

  """Maximum amount of cycles after which the subscription ends."""
  maxCycles: Int

  """Minimum amount of cycles required in the subscription."""
  minCycles: Int
}

"""Represents a selling plan policy anchor."""
type Shopify_SellingPlanAnchor {
  """
  The cutoff day for the anchor.
  
  If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
  the days of the week according to ISO 8601, where 1 is Monday.
  
  If `type` is MONTHDAY, then the value must be between 1-31.
  
  If `type` is YEARDAY, then the value must be `null`.
  """
  cutoffDay: Int

  """
  The day of the anchor.
  
  If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
  the days of the week according to ISO 8601, where 1 is Monday.
  
  If `type` is not WEEKDAY, then the value must be between 1-31.
  """
  day: Int!

  """
  The month of the anchor. If type is different than YEARDAY, then the value must
  be `null` or between 1-12.
  """
  month: Int

  """
  Represents the anchor type, it can be one one of WEEKDAY, MONTHDAY, YEARDAY.
  """
  type: Shopify_SellingPlanAnchorType!
}

enum Shopify_SellingPlanAnchorType {
  WEEKDAY
  MONTHDAY
  YEARDAY
}

enum Shopify_SellingPlanInterval {
  DAY
  WEEK
  MONTH
  YEAR
}

"""
Describes the delivery method to use to get the physical goods to the customer.
"""
union Shopify_SubscriptionDeliveryMethod = Shopify_SubscriptionDeliveryMethodShipping

"""
Represents a shipping delivery method: a mailing address and a shipping option.
"""
type Shopify_SubscriptionDeliveryMethodShipping {
  """The address to ship to."""
  address: Shopify_SubscriptionMailingAddress!

  """The details of the shipping method to use."""
  shippingOption: Shopify_SubscriptionDeliveryMethodShippingOption!
}

"""Represents a Mailing Address on a Subscription."""
type Shopify_SubscriptionMailingAddress {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """The name of the city, district, village, or town."""
  city: String

  """The name of the customer's company or organization."""
  company: String

  """The name of the country."""
  country: String

  """
  The two-letter code for the country of the address.
  
  For example, US.
  """
  countryCode: Shopify_CountryCode

  """The first name of the customer."""
  firstName: String

  """The last name of the customer."""
  lastName: String

  """The full name of the customer, based on firstName and lastName."""
  name: String

  """
  A unique phone number for the customer. Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String

  """The region of the address, such as the province, state, or district."""
  province: String

  """
  The two-letter code for the region.
  
  For example, ON.
  """
  provinceCode: String

  """The zip or postal code of the address."""
  zip: String
}

"""Represents the selected shipping option on a subscription contract."""
type Shopify_SubscriptionDeliveryMethodShippingOption {
  """The carrier service of the shipping option."""
  carrierService: Shopify_DeliveryCarrierService

  """The code of the shipping option."""
  code: String

  """The description of the shipping option."""
  description: String

  """The presentment title of the shipping option."""
  presentmentTitle: String

  """The title of the shipping option."""
  title: String
}

"""Represents a Subscription Delivery Policy."""
type Shopify_SubscriptionDeliveryPolicy {
  """
  The specific anchor dates upon which the delivery interval calculations should be made.
  """
  anchors: [Shopify_SellingPlanAnchor!]!

  """
  The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
  """
  interval: Shopify_SellingPlanInterval!

  """The number of delivery intervals between deliveries."""
  intervalCount: Int!
}

"""
An auto-generated type for paginating through multiple SubscriptionManualDiscounts.
"""
type Shopify_SubscriptionManualDiscountConnection {
  """A list of edges."""
  edges: [Shopify_SubscriptionManualDiscountEdge!]!

  """A list of the nodes contained in SubscriptionManualDiscountEdge."""
  nodes: [Shopify_SubscriptionManualDiscount!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SubscriptionManualDiscount and a cursor during pagination.
"""
type Shopify_SubscriptionManualDiscountEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SubscriptionManualDiscountEdge."""
  node: Shopify_SubscriptionManualDiscount!
}

"""Custom subscription discount."""
type Shopify_SubscriptionManualDiscount {
  """Entitled line items used to apply the subscription discount on."""
  entitledLines: Shopify_SubscriptionDiscountEntitledLines!

  """The unique identifier."""
  id: ID!

  """
  The maximum number of times the subscription discount will be applied on orders.
  """
  recurringCycleLimit: Int

  """The reason that the discount on the subscription draft is rejected."""
  rejectionReason: Shopify_SubscriptionDiscountRejectionReason

  """Type of line the discount applies on."""
  targetType: Shopify_DiscountTargetType!

  """The title associated with the subscription discount."""
  title: String

  """The type of the subscription discount."""
  type: Shopify_DiscountType!

  """The number of times the discount was applied."""
  usageCount: Int!

  """The value of the subscription discount."""
  value: Shopify_SubscriptionDiscountValue!
}

"""Represents the subscription lines the discount applies on."""
type Shopify_SubscriptionDiscountEntitledLines {
  """
  Specify whether the subscription discount will apply on all subscription lines.
  """
  all: Boolean!

  """
  The list of subscription lines associated with the subscription discount.
  """
  lines(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionLineConnection!
}

"""
An auto-generated type for paginating through multiple SubscriptionLines.
"""
type Shopify_SubscriptionLineConnection {
  """A list of edges."""
  edges: [Shopify_SubscriptionLineEdge!]!

  """A list of the nodes contained in SubscriptionLineEdge."""
  nodes: [Shopify_SubscriptionLine!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SubscriptionLine and a cursor during pagination.
"""
type Shopify_SubscriptionLineEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SubscriptionLineEdge."""
  node: Shopify_SubscriptionLine!
}

"""Represents a Subscription Line."""
type Shopify_SubscriptionLine {
  """
  The price per unit for the subscription line in the contract's currency.
  """
  currentPrice: Shopify_MoneyV2!

  """List of custom attributes associated to the line item."""
  customAttributes: [Shopify_Attribute!]!

  """Discount allocations."""
  discountAllocations: [Shopify_SubscriptionDiscountAllocation!]!

  """The unique identifier."""
  id: ID!

  """Total line price including all discounts."""
  lineDiscountedPrice: Shopify_MoneyV2!

  """Describe the price changes of the line over time."""
  pricingPolicy: Shopify_SubscriptionPricingPolicy

  """The product id associated with the subscription line."""
  productId: ID

  """The quantity of the unit selected for the subscription line."""
  quantity: Int!

  """Whether physical shipping is required for the variant."""
  requiresShipping: Boolean!

  """
  The selling plan ID associated to the line.
  
  Indicates which selling plan was used to create this
  contract line initially. The selling plan ID is also used to
  find the associated delivery profile.
  
  The subscription contract, subscription line, or selling plan might have
  changed. As a result, the selling plan's attributes might not
  match the information on the contract.
  """
  sellingPlanId: ID

  """
  The selling plan name associated to the line. This name describes
  the order line items created from this subscription line
  for both merchants and customers.
  
  The value can be different from the selling plan's name, because both
  the selling plan's name and the subscription line's selling_plan_name
  attribute can be updated independently.
  """
  sellingPlanName: String

  """Variant SKU number of the item associated with the subscription line."""
  sku: String

  """Whether the variant is taxable."""
  taxable: Boolean!

  """Product title of the item associated with the subscription line."""
  title: String!

  """The product variant id associated with the subscription line."""
  variantId: ID

  """The image associated with the line item's variant or product."""
  variantImage: Shopify_Image

  """
  Product variant title of the item associated with the subscription line.
  """
  variantTitle: String
}

"""Represents what a particular discount reduces from a line price."""
type Shopify_SubscriptionDiscountAllocation {
  """Allocation amount."""
  amount: Shopify_MoneyV2!

  """Discount that created the allocation."""
  discount: Shopify_SubscriptionDiscount!
}

"""Subscription draft discount types."""
union Shopify_SubscriptionDiscount = Shopify_SubscriptionAppliedCodeDiscount | Shopify_SubscriptionManualDiscount

"""Represents an applied code discount."""
type Shopify_SubscriptionAppliedCodeDiscount {
  """The unique identifier."""
  id: ID!

  """The redeem code of the discount that applies on the subscription."""
  redeemCode: String!

  """The reason that the discount on the subscription draft is rejected."""
  rejectionReason: Shopify_SubscriptionDiscountRejectionReason
}

enum Shopify_SubscriptionDiscountRejectionReason {
  NOT_FOUND
  NO_ENTITLED_LINE_ITEMS
  QUANTITY_NOT_IN_RANGE
  PURCHASE_NOT_IN_RANGE
  CUSTOMER_NOT_ELIGIBLE
  USAGE_LIMIT_REACHED
  CUSTOMER_USAGE_LIMIT_REACHED
  CURRENTLY_INACTIVE
  NO_ENTITLED_SHIPPING_LINES
  INCOMPATIBLE_PURCHASE_TYPE
  INTERNAL_ERROR
}

"""Represents a Subscription Line Pricing Policy."""
type Shopify_SubscriptionPricingPolicy {
  """
  The base price per unit for the subscription line in the contract's currency.
  """
  basePrice: Shopify_MoneyV2!

  """The adjustments per cycle for the subscription line."""
  cycleDiscounts: [Shopify_SubscriptionCyclePriceAdjustment!]!
}

"""Represents a Subscription Line Pricing Cycle Adjustment."""
type Shopify_SubscriptionCyclePriceAdjustment {
  """Price adjustment type."""
  adjustmentType: Shopify_SellingPlanPricingPolicyAdjustmentType!

  """Price adjustment value."""
  adjustmentValue: Shopify_SellingPlanPricingPolicyAdjustmentValue!

  """The number of cycles required before this pricing policy applies."""
  afterCycle: Int!

  """The computed price after the adjustments applied."""
  computedPrice: Shopify_MoneyV2!
}

enum Shopify_SellingPlanPricingPolicyAdjustmentType {
  PERCENTAGE
  FIXED_AMOUNT
  PRICE
}

"""Represents a selling plan pricing policy adjustment value type."""
union Shopify_SellingPlanPricingPolicyAdjustmentValue = Shopify_MoneyV2 | Shopify_SellingPlanPricingPolicyPercentageValue

"""The percentage value of a selling plan pricing policy percentage type."""
type Shopify_SellingPlanPricingPolicyPercentageValue {
  """The percentage value."""
  percentage: Float!
}

enum Shopify_DiscountTargetType {
  LINE_ITEM
  SHIPPING_LINE
}

enum Shopify_DiscountType {
  MANUAL
  CODE_DISCOUNT
}

"""The value of the discount and how it will be applied."""
union Shopify_SubscriptionDiscountValue = Shopify_SubscriptionDiscountFixedAmountValue | Shopify_SubscriptionDiscountPercentageValue

"""The value of the discount and how it will be applied."""
type Shopify_SubscriptionDiscountFixedAmountValue {
  """The fixed amount value of the discount."""
  amount: Shopify_MoneyV2!

  """Whether the amount is applied per item."""
  appliesOnEachItem: Boolean!
}

"""The percentage value of the discount."""
type Shopify_SubscriptionDiscountPercentageValue {
  """The percentage value of the discount."""
  percentage: Int!
}

enum Shopify_SubscriptionContractLastPaymentStatus {
  SUCCEEDED
  FAILED
}

enum Shopify_SubscriptionContractSubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
  EXPIRED
  FAILED
}

"""
Each subject (individual) of an account has a verification object giving
 information about the verification state.
"""
type Shopify_ShopifyPaymentsVerification implements Shopify_Node {
  """A globally-unique identifier."""
  id: ID!

  """The status of the verification."""
  status: Shopify_ShopifyPaymentsVerificationStatus!

  """The subject/individual who has to be verified."""
  subject: Shopify_ShopifyPaymentsVerificationSubject!
}

enum Shopify_ShopifyPaymentsVerificationStatus {
  VERIFIED
  UNVERIFIED
  PENDING
}

"""
The verification subject represents an individual that has to be verified.
"""
type Shopify_ShopifyPaymentsVerificationSubject {
  """The family name of the individual to verify."""
  familyName: String!

  """The given name of the individual to verify."""
  givenName: String!
}

"""
A token that's used to delegate unauthenticated access scopes to clients that need to access
the unauthenticated Storefront API. An app can have a maximum of 100 active storefront access
tokens for each shop.
"""
type Shopify_StorefrontAccessToken implements Shopify_Node {
  """List of permissions associated with the token."""
  accessScopes: [Shopify_AccessScope!]!

  """The issued public access token."""
  accessToken: String!

  """The date and time when the public access token was created."""
  createdAt: DateTime!

  """A globally-unique identifier."""
  id: ID!

  """
  An arbitrary title for each token determined by the developer, used for reference         purposes.
  """
  title: String!

  """The date and time when the storefront access token was updated."""
  updatedAt: DateTime!
}

"""
App credits can be applied by the merchant towards future app purchases, subscriptions, or usage records in Shopify.
"""
type Shopify_AppCredit implements Shopify_Node {
  """The amount that can be used towards future app purchases in Shopify."""
  amount: Shopify_MoneyV2!

  """The date and time when the app credit was created."""
  createdAt: DateTime!

  """The description of the app credit."""
  description: String!

  """A globally-unique identifier."""
  id: ID!

  """Whether the app credit is a test transaction."""
  test: Boolean!
}

"""Services and features purchased once by a store."""
type Shopify_AppPurchaseOneTime implements Shopify_AppPurchase & Shopify_Node {
  """The date and time when the app purchase occurred."""
  createdAt: DateTime!

  """A globally-unique identifier."""
  id: ID!

  """The name of the app purchase."""
  name: String!

  """The amount to be charged to the store for the app purchase."""
  price: Shopify_MoneyV2!

  """The status of the app purchase."""
  status: Shopify_AppPurchaseStatus!

  """Whether the app purchase is a test transaction."""
  test: Boolean!
}

"""Services and features purchased once by the store."""
interface Shopify_AppPurchase {
  """The date and time when the app purchase occurred."""
  createdAt: DateTime!

  """The name of the app purchase."""
  name: String!

  """The amount to be charged to the store for the app purchase."""
  price: Shopify_MoneyV2!

  """The status of the app purchase."""
  status: Shopify_AppPurchaseStatus!

  """Whether the app purchase is a test transaction."""
  test: Boolean!
}

enum Shopify_AppPurchaseStatus {
  ACCEPTED
  ACTIVE
  DECLINED
  EXPIRED
  PENDING
}

"""Represents app revenue that was captured externally by the partner."""
type Shopify_AppRevenueAttributionRecord implements Shopify_Node {
  """The financial amount captured in this attribution."""
  amount: Shopify_MoneyV2!

  """The timestamp when the financial amount was captured."""
  capturedAt: DateTime!

  """The timestamp at which this revenue attribution was issued."""
  createdAt: DateTime!

  """A globally-unique identifier."""
  id: ID!

  """
  The unique value submitted during the creation of the app revenue attribution record.
  For more information, refer to
  [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
  """
  idempotencyKey: String!

  """Indicates whether this is a test submission."""
  test: Boolean!

  """The type of revenue attribution."""
  type: Shopify_AppRevenueAttributionType!
}

enum Shopify_AppRevenueAttributionType {
  APPLICATION_PURCHASE
  APPLICATION_SUBSCRIPTION
  APPLICATION_USAGE
  OTHER
}

"""
A product and the subset of associated variants that are part of this delivery profile.
"""
type Shopify_DeliveryProfileItem implements Shopify_Node {
  """A globally-unique identifier."""
  id: ID!

  """A product associated with this profile."""
  product: Shopify_Product!

  """The product variants associated with this delivery profile."""
  variants(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductVariantConnection!
}

"""
A location group is a collection of active locations. They share zones and delivery methods across delivery
profiles.
"""
type Shopify_DeliveryLocationGroup implements Shopify_Node {
  """A globally-unique identifier."""
  id: ID!

  """A list of active locations that are part of this location group."""
  locations(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_LocationSortKeys = NAME

    """
    Supported filter parameters:
     - `active`
     - `address1`
     - `address2`
     - `city`
     - `country`
     - `legacy`
     - `name`
     - `province`
     - `zip`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """If true, also include the legacy locations of fulfillment services."""
    includeLegacy: Boolean = false

    """If true, also include the locations that are deactivated."""
    includeInactive: Boolean = false
  ): Shopify_LocationConnection!
}

"""
Standard metafield definition templates provide preset configurations to create metafield definitions.
Each template has a specific namespace and key that we've reserved to have specific meanings for common use cases.

Refer to the [list of standard metafield definitions](https://shopify.dev/apps/metafields/definitions/standard-definitions).
"""
type Shopify_StandardMetafieldDefinitionTemplate implements Shopify_Node {
  """The description of the standard metafield definition."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  """
  The key owned by the definition after the definition has been activated.
  """
  key: String!

  """The human-readable name for the standard metafield definition."""
  name: String!

  """
  The namespace owned by the definition after the definition has been activated.
  """
  namespace: String!

  """
  The list of resource types that the standard metafield definition can be applied to.
  """
  ownerTypes: [Shopify_MetafieldOwnerType!]!

  """
  The associated [metafield definition type](https://shopify.dev/apps/metafields/definitions/types) that the metafield stores.
  """
  type: Shopify_MetafieldDefinitionType!

  """The configured validations for the standard metafield definition."""
  validations: [Shopify_MetafieldDefinitionValidation!]!

  """
  Whether metafields for the definition are by default visible using the Storefront API.
  """
  visibleToStorefrontApi: Boolean!
}

"""Represents any file other than HTML."""
type Shopify_GenericFile implements Shopify_File & Shopify_Node {
  """A word or phrase to describe the contents or the function of a file."""
  alt: String

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
  """
  createdAt: DateTime!

  """Any errors that have occurred on the file."""
  fileErrors: [Shopify_FileError!]!

  """The status of the file."""
  fileStatus: Shopify_FileStatus!

  """A globally-unique identifier."""
  id: ID!

  """The generic file's MIME type."""
  mimeType: String

  """The generic file's size in bytes."""
  originalFileSize: Int

  """The preview image for the media."""
  preview: Shopify_MediaPreviewImage

  """The generic file's URL."""
  url: Url
}

"""A file interface."""
interface Shopify_File {
  """A word or phrase to describe the contents or the function of a file."""
  alt: String

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
  """
  createdAt: DateTime!

  """Any errors that have occurred on the file."""
  fileErrors: [Shopify_FileError!]!

  """The status of the file."""
  fileStatus: Shopify_FileStatus!

  """The preview image for the media."""
  preview: Shopify_MediaPreviewImage
}

"""
A file error. This typically occurs when there is an issue with the file itself causing it to fail validation.
Check the file before attempting to upload again.
"""
type Shopify_FileError {
  """Code representing the type of error."""
  code: Shopify_FileErrorCode!

  """Additional details regarding the error."""
  details: String

  """Translated error message."""
  message: String!
}

enum Shopify_FileErrorCode {
  UNKNOWN
  INVALID_SIGNED_URL
  IMAGE_DOWNLOAD_FAILURE
  IMAGE_PROCESSING_FAILURE
  MEDIA_TIMEOUT_ERROR
  EXTERNAL_VIDEO_NOT_FOUND
  EXTERNAL_VIDEO_UNLISTED
  EXTERNAL_VIDEO_INVALID_ASPECT_RATIO
  EXTERNAL_VIDEO_EMBED_DISABLED
  EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING
  GENERIC_FILE_DOWNLOAD_FAILURE
  GENERIC_FILE_INVALID_SIZE
  VIDEO_METADATA_READ_ERROR
  VIDEO_INVALID_FILETYPE_ERROR
  VIDEO_MIN_WIDTH_ERROR
  VIDEO_MAX_WIDTH_ERROR
  VIDEO_MIN_HEIGHT_ERROR
  VIDEO_MAX_HEIGHT_ERROR
  VIDEO_MIN_DURATION_ERROR
  VIDEO_MAX_DURATION_ERROR
  VIDEO_VALIDATION_ERROR
  MODEL3D_VALIDATION_ERROR
  MODEL3D_THUMBNAIL_GENERATION_ERROR
  MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR
  MODEL3D_GLB_OUTPUT_CREATION_ERROR
  MODEL3D_PROCESSING_FAILURE
  UNSUPPORTED_IMAGE_FILE_TYPE
  INVALID_IMAGE_FILE_SIZE
  INVALID_IMAGE_ASPECT_RATIO
  INVALID_IMAGE_RESOLUTION
  FILE_STORAGE_LIMIT_EXCEEDED
}

enum Shopify_FileStatus {
  UPLOADED
  PROCESSING
  READY
  FAILED
}

"""An image hosted on Shopify."""
type Shopify_MediaImage implements Shopify_File & Shopify_Media & Shopify_Node {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
  """
  createdAt: DateTime!

  """Any errors that have occurred on the file."""
  fileErrors: [Shopify_FileError!]!

  """The status of the file."""
  fileStatus: Shopify_FileStatus!

  """A globally-unique identifier."""
  id: ID!

  """The image for the media. Returns `null` until `status` is `READY`."""
  image: Shopify_Image

  """The media content type."""
  mediaContentType: Shopify_MediaContentType!

  """Any errors which have occurred on the media."""
  mediaErrors: [Shopify_MediaError!]!

  """The warnings attached to the media."""
  mediaWarnings: [Shopify_MediaWarning!]!

  """The MIME type of the image."""
  mimeType: String

  """The original source of the image."""
  originalSource: Shopify_MediaImageOriginalSource

  """The preview image for the media."""
  preview: Shopify_MediaPreviewImage

  """Current status of the media."""
  status: Shopify_MediaStatus!
}

"""The original source for an image."""
type Shopify_MediaImageOriginalSource {
  """The size of the original file in bytes."""
  fileSize: Int
}

"""A custom page on the Online Store."""
type Shopify_OnlineStorePage implements Shopify_HasPublishedTranslations & Shopify_Navigable & Shopify_Node {
  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """A globally-unique identifier."""
  id: ID!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [Shopify_PublishedTranslation!]!
}

"""Represents a Shopify hosted video."""
type Shopify_Video implements Shopify_File & Shopify_Media & Shopify_Node {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
  """
  createdAt: DateTime!

  """
  The video's duration in milliseconds. This value is `null` unless the video's status field is
  [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
  """
  duration: Int

  """Any errors that have occurred on the file."""
  fileErrors: [Shopify_FileError!]!

  """The status of the file."""
  fileStatus: Shopify_FileStatus!

  """The video's filename."""
  filename: String!

  """A globally-unique identifier."""
  id: ID!

  """The media content type."""
  mediaContentType: Shopify_MediaContentType!

  """Any errors which have occurred on the media."""
  mediaErrors: [Shopify_MediaError!]!

  """The warnings attached to the media."""
  mediaWarnings: [Shopify_MediaWarning!]!

  """
  The video's original source. This value is `null` unless the video's status field is
  [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
  """
  originalSource: Shopify_VideoSource

  """The preview image for the media."""
  preview: Shopify_MediaPreviewImage

  """
  The video's sources. This value is empty unless the video's status field is
  [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
  """
  sources: [Shopify_VideoSource!]!

  """Current status of the media."""
  status: Shopify_MediaStatus!
}

"""
Represents a source for a Shopify hosted video.

Types of sources include the original video, lower resolution versions of the original video,
and an m3u8 playlist file.

Only [videos](https://shopify.dev/api/admin-graphql/latest/objects/video) with a status field
of [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready) have sources.
"""
type Shopify_VideoSource {
  """The video source's file size in bytes."""
  fileSize: Int

  """The video source's file format extension."""
  format: String!

  """The video source's height."""
  height: Int!

  """The video source's MIME type."""
  mimeType: String!

  """The video source's URL."""
  url: String!

  """The video source's width."""
  width: Int!
}

"""The delivery method used by a fulfillment order."""
type Shopify_DeliveryMethod implements Shopify_Node {
  """A globally-unique identifier."""
  id: ID!

  """
  The maximum date and time by which the delivery is expected to be completed.
  """
  maxDeliveryDateTime: DateTime

  """The type of the delivery method."""
  methodType: Shopify_DeliveryMethodType!

  """
  The minimum date and time by which the delivery is expected to be completed.
  """
  minDeliveryDateTime: DateTime
}

enum Shopify_DeliveryMethodType {
  SHIPPING
  PICK_UP
  NONE
  RETAIL
  LOCAL
}

"""
Represents the destination where the items should be sent upon fulfillment.
"""
type Shopify_FulfillmentOrderDestination implements Shopify_Node {
  """The first line of the address of the destination."""
  address1: String

  """The second line of the address of the destination."""
  address2: String

  """The city of the destination."""
  city: String

  """The company of the destination."""
  company: String

  """The two-letter country code of the destination."""
  countryCode: Shopify_CountryCode

  """The email of the customer at the destination."""
  email: String

  """The first name of the customer at the destination."""
  firstName: String

  """A globally-unique identifier."""
  id: ID!

  """The last name of the customer at the destination."""
  lastName: String

  """The phone number of the customer at the destination."""
  phone: String

  """The province of the destination."""
  province: String

  """The ZIP code of the destination."""
  zip: String
}

"""
The fulfillment event that describes the fulfilllment status at a particular time.
"""
type Shopify_FulfillmentEvent implements Shopify_Node {
  """The time at which this fulfillment event happened."""
  happenedAt: DateTime!

  """A globally-unique identifier."""
  id: ID!

  """The status of this fulfillment event."""
  status: Shopify_FulfillmentEventStatus!
}

enum Shopify_FulfillmentEventStatus {
  LABEL_PURCHASED
  LABEL_PRINTED
  READY_FOR_PICKUP
  CONFIRMED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  ATTEMPTED_DELIVERY
  DELIVERED
  FAILURE
}

"""Represents a line item from an order that's included in a fulfillment."""
type Shopify_FulfillmentLineItem implements Shopify_Node {
  """The total price after discounts are applied."""
  discountedTotal: Money! @deprecated(reason: "Use `discountedTotalSet` instead.")

  """
  The total price after discounts are applied in shop and presentment currencies.
  """
  discountedTotalSet: Shopify_MoneyBag!

  """A globally-unique identifier."""
  id: ID!

  """The associated order's line item."""
  lineItem: Shopify_LineItem!

  """The total price before discounts are applied."""
  originalTotal: Money! @deprecated(reason: "Use `originalTotalSet` instead.")

  """
  The total price before discounts are applied in shop and presentment currencies.
  """
  originalTotalSet: Shopify_MoneyBag!

  """Number of line items in the fulfillment."""
  quantity: Int
}

"""The duty details for a line item."""
type Shopify_Duty implements Shopify_Node {
  """
  The ISO 3166-1 alpha-2 country code of the country of origin used in calculating the duty.
  """
  countryCodeOfOrigin: Shopify_CountryCode

  """The harmonized system code of the item used in calculating the duty."""
  harmonizedSystemCode: String

  """A globally-unique identifier."""
  id: ID!

  """The amount of the duty."""
  price: Shopify_MoneyBag!

  """A list of taxes charged on the duty."""
  taxLines: [Shopify_TaxLine!]!
}

"""
Represents the payment schedule for a single payment defined in the payment terms.
"""
type Shopify_PaymentSchedule implements Shopify_Node {
  """Amount owed for this payment schedule."""
  amount: Shopify_MoneyV2!

  """Date and time when the payment schedule is paid or fulfilled."""
  completedAt: DateTime

  """Date and time when the payment schedule is due."""
  dueAt: DateTime

  """A globally-unique identifier."""
  id: ID!

  """Date and time when the invoice is sent."""
  issuedAt: DateTime
}

"""A bank account that can receive payouts."""
type Shopify_ShopifyPaymentsBankAccount implements Shopify_Node {
  """The account number of the bank account."""
  accountNumber: String!

  """The last digits of the account number (the rest is redacted)."""
  accountNumberLastDigits: String!

  """The name of the bank."""
  bankName: String

  """The country of the bank."""
  country: Shopify_CountryCode!

  """The date that the bank account was created."""
  createdAt: DateTime!

  """The currency of the bank account."""
  currency: Shopify_CurrencyCode!

  """A globally-unique identifier."""
  id: ID!

  """
  All current and previous payouts made between the account and the bank account.
  """
  payouts(
    """Filter the direction of the payout."""
    transactionType: Shopify_ShopifyPaymentsPayoutTransactionType

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ShopifyPaymentsPayoutConnection!

  """The routing number of the bank account."""
  routingNumber: String!

  """The status of the bank account."""
  status: Shopify_ShopifyPaymentsBankAccountStatus!
}

enum Shopify_ShopifyPaymentsBankAccountStatus {
  NEW
  VALIDATED
  VERIFIED
  ERRORED
}

"""A country that is used to define a shipping zone."""
type Shopify_DeliveryCountry implements Shopify_Node {
  """
  A two-letter country code in ISO 3166-1 alpha-2 standard.
  It also includes a flag indicating whether the country should be
  a part of the 'Rest Of World' shipping zone.
  """
  code: Shopify_DeliveryCountryCodeOrRestOfWorld!

  """A globally-unique identifier."""
  id: ID!

  """The full name of the country."""
  name: String!

  """The list of regions associated with this country."""
  provinces: [Shopify_DeliveryProvince!]!

  """
  The translated name of the country. The translation returned is based on the system's locale.
  """
  translatedName: String!
}

"""
The country code and whether the country is a part of the 'Rest Of World' shipping zone.
"""
type Shopify_DeliveryCountryCodeOrRestOfWorld {
  """The country code in the ISO 3166-1 alpha-2 format."""
  countryCode: Shopify_CountryCode

  """Whether the country is a part of the 'Rest of World' shipping zone."""
  restOfWorld: Boolean!
}

"""
Represents how a product can be sold and purchased. Selling plans and associated records (selling plan groups
and policies) are deleted 48 hours after a merchant uninstalls their subscriptions app. We recommend backing
up these records if you need to restore them later.

For more information on selling plans, refer to
[*Creating and managing selling plans*](https://shopify.dev/apps/subscriptions/selling-plans).
"""
type Shopify_SellingPlan implements Shopify_Node {
  """A selling plan policy which describes the recurring billing details."""
  billingPolicy: Shopify_SellingPlanBillingPolicy!

  """The category used to classify the selling plan for reporting purposes."""
  category: Shopify_SellingPlanCategory

  """The date and time when the selling plan was created."""
  createdAt: DateTime!

  """A selling plan policy which describes the delivery details."""
  deliveryPolicy: Shopify_SellingPlanDeliveryPolicy!

  """Buyer facing string which describes the selling plan commitment."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  """When to reserve inventory for a selling plan."""
  inventoryPolicy: Shopify_SellingPlanInventoryPolicy

  """
  A customer-facing description of the selling plan.
  
  If your store supports multiple currencies, then don't include country-specific pricing content, such as "Buy monthly, get 10$ CAD off". This field won't be converted to reflect different currencies.
  """
  name: String!

  """
  The values of all options available on the selling plan. Selling plans are grouped together in Liquid when they are created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
  """
  options: [String!]!

  """
  Relative position of the selling plan for display. A lower position will be displayed before a higher position.
  """
  position: Int

  """Selling plan pricing details."""
  pricingPolicies: [Shopify_SellingPlanPricingPolicy!]!
}

"""
Represents the billing frequency associated to the selling plan (for example, bill every week, or bill every
three months). The selling plan billing policy and associated records (selling plan groups, selling plans, pricing
policies, and delivery policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
We recommend backing up these records if you need to restore them later.
"""
union Shopify_SellingPlanBillingPolicy = Shopify_SellingPlanFixedBillingPolicy | Shopify_SellingPlanRecurringBillingPolicy

"""The fixed selling plan billing policy."""
type Shopify_SellingPlanFixedBillingPolicy {
  """The checkout charge when the full amount isn't charged at checkout."""
  checkoutCharge: Shopify_SellingPlanCheckoutCharge!

  """The exact time when to capture the full payment."""
  remainingBalanceChargeExactTime: DateTime

  """
  The period after remaining_balance_charge_trigger, before capturing the full payment. Expressed as an ISO8601 duration.
  """
  remainingBalanceChargeTimeAfterCheckout: String

  """When to capture payment for amount due."""
  remainingBalanceChargeTrigger: Shopify_SellingPlanRemainingBalanceChargeTrigger!
}

"""
The amount charged at checkout when the full amount isn't charged at checkout.
"""
type Shopify_SellingPlanCheckoutCharge {
  """The charge type for the checkout charge."""
  type: Shopify_SellingPlanCheckoutChargeType!

  """The charge value for the checkout charge."""
  value: Shopify_SellingPlanCheckoutChargeValue!
}

enum Shopify_SellingPlanCheckoutChargeType {
  PERCENTAGE
  PRICE
}

"""The portion of the price to be charged at checkout."""
union Shopify_SellingPlanCheckoutChargeValue = Shopify_MoneyV2 | Shopify_SellingPlanCheckoutChargePercentageValue

"""The percentage value of the price used for checkout charge."""
type Shopify_SellingPlanCheckoutChargePercentageValue {
  """The percentage value of the price used for checkout charge."""
  percentage: Float!
}

enum Shopify_SellingPlanRemainingBalanceChargeTrigger {
  NO_REMAINING_BALANCE
  EXACT_TIME
  TIME_AFTER_CHECKOUT
}

"""Represents a recurring selling plan billing policy."""
type Shopify_SellingPlanRecurringBillingPolicy {
  """
  Specific anchor dates upon which the billing interval calculations should be made.
  """
  anchors: [Shopify_SellingPlanAnchor!]!

  """The date and time when the selling plan billing policy was created."""
  createdAt: DateTime!

  """The billing frequency, it can be either: day, week, month or year."""
  interval: Shopify_SellingPlanInterval!

  """The number of intervals between billings."""
  intervalCount: Int!

  """Maximum number of billing iterations."""
  maxCycles: Int

  """Minimum number of billing iterations."""
  minCycles: Int
}

enum Shopify_SellingPlanCategory {
  OTHER
  PRE_ORDER
  SUBSCRIPTION
  TRY_BEFORE_YOU_BUY
}

"""
Represents the delivery frequency associated to the selling plan (for example, deliver every month, or deliver
every other week). The selling plan delivery policy and associated records (selling plan groups, selling plans,
pricing policies, and billing policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
We recommend backing up these records if you need to restore them later.
"""
union Shopify_SellingPlanDeliveryPolicy = Shopify_SellingPlanFixedDeliveryPolicy | Shopify_SellingPlanRecurringDeliveryPolicy

"""Represents a fixed selling plan delivery policy."""
type Shopify_SellingPlanFixedDeliveryPolicy {
  """
  The specific anchor dates upon which the delivery interval calculations should be made.
  """
  anchors: [Shopify_SellingPlanAnchor!]!

  """A buffer period for orders to be included in next fulfillment anchor."""
  cutoff: Int

  """The date and time when the fulfillment should trigger."""
  fulfillmentExactTime: DateTime

  """
  What triggers the fulfillment. The value must be one of ANCHOR, ASAP, EXACT_TIME, or UNKNOWN.
  """
  fulfillmentTrigger: Shopify_SellingPlanFulfillmentTrigger!

  """
  Whether the delivery policy is merchant or buyer-centric.
  Buyer-centric delivery policies state the time when the buyer will receive the goods.
  Merchant-centric delivery policies state the time when the fulfillment should be started.
  Currently, only merchant-centric delivery policies are supported.
  """
  intent: Shopify_SellingPlanFixedDeliveryPolicyIntent!

  """
  The fulfillment or delivery behavior of the first fulfillment when the order is placed before the anchor. The default value for this field is `ASAP`.
  """
  preAnchorBehavior: Shopify_SellingPlanFixedDeliveryPolicyPreAnchorBehavior!
}

enum Shopify_SellingPlanFulfillmentTrigger {
  ANCHOR
  ASAP
  EXACT_TIME
  UNKNOWN
}

enum Shopify_SellingPlanFixedDeliveryPolicyIntent {
  FULFILLMENT_BEGIN
}

enum Shopify_SellingPlanFixedDeliveryPolicyPreAnchorBehavior {
  ASAP
  NEXT
}

"""Represents a recurring selling plan delivery policy."""
type Shopify_SellingPlanRecurringDeliveryPolicy {
  """
  The specific anchor dates upon which the delivery interval calculations should be made.
  """
  anchors: [Shopify_SellingPlanAnchor!]!

  """The date and time when the selling plan delivery policy was created."""
  createdAt: DateTime!

  """A buffer period for orders to be included in a cycle."""
  cutoff: Int

  """
  Whether the delivery policy is merchant or buyer-centric.
  Buyer-centric delivery policies state the time when the buyer will receive the goods.
  Merchant-centric delivery policies state the time when the fulfillment should be started.
  Currently, only merchant-centric delivery policies are supported.
  """
  intent: Shopify_SellingPlanRecurringDeliveryPolicyIntent!

  """The delivery frequency, it can be either: day, week, month or year."""
  interval: Shopify_SellingPlanInterval!

  """The number of intervals between deliveries."""
  intervalCount: Int!

  """
  The fulfillment or delivery behavior of the first fulfillment when the order is placed before the anchor. The default value for this field is `ASAP`.
  """
  preAnchorBehavior: Shopify_SellingPlanRecurringDeliveryPolicyPreAnchorBehavior!
}

enum Shopify_SellingPlanRecurringDeliveryPolicyIntent {
  FULFILLMENT_BEGIN
}

enum Shopify_SellingPlanRecurringDeliveryPolicyPreAnchorBehavior {
  ASAP
  NEXT
}

"""The selling plan inventory policy."""
type Shopify_SellingPlanInventoryPolicy {
  """When to reserve inventory for the order."""
  reserve: Shopify_SellingPlanReserve!
}

enum Shopify_SellingPlanReserve {
  ON_FULFILLMENT
  ON_SALE
}

"""
Represents the type of pricing associated to the selling plan (for example, a $10 or 20% discount that is set
for a limited period or that is fixed for the duration of the subscription). Selling plan pricing policies and
associated records (selling plan groups, selling plans, billing policy, and delivery policy) are deleted 48
hours after a merchant uninstalls their subscriptions app. We recommend backing up these records if you need
to restore them later.
"""
union Shopify_SellingPlanPricingPolicy = Shopify_SellingPlanFixedPricingPolicy | Shopify_SellingPlanRecurringPricingPolicy

"""A line item that belongs to a fulfillment order."""
type Shopify_FulfillmentOrderLineItem implements Shopify_Node {
  """A globally-unique identifier."""
  id: ID!

  """The associated order line item."""
  lineItem: Shopify_LineItem!

  """The number of units remaining to be fulfilled."""
  remainingQuantity: Int!

  """The total number of units to be fulfilled."""
  totalQuantity: Int!

  """Warning messages for a fulfillment order line item."""
  warnings: [Shopify_FulfillmentOrderLineItemWarning!]!
}

"""
A fulfillment order line item warning. For example, a warning about why a fulfillment request was rejected.
"""
type Shopify_FulfillmentOrderLineItemWarning {
  """The description of warning."""
  description: String

  """The title of warning."""
  title: String
}

"""
Represents a request made by the merchant to a fulfillment service for a fulfillment order.
"""
type Shopify_FulfillmentOrderMerchantRequest implements Shopify_Node {
  """A globally-unique identifier."""
  id: ID!

  """The kind of request made."""
  kind: Shopify_FulfillmentOrderMerchantRequestKind!

  """The optional message that the merchant included in the request."""
  message: String

  """
  Additional options requested by the merchant. These depend on the `kind` of the request.
  For example, for a `FULFILLMENT_REQUEST`, one option is `notify_customer`, which indicates whether the
  merchant intends to notify the customer upon fulfillment. The fulfillment service can then set
  `notifyCustomer` when making calls to `FulfillmentCreateV2`.
  """
  requestOptions: Json

  """The response from the fulfillment service."""
  responseData: Json

  """The timestamp when the request was made."""
  sentAt: DateTime!
}

"""
A record of an execution of the subscription billing process. Billing attempts use
idempotency keys to avoid duplicate order creation. A successful billing attempt
will create an order.
"""
type Shopify_SubscriptionBillingAttempt implements Shopify_Node {
  """The date and time when the billing attempt was completed."""
  completedAt: DateTime

  """The date and time when the billing attempt was created."""
  createdAt: DateTime!

  """A code corresponding to a payment error during processing."""
  errorCode: Shopify_SubscriptionBillingAttemptErrorCode

  """A message describing a payment error during processing."""
  errorMessage: String

  """A globally-unique identifier."""
  id: ID!

  """A unique key generated by the client to avoid duplicate payments."""
  idempotencyKey: String!

  """
  The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow.
  """
  nextActionUrl: Url

  """The result of this billing attempt if completed successfully."""
  order: Shopify_Order

  """
  The date and time used to calculate fulfillment intervals for a billing attempt that
  successfully completed after the current anchor date. To prevent fulfillment from being
  pushed to the next anchor date, this field can override the billing attempt date.
  """
  originTime: DateTime

  """Whether the billing attempt is still processing."""
  ready: Boolean!

  """The subscription contract."""
  subscriptionContract: Shopify_SubscriptionContract!
}

enum Shopify_SubscriptionBillingAttemptErrorCode {
  PAYMENT_METHOD_NOT_FOUND
  PAYMENT_PROVIDER_IS_NOT_ENABLED
  INVALID_PAYMENT_METHOD
  UNEXPECTED_ERROR
  EXPIRED_PAYMENT_METHOD
  PAYMENT_METHOD_DECLINED
  AUTHENTICATION_ERROR
  TEST_MODE
  BUYER_CANCELED_PAYMENT_METHOD
  CUSTOMER_NOT_FOUND
  CUSTOMER_INVALID
  INVALID_SHIPPING_ADDRESS
  INVALID_CUSTOMER_BILLING_AGREEMENT
  INVOICE_ALREADY_PAID
  PAYMENT_METHOD_INCOMPATIBLE_WITH_GATEWAY_CONFIG
  AMOUNT_TOO_SMALL
}

"""A line item included in a draft order."""
type Shopify_DraftOrderLineItem implements Shopify_Node {
  """
  The discount that will be applied to the line item or the overall order.
  """
  appliedDiscount: Shopify_DraftOrderAppliedDiscount

  """
  Whether the line item is a custom line item (`true`) or a product variant line item (`false`).
  """
  custom: Boolean!

  """
  A list of attributes that represent custom features or special requests.
  """
  customAttributes: [Shopify_Attribute!]!

  """The line item price after discounts are applied."""
  discountedTotal: Money!

  """
  The `discountedTotal` divided by `quantity`, resulting in the value of the discount per unit.
  """
  discountedUnitPrice: Money!

  """
  Name of the service provider who fulfilled the order.
  
  Valid values are either **manual** or the name of the provider.
  For example, **amazon**, **shipwire**.
  
  Deleted fulfillment services will return null.
  """
  fulfillmentService: Shopify_FulfillmentService

  """
  The weight of the line item in grams. The weight can only be specified if the line item is a custom
  line item.
  """
  grams: Int @deprecated(reason: "Use `weight` instead.")

  """A globally-unique identifier."""
  id: ID!

  """The image associated with the draft order line item."""
  image: Shopify_Image

  """Whether the line item is a gift card."""
  isGiftCard: Boolean!

  """The name of the product."""
  name: String!

  """
  The total price (without discounts) of the line item, based on the original unit price of the variant x quantity.
  """
  originalTotal: Money!

  """The variant price without any discounts applied."""
  originalUnitPrice: Money!

  """The product corresponding to the line item’s product variant."""
  product: Shopify_Product

  """The number of product variants that are requested in the draft order."""
  quantity: Int!

  """Whether physical shipping is required for the variant."""
  requiresShipping: Boolean!

  """The SKU number of the product variant."""
  sku: String

  """
  A list of tax line objects, each of which details the total taxes applicable to the order.
  """
  taxLines: [Shopify_TaxLine!]!

  """Whether the variant is taxable."""
  taxable: Boolean!

  """
  The title of the product or variant. This field only applies to custom line items.
  """
  title: String!

  """The total value of the discount that is applied to the line item."""
  totalDiscount: Money!

  """The associated variant for the line item."""
  variant: Shopify_ProductVariant

  """The name of the variant."""
  variantTitle: String

  """The name of the vendor who created the product variant."""
  vendor: String

  """The weight unit and value for a draft order line item."""
  weight: Shopify_Weight
}

"""A weight, which includes a numeric value and a unit of measurement."""
type Shopify_Weight {
  """The unit of measurement for `value`."""
  unit: Shopify_WeightUnit!

  """The weight value using the unit system specified with `unit`."""
  value: Float!
}

"""A dynamic collection of customers based on specific criteria."""
type Shopify_Segment implements Shopify_Node {
  """The date and time when the segment was added to the store."""
  creationDate: DateTime!

  """A globally-unique identifier."""
  id: ID!

  """The date and time when the segment was last updated."""
  lastEditDate: DateTime!

  """The name of the segment."""
  name: String!

  """
  A precise definition of the segment. The definition is composed of a combination of conditions on facts about customers.
  """
  query: String!
}

"""A discount code of a price rule."""
type Shopify_PriceRuleDiscountCode implements Shopify_Node {
  """The application that created the discount code."""
  app: Shopify_App

  """The code to apply the discount."""
  code: String!

  """A globally-unique identifier."""
  id: ID!

  """
  The number of times that the price rule has been used. This value is updated asynchronously and can be different than the actual usage count.
  """
  usageCount: Int!
}

"""Store usage for app subscriptions with usage pricing."""
type Shopify_AppUsageRecord implements Shopify_Node {
  """The date and time when the usage record was created."""
  createdAt: DateTime!

  """The description of the app usage record."""
  description: String!

  """A globally-unique identifier."""
  id: ID!

  """
  The price of the usage record. The only permitted currency code is USD.
  """
  price: Shopify_MoneyV2!

  """Defines the usage pricing plan the merchant is subscribed to."""
  subscriptionLineItem: Shopify_AppSubscriptionLineItem!
}

"""A region that is used to define a shipping zone."""
type Shopify_DeliveryProvince implements Shopify_Node {
  """The code of the region."""
  code: String!

  """A globally-unique identifier."""
  id: ID!

  """The full name of the region."""
  name: String!

  """
  The translated name of the region. The translation returned is based on the system's locale.
  """
  translatedName: String!
}

"""
A zone is a group of countries that have the same shipping rates. Customers can order products from a store only if they choose a shipping destination that's included in one of the store's zones.
"""
type Shopify_DeliveryZone implements Shopify_Node {
  """The list of countries within the zone."""
  countries: [Shopify_DeliveryCountry!]!

  """A globally-unique identifier."""
  id: ID!

  """The name of the zone."""
  name: String!
}

"""
A method definition contains the delivery rate and the conditions that must be met for the method to be
applied.
"""
type Shopify_DeliveryMethodDefinition implements Shopify_Node {
  """Whether this method definition is active."""
  active: Boolean!

  """The description of the method definition."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  """
  The method conditions that must pass for this method definition to be applied to an order.
  """
  methodConditions: [Shopify_DeliveryCondition!]!

  """The name of the method definition."""
  name: String!

  """
  The provided rate for this method definition, from a rate definition or participant.
  """
  rateProvider: Shopify_DeliveryRateProvider!
}

"""A rate provided by a merchant-defined rate or a participant."""
union Shopify_DeliveryRateProvider = Shopify_DeliveryParticipant | Shopify_DeliveryRateDefinition

"""A shipping service provider or a carrier account."""
type Shopify_DeliveryCarrierService implements Shopify_Node {
  """The list of services offered for given destinations."""
  availableServicesForCountries(
    """The locations of the possible origins."""
    origins: [ID]

    """The country codes of the destinations."""
    countryCodes: [Shopify_CountryCode]

    """Whether to use 'Rest of World' as the destination."""
    restOfWorld: Boolean!
  ): [Shopify_DeliveryAvailableService!]!

  """
  The properly formatted name of the shipping service provider, ready to display.
  """
  formattedName: String

  """The logo of the service provider."""
  icon: Shopify_Image!

  """A globally-unique identifier."""
  id: ID!

  """The name of the shipping service provider."""
  name: String
}

"""
A shipping service and a list of countries that the service is available for.
"""
type Shopify_DeliveryAvailableService {
  """The countries the service provider ships to."""
  countries: Shopify_DeliveryCountryCodesOrRestOfWorld!

  """The name of the service."""
  name: String!
}

"""
The list of country codes and information whether the countries
are a part of the 'Rest Of World' shipping zone.
"""
type Shopify_DeliveryCountryCodesOrRestOfWorld {
  """List of applicable country codes in the ISO 3166-1 alpha-2 format."""
  countryCodes: [Shopify_CountryCode!]!

  """Whether the countries are a part of the 'Rest of World' shipping zone."""
  restOfWorld: Boolean!
}

"""
A condition that must pass for a delivery method definition to be applied to an order.
"""
type Shopify_DeliveryCondition implements Shopify_Node {
  """The value (weight or price) that the condition field is compared to."""
  conditionCriteria: Shopify_DeliveryConditionCriteria!

  """The field to compare the criterion value against, using the operator."""
  field: Shopify_DeliveryConditionField!

  """A globally-unique identifier."""
  id: ID!

  """The operator to compare the field and criterion value."""
  operator: Shopify_DeliveryConditionOperator!
}

"""The value (weight or price) that the condition field is compared to."""
union Shopify_DeliveryConditionCriteria = Shopify_MoneyV2 | Shopify_Weight

enum Shopify_DeliveryConditionField {
  TOTAL_WEIGHT
  TOTAL_PRICE
}

enum Shopify_DeliveryConditionOperator {
  GREATER_THAN_OR_EQUAL_TO
  LESS_THAN_OR_EQUAL_TO
}

"""
A participant defines carrier-calculated rates for shipping services
with a possible merchant-defined fixed fee or a percentage-of-rate fee.
"""
type Shopify_DeliveryParticipant implements Shopify_Node {
  """
  Whether to display new shipping services automatically to the customer when the service becomes available.
  """
  adaptToNewServicesFlag: Boolean!

  """The carrier used for this participant."""
  carrierService: Shopify_DeliveryCarrierService!

  """The merchant-defined fixed fee for this participant."""
  fixedFee: Shopify_MoneyV2

  """A globally-unique identifier."""
  id: ID!

  """
  The carrier-specific services offered by the participant, and whether each service is active.
  """
  participantServices: [Shopify_DeliveryParticipantService!]!

  """The merchant-defined percentage-of-rate fee for this participant."""
  percentageOfRateFee: Float!
}

"""A mail service provided by the participant."""
type Shopify_DeliveryParticipantService {
  """Whether the service is active."""
  active: Boolean!

  """The name of the service."""
  name: String!
}

"""
The merchant-defined rate of the [DeliveryMethodDefinition](https://shopify.dev/api/admin-graphql/latest/objects/DeliveryMethodDefinition).
"""
type Shopify_DeliveryRateDefinition implements Shopify_Node {
  """A globally-unique identifier."""
  id: ID!

  """The price of this rate."""
  price: Shopify_MoneyV2!
}

"""Represents a video hosted outside of Shopify."""
type Shopify_ExternalVideo implements Shopify_Media & Shopify_Node {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  """The embed URL of the video for the respective host."""
  embedUrl: Url!

  """The URL."""
  embeddedUrl: Url! @deprecated(reason: "Use `originUrl` instead.")

  """The host of the external video."""
  host: Shopify_MediaHost!

  """A globally-unique identifier."""
  id: ID!

  """The media content type."""
  mediaContentType: Shopify_MediaContentType!

  """Any errors which have occurred on the media."""
  mediaErrors: [Shopify_MediaError!]!

  """The warnings attached to the media."""
  mediaWarnings: [Shopify_MediaWarning!]!

  """The origin URL of the video on the respective host."""
  originUrl: Url!

  """The preview image for the media."""
  preview: Shopify_MediaPreviewImage

  """Current status of the media."""
  status: Shopify_MediaStatus!
}

enum Shopify_MediaHost {
  YOUTUBE
  VIMEO
}

"""Represents a Shopify hosted 3D model."""
type Shopify_Model3d implements Shopify_Media & Shopify_Node {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  """The 3d model's bounding box information."""
  boundingBox: Shopify_Model3dBoundingBox

  """The 3d model's filename."""
  filename: String!

  """A globally-unique identifier."""
  id: ID!

  """The media content type."""
  mediaContentType: Shopify_MediaContentType!

  """Any errors which have occurred on the media."""
  mediaErrors: [Shopify_MediaError!]!

  """The warnings attached to the media."""
  mediaWarnings: [Shopify_MediaWarning!]!

  """The 3d model's original source."""
  originalSource: Shopify_Model3dSource

  """The preview image for the media."""
  preview: Shopify_MediaPreviewImage

  """The 3d model's sources."""
  sources: [Shopify_Model3dSource!]!

  """Current status of the media."""
  status: Shopify_MediaStatus!
}

"""Bounding box information of a 3d model."""
type Shopify_Model3dBoundingBox {
  """Size in meters of the smallest volume which contains the 3d model."""
  size: Shopify_Vector3!
}

"""
Representation of 3d vectors and points. It can represent
either the coordinates of a point in space, a direction, or
size. Presented as an object with three floating-point values.
"""
type Shopify_Vector3 {
  """The x coordinate of Vector3."""
  x: Float!

  """The y coordinate of Vector3."""
  y: Float!

  """The z coordinate of Vector3."""
  z: Float!
}

"""
A source for a Shopify-hosted 3d model.

Types of sources include GLB and USDZ formatted 3d models, where the former
is an original 3d model and the latter has been converted from the original.

If the original source is in GLB format and over 15 MBs in size, then both the
original and the USDZ formatted source are optimized to reduce the file size.
"""
type Shopify_Model3dSource {
  """The 3d model source's filesize."""
  filesize: Int!

  """The 3d model source's format."""
  format: String!

  """The 3d model source's MIME type."""
  mimeType: String!

  """The 3d model source's URL."""
  url: String!
}

"""
Basic events chronicle resource activities such as the creation of an article, the fulfillment of an order, or
the addition of a product.
"""
type Shopify_BasicEvent implements Shopify_Event & Shopify_Node {
  """The name of the app that created the event."""
  appTitle: String

  """Whether the event was created by an app."""
  attributeToApp: Boolean!

  """Whether the event was caused by an admin user."""
  attributeToUser: Boolean!

  """The date and time when the event was created."""
  createdAt: DateTime!

  """Whether the event is critical."""
  criticalAlert: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """Human readable text that describes the event."""
  message: FormattedString!
}

"""
Comment events are generated by staff members of a shop.
They are created when a staff member adds a comment to the timeline of an order, draft order, customer, or transfer.
"""
type Shopify_CommentEvent implements Shopify_Event & Shopify_Node {
  """The name of the app that created the event."""
  appTitle: String

  """The attachments associated with the comment event."""
  attachments: [Shopify_CommentEventAttachment!]!

  """Whether the event was created by an app."""
  attributeToApp: Boolean!

  """Whether the event was caused by an admin user."""
  attributeToUser: Boolean!

  """The name of the user that authored the comment event."""
  author: Shopify_StaffMember!

  """
  Whether the comment event can be deleted. If true, then the comment event can be deleted.
  """
  canDelete: Boolean!

  """
  Whether the comment event can be edited. If true, then the comment event can be edited.
  """
  canEdit: Boolean!

  """The date and time when the event was created."""
  createdAt: DateTime!

  """Whether the event is critical."""
  criticalAlert: Boolean!

  """
  Whether the comment event has been edited. If true, then the comment event has been edited.
  """
  edited: Boolean!

  """
  The object reference associated with the comment event. For example, a product or discount).
  """
  embed: Shopify_CommentEventEmbed

  """A globally-unique identifier."""
  id: ID!

  """Human readable text that describes the event."""
  message: FormattedString!

  """The raw body of the comment event."""
  rawMessage: String!

  """The parent subject to which the comment event belongs."""
  subject: Shopify_CommentEventSubject!
}

"""A file attachment associated to a comment event."""
type Shopify_CommentEventAttachment {
  """
  The file extension of the comment event attachment, indicating the file format.
  """
  fileExtension: String

  """A globally-unique identifier."""
  id: ID!

  """The image attached to the comment event."""
  image: Shopify_Image

  """The filename of the comment event attachment."""
  name: String!

  """The size of the attachment."""
  size: Int!

  """The URL of the attachment."""
  url: Url!
}

"""The main embed of a comment event."""
union Shopify_CommentEventEmbed = Shopify_Customer | Shopify_DraftOrder | Shopify_Order | Shopify_Product | Shopify_ProductVariant

"""A country which comprises a market."""
type Shopify_MarketRegionCountry implements Shopify_MarketRegion & Shopify_Node {
  """The ISO code identifying the country."""
  code: Shopify_CountryCode!

  """A globally-unique identifier."""
  id: ID!

  """The name of the region."""
  name: String!
}

"""
An asynchronous long-running operation to fetch data in bulk or to bulk import data.

Bulk operations are created using the `bulkOperationRunQuery` or `bulkOperationRunMutation` mutation. After
they are created, clients should poll the `status` field for updates. When `COMPLETED`, the `url` field contains
a link to the data in [JSONL](http://jsonlines.org/) format.

Refer to the [bulk operations guide](https://shopify.dev/api/usage/bulk-operations/imports) for more details.
"""
type Shopify_BulkOperation implements Shopify_Node {
  """When the bulk operation was successfully completed."""
  completedAt: DateTime

  """When the bulk operation was created."""
  createdAt: DateTime!

  """Error code for failed operations."""
  errorCode: Shopify_BulkOperationErrorCode

  """File size in bytes of the file in the `url` field."""
  fileSize: UnsignedInt64

  """A globally-unique identifier."""
  id: ID!

  """
  A running count of all the objects processed.
  For example, when fetching all the products and their variants, this field counts both products and variants.
  This field can be used to track operation progress.
  """
  objectCount: UnsignedInt64!

  """
  The URL that points to the partial or incomplete response data (in [JSONL](http://jsonlines.org/) format) that was returned by a failed operation.
  The URL expires 7 days after the operation fails. Returns `null` when there's no data available.
  """
  partialDataUrl: Url

  """GraphQL query document specified in `bulkOperationRunQuery`."""
  query: String!

  """
  A running count of all the objects that are processed at the root of the query.
  For example, when fetching all the products and their variants, this field only counts products.
  This field can be used to track operation progress.
  """
  rootObjectCount: UnsignedInt64!

  """Status of the bulk operation."""
  status: Shopify_BulkOperationStatus!

  """The bulk operation's type."""
  type: Shopify_BulkOperationType!

  """
  The URL that points to the response data in [JSONL](http://jsonlines.org/) format.
  The URL expires 7 days after the operation completes.
  """
  url: Url
}

enum Shopify_BulkOperationErrorCode {
  ACCESS_DENIED
  INTERNAL_SERVER_ERROR
  TIMEOUT
}

enum Shopify_BulkOperationStatus {
  CANCELED
  CANCELING
  COMPLETED
  CREATED
  EXPIRED
  FAILED
  RUNNING
}

enum Shopify_BulkOperationType {
  QUERY
  MUTATION
}

"""An order with edits applied but not saved."""
type Shopify_CalculatedOrder implements Shopify_Node {
  """
  Returns only the new discount applications being added to the order in the current edit.
  """
  addedDiscountApplications(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CalculatedDiscountApplicationConnection!

  """
  Returns only the new line items being added to the order during the current edit.
  """
  addedLineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CalculatedLineItemConnection!

  """
  Amount of the order-level discount (does not contain any line item discounts) in shop and presentment currencies.
  """
  cartDiscountAmountSet: Shopify_MoneyBag

  """Whether the changes have been applied and saved to the order."""
  committed: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """
  Returns all items on the order that existed before starting the edit.
  Will include any changes that have been made.
  Will not include line items added during the current edit.
  """
  lineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """
    Supported filter parameters:
     - `editable`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_CalculatedLineItemConnection!

  """The HTML of the customer notification for the order edit."""
  notificationPreviewHtml: Html

  """The customer notification title."""
  notificationPreviewTitle: String!

  """The order without any changes applied."""
  order: Shopify_Order! @deprecated(reason: "Use `originalOrder` instead.")

  """The order without any changes applied."""
  originalOrder: Shopify_Order!

  """List of changes made to the order during the current edit."""
  stagedChanges(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_OrderStagedChangeConnection!

  """
  The sum of the quantities for the line items that contribute to the order's subtotal.
  """
  subtotalLineItemsQuantity: Int!

  """
  The subtotal of the line items, in shop and presentment currencies, after all the discounts are applied.  The subtotal does not include shipping.  The subtotal includes taxes for taxes-included orders and excludes taxes for taxes-excluded orders.
  """
  subtotalPriceSet: Shopify_MoneyBag

  """Taxes charged for the line item."""
  taxLines: [Shopify_TaxLine!]!

  """
  Total price of the order less the total amount received from the customer in shop and presentment currencies.
  """
  totalOutstandingSet: Shopify_MoneyBag!

  """
  Total amount of the order (includes taxes and discounts) in shop and presentment currencies.
  """
  totalPriceSet: Shopify_MoneyBag!
}

"""
An auto-generated type for paginating through multiple CalculatedDiscountApplications.
"""
type Shopify_CalculatedDiscountApplicationConnection {
  """A list of edges."""
  edges: [Shopify_CalculatedDiscountApplicationEdge!]!

  """A list of the nodes contained in CalculatedDiscountApplicationEdge."""
  nodes: [Shopify_CalculatedDiscountApplication!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one CalculatedDiscountApplication and a cursor during pagination.
"""
type Shopify_CalculatedDiscountApplicationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CalculatedDiscountApplicationEdge."""
  node: Shopify_CalculatedDiscountApplication!
}

"""
A [discount application](https://shopify.dev/api/admin-graphql/latest/interfaces/discountapplication) involved in order editing that might be newly added or have new changes applied.
"""
interface Shopify_CalculatedDiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: Shopify_DiscountApplicationAllocationMethod!

  """The level at which the discount was applied."""
  appliedTo: Shopify_DiscountApplicationLevel!

  """
  The description of discount application. Indicates the reason why the discount was applied.
  """
  description: String

  """A globally-unique identifier."""
  id: ID!

  """How the discount amount is distributed on the discounted lines."""
  targetSelection: Shopify_DiscountApplicationTargetSelection!

  """Whether the discount is applied on line items or shipping lines."""
  targetType: Shopify_DiscountApplicationTargetType!

  """The value of the discount application."""
  value: Shopify_PricingValue!
}

enum Shopify_DiscountApplicationLevel {
  ORDER
  LINE
}

"""
An auto-generated type for paginating through multiple CalculatedLineItems.
"""
type Shopify_CalculatedLineItemConnection {
  """A list of edges."""
  edges: [Shopify_CalculatedLineItemEdge!]!

  """A list of the nodes contained in CalculatedLineItemEdge."""
  nodes: [Shopify_CalculatedLineItem!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one CalculatedLineItem and a cursor during pagination.
"""
type Shopify_CalculatedLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CalculatedLineItemEdge."""
  node: Shopify_CalculatedLineItem!
}

"""
A line item involved in order editing that may be newly added or have new changes applied.
"""
type Shopify_CalculatedLineItem {
  """
  The discounts that have been allocated onto the line item by discount applications.
  """
  calculatedDiscountAllocations: [Shopify_CalculatedDiscountAllocation!]!

  """
  A list of attributes that represent custom features or special requests.
  """
  customAttributes: [Shopify_Attribute!]!

  """
  The discounts that have been allocated onto the line item by discount applications.
  """
  discountAllocations: [Shopify_DiscountAllocation!]! @deprecated(reason: "Use `calculatedDiscountAllocations` instead.")

  """
  The price of a single quantity of the line item with line item discounts applied, in shop and presentment currencies. Discounts applied to the entire order aren't included in this price.
  """
  discountedUnitPriceSet: Shopify_MoneyBag!

  """The total number of items that can be edited."""
  editableQuantity: Int!

  """The editable quantity prior to any changes made in the current edit."""
  editableQuantityBeforeChanges: Int!

  """The total price of editable lines in shop and presentment currencies."""
  editableSubtotalSet: Shopify_MoneyBag!

  """Whether the calculated line item has a staged discount."""
  hasStagedLineItemDiscount: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """The image object associated to the line item's variant."""
  image: Shopify_Image

  """
  The variant unit price in shop and presentment currencies, without any discounts applied.
  """
  originalUnitPriceSet: Shopify_MoneyBag!

  """The total number of items."""
  quantity: Int!

  """Whether the line item can be restocked or not."""
  restockable: Boolean!

  """Whether the changes on the line item will result in a restock."""
  restocking: Boolean!

  """The variant SKU number."""
  sku: String

  """A list of changes that affect this line item."""
  stagedChanges: [Shopify_OrderStagedChange!]!

  """The title of the product."""
  title: String!

  """
  The total price of uneditable lines in shop and presentment currencies.
  """
  uneditableSubtotalSet: Shopify_MoneyBag!

  """
  The product variant associated with this line item. The value is null for custom line items and items where
  the variant has been deleted.
  """
  variant: Shopify_ProductVariant

  """The title of the variant."""
  variantTitle: String
}

"""
An amount discounting the line that has been allocated by an associated discount application.
"""
type Shopify_CalculatedDiscountAllocation {
  """
  The money amount that's allocated by the discount application in shop and presentment currencies.
  """
  allocatedAmountSet: Shopify_MoneyBag!

  """The discount that the allocated amount originated from."""
  discountApplication: Shopify_CalculatedDiscountApplication!
}

"""A change that has been applied to an order."""
union Shopify_OrderStagedChange = Shopify_OrderStagedChangeAddCustomItem | Shopify_OrderStagedChangeAddLineItemDiscount | Shopify_OrderStagedChangeAddShippingLine | Shopify_OrderStagedChangeAddVariant | Shopify_OrderStagedChangeDecrementItem | Shopify_OrderStagedChangeIncrementItem

"""
A change to the order representing the addition of a
custom line item. For example, you might want to add gift wrapping service
as a custom line item.
"""
type Shopify_OrderStagedChangeAddCustomItem {
  """
  The price of an individual item without any discounts applied. This value cannot be negative.
  """
  originalUnitPrice: Shopify_MoneyV2!

  """
  The quantity of the custom item to add to the order. This value must be greater than zero.
  """
  quantity: Int!

  """The title of the custom item."""
  title: String!
}

"""
The discount applied to an item that was added during the current order edit.
"""
type Shopify_OrderStagedChangeAddLineItemDiscount {
  """The description of the discount."""
  description: String!

  """A globally-unique identifier."""
  id: ID!

  """The pricing value of the discount."""
  value: Shopify_PricingValue!
}

"""
A new [shipping line](https://shopify.dev/api/admin-graphql/latest/objects/shippingline)
added as part of an order edit.
"""
type Shopify_OrderStagedChangeAddShippingLine {
  """The phone number at the shipping address."""
  phone: String

  """The shipping line's title that is shown to the buyer."""
  presentmentTitle: String

  """The price that applies to the shipping line."""
  price: Shopify_MoneyV2!

  """The title of the shipping line."""
  title: String
}

"""
A change to the order representing the addition of an existing product variant.
"""
type Shopify_OrderStagedChangeAddVariant {
  """The quantity of the product variant that was added."""
  quantity: Int!

  """The product variant that was added."""
  variant: Shopify_ProductVariant!
}

"""An removal of items from an existing line item on the order."""
type Shopify_OrderStagedChangeDecrementItem {
  """The number of items removed."""
  delta: Int!

  """The original line item."""
  lineItem: Shopify_LineItem!

  """The intention to restock the removed items."""
  restock: Boolean!
}

"""An addition of items to an existing line item on the order."""
type Shopify_OrderStagedChangeIncrementItem {
  """The number of items added."""
  delta: Int!

  """The original line item."""
  lineItem: Shopify_LineItem!
}

"""
An auto-generated type for paginating through multiple OrderStagedChanges.
"""
type Shopify_OrderStagedChangeConnection {
  """A list of edges."""
  edges: [Shopify_OrderStagedChangeEdge!]!

  """A list of the nodes contained in OrderStagedChangeEdge."""
  nodes: [Shopify_OrderStagedChange!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one OrderStagedChange and a cursor during pagination.
"""
type Shopify_OrderStagedChangeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of OrderStagedChangeEdge."""
  node: Shopify_OrderStagedChange!
}

"""
The properties and status of a bulk discount redeem code creation operation.
"""
type Shopify_DiscountRedeemCodeBulkCreation implements Shopify_Node {
  """
  The result of each code creation operation associated with the bulk creation operation including any errors that might have occurred during the operation.
  """
  codes(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_DiscountRedeemCodeBulkCreationCodeConnection!

  """The number of codes to create."""
  codesCount: Int!

  """The date and time when the bulk creation was created."""
  createdAt: DateTime!

  """The code discount associated with the created codes."""
  discountCode: Shopify_DiscountCodeNode

  """
  Whether the bulk creation is still queued (`false`) or has been run (`true`).
  """
  done: Boolean!

  """The number of codes that weren't created successfully."""
  failedCount: Int!

  """A globally-unique identifier."""
  id: ID!

  """The number of codes created successfully."""
  importedCount: Int!
}

"""
An auto-generated type for paginating through multiple DiscountRedeemCodeBulkCreationCodes.
"""
type Shopify_DiscountRedeemCodeBulkCreationCodeConnection {
  """A list of edges."""
  edges: [Shopify_DiscountRedeemCodeBulkCreationCodeEdge!]!

  """
  A list of the nodes contained in DiscountRedeemCodeBulkCreationCodeEdge.
  """
  nodes: [Shopify_DiscountRedeemCodeBulkCreationCode!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one DiscountRedeemCodeBulkCreationCode and a cursor during pagination.
"""
type Shopify_DiscountRedeemCodeBulkCreationCodeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DiscountRedeemCodeBulkCreationCodeEdge."""
  node: Shopify_DiscountRedeemCodeBulkCreationCode!
}

"""
A result of a discount redeem code creation operation created by a bulk creation.
"""
type Shopify_DiscountRedeemCodeBulkCreationCode {
  """The code to use in the discount redeem code creation operation."""
  code: String!

  """
  The successfully created discount redeem code.
  
  If the discount redeem code couldn't be created, then this field is `null``.
  """
  discountRedeemCode: Shopify_DiscountRedeemCode

  """
  A list of errors that occurred during the creation operation of the discount redeem code.
  """
  errors: [Shopify_DiscountUserError!]!
}

"""Represents an issued gift card."""
type Shopify_GiftCard implements Shopify_Node {
  """The gift card's remaining balance."""
  balance: Shopify_MoneyV2!

  """The date and time at which the gift card was created."""
  createdAt: DateTime!

  """The customer who will receive the gift card."""
  customer: Shopify_Customer

  """The date and time at which the gift card was disabled."""
  disabledAt: DateTime

  """Whether the gift card is enabled."""
  enabled: Boolean!

  """The date at which the gift card will expire."""
  expiresOn: Date

  """A globally-unique identifier."""
  id: ID!

  """The initial value of the gift card."""
  initialValue: Shopify_MoneyV2!

  """The final four characters of the gift card code."""
  lastCharacters: String!

  """
  The gift card code. Everything but the final four characters is masked.
  """
  maskedCode: String!

  """
  The note associated with the gift card, which is not visible to the customer.
  """
  note: String

  """
  The order associated with the gift card. This value is `null` if the gift card was issued manually.
  """
  order: Shopify_Order
}

"""
The marketing activity resource represents marketing that a
        merchant created through an app.
"""
type Shopify_MarketingActivity implements Shopify_Node {
  """
  The URL of the marketing activity listing page in the marketing section.
  """
  activityListUrl: Url

  """The amount spent on the marketing activity."""
  adSpend: Shopify_MoneyV2

  """The app which created this marketing activity."""
  app: Shopify_App!

  """The errors generated when an app publishes the marketing activity."""
  appErrors: Shopify_MarketingActivityExtensionAppErrors

  """The allocated budget for the marketing activity."""
  budget: Shopify_MarketingBudget

  """The date and time when the marketing activity was created."""
  createdAt: DateTime!

  """The completed content in the marketing activity creation form."""
  formData: String

  """A globally-unique identifier."""
  id: ID!

  """
  Whether the marketing activity is in the main workflow version of
            the marketing automation.
  """
  inMainWorkflowVersion: Boolean!

  """The available marketing channels for a marketing activity."""
  marketingChannel: Shopify_MarketingChannel!

  """Associated marketing event of this marketing activity."""
  marketingEvent: Shopify_MarketingEvent

  """
  A contextual description of the marketing activity based on the platform and tactic used.
  """
  sourceAndMedium: String!

  """The current state of the marketing activity."""
  status: Shopify_MarketingActivityStatus!

  """The severity of the marketing activity's status."""
  statusBadgeType: Shopify_MarketingActivityStatusBadgeType @deprecated(reason: "Use `statusBadgeTypeV2` instead.")

  """The severity of the marketing activity's status."""
  statusBadgeTypeV2: Shopify_BadgeType

  """The rendered status of the marketing activity."""
  statusLabel: String!

  """
  The [date and time](
            https://help.shopify.com/https://en.wikipedia.org/wiki/ISO_8601
            ) when the activity's status last changed.
  """
  statusTransitionedAt: DateTime

  """The method of marketing used for this marketing activity."""
  tactic: Shopify_MarketingTactic!

  """The status to which the marketing activity is currently transitioning."""
  targetStatus: Shopify_MarketingActivityStatus

  """
  The marketing activity's title, which is rendered on the marketing listing page.
  """
  title: String!

  """The date and time when the marketing activity was updated."""
  updatedAt: DateTime!

  """
  The set of [Urchin Tracking Module](
            https://help.shopify.com/https://en.wikipedia.org/wiki/UTM_parameters
            ) used in the URL for tracking this marketing activity.
  """
  utmParameters: Shopify_UTMParameters
}

"""
Represents errors returned from apps when using the marketing activity extension.
"""
type Shopify_MarketingActivityExtensionAppErrors {
  """The app error type."""
  code: Shopify_MarketingActivityExtensionAppErrorCode!

  """The list of errors returned by the app."""
  userErrors: [Shopify_UserError!]!
}

enum Shopify_MarketingActivityExtensionAppErrorCode {
  NOT_ONBOARDED_ERROR
  VALIDATION_ERROR
  API_ERROR
  PLATFORM_ERROR
  INSTALL_REQUIRED_ERROR
}

"""This type combines budget amount and its marketing budget type."""
type Shopify_MarketingBudget {
  """The budget type for a marketing activity."""
  budgetType: Shopify_MarketingBudgetBudgetType!

  """The amount of budget for marketing activity."""
  total: Shopify_MoneyV2!
}

enum Shopify_MarketingBudgetBudgetType {
  DAILY
  LIFETIME
}

enum Shopify_MarketingActivityStatus {
  ACTIVE
  DELETED
  DELETED_EXTERNALLY
  DISCONNECTED
  DRAFT
  FAILED
  INACTIVE
  PAUSED
  PENDING
  SCHEDULED
  UNDEFINED
}

enum Shopify_MarketingActivityStatusBadgeType {
  DEFAULT
  SUCCESS
  ATTENTION
  WARNING
  INFO
}

enum Shopify_BadgeType {
  DEFAULT
  SUCCESS
  ATTENTION
  WARNING
  INFO
}

"""
An article in the blogging system. You can query articles from
[the REST API](https://shopify.dev/api/admin-rest/latest/resources/article)
if you need to access more information about an article. Currently, `OnlineStoreArticle` is
only useful to pass an article `id` to the `tagsAdd` mutation. For more information, refer to
the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd) mutation.
"""
type Shopify_OnlineStoreArticle implements Shopify_HasPublishedTranslations & Shopify_Navigable & Shopify_Node {
  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """A globally-unique identifier."""
  id: ID!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [Shopify_PublishedTranslation!]!
}

"""
Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant
to be used as a type of magazine or newsletter for the shop, with content that changes over time.
"""
type Shopify_OnlineStoreBlog implements Shopify_HasPublishedTranslations & Shopify_Node {
  """A globally-unique identifier."""
  id: ID!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [Shopify_PublishedTranslation!]!
}

"""Represents the payment terms template object."""
type Shopify_PaymentTermsTemplate implements Shopify_Node {
  """The description of the payment terms template."""
  description: String!

  """
  The number of days between the issued date and due date if this is the net type of payment terms.
  """
  dueInDays: Int

  """A globally-unique identifier."""
  id: ID!

  """The name of the payment terms template."""
  name: String!

  """The type of the payment terms template."""
  paymentTermsType: Shopify_PaymentTermsType!

  """The translated payment terms template name."""
  translatedName: String!
}

"""The evidence associated with the dispute."""
type Shopify_ShopifyPaymentsDisputeEvidence implements Shopify_Node {
  """The activity logs associated with the dispute evidence."""
  accessActivityLog: String

  """The billing address that is provided by the customer."""
  billingAddress: Shopify_MailingAddress

  """
  The cancellation policy disclosure associated with the dispute evidence.
  """
  cancellationPolicyDisclosure: String

  """The cancellation policy file associated with the dispute evidence."""
  cancellationPolicyFile: Shopify_ShopifyPaymentsDisputeFileUpload

  """The cancellation rebuttal associated with the dispute evidence."""
  cancellationRebuttal: String

  """The customer communication file associated with the dispute evidence."""
  customerCommunicationFile: Shopify_ShopifyPaymentsDisputeFileUpload

  """The customer's email address."""
  customerEmailAddress: String

  """The customer's first name."""
  customerFirstName: String

  """The customer's last name."""
  customerLastName: String

  """The customer purchase ip for this dispute evidence."""
  customerPurchaseIp: String

  """The dispute associated with the evidence."""
  dispute: Shopify_ShopifyPaymentsDispute!

  """The file uploads associated with the dispute evidence."""
  disputeFileUploads: [Shopify_ShopifyPaymentsDisputeFileUpload!]!

  """The fulfillments associated with the dispute evidence."""
  fulfillments: [Shopify_ShopifyPaymentsDisputeFulfillment!]!

  """A globally-unique identifier."""
  id: ID!

  """The product description for this dispute evidence."""
  productDescription: String

  """The refund policy disclosure associated with the dispute evidence."""
  refundPolicyDisclosure: String

  """The refund policy file associated with the dispute evidence."""
  refundPolicyFile: Shopify_ShopifyPaymentsDisputeFileUpload

  """The refund refusal explanation associated with dispute evidence."""
  refundRefusalExplanation: String

  """The service documentation file associated with the dispute evidence."""
  serviceDocumentationFile: Shopify_ShopifyPaymentsDisputeFileUpload

  """The mailing address for shipping that is provided by the customer."""
  shippingAddress: Shopify_MailingAddress

  """The shipping documentation file associated with the dispute evidence."""
  shippingDocumentationFile: Shopify_ShopifyPaymentsDisputeFileUpload

  """Whether the dispute evidence is submitted."""
  submitted: Boolean!

  """The uncategorized file associated with the dispute evidence."""
  uncategorizedFile: Shopify_ShopifyPaymentsDisputeFileUpload

  """The uncategorized text for the dispute evidence."""
  uncategorizedText: String
}

"""The file upload associated with the dispute evidence."""
type Shopify_ShopifyPaymentsDisputeFileUpload implements Shopify_Node {
  """The type of the file for the dispute evidence."""
  disputeEvidenceType: Shopify_ShopifyPaymentsDisputeEvidenceFileType

  """The file size."""
  fileSize: Int!

  """The file type."""
  fileType: String!

  """A globally-unique identifier."""
  id: ID!

  """The original file name."""
  originalFileName: String

  """The URL for accessing the file."""
  url: Url!
}

enum Shopify_ShopifyPaymentsDisputeEvidenceFileType {
  CUSTOMER_COMMUNICATION_FILE
  REFUND_POLICY_FILE
  CANCELLATION_POLICY_FILE
  UNCATEGORIZED_FILE
  SHIPPING_DOCUMENTATION_FILE
  SERVICE_DOCUMENTATION_FILE
}

"""The fulfillment associated with dispute evidence."""
type Shopify_ShopifyPaymentsDisputeFulfillment implements Shopify_Node {
  """A globally-unique identifier."""
  id: ID!

  """The shipping carrier for this fulfillment."""
  shippingCarrier: String

  """The shipping date for this fulfillment."""
  shippingDate: Date

  """The shipping tracking number for this fulfillment."""
  shippingTrackingNumber: String
}

"""Represents a Subscription Draft."""
type Shopify_SubscriptionDraft implements Shopify_Node {
  """The billing policy for the subscription contract."""
  billingPolicy: Shopify_SubscriptionBillingPolicy!

  """The currency used for the subscription contract."""
  currencyCode: Shopify_CurrencyCode!

  """A list of the custom attributes to be added to the generated orders."""
  customAttributes: [Shopify_Attribute!]!

  """The customer to whom the subscription contract belongs."""
  customer: Shopify_Customer!

  """The customer payment method used for the subscription contract."""
  customerPaymentMethod(
    """Whether to show the customer's revoked payment method."""
    showRevoked: Boolean = false
  ): Shopify_CustomerPaymentMethod

  """The delivery method for each billing of the subscription contract."""
  deliveryMethod: Shopify_SubscriptionDeliveryMethod

  """The delivery policy for the subscription contract."""
  deliveryPolicy: Shopify_SubscriptionDeliveryPolicy!

  """The delivery price for each billing the subscription contract."""
  deliveryPrice: Shopify_MoneyV2

  """
  The list of subscription discounts which will be associated with the subscription contract.
  """
  discounts(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionDiscountConnection!

  """
  The list of subscription discounts to be added to the subscription contract.
  """
  discountsAdded(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionDiscountConnection!

  """
  The list of subscription discounts to be removed from the subscription contract.
  """
  discountsRemoved(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionDiscountConnection!

  """
  The list of subscription discounts to be updated on the subscription contract.
  """
  discountsUpdated(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionDiscountConnection!

  """A globally-unique identifier."""
  id: ID!

  """
  The list of subscription lines which will be associated with the subscription contract.
  """
  lines(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionLineConnection!

  """
  The list of subscription lines to be added to the subscription contract.
  """
  linesAdded(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionLineConnection!

  """
  The list of subscription lines to be removed from the subscription contract.
  """
  linesRemoved(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionLineConnection!

  """The next billing date for the subscription contract."""
  nextBillingDate: DateTime

  """The note field that will be applied to the generated orders."""
  note: String

  """The original subscription contract."""
  originalContract: Shopify_SubscriptionContract

  """
  Available Shipping Options for a given delivery address. Returns NULL for pending requests.
  """
  shippingOptions(
    """The address to delivery the subscription contract to."""
    deliveryAddress: Shopify_MailingAddressInput
  ): Shopify_SubscriptionShippingOptionResult

  """The current status of the subscription contract."""
  status: Shopify_SubscriptionContractSubscriptionStatus
}

"""
An auto-generated type for paginating through multiple SubscriptionDiscounts.
"""
type Shopify_SubscriptionDiscountConnection {
  """A list of edges."""
  edges: [Shopify_SubscriptionDiscountEdge!]!

  """A list of the nodes contained in SubscriptionDiscountEdge."""
  nodes: [Shopify_SubscriptionDiscount!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SubscriptionDiscount and a cursor during pagination.
"""
type Shopify_SubscriptionDiscountEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SubscriptionDiscountEdge."""
  node: Shopify_SubscriptionDiscount!
}

"""
The result of the query to fetch shipping options for the subscription contract.
"""
union Shopify_SubscriptionShippingOptionResult = Shopify_SubscriptionShippingOptionResultFailure | Shopify_SubscriptionShippingOptionResultSuccess

"""
Failure determining available shipping options for delivery of a subscription contract.
"""
type Shopify_SubscriptionShippingOptionResultFailure {
  """Failure reason."""
  message: String
}

"""A shipping option for delivery of a subscription contract."""
type Shopify_SubscriptionShippingOptionResultSuccess {
  """Available shipping options."""
  shippingOptions: [Shopify_SubscriptionShippingOption!]!
}

"""A shipping option to deliver a subscription contract."""
type Shopify_SubscriptionShippingOption {
  """
  The carrier service that is providing this shipping option.
  This field isn't currently supported and returns null.
  """
  carrierService: Shopify_DeliveryCarrierService

  """The code of the shipping option."""
  code: String!

  """The description of the shipping option."""
  description: String

  """If a phone number is required for the shipping option."""
  phoneRequired: Boolean

  """The presentment title of the shipping option."""
  presentmentTitle: String

  """The price of the shipping option."""
  price: Shopify_MoneyV2

  """The title of the shipping option."""
  title: String!
}

"""The fields used to create or update a mailing address."""
input Shopify_MailingAddressInput {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """The name of the city, district, village, or town."""
  city: String

  """The name of the customer's company or organization."""
  company: String

  """The two-letter code for the country of the address."""
  countryCode: Shopify_CountryCode

  """The first name of the customer."""
  firstName: String

  """The last name of the customer."""
  lastName: String

  """
  A unique phone number for the customer.
  
  Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String

  """
  The code for the region of the address, such as the province, state, or district.
  For example QC for Quebec, Canada.
  """
  provinceCode: String

  """The zip or postal code of the address."""
  zip: String
}

"""
A TenderTransaction represents a transaction with financial impact on a shop's balance sheet. A tender transaction always
represents actual money movement between a buyer and a shop. TenderTransactions can be used instead of OrderTransactions
for reconciling a shop's cash flow. A TenderTransaction is immutable once created.
"""
type Shopify_TenderTransaction implements Shopify_Node {
  """The amount and currency of the tender transaction."""
  amount: Shopify_MoneyV2!

  """A globally-unique identifier."""
  id: ID!

  """Information about the payment method used for the transaction."""
  paymentMethod: String

  """Date and time when the transaction was processed."""
  processedAt: DateTime

  """The remote gateway reference associated with the tender transaction."""
  remoteReference: String

  """Whether the transaction is a test transaction."""
  test: Boolean!

  """Information about the payment instrument used for the transaction."""
  transactionDetails: Shopify_TenderTransactionDetails

  """The staff member who performed the transaction."""
  user: Shopify_StaffMember
}

"""Information about the payment instrument used for this transaction."""
union Shopify_TenderTransactionDetails = Shopify_TenderTransactionCreditCardDetails

"""Information about the credit card used for this transaction."""
type Shopify_TenderTransactionCreditCardDetails {
  """
  The name of the company that issued the customer's credit card. Example: `Visa`.
  """
  creditCardCompany: String

  """
  The customer's credit card number, with all digits except the last 4 redacted. Example: `•••• •••• •••• 1234`
  """
  creditCardNumber: String
}

"""The URL redirect for the online store."""
type Shopify_UrlRedirect implements Shopify_Node {
  """The ID of the URL redirect."""
  id: ID!

  """
  The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
  """
  path: String!

  """The target location where the user will be redirected to."""
  target: String!
}

"""
A request to import a [`URLRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object
into the Online Store channel. Apps can use this to query the state of an `UrlRedirectImport` request.

For more information, see [`url-redirect`](https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect)s.
"""
type Shopify_UrlRedirectImport implements Shopify_Node {
  """The number of rows in the file."""
  count: Int

  """The number of redirects created from the import."""
  createdCount: Int

  """The number of redirects that failed to be imported."""
  failedCount: Int

  """Whether the import is finished."""
  finished: Boolean!

  """The date and time when the import finished."""
  finishedAt: DateTime

  """The ID of the `UrlRedirectImport` object."""
  id: ID!

  """A list of up to three previews of the URL redirects to be imported."""
  previewRedirects: [Shopify_UrlRedirectImportPreview!]!

  """The number of redirects updated during the import."""
  updatedCount: Int
}

"""A preview of a URL redirect import row."""
type Shopify_UrlRedirectImportPreview {
  """
  The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
  """
  path: String!

  """The target location where the user will be redirected to."""
  target: String!
}

"""A link to direct users to."""
type Shopify_Link implements Shopify_HasPublishedTranslations {
  """A context-sensitive label for the link."""
  label: String!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [Shopify_PublishedTranslation!]!

  """The URL that the link visits."""
  url: Url!
}

"""Represents an error in the input of a mutation."""
type Shopify_UserError implements Shopify_DisplayableError {
  """The path to the input field that caused the error."""
  field: [String]

  """The error message."""
  message: String!
}

"""Represents an error in the input of a mutation."""
interface Shopify_DisplayableError {
  """The path to the input field that caused the error."""
  field: [String]

  """The error message."""
  message: String!
}

"""An error that occurs during the execution of a discount mutation."""
type Shopify_DiscountUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_DiscountErrorCode

  """Extra information about this error."""
  extraInfo: String

  """The path to the input field that caused the error."""
  field: [String]

  """The error message."""
  message: String!
}

enum Shopify_DiscountErrorCode {
  BLANK
  PRESENT
  EQUAL_TO
  GREATER_THAN
  GREATER_THAN_OR_EQUAL_TO
  INVALID
  LESS_THAN_OR_EQUAL_TO
  LESS_THAN
  TAKEN
  TOO_LONG
  TOO_SHORT
  INTERNAL_ERROR
  TOO_MANY_ARGUMENTS
  MISSING_ARGUMENT
  ACTIVE_PERIOD_OVERLAP
  VALUE_OUTSIDE_RANGE
  MINIMUM_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT
  EXCEEDED_MAX
  CONFLICT
  IMPLICIT_DUPLICATE
  DUPLICATE
  INCLUSION
  INVALID_COMBINES_WITH_FOR_DISCOUNT_CLASS
  INVALID_DISCOUNT_CLASS_FOR_PRICE_RULE
  MAX_APP_DISCOUNTS
}

"""Represents a fixed selling plan pricing policy."""
type Shopify_SellingPlanFixedPricingPolicy implements Shopify_SellingPlanPricingPolicyBase {
  """The price adjustment type."""
  adjustmentType: Shopify_SellingPlanPricingPolicyAdjustmentType!

  """The price adjustment value."""
  adjustmentValue: Shopify_SellingPlanPricingPolicyAdjustmentValue!

  """
  The date and time when the fixed selling plan pricing policy was created.
  """
  createdAt: DateTime!
}

"""Represents selling plan pricing policy common fields."""
interface Shopify_SellingPlanPricingPolicyBase {
  """The price adjustment type."""
  adjustmentType: Shopify_SellingPlanPricingPolicyAdjustmentType!

  """The price adjustment value."""
  adjustmentValue: Shopify_SellingPlanPricingPolicyAdjustmentValue!
}

"""Represents a recurring selling plan pricing policy."""
type Shopify_SellingPlanRecurringPricingPolicy implements Shopify_SellingPlanPricingPolicyBase {
  """The price adjustment type."""
  adjustmentType: Shopify_SellingPlanPricingPolicyAdjustmentType!

  """The price adjustment value."""
  adjustmentValue: Shopify_SellingPlanPricingPolicyAdjustmentValue!

  """Cycle after which this pricing policy applies."""
  afterCycle: Int

  """
  The date and time when the recurring selling plan pricing policy was created.
  """
  createdAt: DateTime!
}

"""An agreement associated with an order placement."""
type Shopify_OrderAgreement implements Shopify_SalesAgreement {
  """The application that created the agreement."""
  app: Shopify_App

  """The date and time at which the agreement occured."""
  happenedAt: DateTime!

  """The unique identifier for the agreement."""
  id: ID!

  """The order associated with the agreement."""
  order: Shopify_Order!

  """The reason the agremeent was created."""
  reason: Shopify_OrderActionType!

  """The sales associated with the agreement."""
  sales(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SaleConnection!

  """The staff member associated with the agreement."""
  user: Shopify_StaffMember
}

"""An agreement associated with an edit to the order."""
type Shopify_OrderEditAgreement implements Shopify_SalesAgreement {
  """The application that created the agreement."""
  app: Shopify_App

  """The date and time at which the agreement occured."""
  happenedAt: DateTime!

  """The unique identifier for the agreement."""
  id: ID!

  """The reason the agremeent was created."""
  reason: Shopify_OrderActionType!

  """The sales associated with the agreement."""
  sales(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SaleConnection!

  """The staff member associated with the agreement."""
  user: Shopify_StaffMember
}

"""
An agreement between the merchant and customer to refund all or a portion of the order.
"""
type Shopify_RefundAgreement implements Shopify_SalesAgreement {
  """The application that created the agreement."""
  app: Shopify_App

  """The date and time at which the agreement occured."""
  happenedAt: DateTime!

  """The unique identifier for the agreement."""
  id: ID!

  """The reason the agremeent was created."""
  reason: Shopify_OrderActionType!

  """The refund associated with the agreement."""
  refund: Shopify_Refund!

  """The sales associated with the agreement."""
  sales(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SaleConnection!

  """The staff member associated with the agreement."""
  user: Shopify_StaffMember
}

"""A sale associated with an order price adjustment."""
type Shopify_AdjustmentSale implements Shopify_Sale {
  """The type of order action that the sale represents."""
  actionType: Shopify_SaleActionType!

  """The unique identifier for the sale."""
  id: ID!

  """The line type assocated with the sale."""
  lineType: Shopify_SaleLineType!

  """The number of units either ordered or intended to be returned."""
  quantity: Int

  """All individual taxes associated with the sale."""
  taxes: [Shopify_SaleTax!]!

  """The total sale amount after taxes and discounts."""
  totalAmount: Shopify_MoneyBag!

  """The total discounts allocated to the sale after taxes."""
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag!

  """The total discounts allocated to the sale before taxes."""
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag!

  """The total amount of taxes for the sale."""
  totalTaxAmount: Shopify_MoneyBag!
}

"""A sale associated with a duty charge."""
type Shopify_DutySale implements Shopify_Sale {
  """The type of order action that the sale represents."""
  actionType: Shopify_SaleActionType!

  """The duty for the associated sale."""
  duty: Shopify_Duty!

  """The unique identifier for the sale."""
  id: ID!

  """The line type assocated with the sale."""
  lineType: Shopify_SaleLineType!

  """The number of units either ordered or intended to be returned."""
  quantity: Int

  """All individual taxes associated with the sale."""
  taxes: [Shopify_SaleTax!]!

  """The total sale amount after taxes and discounts."""
  totalAmount: Shopify_MoneyBag!

  """The total discounts allocated to the sale after taxes."""
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag!

  """The total discounts allocated to the sale before taxes."""
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag!

  """The total amount of taxes for the sale."""
  totalTaxAmount: Shopify_MoneyBag!
}

"""A sale associated with a gift card."""
type Shopify_GiftCardSale implements Shopify_Sale {
  """The type of order action that the sale represents."""
  actionType: Shopify_SaleActionType!

  """The unique identifier for the sale."""
  id: ID!

  """The line item for the associated sale."""
  lineItem: Shopify_LineItem!

  """The line type assocated with the sale."""
  lineType: Shopify_SaleLineType!

  """The number of units either ordered or intended to be returned."""
  quantity: Int

  """All individual taxes associated with the sale."""
  taxes: [Shopify_SaleTax!]!

  """The total sale amount after taxes and discounts."""
  totalAmount: Shopify_MoneyBag!

  """The total discounts allocated to the sale after taxes."""
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag!

  """The total discounts allocated to the sale before taxes."""
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag!

  """The total amount of taxes for the sale."""
  totalTaxAmount: Shopify_MoneyBag!
}

"""A sale associated with a product."""
type Shopify_ProductSale implements Shopify_Sale {
  """The type of order action that the sale represents."""
  actionType: Shopify_SaleActionType!

  """The unique identifier for the sale."""
  id: ID!

  """The line item for the associated sale."""
  lineItem: Shopify_LineItem!

  """The line type assocated with the sale."""
  lineType: Shopify_SaleLineType!

  """The number of units either ordered or intended to be returned."""
  quantity: Int

  """All individual taxes associated with the sale."""
  taxes: [Shopify_SaleTax!]!

  """The total sale amount after taxes and discounts."""
  totalAmount: Shopify_MoneyBag!

  """The total discounts allocated to the sale after taxes."""
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag!

  """The total discounts allocated to the sale before taxes."""
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag!

  """The total amount of taxes for the sale."""
  totalTaxAmount: Shopify_MoneyBag!
}

"""A sale associated with a shipping charge."""
type Shopify_ShippingLineSale implements Shopify_Sale {
  """The type of order action that the sale represents."""
  actionType: Shopify_SaleActionType!

  """The unique identifier for the sale."""
  id: ID!

  """The line type assocated with the sale."""
  lineType: Shopify_SaleLineType!

  """The number of units either ordered or intended to be returned."""
  quantity: Int

  """
  The shipping line item for the associated sale. `shippingLine` is not available if the `SaleActionType` is a return.
  """
  shippingLine: Shopify_ShippingLine

  """All individual taxes associated with the sale."""
  taxes: [Shopify_SaleTax!]!

  """The total sale amount after taxes and discounts."""
  totalAmount: Shopify_MoneyBag!

  """The total discounts allocated to the sale after taxes."""
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag!

  """The total discounts allocated to the sale before taxes."""
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag!

  """The total amount of taxes for the sale."""
  totalTaxAmount: Shopify_MoneyBag!
}

"""A sale associated with a tip."""
type Shopify_TipSale implements Shopify_Sale {
  """The type of order action that the sale represents."""
  actionType: Shopify_SaleActionType!

  """The unique identifier for the sale."""
  id: ID!

  """The line item for the associated sale."""
  lineItem: Shopify_LineItem!

  """The line type assocated with the sale."""
  lineType: Shopify_SaleLineType!

  """The number of units either ordered or intended to be returned."""
  quantity: Int

  """All individual taxes associated with the sale."""
  taxes: [Shopify_SaleTax!]!

  """The total sale amount after taxes and discounts."""
  totalAmount: Shopify_MoneyBag!

  """The total discounts allocated to the sale after taxes."""
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag!

  """The total discounts allocated to the sale before taxes."""
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag!

  """The total amount of taxes for the sale."""
  totalTaxAmount: Shopify_MoneyBag!
}

"""
Automatic discount applications capture the intentions of a discount that was automatically applied.
"""
type Shopify_AutomaticDiscountApplication implements Shopify_DiscountApplication {
  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: Shopify_DiscountApplicationAllocationMethod!

  """
  An ordered index that can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.
  """
  index: Int!

  """How the discount amount is distributed on the discounted lines."""
  targetSelection: Shopify_DiscountApplicationTargetSelection!

  """Whether the discount is applied on line items or shipping lines."""
  targetType: Shopify_DiscountApplicationTargetType!

  """The title of the discount application."""
  title: String!

  """The value of the discount application."""
  value: Shopify_PricingValue!
}

"""
Discount code applications capture the intentions of a discount code at
the time that it is applied onto an order.

Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
"""
type Shopify_DiscountCodeApplication implements Shopify_DiscountApplication {
  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: Shopify_DiscountApplicationAllocationMethod!

  """
  The string identifying the discount code that was used at the time of application.
  """
  code: String!

  """
  An ordered index that can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.
  """
  index: Int!

  """How the discount amount is distributed on the discounted lines."""
  targetSelection: Shopify_DiscountApplicationTargetSelection!

  """Whether the discount is applied on line items or shipping lines."""
  targetType: Shopify_DiscountApplicationTargetType!

  """The value of the discount application."""
  value: Shopify_PricingValue!
}

"""
Manual discount applications capture the intentions of a discount that was manually created for an order.

Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
"""
type Shopify_ManualDiscountApplication implements Shopify_DiscountApplication {
  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: Shopify_DiscountApplicationAllocationMethod!

  """The description of the discount application."""
  description: String

  """
  An ordered index that can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.
  """
  index: Int!

  """How the discount amount is distributed on the discounted lines."""
  targetSelection: Shopify_DiscountApplicationTargetSelection!

  """Whether the discount is applied on line items or shipping lines."""
  targetType: Shopify_DiscountApplicationTargetType!

  """The title of the discount application."""
  title: String!

  """The value of the discount application."""
  value: Shopify_PricingValue!
}

"""
Script discount applications capture the intentions of a discount that
was created by a Shopify Script for an order's line item or shipping line.

Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
"""
type Shopify_ScriptDiscountApplication implements Shopify_DiscountApplication {
  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: Shopify_DiscountApplicationAllocationMethod!

  """The description of the application as defined by the Script."""
  description: String! @deprecated(reason: "Use `title` instead.")

  """
  An ordered index that can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.
  """
  index: Int!

  """How the discount amount is distributed on the discounted lines."""
  targetSelection: Shopify_DiscountApplicationTargetSelection!

  """Whether the discount is applied on line items or shipping lines."""
  targetType: Shopify_DiscountApplicationTargetType!

  """The title of the application as defined by the Script."""
  title: String!

  """The value of the discount application."""
  value: Shopify_PricingValue!
}

"""
A product variant represents a different version of a product, such as differing sizes or differing colors.
"""
type ShopifyStorefront_ProductVariant implements ShopifyStorefront_HasMetafields & ShopifyStorefront_Node {
  """Indicates if the product variant is available for sale."""
  availableForSale: Boolean!

  """
  The barcode (for example, ISBN, UPC, or GTIN) associated with the variant.
  """
  barcode: String

  """
  The compare at price of the variant. This can be used to mark a variant as on sale, when `compareAtPrice` is higher than `price`.
  """
  compareAtPrice: Money @deprecated(reason: "Use `compareAtPriceV2` instead.")

  """
  The compare at price of the variant. This can be used to mark a variant as on sale, when `compareAtPriceV2` is higher than `priceV2`.
  """
  compareAtPriceV2: ShopifyStorefront_MoneyV2

  """
  Whether a product is out of stock but still available for purchase (used for backorders).
  """
  currentlyNotInStock: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """
  Image associated with the product variant. This field falls back to the product image if no image is available.
  """
  image: ShopifyStorefront_Image

  """Returns a metafield found by namespace and key."""
  metafield(
    """A container for a set of metafields."""
    namespace: String!

    """The identifier for the metafield."""
    key: String!
  ): ShopifyStorefront_Metafield

  """
  The metafields associated with the resource matching the supplied list of namespaces and keys.
  """
  metafields(
    """The list of metafields to retrieve by namespace and key."""
    identifiers: [ShopifyStorefront_HasMetafieldsIdentifierInput!]!
  ): [ShopifyStorefront_Metafield!]!

  """The product variant’s price."""
  price: Money! @deprecated(reason: "Use `priceV2` instead.")

  """The product variant’s price."""
  priceV2: ShopifyStorefront_MoneyV2!

  """The product object that the product variant belongs to."""
  product: ShopifyStorefront_Product!

  """The total sellable quantity of the variant for online sales channels."""
  quantityAvailable: Int

  """
  Whether a customer needs to provide a shipping address when placing an order for the product variant.
  """
  requiresShipping: Boolean!

  """List of product options applied to the variant."""
  selectedOptions: [ShopifyStorefront_SelectedOption!]!

  """
  Represents an association between a variant and a selling plan. Selling plan allocations describe which selling plans are available for each variant, and what their impact is on pricing.
  """
  sellingPlanAllocations(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_SellingPlanAllocationConnection!

  """The SKU (stock keeping unit) associated with the variant."""
  sku: String

  """The in-store pickup availability of this variant by location."""
  storeAvailability(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_StoreAvailabilityConnection!

  """The product variant’s title."""
  title: String!

  """
  The unit price value for the variant based on the variant's measurement.
  """
  unitPrice: ShopifyStorefront_MoneyV2

  """The unit price measurement for the variant."""
  unitPriceMeasurement: ShopifyStorefront_UnitPriceMeasurement

  """
  The weight of the product variant in the unit system specified with `weight_unit`.
  """
  weight: Float

  """Unit of measurement for weight."""
  weightUnit: ShopifyStorefront_WeightUnit!
}

"""
Represents information about the metafields associated to the specified resource.
"""
interface ShopifyStorefront_HasMetafields {
  """Returns a metafield found by namespace and key."""
  metafield(
    """A container for a set of metafields."""
    namespace: String!

    """The identifier for the metafield."""
    key: String!
  ): ShopifyStorefront_Metafield

  """
  The metafields associated with the resource matching the supplied list of namespaces and keys.
  """
  metafields(
    """The list of metafields to retrieve by namespace and key."""
    identifiers: [ShopifyStorefront_HasMetafieldsIdentifierInput!]!
  ): [ShopifyStorefront_Metafield!]!
}

"""Identifies a metafield on an owner resource by namespace and key."""
input ShopifyStorefront_HasMetafieldsIdentifierInput {
  """A container for a set of metafields."""
  namespace: String!

  """The identifier for the metafield."""
  key: String!
}

"""
An object with an ID field to support global identification, in accordance with the
[Relay specification](https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface).
This interface is used by the [node](https://shopify.dev/api/admin-graphql/unstable/queries/node)
and [nodes](https://shopify.dev/api/admin-graphql/unstable/queries/nodes) queries.
"""
interface ShopifyStorefront_Node {
  """A globally-unique identifier."""
  id: ID!
}

"""A monetary value with currency."""
type ShopifyStorefront_MoneyV2 {
  """Decimal money amount."""
  amount: Decimal!

  """Currency of the money."""
  currencyCode: ShopifyStorefront_CurrencyCode!
}

enum ShopifyStorefront_CurrencyCode {
  USD
  EUR
  GBP
  CAD
  AFN
  ALL
  DZD
  AOA
  ARS
  AMD
  AWG
  AUD
  BBD
  AZN
  BDT
  BSD
  BHD
  BIF
  BZD
  BMD
  BTN
  BAM
  BRL
  BOB
  BWP
  BND
  BGN
  MMK
  KHR
  CVE
  KYD
  XAF
  CLP
  CNY
  COP
  KMF
  CDF
  CRC
  HRK
  CZK
  DKK
  DOP
  XCD
  EGP
  ETB
  XPF
  FJD
  GMD
  GHS
  GTQ
  GYD
  GEL
  HTG
  HNL
  HKD
  HUF
  ISK
  INR
  IDR
  ILS
  IQD
  JMD
  JPY
  JEP
  JOD
  KZT
  KES
  KWD
  KGS
  LAK
  LVL
  LBP
  LSL
  LRD
  LTL
  MGA
  MKD
  MOP
  MWK
  MVR
  MXN
  MYR
  MUR
  MDL
  MAD
  MNT
  MZN
  NAD
  NPR
  ANG
  NZD
  NIO
  NGN
  NOK
  OMR
  PAB
  PKR
  PGK
  PYG
  PEN
  PHP
  PLN
  QAR
  RON
  RUB
  RWF
  WST
  SAR
  RSD
  SCR
  SGD
  SDG
  SYP
  ZAR
  KRW
  SSP
  SBD
  LKR
  SRD
  SZL
  SEK
  CHF
  TWD
  THB
  TZS
  TTD
  TND
  TRY
  TMT
  UGX
  UAH
  AED
  UYU
  UZS
  VUV
  VND
  XOF
  YER
  ZMW
  BYN
  BYR
  DJF
  ERN
  FKP
  GIP
  GNF
  IRR
  KID
  LYD
  MRU
  SLL
  SHP
  SOS
  STD
  STN
  TJS
  TOP
  VED
  VEF
  VES
  XXX
}

"""Represents an image resource."""
type ShopifyStorefront_Image {
  """A word or phrase to share the nature or contents of an image."""
  altText: String

  """
  The original height of the image in pixels. Returns `null` if the image is not hosted by Shopify.
  """
  height: Int

  """A unique identifier for the image."""
  id: ID

  """
  The location of the original image as a URL.
  
  If there are any existing transformations in the original source URL, they will remain and not be stripped.
  """
  originalSrc: Url! @deprecated(reason: "Use `url` instead.")

  """The location of the image as a URL."""
  src: Url! @deprecated(reason: "Use `url` instead.")

  """
  The location of the transformed image as a URL.
  
  All transformation arguments are considered "best-effort". If they can be applied to an image, they will be.
  Otherwise any transformations which an image type does not support will be ignored.
  """
  transformedSrc(
    """Image width in pixels between 1 and 5760."""
    maxWidth: Int

    """Image height in pixels between 1 and 5760."""
    maxHeight: Int

    """Crops the image according to the specified region."""
    crop: ShopifyStorefront_CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int = 1

    """
    Best effort conversion of image into content type (SVG -> PNG, Anything -> JPG, Anything -> WEBP are supported).
    """
    preferredContentType: ShopifyStorefront_ImageContentType
  ): Url! @deprecated(reason: "Use `url(transform:)` instead")

  """
  The location of the image as a URL.
  
  If no transform options are specified, then the original image will be preserved including any pre-applied transforms.
  
  All transformation options are considered "best-effort". Any transformation that the original image type doesn't support will be ignored.
  
  If you need multiple variations of the same image, then you can use [GraphQL aliases](https://graphql.org/learn/queries/#aliases).
  """
  url(
    """A set of options to transform the original image."""
    transform: ShopifyStorefront_ImageTransformInput
  ): Url!

  """
  The original width of the image in pixels. Returns `null` if the image is not hosted by Shopify.
  """
  width: Int
}

enum ShopifyStorefront_CropRegion {
  CENTER
  TOP
  BOTTOM
  LEFT
  RIGHT
}

enum ShopifyStorefront_ImageContentType {
  PNG
  JPG
  WEBP
}

"""
The available options for transforming an image.

All transformation options are considered best effort. Any transformation that the original image type doesn't support will be ignored.
"""
input ShopifyStorefront_ImageTransformInput {
  """
  The region of the image to remain after cropping.
  Must be used in conjunction with the `maxWidth` and/or `maxHeight` fields, where the `maxWidth` and `maxHeight` aren't equal.
  The `crop` argument should coincide with the smaller value. A smaller `maxWidth` indicates a `LEFT` or `RIGHT` crop, while
  a smaller `maxHeight` indicates a `TOP` or `BOTTOM` crop. For example, `{ maxWidth: 5, maxHeight: 10, crop: LEFT }` will result
  in an image with a width of 5 and height of 10, where the right side of the image is removed.
  """
  crop: ShopifyStorefront_CropRegion

  """Image width in pixels between 1 and 5760."""
  maxWidth: Int

  """Image height in pixels between 1 and 5760."""
  maxHeight: Int

  """
  Image size multiplier for high-resolution retina displays. Must be within 1..3.
  """
  scale: Int = 1

  """
  Convert the source image into the preferred content type.
  Supported conversions: `.svg` to `.png`, any file type to `.jpg`, and any file type to `.webp`.
  """
  preferredContentType: ShopifyStorefront_ImageContentType
}

"""
A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
"""
type ShopifyStorefront_Product {
  """Indicates if at least one product variant is available for sale."""
  availableForSale: Boolean!

  """List of collections a product belongs to."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_CollectionConnection!

  """The compare at price of the product across all variants."""
  compareAtPriceRange: ShopifyStorefront_ProductPriceRange!

  """The date and time when the product was created."""
  createdAt: DateTime!

  """
  Stripped description of the product, single line with HTML tags removed.
  """
  description(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String!

  """The description of the product, complete with HTML formatting."""
  descriptionHtml: Html!

  """
  The featured image for the product.
  
  This field is functionally equivalent to `images(first: 1)`.
  """
  featuredImage: ShopifyStorefront_Image

  """
  A human-friendly unique string for the Product automatically generated from its title.
  They are used by the Liquid templating language to refer to objects.
  """
  handle: String!

  """A globally-unique identifier."""
  id: ID!

  """List of images associated with the product."""
  images(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ShopifyStorefront_ProductImageSortKeys = POSITION
  ): ShopifyStorefront_ImageConnection!

  """The media associated with the product."""
  media(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ShopifyStorefront_ProductMediaSortKeys = POSITION
  ): ShopifyStorefront_MediaConnection!

  """Returns a metafield found by namespace and key."""
  metafield(
    """A container for a set of metafields."""
    namespace: String!

    """The identifier for the metafield."""
    key: String!
  ): ShopifyStorefront_Metafield

  """
  The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.
  """
  onlineStoreUrl: Url

  """List of product options."""
  options(
    """Truncate the array result to this size."""
    first: Int
  ): [ShopifyStorefront_ProductOption!]!

  """The price range."""
  priceRange: ShopifyStorefront_ProductPriceRange!

  """
  A categorization that a product can be tagged with, commonly used for filtering and searching.
  """
  productType: String!

  """The date and time when the product was published to the channel."""
  publishedAt: DateTime!

  """Whether the product can only be purchased with a selling plan."""
  requiresSellingPlan: Boolean!

  """
  A list of a product's available selling plan groups. A selling plan group represents a selling method. For example, 'Subscribe and save' is a selling method where customers pay for goods or services per delivery. A selling plan group contains individual selling plans.
  """
  sellingPlanGroups(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_SellingPlanGroupConnection!

  """The product's SEO information."""
  seo: ShopifyStorefront_SEO!

  """
  A comma separated list of tags that have been added to the product.
  Additional access scope required for private apps: unauthenticated_read_product_tags.
  """
  tags: [String!]!

  """The product’s title."""
  title: String!

  """The total quantity of inventory in stock for this Product."""
  totalInventory: Int

  """
  The date and time when the product was last modified.
  A product's `updatedAt` value can change for different reasons. For example, if an order
  is placed for a product that has inventory tracking set up, then the inventory adjustment
  is counted as an update.
  """
  updatedAt: DateTime!

  """
  Find a product’s variant based on its selected options.
  This is useful for converting a user’s selection of product options into a single matching variant.
  If there is not a variant for the selected options, `null` will be returned.
  """
  variantBySelectedOptions(
    """The input fields used for a selected option."""
    selectedOptions: [ShopifyStorefront_SelectedOptionInput!]!
  ): ShopifyStorefront_ProductVariant

  """List of the product’s variants."""
  variants(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ShopifyStorefront_ProductVariantSortKeys = POSITION
  ): ShopifyStorefront_ProductVariantConnection!

  """The product’s vendor name."""
  vendor: String!
}

"""An auto-generated type for paginating through multiple Collections."""
type ShopifyStorefront_CollectionConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_CollectionEdge!]!

  """A list of the nodes contained in CollectionEdge."""
  nodes: [ShopifyStorefront_Collection!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one Collection and a cursor during pagination.
"""
type ShopifyStorefront_CollectionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CollectionEdge."""
  node: ShopifyStorefront_Collection!
}

"""
Returns information about pagination in a connection, in accordance with the
[Relay specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).
"""
type ShopifyStorefront_PageInfo {
  """The cursor corresponding to the last node in edges."""
  endCursor: String

  """Whether there are more pages to fetch following the current page."""
  hasNextPage: Boolean!

  """Whether there are any pages prior to the current page."""
  hasPreviousPage: Boolean!

  """The cursor corresponding to the first node in edges."""
  startCursor: String
}

"""The price range of the product."""
type ShopifyStorefront_ProductPriceRange {
  """The highest variant's price."""
  maxVariantPrice: ShopifyStorefront_MoneyV2!

  """The lowest variant's price."""
  minVariantPrice: ShopifyStorefront_MoneyV2!
}

"""An auto-generated type for paginating through multiple Images."""
type ShopifyStorefront_ImageConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_ImageEdge!]!

  """A list of the nodes contained in ImageEdge."""
  nodes: [ShopifyStorefront_Image!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one Image and a cursor during pagination.
"""
type ShopifyStorefront_ImageEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ImageEdge."""
  node: ShopifyStorefront_Image!
}

enum ShopifyStorefront_ProductImageSortKeys {
  CREATED_AT
  POSITION
  ID
  RELEVANCE
}

"""An auto-generated type for paginating through multiple Media."""
type ShopifyStorefront_MediaConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_MediaEdge!]!

  """A list of the nodes contained in MediaEdge."""
  nodes: [ShopifyStorefront_Media!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one Media and a cursor during pagination.
"""
type ShopifyStorefront_MediaEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MediaEdge."""
  node: ShopifyStorefront_Media!
}

"""Represents a media interface."""
interface ShopifyStorefront_Media {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  """The media content type."""
  mediaContentType: ShopifyStorefront_MediaContentType!

  """The preview image for the media."""
  previewImage: ShopifyStorefront_Image
}

enum ShopifyStorefront_MediaContentType {
  EXTERNAL_VIDEO
  IMAGE
  MODEL_3D
  VIDEO
}

enum ShopifyStorefront_ProductMediaSortKeys {
  POSITION
  ID
  RELEVANCE
}

"""
An auto-generated type for paginating through multiple SellingPlanGroups.
"""
type ShopifyStorefront_SellingPlanGroupConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_SellingPlanGroupEdge!]!

  """A list of the nodes contained in SellingPlanGroupEdge."""
  nodes: [ShopifyStorefront_SellingPlanGroup!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one SellingPlanGroup and a cursor during pagination.
"""
type ShopifyStorefront_SellingPlanGroupEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SellingPlanGroupEdge."""
  node: ShopifyStorefront_SellingPlanGroup!
}

"""
Represents a selling method. For example, 'Subscribe and save' is a selling method where customers pay for goods or services per delivery. A selling plan group contains individual selling plans.
"""
type ShopifyStorefront_SellingPlanGroup {
  """
  A display friendly name for the app that created the selling plan group.
  """
  appName: String

  """The name of the selling plan group."""
  name: String!

  """
  Represents the selling plan options available in the drop-down list in the storefront. For example, 'Delivery every week' or 'Delivery every 2 weeks' specifies the delivery frequency options for the product.
  """
  options: [ShopifyStorefront_SellingPlanGroupOption!]!

  """
  A list of selling plans in a selling plan group. A selling plan is a representation of how products and variants can be sold and purchased. For example, an individual selling plan could be '6 weeks of prepaid granola, delivered weekly'.
  """
  sellingPlans(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_SellingPlanConnection!
}

"""
Represents an option on a selling plan group that's available in the drop-down list in the storefront.

Individual selling plans contribute their options to the associated selling plan group. For example, a selling plan group might have an option called `option1: Delivery every`. One selling plan in that group could contribute `option1: 2 weeks` with the pricing for that option, and another selling plan could contribute `option1: 4 weeks`, with different pricing.
"""
type ShopifyStorefront_SellingPlanGroupOption {
  """The name of the option. For example, 'Delivery every'."""
  name: String!

  """
  The values for the options specified by the selling plans in the selling plan group. For example, '1 week', '2 weeks', '3 weeks'.
  """
  values: [String!]!
}

"""An auto-generated type for paginating through multiple SellingPlans."""
type ShopifyStorefront_SellingPlanConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_SellingPlanEdge!]!

  """A list of the nodes contained in SellingPlanEdge."""
  nodes: [ShopifyStorefront_SellingPlan!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one SellingPlan and a cursor during pagination.
"""
type ShopifyStorefront_SellingPlanEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SellingPlanEdge."""
  node: ShopifyStorefront_SellingPlan!
}

"""Represents how products and variants can be sold and purchased."""
type ShopifyStorefront_SellingPlan {
  """The initial payment due for the purchase."""
  checkoutCharge: ShopifyStorefront_SellingPlanCheckoutCharge!

  """The description of the selling plan."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  """
  The name of the selling plan. For example, '6 weeks of prepaid granola, delivered weekly'.
  """
  name: String!

  """
  The selling plan options available in the drop-down list in the storefront. For example, 'Delivery every week' or 'Delivery every 2 weeks' specifies the delivery frequency options for the product. Individual selling plans contribute their options to the associated selling plan group. For example, a selling plan group might have an option called `option1: Delivery every`. One selling plan in that group could contribute `option1: 2 weeks` with the pricing for that option, and another selling plan could contribute `option1: 4 weeks`, with different pricing.
  """
  options: [ShopifyStorefront_SellingPlanOption!]!

  """
  The price adjustments that a selling plan makes when a variant is purchased with a selling plan.
  """
  priceAdjustments: [ShopifyStorefront_SellingPlanPriceAdjustment!]!

  """
  Whether purchasing the selling plan will result in multiple deliveries.
  """
  recurringDeliveries: Boolean!
}

"""The initial payment due for the purchase."""
type ShopifyStorefront_SellingPlanCheckoutCharge {
  """The charge type for the checkout charge."""
  type: ShopifyStorefront_SellingPlanCheckoutChargeType!

  """The charge value for the checkout charge."""
  value: ShopifyStorefront_SellingPlanCheckoutChargeValue!
}

enum ShopifyStorefront_SellingPlanCheckoutChargeType {
  PERCENTAGE
  PRICE
}

"""The portion of the price to be charged at checkout."""
union ShopifyStorefront_SellingPlanCheckoutChargeValue = ShopifyStorefront_MoneyV2 | ShopifyStorefront_SellingPlanCheckoutChargePercentageValue

"""The percentage value of the price used for checkout charge."""
type ShopifyStorefront_SellingPlanCheckoutChargePercentageValue {
  """The percentage value of the price used for checkout charge."""
  percentage: Float!
}

"""An option provided by a Selling Plan."""
type ShopifyStorefront_SellingPlanOption {
  """The name of the option (ie "Delivery every")."""
  name: String

  """The value of the option (ie "Month")."""
  value: String
}

"""
Represents by how much the price of a variant associated with a selling plan is adjusted. Each variant can have up to two price adjustments. If a variant has multiple price adjustments, then the first price adjustment applies when the variant is initially purchased. The second price adjustment applies after a certain number of orders (specified by the `orderCount` field) are made. If a selling plan doesn't have any price adjustments, then the unadjusted price of the variant is the effective price.
"""
type ShopifyStorefront_SellingPlanPriceAdjustment {
  """
  The type of price adjustment. An adjustment value can have one of three types: percentage, amount off, or a new price.
  """
  adjustmentValue: ShopifyStorefront_SellingPlanPriceAdjustmentValue!

  """
  The number of orders that the price adjustment applies to. If the price adjustment always applies, then this field is `null`.
  """
  orderCount: Int
}

"""
Represents by how much the price of a variant associated with a selling plan is adjusted. Each variant can have up to two price adjustments.
"""
union ShopifyStorefront_SellingPlanPriceAdjustmentValue = ShopifyStorefront_SellingPlanFixedAmountPriceAdjustment | ShopifyStorefront_SellingPlanFixedPriceAdjustment | ShopifyStorefront_SellingPlanPercentagePriceAdjustment

"""
A fixed amount that's deducted from the original variant price. For example, $10.00 off.
"""
type ShopifyStorefront_SellingPlanFixedAmountPriceAdjustment {
  """The money value of the price adjustment."""
  adjustmentAmount: ShopifyStorefront_MoneyV2!
}

"""
A fixed price adjustment for a variant that's purchased with a selling plan.
"""
type ShopifyStorefront_SellingPlanFixedPriceAdjustment {
  """A new price of the variant when it's purchased with the selling plan."""
  price: ShopifyStorefront_MoneyV2!
}

"""
A percentage amount that's deducted from the original variant price. For example, 10% off.
"""
type ShopifyStorefront_SellingPlanPercentagePriceAdjustment {
  """The percentage value of the price adjustment."""
  adjustmentPercentage: Int!
}

"""SEO information."""
type ShopifyStorefront_SEO {
  """The meta description."""
  description: String

  """The SEO title."""
  title: String
}

"""Specifies the input fields required for a selected option."""
input ShopifyStorefront_SelectedOptionInput {
  """The product option’s name."""
  name: String!

  """The product option’s value."""
  value: String!
}

"""
An auto-generated type for paginating through multiple ProductVariants.
"""
type ShopifyStorefront_ProductVariantConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_ProductVariantEdge!]!

  """A list of the nodes contained in ProductVariantEdge."""
  nodes: [ShopifyStorefront_ProductVariant!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one ProductVariant and a cursor during pagination.
"""
type ShopifyStorefront_ProductVariantEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ProductVariantEdge."""
  node: ShopifyStorefront_ProductVariant!
}

enum ShopifyStorefront_ProductVariantSortKeys {
  TITLE
  SKU
  POSITION
  ID
  RELEVANCE
}

"""
Properties used by customers to select a product variant.
Products can have multiple options, like different sizes or colors.
"""
type ShopifyStorefront_SelectedOption {
  """The product option’s name."""
  name: String!

  """The product option’s value."""
  value: String!
}

"""
An auto-generated type for paginating through multiple SellingPlanAllocations.
"""
type ShopifyStorefront_SellingPlanAllocationConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_SellingPlanAllocationEdge!]!

  """A list of the nodes contained in SellingPlanAllocationEdge."""
  nodes: [ShopifyStorefront_SellingPlanAllocation!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one SellingPlanAllocation and a cursor during pagination.
"""
type ShopifyStorefront_SellingPlanAllocationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SellingPlanAllocationEdge."""
  node: ShopifyStorefront_SellingPlanAllocation!
}

"""
Represents an association between a variant and a selling plan. Selling plan allocations describe the options offered for each variant, and the price of the variant when purchased with a selling plan.
"""
type ShopifyStorefront_SellingPlanAllocation {
  """The checkout charge amount due for the purchase."""
  checkoutChargeAmount: ShopifyStorefront_MoneyV2!

  """
  A list of price adjustments, with a maximum of two. When there are two, the first price adjustment goes into effect at the time of purchase, while the second one starts after a certain number of orders. A price adjustment represents how a selling plan affects pricing when a variant is purchased with a selling plan. Prices display in the customer's currency if the shop is configured for it.
  """
  priceAdjustments: [ShopifyStorefront_SellingPlanAllocationPriceAdjustment!]!

  """The remaining balance charge amount due for the purchase."""
  remainingBalanceChargeAmount: ShopifyStorefront_MoneyV2!

  """
  A representation of how products and variants can be sold and purchased. For example, an individual selling plan could be '6 weeks of prepaid granola, delivered weekly'.
  """
  sellingPlan: ShopifyStorefront_SellingPlan!
}

"""
The resulting prices for variants when they're purchased with a specific selling plan.
"""
type ShopifyStorefront_SellingPlanAllocationPriceAdjustment {
  """
  The price of the variant when it's purchased without a selling plan for the same number of deliveries. For example, if a customer purchases 6 deliveries of $10.00 granola separately, then the price is 6 x $10.00 = $60.00.
  """
  compareAtPrice: ShopifyStorefront_MoneyV2!

  """
  The effective price for a single delivery. For example, for a prepaid subscription plan that includes 6 deliveries at the price of $48.00, the per delivery price is $8.00.
  """
  perDeliveryPrice: ShopifyStorefront_MoneyV2!

  """
  The price of the variant when it's purchased with a selling plan For example, for a prepaid subscription plan that includes 6 deliveries of $10.00 granola, where the customer gets 20% off, the price is 6 x $10.00 x 0.80 = $48.00.
  """
  price: ShopifyStorefront_MoneyV2!

  """
  The resulting price per unit for the variant associated with the selling plan. If the variant isn't sold by quantity or measurement, then this field returns `null`.
  """
  unitPrice: ShopifyStorefront_MoneyV2
}

"""
An auto-generated type for paginating through multiple StoreAvailabilities.
"""
type ShopifyStorefront_StoreAvailabilityConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_StoreAvailabilityEdge!]!

  """A list of the nodes contained in StoreAvailabilityEdge."""
  nodes: [ShopifyStorefront_StoreAvailability!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one StoreAvailability and a cursor during pagination.
"""
type ShopifyStorefront_StoreAvailabilityEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of StoreAvailabilityEdge."""
  node: ShopifyStorefront_StoreAvailability!
}

"""
The availability of a product variant at a particular location.
Local pick-up must be enabled in the  store's shipping settings, otherwise this will return an empty result.
"""
type ShopifyStorefront_StoreAvailability {
  """Whether the product variant is in-stock at this location."""
  available: Boolean!

  """The location where this product variant is stocked at."""
  location: ShopifyStorefront_Location!

  """
  Returns the estimated amount of time it takes for pickup to be ready (Example: Usually ready in 24 hours).
  """
  pickUpTime: String!
}

"""
The measurement used to calculate a unit price for a product variant (e.g. $9.99 / 100ml).
"""
type ShopifyStorefront_UnitPriceMeasurement {
  """The type of unit of measurement for the unit price measurement."""
  measuredType: ShopifyStorefront_UnitPriceMeasurementMeasuredType

  """The quantity unit for the unit price measurement."""
  quantityUnit: ShopifyStorefront_UnitPriceMeasurementMeasuredUnit

  """The quantity value for the unit price measurement."""
  quantityValue: Float!

  """The reference unit for the unit price measurement."""
  referenceUnit: ShopifyStorefront_UnitPriceMeasurementMeasuredUnit

  """The reference value for the unit price measurement."""
  referenceValue: Int!
}

enum ShopifyStorefront_UnitPriceMeasurementMeasuredType {
  VOLUME
  WEIGHT
  LENGTH
  AREA
}

enum ShopifyStorefront_UnitPriceMeasurementMeasuredUnit {
  ML
  CL
  L
  M3
  MG
  G
  KG
  MM
  CM
  M
  M2
}

enum ShopifyStorefront_WeightUnit {
  KILOGRAMS
  GRAMS
  POUNDS
  OUNCES
}

"""
A customer represents a customer account with the shop. Customer accounts store contact information for the customer, saving logged-in customers the trouble of having to provide it at every checkout.
"""
type ShopifyStorefront_Customer implements ShopifyStorefront_HasMetafields {
  """
  Indicates whether the customer has consented to be sent marketing material via email.
  """
  acceptsMarketing: Boolean!

  """A list of addresses for the customer."""
  addresses(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_MailingAddressConnection!

  """The date and time when the customer was created."""
  createdAt: DateTime!

  """The customer’s default address."""
  defaultAddress: ShopifyStorefront_MailingAddress

  """The customer’s name, email or phone number."""
  displayName: String!

  """The customer’s email address."""
  email: String

  """The customer’s first name."""
  firstName: String

  """A unique identifier for the customer."""
  id: ID!

  """The customer's most recently updated, incomplete checkout."""
  lastIncompleteCheckout: ShopifyStorefront_Checkout

  """The customer’s last name."""
  lastName: String

  """Returns a metafield found by namespace and key."""
  metafield(
    """A container for a set of metafields."""
    namespace: String!

    """The identifier for the metafield."""
    key: String!
  ): ShopifyStorefront_Metafield

  """
  The metafields associated with the resource matching the supplied list of namespaces and keys.
  """
  metafields(
    """The list of metafields to retrieve by namespace and key."""
    identifiers: [ShopifyStorefront_HasMetafieldsIdentifierInput!]!
  ): [ShopifyStorefront_Metafield!]!

  """The orders associated with the customer."""
  orders(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ShopifyStorefront_OrderSortKeys = ID

    """
    Supported filter parameters:
     - `processed_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): ShopifyStorefront_OrderConnection!

  """The customer’s phone number."""
  phone: String

  """
  A comma separated list of tags that have been added to the customer.
  Additional access scope required: unauthenticated_read_customer_tags.
  """
  tags: [String!]!

  """The date and time when the customer information was updated."""
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple MailingAddresses.
"""
type ShopifyStorefront_MailingAddressConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_MailingAddressEdge!]!

  """A list of the nodes contained in MailingAddressEdge."""
  nodes: [ShopifyStorefront_MailingAddress!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one MailingAddress and a cursor during pagination.
"""
type ShopifyStorefront_MailingAddressEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MailingAddressEdge."""
  node: ShopifyStorefront_MailingAddress!
}

"""An auto-generated type for paginating through multiple Orders."""
type ShopifyStorefront_OrderConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_OrderEdge!]!

  """A list of the nodes contained in OrderEdge."""
  nodes: [ShopifyStorefront_Order!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one Order and a cursor during pagination.
"""
type ShopifyStorefront_OrderEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of OrderEdge."""
  node: ShopifyStorefront_Order!
}

enum ShopifyStorefront_OrderSortKeys {
  PROCESSED_AT
  TOTAL_PRICE
  ID
  RELEVANCE
}

"""
A collection represents a grouping of products that a shop owner can create to organize them or make their shops easier to browse.
"""
type ShopifyStorefront_Collection implements ShopifyStorefront_HasMetafields & ShopifyStorefront_Node & ShopifyStorefront_OnlineStorePublishable {
  """
  Stripped description of the collection, single line with HTML tags removed.
  """
  description(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String!

  """The description of the collection, complete with HTML formatting."""
  descriptionHtml: Html!

  """
  A human-friendly unique string for the collection automatically generated from its title.
  Limit of 255 characters.
  """
  handle: String!

  """A globally-unique identifier."""
  id: ID!

  """Image associated with the collection."""
  image: ShopifyStorefront_Image

  """Returns a metafield found by namespace and key."""
  metafield(
    """A container for a set of metafields."""
    namespace: String!

    """The identifier for the metafield."""
    key: String!
  ): ShopifyStorefront_Metafield

  """
  The metafields associated with the resource matching the supplied list of namespaces and keys.
  """
  metafields(
    """The list of metafields to retrieve by namespace and key."""
    identifiers: [ShopifyStorefront_HasMetafieldsIdentifierInput!]!
  ): [ShopifyStorefront_Metafield!]!

  """
  The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.
  """
  onlineStoreUrl: Url

  """List of products in the collection."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ShopifyStorefront_ProductCollectionSortKeys = COLLECTION_DEFAULT

    """Returns a subset of products matching all product filters."""
    filters: [ShopifyStorefront_ProductFilterInput]
  ): ShopifyStorefront_ProductConnection!

  """The collection's SEO information."""
  seo: ShopifyStorefront_SEO!

  """The collection’s name. Limit of 255 characters."""
  title: String!

  """The date and time when the collection was last modified."""
  updatedAt: DateTime!
}

"""
Represents a resource that can be published to the Online Store sales channel.
"""
interface ShopifyStorefront_OnlineStorePublishable {
  """
  The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.
  """
  onlineStoreUrl: Url
}

"""An auto-generated type for paginating through multiple Products."""
type ShopifyStorefront_ProductConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_ProductEdge!]!

  """A list of available filters."""
  filters: [ShopifyStorefront_Filter!]!

  """A list of the nodes contained in ProductEdge."""
  nodes: [ShopifyStorefront_Product!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one Product and a cursor during pagination.
"""
type ShopifyStorefront_ProductEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ProductEdge."""
  node: ShopifyStorefront_Product!
}

"""A filter that is supported on the parent field."""
type ShopifyStorefront_Filter {
  """A unique identifier."""
  id: String!

  """A human-friendly string for this filter."""
  label: String!

  """An enumeration that denotes the type of data this filter represents."""
  type: ShopifyStorefront_FilterType!

  """The list of values for this filter."""
  values: [ShopifyStorefront_FilterValue!]!
}

enum ShopifyStorefront_FilterType {
  LIST
  PRICE_RANGE
  BOOLEAN
}

"""A selectable value within a filter."""
type ShopifyStorefront_FilterValue {
  """The number of results that match this filter value."""
  count: Int!

  """A unique identifier."""
  id: String!

  """
  An input object that can be used to filter by this value on the parent field.
  
  The value is provided as a helper for building dynamic filtering UI. For example, if you have a list of selected `FilterValue` objects, you can combine their respective `input` values to use in a subsequent query.
  """
  input: Json!

  """A human-friendly string for this filter value."""
  label: String!
}

enum ShopifyStorefront_ProductCollectionSortKeys {
  TITLE
  PRICE
  BEST_SELLING
  CREATED
  ID
  MANUAL
  COLLECTION_DEFAULT
  RELEVANCE
}

"""A filter used to view a subset of products in a collection."""
input ShopifyStorefront_ProductFilterInput {
  """Filter on if the product is available for sale."""
  available: Boolean

  """A variant option to filter on."""
  variantOption: ShopifyStorefront_VariantOptionFilterInput

  """The product type to filter on."""
  productType: String

  """The product vendor to filter on."""
  productVendor: String

  """A range of prices to filter with-in."""
  price: ShopifyStorefront_PriceRangeFilterInput

  """A product metafield to filter on."""
  productMetafield: ShopifyStorefront_MetafieldFilterInput

  """A variant metafield to filter on."""
  variantMetafield: ShopifyStorefront_MetafieldFilterInput
}

"""
A filter used to view a subset of products in a collection matching a specific variant option.
"""
input ShopifyStorefront_VariantOptionFilterInput {
  """The name of the variant option to filter on."""
  name: String!

  """The value of the variant option to filter on."""
  value: String!
}

"""
A filter used to view a subset of products in a collection matching a specific price range.
"""
input ShopifyStorefront_PriceRangeFilterInput {
  """The minimum price in the range. Defaults to zero."""
  min: Float = 0

  """The maximum price in the range. Empty indicates no max price."""
  max: Float
}

"""
A filter used to view a subset of products in a collection matching a specific metafield value.

Only the following metafield types are currently supported:
- `number_integer`
- `number_decimal`
- `single_line_text_field`
- `boolean` as of 2022-04.
"""
input ShopifyStorefront_MetafieldFilterInput {
  """The namespace of the metafield to filter on."""
  namespace: String!

  """The key of the metafield to filter on."""
  key: String!

  """The value of the metafield."""
  value: String!
}

"""An article in an online store blog."""
type ShopifyStorefront_Article implements ShopifyStorefront_HasMetafields & ShopifyStorefront_Node & ShopifyStorefront_OnlineStorePublishable {
  """The article's author."""
  author: ShopifyStorefront_ArticleAuthor! @deprecated(reason: "Use `authorV2` instead.")

  """The article's author."""
  authorV2: ShopifyStorefront_ArticleAuthor

  """The blog that the article belongs to."""
  blog: ShopifyStorefront_Blog!

  """List of comments posted on the article."""
  comments(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_CommentConnection!

  """Stripped content of the article, single line with HTML tags removed."""
  content(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String!

  """The content of the article, complete with HTML formatting."""
  contentHtml: Html!

  """Stripped excerpt of the article, single line with HTML tags removed."""
  excerpt(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String

  """The excerpt of the article, complete with HTML formatting."""
  excerptHtml: Html

  """
  A human-friendly unique string for the Article automatically generated from its title.
  """
  handle: String!

  """A globally-unique identifier."""
  id: ID!

  """The image associated with the article."""
  image: ShopifyStorefront_Image

  """Returns a metafield found by namespace and key."""
  metafield(
    """A container for a set of metafields."""
    namespace: String!

    """The identifier for the metafield."""
    key: String!
  ): ShopifyStorefront_Metafield

  """
  The metafields associated with the resource matching the supplied list of namespaces and keys.
  """
  metafields(
    """The list of metafields to retrieve by namespace and key."""
    identifiers: [ShopifyStorefront_HasMetafieldsIdentifierInput!]!
  ): [ShopifyStorefront_Metafield!]!

  """
  The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.
  """
  onlineStoreUrl: Url

  """The date and time when the article was published."""
  publishedAt: DateTime!

  """The article’s SEO information."""
  seo: ShopifyStorefront_SEO

  """A categorization that a article can be tagged with."""
  tags: [String!]!

  """The article’s name."""
  title: String!
}

"""The author of an article."""
type ShopifyStorefront_ArticleAuthor {
  """The author's bio."""
  bio: String

  """The author’s email."""
  email: String!

  """The author's first name."""
  firstName: String!

  """The author's last name."""
  lastName: String!

  """The author's full name."""
  name: String!
}

"""An auto-generated type for paginating through multiple Comments."""
type ShopifyStorefront_CommentConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_CommentEdge!]!

  """A list of the nodes contained in CommentEdge."""
  nodes: [ShopifyStorefront_Comment!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one Comment and a cursor during pagination.
"""
type ShopifyStorefront_CommentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CommentEdge."""
  node: ShopifyStorefront_Comment!
}

"""An online store blog."""
type ShopifyStorefront_Blog implements ShopifyStorefront_HasMetafields & ShopifyStorefront_Node & ShopifyStorefront_OnlineStorePublishable {
  """Find an article by its handle."""
  articleByHandle(
    """The handle of the article."""
    handle: String!
  ): ShopifyStorefront_Article

  """List of the blog's articles."""
  articles(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ShopifyStorefront_ArticleSortKeys = ID

    """
    Supported filter parameters:
     - `author`
     - `blog_title`
     - `created_at`
     - `tag`
     - `tag_not`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): ShopifyStorefront_ArticleConnection!

  """The authors who have contributed to the blog."""
  authors: [ShopifyStorefront_ArticleAuthor!]!

  """
  A human-friendly unique string for the Blog automatically generated from its title.
  """
  handle: String!

  """A globally-unique identifier."""
  id: ID!

  """Returns a metafield found by namespace and key."""
  metafield(
    """A container for a set of metafields."""
    namespace: String!

    """The identifier for the metafield."""
    key: String!
  ): ShopifyStorefront_Metafield

  """
  The metafields associated with the resource matching the supplied list of namespaces and keys.
  """
  metafields(
    """The list of metafields to retrieve by namespace and key."""
    identifiers: [ShopifyStorefront_HasMetafieldsIdentifierInput!]!
  ): [ShopifyStorefront_Metafield!]!

  """
  The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.
  """
  onlineStoreUrl: Url

  """The blog's SEO information."""
  seo: ShopifyStorefront_SEO

  """The blogs’s title."""
  title: String!
}

"""An auto-generated type for paginating through multiple Articles."""
type ShopifyStorefront_ArticleConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_ArticleEdge!]!

  """A list of the nodes contained in ArticleEdge."""
  nodes: [ShopifyStorefront_Article!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one Article and a cursor during pagination.
"""
type ShopifyStorefront_ArticleEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ArticleEdge."""
  node: ShopifyStorefront_Article!
}

enum ShopifyStorefront_ArticleSortKeys {
  TITLE
  BLOG_TITLE
  AUTHOR
  UPDATED_AT
  PUBLISHED_AT
  ID
  RELEVANCE
}

"""
An order is a customer’s completed request to purchase one or more products from a shop. An order is created when a customer completes the checkout process, during which time they provides an email address, billing address and payment information.
"""
type ShopifyStorefront_Order implements ShopifyStorefront_HasMetafields & ShopifyStorefront_Node {
  """
  The reason for the order's cancellation. Returns `null` if the order wasn't canceled.
  """
  cancelReason: ShopifyStorefront_OrderCancelReason

  """
  The date and time when the order was canceled. Returns null if the order wasn't canceled.
  """
  canceledAt: DateTime

  """The code of the currency used for the payment."""
  currencyCode: ShopifyStorefront_CurrencyCode!

  """
  The subtotal of line items and their discounts, excluding line items that have been removed. Does not contain order-level discounts, duties, shipping costs, or shipping discounts. Taxes are not included unless the order is a taxes-included order.
  """
  currentSubtotalPrice: ShopifyStorefront_MoneyV2!

  """The total cost of duties for the order, including refunds."""
  currentTotalDuties: ShopifyStorefront_MoneyV2

  """
  The total amount of the order, including duties, taxes and discounts, minus amounts for line items that have been removed.
  """
  currentTotalPrice: ShopifyStorefront_MoneyV2!

  """
  The total of all taxes applied to the order, excluding taxes for returned line items.
  """
  currentTotalTax: ShopifyStorefront_MoneyV2!

  """The locale code in which this specific order happened."""
  customerLocale: String

  """The unique URL that the customer can use to access the order."""
  customerUrl: Url

  """Discounts that have been applied on the order."""
  discountApplications(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_DiscountApplicationConnection!

  """Whether the order has had any edits applied or not."""
  edited: Boolean!

  """The customer's email address."""
  email: String

  """The financial status of the order."""
  financialStatus: ShopifyStorefront_OrderFinancialStatus

  """The fulfillment status for the order."""
  fulfillmentStatus: ShopifyStorefront_OrderFulfillmentStatus!

  """A globally-unique identifier."""
  id: ID!

  """List of the order’s line items."""
  lineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_OrderLineItemConnection!

  """Returns a metafield found by namespace and key."""
  metafield(
    """A container for a set of metafields."""
    namespace: String!

    """The identifier for the metafield."""
    key: String!
  ): ShopifyStorefront_Metafield

  """
  The metafields associated with the resource matching the supplied list of namespaces and keys.
  """
  metafields(
    """The list of metafields to retrieve by namespace and key."""
    identifiers: [ShopifyStorefront_HasMetafieldsIdentifierInput!]!
  ): [ShopifyStorefront_Metafield!]!

  """
  Unique identifier for the order that appears on the order.
  For example, _#1000_ or _Store1001.
  """
  name: String!

  """
  A unique numeric identifier for the order for use by shop owner and customer.
  """
  orderNumber: Int!

  """The total cost of duties charged at checkout."""
  originalTotalDuties: ShopifyStorefront_MoneyV2

  """The total price of the order before any applied edits."""
  originalTotalPrice: ShopifyStorefront_MoneyV2!

  """The customer's phone number for receiving SMS notifications."""
  phone: String

  """
  The date and time when the order was imported.
  This value can be set to dates in the past when importing from other systems.
  If no value is provided, it will be auto-generated based on current date and time.
  """
  processedAt: DateTime!

  """The address to where the order will be shipped."""
  shippingAddress: ShopifyStorefront_MailingAddress

  """
  The discounts that have been allocated onto the shipping line by discount applications.
  """
  shippingDiscountAllocations: [ShopifyStorefront_DiscountAllocation!]!

  """The unique URL for the order's status page."""
  statusUrl: Url!

  """Price of the order before shipping and taxes."""
  subtotalPrice: Money @deprecated(reason: "Use `subtotalPriceV2` instead.")

  """Price of the order before duties, shipping and taxes."""
  subtotalPriceV2: ShopifyStorefront_MoneyV2

  """List of the order’s successful fulfillments."""
  successfulFulfillments(
    """Truncate the array result to this size."""
    first: Int
  ): [ShopifyStorefront_Fulfillment]

  """
  The sum of all the prices of all the items in the order, taxes and discounts included (must be positive).
  """
  totalPrice: Money! @deprecated(reason: "Use `totalPriceV2` instead.")

  """
  The sum of all the prices of all the items in the order, duties, taxes and discounts included (must be positive).
  """
  totalPriceV2: ShopifyStorefront_MoneyV2!

  """The total amount that has been refunded."""
  totalRefunded: Money! @deprecated(reason: "Use `totalRefundedV2` instead.")

  """The total amount that has been refunded."""
  totalRefundedV2: ShopifyStorefront_MoneyV2!

  """The total cost of shipping."""
  totalShippingPrice: Money! @deprecated(reason: "Use `totalShippingPriceV2` instead.")

  """The total cost of shipping."""
  totalShippingPriceV2: ShopifyStorefront_MoneyV2!

  """The total cost of taxes."""
  totalTax: Money @deprecated(reason: "Use `totalTaxV2` instead.")

  """The total cost of taxes."""
  totalTaxV2: ShopifyStorefront_MoneyV2
}

enum ShopifyStorefront_OrderCancelReason {
  CUSTOMER
  FRAUD
  INVENTORY
  DECLINED
  OTHER
}

"""
An auto-generated type for paginating through multiple DiscountApplications.
"""
type ShopifyStorefront_DiscountApplicationConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_DiscountApplicationEdge!]!

  """A list of the nodes contained in DiscountApplicationEdge."""
  nodes: [ShopifyStorefront_DiscountApplication!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one DiscountApplication and a cursor during pagination.
"""
type ShopifyStorefront_DiscountApplicationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DiscountApplicationEdge."""
  node: ShopifyStorefront_DiscountApplication!
}

"""
Discount applications capture the intentions of a discount source at
the time of application.
"""
interface ShopifyStorefront_DiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: ShopifyStorefront_DiscountApplicationAllocationMethod!

  """Which lines of targetType that the discount is allocated over."""
  targetSelection: ShopifyStorefront_DiscountApplicationTargetSelection!

  """The type of line that the discount is applicable towards."""
  targetType: ShopifyStorefront_DiscountApplicationTargetType!

  """The value of the discount application."""
  value: ShopifyStorefront_PricingValue!
}

enum ShopifyStorefront_DiscountApplicationAllocationMethod {
  ACROSS
  EACH
  ONE
}

enum ShopifyStorefront_DiscountApplicationTargetSelection {
  ALL
  ENTITLED
  EXPLICIT
}

enum ShopifyStorefront_DiscountApplicationTargetType {
  LINE_ITEM
  SHIPPING_LINE
}

"""The price value (fixed or percentage) for a discount application."""
union ShopifyStorefront_PricingValue = ShopifyStorefront_MoneyV2 | ShopifyStorefront_PricingPercentageValue

"""The value of the percentage pricing object."""
type ShopifyStorefront_PricingPercentageValue {
  """The percentage value of the object."""
  percentage: Float!
}

enum ShopifyStorefront_OrderFinancialStatus {
  PENDING
  AUTHORIZED
  PARTIALLY_PAID
  PARTIALLY_REFUNDED
  VOIDED
  PAID
  REFUNDED
}

enum ShopifyStorefront_OrderFulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  RESTOCKED
  PENDING_FULFILLMENT
  OPEN
  IN_PROGRESS
  ON_HOLD
  SCHEDULED
}

"""An auto-generated type for paginating through multiple OrderLineItems."""
type ShopifyStorefront_OrderLineItemConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_OrderLineItemEdge!]!

  """A list of the nodes contained in OrderLineItemEdge."""
  nodes: [ShopifyStorefront_OrderLineItem!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one OrderLineItem and a cursor during pagination.
"""
type ShopifyStorefront_OrderLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of OrderLineItemEdge."""
  node: ShopifyStorefront_OrderLineItem!
}

"""
Represents a single line in an order. There is one line item for each distinct product variant.
"""
type ShopifyStorefront_OrderLineItem {
  """
  The number of entries associated to the line item minus the items that have been removed.
  """
  currentQuantity: Int!

  """List of custom attributes associated to the line item."""
  customAttributes: [ShopifyStorefront_Attribute!]!

  """
  The discounts that have been allocated onto the order line item by discount applications.
  """
  discountAllocations: [ShopifyStorefront_DiscountAllocation!]!

  """
  The total price of the line item, including discounts, and displayed in the presentment currency.
  """
  discountedTotalPrice: ShopifyStorefront_MoneyV2!

  """
  The total price of the line item, not including any discounts. The total price is calculated using the original unit price multiplied by the quantity, and it is displayed in the presentment currency.
  """
  originalTotalPrice: ShopifyStorefront_MoneyV2!

  """The number of products variants associated to the line item."""
  quantity: Int!

  """The title of the product combined with title of the variant."""
  title: String!

  """The product variant object associated to the line item."""
  variant: ShopifyStorefront_ProductVariant
}

"""Represents a generic custom attribute."""
type ShopifyStorefront_Attribute {
  """Key or name of the attribute."""
  key: String!

  """Value of the attribute."""
  value: String
}

"""An amount discounting the line that has been allocated by a discount."""
type ShopifyStorefront_DiscountAllocation {
  """Amount of discount allocated."""
  allocatedAmount: ShopifyStorefront_MoneyV2!

  """The discount this allocated amount originated from."""
  discountApplication: ShopifyStorefront_DiscountApplication!
}

"""Represents a single fulfillment in an order."""
type ShopifyStorefront_Fulfillment {
  """List of the fulfillment's line items."""
  fulfillmentLineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_FulfillmentLineItemConnection!

  """The name of the tracking company."""
  trackingCompany: String

  """
  Tracking information associated with the fulfillment,
  such as the tracking number and tracking URL.
  """
  trackingInfo(
    """Truncate the array result to this size."""
    first: Int
  ): [ShopifyStorefront_FulfillmentTrackingInfo!]!
}

"""
An auto-generated type for paginating through multiple FulfillmentLineItems.
"""
type ShopifyStorefront_FulfillmentLineItemConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_FulfillmentLineItemEdge!]!

  """A list of the nodes contained in FulfillmentLineItemEdge."""
  nodes: [ShopifyStorefront_FulfillmentLineItem!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination.
"""
type ShopifyStorefront_FulfillmentLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentLineItemEdge."""
  node: ShopifyStorefront_FulfillmentLineItem!
}

"""
Represents a single line item in a fulfillment. There is at most one fulfillment line item for each order line item.
"""
type ShopifyStorefront_FulfillmentLineItem {
  """The associated order's line item."""
  lineItem: ShopifyStorefront_OrderLineItem!

  """The amount fulfilled in this fulfillment."""
  quantity: Int!
}

"""Tracking information associated with the fulfillment."""
type ShopifyStorefront_FulfillmentTrackingInfo {
  """The tracking number of the fulfillment."""
  number: String

  """The URL to track the fulfillment."""
  url: Url
}

"""
Shopify merchants can create pages to hold static HTML content. Each Page object represents a custom page on the online store.
"""
type ShopifyStorefront_Page implements ShopifyStorefront_HasMetafields & ShopifyStorefront_Node & ShopifyStorefront_OnlineStorePublishable {
  """The description of the page, complete with HTML formatting."""
  body: Html!

  """Summary of the page body."""
  bodySummary: String!

  """The timestamp of the page creation."""
  createdAt: DateTime!

  """
  A human-friendly unique string for the page automatically generated from its title.
  """
  handle: String!

  """A globally-unique identifier."""
  id: ID!

  """Returns a metafield found by namespace and key."""
  metafield(
    """A container for a set of metafields."""
    namespace: String!

    """The identifier for the metafield."""
    key: String!
  ): ShopifyStorefront_Metafield

  """
  The metafields associated with the resource matching the supplied list of namespaces and keys.
  """
  metafields(
    """The list of metafields to retrieve by namespace and key."""
    identifiers: [ShopifyStorefront_HasMetafieldsIdentifierInput!]!
  ): [ShopifyStorefront_Metafield!]!

  """
  The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.
  """
  onlineStoreUrl: Url

  """The page's SEO information."""
  seo: ShopifyStorefront_SEO

  """The title of the page."""
  title: String!

  """The timestamp of the latest page update."""
  updatedAt: DateTime!
}

"""
Shop represents a collection of the general settings and information about the shop.
"""
type ShopifyStorefront_Shop implements ShopifyStorefront_HasMetafields & ShopifyStorefront_Node {
  """A description of the shop."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  """Returns a metafield found by namespace and key."""
  metafield(
    """A container for a set of metafields."""
    namespace: String!

    """The identifier for the metafield."""
    key: String!
  ): ShopifyStorefront_Metafield

  """
  The metafields associated with the resource matching the supplied list of namespaces and keys.
  """
  metafields(
    """The list of metafields to retrieve by namespace and key."""
    identifiers: [ShopifyStorefront_HasMetafieldsIdentifierInput!]!
  ): [ShopifyStorefront_Metafield!]!

  """
  A string representing the way currency is formatted when the currency isn’t specified.
  """
  moneyFormat: String!

  """The shop’s name."""
  name: String!

  """Settings related to payments."""
  paymentSettings: ShopifyStorefront_PaymentSettings!

  """The primary domain of the shop’s Online Store."""
  primaryDomain: ShopifyStorefront_Domain!

  """The shop’s privacy policy."""
  privacyPolicy: ShopifyStorefront_ShopPolicy

  """The shop’s refund policy."""
  refundPolicy: ShopifyStorefront_ShopPolicy

  """The shop’s shipping policy."""
  shippingPolicy: ShopifyStorefront_ShopPolicy

  """Countries that the shop ships to."""
  shipsToCountries: [ShopifyStorefront_CountryCode!]!

  """The shop’s subscription policy."""
  subscriptionPolicy: ShopifyStorefront_ShopPolicyWithDefault

  """The shop’s terms of service."""
  termsOfService: ShopifyStorefront_ShopPolicy
}

"""Settings related to payments."""
type ShopifyStorefront_PaymentSettings {
  """List of the card brands which the shop accepts."""
  acceptedCardBrands: [ShopifyStorefront_CardBrand!]!

  """The url pointing to the endpoint to vault credit cards."""
  cardVaultUrl: Url!

  """The country where the shop is located."""
  countryCode: ShopifyStorefront_CountryCode!

  """The three-letter code for the shop's primary currency."""
  currencyCode: ShopifyStorefront_CurrencyCode!

  """
  A list of enabled currencies (ISO 4217 format) that the shop accepts. Merchants can enable currencies from their Shopify Payments settings in the Shopify admin.
  """
  enabledPresentmentCurrencies: [ShopifyStorefront_CurrencyCode!]!

  """The shop’s Shopify Payments account id."""
  shopifyPaymentsAccountId: String

  """List of the digital wallets which the shop supports."""
  supportedDigitalWallets: [ShopifyStorefront_DigitalWallet!]!
}

enum ShopifyStorefront_CardBrand {
  VISA
  MASTERCARD
  DISCOVER
  AMERICAN_EXPRESS
  DINERS_CLUB
  JCB
}

enum ShopifyStorefront_CountryCode {
  AF
  AX
  AL
  DZ
  AD
  AO
  AI
  AG
  AR
  AM
  AW
  AC
  AU
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BM
  BT
  BO
  BA
  BW
  BV
  BR
  IO
  BN
  BG
  BF
  BI
  KH
  CA
  CV
  BQ
  KY
  CF
  TD
  CL
  CN
  CX
  CC
  CO
  KM
  CG
  CD
  CK
  CR
  HR
  CU
  CW
  CY
  CZ
  CI
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GQ
  ER
  EE
  SZ
  ET
  FK
  FO
  FJ
  FI
  FR
  GF
  PF
  TF
  GA
  GM
  GE
  DE
  GH
  GI
  GR
  GL
  GD
  GP
  GT
  GG
  GN
  GW
  GY
  HT
  HM
  VA
  HN
  HK
  HU
  IS
  IN
  ID
  IR
  IQ
  IE
  IM
  IL
  IT
  JM
  JP
  JE
  JO
  KZ
  KE
  KI
  KP
  XK
  KW
  KG
  LA
  LV
  LB
  LS
  LR
  LY
  LI
  LT
  LU
  MO
  MG
  MW
  MY
  MV
  ML
  MT
  MQ
  MR
  MU
  YT
  MX
  MD
  MC
  MN
  ME
  MS
  MA
  MZ
  MM
  NA
  NR
  NP
  NL
  AN
  NC
  NZ
  NI
  NE
  NG
  NU
  NF
  MK
  NO
  OM
  PK
  PS
  PA
  PG
  PY
  PE
  PH
  PN
  PL
  PT
  QA
  CM
  RE
  RO
  RU
  RW
  BL
  SH
  KN
  LC
  MF
  PM
  WS
  SM
  ST
  SA
  SN
  RS
  SC
  SL
  SG
  SX
  SK
  SI
  SB
  SO
  ZA
  GS
  KR
  SS
  ES
  LK
  VC
  SD
  SR
  SJ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TL
  TG
  TK
  TO
  TT
  TA
  TN
  TR
  TM
  TC
  TV
  UG
  UA
  AE
  GB
  US
  UM
  UY
  UZ
  VU
  VE
  VN
  VG
  WF
  EH
  YE
  ZM
  ZW
  ZZ
}

enum ShopifyStorefront_DigitalWallet {
  APPLE_PAY
  ANDROID_PAY
  GOOGLE_PAY
  SHOPIFY_PAY
}

"""Represents a web address."""
type ShopifyStorefront_Domain {
  """The host name of the domain (eg: `example.com`)."""
  host: String!

  """Whether SSL is enabled or not."""
  sslEnabled: Boolean!

  """The URL of the domain (eg: `https://example.com`)."""
  url: Url!
}

"""
A policy for the store that comes with a default value, such as a subscription policy.
If the merchant hasn't configured a policy for their store, then the policy will return the default value.
Otherwise, the policy will return the merchant-configured value.
"""
type ShopifyStorefront_ShopPolicyWithDefault {
  """The text of the policy. Maximum size: 64KB."""
  body: String!

  """The handle of the policy."""
  handle: String!

  """
  The unique identifier of the policy. A default policy doesn't have an ID.
  """
  id: ID

  """The title of the policy."""
  title: String!

  """Public URL to the policy."""
  url: Url!
}

"""
Metafields represent custom metadata attached to a resource. Metafields can be sorted into namespaces and are
comprised of keys, values, and value types.
"""
type ShopifyStorefront_Metafield implements ShopifyStorefront_Node {
  """The date and time when the storefront metafield was created."""
  createdAt: DateTime!

  """The description of a metafield."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  """The key name for a metafield."""
  key: String!

  """The namespace for a metafield."""
  namespace: String!

  """The parent object that the metafield belongs to."""
  parentResource: ShopifyStorefront_MetafieldParentResource!

  """
  Returns a reference object if the metafield definition's type is a resource reference.
  """
  reference: ShopifyStorefront_MetafieldReference

  """
  The type name of the metafield.
  See the list of [supported types](https://shopify.dev/apps/metafields/definitions/types).
  """
  type: String!

  """The date and time when the storefront metafield was updated."""
  updatedAt: DateTime!

  """The value of a metafield."""
  value: String!
}

"""A resource that the metafield belongs to."""
union ShopifyStorefront_MetafieldParentResource = ShopifyStorefront_Article | ShopifyStorefront_Blog | ShopifyStorefront_Collection | ShopifyStorefront_Customer | ShopifyStorefront_Order | ShopifyStorefront_Page | ShopifyStorefront_Product | ShopifyStorefront_ProductVariant | ShopifyStorefront_Shop

"""Returns the resource which is being referred to by a metafield."""
union ShopifyStorefront_MetafieldReference = ShopifyStorefront_GenericFile | ShopifyStorefront_MediaImage | ShopifyStorefront_Page | ShopifyStorefront_Product | ShopifyStorefront_ProductVariant | ShopifyStorefront_Video

"""
Product property names like "Size", "Color", and "Material" that the customers can select.
Variants are selected based on permutations of these options.
255 characters limit each.
"""
type ShopifyStorefront_ProductOption implements ShopifyStorefront_Node {
  """A globally-unique identifier."""
  id: ID!

  """The product option’s name."""
  name: String!

  """The corresponding value to the product option name."""
  values: [String!]!
}

"""
A cart represents the merchandise that a buyer intends to purchase,
and the estimated cost associated with the cart. Learn how to
[interact with a cart](https://shopify.dev/custom-storefronts/internationalization/international-pricing)
during a customer's session.
"""
type ShopifyStorefront_Cart implements ShopifyStorefront_Node {
  """An attribute associated with the cart."""
  attribute(
    """The key of the attribute."""
    key: String!
  ): ShopifyStorefront_Attribute

  """
  The attributes associated with the cart. Attributes are represented as key-value pairs.
  """
  attributes: [ShopifyStorefront_Attribute!]!

  """Information about the buyer that is interacting with the cart."""
  buyerIdentity: ShopifyStorefront_CartBuyerIdentity!

  """The URL of the checkout for the cart."""
  checkoutUrl: Url!

  """
  The estimated costs that the buyer will pay at checkout. The costs are subject to change and changes will be reflected at checkout. The `cost` field uses the `buyerIdentity` field to determine [international pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing).
  """
  cost: ShopifyStorefront_CartCost!

  """The date and time when the cart was created."""
  createdAt: DateTime!

  """
  The delivery groups available for the cart, based on the default address of the logged-in customer.
  """
  deliveryGroups(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_CartDeliveryGroupConnection!

  """The discounts that have been applied to the entire cart."""
  discountAllocations: [ShopifyStorefront_CartDiscountAllocation!]!

  """
  The case-insensitive discount codes that the customer added at checkout.
  """
  discountCodes: [ShopifyStorefront_CartDiscountCode!]!

  """
  The estimated costs that the buyer will pay at checkout.
  The estimated costs are subject to change and changes will be reflected at checkout.
  The `estimatedCost` field uses the `buyerIdentity` field to determine
  [international pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing).
  """
  estimatedCost: ShopifyStorefront_CartEstimatedCost! @deprecated(reason: "Use `cost` instead.")

  """A globally-unique identifier."""
  id: ID!

  """
  A list of lines containing information about the items the customer intends to purchase.
  """
  lines(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_CartLineConnection!

  """
  A note that is associated with the cart. For example, the note can be a personalized message to the buyer.
  """
  note: String

  """The total number of items in the cart."""
  totalQuantity: Int!

  """The date and time when the cart was updated."""
  updatedAt: DateTime!
}

"""
Represents information about the buyer that is interacting with the cart.
"""
type ShopifyStorefront_CartBuyerIdentity {
  """The country where the buyer is located."""
  countryCode: ShopifyStorefront_CountryCode

  """The customer account associated with the cart."""
  customer: ShopifyStorefront_Customer

  """The email address of the buyer that is interacting with the cart."""
  email: String

  """The phone number of the buyer that is interacting with the cart."""
  phone: String
}

"""
The costs that the buyer will pay at checkout.
The cart cost uses [`CartBuyerIdentity`](https://shopify.dev/api/storefront/reference/cart/cartbuyeridentity) to determine
[international pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing).
"""
type ShopifyStorefront_CartCost {
  """
  The estimated amount, before taxes and discounts, for the customer to pay at checkout. The checkout charge amount doesn't include any deferred payments that'll be paid at a later date. If the cart has no deferred payments, then the checkout charge amount is equivalent to `subtotalAmount`.
  """
  checkoutChargeAmount: ShopifyStorefront_MoneyV2!

  """
  The amount, before taxes and cart-level discounts, for the customer to pay.
  """
  subtotalAmount: ShopifyStorefront_MoneyV2!

  """Whether the subtotal amount is estimated."""
  subtotalAmountEstimated: Boolean!

  """The total amount for the customer to pay."""
  totalAmount: ShopifyStorefront_MoneyV2!

  """Whether the total amount is estimated."""
  totalAmountEstimated: Boolean!

  """The duty amount for the customer to pay at checkout."""
  totalDutyAmount: ShopifyStorefront_MoneyV2

  """Whether the total duty amount is estimated."""
  totalDutyAmountEstimated: Boolean!

  """The tax amount for the customer to pay at checkout."""
  totalTaxAmount: ShopifyStorefront_MoneyV2

  """Whether the total tax amount is estimated."""
  totalTaxAmountEstimated: Boolean!
}

"""
An auto-generated type for paginating through multiple CartDeliveryGroups.
"""
type ShopifyStorefront_CartDeliveryGroupConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_CartDeliveryGroupEdge!]!

  """A list of the nodes contained in CartDeliveryGroupEdge."""
  nodes: [ShopifyStorefront_CartDeliveryGroup!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one CartDeliveryGroup and a cursor during pagination.
"""
type ShopifyStorefront_CartDeliveryGroupEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CartDeliveryGroupEdge."""
  node: ShopifyStorefront_CartDeliveryGroup!
}

"""
Information about the options available for one or more line items to be delivered to a specific address.
"""
type ShopifyStorefront_CartDeliveryGroup {
  """A list of cart lines for the delivery group."""
  cartLines(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_CartLineConnection!

  """The destination address for the delivery group."""
  deliveryAddress: ShopifyStorefront_MailingAddress!

  """The delivery options available for the delivery group."""
  deliveryOptions: [ShopifyStorefront_CartDeliveryOption!]!

  """The ID for the delivery group."""
  id: ID!
}

"""An auto-generated type for paginating through multiple CartLines."""
type ShopifyStorefront_CartLineConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_CartLineEdge!]!

  """A list of the nodes contained in CartLineEdge."""
  nodes: [ShopifyStorefront_CartLine!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one CartLine and a cursor during pagination.
"""
type ShopifyStorefront_CartLineEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CartLineEdge."""
  node: ShopifyStorefront_CartLine!
}

"""Information about a delivery option."""
type ShopifyStorefront_CartDeliveryOption {
  """The code of the delivery option."""
  code: String

  """The method for the delivery option."""
  deliveryMethodType: ShopifyStorefront_DeliveryMethodType!

  """The description of the delivery option."""
  description: String

  """The estimated cost for the delivery option."""
  estimatedCost: ShopifyStorefront_MoneyV2!

  """The title of the delivery option."""
  title: String
}

enum ShopifyStorefront_DeliveryMethodType {
  SHIPPING
  PICK_UP
  RETAIL
  LOCAL
  PICKUP_POINT
  NONE
}

"""The discounts that have been applied to the cart line."""
interface ShopifyStorefront_CartDiscountAllocation {
  """The discounted amount that has been applied to the cart line."""
  discountedAmount: ShopifyStorefront_MoneyV2!
}

"""The discount codes applied to the cart."""
type ShopifyStorefront_CartDiscountCode {
  """
  Whether the discount code is applicable to the cart's current contents.
  """
  applicable: Boolean!

  """The code for the discount."""
  code: String!
}

"""
The estimated costs that the buyer will pay at checkout.
The estimated cost uses
[`CartBuyerIdentity`](https://shopify.dev/api/storefront/reference/cart/cartbuyeridentity)
to determine
[international pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing).
"""
type ShopifyStorefront_CartEstimatedCost {
  """
  The estimated amount, before taxes and discounts, for the customer to pay at checkout. The checkout charge amount doesn't include any deferred payments that'll be paid at a later date. If the cart has no deferred payments, then the checkout charge amount is equivalent to`subtotal_amount`.
  """
  checkoutChargeAmount: ShopifyStorefront_MoneyV2!

  """
  The estimated amount, before taxes and discounts, for the customer to pay.
  """
  subtotalAmount: ShopifyStorefront_MoneyV2!

  """The estimated total amount for the customer to pay."""
  totalAmount: ShopifyStorefront_MoneyV2!

  """The estimated duty amount for the customer to pay at checkout."""
  totalDutyAmount: ShopifyStorefront_MoneyV2

  """The estimated tax amount for the customer to pay at checkout."""
  totalTaxAmount: ShopifyStorefront_MoneyV2
}

"""Represents a mailing address for customers and shipping."""
type ShopifyStorefront_MailingAddress implements ShopifyStorefront_Node {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """The name of the city, district, village, or town."""
  city: String

  """The name of the customer's company or organization."""
  company: String

  """The name of the country."""
  country: String

  """
  The two-letter code for the country of the address.
  
  For example, US.
  """
  countryCode: String @deprecated(reason: "Use `countryCodeV2` instead.")

  """
  The two-letter code for the country of the address.
  
  For example, US.
  """
  countryCodeV2: ShopifyStorefront_CountryCode

  """The first name of the customer."""
  firstName: String

  """
  A formatted version of the address, customized by the provided arguments.
  """
  formatted(
    """Whether to include the customer's name in the formatted address."""
    withName: Boolean = false

    """Whether to include the customer's company in the formatted address."""
    withCompany: Boolean = true
  ): [String!]!

  """A comma-separated list of the values for city, province, and country."""
  formattedArea: String

  """A globally-unique identifier."""
  id: ID!

  """The last name of the customer."""
  lastName: String

  """The latitude coordinate of the customer address."""
  latitude: Float

  """The longitude coordinate of the customer address."""
  longitude: Float

  """The full name of the customer, based on firstName and lastName."""
  name: String

  """
  A unique phone number for the customer.
  
  Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String

  """The region of the address, such as the province, state, or district."""
  province: String

  """
  The two-letter code for the region.
  
  For example, ON.
  """
  provinceCode: String

  """The zip or postal code of the address."""
  zip: String
}

"""
A container for all the information required to checkout items and pay.
"""
type ShopifyStorefront_Checkout implements ShopifyStorefront_Node {
  """The gift cards used on the checkout."""
  appliedGiftCards: [ShopifyStorefront_AppliedGiftCard!]!

  """
  The available shipping rates for this Checkout.
  Should only be used when checkout `requiresShipping` is `true` and
  the shipping address is valid.
  """
  availableShippingRates: ShopifyStorefront_AvailableShippingRates

  """The identity of the customer associated with the checkout."""
  buyerIdentity: ShopifyStorefront_CheckoutBuyerIdentity!

  """The date and time when the checkout was completed."""
  completedAt: DateTime

  """The date and time when the checkout was created."""
  createdAt: DateTime!

  """The currency code for the checkout."""
  currencyCode: ShopifyStorefront_CurrencyCode!

  """A list of extra information that is added to the checkout."""
  customAttributes: [ShopifyStorefront_Attribute!]!

  """Discounts that have been applied on the checkout."""
  discountApplications(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_DiscountApplicationConnection!

  """The email attached to this checkout."""
  email: String

  """A globally-unique identifier."""
  id: ID!

  """
  A list of line item objects, each one containing information about an item in the checkout.
  """
  lineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_CheckoutLineItemConnection!

  """
  The sum of all the prices of all the items in the checkout. Duties, taxes, shipping and discounts excluded.
  """
  lineItemsSubtotalPrice: ShopifyStorefront_MoneyV2!

  """The note associated with the checkout."""
  note: String

  """The resulting order from a paid checkout."""
  order: ShopifyStorefront_Order

  """
  The Order Status Page for this Checkout, null when checkout is not completed.
  """
  orderStatusUrl: Url

  """
  The amount left to be paid. This is equal to the cost of the line items, taxes and shipping minus discounts and gift cards.
  """
  paymentDue: Money! @deprecated(reason: "Use `paymentDueV2` instead.")

  """
  The amount left to be paid. This is equal to the cost of the line items, duties, taxes, and shipping, minus discounts and gift cards.
  """
  paymentDueV2: ShopifyStorefront_MoneyV2!

  """
  Whether or not the Checkout is ready and can be completed. Checkouts may
  have asynchronous operations that can take time to finish. If you want
  to complete a checkout or ensure all the fields are populated and up to
  date, polling is required until the value is true.
  """
  ready: Boolean!

  """States whether or not the fulfillment requires shipping."""
  requiresShipping: Boolean!

  """The shipping address to where the line items will be shipped."""
  shippingAddress: ShopifyStorefront_MailingAddress

  """
  The discounts that have been allocated onto the shipping line by discount applications.
  """
  shippingDiscountAllocations: [ShopifyStorefront_DiscountAllocation!]!

  """
  Once a shipping rate is selected by the customer it is transitioned to a `shipping_line` object.
  """
  shippingLine: ShopifyStorefront_ShippingRate

  """Price of the checkout before shipping and taxes."""
  subtotalPrice: Money! @deprecated(reason: "Use `subtotalPriceV2` instead.")

  """The price at checkout before duties, shipping, and taxes."""
  subtotalPriceV2: ShopifyStorefront_MoneyV2!

  """Whether the checkout is tax exempt."""
  taxExempt: Boolean!

  """Whether taxes are included in the line item and shipping line prices."""
  taxesIncluded: Boolean!

  """The sum of all the duties applied to the line items in the checkout."""
  totalDuties: ShopifyStorefront_MoneyV2

  """
  The sum of all the prices of all the items in the checkout, taxes and discounts included.
  """
  totalPrice: Money! @deprecated(reason: "Use `totalPriceV2` instead.")

  """
  The sum of all the prices of all the items in the checkout, including duties, taxes, and discounts.
  """
  totalPriceV2: ShopifyStorefront_MoneyV2!

  """
  The sum of all the taxes applied to the line items and shipping lines in the checkout.
  """
  totalTax: Money! @deprecated(reason: "Use `totalTaxV2` instead.")

  """
  The sum of all the taxes applied to the line items and shipping lines in the checkout.
  """
  totalTaxV2: ShopifyStorefront_MoneyV2!

  """The date and time when the checkout was last updated."""
  updatedAt: DateTime!

  """The url pointing to the checkout accessible from the web."""
  webUrl: Url!
}

"""A collection of available shipping rates for a checkout."""
type ShopifyStorefront_AvailableShippingRates {
  """
  Whether or not the shipping rates are ready.
  The `shippingRates` field is `null` when this value is `false`.
  This field should be polled until its value becomes `true`.
  """
  ready: Boolean!

  """The fetched shipping rates. `null` until the `ready` field is `true`."""
  shippingRates: [ShopifyStorefront_ShippingRate]
}

"""A shipping rate to be applied to a checkout."""
type ShopifyStorefront_ShippingRate {
  """Human-readable unique identifier for this shipping rate."""
  handle: String!

  """Price of this shipping rate."""
  price: Money! @deprecated(reason: "Use `priceV2` instead.")

  """Price of this shipping rate."""
  priceV2: ShopifyStorefront_MoneyV2!

  """Title of this shipping rate."""
  title: String!
}

"""The identity of the customer associated with the checkout."""
type ShopifyStorefront_CheckoutBuyerIdentity {
  """The country code for the checkout. For example, `CA`."""
  countryCode: ShopifyStorefront_CountryCode
}

"""
An auto-generated type for paginating through multiple CheckoutLineItems.
"""
type ShopifyStorefront_CheckoutLineItemConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_CheckoutLineItemEdge!]!

  """A list of the nodes contained in CheckoutLineItemEdge."""
  nodes: [ShopifyStorefront_CheckoutLineItem!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one CheckoutLineItem and a cursor during pagination.
"""
type ShopifyStorefront_CheckoutLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CheckoutLineItemEdge."""
  node: ShopifyStorefront_CheckoutLineItem!
}

"""
The generic file resource lets you manage files in a merchant’s store. Generic files include any file that doesn’t fit into a designated type such as image or video. Example: PDF, JSON.
"""
type ShopifyStorefront_GenericFile implements ShopifyStorefront_Node {
  """A word or phrase to indicate the contents of a file."""
  alt: String

  """A globally-unique identifier."""
  id: ID!

  """The MIME type of the file."""
  mimeType: String

  """The size of the original file in bytes."""
  originalFileSize: Int

  """The preview image for the file."""
  previewImage: ShopifyStorefront_Image

  """The URL of the file."""
  url: Url
}

"""Represents a Shopify hosted image."""
type ShopifyStorefront_MediaImage implements ShopifyStorefront_Media & ShopifyStorefront_Node {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  """A globally-unique identifier."""
  id: ID!

  """The image for the media."""
  image: ShopifyStorefront_Image

  """The media content type."""
  mediaContentType: ShopifyStorefront_MediaContentType!

  """The preview image for the media."""
  previewImage: ShopifyStorefront_Image
}

"""Represents a Shopify hosted video."""
type ShopifyStorefront_Video implements ShopifyStorefront_Media & ShopifyStorefront_Node {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  """A globally-unique identifier."""
  id: ID!

  """The media content type."""
  mediaContentType: ShopifyStorefront_MediaContentType!

  """The preview image for the media."""
  previewImage: ShopifyStorefront_Image

  """The sources for a video."""
  sources: [ShopifyStorefront_VideoSource!]!
}

"""Represents a source for a Shopify hosted video."""
type ShopifyStorefront_VideoSource {
  """The format of the video source."""
  format: String!

  """The height of the video."""
  height: Int!

  """The video MIME type."""
  mimeType: String!

  """The URL of the video."""
  url: String!

  """The width of the video."""
  width: Int!
}

"""Details about the gift card used on the checkout."""
type ShopifyStorefront_AppliedGiftCard implements ShopifyStorefront_Node {
  """The amount that was taken from the gift card by applying it."""
  amountUsed: Money! @deprecated(reason: "Use `amountUsedV2` instead.")

  """The amount that was taken from the gift card by applying it."""
  amountUsedV2: ShopifyStorefront_MoneyV2!

  """The amount left on the gift card."""
  balance: Money! @deprecated(reason: "Use `balanceV2` instead.")

  """The amount left on the gift card."""
  balanceV2: ShopifyStorefront_MoneyV2!

  """A globally-unique identifier."""
  id: ID!

  """The last characters of the gift card."""
  lastCharacters: String!

  """The amount that was applied to the checkout in its currency."""
  presentmentAmountUsed: ShopifyStorefront_MoneyV2!
}

"""Represents information about the merchandise in the cart."""
type ShopifyStorefront_CartLine implements ShopifyStorefront_Node {
  """An attribute associated with the cart line."""
  attribute(
    """The key of the attribute."""
    key: String!
  ): ShopifyStorefront_Attribute

  """
  The attributes associated with the cart line. Attributes are represented as key-value pairs.
  """
  attributes: [ShopifyStorefront_Attribute!]!

  """
  The cost of the merchandise that the buyer will pay for at checkout. The costs are subject to change and changes will be reflected at checkout.
  """
  cost: ShopifyStorefront_CartLineCost!

  """The discounts that have been applied to the cart line."""
  discountAllocations: [ShopifyStorefront_CartDiscountAllocation!]!

  """
  The estimated cost of the merchandise that the buyer will pay for at checkout. The estimated costs are subject to change and changes will be reflected at checkout.
  """
  estimatedCost: ShopifyStorefront_CartLineEstimatedCost! @deprecated(reason: "Use `cost` instead.")

  """A globally-unique identifier."""
  id: ID!

  """The merchandise that the buyer intends to purchase."""
  merchandise: ShopifyStorefront_Merchandise!

  """The quantity of the merchandise that the customer intends to purchase."""
  quantity: Int!

  """
  The selling plan associated with the cart line and the effect that each selling plan has on variants when they're purchased.
  """
  sellingPlanAllocation: ShopifyStorefront_SellingPlanAllocation
}

"""The cost of the merchandise line that the buyer will pay at checkout."""
type ShopifyStorefront_CartLineCost {
  """The amount of the merchandise line."""
  amountPerQuantity: ShopifyStorefront_MoneyV2!

  """The compare at amount of the merchandise line."""
  compareAtAmountPerQuantity: ShopifyStorefront_MoneyV2

  """The cost of the merchandise line before line-level discounts."""
  subtotalAmount: ShopifyStorefront_MoneyV2!

  """The total cost of the merchandise line."""
  totalAmount: ShopifyStorefront_MoneyV2!
}

"""
The estimated cost of the merchandise line that the buyer will pay at checkout.
"""
type ShopifyStorefront_CartLineEstimatedCost {
  """The amount of the merchandise line."""
  amount: ShopifyStorefront_MoneyV2!

  """The compare at amount of the merchandise line."""
  compareAtAmount: ShopifyStorefront_MoneyV2

  """The estimated cost of the merchandise line before discounts."""
  subtotalAmount: ShopifyStorefront_MoneyV2!

  """The estimated total cost of the merchandise line."""
  totalAmount: ShopifyStorefront_MoneyV2!
}

"""The merchandise to be purchased at checkout."""
union ShopifyStorefront_Merchandise = ShopifyStorefront_ProductVariant

"""
Policy that a merchant has configured for their store, such as their refund or privacy policy.
"""
type ShopifyStorefront_ShopPolicy implements ShopifyStorefront_Node {
  """Policy text, maximum size of 64kb."""
  body: String!

  """Policy’s handle."""
  handle: String!

  """A globally-unique identifier."""
  id: ID!

  """Policy’s title."""
  title: String!

  """Public URL to the policy."""
  url: Url!
}

"""Represents a location where product inventory is held."""
type ShopifyStorefront_Location implements ShopifyStorefront_Node {
  """The address of the location."""
  address: ShopifyStorefront_LocationAddress!

  """A globally-unique identifier."""
  id: ID!

  """The name of the location."""
  name: String!
}

"""Represents the address of a location."""
type ShopifyStorefront_LocationAddress {
  """The first line of the address for the location."""
  address1: String

  """The second line of the address for the location."""
  address2: String

  """The city of the location."""
  city: String

  """The country of the location."""
  country: String

  """The country code of the location."""
  countryCode: String

  """A formatted version of the address for the location."""
  formatted: [String!]!

  """The latitude coordinates of the location."""
  latitude: Float

  """The longitude coordinates of the location."""
  longitude: Float

  """The phone number of the location."""
  phone: String

  """The province of the location."""
  province: String

  """
  The code for the province, state, or district of the address of the location.
  """
  provinceCode: String

  """The ZIP code of the location."""
  zip: String
}

"""A single line item in the checkout, grouped by variant and attributes."""
type ShopifyStorefront_CheckoutLineItem implements ShopifyStorefront_Node {
  """
  Extra information in the form of an array of Key-Value pairs about the line item.
  """
  customAttributes: [ShopifyStorefront_Attribute!]!

  """
  The discounts that have been allocated onto the checkout line item by discount applications.
  """
  discountAllocations: [ShopifyStorefront_DiscountAllocation!]!

  """A globally-unique identifier."""
  id: ID!

  """The quantity of the line item."""
  quantity: Int!

  """Title of the line item. Defaults to the product's title."""
  title: String!

  """Unit price of the line item."""
  unitPrice: ShopifyStorefront_MoneyV2

  """Product variant of the line item."""
  variant: ShopifyStorefront_ProductVariant
}

"""A comment on an article."""
type ShopifyStorefront_Comment implements ShopifyStorefront_Node {
  """The comment’s author."""
  author: ShopifyStorefront_CommentAuthor!

  """Stripped content of the comment, single line with HTML tags removed."""
  content(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String!

  """The content of the comment, complete with HTML formatting."""
  contentHtml: Html!

  """A globally-unique identifier."""
  id: ID!
}

"""The author of a comment."""
type ShopifyStorefront_CommentAuthor {
  """The author's email."""
  email: String!

  """The author’s name."""
  name: String!
}

"""Represents a video hosted outside of Shopify."""
type ShopifyStorefront_ExternalVideo implements ShopifyStorefront_Media & ShopifyStorefront_Node {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  """The embed URL of the video for the respective host."""
  embedUrl: Url!

  """The URL."""
  embeddedUrl: Url! @deprecated(reason: "Use `originUrl` instead.")

  """The host of the external video."""
  host: ShopifyStorefront_MediaHost!

  """A globally-unique identifier."""
  id: ID!

  """The media content type."""
  mediaContentType: ShopifyStorefront_MediaContentType!

  """The origin URL of the video on the respective host."""
  originUrl: Url!

  """The preview image for the media."""
  previewImage: ShopifyStorefront_Image
}

enum ShopifyStorefront_MediaHost {
  YOUTUBE
  VIMEO
}

"""Represents a Shopify hosted 3D model."""
type ShopifyStorefront_Model3d implements ShopifyStorefront_Media & ShopifyStorefront_Node {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  """A globally-unique identifier."""
  id: ID!

  """The media content type."""
  mediaContentType: ShopifyStorefront_MediaContentType!

  """The preview image for the media."""
  previewImage: ShopifyStorefront_Image

  """The sources for a 3d model."""
  sources: [ShopifyStorefront_Model3dSource!]!
}

"""Represents a source for a Shopify hosted 3d model."""
type ShopifyStorefront_Model3dSource {
  """The filesize of the 3d model."""
  filesize: Int!

  """The format of the 3d model."""
  format: String!

  """The MIME type of the 3d model."""
  mimeType: String!

  """The URL of the 3d model."""
  url: String!
}

"""
Automatic discount applications capture the intentions of a discount that was automatically applied.
"""
type ShopifyStorefront_AutomaticDiscountApplication implements ShopifyStorefront_DiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: ShopifyStorefront_DiscountApplicationAllocationMethod!

  """Which lines of targetType that the discount is allocated over."""
  targetSelection: ShopifyStorefront_DiscountApplicationTargetSelection!

  """The type of line that the discount is applicable towards."""
  targetType: ShopifyStorefront_DiscountApplicationTargetType!

  """The title of the application."""
  title: String!

  """The value of the discount application."""
  value: ShopifyStorefront_PricingValue!
}

"""
Discount code applications capture the intentions of a discount code at
the time that it is applied.
"""
type ShopifyStorefront_DiscountCodeApplication implements ShopifyStorefront_DiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: ShopifyStorefront_DiscountApplicationAllocationMethod!

  """Specifies whether the discount code was applied successfully."""
  applicable: Boolean!

  """
  The string identifying the discount code that was used at the time of application.
  """
  code: String!

  """Which lines of targetType that the discount is allocated over."""
  targetSelection: ShopifyStorefront_DiscountApplicationTargetSelection!

  """The type of line that the discount is applicable towards."""
  targetType: ShopifyStorefront_DiscountApplicationTargetType!

  """The value of the discount application."""
  value: ShopifyStorefront_PricingValue!
}

"""
Manual discount applications capture the intentions of a discount that was manually created.
"""
type ShopifyStorefront_ManualDiscountApplication implements ShopifyStorefront_DiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: ShopifyStorefront_DiscountApplicationAllocationMethod!

  """The description of the application."""
  description: String

  """Which lines of targetType that the discount is allocated over."""
  targetSelection: ShopifyStorefront_DiscountApplicationTargetSelection!

  """The type of line that the discount is applicable towards."""
  targetType: ShopifyStorefront_DiscountApplicationTargetType!

  """The title of the application."""
  title: String!

  """The value of the discount application."""
  value: ShopifyStorefront_PricingValue!
}

"""
Script discount applications capture the intentions of a discount that
was created by a Shopify Script.
"""
type ShopifyStorefront_ScriptDiscountApplication implements ShopifyStorefront_DiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: ShopifyStorefront_DiscountApplicationAllocationMethod!

  """Which lines of targetType that the discount is allocated over."""
  targetSelection: ShopifyStorefront_DiscountApplicationTargetSelection!

  """The type of line that the discount is applicable towards."""
  targetType: ShopifyStorefront_DiscountApplicationTargetType!

  """The title of the application as defined by the Script."""
  title: String!

  """The value of the discount application."""
  value: ShopifyStorefront_PricingValue!
}

"""The charge descriptors for a payments account."""
type Shopify_ShopifyPaymentsDefaultChargeStatementDescriptor implements Shopify_ShopifyPaymentsChargeStatementDescriptor {
  """The default charge statement descriptor."""
  default: String

  """The prefix of the statement descriptor."""
  prefix: String!
}

"""The charge descriptors for a Japanese payments account."""
type Shopify_ShopifyPaymentsJpChargeStatementDescriptor implements Shopify_ShopifyPaymentsChargeStatementDescriptor {
  """The default charge statement descriptor."""
  default: String

  """The charge statement descriptor in kana."""
  kana: String

  """The charge statement descriptor in kanji."""
  kanji: String

  """The prefix of the statement descriptor."""
  prefix: String!
}

"""
The discounts automatically applied to the cart line based on prerequisites that have been met.
"""
type ShopifyStorefront_CartAutomaticDiscountAllocation implements ShopifyStorefront_CartDiscountAllocation {
  """The discounted amount that has been applied to the cart line."""
  discountedAmount: ShopifyStorefront_MoneyV2!

  """The title of the allocated discount."""
  title: String!
}

"""
The discount that has been applied to the cart line using a discount code.
"""
type ShopifyStorefront_CartCodeDiscountAllocation implements ShopifyStorefront_CartDiscountAllocation {
  """The code used to apply the discount."""
  code: String!

  """The discounted amount that has been applied to the cart line."""
  discountedAmount: ShopifyStorefront_MoneyV2!
}

"""
The discounts automatically applied to the cart line based on prerequisites that have been met.
"""
type ShopifyStorefront_CartCustomDiscountAllocation implements ShopifyStorefront_CartDiscountAllocation {
  """The discounted amount that has been applied to the cart line."""
  discountedAmount: ShopifyStorefront_MoneyV2!

  """The title of the allocated discount."""
  title: String!
}

"""Represents an error that happens during execution of a cart mutation."""
type ShopifyStorefront_CartUserError implements ShopifyStorefront_DisplayableError {
  """The error code."""
  code: ShopifyStorefront_CartErrorCode

  """The path to the input field that caused the error."""
  field: [String]

  """The error message."""
  message: String!
}

"""Represents an error in the input of a mutation."""
interface ShopifyStorefront_DisplayableError {
  """The path to the input field that caused the error."""
  field: [String]

  """The error message."""
  message: String!
}

enum ShopifyStorefront_CartErrorCode {
  INVALID
  LESS_THAN
  INVALID_MERCHANDISE_LINE
  MISSING_DISCOUNT_CODE
  MISSING_NOTE
}

"""
Represents an error that happens during execution of a customer mutation.
"""
type ShopifyStorefront_CustomerUserError implements ShopifyStorefront_DisplayableError {
  """The error code."""
  code: ShopifyStorefront_CustomerErrorCode

  """The path to the input field that caused the error."""
  field: [String]

  """The error message."""
  message: String!
}

enum ShopifyStorefront_CustomerErrorCode {
  BLANK
  INVALID
  TAKEN
  TOO_LONG
  TOO_SHORT
  UNIDENTIFIED_CUSTOMER
  CUSTOMER_DISABLED
  PASSWORD_STARTS_OR_ENDS_WITH_WHITESPACE
  CONTAINS_HTML_TAGS
  CONTAINS_URL
  TOKEN_INVALID
  ALREADY_ENABLED
  NOT_FOUND
  BAD_DOMAIN
  INVALID_MULTIPASS_REQUEST
}

"""Represents an error in the input of a mutation."""
type ShopifyStorefront_UserError implements ShopifyStorefront_DisplayableError {
  """The path to the input field that caused the error."""
  field: [String]

  """The error message."""
  message: String!
}

"""Root of the Schema"""
type Query {
  taxonomySuggest(
    shapeNames: [String]
    shapeIds: [String]
    contentTypeNames: [String]
    contentTypeIds: [String]
    terms: String
    locale: String
    enableLocaleFallback: Boolean = true

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): TSSuggestionPaginatedList

  """List Versions for a piece of content"""
  getContentVersion(id: ID!, version: Int!, locale: String, enableLocaleFallback: Boolean = true): TSVersionResponse

  """List Versions for a piece of content"""
  getContentVersionList(id: ID!, from: Int, size: Int): TSVersionsPaginatedList

  """Get a Asset by ID"""
  getAsset(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Asset

  """Returns a list Asset in natural order."""
  getAssetList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereAssetInput
  ): AssetPaginatedList

  """Get a TsStaticSite by ID"""
  getTsStaticSite(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): TsStaticSite

  """Returns a list TsStaticSite in natural order."""
  getTsStaticSiteList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereTsStaticSiteInput
  ): TsStaticSitePaginatedList

  """Returns a pageable list of all customers."""
  getMyLoyaltyLionCustomer(email: String, since_id: String, limit: Int, created_at_min: String, created_at_max: String, updated_at_min: String, updated_at_max: String): Loyal_Customer
  Recharge_getMySubscriptions: [Recharge_Subscription!]
  Recharge_getMySubscription(id: String!): Recharge_Subscription
  Recharge_getMyPaymentMethods: [Recharge_PaymentMethod!]
  Recharge_getMyAddressPaymentMethods(addressId: String!): [Recharge_PaymentMethod!]
  ReviewsIo_listProductReviews(sku: String, mpn: String, page: Int, per_page: Int, photos: Int, verified_only: Int, comments_only: Int, minRating: Int, include_unpublished_images: Int, include_moderated: Int, order_id: String, min_date: String, max_date: String): ReviewsIo_ListProductReviewsResponse

  """Get a loyalty card from Voucherify"""
  getMyLoyaltyCard: Voucherify_LoyaltyCard
  getMyNewsletterSubscriptions: [ProfileNewsletterStatus!]

  """Get a Footer by ID"""
  getFooter(locale: String, enableLocaleFallback: Boolean = true): Footer
  Shopify_productVariants(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductVariantSortKeys = ID

    """
    Supported filter parameters:
     - `barcode`
     - `collection`
     - `delivery_profile_id`
     - `exclude_composite`
     - `gift_card`
     - `inventory_quantity`
     - `location_id`
     - `managed`
     - `managed_by`
     - `product_id`
     - `product_status`
     - `product_type`
     - `publishable_status`
     - `published_status`
     - `sku`
     - `tag`
     - `tag_not`
     - `taxable`
     - `title`
     - `updated_at`
     - `vendor`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_ProductVariantConnection
  Shopify_products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductSortKeys = ID

    """
    Supported filter parameters:
     - `barcode`
     - `created_at`
     - `delivery_profile_id`
     - `error_feedback`
     - `gift_card`
     - `has_only_composites`
     - `has_only_default_variant`
     - `id`
     - `inventory_total`
     - `is_price_reduced`
     - `out_of_stock_somewhere`
     - `price`
     - `product_type`
     - `publishable_status`
     - `published_status`
     - `sku`
     - `status`
     - `tag`
     - `tag_not`
     - `title`
     - `updated_at`
     - `vendor`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_ProductConnection
  productsWithTtl(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductSortKeys = ID

    """
    Supported filter parameters:
     - `barcode`
     - `created_at`
     - `delivery_profile_id`
     - `error_feedback`
     - `gift_card`
     - `has_only_composites`
     - `has_only_default_variant`
     - `id`
     - `inventory_total`
     - `is_price_reduced`
     - `out_of_stock_somewhere`
     - `price`
     - `product_type`
     - `publishable_status`
     - `published_status`
     - `sku`
     - `status`
     - `tag`
     - `tag_not`
     - `title`
     - `updated_at`
     - `vendor`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_ProductConnection
  Shopify_product(
    """The ID of the Product to return."""
    id: ID!
  ): Shopify_Product
  productWithTtl(
    """The ID of the Product to return."""
    id: ID!
  ): Shopify_Product
  variantWithTtl(
    """The ID of the ProductVariant to return."""
    id: ID!
  ): Shopify_ProductVariant
  Shopify_customer(
    """The ID of the Customer to return."""
    id: ID!
  ): Shopify_Customer
  Shopify_customerPaymentMethod(
    """The ID of the CustomerPaymentMethod to return."""
    id: ID!

    """Whether to show the customer's revoked payment method."""
    showRevoked: Boolean = false
  ): Shopify_CustomerPaymentMethod
  ShopifyStorefront_customer(
    """The customer access token."""
    customerAccessToken: String!
  ): ShopifyStorefront_Customer
  getMyCustomer: ShopifyStorefront_Customer
  getMyAdminCustomer: Shopify_Customer

  """Get a Storefront by ID"""
  getStorefront(locale: String, enableLocaleFallback: Boolean = true): Storefront
  Shopify_collectionByHandle(
    """The handle of the collection."""
    handle: String!
  ): Shopify_Collection
  collectionByHandleWithTtl(
    """The handle of the collection."""
    handle: String!
  ): Shopify_Collection
  Shopify_collections(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_CollectionSortKeys = ID

    """
    Supported filter parameters:
     - `collection_type`
     - `publishable_status`
     - `published_status`
     - `title`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_CollectionConnection
  collectionsWithTtl(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_CollectionSortKeys = ID

    """
    Supported filter parameters:
     - `collection_type`
     - `publishable_status`
     - `published_status`
     - `title`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_CollectionConnection

  """Get a ProductPageDetails by ID"""
  getProductPageDetails(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): ProductPageDetails

  """Returns a list ProductPageDetails in natural order."""
  getProductPageDetailsList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProductPageDetailsInput
  ): ProductPageDetailsPaginatedList

  """Get a ProductPagePolicies by ID"""
  getProductPagePolicies(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): ProductPagePolicies

  """Returns a list ProductPagePolicies in natural order."""
  getProductPagePoliciesList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProductPagePoliciesInput
  ): ProductPagePoliciesPaginatedList
  Shopify_collection(
    """The ID of the Collection to return."""
    id: ID!
  ): Shopify_Collection

  """Get a Product by ID"""
  getProduct(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Product

  """Returns a list Product in natural order."""
  getProductList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProductInput
  ): ProductPaginatedList

  """Returns a list Product in natural order."""
  getProductListWithTtl(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProductInput
  ): ProductPaginatedList

  """Get a Navigation by ID"""
  getNavigation(locale: String, enableLocaleFallback: Boolean = true): Navigation

  """Get a Collection by ID"""
  getCollection(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Collection

  """Returns a list Collection in natural order."""
  getCollectionList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereCollectionInput
  ): CollectionPaginatedList

  """Returns a list Collection in natural order."""
  getCollectionListWithTtl(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereCollectionInput
  ): CollectionPaginatedList

  """Get a Page by ID"""
  getPage(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Page

  """Returns a list Page in natural order."""
  getPageList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWherePageInput
  ): PagePaginatedList
  Shopify_productByHandle(
    """The handle of the product."""
    handle: String!
  ): Shopify_Product
  productByHandleWithTtl(
    """The handle of the product."""
    handle: String!
  ): Shopify_Product
  Shopify_shop: Shopify_Shop
  ShopifyStorefront_productTypes(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): ShopifyStorefront_StringConnection

  """Get a Link by ID"""
  getLink(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Link

  """Returns a list Link in natural order."""
  getLinkList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereLinkInput
  ): LinkPaginatedList
  ShopifyStorefront_productRecommendations(
    """The id of the product."""
    productId: ID!
  ): [ShopifyStorefront_Product!]
  ShopifyStorefront_products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ShopifyStorefront_ProductSortKeys = ID

    """
    Supported filter parameters:
     - `available_for_sale`
     - `created_at`
     - `product_type`
     - `tag`
     - `tag_not`
     - `title`
     - `updated_at`
     - `variants.price`
     - `vendor`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): ShopifyStorefront_ProductConnection
  ShopifyStorefront_productByHandle(
    """The handle of the product."""
    handle: String!
  ): ShopifyStorefront_Product

  """Get a LineItemAttributes by ID"""
  getLineItemAttributes(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): LineItemAttributes

  """Returns a list LineItemAttributes in natural order."""
  getLineItemAttributesList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereLineItemAttributesInput
  ): LineItemAttributesPaginatedList
  Shopify_customers(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_CustomerSortKeys = ID

    """
    Supported filter parameters:
     - `accepts_marketing`
     - `country`
     - `customer_date`
     - `email`
     - `last_abandoned_order_date`
     - `order_date`
     - `orders_count`
     - `phone`
     - `state`
     - `tag`
     - `tag_not`
     - `total_spent`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_CustomerConnection
  Shopify_deliveryProfiles(
    """
    If `true`, returns only delivery profiles that were created by the merchant.
    """
    merchantOwnedOnly: Boolean

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_DeliveryProfileConnection
  Trustpilot_listProductReviews(
    """
    The page to retrieve. If the page number requested is higher than the available number of pages an empty array will be returned.
    Constraints: The allowed range is minimum: 1, maximum: 2147483647
    Default value: 1
    """
    page: Int

    """
    The number of reviews to retrieve per page.
    Constraints: The allowed range is minimum: 1, maximum: 100
    Default value: 20
    """
    perPage: Int

    """The url of the product. Optional only if sku is provided."""
    productUrl: [String]

    """The sku of the product. Optional only if productUrl is provided."""
    sku: [String]

    """Filter reviews by language."""
    language: String

    """
    Filter reviews with a specific number of stars.
    Constraints: Allowed values are 1, 2, 3, 4, 5
    """
    stars: [Int]

    """
    The language in which the attributes, if any, are returned
    Default value: en-US
    """
    locale: String

    """A comma-separated list of attribute ids"""
    attributeIds: [String]
  ): TrustpilotProductReviews
  Trustpilot_getProductReviewsSummary(
    """The sku of the product. Optional only if productUrl is provided."""
    sku: [String]
  ): TrustpilotProductReviewsSummary
  Shopify_app(
    """The ID to lookup the App by."""
    id: ID
  ): Shopify_App
  Shopify_appInstallation(
    """ID used to lookup AppInstallation."""
    id: ID
  ): Shopify_AppInstallation
  Shopify_appInstallations(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_AppInstallationSortKeys = INSTALLED_AT

    """The category of app installations to fetch."""
    category: Shopify_AppInstallationCategory

    """The privacy level of app installations to fetch."""
    privacy: Shopify_AppInstallationPrivacy = PUBLIC
  ): Shopify_AppInstallationConnection
  Shopify_order(
    """The ID of the Order to return."""
    id: ID!
  ): Shopify_Order
  ShopifyStorefront_product(
    """The ID of the `Product`."""
    id: ID

    """The handle of the `Product`."""
    handle: String
  ): ShopifyStorefront_Product
  searchAssetIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereAssetInput
  ): AssetSearchResults
  searchTsStaticSiteIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereTsStaticSiteInput
  ): TsStaticSiteSearchResults
  searchProductPageDetailsIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProductPageDetailsInput
  ): ProductPageDetailsSearchResults
  searchProductPagePoliciesIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProductPagePoliciesInput
  ): ProductPagePoliciesSearchResults
  searchProductIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProductInput
  ): ProductSearchResults
  searchCollectionIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereCollectionInput
  ): CollectionSearchResults
  searchPageIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWherePageInput
  ): PageSearchResults
  searchLinkIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereLinkInput
  ): LinkSearchResults
  searchLineItemAttributesIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereLineItemAttributesInput
  ): LineItemAttributesSearchResults
  search(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true
    shapeNames: [String]
    shapeIds: [String]
    contentTypeNames: [String]
    contentTypeIds: [String]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereInput
  ): TSSearchableSearchResults
  withContext(locale: String, enableLocaleFallback: Boolean): WithContext
}

type TSSuggestionPaginatedList {
  items: [TSSuggestion]
  total: Int
}

type TSSuggestion {
  _id: ID
  _shapeId: ID
  _shapeName: String
  text: String
  summary: String
}

input TSSearchSort {
  field: String!

  """"asc" for ascending or "desc" for descending"""
  order: String!
}

type TSVersionResponse {
  content: JSONObject
  schema: JSONObject
}

type TSVersionsPaginatedList {
  items: [TSVersion]
  total: Int
  from: Int
  size: Int
}

type TSVersion {
  id: String
  version: Int
  status: String
  enabled: Boolean
  color: String
  updatedAt: String
  updatedBy: TSProjectMember
  item(locale: String, enableLocaleFallback: Boolean = true): TSVersionResponse
}

type TSProjectMember {
  id: ID
  email: String
  fullName: String
  role: String
  avatarPath: String
}

type AssetPaginatedList {
  items: [Asset!]!
  total: Int!
}

input TSSearchSortInput {
  field: String!

  """"asc" for ascending or "desc" for descending"""
  order: String!
}

input TSWhereAssetInput {
  title: TSWhereStringInput
  description: TSWhereStringInput
  filename: TSWhereStringInput
  caption: TSWhereDraftjsInput
  credit: TSWhereDraftjsInput
  path: TSWhereStringInput
  mimeType: TSWhereStringInput
  sourceUrl: TSWhereStringInput
  uploadStatus: TSWhereStringInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
  s3Key: TSWhereStringInput
  AND: [TSWhereAssetInput]
  OR: [TSWhereAssetInput]
  NOT: TSWhereAssetInput
}

input TSWhereStringInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereDraftjsInput {
  """Full text searching with fuzzy matching."""
  match: String
}

input TSWhereIDInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]
}

input TSWhereIntegerInput {
  """Exact match"""
  eq: Int

  """Less than"""
  lt: Int

  """Less than or equal"""
  lte: Int

  """Greater than"""
  gt: Int

  """Greater than or equal"""
  gte: Int

  """Array of possible exact match values."""
  in: [Int]
}

input TSWhereDateInput {
  """Exact match"""
  eq: String

  """Less than"""
  lt: String

  """Less than or equal"""
  lte: String

  """Greater than"""
  gt: String

  """Greater than or equal"""
  gte: String
}

input TSWhereNumberInput {
  """Exact match"""
  eq: Float

  """Less than"""
  lt: Float

  """Less than or equal"""
  lte: Float

  """Greater than"""
  gt: Float

  """Greater than or equal"""
  gte: Float

  """Array of possible exact match values."""
  in: [Float]
}

input TSWhereWorkflowInput {
  """Exact match"""
  eq: String

  """Less than"""
  lt: String

  """Less than or equal"""
  lte: String

  """Greater than"""
  gt: String

  """Greater than or equal"""
  gte: String

  """Array of possible exact match values."""
  in: [String]
}

type TsStaticSite implements TSSearchable {
  title: String!
  baseUrl: String
  provider: String!
  idKey: String
  secretKey: String
  destination: String!
  privateAcl: Boolean
  environmentVariables: [TsStaticSiteEnvironmentVariables]
  triggers: [TsStaticSiteTriggers]
  templateHash: String
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean @deprecated(reason: "Use _status instead")
  _enabledAt: String @deprecated(reason: "Use a custom date field instead")
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type TsStaticSiteEnvironmentVariables {
  name: String
  value: String
}

type TsStaticSiteTriggers {
  contentTypeId: String
  status: String
}

type TsStaticSitePaginatedList {
  items: [TsStaticSite!]!
  total: Int!
}

input TSWhereTsStaticSiteInput {
  title: TSWhereStringInput
  baseUrl: TSWhereStringInput
  provider: TSWhereStringInput
  idKey: TSWhereStringInput
  destination: TSWhereStringInput
  privateAcl: TSWhereBooleanInput
  environmentVariables: TSWhereTsStaticSiteEnvironmentVariablesInput
  triggers: TSWhereTsStaticSiteTriggersInput
  templateHash: TSWhereStringInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
  AND: [TSWhereTsStaticSiteInput]
  OR: [TSWhereTsStaticSiteInput]
  NOT: TSWhereTsStaticSiteInput
}

input TSWhereBooleanInput {
  """Exact match"""
  eq: Boolean
}

input TSWhereTsStaticSiteEnvironmentVariablesInput {
  name: TSWhereStringInput
  value: TSWhereStringInput
}

input TSWhereTsStaticSiteTriggersInput {
  contentTypeId: TSWhereStringInput
  status: TSWhereStringInput
}

type Loyal_Customer {
  """Unique id of customer in LoyaltyLion"""
  id: Int

  """Unique id of customer in your store"""
  merchant_id: String

  """Email address of customer"""
  email: String

  """Number of approved points"""
  points_approved: Int

  """Number of pending points"""
  points_pending: Int

  """Number of spent points"""
  points_spent: Int

  """Number of rewards the customer has claimed"""
  rewards_claimed: Int

  """Any customer properties provided by your store (for example, name)"""
  properties: JSONObject

  """
  Depending on your platform, this may include platform specific metadata
  """
  metadata: JSONObject

  """An ISO 8601 date representing the customers birthday"""
  birthday: String

  """True if this customer has been blocked from the loyalty program"""
  blocked: Boolean

  """
  True if we’ve determined this customer isn’t fully registered with your store
  """
  guest: Boolean

  """True if this customer is member of the loyalty program"""
  enrolled: Boolean

  """
  If enrolled, an ISO 8601 timestamp representing when they joined the program
  """
  enrolled_at: String

  """
  If customer was referred, an object containing the id and merchant_id of the referring customer
  """
  referred_by: JSONObject
  loyalty_tier_membership: Loyal_LoyaltyTier

  """
  If Insights are enabled, a string containing the customer’s current segment. One of At Risk, Win Back, Loyal
  """
  insights_segment: String

  """
  This customer’s unique referral link, for example, https://prz.io/KzByQ2Fa
  """
  referral_url: String

  """
  An ISO 8601 timestamp representing when this customer was created in LoyaltyLion
  """
  created_at: String

  """
  An ISO 8601 timestamp representing when this customer was last updated in LoyaltyLion
  """
  updated_at: String
  rewards: [Loyal_Reward]
}

type Loyal_LoyaltyTier {
  """Unique ID of the tier"""
  id: Int

  """Name of the tier"""
  name: String

  """Where the tier sits in the hierarchy of your tiers"""
  number: Int

  """A boolean value indicating if this tier is the default tier"""
  default: Boolean

  """A boolean value indicating if this tier is hidden"""
  hidden: Boolean

  """String representation of the lower bounds of this tier"""
  lower_bound: String

  """String representation of the upper bounds of this tier"""
  upper_bound: String
}

type Loyal_Reward {
  """Unique ID of the reward in LoyaltyLion"""
  id: Int

  """The kind of reward"""
  kind: String

  """The display title of the reward, in your site’s primary language"""
  title: String

  """Optional extra reward description"""
  description: String

  """
  Additional content that’s needed when working with or rendering the reward. This may include things like image urls, fulfilment_instructions, or other strings you may want to render or utilize in some way
  """
  content: JSONObject

  """The cost of redeeming the reward in points"""
  point_cost: Int

  """
  How the reward is redeemed; one of voucher, store_fulfilment or gift_card
  """
  method: String

  """
  The monetary effect of the discount. One of flat (reduce target price by discount_amount currency units), percentage (reduce target price by discount_amount percent), custom (implementation-defined)
  """
  discount_type: String

  """
  When the reward has a specific monetary or percentage value, that value as a unit-less number. So if the discount amount is £5 or 5%, this returns 5
  """
  discount_amount: Int

  """
  The amount a customer must spend to be able to use the reward. A minimum_spend of 30 returns 30
  """
  minimum_spend: Int

  """The number of times the reward may be used once claimed, typically 1"""
  usage_limit: Int

  """The minimum multiplier of the reward that can be claimed at once"""
  min_redemption_amount: Int

  """The maximum multiplier of the reward that can be claimed at once"""
  max_redemption_amount: Int

  """
  The maximum amount that can be deducted from shipping by a free shipping reward. If null then there is no limit
  """
  max_free_shipping: Int

  """The site ID the reward is associated with"""
  site_id: Int
  target_site: Loyal_RewardSite

  """
  What orders the reward applies to; one of all, one_time or subscription
  """
  order_type: String

  """
  What the reward applies to; one of all, collection, custom, product or shipping
  """
  target_type: String

  """An array of target collections"""
  target_collections: [Loyal_TargetCollection]

  """An array of target products"""
  target_products: [Loyal_TargetProduct]
  session_options: Loyal_RewardSessionOptions
}

type Loyal_RewardSite {
  """The ID of the target site"""
  id: Int

  """The name of the target site"""
  name: String

  """The URL linking to the target site"""
  url: String
}

type Loyal_TargetCollection {
  """The ID of the target collection"""
  id: Int

  """The URL linking to the target collection"""
  url: String

  """
  Text shown when the reward isn’t usable due to items not being in the correct collection
  """
  restriction_text: String
}

type Loyal_TargetProduct {
  """The ID of the target product"""
  id: Int

  """The variant ID of the target product"""
  variant_id: Int

  """The SKU of the target product"""
  sku: String

  """The URL linking to the target product"""
  url: String

  """The URL linking to the image of the target product"""
  image_url: String

  """The key used to sort the target product"""
  sort_key: Int

  """The title of the target product"""
  title: String
}

type Loyal_RewardSessionOptions {
  """
  The kind of session the reward links to, one of custom, cart or checkout
  """
  kind: String

  """
  The number of times the reward may be claimed in one session, typically 1
  """
  session_limit: Int
}

type Recharge_Subscription {
  address_id: String
  cancelled_at: String
  charge_interval_frequency: String!
  created_at: String!
  customer_id: String!
  email: String!
  id: String!
  is_prepaid: Boolean!
  is_skippable: Boolean!
  is_swappable: Boolean!
  next_charge_scheduled_at: String
  order_interval_frequency: String!
  order_interval_unit: String!
  presentment_currency: String!
  price: Float!
  product_title: String!
  quantity: Int!
  recharge_product_id: String!
  shopify_product_id: String!
  shopify_variant_id: String
  sku_override: Boolean!
  status: String!
  updated_at: String!
  variant_title: String!
  charges: [Recharge_Charge!]!
  rechargeProduct: Recharge_Product!
  shopifyProductVariant: Shopify_ProductVariant!
  address: Recharge_Address!
}

type Recharge_Charge {
  id: String!
  created_at: String!
  scheduled_at: String!
  processed_at: String
  updated_at: String!
  line_items: [Recharge_ChargeLineItem!]!
  currency: String!
  shopify_order_id: String
  shopifyOrder: Shopify_Order
  status: String
  address_id: String
}

type Recharge_ChargeLineItem {
  images: Recharge_ChargeLineItemImagesProperty!
  quantity: Int!
  subscription_id: String!
  title: String!
  variant_title: String!
  shopify_product_id: String!
  shopify_variant_id: String!
  price: String!
}

type Recharge_ChargeLineItemImagesProperty {
  large: String
  medium: String
  small: String
  original: String
}

type Recharge_Product {
  id: String!
  discount_amount: Float!
  subscription_defaults: Recharge_ProductSubscriptionDefaultsProperty!
}

type Recharge_ProductSubscriptionDefaultsProperty {
  order_interval_frequency_options: [String!]!
}

type Recharge_Address {
  id: String!
  address1: String!
  address2: String!
  city: String!
  company: String
  country: String
  country_code: String
  first_name: String!
  last_name: String!
  province: String!
  zip: String!
  phone: String
  include: Recharge_AddressIncludeProperty
}

type Recharge_AddressIncludeProperty {
  payment_methods: [Recharge_PaymentMethod]
}

type Recharge_PaymentMethod {
  id: String!
  customer_id: String!
  created_at: String!
  default: Boolean
  payment_details: Recharge_PaymentMethodPaymentDetailsProperty!
  payment_type: String!
  status: String!
  status_reason: String!
  updated_at: String!
}

type Recharge_PaymentMethodPaymentDetailsProperty {
  brand: String!
  exp_month: Float!
  exp_year: Float!
  last4: String!
}

type Voucherify_LoyaltyCard {
  id: String
  code: String
  campaign: String
  campaign_id: String
  type: String
  loyalty_card: Voucherify_LoyaltyCardStats
  active: Boolean
  assets: Voucherify_LoyaltyCardAssets
}

type Voucherify_LoyaltyCardStats {
  points: Int
  balance: Int
}

type Voucherify_LoyaltyCardAssets {
  qr: Voucherify_LoyaltyCardAsset
  barcode: Voucherify_LoyaltyCardAsset
}

type Voucherify_LoyaltyCardAsset {
  id: String
  url: String
}

type ProfileNewsletterStatus {
  """"""
  listId: String!

  """"""
  listName: String!

  """"""
  subscribed: Boolean!
}

type Footer implements TSSearchable {
  """"""
  navigation: FooterNavigation!

  """"""
  newsletter: FooterNewsletter!
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean @deprecated(reason: "Use _status instead")
  _enabledAt: String @deprecated(reason: "Use a custom date field instead")
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type FooterNavigation {
  """"""
  sections: [FooterNavigationSections!]!
}

type FooterNavigationSections {
  """"""
  name: String
  links(enableLocaleFallback: Boolean = true, locale: String): [FooterNavigationSectionsLinksProperty]
}

union FooterNavigationSectionsLinksProperty = Collection | Product | Page | Link

type Page implements TSSearchable {
  """"""
  title: String!

  """"""
  slug: String!
  sections: [PageSectionsProperty!]!

  """"""
  relationship(enableLocaleFallback: Boolean = true, locale: String): [Collection]
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean @deprecated(reason: "Use _status instead")
  _enabledAt: String @deprecated(reason: "Use a custom date field instead")
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

union PageSectionsProperty = PageSectionTitle | PageSectionMdx

type PageSectionTitle {
  label: String
  heading: String
  subheading: String
}

type PageSectionMdx {
  content(
    """Output MDX in another format"""
    format: TSMDXSerializationFormat = mdx
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be added to all CSS classes in the generated HTML"""
    classPrefix: String = ""

    """
    A prefix to be added to all id properties on header elements when outputting as HTML
    """
    headerIdPrefix: String = ""
  ): String
}

enum TSMDXSerializationFormat {
  mdx
  html
}

type Link implements TSSearchable {
  name: String!
  href: String!
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean @deprecated(reason: "Use _status instead")
  _enabledAt: String @deprecated(reason: "Use a custom date field instead")
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type FooterNewsletter {
  """"""
  text: Text!
}

"""Reusable text shape"""
type Text {
  primary: String
  secondary: String
  button: String
}

type Storefront implements TSSearchable {
  components: [StorefrontComponentsProperty]
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean @deprecated(reason: "Use _status instead")
  _enabledAt: String @deprecated(reason: "Use a custom date field instead")
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

union StorefrontComponentsProperty = OffersComponent | HeroComponent | CollectionsComponent | BackgroundImageComponent | SaleComponent | TestimonialsComponent | TrendingProductsComponent | CollectionComponent

type OffersComponent {
  """"""
  offers: [OffersComponentOffers!]!
}

type OffersComponentOffers {
  """"""
  name: String!

  """"""
  description: String!

  """"""
  href: String!
}

type HeroComponent {
  primaryText: String!
  secondaryText: String!
  buttonText: String!

  """"""
  image(enableLocaleFallback: Boolean = true, locale: String): Asset
}

type CollectionsComponent {
  """"""
  collections: [CollectionsComponentCollections!]!
}

type CollectionsComponentCollections {
  """"""
  name: String!

  """"""
  description: String!

  """"""
  href: String!

  """"""
  image(enableLocaleFallback: Boolean = true, locale: String): Asset
}

type BackgroundImageComponent {
  """"""
  image(enableLocaleFallback: Boolean = true, locale: String): Asset

  """"""
  components: [BackgroundImageComponentComponentsProperty!]!
}

union BackgroundImageComponentComponentsProperty = CollectionsComponent | SaleComponent | TestimonialsComponent | OffersComponent | HeroComponent | BackgroundImageComponent

type SaleComponent {
  primaryText: String!
  secondaryText: String!
  buttonText: String!
}

type TestimonialsComponent {
  """"""
  testimonials: [TestimonialsComponentTestimonials!]!
}

type TestimonialsComponentTestimonials {
  """"""
  quote: String!

  """"""
  attribution: String!
}

type TrendingProductsComponent {
  """"""
  trendingProducts: [TrendingProductsComponentTrendingProducts!]!
}

type TrendingProductsComponentTrendingProducts {
  """"""
  shopifyProductId: String!
  shopifyProduct: Shopify_Product
}

type CollectionComponent {
  """"""
  collection(enableLocaleFallback: Boolean = true, locale: String): Collection
}

type ProductPageDetailsPaginatedList {
  items: [ProductPageDetails!]!
  total: Int!
}

input TSWhereProductPageDetailsInput {
  name: TSWhereStringInput
  text: TSWhereProductPageDetailsTextInput
  details: TSWhereProductPageDetailsDetailsInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
  AND: [TSWhereProductPageDetailsInput]
  OR: [TSWhereProductPageDetailsInput]
  NOT: TSWhereProductPageDetailsInput
}

input TSWhereProductPageDetailsTextInput {
  primary: TSWhereDraftjsInput
  secondary: TSWhereDraftjsInput
}

input TSWhereProductPageDetailsDetailsInput {
  image: TSWhereAssetRelationshipInput
  description: TSWhereDraftjsInput
}

input TSWhereAssetRelationshipInput {
  title: TSWhereStringInput
  description: TSWhereStringInput
  filename: TSWhereStringInput
  caption: TSWhereDraftjsInput
  credit: TSWhereDraftjsInput
  path: TSWhereStringInput
  mimeType: TSWhereStringInput
  sourceUrl: TSWhereStringInput
  uploadStatus: TSWhereStringInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
  s3Key: TSWhereStringInput
}

type ProductPagePoliciesPaginatedList {
  items: [ProductPagePolicies!]!
  total: Int!
}

input TSWhereProductPagePoliciesInput {
  name: TSWhereStringInput
  policies: TSWhereProductPagePoliciesPoliciesInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
  AND: [TSWhereProductPagePoliciesInput]
  OR: [TSWhereProductPagePoliciesInput]
  NOT: TSWhereProductPagePoliciesInput
}

input TSWhereProductPagePoliciesPoliciesInput {
  name: TSWhereDraftjsInput
  description: TSWhereDraftjsInput
  image: TSWhereAssetRelationshipInput
}

type ProductPaginatedList {
  items: [Product!]!
  total: Int!
}

input TSWhereProductInput {
  name: TSWhereStringInput
  productComponent: TSWhereStringInput
  hideBreadcrumbs: TSWhereBooleanInput
  hideRelatedProducts: TSWhereBooleanInput
  hideReviews: TSWhereBooleanInput
  showPolicies: TSWhereBooleanInput
  policies: TSWhereProductPagePoliciesRelationshipInput
  showDetails: TSWhereBooleanInput
  details: TSWhereProductPageDetailsRelationshipInput
  lineItemAttributes: TSWhereLineItemAttributesRelationshipInput
  shopifyProductId: TSWhereStringInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
  AND: [TSWhereProductInput]
  OR: [TSWhereProductInput]
  NOT: TSWhereProductInput
}

input TSWhereProductPagePoliciesRelationshipInput {
  name: TSWhereStringInput
  policies: TSShallowWhereProductPagePoliciesPoliciesInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
}

input TSShallowWhereProductPagePoliciesPoliciesInput {
  name: TSWhereDraftjsInput
  description: TSWhereDraftjsInput
}

input TSWhereProductPageDetailsRelationshipInput {
  name: TSWhereStringInput
  text: TSShallowWhereProductPageDetailsTextInput
  details: TSShallowWhereProductPageDetailsDetailsInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
}

input TSShallowWhereProductPageDetailsTextInput {
  primary: TSWhereDraftjsInput
  secondary: TSWhereDraftjsInput
}

input TSShallowWhereProductPageDetailsDetailsInput {
  description: TSWhereDraftjsInput
}

input TSWhereLineItemAttributesRelationshipInput {
  name: TSWhereStringInput
  attributes: TSShallowWhereLineItemAttributesAttributesInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
}

input TSShallowWhereLineItemAttributesAttributesInput {
  key: TSWhereStringInput
  values: TSShallowWhereLineItemAttributesAttributesValuesInput
}

input TSShallowWhereLineItemAttributesAttributesValuesInput {
  value: TSWhereStringInput
}

type Navigation implements TSSearchable {
  message: JSON
  messageHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be added to all CSS classes in the generated HTML"""
    classPrefix: String = ""

    """
    A prefix to be added to all id properties on header elements in the generated HTML
    """
    headerIdPrefix: String = ""
  ): String

  """"""
  sections: [NavigationSections]
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean @deprecated(reason: "Use _status instead")
  _enabledAt: String @deprecated(reason: "Use a custom date field instead")
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type NavigationSections {
  """"""
  name: String!

  """"""
  link(enableLocaleFallback: Boolean = true, locale: String): NavigationSectionsLinkProperty

  """"""
  subsections: [NavigationSectionsSubsections]
}

""""""
union NavigationSectionsLinkProperty = Link | Product | Collection | Page

type NavigationSectionsSubsections {
  """"""
  name: String!

  """"""
  links(enableLocaleFallback: Boolean = true, locale: String): [NavigationSectionsSubsectionsLinksProperty]
}

union NavigationSectionsSubsectionsLinksProperty = Link | Page | Collection | Product

type CollectionPaginatedList {
  items: [Collection!]!
  total: Int!
}

input TSWhereCollectionInput {
  name: TSWhereStringInput
  breadcrumbTitle: TSWhereStringInput
  parent: TSWhereCollectionRelationshipInput
  shopifyCollectionId: TSWhereStringInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
  AND: [TSWhereCollectionInput]
  OR: [TSWhereCollectionInput]
  NOT: TSWhereCollectionInput
}

input TSWhereCollectionRelationshipInput {
  name: TSWhereStringInput
  breadcrumbTitle: TSWhereStringInput
  shopifyCollectionId: TSWhereStringInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
}

type PagePaginatedList {
  items: [Page!]!
  total: Int!
}

input TSWherePageInput {
  title: TSWhereStringInput
  slug: TSWhereStringInput
  sections: TSWherePageSectionsInput
  relationship: TSWhereCollectionRelationshipInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
  AND: [TSWherePageInput]
  OR: [TSWherePageInput]
  NOT: TSWherePageInput
}

input TSWherePageSectionsInput {
  label: TSWhereStringInput
  heading: TSWhereStringInput
  subheading: TSWhereStringInput
  content: TSWhereMdxInput
}

input TSWhereMdxInput {
  """Full text searching with fuzzy matching."""
  match: String
}

"""An auto-generated type for paginating through a list of Strings."""
type ShopifyStorefront_StringConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_StringEdge!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one String and a cursor during pagination.
"""
type ShopifyStorefront_StringEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of StringEdge."""
  node: String!
}

type LinkPaginatedList {
  items: [Link!]!
  total: Int!
}

input TSWhereLinkInput {
  name: TSWhereStringInput
  href: TSWhereStringInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
  AND: [TSWhereLinkInput]
  OR: [TSWhereLinkInput]
  NOT: TSWhereLinkInput
}

enum ShopifyStorefront_ProductSortKeys {
  TITLE
  PRODUCT_TYPE
  VENDOR
  UPDATED_AT
  CREATED_AT
  BEST_SELLING
  PRICE
  ID
  RELEVANCE
}

type LineItemAttributesPaginatedList {
  items: [LineItemAttributes!]!
  total: Int!
}

input TSWhereLineItemAttributesInput {
  name: TSWhereStringInput
  attributes: TSWhereLineItemAttributesAttributesInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
  AND: [TSWhereLineItemAttributesInput]
  OR: [TSWhereLineItemAttributesInput]
  NOT: TSWhereLineItemAttributesInput
}

input TSWhereLineItemAttributesAttributesInput {
  key: TSWhereStringInput
  values: TSWhereLineItemAttributesAttributesValuesInput
}

input TSWhereLineItemAttributesAttributesValuesInput {
  value: TSWhereStringInput
}

"""
An auto-generated type for paginating through multiple DeliveryProfiles.
"""
type Shopify_DeliveryProfileConnection {
  """A list of edges."""
  edges: [Shopify_DeliveryProfileEdge!]!

  """A list of the nodes contained in DeliveryProfileEdge."""
  nodes: [Shopify_DeliveryProfile!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one DeliveryProfile and a cursor during pagination.
"""
type Shopify_DeliveryProfileEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DeliveryProfileEdge."""
  node: Shopify_DeliveryProfile!
}

"""
An auto-generated type for paginating through multiple AppInstallations.
"""
type Shopify_AppInstallationConnection {
  """A list of edges."""
  edges: [Shopify_AppInstallationEdge!]!

  """A list of the nodes contained in AppInstallationEdge."""
  nodes: [Shopify_AppInstallation!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one AppInstallation and a cursor during pagination.
"""
type Shopify_AppInstallationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of AppInstallationEdge."""
  node: Shopify_AppInstallation!
}

enum Shopify_AppInstallationSortKeys {
  INSTALLED_AT
  APP_TITLE
  ID
  RELEVANCE
}

enum Shopify_AppInstallationCategory {
  CHANNEL
  POS_EMBEDDED
}

enum Shopify_AppInstallationPrivacy {
  PUBLIC
  PRIVATE
}

"""Asset search results"""
type AssetSearchResults {
  results: [Asset!]!
  total: Int!
}

"""TsStaticSite search results"""
type TsStaticSiteSearchResults {
  results: [TsStaticSite!]!
  total: Int!
}

"""ProductPageDetails search results"""
type ProductPageDetailsSearchResults {
  results: [ProductPageDetails!]!
  total: Int!
}

"""ProductPagePolicies search results"""
type ProductPagePoliciesSearchResults {
  results: [ProductPagePolicies!]!
  total: Int!
}

"""Product search results"""
type ProductSearchResults {
  results: [Product!]!
  total: Int!
}

"""Collection search results"""
type CollectionSearchResults {
  results: [Collection!]!
  total: Int!
}

"""Page search results"""
type PageSearchResults {
  results: [Page!]!
  total: Int!
}

"""Link search results"""
type LinkSearchResults {
  results: [Link!]!
  total: Int!
}

"""LineItemAttributes search results"""
type LineItemAttributesSearchResults {
  results: [LineItemAttributes!]!
  total: Int!
}

"""TSSearchable search results"""
type TSSearchableSearchResults {
  results: [TSSearchable!]!
  total: Int!
}

input TSWhereInput {
  title: TSWhereStringInput
  description: TSWhereStringInput
  filename: TSWhereStringInput
  caption: TSWhereDraftjsInput
  credit: TSWhereDraftjsInput
  path: TSWhereStringInput
  mimeType: TSWhereStringInput
  sourceUrl: TSWhereStringInput
  uploadStatus: TSWhereStringInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
  s3Key: TSWhereStringInput
  baseUrl: TSWhereStringInput
  provider: TSWhereStringInput
  idKey: TSWhereStringInput
  destination: TSWhereStringInput
  privateAcl: TSWhereBooleanInput
  environmentVariables: TSWhereTsStaticSiteEnvironmentVariablesInput
  triggers: TSWhereTsStaticSiteTriggersInput
  templateHash: TSWhereStringInput
  bodyHtml: TSWhereStringInput
  collections: TSWhereShopify_CollectionConnectionInput
  contextualPricing: TSWhereShopify_ProductContextualPricingInput
  createdAt: TSWhereInput
  customProductType: TSWhereStringInput
  defaultCursor: TSWhereStringInput
  descriptionHtml: TSWhereInput
  descriptionPlainSummary: TSWhereStringInput
  featuredImage: TSWhereShopify_ImageInput
  featuredMedia: TSWhereShopify_MediaInput
  feedback: TSWhereShopify_ResourceFeedbackInput
  giftCardTemplateSuffix: TSWhereStringInput
  handle: TSWhereStringInput
  hasOnlyDefaultVariant: TSWhereBooleanInput
  hasOutOfStockVariants: TSWhereBooleanInput
  id: TSWhereStringInput
  images: TSWhereShopify_ImageConnectionInput
  inCollection: TSWhereBooleanInput
  isGiftCard: TSWhereBooleanInput
  legacyResourceId: TSWhereInput
  media: TSWhereShopify_MediaConnectionInput
  mediaCount: TSWhereIntegerInput
  metafield: TSWhereShopify_MetafieldInput
  metafieldDefinitions: TSWhereShopify_MetafieldDefinitionConnectionInput
  metafields: TSWhereShopify_MetafieldConnectionInput
  onlineStorePreviewUrl: TSWhereInput
  onlineStoreUrl: TSWhereInput
  options: TSWhereShopify_ProductOptionInput
  priceRange: TSWhereShopify_ProductPriceRangeInput
  priceRangeV2: TSWhereShopify_ProductPriceRangeV2Input
  privateMetafield: TSWhereShopify_PrivateMetafieldInput
  privateMetafields: TSWhereShopify_PrivateMetafieldConnectionInput
  productType: TSWhereStringInput
  publishedAt: TSWhereInput
  publishedOnChannel: TSWhereBooleanInput
  publishedOnPublication: TSWhereBooleanInput
  requiresSellingPlan: TSWhereBooleanInput
  resourcePublicationOnCurrentPublication: TSWhereShopify_ResourcePublicationV2Input
  sellingPlanGroupCount: TSWhereIntegerInput
  sellingPlanGroups: TSWhereShopify_SellingPlanGroupConnectionInput
  seo: TSWhereShopify_SEOInput
  standardizedProductType: TSWhereShopify_StandardizedProductTypeInput
  status: TSWhereStringInput
  storefrontId: TSWhereInput
  tags: TSWhereShopify_ProductTagsInput
  templateSuffix: TSWhereStringInput
  totalInventory: TSWhereIntegerInput
  totalVariants: TSWhereIntegerInput
  tracksInventory: TSWhereBooleanInput
  translations: TSWhereShopify_PublishedTranslationInput
  updatedAt: TSWhereInput
  variants: TSWhereShopify_ProductVariantConnectionInput
  vendor: TSWhereStringInput
  reviews: TSWhereReviewsIo_ListProductReviewsResponseInput
  trustpilotReviews: TSWhereTrustpilotProductReviewsInput
  trustpilotReviewsSummary: TSWhereTrustpilotProductReviewsSummaryInput
  takeshape: TSWhereProductInput
  navigation: TSWhereFooterNavigationInput
  newsletter: TSWhereFooterNewsletterInput
  components: TSWhereStorefrontComponentsInput
  name: TSWhereStringInput
  text: TSWhereProductPageDetailsTextInput
  ProductPageDetails_details: TSWhereProductPageDetailsDetailsInput
  ProductPagePolicies_policies: TSWhereProductPagePoliciesPoliciesInput
  productComponent: TSWhereStringInput
  hideBreadcrumbs: TSWhereBooleanInput
  hideRelatedProducts: TSWhereBooleanInput
  hideReviews: TSWhereBooleanInput
  showPolicies: TSWhereBooleanInput
  Product_policies: TSWhereProductPagePoliciesRelationshipInput
  showDetails: TSWhereBooleanInput
  Product_details: TSWhereProductPageDetailsRelationshipInput
  lineItemAttributes: TSWhereLineItemAttributesRelationshipInput
  shopifyProductId: TSWhereStringInput
  message: TSWhereDraftjsInput
  sections: TSWherePageSectionsInput
  breadcrumbTitle: TSWhereStringInput
  parent: TSWhereCollectionRelationshipInput
  shopifyCollectionId: TSWhereStringInput
  slug: TSWhereStringInput
  relationship: TSWhereCollectionRelationshipInput
  href: TSWhereStringInput
  attributes: TSWhereLineItemAttributesAttributesInput
  AND: [TSWhereInput]
  OR: [TSWhereInput]
  NOT: TSWhereInput
}

input TSWhereShopify_CollectionConnectionInput {
  edges: TSWhereShopify_CollectionEdgeInput
  nodes: TSWhereShopify_CollectionInput
  pageInfo: TSWhereShopify_PageInfoInput
}

input TSWhereShopify_CollectionEdgeInput {
  cursor: TSWhereStringInput
  node: TSWhereShopify_CollectionInput
}

input TSWhereShopify_CollectionInput {
  description: TSWhereStringInput
  descriptionHtml: TSWhereInput
  feedback: TSWhereShopify_ResourceFeedbackInput
  handle: TSWhereStringInput
  hasProduct: TSWhereBooleanInput
  id: TSWhereStringInput
  image: TSWhereShopify_ImageInput
  legacyResourceId: TSWhereInput
  metafield: TSWhereShopify_MetafieldInput
  metafieldDefinitions: TSWhereShopify_MetafieldDefinitionConnectionInput
  metafields: TSWhereShopify_MetafieldConnectionInput
  privateMetafield: TSWhereShopify_PrivateMetafieldInput
  privateMetafields: TSWhereShopify_PrivateMetafieldConnectionInput
  products: TSWhereShopify_ProductConnectionInput
  productsCount: TSWhereIntegerInput
  publishedOnChannel: TSWhereBooleanInput
  publishedOnPublication: TSWhereBooleanInput
  ruleSet: TSWhereShopify_CollectionRuleSetInput
  seo: TSWhereShopify_SEOInput
  sortOrder: TSWhereStringInput
  storefrontId: TSWhereInput
  templateSuffix: TSWhereStringInput
  title: TSWhereStringInput
  translations: TSWhereShopify_PublishedTranslationInput
  updatedAt: TSWhereInput
  takeshape: TSWhereCollectionInput
}

input TSWhereShopify_ResourceFeedbackInput {
  appFeedback: TSWhereShopify_AppFeedbackInput
  details: TSWhereShopify_AppFeedbackInput
  summary: TSWhereStringInput
}

input TSWhereShopify_AppFeedbackInput {
  app: TSWhereShopify_AppInput
  link: TSWhereShopify_LinkInput
  messages: TSWhereShopify_UserErrorInput
}

input TSWhereShopify_AppInput {
  apiKey: TSWhereStringInput
  appStoreAppUrl: TSWhereInput
  appStoreDeveloperUrl: TSWhereInput
  availableAccessScopes: TSWhereShopify_AccessScopeInput
  banner: TSWhereShopify_ImageInput
  description: TSWhereStringInput
  developerName: TSWhereStringInput
  developerType: TSWhereStringInput
  developerUrl: TSWhereInput
  embedded: TSWhereBooleanInput
  failedRequirements: TSWhereShopify_FailedRequirementInput
  features: TSWhereShopify_ProductFeaturesInput
  feedback: TSWhereShopify_AppFeedbackInput
  handle: TSWhereStringInput
  icon: TSWhereShopify_ImageInput
  id: TSWhereStringInput
  installUrl: TSWhereInput
  installation: TSWhereShopify_AppInstallationInput
  isPostPurchaseAppInUse: TSWhereBooleanInput
  launchUrl: TSWhereInput
  navigationItems: TSWhereShopify_NavigationItemInput
  previouslyInstalled: TSWhereBooleanInput
  pricingDetails: TSWhereStringInput
  pricingDetailsSummary: TSWhereStringInput
  privacyPolicyUrl: TSWhereInput
  publicCategory: TSWhereStringInput
  published: TSWhereBooleanInput
  requestedAccessScopes: TSWhereShopify_AccessScopeInput
  screenshots: TSWhereShopify_ImageInput
  shopifyDeveloped: TSWhereBooleanInput
  title: TSWhereStringInput
  uninstallMessage: TSWhereStringInput
  uninstallUrl: TSWhereInput
  webhookApiVersion: TSWhereStringInput
}

input TSWhereShopify_AccessScopeInput {
  description: TSWhereStringInput
  handle: TSWhereStringInput
}

input TSWhereShopify_ImageInput {
  altText: TSWhereStringInput
  height: TSWhereIntegerInput
  id: TSWhereStringInput
  metafield: TSWhereShopify_MetafieldInput
  metafields: TSWhereShopify_MetafieldConnectionInput
  originalSrc: TSWhereInput
  privateMetafield: TSWhereShopify_PrivateMetafieldInput
  privateMetafields: TSWhereShopify_PrivateMetafieldConnectionInput
  src: TSWhereInput
  transformedSrc: TSWhereInput
  url: TSWhereInput
  width: TSWhereIntegerInput
}

input TSWhereShopify_MetafieldInput {
  createdAt: TSWhereInput
  definition: TSWhereShopify_MetafieldDefinitionInput
  description: TSWhereStringInput
  id: TSWhereStringInput
  key: TSWhereStringInput
  legacyResourceId: TSWhereInput
  namespace: TSWhereStringInput
  owner: TSWhereShopify_HasMetafieldsInput
  ownerType: TSWhereStringInput
  reference: TSWhereShopify_MetafieldReferenceInput
  type: TSWhereStringInput
  updatedAt: TSWhereInput
  value: TSWhereStringInput
}

input TSWhereShopify_MetafieldDefinitionInput {
  description: TSWhereStringInput
  id: TSWhereStringInput
  key: TSWhereStringInput
  metafields: TSWhereShopify_MetafieldConnectionInput
  metafieldsCount: TSWhereIntegerInput
  name: TSWhereStringInput
  namespace: TSWhereStringInput
  ownerType: TSWhereStringInput
  pinnedPosition: TSWhereIntegerInput
  standardTemplate: TSWhereShopify_StandardMetafieldDefinitionTemplateInput
  type: TSWhereShopify_MetafieldDefinitionTypeInput
  validationStatus: TSWhereStringInput
  validations: TSWhereShopify_MetafieldDefinitionValidationInput
  visibleToStorefrontApi: TSWhereBooleanInput
}

input TSWhereShopify_MetafieldConnectionInput {
  edges: TSWhereShopify_MetafieldEdgeInput
  nodes: TSWhereShopify_MetafieldInput
  pageInfo: TSWhereShopify_PageInfoInput
}

input TSWhereShopify_MetafieldEdgeInput {
  cursor: TSWhereStringInput
  node: TSWhereShopify_MetafieldInput
}

input TSWhereShopify_PageInfoInput {
  endCursor: TSWhereStringInput
  hasNextPage: TSWhereBooleanInput
  hasPreviousPage: TSWhereBooleanInput
  startCursor: TSWhereStringInput
}

input TSWhereShopify_StandardMetafieldDefinitionTemplateInput {
  description: TSWhereStringInput
  id: TSWhereStringInput
  key: TSWhereStringInput
  name: TSWhereStringInput
  namespace: TSWhereStringInput
  type: TSWhereShopify_MetafieldDefinitionTypeInput
  validations: TSWhereShopify_MetafieldDefinitionValidationInput
  visibleToStorefrontApi: TSWhereBooleanInput
}

input TSWhereShopify_MetafieldDefinitionTypeInput {
  category: TSWhereStringInput
  name: TSWhereStringInput
  supportedValidations: TSWhereShopify_MetafieldDefinitionSupportedValidationInput
  supportsDefinitionMigrations: TSWhereBooleanInput
  valueType: TSWhereStringInput
}

input TSWhereShopify_MetafieldDefinitionSupportedValidationInput {
  name: TSWhereStringInput
  type: TSWhereStringInput
}

input TSWhereShopify_MetafieldDefinitionValidationInput {
  name: TSWhereStringInput
  type: TSWhereStringInput
  value: TSWhereStringInput
}

input TSWhereShopify_HasMetafieldsInput {
  metafield: TSWhereShopify_MetafieldInput
  metafields: TSWhereShopify_MetafieldConnectionInput
  privateMetafield: TSWhereShopify_PrivateMetafieldInput
  privateMetafields: TSWhereShopify_PrivateMetafieldConnectionInput
}

input TSWhereShopify_PrivateMetafieldInput {
  createdAt: TSWhereInput
  id: TSWhereStringInput
  key: TSWhereStringInput
  namespace: TSWhereStringInput
  updatedAt: TSWhereInput
  value: TSWhereStringInput
  valueType: TSWhereStringInput
}

input TSWhereShopify_PrivateMetafieldConnectionInput {
  edges: TSWhereShopify_PrivateMetafieldEdgeInput
  nodes: TSWhereShopify_PrivateMetafieldInput
  pageInfo: TSWhereShopify_PageInfoInput
}

input TSWhereShopify_PrivateMetafieldEdgeInput {
  cursor: TSWhereStringInput
  node: TSWhereShopify_PrivateMetafieldInput
}

input TSWhereShopify_MetafieldReferenceInput {
  alt: TSWhereStringInput
  createdAt: TSWhereInput
  fileErrors: TSWhereShopify_FileErrorInput
  fileStatus: TSWhereStringInput
  id: TSWhereStringInput
  mimeType: TSWhereStringInput
  originalFileSize: TSWhereIntegerInput
  preview: TSWhereShopify_MediaPreviewImageInput
  url: TSWhereInput
  image: TSWhereShopify_ImageInput
  mediaContentType: TSWhereStringInput
  mediaErrors: TSWhereShopify_MediaErrorInput
  mediaWarnings: TSWhereShopify_MediaWarningInput
  originalSource: TSWhereShopify_VideoSourceInput
  status: TSWhereStringInput
  defaultCursor: TSWhereStringInput
  translations: TSWhereShopify_PublishedTranslationInput
  bodyHtml: TSWhereStringInput
  collections: TSWhereShopify_CollectionConnectionInput
  contextualPricing: TSWhereShopify_ProductVariantContextualPricingInput
  customProductType: TSWhereStringInput
  description: TSWhereStringInput
  descriptionHtml: TSWhereInput
  descriptionPlainSummary: TSWhereStringInput
  featuredImage: TSWhereShopify_ImageInput
  featuredMedia: TSWhereShopify_MediaInput
  feedback: TSWhereShopify_ResourceFeedbackInput
  giftCardTemplateSuffix: TSWhereStringInput
  handle: TSWhereStringInput
  hasOnlyDefaultVariant: TSWhereBooleanInput
  hasOutOfStockVariants: TSWhereBooleanInput
  images: TSWhereShopify_ImageConnectionInput
  inCollection: TSWhereBooleanInput
  isGiftCard: TSWhereBooleanInput
  legacyResourceId: TSWhereInput
  media: TSWhereShopify_MediaConnectionInput
  mediaCount: TSWhereIntegerInput
  metafield: TSWhereShopify_MetafieldInput
  metafieldDefinitions: TSWhereShopify_MetafieldDefinitionConnectionInput
  metafields: TSWhereShopify_MetafieldConnectionInput
  onlineStorePreviewUrl: TSWhereInput
  onlineStoreUrl: TSWhereInput
  options: TSWhereShopify_ProductOptionInput
  priceRange: TSWhereShopify_ProductPriceRangeInput
  priceRangeV2: TSWhereShopify_ProductPriceRangeV2Input
  privateMetafield: TSWhereShopify_PrivateMetafieldInput
  privateMetafields: TSWhereShopify_PrivateMetafieldConnectionInput
  productType: TSWhereStringInput
  publishedAt: TSWhereInput
  publishedOnChannel: TSWhereBooleanInput
  publishedOnPublication: TSWhereBooleanInput
  requiresSellingPlan: TSWhereBooleanInput
  resourcePublicationOnCurrentPublication: TSWhereShopify_ResourcePublicationV2Input
  sellingPlanGroupCount: TSWhereIntegerInput
  sellingPlanGroups: TSWhereShopify_SellingPlanGroupConnectionInput
  seo: TSWhereShopify_SEOInput
  standardizedProductType: TSWhereShopify_StandardizedProductTypeInput
  storefrontId: TSWhereInput
  tags: TSWhereShopify_ProductTagsInput
  templateSuffix: TSWhereStringInput
  title: TSWhereStringInput
  totalInventory: TSWhereIntegerInput
  totalVariants: TSWhereIntegerInput
  tracksInventory: TSWhereBooleanInput
  updatedAt: TSWhereInput
  variants: TSWhereShopify_ProductVariantConnectionInput
  vendor: TSWhereStringInput
  reviews: TSWhereReviewsIo_ListProductReviewsResponseInput
  trustpilotReviews: TSWhereTrustpilotProductReviewsInput
  trustpilotReviewsSummary: TSWhereTrustpilotProductReviewsSummaryInput
  takeshape: TSWhereProductInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  availableForSale: TSWhereBooleanInput
  barcode: TSWhereStringInput
  compareAtPrice: TSWhereInput
  deliveryProfile: TSWhereShopify_DeliveryProfileInput
  displayName: TSWhereStringInput
  fulfillmentService: TSWhereShopify_FulfillmentServiceInput
  fulfillmentServiceEditable: TSWhereShopify_EditablePropertyInput
  harmonizedSystemCode: TSWhereStringInput
  inventoryItem: TSWhereShopify_InventoryItemInput
  inventoryManagement: TSWhereStringInput
  inventoryPolicy: TSWhereStringInput
  inventoryQuantity: TSWhereIntegerInput
  position: TSWhereIntegerInput
  presentmentPrices: TSWhereShopify_ProductVariantPricePairConnectionInput
  price: TSWhereInput
  product: TSWhereShopify_ProductInput
  requiresShipping: TSWhereBooleanInput
  selectedOptions: TSWhereShopify_SelectedOptionInput
  sellableOnlineQuantity: TSWhereIntegerInput
  sku: TSWhereStringInput
  taxCode: TSWhereStringInput
  taxable: TSWhereBooleanInput
  weight: TSWhereNumberInput
  weightUnit: TSWhereStringInput
  duration: TSWhereIntegerInput
  filename: TSWhereStringInput
  sources: TSWhereShopify_VideoSourceInput
}

input TSWhereShopify_FileErrorInput {
  code: TSWhereStringInput
  details: TSWhereStringInput
  message: TSWhereStringInput
}

input TSWhereShopify_MediaPreviewImageInput {
  image: TSWhereShopify_ImageInput
  status: TSWhereStringInput
}

input TSWhereShopify_MediaErrorInput {
  code: TSWhereStringInput
  details: TSWhereStringInput
  message: TSWhereStringInput
}

input TSWhereShopify_MediaWarningInput {
  code: TSWhereStringInput
  message: TSWhereStringInput
}

input TSWhereShopify_VideoSourceInput {
  fileSize: TSWhereIntegerInput
  format: TSWhereStringInput
  height: TSWhereIntegerInput
  mimeType: TSWhereStringInput
  url: TSWhereStringInput
  width: TSWhereIntegerInput
}

input TSWhereShopify_PublishedTranslationInput {
  key: TSWhereStringInput
  locale: TSWhereStringInput
  value: TSWhereStringInput
}

input TSWhereShopify_ProductVariantContextualPricingInput {
  compareAtPrice: TSWhereShopify_MoneyV2Input
  price: TSWhereShopify_MoneyV2Input
}

input TSWhereShopify_MoneyV2Input {
  amount: TSWhereInput
  currencyCode: TSWhereStringInput
}

input TSWhereShopify_MediaInput {
  alt: TSWhereStringInput
  mediaContentType: TSWhereStringInput
  mediaErrors: TSWhereShopify_MediaErrorInput
  mediaWarnings: TSWhereShopify_MediaWarningInput
  preview: TSWhereShopify_MediaPreviewImageInput
  status: TSWhereStringInput
}

input TSWhereShopify_ImageConnectionInput {
  edges: TSWhereShopify_ImageEdgeInput
  nodes: TSWhereShopify_ImageInput
  pageInfo: TSWhereShopify_PageInfoInput
}

input TSWhereShopify_ImageEdgeInput {
  cursor: TSWhereStringInput
  node: TSWhereShopify_ImageInput
}

input TSWhereShopify_MediaConnectionInput {
  edges: TSWhereShopify_MediaEdgeInput
  nodes: TSWhereShopify_MediaInput
  pageInfo: TSWhereShopify_PageInfoInput
}

input TSWhereShopify_MediaEdgeInput {
  cursor: TSWhereStringInput
  node: TSWhereShopify_MediaInput
}

input TSWhereShopify_MetafieldDefinitionConnectionInput {
  edges: TSWhereShopify_MetafieldDefinitionEdgeInput
  nodes: TSWhereShopify_MetafieldDefinitionInput
  pageInfo: TSWhereShopify_PageInfoInput
}

input TSWhereShopify_MetafieldDefinitionEdgeInput {
  cursor: TSWhereStringInput
  node: TSWhereShopify_MetafieldDefinitionInput
}

input TSWhereShopify_ProductOptionInput {
  id: TSWhereStringInput
  name: TSWhereStringInput
  position: TSWhereIntegerInput
  translations: TSWhereShopify_PublishedTranslationInput
  values: TSWhereShopify_ProductValuesInput
}

input TSWhereShopify_ProductValuesInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereShopify_ProductPriceRangeInput {
  maxVariantPrice: TSWhereShopify_MoneyV2Input
  minVariantPrice: TSWhereShopify_MoneyV2Input
}

input TSWhereShopify_ProductPriceRangeV2Input {
  maxVariantPrice: TSWhereShopify_MoneyV2Input
  minVariantPrice: TSWhereShopify_MoneyV2Input
}

input TSWhereShopify_ResourcePublicationV2Input {
  isPublished: TSWhereBooleanInput
  publication: TSWhereShopify_PublicationInput
  publishDate: TSWhereInput
  publishable: TSWhereShopify_PublishableInput
}

input TSWhereShopify_PublicationInput {
  app: TSWhereShopify_AppInput
  collectionPublicationsV3: TSWhereShopify_ResourcePublicationConnectionInput
  collections: TSWhereShopify_CollectionConnectionInput
  hasCollection: TSWhereBooleanInput
  id: TSWhereStringInput
  name: TSWhereStringInput
  productPublicationsV3: TSWhereShopify_ResourcePublicationConnectionInput
  products: TSWhereShopify_ProductConnectionInput
  supportsFuturePublishing: TSWhereBooleanInput
}

input TSWhereShopify_ResourcePublicationConnectionInput {
  edges: TSWhereShopify_ResourcePublicationEdgeInput
  nodes: TSWhereShopify_ResourcePublicationInput
  pageInfo: TSWhereShopify_PageInfoInput
}

input TSWhereShopify_ResourcePublicationEdgeInput {
  cursor: TSWhereStringInput
  node: TSWhereShopify_ResourcePublicationInput
}

input TSWhereShopify_ResourcePublicationInput {
  channel: TSWhereShopify_ChannelInput
  isPublished: TSWhereBooleanInput
  publication: TSWhereShopify_PublicationInput
  publishDate: TSWhereInput
  publishable: TSWhereShopify_PublishableInput
}

input TSWhereShopify_ChannelInput {
  app: TSWhereShopify_AppInput
  collectionPublicationsV3: TSWhereShopify_ResourcePublicationConnectionInput
  collections: TSWhereShopify_CollectionConnectionInput
  handle: TSWhereStringInput
  hasCollection: TSWhereBooleanInput
  id: TSWhereStringInput
  name: TSWhereStringInput
  navigationItems: TSWhereShopify_NavigationItemInput
  overviewPath: TSWhereInput
  productPublicationsV3: TSWhereShopify_ResourcePublicationConnectionInput
  products: TSWhereShopify_ProductConnectionInput
  supportsFuturePublishing: TSWhereBooleanInput
}

input TSWhereShopify_NavigationItemInput {
  id: TSWhereStringInput
  title: TSWhereStringInput
  url: TSWhereInput
}

input TSWhereShopify_ProductConnectionInput {
  edges: TSWhereShopify_ProductEdgeInput
  nodes: TSWhereShopify_ProductInput
  pageInfo: TSWhereShopify_PageInfoInput
}

input TSWhereShopify_ProductEdgeInput {
  cursor: TSWhereStringInput
  node: TSWhereShopify_ProductInput
}

input TSWhereShopify_ProductInput {
  bodyHtml: TSWhereStringInput
  collections: TSWhereShopify_CollectionConnectionInput
  contextualPricing: TSWhereShopify_ProductContextualPricingInput
  createdAt: TSWhereInput
  customProductType: TSWhereStringInput
  defaultCursor: TSWhereStringInput
  description: TSWhereStringInput
  descriptionHtml: TSWhereInput
  descriptionPlainSummary: TSWhereStringInput
  featuredImage: TSWhereShopify_ImageInput
  featuredMedia: TSWhereShopify_MediaInput
  feedback: TSWhereShopify_ResourceFeedbackInput
  giftCardTemplateSuffix: TSWhereStringInput
  handle: TSWhereStringInput
  hasOnlyDefaultVariant: TSWhereBooleanInput
  hasOutOfStockVariants: TSWhereBooleanInput
  id: TSWhereStringInput
  images: TSWhereShopify_ImageConnectionInput
  inCollection: TSWhereBooleanInput
  isGiftCard: TSWhereBooleanInput
  legacyResourceId: TSWhereInput
  media: TSWhereShopify_MediaConnectionInput
  mediaCount: TSWhereIntegerInput
  metafield: TSWhereShopify_MetafieldInput
  metafieldDefinitions: TSWhereShopify_MetafieldDefinitionConnectionInput
  metafields: TSWhereShopify_MetafieldConnectionInput
  onlineStorePreviewUrl: TSWhereInput
  onlineStoreUrl: TSWhereInput
  options: TSWhereShopify_ProductOptionInput
  priceRange: TSWhereShopify_ProductPriceRangeInput
  priceRangeV2: TSWhereShopify_ProductPriceRangeV2Input
  privateMetafield: TSWhereShopify_PrivateMetafieldInput
  privateMetafields: TSWhereShopify_PrivateMetafieldConnectionInput
  productType: TSWhereStringInput
  publishedAt: TSWhereInput
  publishedOnChannel: TSWhereBooleanInput
  publishedOnPublication: TSWhereBooleanInput
  requiresSellingPlan: TSWhereBooleanInput
  resourcePublicationOnCurrentPublication: TSWhereShopify_ResourcePublicationV2Input
  sellingPlanGroupCount: TSWhereIntegerInput
  sellingPlanGroups: TSWhereShopify_SellingPlanGroupConnectionInput
  seo: TSWhereShopify_SEOInput
  standardizedProductType: TSWhereShopify_StandardizedProductTypeInput
  status: TSWhereStringInput
  storefrontId: TSWhereInput
  tags: TSWhereShopify_ProductTagsInput
  templateSuffix: TSWhereStringInput
  title: TSWhereStringInput
  totalInventory: TSWhereIntegerInput
  totalVariants: TSWhereIntegerInput
  tracksInventory: TSWhereBooleanInput
  translations: TSWhereShopify_PublishedTranslationInput
  updatedAt: TSWhereInput
  variants: TSWhereShopify_ProductVariantConnectionInput
  vendor: TSWhereStringInput
  reviews: TSWhereReviewsIo_ListProductReviewsResponseInput
  trustpilotReviews: TSWhereTrustpilotProductReviewsInput
  trustpilotReviewsSummary: TSWhereTrustpilotProductReviewsSummaryInput
  takeshape: TSWhereProductInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
}

input TSWhereShopify_ProductContextualPricingInput {
  maxVariantPricing: TSWhereShopify_ProductVariantContextualPricingInput
  minVariantPricing: TSWhereShopify_ProductVariantContextualPricingInput
  priceRange: TSWhereShopify_ProductPriceRangeV2Input
}

input TSWhereShopify_SellingPlanGroupConnectionInput {
  edges: TSWhereShopify_SellingPlanGroupEdgeInput
  nodes: TSWhereShopify_SellingPlanGroupInput
  pageInfo: TSWhereShopify_PageInfoInput
}

input TSWhereShopify_SellingPlanGroupEdgeInput {
  cursor: TSWhereStringInput
  node: TSWhereShopify_SellingPlanGroupInput
}

input TSWhereShopify_SellingPlanGroupInput {
  appId: TSWhereStringInput
  appliesToProduct: TSWhereBooleanInput
  appliesToProductVariant: TSWhereBooleanInput
  appliesToProductVariants: TSWhereBooleanInput
  createdAt: TSWhereInput
  description: TSWhereStringInput
  id: TSWhereStringInput
  merchantCode: TSWhereStringInput
  name: TSWhereStringInput
  options: TSWhereShopify_ProductOptionsInput
  position: TSWhereIntegerInput
  productCount: TSWhereIntegerInput
  productVariantCount: TSWhereIntegerInput
  productVariants: TSWhereShopify_ProductVariantConnectionInput
  products: TSWhereShopify_ProductConnectionInput
  sellingPlans: TSWhereShopify_SellingPlanConnectionInput
  summary: TSWhereStringInput
}

input TSWhereShopify_ProductOptionsInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereShopify_ProductVariantConnectionInput {
  edges: TSWhereShopify_ProductVariantEdgeInput
  nodes: TSWhereShopify_ProductVariantInput
  pageInfo: TSWhereShopify_PageInfoInput
}

input TSWhereShopify_ProductVariantEdgeInput {
  cursor: TSWhereStringInput
  node: TSWhereShopify_ProductVariantInput
}

input TSWhereShopify_ProductVariantInput {
  availableForSale: TSWhereBooleanInput
  barcode: TSWhereStringInput
  compareAtPrice: TSWhereInput
  contextualPricing: TSWhereShopify_ProductVariantContextualPricingInput
  createdAt: TSWhereInput
  defaultCursor: TSWhereStringInput
  deliveryProfile: TSWhereShopify_DeliveryProfileInput
  displayName: TSWhereStringInput
  fulfillmentService: TSWhereShopify_FulfillmentServiceInput
  fulfillmentServiceEditable: TSWhereShopify_EditablePropertyInput
  harmonizedSystemCode: TSWhereStringInput
  id: TSWhereStringInput
  image: TSWhereShopify_ImageInput
  inventoryItem: TSWhereShopify_InventoryItemInput
  inventoryManagement: TSWhereStringInput
  inventoryPolicy: TSWhereStringInput
  inventoryQuantity: TSWhereIntegerInput
  legacyResourceId: TSWhereInput
  media: TSWhereShopify_MediaConnectionInput
  metafield: TSWhereShopify_MetafieldInput
  metafieldDefinitions: TSWhereShopify_MetafieldDefinitionConnectionInput
  metafields: TSWhereShopify_MetafieldConnectionInput
  position: TSWhereIntegerInput
  presentmentPrices: TSWhereShopify_ProductVariantPricePairConnectionInput
  price: TSWhereInput
  privateMetafield: TSWhereShopify_PrivateMetafieldInput
  privateMetafields: TSWhereShopify_PrivateMetafieldConnectionInput
  product: TSWhereShopify_ProductInput
  requiresShipping: TSWhereBooleanInput
  selectedOptions: TSWhereShopify_SelectedOptionInput
  sellableOnlineQuantity: TSWhereIntegerInput
  sellingPlanGroupCount: TSWhereIntegerInput
  sellingPlanGroups: TSWhereShopify_SellingPlanGroupConnectionInput
  sku: TSWhereStringInput
  storefrontId: TSWhereInput
  taxCode: TSWhereStringInput
  taxable: TSWhereBooleanInput
  title: TSWhereStringInput
  translations: TSWhereShopify_PublishedTranslationInput
  updatedAt: TSWhereInput
  weight: TSWhereNumberInput
  weightUnit: TSWhereStringInput
}

input TSWhereShopify_DeliveryProfileInput {
  activeMethodDefinitionsCount: TSWhereIntegerInput
  default: TSWhereBooleanInput
  id: TSWhereStringInput
  legacyMode: TSWhereBooleanInput
  locationsWithoutRatesCount: TSWhereIntegerInput
  name: TSWhereStringInput
  originLocationCount: TSWhereIntegerInput
  productVariantsCount: TSWhereIntegerInput
  productVariantsCountV2: TSWhereShopify_DeliveryProductVariantsCountInput
  profileItems: TSWhereShopify_DeliveryProfileItemConnectionInput
  profileLocationGroups: TSWhereShopify_DeliveryProfileLocationGroupInput
  sellingPlanGroups: TSWhereShopify_SellingPlanGroupConnectionInput
  unassignedLocations: TSWhereShopify_LocationInput
  zoneCountryCount: TSWhereIntegerInput
}

input TSWhereShopify_DeliveryProductVariantsCountInput {
  capped: TSWhereBooleanInput
  count: TSWhereIntegerInput
}

input TSWhereShopify_DeliveryProfileItemConnectionInput {
  edges: TSWhereShopify_DeliveryProfileItemEdgeInput
  nodes: TSWhereShopify_DeliveryProfileItemInput
  pageInfo: TSWhereShopify_PageInfoInput
}

input TSWhereShopify_DeliveryProfileItemEdgeInput {
  cursor: TSWhereStringInput
  node: TSWhereShopify_DeliveryProfileItemInput
}

input TSWhereShopify_DeliveryProfileItemInput {
  id: TSWhereStringInput
  product: TSWhereShopify_ProductInput
  variants: TSWhereShopify_ProductVariantConnectionInput
}

input TSWhereShopify_DeliveryProfileLocationGroupInput {
  countriesInAnyZone: TSWhereShopify_DeliveryCountryAndZoneInput
  locationGroup: TSWhereShopify_DeliveryLocationGroupInput
  locationGroupZones: TSWhereShopify_DeliveryLocationGroupZoneConnectionInput
}

input TSWhereShopify_DeliveryCountryAndZoneInput {
  country: TSWhereShopify_DeliveryCountryInput
  zone: TSWhereStringInput
}

input TSWhereShopify_DeliveryCountryInput {
  code: TSWhereShopify_DeliveryCountryCodeOrRestOfWorldInput
  id: TSWhereStringInput
  name: TSWhereStringInput
  provinces: TSWhereShopify_DeliveryProvinceInput
  translatedName: TSWhereStringInput
}

input TSWhereShopify_DeliveryCountryCodeOrRestOfWorldInput {
  countryCode: TSWhereStringInput
  restOfWorld: TSWhereBooleanInput
}

input TSWhereShopify_DeliveryProvinceInput {
  code: TSWhereStringInput
  id: TSWhereStringInput
  name: TSWhereStringInput
  translatedName: TSWhereStringInput
}

input TSWhereShopify_DeliveryLocationGroupInput {
  id: TSWhereStringInput
  locations: TSWhereShopify_LocationConnectionInput
}

input TSWhereShopify_LocationConnectionInput {
  edges: TSWhereShopify_LocationEdgeInput
  nodes: TSWhereShopify_LocationInput
  pageInfo: TSWhereShopify_PageInfoInput
}

input TSWhereShopify_LocationEdgeInput {
  cursor: TSWhereStringInput
  node: TSWhereShopify_LocationInput
}

input TSWhereShopify_LocationInput {
  activatable: TSWhereBooleanInput
  address: TSWhereShopify_LocationAddressInput
  addressVerified: TSWhereBooleanInput
  deactivatable: TSWhereBooleanInput
  deactivatedAt: TSWhereStringInput
  deletable: TSWhereBooleanInput
  fulfillmentService: TSWhereShopify_FulfillmentServiceInput
  fulfillsOnlineOrders: TSWhereBooleanInput
  hasActiveInventory: TSWhereBooleanInput
  hasUnfulfilledOrders: TSWhereBooleanInput
  id: TSWhereStringInput
  inventoryLevel: TSWhereShopify_InventoryLevelInput
  inventoryLevels: TSWhereShopify_InventoryLevelConnectionInput
  isActive: TSWhereBooleanInput
  isPrimary: TSWhereBooleanInput
  legacyResourceId: TSWhereInput
  metafieldDefinitions: TSWhereShopify_MetafieldDefinitionConnectionInput
  name: TSWhereStringInput
  shipsInventory: TSWhereBooleanInput
  suggestedAddresses: TSWhereShopify_LocationSuggestedAddressInput
}

input TSWhereShopify_LocationAddressInput {
  address1: TSWhereStringInput
  address2: TSWhereStringInput
  city: TSWhereStringInput
  country: TSWhereStringInput
  countryCode: TSWhereStringInput
  formatted: TSWhereShopify_ProductVariantFormattedInput
  latitude: TSWhereNumberInput
  longitude: TSWhereNumberInput
  phone: TSWhereStringInput
  province: TSWhereStringInput
  provinceCode: TSWhereStringInput
  zip: TSWhereStringInput
}

input TSWhereShopify_ProductVariantFormattedInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereShopify_FulfillmentServiceInput {
  callbackUrl: TSWhereInput
  fulfillmentOrdersOptIn: TSWhereBooleanInput
  handle: TSWhereStringInput
  id: TSWhereStringInput
  inventoryManagement: TSWhereBooleanInput
  location: TSWhereShopify_LocationInput
  permitsSkuSharing: TSWhereBooleanInput
  productBased: TSWhereBooleanInput
  serviceName: TSWhereStringInput
  shippingMethods: TSWhereShopify_ShippingMethodInput
  type: TSWhereStringInput
}

input TSWhereShopify_ShippingMethodInput {
  code: TSWhereStringInput
  label: TSWhereStringInput
}

input TSWhereShopify_InventoryLevelInput {
  available: TSWhereIntegerInput
  canDeactivate: TSWhereBooleanInput
  createdAt: TSWhereInput
  deactivationAlert: TSWhereStringInput
  deactivationAlertHtml: TSWhereInput
  id: TSWhereStringInput
  incoming: TSWhereIntegerInput
  item: TSWhereShopify_InventoryItemInput
  location: TSWhereShopify_LocationInput
  updatedAt: TSWhereInput
}

input TSWhereShopify_InventoryItemInput {
  countryCodeOfOrigin: TSWhereStringInput
  countryHarmonizedSystemCodes: TSWhereShopify_CountryHarmonizedSystemCodeConnectionInput
  createdAt: TSWhereInput
  duplicateSkuCount: TSWhereIntegerInput
  harmonizedSystemCode: TSWhereStringInput
  id: TSWhereStringInput
  inventoryHistoryUrl: TSWhereInput
  inventoryLevel: TSWhereShopify_InventoryLevelInput
  inventoryLevels: TSWhereShopify_InventoryLevelConnectionInput
  legacyResourceId: TSWhereInput
  locationsCount: TSWhereIntegerInput
  provinceCodeOfOrigin: TSWhereStringInput
  requiresShipping: TSWhereBooleanInput
  sku: TSWhereStringInput
  tracked: TSWhereBooleanInput
  trackedEditable: TSWhereShopify_EditablePropertyInput
  unitCost: TSWhereShopify_MoneyV2Input
  updatedAt: TSWhereInput
  variant: TSWhereShopify_ProductVariantInput
}

input TSWhereShopify_CountryHarmonizedSystemCodeConnectionInput {
  edges: TSWhereShopify_CountryHarmonizedSystemCodeEdgeInput
  nodes: TSWhereShopify_CountryHarmonizedSystemCodeInput
  pageInfo: TSWhereShopify_PageInfoInput
}

input TSWhereShopify_CountryHarmonizedSystemCodeEdgeInput {
  cursor: TSWhereStringInput
  node: TSWhereShopify_CountryHarmonizedSystemCodeInput
}

input TSWhereShopify_CountryHarmonizedSystemCodeInput {
  countryCode: TSWhereStringInput
  harmonizedSystemCode: TSWhereStringInput
}

input TSWhereShopify_InventoryLevelConnectionInput {
  edges: TSWhereShopify_InventoryLevelEdgeInput
  nodes: TSWhereShopify_InventoryLevelInput
  pageInfo: TSWhereShopify_PageInfoInput
}

input TSWhereShopify_InventoryLevelEdgeInput {
  cursor: TSWhereStringInput
  node: TSWhereShopify_InventoryLevelInput
}

input TSWhereShopify_EditablePropertyInput {
  locked: TSWhereBooleanInput
  reason: TSWhereInput
}

input TSWhereShopify_LocationSuggestedAddressInput {
  address1: TSWhereStringInput
  address2: TSWhereStringInput
  city: TSWhereStringInput
  country: TSWhereStringInput
  countryCode: TSWhereStringInput
  formatted: TSWhereShopify_ProductVariantFormattedInput
  province: TSWhereStringInput
  provinceCode: TSWhereStringInput
  zip: TSWhereStringInput
}

input TSWhereShopify_DeliveryLocationGroupZoneConnectionInput {
  edges: TSWhereShopify_DeliveryLocationGroupZoneEdgeInput
  nodes: TSWhereShopify_DeliveryLocationGroupZoneInput
  pageInfo: TSWhereShopify_PageInfoInput
}

input TSWhereShopify_DeliveryLocationGroupZoneEdgeInput {
  cursor: TSWhereStringInput
  node: TSWhereShopify_DeliveryLocationGroupZoneInput
}

input TSWhereShopify_DeliveryLocationGroupZoneInput {
  methodDefinitionCounts: TSWhereShopify_DeliveryMethodDefinitionCountsInput
  methodDefinitions: TSWhereShopify_DeliveryMethodDefinitionConnectionInput
  zone: TSWhereShopify_DeliveryZoneInput
}

input TSWhereShopify_DeliveryMethodDefinitionCountsInput {
  participantDefinitionsCount: TSWhereIntegerInput
  rateDefinitionsCount: TSWhereIntegerInput
}

input TSWhereShopify_DeliveryMethodDefinitionConnectionInput {
  edges: TSWhereShopify_DeliveryMethodDefinitionEdgeInput
  nodes: TSWhereShopify_DeliveryMethodDefinitionInput
  pageInfo: TSWhereShopify_PageInfoInput
}

input TSWhereShopify_DeliveryMethodDefinitionEdgeInput {
  cursor: TSWhereStringInput
  node: TSWhereShopify_DeliveryMethodDefinitionInput
}

input TSWhereShopify_DeliveryMethodDefinitionInput {
  active: TSWhereBooleanInput
  description: TSWhereStringInput
  id: TSWhereStringInput
  methodConditions: TSWhereShopify_DeliveryConditionInput
  name: TSWhereStringInput
  rateProvider: TSWhereShopify_DeliveryRateProviderInput
}

input TSWhereShopify_DeliveryConditionInput {
  conditionCriteria: TSWhereShopify_DeliveryConditionCriteriaInput
  field: TSWhereStringInput
  id: TSWhereStringInput
  operator: TSWhereStringInput
}

input TSWhereShopify_DeliveryConditionCriteriaInput {
  amount: TSWhereInput
  currencyCode: TSWhereStringInput
  unit: TSWhereStringInput
  value: TSWhereNumberInput
}

input TSWhereShopify_DeliveryRateProviderInput {
  adaptToNewServicesFlag: TSWhereBooleanInput
  carrierService: TSWhereShopify_DeliveryCarrierServiceInput
  fixedFee: TSWhereShopify_MoneyV2Input
  id: TSWhereStringInput
  participantServices: TSWhereShopify_DeliveryParticipantServiceInput
  percentageOfRateFee: TSWhereNumberInput
  price: TSWhereShopify_MoneyV2Input
}

input TSWhereShopify_DeliveryCarrierServiceInput {
  availableServicesForCountries: TSWhereShopify_DeliveryAvailableServiceInput
  formattedName: TSWhereStringInput
  icon: TSWhereShopify_ImageInput
  id: TSWhereStringInput
  name: TSWhereStringInput
}

input TSWhereShopify_DeliveryAvailableServiceInput {
  countries: TSWhereShopify_DeliveryCountryCodesOrRestOfWorldInput
  name: TSWhereStringInput
}

input TSWhereShopify_DeliveryCountryCodesOrRestOfWorldInput {
  restOfWorld: TSWhereBooleanInput
}

input TSWhereShopify_DeliveryParticipantServiceInput {
  active: TSWhereBooleanInput
  name: TSWhereStringInput
}

input TSWhereShopify_DeliveryZoneInput {
  countries: TSWhereShopify_DeliveryCountryInput
  id: TSWhereStringInput
  name: TSWhereStringInput
}

input TSWhereShopify_ProductVariantPricePairConnectionInput {
  edges: TSWhereShopify_ProductVariantPricePairEdgeInput
  nodes: TSWhereShopify_ProductVariantPricePairInput
  pageInfo: TSWhereShopify_PageInfoInput
}

input TSWhereShopify_ProductVariantPricePairEdgeInput {
  cursor: TSWhereStringInput
  node: TSWhereShopify_ProductVariantPricePairInput
}

input TSWhereShopify_ProductVariantPricePairInput {
  compareAtPrice: TSWhereShopify_MoneyV2Input
  price: TSWhereShopify_MoneyV2Input
}

input TSWhereShopify_SelectedOptionInput {
  name: TSWhereStringInput
  value: TSWhereStringInput
}

input TSWhereShopify_SellingPlanConnectionInput {
  edges: TSWhereShopify_SellingPlanEdgeInput
  nodes: TSWhereShopify_SellingPlanInput
  pageInfo: TSWhereShopify_PageInfoInput
}

input TSWhereShopify_SellingPlanEdgeInput {
  cursor: TSWhereStringInput
  node: TSWhereShopify_SellingPlanInput
}

input TSWhereShopify_SellingPlanInput {
  billingPolicy: TSWhereShopify_SellingPlanBillingPolicyInput
  category: TSWhereStringInput
  createdAt: TSWhereInput
  deliveryPolicy: TSWhereShopify_SellingPlanDeliveryPolicyInput
  description: TSWhereStringInput
  id: TSWhereStringInput
  inventoryPolicy: TSWhereShopify_SellingPlanInventoryPolicyInput
  name: TSWhereStringInput
  options: TSWhereShopify_ProductOptionsInput
  position: TSWhereIntegerInput
  pricingPolicies: TSWhereShopify_SellingPlanPricingPolicyInput
}

input TSWhereShopify_SellingPlanBillingPolicyInput {
  checkoutCharge: TSWhereShopify_SellingPlanCheckoutChargeInput
  remainingBalanceChargeExactTime: TSWhereInput
  remainingBalanceChargeTimeAfterCheckout: TSWhereStringInput
  remainingBalanceChargeTrigger: TSWhereStringInput
  anchors: TSWhereShopify_SellingPlanAnchorInput
  createdAt: TSWhereInput
  interval: TSWhereStringInput
  intervalCount: TSWhereIntegerInput
  maxCycles: TSWhereIntegerInput
  minCycles: TSWhereIntegerInput
}

input TSWhereShopify_SellingPlanCheckoutChargeInput {
  type: TSWhereStringInput
  value: TSWhereShopify_SellingPlanCheckoutChargeValueInput
}

input TSWhereShopify_SellingPlanCheckoutChargeValueInput {
  amount: TSWhereInput
  currencyCode: TSWhereStringInput
  percentage: TSWhereNumberInput
}

input TSWhereShopify_SellingPlanAnchorInput {
  cutoffDay: TSWhereIntegerInput
  day: TSWhereIntegerInput
  month: TSWhereIntegerInput
  type: TSWhereStringInput
}

input TSWhereShopify_SellingPlanDeliveryPolicyInput {
  anchors: TSWhereShopify_SellingPlanAnchorInput
  cutoff: TSWhereIntegerInput
  fulfillmentExactTime: TSWhereInput
  fulfillmentTrigger: TSWhereStringInput
  intent: TSWhereStringInput
  preAnchorBehavior: TSWhereStringInput
  createdAt: TSWhereInput
  interval: TSWhereStringInput
  intervalCount: TSWhereIntegerInput
}

input TSWhereShopify_SellingPlanInventoryPolicyInput {
  reserve: TSWhereStringInput
}

input TSWhereShopify_SellingPlanPricingPolicyInput {
  adjustmentType: TSWhereStringInput
  adjustmentValue: TSWhereShopify_SellingPlanPricingPolicyAdjustmentValueInput
  createdAt: TSWhereInput
  afterCycle: TSWhereIntegerInput
}

input TSWhereShopify_SellingPlanPricingPolicyAdjustmentValueInput {
  amount: TSWhereInput
  currencyCode: TSWhereStringInput
  percentage: TSWhereNumberInput
}

input TSWhereShopify_SEOInput {
  description: TSWhereStringInput
  title: TSWhereStringInput
}

input TSWhereShopify_StandardizedProductTypeInput {
  productTaxonomyNode: TSWhereShopify_ProductTaxonomyNodeInput
}

input TSWhereShopify_ProductTaxonomyNodeInput {
  fullName: TSWhereStringInput
  id: TSWhereStringInput
  isLeaf: TSWhereBooleanInput
  isRoot: TSWhereBooleanInput
  name: TSWhereStringInput
}

input TSWhereShopify_ProductTagsInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereReviewsIo_ListProductReviewsResponseInput {
  write_review_link: TSWhereStringInput
  word: TSWhereStringInput
  stats: TSWhereShopify_ProductStatsInput
  store: TSWhereShopify_ProductStoreInput
  reviews: TSWhereShopify_ProductReviewsInput
  products: TSWhereShopify_ProductProductsInput
}

input TSWhereShopify_ProductStatsInput {
  average: TSWhereNumberInput
  count: TSWhereIntegerInput
}

input TSWhereShopify_ProductStoreInput {
  name: TSWhereStringInput
  logo: TSWhereStringInput
}

input TSWhereShopify_ProductReviewsInput {
  total: TSWhereIntegerInput
  per_page: TSWhereIntegerInput
  current_page: TSWhereIntegerInput
  last_page: TSWhereIntegerInput
  from: TSWhereIntegerInput
  to: TSWhereIntegerInput
  data: TSWhereReviewsIo_ProductReviewInput
}

input TSWhereReviewsIo_ProductReviewInput {
  product_review_id: TSWhereIntegerInput
  product_make: TSWhereStringInput
  order_id: TSWhereStringInput
  name: TSWhereStringInput
  sku: TSWhereStringInput
  review: TSWhereStringInput
  title: TSWhereStringInput
  rating: TSWhereIntegerInput
  date_created: TSWhereStringInput
  votes: TSWhereStringInput
  flags: TSWhereStringInput
  timeago: TSWhereStringInput
  date_formatted: TSWhereStringInput
  product: TSWhereReviewsIo_ProductInput
  reviewer: TSWhereReviewsIo_ReviewerInput
  tags: TSWhereShopify_ProductTagsInput
  author: TSWhereShopify_ProductAuthorInput
}

input TSWhereReviewsIo_ProductInput {
  sku: TSWhereStringInput
  name: TSWhereStringInput
  description: TSWhereStringInput
  image_url: TSWhereStringInput
  link: TSWhereStringInput
  mpn: TSWhereStringInput
  gtin: TSWhereStringInput
  brand: TSWhereStringInput
  category: TSWhereStringInput
  custom: TSWhereStringInput
  pageUrl: TSWhereStringInput
}

input TSWhereReviewsIo_ReviewerInput {
  user_id: TSWhereIntegerInput
  first_name: TSWhereStringInput
  last_name: TSWhereStringInput
  verified_buyer: TSWhereInput
  address: TSWhereStringInput
  profile_picture: TSWhereStringInput
  gravatar: TSWhereStringInput
  email: TSWhereStringInput
  name_formatted: TSWhereStringInput
}

input TSWhereShopify_ProductAuthorInput {
  email: TSWhereStringInput
}

input TSWhereShopify_ProductProductsInput {
  sku: TSWhereStringInput
  name: TSWhereStringInput
}

input TSWhereTrustpilotProductReviewsInput {
  productReviews: TSWhereShopify_ProductProductReviewsInput
  links: TSWhereTrustpilotLinkInput
}

input TSWhereShopify_ProductProductReviewsInput {
  id: TSWhereStringInput
  createdAt: TSWhereStringInput
  stars: TSWhereIntegerInput
  content: TSWhereStringInput
  consumer: TSWhereShopify_ProductConsumerInput
  language: TSWhereStringInput
  attributeRatings: TSWhereTrustpilotAttributeRatingInput
  attachments: TSWhereTrustpilotAttachmentInput
}

input TSWhereShopify_ProductConsumerInput {
  id: TSWhereStringInput
  displayName: TSWhereStringInput
}

input TSWhereTrustpilotAttributeRatingInput {
  attributeId: TSWhereStringInput
  attributeName: TSWhereStringInput
  rating: TSWhereIntegerInput
}

input TSWhereTrustpilotAttachmentInput {
  id: TSWhereStringInput
  state: TSWhereStringInput
  processedFiles: TSWhereTrustpilotAttachmentProcessedFilesInput
}

input TSWhereTrustpilotAttachmentProcessedFilesInput {
  dimension: TSWhereStringInput
  mimeType: TSWhereStringInput
  url: TSWhereStringInput
}

input TSWhereTrustpilotLinkInput {
  href: TSWhereStringInput
  method: TSWhereStringInput
  rel: TSWhereStringInput
}

input TSWhereTrustpilotProductReviewsSummaryInput {
  starsAverage: TSWhereNumberInput
  numberOfReviews: TSWhereShopify_ProductNumberOfReviewsInput
  links: TSWhereTrustpilotLinkInput
}

input TSWhereShopify_ProductNumberOfReviewsInput {
  total: TSWhereIntegerInput
  oneStar: TSWhereIntegerInput
  twoStars: TSWhereIntegerInput
  threeStars: TSWhereIntegerInput
  fourStars: TSWhereIntegerInput
  fiveStars: TSWhereIntegerInput
}

input TSWhereShopify_PublishableInput {
  publishedOnChannel: TSWhereBooleanInput
  publishedOnPublication: TSWhereBooleanInput
}

input TSWhereShopify_FailedRequirementInput {
  action: TSWhereShopify_NavigationItemInput
  message: TSWhereStringInput
}

input TSWhereShopify_ProductFeaturesInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereShopify_AppInstallationInput {
  accessScopes: TSWhereShopify_AccessScopeInput
  activeSubscriptions: TSWhereShopify_AppSubscriptionInput
  allSubscriptions: TSWhereShopify_AppSubscriptionConnectionInput
  app: TSWhereShopify_AppInput
  channel: TSWhereShopify_ChannelInput
  credits: TSWhereShopify_AppCreditConnectionInput
  id: TSWhereStringInput
  launchUrl: TSWhereInput
  metafield: TSWhereShopify_MetafieldInput
  metafields: TSWhereShopify_MetafieldConnectionInput
  oneTimePurchases: TSWhereShopify_AppPurchaseOneTimeConnectionInput
  privateMetafield: TSWhereShopify_PrivateMetafieldInput
  privateMetafields: TSWhereShopify_PrivateMetafieldConnectionInput
  publication: TSWhereShopify_PublicationInput
  revenueAttributionRecords: TSWhereShopify_AppRevenueAttributionRecordConnectionInput
  subscriptions: TSWhereShopify_AppSubscriptionInput
  uninstallUrl: TSWhereInput
}

input TSWhereShopify_AppSubscriptionInput {
  createdAt: TSWhereInput
  currentPeriodEnd: TSWhereInput
  id: TSWhereStringInput
  lineItems: TSWhereShopify_AppSubscriptionLineItemInput
  name: TSWhereStringInput
  returnUrl: TSWhereInput
  status: TSWhereStringInput
  test: TSWhereBooleanInput
  trialDays: TSWhereIntegerInput
}

input TSWhereShopify_AppSubscriptionLineItemInput {
  id: TSWhereStringInput
  plan: TSWhereShopify_AppPlanV2Input
  usageRecords: TSWhereShopify_AppUsageRecordConnectionInput
}

input TSWhereShopify_AppPlanV2Input {
  pricingDetails: TSWhereShopify_AppPricingDetailsInput
}

input TSWhereShopify_AppPricingDetailsInput {
  discount: TSWhereShopify_AppSubscriptionDiscountInput
  interval: TSWhereStringInput
  price: TSWhereShopify_MoneyV2Input
  balanceUsed: TSWhereShopify_MoneyV2Input
  cappedAmount: TSWhereShopify_MoneyV2Input
  terms: TSWhereStringInput
}

input TSWhereShopify_AppSubscriptionDiscountInput {
  durationLimitInIntervals: TSWhereIntegerInput
  priceAfterDiscount: TSWhereShopify_MoneyV2Input
  remainingDurationInIntervals: TSWhereIntegerInput
  value: TSWhereShopify_AppSubscriptionDiscountValueInput
}

input TSWhereShopify_AppSubscriptionDiscountValueInput {
  amount: TSWhereShopify_MoneyV2Input
  percentage: TSWhereNumberInput
}

input TSWhereShopify_AppUsageRecordConnectionInput {
  edges: TSWhereShopify_AppUsageRecordEdgeInput
  nodes: TSWhereShopify_AppUsageRecordInput
  pageInfo: TSWhereShopify_PageInfoInput
}

input TSWhereShopify_AppUsageRecordEdgeInput {
  cursor: TSWhereStringInput
  node: TSWhereShopify_AppUsageRecordInput
}

input TSWhereShopify_AppUsageRecordInput {
  createdAt: TSWhereInput
  description: TSWhereStringInput
  id: TSWhereStringInput
  price: TSWhereShopify_MoneyV2Input
  subscriptionLineItem: TSWhereShopify_AppSubscriptionLineItemInput
}

input TSWhereShopify_AppSubscriptionConnectionInput {
  edges: TSWhereShopify_AppSubscriptionEdgeInput
  nodes: TSWhereShopify_AppSubscriptionInput
  pageInfo: TSWhereShopify_PageInfoInput
}

input TSWhereShopify_AppSubscriptionEdgeInput {
  cursor: TSWhereStringInput
  node: TSWhereShopify_AppSubscriptionInput
}

input TSWhereShopify_AppCreditConnectionInput {
  edges: TSWhereShopify_AppCreditEdgeInput
  nodes: TSWhereShopify_AppCreditInput
  pageInfo: TSWhereShopify_PageInfoInput
}

input TSWhereShopify_AppCreditEdgeInput {
  cursor: TSWhereStringInput
  node: TSWhereShopify_AppCreditInput
}

input TSWhereShopify_AppCreditInput {
  amount: TSWhereShopify_MoneyV2Input
  createdAt: TSWhereInput
  description: TSWhereStringInput
  id: TSWhereStringInput
  test: TSWhereBooleanInput
}

input TSWhereShopify_AppPurchaseOneTimeConnectionInput {
  edges: TSWhereShopify_AppPurchaseOneTimeEdgeInput
  nodes: TSWhereShopify_AppPurchaseOneTimeInput
  pageInfo: TSWhereShopify_PageInfoInput
}

input TSWhereShopify_AppPurchaseOneTimeEdgeInput {
  cursor: TSWhereStringInput
  node: TSWhereShopify_AppPurchaseOneTimeInput
}

input TSWhereShopify_AppPurchaseOneTimeInput {
  createdAt: TSWhereInput
  id: TSWhereStringInput
  name: TSWhereStringInput
  price: TSWhereShopify_MoneyV2Input
  status: TSWhereStringInput
  test: TSWhereBooleanInput
}

input TSWhereShopify_AppRevenueAttributionRecordConnectionInput {
  edges: TSWhereShopify_AppRevenueAttributionRecordEdgeInput
  nodes: TSWhereShopify_AppRevenueAttributionRecordInput
  pageInfo: TSWhereShopify_PageInfoInput
}

input TSWhereShopify_AppRevenueAttributionRecordEdgeInput {
  cursor: TSWhereStringInput
  node: TSWhereShopify_AppRevenueAttributionRecordInput
}

input TSWhereShopify_AppRevenueAttributionRecordInput {
  amount: TSWhereShopify_MoneyV2Input
  capturedAt: TSWhereInput
  createdAt: TSWhereInput
  id: TSWhereStringInput
  idempotencyKey: TSWhereStringInput
  test: TSWhereBooleanInput
  type: TSWhereStringInput
}

input TSWhereShopify_LinkInput {
  label: TSWhereStringInput
  translations: TSWhereShopify_PublishedTranslationInput
  url: TSWhereInput
}

input TSWhereShopify_UserErrorInput {
  field: TSWhereShopify_ProductFieldInput
  message: TSWhereStringInput
}

input TSWhereShopify_ProductFieldInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereShopify_CollectionRuleSetInput {
  appliedDisjunctively: TSWhereBooleanInput
  rules: TSWhereShopify_CollectionRuleInput
}

input TSWhereShopify_CollectionRuleInput {
  column: TSWhereStringInput
  condition: TSWhereStringInput
  relation: TSWhereStringInput
}

input TSWhereFooterNavigationInput {
  sections: TSWhereFooterNavigationSectionsInput
}

input TSWhereFooterNavigationSectionsInput {
  name: TSWhereStringInput
  links: TSWhereCollectionLinkPageProductRelationshipInput
}

input TSWhereCollectionLinkPageProductRelationshipInput {
  name: TSWhereStringInput
  href: TSWhereStringInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
  productComponent: TSWhereStringInput
  hideBreadcrumbs: TSWhereBooleanInput
  hideRelatedProducts: TSWhereBooleanInput
  hideReviews: TSWhereBooleanInput
  showPolicies: TSWhereBooleanInput
  showDetails: TSWhereBooleanInput
  shopifyProductId: TSWhereStringInput
  breadcrumbTitle: TSWhereStringInput
  shopifyCollectionId: TSWhereStringInput
  title: TSWhereStringInput
  slug: TSWhereStringInput
  sections: TSShallowWherePageSectionsInput
}

input TSShallowWherePageSectionsInput {
  label: TSWhereStringInput
  heading: TSWhereStringInput
  subheading: TSWhereStringInput
  content: TSWhereMdxInput
}

input TSWhereFooterNewsletterInput {
  text: TSWhereTextInput
}

input TSWhereTextInput {
  primary: TSWhereStringInput
  secondary: TSWhereStringInput
  button: TSWhereStringInput
}

input TSWhereStorefrontComponentsInput {
  offers: TSWhereOffersComponentOffersInput
  primaryText: TSWhereStringInput
  secondaryText: TSWhereStringInput
  buttonText: TSWhereStringInput
  image: TSWhereAssetRelationshipInput
  collections: TSWhereCollectionsComponentCollectionsInput
  components: TSWhereBackgroundImageComponentComponentsInput
  testimonials: TSWhereTestimonialsComponentTestimonialsInput
  trendingProducts: TSWhereTrendingProductsComponentTrendingProductsInput
  collection: TSWhereCollectionRelationshipInput
}

input TSWhereOffersComponentOffersInput {
  name: TSWhereStringInput
  description: TSWhereStringInput
  href: TSWhereStringInput
}

input TSWhereCollectionsComponentCollectionsInput {
  name: TSWhereStringInput
  description: TSWhereStringInput
  href: TSWhereStringInput
  image: TSWhereAssetRelationshipInput
}

input TSWhereBackgroundImageComponentComponentsInput {
  collections: TSWhereCollectionsComponentCollectionsInput
  primaryText: TSWhereStringInput
  secondaryText: TSWhereStringInput
  buttonText: TSWhereStringInput
  testimonials: TSWhereTestimonialsComponentTestimonialsInput
  offers: TSWhereOffersComponentOffersInput
  image: TSWhereAssetRelationshipInput
  components: TSWhereBackgroundImageComponentComponentsInput
}

input TSWhereTestimonialsComponentTestimonialsInput {
  quote: TSWhereStringInput
  attribution: TSWhereStringInput
}

input TSWhereTrendingProductsComponentTrendingProductsInput {
  shopifyProductId: TSWhereStringInput
}

"""This query allow you to pass context to your queries"""
type WithContext {
  taxonomySuggest(
    shapeNames: [String]
    shapeIds: [String]
    contentTypeNames: [String]
    contentTypeIds: [String]
    terms: String
    locale: String
    enableLocaleFallback: Boolean = true

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): TSSuggestionPaginatedList

  """List Versions for a piece of content"""
  getContentVersion(id: ID!, version: Int!, locale: String, enableLocaleFallback: Boolean = true): TSVersionResponse

  """List Versions for a piece of content"""
  getContentVersionList(id: ID!, from: Int, size: Int): TSVersionsPaginatedList

  """Get a Asset by ID"""
  getAsset(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Asset

  """Returns a list Asset in natural order."""
  getAssetList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereAssetInput
  ): AssetPaginatedList

  """Get a TsStaticSite by ID"""
  getTsStaticSite(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): TsStaticSite

  """Returns a list TsStaticSite in natural order."""
  getTsStaticSiteList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereTsStaticSiteInput
  ): TsStaticSitePaginatedList

  """Returns a pageable list of all customers."""
  getMyLoyaltyLionCustomer(email: String, since_id: String, limit: Int, created_at_min: String, created_at_max: String, updated_at_min: String, updated_at_max: String): Loyal_Customer
  Recharge_getMySubscriptions: [Recharge_Subscription!]
  Recharge_getMySubscription(id: String!): Recharge_Subscription
  Recharge_getMyPaymentMethods: [Recharge_PaymentMethod!]
  Recharge_getMyAddressPaymentMethods(addressId: String!): [Recharge_PaymentMethod!]
  ReviewsIo_listProductReviews(sku: String, mpn: String, page: Int, per_page: Int, photos: Int, verified_only: Int, comments_only: Int, minRating: Int, include_unpublished_images: Int, include_moderated: Int, order_id: String, min_date: String, max_date: String): ReviewsIo_ListProductReviewsResponse

  """Get a loyalty card from Voucherify"""
  getMyLoyaltyCard: Voucherify_LoyaltyCard
  getMyNewsletterSubscriptions: [ProfileNewsletterStatus!]

  """Get a Footer by ID"""
  getFooter(locale: String, enableLocaleFallback: Boolean = true): Footer
  Shopify_productVariants(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductVariantSortKeys = ID

    """
    Supported filter parameters:
     - `barcode`
     - `collection`
     - `delivery_profile_id`
     - `exclude_composite`
     - `gift_card`
     - `inventory_quantity`
     - `location_id`
     - `managed`
     - `managed_by`
     - `product_id`
     - `product_status`
     - `product_type`
     - `publishable_status`
     - `published_status`
     - `sku`
     - `tag`
     - `tag_not`
     - `taxable`
     - `title`
     - `updated_at`
     - `vendor`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_ProductVariantConnection
  Shopify_products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductSortKeys = ID

    """
    Supported filter parameters:
     - `barcode`
     - `created_at`
     - `delivery_profile_id`
     - `error_feedback`
     - `gift_card`
     - `has_only_composites`
     - `has_only_default_variant`
     - `id`
     - `inventory_total`
     - `is_price_reduced`
     - `out_of_stock_somewhere`
     - `price`
     - `product_type`
     - `publishable_status`
     - `published_status`
     - `sku`
     - `status`
     - `tag`
     - `tag_not`
     - `title`
     - `updated_at`
     - `vendor`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_ProductConnection
  productsWithTtl(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductSortKeys = ID

    """
    Supported filter parameters:
     - `barcode`
     - `created_at`
     - `delivery_profile_id`
     - `error_feedback`
     - `gift_card`
     - `has_only_composites`
     - `has_only_default_variant`
     - `id`
     - `inventory_total`
     - `is_price_reduced`
     - `out_of_stock_somewhere`
     - `price`
     - `product_type`
     - `publishable_status`
     - `published_status`
     - `sku`
     - `status`
     - `tag`
     - `tag_not`
     - `title`
     - `updated_at`
     - `vendor`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_ProductConnection
  Shopify_product(
    """The ID of the Product to return."""
    id: ID!
  ): Shopify_Product
  productWithTtl(
    """The ID of the Product to return."""
    id: ID!
  ): Shopify_Product
  variantWithTtl(
    """The ID of the ProductVariant to return."""
    id: ID!
  ): Shopify_ProductVariant
  Shopify_customer(
    """The ID of the Customer to return."""
    id: ID!
  ): Shopify_Customer
  Shopify_customerPaymentMethod(
    """The ID of the CustomerPaymentMethod to return."""
    id: ID!

    """Whether to show the customer's revoked payment method."""
    showRevoked: Boolean = false
  ): Shopify_CustomerPaymentMethod
  ShopifyStorefront_customer(
    """The customer access token."""
    customerAccessToken: String!
  ): ShopifyStorefront_Customer
  getMyCustomer: ShopifyStorefront_Customer
  getMyAdminCustomer: Shopify_Customer

  """Get a Storefront by ID"""
  getStorefront(locale: String, enableLocaleFallback: Boolean = true): Storefront
  Shopify_collectionByHandle(
    """The handle of the collection."""
    handle: String!
  ): Shopify_Collection
  collectionByHandleWithTtl(
    """The handle of the collection."""
    handle: String!
  ): Shopify_Collection
  Shopify_collections(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_CollectionSortKeys = ID

    """
    Supported filter parameters:
     - `collection_type`
     - `publishable_status`
     - `published_status`
     - `title`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_CollectionConnection
  collectionsWithTtl(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_CollectionSortKeys = ID

    """
    Supported filter parameters:
     - `collection_type`
     - `publishable_status`
     - `published_status`
     - `title`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_CollectionConnection

  """Get a ProductPageDetails by ID"""
  getProductPageDetails(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): ProductPageDetails

  """Returns a list ProductPageDetails in natural order."""
  getProductPageDetailsList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProductPageDetailsInput
  ): ProductPageDetailsPaginatedList

  """Get a ProductPagePolicies by ID"""
  getProductPagePolicies(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): ProductPagePolicies

  """Returns a list ProductPagePolicies in natural order."""
  getProductPagePoliciesList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProductPagePoliciesInput
  ): ProductPagePoliciesPaginatedList
  Shopify_collection(
    """The ID of the Collection to return."""
    id: ID!
  ): Shopify_Collection

  """Get a Product by ID"""
  getProduct(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Product

  """Returns a list Product in natural order."""
  getProductList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProductInput
  ): ProductPaginatedList

  """Returns a list Product in natural order."""
  getProductListWithTtl(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProductInput
  ): ProductPaginatedList

  """Get a Navigation by ID"""
  getNavigation(locale: String, enableLocaleFallback: Boolean = true): Navigation

  """Get a Collection by ID"""
  getCollection(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Collection

  """Returns a list Collection in natural order."""
  getCollectionList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereCollectionInput
  ): CollectionPaginatedList

  """Returns a list Collection in natural order."""
  getCollectionListWithTtl(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereCollectionInput
  ): CollectionPaginatedList

  """Get a Page by ID"""
  getPage(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Page

  """Returns a list Page in natural order."""
  getPageList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWherePageInput
  ): PagePaginatedList
  Shopify_productByHandle(
    """The handle of the product."""
    handle: String!
  ): Shopify_Product
  productByHandleWithTtl(
    """The handle of the product."""
    handle: String!
  ): Shopify_Product
  Shopify_shop: Shopify_Shop
  ShopifyStorefront_productTypes(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): ShopifyStorefront_StringConnection

  """Get a Link by ID"""
  getLink(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Link

  """Returns a list Link in natural order."""
  getLinkList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereLinkInput
  ): LinkPaginatedList
  ShopifyStorefront_productRecommendations(
    """The id of the product."""
    productId: ID!
  ): [ShopifyStorefront_Product!]
  ShopifyStorefront_products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ShopifyStorefront_ProductSortKeys = ID

    """
    Supported filter parameters:
     - `available_for_sale`
     - `created_at`
     - `product_type`
     - `tag`
     - `tag_not`
     - `title`
     - `updated_at`
     - `variants.price`
     - `vendor`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): ShopifyStorefront_ProductConnection
  ShopifyStorefront_productByHandle(
    """The handle of the product."""
    handle: String!
  ): ShopifyStorefront_Product

  """Get a LineItemAttributes by ID"""
  getLineItemAttributes(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): LineItemAttributes

  """Returns a list LineItemAttributes in natural order."""
  getLineItemAttributesList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereLineItemAttributesInput
  ): LineItemAttributesPaginatedList
  Shopify_customers(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_CustomerSortKeys = ID

    """
    Supported filter parameters:
     - `accepts_marketing`
     - `country`
     - `customer_date`
     - `email`
     - `last_abandoned_order_date`
     - `order_date`
     - `orders_count`
     - `phone`
     - `state`
     - `tag`
     - `tag_not`
     - `total_spent`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_CustomerConnection
  Shopify_deliveryProfiles(
    """
    If `true`, returns only delivery profiles that were created by the merchant.
    """
    merchantOwnedOnly: Boolean

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_DeliveryProfileConnection
  Trustpilot_listProductReviews(
    """
    The page to retrieve. If the page number requested is higher than the available number of pages an empty array will be returned.
    Constraints: The allowed range is minimum: 1, maximum: 2147483647
    Default value: 1
    """
    page: Int

    """
    The number of reviews to retrieve per page.
    Constraints: The allowed range is minimum: 1, maximum: 100
    Default value: 20
    """
    perPage: Int

    """The url of the product. Optional only if sku is provided."""
    productUrl: [String]

    """The sku of the product. Optional only if productUrl is provided."""
    sku: [String]

    """Filter reviews by language."""
    language: String

    """
    Filter reviews with a specific number of stars.
    Constraints: Allowed values are 1, 2, 3, 4, 5
    """
    stars: [Int]

    """
    The language in which the attributes, if any, are returned
    Default value: en-US
    """
    locale: String

    """A comma-separated list of attribute ids"""
    attributeIds: [String]
  ): TrustpilotProductReviews
  Trustpilot_getProductReviewsSummary(
    """The sku of the product. Optional only if productUrl is provided."""
    sku: [String]
  ): TrustpilotProductReviewsSummary
  Shopify_app(
    """The ID to lookup the App by."""
    id: ID
  ): Shopify_App
  Shopify_appInstallation(
    """ID used to lookup AppInstallation."""
    id: ID
  ): Shopify_AppInstallation
  Shopify_appInstallations(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_AppInstallationSortKeys = INSTALLED_AT

    """The category of app installations to fetch."""
    category: Shopify_AppInstallationCategory

    """The privacy level of app installations to fetch."""
    privacy: Shopify_AppInstallationPrivacy = PUBLIC
  ): Shopify_AppInstallationConnection
  Shopify_order(
    """The ID of the Order to return."""
    id: ID!
  ): Shopify_Order
  ShopifyStorefront_product(
    """The ID of the `Product`."""
    id: ID

    """The handle of the `Product`."""
    handle: String
  ): ShopifyStorefront_Product
  searchAssetIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereAssetInput
  ): AssetSearchResults
  searchTsStaticSiteIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereTsStaticSiteInput
  ): TsStaticSiteSearchResults
  searchProductPageDetailsIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProductPageDetailsInput
  ): ProductPageDetailsSearchResults
  searchProductPagePoliciesIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProductPagePoliciesInput
  ): ProductPagePoliciesSearchResults
  searchProductIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProductInput
  ): ProductSearchResults
  searchCollectionIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereCollectionInput
  ): CollectionSearchResults
  searchPageIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWherePageInput
  ): PageSearchResults
  searchLinkIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereLinkInput
  ): LinkSearchResults
  searchLineItemAttributesIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereLineItemAttributesInput
  ): LineItemAttributesSearchResults
  search(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true
    shapeNames: [String]
    shapeIds: [String]
    contentTypeNames: [String]
    contentTypeIds: [String]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereInput
  ): TSSearchableSearchResults
}

type Mutation {
  """Initiate upload process for asset(s)"""
  uploadAssets(projectId: ID, files: [TSFile]!): [Upload]

  """Replace an asset file"""
  replaceAsset(projectId: ID, _id: ID!, _version: Int!, file: TSFile!): Upload

  """Update Asset"""
  updateAsset(input: UpdateAssetInput!, clientMutationId: String, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateAssetResult

  """Create Asset"""
  createAsset(input: CreateAssetInput!, clientMutationId: String): CreateAssetResult

  """Duplicate Asset"""
  duplicateAsset(input: DuplicateAssetInput!, clientMutationId: String, locale: String, enableLocaleFallback: Boolean = true): DuplicateAssetResult

  """Delete Asset"""
  deleteAsset(input: DeleteAssetInput!, clientMutationId: String): DeleteAssetResult

  """Update TsStaticSite"""
  updateTsStaticSite(input: UpdateTsStaticSiteInput!, clientMutationId: String, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateTsStaticSiteResult

  """Create TsStaticSite"""
  createTsStaticSite(input: CreateTsStaticSiteInput!, clientMutationId: String): CreateTsStaticSiteResult

  """Duplicate TsStaticSite"""
  duplicateTsStaticSite(input: DuplicateTsStaticSiteInput!, clientMutationId: String, locale: String, enableLocaleFallback: Boolean = true): DuplicateTsStaticSiteResult

  """Delete TsStaticSite"""
  deleteTsStaticSite(input: DeleteTsStaticSiteInput!, clientMutationId: String): DeleteTsStaticSiteResult

  """Create a Shopify storefront cart."""
  createMyCheckoutSession(lines: [CreateMyCheckoutSessionPropertiesLinesItemsPropertyInput!]!): ShopifyStorefront_Cart

  """Create a Shopify storefront cart."""
  createMyCheckout(email: String, lines: [CreateMyCheckoutPropertiesLinesItemsPropertyInput!]!): ShopifyStorefront_Cart
  subscribeMyEmailToNewsletter(list_id: String!): Klaviyo_AddMembersResponse
  unsubscribeMyEmailFromNewsletter(list_id: String!): Klaviyo_200Ok

  """Create an order in Voucherify"""
  Voucherify_createOrder(email: String, amount: Float, status: String, items: [Voucherify_OrderItemInput]): Voucherify_Order
  addMembers(input: AddListMembersInput, list_id: String!, recaptchaToken: String!): Klaviyo_AddMembersResponse
  Klaviyo_removeMembers(
    """
    
    The profiles that you would like to remove from the list. 
    
    Example:
    
    {
      "emails":["george.washington@klaviyo.com","abraham.lincoln@klaviyo.com"],
      "phone_numbers":["+13239169023"],
      "push_tokens":["03df25c845d460bcdad7802d2vf6fc1dfde97283bf75cc993eb6dca835ea2e2r"]
    }
    
    """
    input: Klaviyo_RemoveMembersPropertiesPropertyInput
    list_id: String!
  ): Klaviyo_200Ok
  ReviewsIo_createInvitation(input: ReviewsIo_CreateInvitationPropertiesPropertyInput): ReviewsIo_CreateInvitationResponse

  """Update Footer"""
  updateFooter(input: UpdateFooterInput!, clientMutationId: String, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateFooterResult
  ShopifyStorefront_cartCreate(
    """The fields used to create a cart."""
    input: ShopifyStorefront_CartInput
  ): ShopifyStorefront_CartCreatePayload
  createMyCart(
    """The fields used to create a cart."""
    input: ShopifyStorefront_CartInput
  ): ShopifyStorefront_CartCreatePayload
  createCart(
    """The fields used to create a cart."""
    input: ShopifyStorefront_CartInput
  ): ShopifyStorefront_CartCreatePayload
  ShopifyStorefront_customerAccessTokenCreate(
    """The fields used to create a customer access token."""
    input: ShopifyStorefront_CustomerAccessTokenCreateInput!
  ): ShopifyStorefront_CustomerAccessTokenCreatePayload
  ShopifyStorefront_customerCreate(
    """The fields used to create a new customer."""
    input: ShopifyStorefront_CustomerCreateInput!
  ): ShopifyStorefront_CustomerCreatePayload
  createCustomer(input: CreateCustomerPropertiesPropertyInput!): CreateCustomerPayload
  recoverCustomerAccount(
    """The email address of the customer to recover."""
    email: String!
    recaptchaToken: String!
  ): ShopifyStorefront_CustomerRecoverPayload
  ShopifyStorefront_customerUpdate(
    """The access token used to identify the customer."""
    customerAccessToken: String!

    """The customer object input."""
    customer: ShopifyStorefront_CustomerUpdateInput!
  ): ShopifyStorefront_CustomerUpdatePayload
  ShopifyStorefront_customerAddressUpdate(
    """The access token used to identify the customer."""
    customerAccessToken: String!

    """Specifies the customer address to update."""
    id: ID!

    """The customer’s mailing address."""
    address: ShopifyStorefront_MailingAddressInput!
  ): ShopifyStorefront_CustomerAddressUpdatePayload
  updateMyCustomer(
    """The access token used to identify the customer."""
    customerAccessToken: String

    """The customer object input."""
    customer: ShopifyStorefront_CustomerUpdateInput!
  ): ShopifyStorefront_CustomerUpdatePayload
  updateMyCustomerAddress(
    """The access token used to identify the customer."""
    customerAccessToken: String

    """Specifies the customer address to update."""
    id: ID!

    """The customer’s mailing address."""
    address: ShopifyStorefront_MailingAddressInput!
  ): ShopifyStorefront_CustomerAddressUpdatePayload

  """DEPRECATED"""
  createTicket(email: String!, message: String!, recaptchaToken: String!): CreateTicketResponse

  """DEPRECATED"""
  createZendeskTicket(name: String!, email: String!, message: String!, recaptchaToken: String!): CreateTicketResponse
  Gorgias_createTicket(name: String!, email: String!, message: String!, recaptchaToken: String): CreateTicketResponse
  Zendesk_createTicket(name: String!, email: String!, message: String!, recaptchaToken: String): CreateTicketResponse

  """Update Storefront"""
  updateStorefront(input: UpdateStorefrontInput!, clientMutationId: String, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateStorefrontResult

  """Update ProductPageDetails"""
  updateProductPageDetails(input: UpdateProductPageDetailsInput!, clientMutationId: String, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateProductPageDetailsResult

  """Create ProductPageDetails"""
  createProductPageDetails(input: CreateProductPageDetailsInput!, clientMutationId: String): CreateProductPageDetailsResult

  """Duplicate ProductPageDetails"""
  duplicateProductPageDetails(input: DuplicateProductPageDetailsInput!, clientMutationId: String, locale: String, enableLocaleFallback: Boolean = true): DuplicateProductPageDetailsResult

  """Delete ProductPageDetails"""
  deleteProductPageDetails(input: DeleteProductPageDetailsInput!, clientMutationId: String): DeleteProductPageDetailsResult

  """Update ProductPagePolicies"""
  updateProductPagePolicies(input: UpdateProductPagePoliciesInput!, clientMutationId: String, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateProductPagePoliciesResult

  """Create ProductPagePolicies"""
  createProductPagePolicies(input: CreateProductPagePoliciesInput!, clientMutationId: String): CreateProductPagePoliciesResult

  """Duplicate ProductPagePolicies"""
  duplicateProductPagePolicies(input: DuplicateProductPagePoliciesInput!, clientMutationId: String, locale: String, enableLocaleFallback: Boolean = true): DuplicateProductPagePoliciesResult

  """Delete ProductPagePolicies"""
  deleteProductPagePolicies(input: DeleteProductPagePoliciesInput!, clientMutationId: String): DeleteProductPagePoliciesResult

  """
  Update Product. If the input has Shopify values and a Shopify ID, the Shopify product with that ID is updated.
  If the input has Shopify values and no Shopify ID, a Shopify product is created.
  """
  updateProduct(input: UpdateProductInterfaceInput!, clientMutationId: String, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateProductResult

  """
  Create Product. If Shopify values are provided, a Shopify product is also created and the new product ID is saved.
  """
  createProduct(input: CreateProductInterfaceInput!, clientMutationId: String): CreateProductResult

  """Duplicate Product"""
  duplicateProduct(input: DuplicateProductInput!, clientMutationId: String, locale: String, enableLocaleFallback: Boolean = true): DuplicateProductResult

  """Delete Product"""
  deleteProduct(input: DeleteProductInput!, clientMutationId: String): DeleteProductResult

  """Update Navigation"""
  updateNavigation(input: UpdateNavigationInput!, clientMutationId: String, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateNavigationResult

  """
  Update Collection. If the input has Shopify values and a Shopify ID, the Shopify collection with that ID is updated.
  If the input has Shopify values and no Shopify ID, a Shopify collection is created.
  """
  updateCollection(input: UpdateCollectionInterfaceInput!, clientMutationId: String, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateCollectionResult

  """
  Create Collection. If Shopify values are provided, a Shopify collection is also created and the new collection ID is saved.
  """
  createCollection(input: CreateCollectionInterfaceInput!, clientMutationId: String): CreateCollectionResult

  """Duplicate Collection"""
  duplicateCollection(input: DuplicateCollectionInput!, clientMutationId: String, locale: String, enableLocaleFallback: Boolean = true): DuplicateCollectionResult

  """Delete Collection"""
  deleteCollection(input: DeleteCollectionInput!, clientMutationId: String): DeleteCollectionResult

  """Update Page"""
  updatePage(input: UpdatePageInput!, clientMutationId: String, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdatePageResult

  """Create Page"""
  createPage(input: CreatePageInput!, clientMutationId: String): CreatePageResult

  """Duplicate Page"""
  duplicatePage(input: DuplicatePageInput!, clientMutationId: String, locale: String, enableLocaleFallback: Boolean = true): DuplicatePageResult

  """Delete Page"""
  deletePage(input: DeletePageInput!, clientMutationId: String): DeletePageResult
  createMyProductReview(input: CreateMyProductReviewPropertiesPropertyInput): CreateMyProductReviewResponse

  """Update Link"""
  updateLink(input: UpdateLinkInput!, clientMutationId: String, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateLinkResult

  """Create Link"""
  createLink(input: CreateLinkInput!, clientMutationId: String): CreateLinkResult

  """Duplicate Link"""
  duplicateLink(input: DuplicateLinkInput!, clientMutationId: String, locale: String, enableLocaleFallback: Boolean = true): DuplicateLinkResult

  """Delete Link"""
  deleteLink(input: DeleteLinkInput!, clientMutationId: String): DeleteLinkResult

  """Update LineItemAttributes"""
  updateLineItemAttributes(input: UpdateLineItemAttributesInput!, clientMutationId: String, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateLineItemAttributesResult

  """Create LineItemAttributes"""
  createLineItemAttributes(input: CreateLineItemAttributesInput!, clientMutationId: String): CreateLineItemAttributesResult

  """Duplicate LineItemAttributes"""
  duplicateLineItemAttributes(input: DuplicateLineItemAttributesInput!, clientMutationId: String, locale: String, enableLocaleFallback: Boolean = true): DuplicateLineItemAttributesResult

  """Delete LineItemAttributes"""
  deleteLineItemAttributes(input: DeleteLineItemAttributesInput!, clientMutationId: String): DeleteLineItemAttributesResult
  ShopifyStorefront_customerAccessTokenCreateWithMultipass(
    """A valid multipass token to be authenticated."""
    multipassToken: String!
  ): ShopifyStorefront_CustomerAccessTokenCreateWithMultipassPayload
  Shopify_customerUpdate(
    """Provides updated fields for the customer."""
    input: Shopify_CustomerInput!
  ): Shopify_CustomerUpdatePayload
  Recharge_sendMyUpdatePaymentEmail(paymentMethodId: String!): Recharge_CreateNotificationResponse
  Recharge_skipMyCharge(chargeId: String, subscriptionId: String): Recharge_Charge
  Recharge_unskipMyCharge(chargeId: String, subscriptionId: String): Recharge_Charge
  Recharge_createOnetime(addressId: String!, productId: String!, variantId: String!, quantity: Int!): Recharge_Onetime
  Recharge_setMyNextChargeDate(subscriptionId: String!, date: String!): Recharge_Subscription
  Recharge_cancelMySubscription(id: String!): Recharge_Subscription

  """Update an address, modifying the address for all uses."""
  Recharge_updateMyAddress(addressId: String!, address1: String!, address2: String, city: String!, countryCode: String!, firstName: String!, lastName: String!, phone: String, province: String!, zip: String!): Recharge_Address
  Recharge_changeSubscriptionAddress(subscriptionId: String!, address1: String!, address2: String, city: String!, countryCode: String!, firstName: String!, lastName: String!, phone: String!, province: String!, zip: String!): Recharge_Subscription
  Recharge_updateMyDeliveryFrequency(subscriptionId: String!, frequency: String!, unit: String!): Recharge_Subscription
  Recharge_updateMyProductOptions(subscriptionId: String!, variantId: String, quantity: String): Recharge_Subscription
  Recharge_updateMySubscriptionPaymentMethod(addressId: String!, paymentMethodId: String!): Recharge_Address
}

"""A project file stored on s3"""
type Upload {
  uploadUrl: ID
  asset: Asset
}

input TSFile {
  name: String!
  type: String!
}

type UpdateAssetResult {
  clientMutationId: String
  result: Asset
}

"""update Asset input"""
input UpdateAssetInput {
  _id: ID!
  title: String
  description: String
  filename: String
  caption: JSON
  credit: JSON
  path: String
  mimeType: String
  sourceUrl: String
  uploadStatus: String
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  s3Key: String
}

"""Describes a structural update to an array of data."""
input ContentStructureInput {
  """A deep path to the array being updated (e.g. a.b[1].c)."""
  path: String!

  """
  An array where the indices represent the to index, and the values represent the from index.For example to transform ["a","b","c","d"] into ["c","a"], this value would be [2,0].
  """
  structure: [Int]
}

type CreateAssetResult {
  clientMutationId: String
  result: Asset
}

"""create Asset input"""
input CreateAssetInput {
  title: String
  description: String
  filename: String!
  caption: JSON
  credit: JSON
  path: String!
  mimeType: String
  sourceUrl: String
  uploadStatus: String
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  s3Key: String
}

type DuplicateAssetResult {
  clientMutationId: String
  result: Asset
}

"""duplicate Asset input"""
input DuplicateAssetInput {
  _id: ID!
  title: String
  description: String
  filename: String
  caption: JSON
  credit: JSON
  path: String
  mimeType: String
  sourceUrl: String
  uploadStatus: String
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  s3Key: String
}

type DeleteAssetResult {
  clientMutationId: String
  result: Boolean
}

"""delete Asset input"""
input DeleteAssetInput {
  _id: ID!
}

type UpdateTsStaticSiteResult {
  clientMutationId: String
  result: TsStaticSite
}

"""update TsStaticSite input"""
input UpdateTsStaticSiteInput {
  _id: ID!
  title: String
  baseUrl: String
  provider: String
  idKey: String
  secretKey: String
  destination: String
  privateAcl: Boolean
  environmentVariables: [TsStaticSiteEnvironmentVariablesInput]
  triggers: [TsStaticSiteTriggersInput]
  templateHash: String
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

input TsStaticSiteEnvironmentVariablesInput {
  name: String
  value: String
}

input TsStaticSiteTriggersInput {
  contentTypeId: String
  status: String
}

type CreateTsStaticSiteResult {
  clientMutationId: String
  result: TsStaticSite
}

"""create TsStaticSite input"""
input CreateTsStaticSiteInput {
  title: String!
  baseUrl: String
  provider: String! = "s3"
  idKey: String
  secretKey: String
  destination: String!
  privateAcl: Boolean
  environmentVariables: [TsStaticSiteEnvironmentVariablesInput]
  triggers: [TsStaticSiteTriggersInput]
  templateHash: String
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type DuplicateTsStaticSiteResult {
  clientMutationId: String
  result: TsStaticSite
}

"""duplicate TsStaticSite input"""
input DuplicateTsStaticSiteInput {
  _id: ID!
  title: String
  baseUrl: String
  provider: String
  idKey: String
  secretKey: String
  destination: String
  privateAcl: Boolean
  environmentVariables: [TsStaticSiteEnvironmentVariablesInput]
  triggers: [TsStaticSiteTriggersInput]
  templateHash: String
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type DeleteTsStaticSiteResult {
  clientMutationId: String
  result: Boolean
}

"""delete TsStaticSite input"""
input DeleteTsStaticSiteInput {
  _id: ID!
}

input CreateMyCheckoutSessionPropertiesLinesItemsPropertyInput {
  quantity: Int!
  merchandiseId: String!
  sellingPlanId: String
}

input CreateMyCheckoutPropertiesLinesItemsPropertyInput {
  quantity: Int!
  merchandiseId: String!
  sellingPlanId: String
}

type Klaviyo_AddMembersResponse {
  items: [Klaviyo_AddMembersResponseItemsProperty]
}

type Klaviyo_AddMembersResponseItemsProperty {
  id: String
  email: String
  phone_number: String
}

type Klaviyo_200Ok {
  result: JSONObject
}

type Voucherify_Order {
  id: String
}

input Voucherify_OrderItemInput {
  name: String
  id: String
  quantity: Int
  price: Int
}

input AddListMembersInput {
  profiles: [AddMembersPropertiesPropertiesProfilesItemsPropertyInput!]!
}

input AddMembersPropertiesPropertiesProfilesItemsPropertyInput {
  email: String
}

"""

The profiles that you would like to remove from the list. 

Example:

{
  "emails":["george.washington@klaviyo.com","abraham.lincoln@klaviyo.com"],
  "phone_numbers":["+13239169023"],
  "push_tokens":["03df25c845d460bcdad7802d2vf6fc1dfde97283bf75cc993eb6dca835ea2e2r"]
}

"""
input Klaviyo_RemoveMembersPropertiesPropertyInput {
  emails: [String]
  phone_numbers: [String]
  push_tokens: [String]
}

type ReviewsIo_CreateInvitationResponse {
  """The status of a response"""
  status: ReviewsIo_CreateInvitationResponseStatusProperty
  message: [String]
}

enum ReviewsIo_CreateInvitationResponseStatusProperty {
  success
  error
}

input ReviewsIo_CreateInvitationPropertiesPropertyInput {
  name: String
  email: String
  order_id: String
  products: [ReviewsIo_InvitationProductInput]

  """Template identifier"""
  template_id: String
  date_send: String
  delay: String
  country_code: String
}

input ReviewsIo_InvitationProductInput {
  """Product unique ID"""
  sku: String

  """Product name"""
  name: String

  """Product description"""
  description: String

  """Product image URL"""
  image: String

  """Product MPN"""
  mpn: String

  """Product GTIN"""
  gtin: String

  """Product brand"""
  brand: String

  """Product category"""
  category: String

  """Product custom property"""
  custom: String

  """Product page url"""
  pageUrl: String
}

type UpdateFooterResult {
  clientMutationId: String
  result: Footer
}

"""update Footer input"""
input UpdateFooterInput {
  """"""
  navigation: FooterNavigationInput

  """"""
  newsletter: FooterNewsletterInput
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

input FooterNavigationInput {
  """"""
  sections: [FooterNavigationSectionsInput!]!
}

input FooterNavigationSectionsInput {
  """"""
  name: String
  links: [TSRelationshipInput]
}

input TSRelationshipInput {
  shapeId: String
  shapeName: String
  contentTypeId: String
  id: String!
}

input FooterNewsletterInput {
  """"""
  text: TextInput!
}

input TextInput {
  primary: String
  secondary: String
  button: String
}

"""Return type for `cartCreate` mutation."""
type ShopifyStorefront_CartCreatePayload {
  """The new cart."""
  cart: ShopifyStorefront_Cart

  """The list of errors that occurred from executing the mutation."""
  userErrors: [ShopifyStorefront_CartUserError!]!
}

"""Specifies the input fields to create a cart."""
input ShopifyStorefront_CartInput {
  """
  An array of key-value pairs that contains additional information about the cart.
  """
  attributes: [ShopifyStorefront_AttributeInput]

  """A list of merchandise lines to add to the cart."""
  lines: [ShopifyStorefront_CartLineInput]

  """
  The case-insensitive discount codes that the customer added at checkout.
  """
  discountCodes: [String]

  """
  A note that is associated with the cart. For example, the note can be a personalized message to the buyer.
  """
  note: String

  """
  The customer associated with the cart. Used to determine [international pricing]
  (https://shopify.dev/custom-storefronts/internationalization/international-pricing).
  Buyer identity should match the customer's shipping address.
  """
  buyerIdentity: ShopifyStorefront_CartBuyerIdentityInput
}

"""Specifies the input fields required for an attribute."""
input ShopifyStorefront_AttributeInput {
  """Key or name of the attribute."""
  key: String!

  """Value of the attribute."""
  value: String!
}

"""Specifies the input fields to create a merchandise line on a cart."""
input ShopifyStorefront_CartLineInput {
  """
  An array of key-value pairs that contains additional information about the merchandise line.
  """
  attributes: [ShopifyStorefront_AttributeInput]

  """The quantity of the merchandise."""
  quantity: Int = 1

  """The identifier of the merchandise that the buyer intends to purchase."""
  merchandiseId: ID!

  """
  The identifier of the selling plan that the merchandise is being purchased with.
  """
  sellingPlanId: ID
}

"""
Specifies the input fields to update the buyer information associated with a cart.
Buyer identity is used to determine
[international pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing)
and should match the customer's shipping address.
"""
input ShopifyStorefront_CartBuyerIdentityInput {
  """The email address of the buyer that is interacting with the cart."""
  email: String

  """The phone number of the buyer that is interacting with the cart."""
  phone: String

  """The country where the buyer is located."""
  countryCode: ShopifyStorefront_CountryCode

  """
  The access token used to identify the customer associated with the cart.
  """
  customerAccessToken: String
}

"""Return type for `customerAccessTokenCreate` mutation."""
type ShopifyStorefront_CustomerAccessTokenCreatePayload {
  """The newly created customer access token object."""
  customerAccessToken: ShopifyStorefront_CustomerAccessToken

  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [ShopifyStorefront_CustomerUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [ShopifyStorefront_UserError!]! @deprecated(reason: "Use `customerUserErrors` instead.")
}

"""
A CustomerAccessToken represents the unique token required to make modifications to the customer object.
"""
type ShopifyStorefront_CustomerAccessToken {
  """The customer’s access token."""
  accessToken: String!

  """The date and time when the customer access token expires."""
  expiresAt: DateTime!
}

"""Specifies the input fields required to create a customer access token."""
input ShopifyStorefront_CustomerAccessTokenCreateInput {
  """The email associated to the customer."""
  email: String!

  """The login password to be used by the customer."""
  password: String!
}

"""Return type for `customerCreate` mutation."""
type ShopifyStorefront_CustomerCreatePayload {
  """The created customer object."""
  customer: ShopifyStorefront_Customer

  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [ShopifyStorefront_CustomerUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [ShopifyStorefront_UserError!]! @deprecated(reason: "Use `customerUserErrors` instead.")
}

"""The fields required to create a new customer."""
input ShopifyStorefront_CustomerCreateInput {
  """The customer’s first name."""
  firstName: String

  """The customer’s last name."""
  lastName: String

  """The customer’s email."""
  email: String!

  """
  A unique phone number for the customer.
  
  Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String

  """The login password used by the customer."""
  password: String!

  """
  Indicates whether the customer has consented to be sent marketing material via email.
  """
  acceptsMarketing: Boolean
}

type CreateCustomerPayload {
  customer: CreateCustomerPayloadCustomerProperty
}

type CreateCustomerPayloadCustomerProperty {
  id: String
  email: String
  created_at: String
  updated_at: String
  state: String
  verified_email: Boolean
}

input CreateCustomerPropertiesPropertyInput {
  firstName: String
  lastName: String
  email: String!
  phone: String
  password: String!
  acceptsMarketing: Boolean
  recaptchaToken: String
}

"""Return type for `customerRecover` mutation."""
type ShopifyStorefront_CustomerRecoverPayload {
  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [ShopifyStorefront_CustomerUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [ShopifyStorefront_UserError!]! @deprecated(reason: "Use `customerUserErrors` instead.")
}

"""Return type for `customerUpdate` mutation."""
type ShopifyStorefront_CustomerUpdatePayload {
  """The updated customer object."""
  customer: ShopifyStorefront_Customer

  """
  The newly created customer access token. If the customer's password is updated, all previous access tokens
  (including the one used to perform this mutation) become invalid, and a new token is generated.
  """
  customerAccessToken: ShopifyStorefront_CustomerAccessToken

  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [ShopifyStorefront_CustomerUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [ShopifyStorefront_UserError!]! @deprecated(reason: "Use `customerUserErrors` instead.")
}

"""Specifies the fields required to update the Customer information."""
input ShopifyStorefront_CustomerUpdateInput {
  """The customer’s first name."""
  firstName: String

  """The customer’s last name."""
  lastName: String

  """The customer’s email."""
  email: String

  """
  A unique phone number for the customer.
  
  Formatted using E.164 standard. For example, _+16135551111_. To remove the phone number, specify `null`.
  """
  phone: String

  """The login password used by the customer."""
  password: String

  """
  Indicates whether the customer has consented to be sent marketing material via email.
  """
  acceptsMarketing: Boolean
}

"""Return type for `customerAddressUpdate` mutation."""
type ShopifyStorefront_CustomerAddressUpdatePayload {
  """The customer’s updated mailing address."""
  customerAddress: ShopifyStorefront_MailingAddress

  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [ShopifyStorefront_CustomerUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [ShopifyStorefront_UserError!]! @deprecated(reason: "Use `customerUserErrors` instead.")
}

"""Specifies the fields accepted to create or update a mailing address."""
input ShopifyStorefront_MailingAddressInput {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """The name of the city, district, village, or town."""
  city: String

  """The name of the customer's company or organization."""
  company: String

  """The name of the country."""
  country: String

  """The first name of the customer."""
  firstName: String

  """The last name of the customer."""
  lastName: String

  """
  A unique phone number for the customer.
  
  Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String

  """The region of the address, such as the province, state, or district."""
  province: String

  """The zip or postal code of the address."""
  zip: String
}

type CreateTicketResponse {
  id: Int!
}

type UpdateStorefrontResult {
  clientMutationId: String
  result: Storefront
}

"""update Storefront input"""
input UpdateStorefrontInput {
  components: [BackgroundImageComponentCollectionComponentCollectionsComponentHeroComponentOffersComponentSaleComponentTestimonialsComponentTrendingProductsComponentInputUnion]
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

input BackgroundImageComponentCollectionComponentCollectionsComponentHeroComponentOffersComponentSaleComponentTestimonialsComponentTrendingProductsComponentInputUnion {
  offersComponent: OffersComponentInput
  heroComponent: HeroComponentInput
  collectionsComponent: CollectionsComponentInput
  backgroundImageComponent: BackgroundImageComponentInput
  saleComponent: SaleComponentInput
  testimonialsComponent: TestimonialsComponentInput
  trendingProductsComponent: TrendingProductsComponentInput
  collectionComponent: CollectionComponentInput
}

input OffersComponentInput {
  """"""
  offers: [OffersComponentOffersInput!]!
}

input OffersComponentOffersInput {
  """"""
  name: String!

  """"""
  description: String!

  """"""
  href: String!
}

input HeroComponentInput {
  primaryText: String!
  secondaryText: String!
  buttonText: String!
  image: TSRelationshipInput!
}

input CollectionsComponentInput {
  """"""
  collections: [CollectionsComponentCollectionsInput!]!
}

input CollectionsComponentCollectionsInput {
  """"""
  name: String!

  """"""
  description: String!

  """"""
  href: String!
  image: TSRelationshipInput!
}

input BackgroundImageComponentInput {
  image: TSRelationshipInput!

  """"""
  components: [BackgroundImageComponentCollectionsComponentHeroComponentOffersComponentSaleComponentTestimonialsComponentInputUnion!]!
}

input BackgroundImageComponentCollectionsComponentHeroComponentOffersComponentSaleComponentTestimonialsComponentInputUnion {
  collectionsComponent: CollectionsComponentInput
  saleComponent: SaleComponentInput
  testimonialsComponent: TestimonialsComponentInput
  offersComponent: OffersComponentInput
  heroComponent: HeroComponentInput
  backgroundImageComponent: BackgroundImageComponentInput
}

input SaleComponentInput {
  primaryText: String!
  secondaryText: String!
  buttonText: String!
}

input TestimonialsComponentInput {
  """"""
  testimonials: [TestimonialsComponentTestimonialsInput!]!
}

input TestimonialsComponentTestimonialsInput {
  """"""
  quote: String!

  """"""
  attribution: String!
}

input TrendingProductsComponentInput {
  """"""
  trendingProducts: [TrendingProductsComponentTrendingProductsInput!]!
}

input TrendingProductsComponentTrendingProductsInput {
  """"""
  shopifyProductId: String!
}

input CollectionComponentInput {
  collection: TSRelationshipInput
}

type UpdateProductPageDetailsResult {
  clientMutationId: String
  result: ProductPageDetails
}

"""update ProductPageDetails input"""
input UpdateProductPageDetailsInput {
  _id: ID!

  """"""
  name: String

  """"""
  text: ProductPageDetailsTextInput

  """"""
  details: [ProductPageDetailsDetailsInput]
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

input ProductPageDetailsTextInput {
  """"""
  primary: JSON!

  """"""
  secondary: JSON!
}

input ProductPageDetailsDetailsInput {
  image: TSRelationshipInput

  """"""
  description: JSON!
}

type CreateProductPageDetailsResult {
  clientMutationId: String
  result: ProductPageDetails
}

"""create ProductPageDetails input"""
input CreateProductPageDetailsInput {
  """"""
  name: String!

  """"""
  text: ProductPageDetailsTextInput!

  """"""
  details: [ProductPageDetailsDetailsInput!]!
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type DuplicateProductPageDetailsResult {
  clientMutationId: String
  result: ProductPageDetails
}

"""duplicate ProductPageDetails input"""
input DuplicateProductPageDetailsInput {
  _id: ID!

  """"""
  name: String

  """"""
  text: ProductPageDetailsTextInput

  """"""
  details: [ProductPageDetailsDetailsInput]
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type DeleteProductPageDetailsResult {
  clientMutationId: String
  result: Boolean
}

"""delete ProductPageDetails input"""
input DeleteProductPageDetailsInput {
  _id: ID!
}

type UpdateProductPagePoliciesResult {
  clientMutationId: String
  result: ProductPagePolicies
}

"""update ProductPagePolicies input"""
input UpdateProductPagePoliciesInput {
  _id: ID!

  """"""
  name: String

  """"""
  policies: [ProductPagePoliciesPoliciesInput]
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

input ProductPagePoliciesPoliciesInput {
  """"""
  name: JSON!

  """"""
  description: JSON!
  image: TSRelationshipInput!
}

type CreateProductPagePoliciesResult {
  clientMutationId: String
  result: ProductPagePolicies
}

"""create ProductPagePolicies input"""
input CreateProductPagePoliciesInput {
  """"""
  name: String!

  """"""
  policies: [ProductPagePoliciesPoliciesInput!]!
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type DuplicateProductPagePoliciesResult {
  clientMutationId: String
  result: ProductPagePolicies
}

"""duplicate ProductPagePolicies input"""
input DuplicateProductPagePoliciesInput {
  _id: ID!

  """"""
  name: String

  """"""
  policies: [ProductPagePoliciesPoliciesInput]
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type DeleteProductPagePoliciesResult {
  clientMutationId: String
  result: Boolean
}

"""delete ProductPagePolicies input"""
input DeleteProductPagePoliciesInput {
  _id: ID!
}

type UpdateProductResult {
  clientMutationId: String
  result: Product
}

"""update ProductInterface input"""
input UpdateProductInterfaceInput {
  _id: ID!
  _version: Float
  _status: DefaultWorkflow

  """Initialized with title from shopify"""
  name: String
  productComponent: String
  hideBreadcrumbs: Boolean
  hideRelatedProducts: Boolean
  hideReviews: Boolean
  showPolicies: Boolean
  policies: TSRelationshipInput
  showDetails: Boolean
  details: TSRelationshipInput
  lineItemAttributes: TSRelationshipInput
  shopifyProductId: String
  shopifyProduct: Shopify_ProductInput
}

"""Specifies the input fields required to create a product."""
input Shopify_ProductInput {
  """The description of the product, complete with HTML formatting."""
  descriptionHtml: String

  """
  A unique, human-friendly string for the product.
  Automatically generated from the product's title unless otherwise specified.
  """
  handle: String

  """
  Whether a redirect is required after a new handle has been provided.
  If true, then the old handle is redirected to the new one automatically.
  """
  redirectNewHandle: Boolean = false

  """The SEO information associated with the product."""
  seo: Shopify_SEOInput

  """The product type specified by the merchant."""
  productType: String

  """The standardized product type in the Shopify product taxonomy."""
  standardizedProductType: Shopify_StandardizedProductTypeInput

  """The custom product type specified by the merchant."""
  customProductType: String

  """A comma separated list of tags that have been added to the product."""
  tags: [String]

  """The theme template used when viewing the product in a store."""
  templateSuffix: String

  """Whether the product is a gift card."""
  giftCard: Boolean

  """The theme template used when viewing the gift card in a store."""
  giftCardTemplateSuffix: String

  """The title of the product."""
  title: String

  """The name of the product's vendor."""
  vendor: String

  """The IDs of the collections that this product will be added to."""
  collectionsToJoin: [ID]

  """
  The IDs of collections that will no longer include the existing product.
  """
  collectionsToLeave: [ID]

  """
  Specifies the product to update in productUpdate or creates a new product if absent in productCreate.
  """
  id: ID

  """The images to associate with the product."""
  images: [Shopify_ImageInput]

  """The metafields to associate with this product."""
  metafields: [Shopify_MetafieldInput]

  """The private metafields to associate with this product."""
  privateMetafields: [Shopify_PrivateMetafieldInput]

  """List of custom product options (maximum of 3 per product)."""
  options: [String]

  """A list of variants associated with the product."""
  variants: [Shopify_ProductVariantInput]

  """The status of the product."""
  status: Shopify_ProductStatus

  """
  Whether the product can only be purchased with a selling plan (subscription). Products that are sold exclusively on subscription can only be created on online stores. If set to `true` on an already existing product, then the product will be marked unavailable on channels that don't support subscriptions.
  """
  requiresSellingPlan: Boolean
}

"""SEO information."""
input Shopify_SEOInput {
  """SEO title of the product."""
  title: String

  """SEO description of the product."""
  description: String
}

"""
Provides the fields and values to use when adding a standard product type to a product. The [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt) contains the full list of available values.
"""
input Shopify_StandardizedProductTypeInput {
  """
  The id of the node in the Shopify taxonomy that represents the product type.
  """
  productTaxonomyNodeId: ID!
}

"""Specifies the input fields for an image."""
input Shopify_ImageInput {
  """A globally-unique identifier."""
  id: ID

  """A word or phrase to share the nature or contents of an image."""
  altText: String

  """The URL of the image. May be a staged upload URL."""
  src: String
}

"""
The input fields to use to create or update a metafield through a mutation on the owning resource.
An alternative way to create or update a metafield is by using the
[metafieldsSet](https://shopify.dev/api/admin-graphql/latest/mutations/metafieldsSet) mutation.
"""
input Shopify_MetafieldInput {
  """The description of the metafield."""
  description: String

  """
  The unique ID of the metafield. You don't include an ID when you create a metafield because the metafield ID
  is created automatically. The ID is required when you update a metafield.
  """
  id: ID

  """
  The namespace for a metafield. The namespace is required when you create a metafield and is optional when you
  update a metafield.
  """
  namespace: String

  """
  The key name of the metafield. Required when creating but optional when updating.
  """
  key: String

  """The value of a metafield."""
  value: String

  """
  The metafield's [type](https://shopify.dev/apps/metafields/types). The metafield type is required
  when you create a metafield and is optional when you update a metafield.
  """
  type: String
}

"""The input fields for a private metafield."""
input Shopify_PrivateMetafieldInput {
  """
  The resource that owns the metafield. If the field is blank, then the `Shop` resource owns the metafield.
  """
  owner: ID

  """The namespace of the private metafield."""
  namespace: String!

  """The key of the private metafield."""
  key: String!

  """
  The `value` and `valueType` of the private metafield, wrapped in a `ValueInput` object.
  """
  valueInput: Shopify_PrivateMetafieldValueInput!
}

"""
The value input contains the value and value type of the private metafield.
"""
input Shopify_PrivateMetafieldValueInput {
  """The value of a private metafield."""
  value: String!

  """Represents the private metafield value type."""
  valueType: Shopify_PrivateMetafieldValueType!
}

"""Specifies a product variant to create or update."""
input Shopify_ProductVariantInput {
  """The value of the barcode associated with the product."""
  barcode: String

  """The compare-at price of the variant."""
  compareAtPrice: Money

  """The Harmonized System code (or HS Tariff code) for the variant."""
  harmonizedSystemCode: String

  """
  Specifies the product variant to update or create a new variant if absent.
  """
  id: ID

  """The ID of the image that's associated with the variant."""
  imageId: ID

  """
  The URL of an image to associate with the variant.  This field can only be used through mutations that create product images and must match one of the URLs being created on the product.
  """
  imageSrc: String

  """
  The URL of the media to associate with the variant. This field can only be used in mutations that create media images and must match one of the URLs being created on the product. This field only accepts one value.
  """
  mediaSrc: [String]

  """
  Whether customers are allowed to place an order for the product variant when it's out of stock.
  """
  inventoryPolicy: Shopify_ProductVariantInventoryPolicy

  """
  The inventory quantities at each location where the variant is stocked. Used as input only to the `productVariantCreate` mutation.
  """
  inventoryQuantities: [Shopify_InventoryLevelInput]

  """The inventory item associated with the variant. Used for unit cost."""
  inventoryItem: Shopify_InventoryItemInput

  """Additional customizable information about the product variant."""
  metafields: [Shopify_MetafieldInput]

  """The private metafields associated with the product."""
  privateMetafields: [Shopify_PrivateMetafieldInput]

  """
  The custom properties that a shop owner uses to define product variants.
  """
  options: [String]

  """
  The order of the product variant in the list of product variants. The first position in the list is 1.
  """
  position: Int

  """The price of the variant."""
  price: Money

  """
  The product to create the variant for. Used as input only to the `productVariantCreate` mutation.
  """
  productId: ID

  """Whether the variant requires shipping."""
  requiresShipping: Boolean

  """The SKU for the variant."""
  sku: String

  """Whether the variant is taxable."""
  taxable: Boolean

  """The tax code associated with the variant."""
  taxCode: String

  """The weight of the variant."""
  weight: Float

  """The unit of weight that's used to measure the variant."""
  weightUnit: Shopify_WeightUnit
}

"""Specifies the input fields for an inventory level."""
input Shopify_InventoryLevelInput {
  """The available quantity of an inventory item at a location."""
  availableQuantity: Int!

  """The ID of a location."""
  locationId: ID!
}

"""Specifies the input fields for an inventory item."""
input Shopify_InventoryItemInput {
  """
  Unit cost associated with the inventory item, the currency is the shop's default currency.
  """
  cost: Decimal

  """Whether the inventory item is tracked."""
  tracked: Boolean
}

type CreateProductResult {
  clientMutationId: String
  result: Product
}

"""create ProductInterface input"""
input CreateProductInterfaceInput {
  _id: ID
  _version: Float
  _status: DefaultWorkflow

  """Initialized with title from shopify"""
  name: String
  productComponent: String
  hideBreadcrumbs: Boolean = false
  hideRelatedProducts: Boolean = false
  hideReviews: Boolean = false
  showPolicies: Boolean = false
  policies: TSRelationshipInput
  showDetails: Boolean = false
  details: TSRelationshipInput
  lineItemAttributes: TSRelationshipInput
  shopifyProductId: String
  shopifyProduct: Shopify_ProductInput
}

type DuplicateProductResult {
  clientMutationId: String
  result: Product
}

"""duplicate Product input"""
input DuplicateProductInput {
  _id: ID!

  """Initialized with title from shopify"""
  name: String

  """"""
  productComponent: String

  """"""
  hideBreadcrumbs: Boolean

  """"""
  hideRelatedProducts: Boolean

  """"""
  hideReviews: Boolean

  """"""
  showPolicies: Boolean
  policies: TSRelationshipInput

  """"""
  showDetails: Boolean
  details: TSRelationshipInput
  lineItemAttributes: TSRelationshipInput
  shopifyProductId: String
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type DeleteProductResult {
  clientMutationId: String
  result: Boolean
}

"""delete Product input"""
input DeleteProductInput {
  _id: ID!
}

type UpdateNavigationResult {
  clientMutationId: String
  result: Navigation
}

"""update Navigation input"""
input UpdateNavigationInput {
  """"""
  message: JSON

  """"""
  sections: [NavigationSectionsInput]
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

input NavigationSectionsInput {
  """"""
  name: String!
  link: TSRelationshipInput

  """"""
  subsections: [NavigationSectionsSubsectionsInput]
}

input NavigationSectionsSubsectionsInput {
  """"""
  name: String!
  links: [TSRelationshipInput]
}

type UpdateCollectionResult {
  clientMutationId: String
  result: Collection
}

"""update CollectionInterface input"""
input UpdateCollectionInterfaceInput {
  _id: ID!
  _version: Float
  _status: DefaultWorkflow

  """Initialized with title from shopify"""
  name: String

  """An optional title to override the regular title in breadcrumbs"""
  breadcrumbTitle: String
  parent: TSRelationshipInput
  shopifyCollectionId: String
  shopifyCollection: Shopify_CollectionInput
}

"""Specifies the input fields required to create a collection."""
input Shopify_CollectionInput {
  """The description of the collection, in HTML format."""
  descriptionHtml: String

  """
  A unique human-friendly string for the collection. Automatically generated from the collection's title.
  """
  handle: String

  """
  Specifies the collection to update or create a new collection if absent. Required for updating a collection.
  """
  id: ID

  """The image associated with the collection."""
  image: Shopify_ImageInput

  """
  Initial list of collection products. Only valid with `collectionCreate` and without rules.
  """
  products: [ID]

  """The private metafields to associate with the collection."""
  privateMetafields: [Shopify_PrivateMetafieldInput]

  """The rules used to assign products to the collection."""
  ruleSet: Shopify_CollectionRuleSetInput

  """The theme template used when viewing the collection in a store."""
  templateSuffix: String

  """The order in which the collection's products are sorted."""
  sortOrder: Shopify_CollectionSortOrder

  """The title of the collection. Required for creating a new collection."""
  title: String

  """The metafields to associate with the collection."""
  metafields: [Shopify_MetafieldInput]

  """SEO information for the collection."""
  seo: Shopify_SEOInput

  """
  Indicates whether a redirect is required after a new handle has been provided.
  If true, then the old handle is redirected to the new one automatically.
  """
  redirectNewHandle: Boolean = false
}

"""Specifies a rule set for the collection."""
input Shopify_CollectionRuleSetInput {
  """
  Whether products must match any or all of the rules to be included in the collection.
  If true, then products must match at least one of the rules to be included in the collection.
  If false, then products must match all of the rules to be included in the collection.
  """
  appliedDisjunctively: Boolean!

  """The rules used to assign products to the collection."""
  rules: [Shopify_CollectionRuleInput]
}

"""Specifies a rule to associate with a collection."""
input Shopify_CollectionRuleInput {
  """
  The attribute that the rule focuses on. For example, `title` or `product_type`.
  """
  column: Shopify_CollectionRuleColumn!

  """
  The type of operator that the rule is based on. For example, `equals`, `contains`, or `not_equals`.
  """
  relation: Shopify_CollectionRuleRelation!

  """The value that the operator is applied to. For example, `Hats`."""
  condition: String!
}

type CreateCollectionResult {
  clientMutationId: String
  result: Collection
}

"""create CollectionInterface input"""
input CreateCollectionInterfaceInput {
  _id: ID
  _version: Float
  _status: DefaultWorkflow

  """Initialized with title from shopify"""
  name: String

  """An optional title to override the regular title in breadcrumbs"""
  breadcrumbTitle: String
  parent: TSRelationshipInput
  shopifyCollectionId: String
  shopifyCollection: Shopify_CollectionInput
}

type DuplicateCollectionResult {
  clientMutationId: String
  result: Collection
}

"""duplicate Collection input"""
input DuplicateCollectionInput {
  _id: ID!

  """Initialized with title from shopify"""
  name: String

  """An alternate title to use in breadcrumbs"""
  breadcrumbTitle: String
  parent: TSRelationshipInput
  shopifyCollectionId: String
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type DeleteCollectionResult {
  clientMutationId: String
  result: Boolean
}

"""delete Collection input"""
input DeleteCollectionInput {
  _id: ID!
}

type UpdatePageResult {
  clientMutationId: String
  result: Page
}

"""update Page input"""
input UpdatePageInput {
  _id: ID!

  """"""
  title: String

  """"""
  slug: String
  sections: [PageSectionMdxPageSectionTitleInputUnion]
  relationship: [TSRelationshipInput]
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

input PageSectionMdxPageSectionTitleInputUnion {
  pageSectionTitle: PageSectionTitleInput
  pageSectionMdx: PageSectionMdxInput
}

input PageSectionTitleInput {
  label: String
  heading: String
  subheading: String
}

input PageSectionMdxInput {
  """"""
  content: String
}

type CreatePageResult {
  clientMutationId: String
  result: Page
}

"""create Page input"""
input CreatePageInput {
  """"""
  title: String!

  """"""
  slug: String!
  sections: [PageSectionMdxPageSectionTitleInputUnion!]!
  relationship: [TSRelationshipInput]
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type DuplicatePageResult {
  clientMutationId: String
  result: Page
}

"""duplicate Page input"""
input DuplicatePageInput {
  _id: ID!

  """"""
  title: String

  """"""
  slug: String
  sections: [PageSectionMdxPageSectionTitleInputUnion]
  relationship: [TSRelationshipInput]
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type DeletePageResult {
  clientMutationId: String
  result: Boolean
}

"""delete Page input"""
input DeletePageInput {
  _id: ID!
}

type CreateMyProductReviewResponse {
  success: Boolean
}

input CreateMyProductReviewPropertiesPropertyInput {
  """Product unique ID"""
  sku: String!
  review: String!
  rating: String!
  order_id: String
  title: String
  address: String

  """
  Sub Ratings. JSON encoded string { "Price": 4, "Quality": 3, "Fit":"Perfect" }
  """
  ratings: String

  """
  Images. JSON Encoded string [{"url": "https://www.example.com/images/image.png", status:"inactive"}]. Status is optional and defaults to "inactive".
  """
  images: String
}

type UpdateLinkResult {
  clientMutationId: String
  result: Link
}

"""update Link input"""
input UpdateLinkInput {
  _id: ID!
  name: String
  href: String
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type CreateLinkResult {
  clientMutationId: String
  result: Link
}

"""create Link input"""
input CreateLinkInput {
  name: String!
  href: String!
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type DuplicateLinkResult {
  clientMutationId: String
  result: Link
}

"""duplicate Link input"""
input DuplicateLinkInput {
  _id: ID!
  name: String
  href: String
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type DeleteLinkResult {
  clientMutationId: String
  result: Boolean
}

"""delete Link input"""
input DeleteLinkInput {
  _id: ID!
}

type UpdateLineItemAttributesResult {
  clientMutationId: String
  result: LineItemAttributes
}

"""update LineItemAttributes input"""
input UpdateLineItemAttributesInput {
  _id: ID!

  """"""
  name: String

  """"""
  attributes: [LineItemAttributesAttributesInput]
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

input LineItemAttributesAttributesInput {
  """The property key."""
  key: String!

  """Optional values for the property."""
  values: [LineItemAttributesAttributesValuesInput]
}

input LineItemAttributesAttributesValuesInput {
  """"""
  value: String
}

type CreateLineItemAttributesResult {
  clientMutationId: String
  result: LineItemAttributes
}

"""create LineItemAttributes input"""
input CreateLineItemAttributesInput {
  """"""
  name: String!

  """"""
  attributes: [LineItemAttributesAttributesInput!]!
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type DuplicateLineItemAttributesResult {
  clientMutationId: String
  result: LineItemAttributes
}

"""duplicate LineItemAttributes input"""
input DuplicateLineItemAttributesInput {
  _id: ID!

  """"""
  name: String

  """"""
  attributes: [LineItemAttributesAttributesInput]
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type DeleteLineItemAttributesResult {
  clientMutationId: String
  result: Boolean
}

"""delete LineItemAttributes input"""
input DeleteLineItemAttributesInput {
  _id: ID!
}

"""Return type for `customerAccessTokenCreateWithMultipass` mutation."""
type ShopifyStorefront_CustomerAccessTokenCreateWithMultipassPayload {
  """An access token object associated with the customer."""
  customerAccessToken: ShopifyStorefront_CustomerAccessToken

  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [ShopifyStorefront_CustomerUserError!]!
}

"""Return type for `customerUpdate` mutation."""
type Shopify_CustomerUpdatePayload {
  """The updated customer."""
  customer: Shopify_Customer

  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
Provides the fields and values to use when creating or updating a customer.
"""
input Shopify_CustomerInput {
  """The addresses for a customer."""
  addresses: [Shopify_MailingAddressInput]

  """The unique email address of the customer."""
  email: String

  """The customer's first name."""
  firstName: String

  """The ID of the customer to update."""
  id: ID

  """The customer's last name."""
  lastName: String

  """The customer's locale."""
  locale: String

  """Additional metafields to associate to the customer."""
  metafields: [Shopify_MetafieldInput]

  """A note about the customer."""
  note: String

  """The unique phone number for the customer."""
  phone: String

  """The private metafields to associate with the customer."""
  privateMetafields: [Shopify_PrivateMetafieldInput]

  """
  A list of tags to associate with the customer. Can be an array or a comma-separated list. Example values: `["tag1", "tag2", "tag3"]`, `"tag1, tag2, tag3"`
  
  Updating `tags` overwrites any existing tags that were previously added to the customer. To add new tags without overwriting
  existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
  mutation.
  """
  tags: [String]

  """
  Information that describes when the customer consented to receiving marketing
          material by email. The `email` field is required when creating a customer with email marketing
          consent information.
  """
  emailMarketingConsent: Shopify_CustomerEmailMarketingConsentInput

  """
  The marketing consent information when the customer consented to receiving marketing
          material by SMS. The `phone` field is required when creating a customer with SMS
          marketing consent information.
  """
  smsMarketingConsent: Shopify_CustomerSmsMarketingConsentInput

  """Whether the customer is exempt from paying taxes on their order."""
  taxExempt: Boolean

  """The list of tax exemptions to apply to the customer."""
  taxExemptions: [Shopify_TaxExemption]
}

"""
Information that describes when a customer consented to
        receiving marketing material by email.
"""
input Shopify_CustomerEmailMarketingConsentInput {
  """
  The customer opt-in level at the time of subscribing to marketing material.
  """
  marketingOptInLevel: Shopify_CustomerMarketingOptInLevel

  """
  The current marketing state associated with the customer's email.
            If the customer doesn't have an email, then this field is `null`.
  """
  marketingState: Shopify_CustomerEmailMarketingState!

  """
  The latest date and time when the customer consented or objected to
            receiving marketing material by email.
  """
  consentUpdatedAt: DateTime
}

"""
The marketing consent information when the customer consented to
        receiving marketing material by SMS.
"""
input Shopify_CustomerSmsMarketingConsentInput {
  """
  The marketing subscription opt-in level that was set when the customer consented to receive marketing information.
  """
  marketingOptInLevel: Shopify_CustomerMarketingOptInLevel

  """The current SMS marketing state for the customer."""
  marketingState: Shopify_CustomerSmsMarketingState!

  """
  The date and time when the customer consented to receive marketing material by SMS.
  If no date is provided, then the date and time when the consent information was sent is used.
  """
  consentUpdatedAt: DateTime
}

type Recharge_CreateNotificationResponse {
  customer_id: String
}

type Recharge_Onetime {
  id: String!
}
