"""Root of the Schema"""
type Query {
  taxonomySuggest(
    shapeNames: [String]
    shapeIds: [String]
    contentTypeNames: [String]
    contentTypeIds: [String]
    terms: String
    locale: String
    enableLocaleFallback: Boolean = true

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): TSSuggestionPaginatedList

  """List Versions for a piece of content"""
  getContentVersion(id: ID!, version: Int!, locale: String, enableLocaleFallback: Boolean = true): TSVersionResponse

  """List Versions for a piece of content"""
  getContentVersionList(id: ID!, from: Int, size: Int): TSVersionsPaginatedList

  """Get a Asset by ID"""
  getAsset(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Asset

  """Returns a list Asset in natural order."""
  getAssetList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereAssetInput
  ): AssetPaginatedList

  """Get a TsStaticSite by ID"""
  getTsStaticSite(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): TsStaticSite

  """Returns a list TsStaticSite in natural order."""
  getTsStaticSiteList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereTsStaticSiteInput
  ): TsStaticSitePaginatedList
  ReviewsIo_listProductReviews(sku: String, mpn: String, page: String, per_page: String, photos: Int, verified_only: Int, comments_only: Int, minRating: Int, include_unpublished_images: Int, include_moderated: Int, order_id: String, min_date: String, max_date: String): ReviewsIo_ListProductReviewsResponse

  """Get Stripe products from the TakeShape API Index"""
  getIndexedProductList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereStripeProductInput
  ): Stripe_ProductPaginatedList

  """Get the signed in user's profile from ShapeDB"""
  getMyProfile: Profile

  """Get the signed in user's subscriptions from Stripe"""
  getMySubscriptions(expand: [String]): [Stripe_Subscription]

  """Get the signed-in user's payments from Stripe"""
  getMyPayments_UNINDEXED(expand: [String], limit: Float, created: JSON, startingAfter: String, endingBefore: String): [Stripe_PaymentIntent]

  """Get the signed-in user's payments from Stripe"""
  getMyPayments_INDEXED(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereStripePaymentIntentInput
  ): Stripe_PaymentIntentPaginatedList

  """Get the signed-in user's payments from Stripe"""
  getMyPayments(expand: [String], limit: Float, created: JSON, startingAfter: String, endingBefore: String): [Stripe_PaymentIntent]

  """Get the signed-in user's payments from Stripe"""
  getMyPaymentsIndexed(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereStripePaymentIntentInput
  ): Stripe_PaymentIntentPaginatedList

  """Get a profile by ID"""
  getProfile(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Profile

  """Returns a list of profiles in natural order."""
  getProfileList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProfileInput
  ): ProfilePaginatedList

  """
  <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>
  """
  Stripe_listProducts(active: Boolean, created: JSON, ending_before: String, expand: [String], ids: [String], limit: Int, shippable: Boolean, starting_after: String, url: String): Stripe_ListProductsResponse

  """
  <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p>
  """
  Stripe_getProduct(expand: [String], id: String!): Stripe_Product

  """Get a loyalty card from Voucherify"""
  getMyLoyaltyCard: Voucherify_LoyaltyCard
  getMyNewsletterSubscriptions: [ProfileNewsletterStatus]

  """
  <p>When retrieving an invoice, youâ€™ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
  """
  Stripe_listInvoiceLines(ending_before: String, expand: [String], invoice: String!, limit: Int, starting_after: String): Stripe_ListInvoiceLinesResponse

  """<p>Returns a list of PaymentIntents.</p>"""
  Stripe_listPaymentIntents(created: JSON, customer: String, ending_before: String, expand: [String], limit: Int, starting_after: String): Stripe_ListPaymentIntentsResponse

  """Get a NavigationData by ID"""
  getNavigationData(locale: String, enableLocaleFallback: Boolean = true): NavigationData

  """Get a Footer by ID"""
  getFooter(locale: String, enableLocaleFallback: Boolean = true): Footer
  Shopify_productVariants(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductVariantSortKeys = ID

    """
    Supported filter parameters:
     - `barcode`
     - `collection`
     - `delivery_profile_id`
     - `exclude_composite`
     - `gift_card`
     - `inventory_quantity`
     - `location_id`
     - `managed`
     - `managed_by`
     - `product_id`
     - `product_status`
     - `product_type`
     - `publishable_status`
     - `published_status`
     - `sku`
     - `tag`
     - `tag_not`
     - `taxable`
     - `title`
     - `updated_at`
     - `vendor`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    The ID of an existing saved search.
    The searchâ€™s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_ProductVariantConnection
  Shopify_products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductSortKeys = ID

    """
    Supported filter parameters:
     - `barcode`
     - `created_at`
     - `delivery_profile_id`
     - `error_feedback`
     - `gift_card`
     - `has_only_composites`
     - `has_only_default_variant`
     - `id`
     - `inventory_total`
     - `is_price_reduced`
     - `out_of_stock_somewhere`
     - `price`
     - `product_type`
     - `publishable_status`
     - `published_status`
     - `sku`
     - `status`
     - `tag`
     - `tag_not`
     - `title`
     - `updated_at`
     - `vendor`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    The ID of an existing saved search.
    The searchâ€™s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_ProductConnection
  Shopify_product(
    """The ID of the Product to return."""
    id: ID!
  ): Shopify_Product
  Shopify_customer(
    """The ID of the Customer to return."""
    id: ID!
  ): Shopify_Customer
  Shopify_customerPaymentMethod(
    """The ID of the CustomerPaymentMethod to return."""
    id: ID!

    """Whether to show the customer's revoked payment method."""
    showRevoked: Boolean = false
  ): Shopify_CustomerPaymentMethod
  ShopifyStorefront_customer(
    """The customer access token."""
    customerAccessToken: String!
  ): ShopifyStorefront_Customer
  getMyCustomer: ShopifyStorefront_Customer
  getMyAdminCustomer: Shopify_Customer

  """Get a Storefront by ID"""
  getStorefront(locale: String, enableLocaleFallback: Boolean = true): Storefront

  """Get a Product by ID"""
  getProduct(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Product

  """Returns a list Product in natural order."""
  getProductList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProductInput
  ): ProductPaginatedList
  searchAssetIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereAssetInput
  ): AssetSearchResults
  searchTsStaticSiteIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereTsStaticSiteInput
  ): TsStaticSiteSearchResults
  searchProfileIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProfileInput
  ): ProfileSearchResults
  searchProductIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProductInput
  ): ProductSearchResults
  search(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true
    shapeNames: [String]
    shapeIds: [String]
    contentTypeNames: [String]
    contentTypeIds: [String]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereInput
  ): TSSearchableSearchResults
  withContext(locale: String, enableLocaleFallback: Boolean): WithContext
}

type TSSuggestionPaginatedList {
  items: [TSSuggestion]
  total: Int
}

type TSSuggestion {
  _id: ID
  _shapeId: ID
  _shapeName: String
  text: String
  summary: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input TSSearchSort {
  field: String!

  """"asc" for ascending or "desc" for descending"""
  order: String!
}

type TSVersionResponse {
  content: JSONObject
  schema: JSONObject
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type TSVersionsPaginatedList {
  items: [TSVersion]
  total: Int
  from: Int
  size: Int
}

type TSVersion {
  id: String
  version: Int
  status: String
  enabled: Boolean
  color: String
  updatedAt: String
  updatedBy: TSProjectMember
  item(locale: String, enableLocaleFallback: Boolean = true): TSVersionResponse
}

type TSProjectMember {
  id: ID
  email: String
  fullName: String
  role: String
  avatarPath: String
}

type Asset implements TSSearchable {
  title: String
  description: String
  filename: String!
  caption: JSON
  captionHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be added to all CSS classes in the generated HTML"""
    classPrefix: String = ""

    """
    A prefix to be added to all id properties on header elements in the generated HTML
    """
    headerIdPrefix: String = ""
  ): String
  credit: JSON
  creditHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be added to all CSS classes in the generated HTML"""
    classPrefix: String = ""

    """
    A prefix to be added to all id properties on header elements in the generated HTML
    """
    headerIdPrefix: String = ""
  ): String
  path: String!
  mimeType: String
  sourceUrl: String
  uploadStatus: String
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean @deprecated(reason: "Use _status instead")
  _enabledAt: String @deprecated(reason: "Use a custom date field instead")
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  s3Key: String @deprecated(reason: "Use path instead")
  searchSummary: String
}

interface TSSearchable {
  _id: ID
  _shapeId: String
  searchSummary: String
}

input TSImagesConfig {
  """Default image parameters. See https://docs.imgix.com/apis/url """
  default: JSON

  """Small image parameters. See https://docs.imgix.com/apis/url """
  small: JSON

  """Medium image parameters. See https://docs.imgix.com/apis/url """
  medium: JSON

  """Large image parameters. See https://docs.imgix.com/apis/url """
  large: JSON
}

type TSUser {
  id: String!
  email: String!
  fullName: String!
  avatarPath: String
}

enum DefaultWorkflow {
  disabled
  enabled
}

type AssetPaginatedList {
  items: [Asset!]!
  total: Int!
}

input TSSearchSortInput {
  field: String!

  """"asc" for ascending or "desc" for descending"""
  order: String!
}

input TSWhereAssetInput {
  title: TSWhereStringInput
  description: TSWhereStringInput
  filename: TSWhereStringInput
  caption: TSWhereDraftjsInput
  credit: TSWhereDraftjsInput
  path: TSWhereStringInput
  mimeType: TSWhereStringInput
  sourceUrl: TSWhereStringInput
  uploadStatus: TSWhereStringInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
  s3Key: TSWhereStringInput
  AND: [TSWhereAssetInput]
  OR: [TSWhereAssetInput]
  NOT: TSWhereAssetInput
}

input TSWhereStringInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereDraftjsInput {
  """Full text searching with fuzzy matching."""
  match: String
}

input TSWhereIDInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]
}

input TSWhereIntegerInput {
  """Exact match"""
  eq: Int

  """Less than"""
  lt: Int

  """Less than or equal"""
  lte: Int

  """Greater than"""
  gt: Int

  """Greater than or equal"""
  gte: Int

  """Array of possible exact match values."""
  in: [Int]
}

input TSWhereDateInput {
  """Exact match"""
  eq: String

  """Less than"""
  lt: String

  """Less than or equal"""
  lte: String

  """Greater than"""
  gt: String

  """Greater than or equal"""
  gte: String
}

input TSWhereNumberInput {
  """Exact match"""
  eq: Float

  """Less than"""
  lt: Float

  """Less than or equal"""
  lte: Float

  """Greater than"""
  gt: Float

  """Greater than or equal"""
  gte: Float

  """Array of possible exact match values."""
  in: [Float]
}

input TSWhereWorkflowInput {
  """Exact match"""
  eq: String

  """Less than"""
  lt: String

  """Less than or equal"""
  lte: String

  """Greater than"""
  gt: String

  """Greater than or equal"""
  gte: String

  """Array of possible exact match values."""
  in: [String]
}

type TsStaticSite implements TSSearchable {
  title: String!
  baseUrl: String
  provider: String!
  idKey: String
  secretKey: String
  destination: String!
  privateAcl: Boolean
  environmentVariables: [TsStaticSiteEnvironmentVariables]
  triggers: [TsStaticSiteTriggers]
  templateHash: String
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean @deprecated(reason: "Use _status instead")
  _enabledAt: String @deprecated(reason: "Use a custom date field instead")
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type TsStaticSiteEnvironmentVariables {
  name: String
  value: String
}

type TsStaticSiteTriggers {
  contentTypeId: String
  status: String
}

type TsStaticSitePaginatedList {
  items: [TsStaticSite!]!
  total: Int!
}

input TSWhereTsStaticSiteInput {
  title: TSWhereStringInput
  baseUrl: TSWhereStringInput
  provider: TSWhereStringInput
  idKey: TSWhereStringInput
  destination: TSWhereStringInput
  privateAcl: TSWhereBooleanInput
  environmentVariables: TSWhereTsStaticSiteEnvironmentVariablesInput
  triggers: TSWhereTsStaticSiteTriggersInput
  templateHash: TSWhereStringInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
  AND: [TSWhereTsStaticSiteInput]
  OR: [TSWhereTsStaticSiteInput]
  NOT: TSWhereTsStaticSiteInput
}

input TSWhereBooleanInput {
  """Exact match"""
  eq: Boolean
}

input TSWhereTsStaticSiteEnvironmentVariablesInput {
  name: TSWhereStringInput
  value: TSWhereStringInput
}

input TSWhereTsStaticSiteTriggersInput {
  contentTypeId: TSWhereStringInput
  status: TSWhereStringInput
}

type ReviewsIo_ListProductReviewsResponse {
  write_review_link: String
  word: String
  stats: ReviewsIo_ListProductReviewsResponseStatsProperty
  store: ReviewsIo_ListProductReviewsResponseStoreProperty
  reviews: ReviewsIo_ListProductReviewsResponseReviewsProperty
  products: [ReviewsIo_ListProductReviewsResponseProductsProperty]
  ratings: [JSONObject]
  settings: [JSONObject]
}

type ReviewsIo_ListProductReviewsResponseStatsProperty {
  average: Float
  count: Int
}

type ReviewsIo_ListProductReviewsResponseStoreProperty {
  name: String
  logo: String
}

type ReviewsIo_ListProductReviewsResponseReviewsProperty {
  total: Int
  per_page: Int
  current_page: Int
  last_page: Int
  from: Int
  to: Int
  data: [ReviewsIo_ProductReview]
}

type ReviewsIo_ProductReview {
  product_review_id: Int
  product_make: String
  order_id: String
  name: String
  sku: String
  review: String
  title: String
  rating: Int
  date_created: String
  votes: String
  flags: String
  timeago: String
  date_formatted: String
  product: ReviewsIo_Product
  ratings: [ReviewsIo_ProductReviewRatingsProperty]
  reviewer: ReviewsIo_Reviewer
  images: [JSONObject]
  replies: [JSONObject]
  tags: [String]
  author: ReviewsIo_ProductReviewAuthorProperty
}

type ReviewsIo_Product {
  """Product unique ID"""
  sku: String

  """Product name"""
  name: String

  """Product description"""
  description: String

  """Product image URL"""
  image_url: String

  """Product link URL"""
  link: String

  """Product MPN"""
  mpn: String

  """Product GTIN"""
  gtin: String

  """Product brand"""
  brand: String

  """Product category"""
  category: String

  """Product custom property"""
  custom: String

  """Product page url"""
  pageUrl: String
}

type ReviewsIo_ProductReviewRatingsProperty {
  name: String
  score: String
}

type ReviewsIo_Reviewer {
  user_id: Int
  first_name: String
  last_name: String
  verified_buyer: ReviewsIo_ReviewerVerifiedBuyerProperty
  address: String
  profile_picture: String
  gravatar: String
  email: String
  name_formatted: String
}

enum ReviewsIo_ReviewerVerifiedBuyerProperty {
  yes
  no
}

type ReviewsIo_ProductReviewAuthorProperty {
  email: String
}

type ReviewsIo_ListProductReviewsResponseProductsProperty {
  sku: String
  name: String
}

type Stripe_ProductPaginatedList {
  items: [Stripe_Product!]!
  total: Int!
}

type Stripe_Product implements TSSearchable {
  """Whether the product is currently available for purchase."""
  active: Boolean

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
  """
  description: String

  """Unique identifier for the object."""
  id: String

  """
  A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
  """
  images: [String]

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """The product's name, meant to be displayable to the customer."""
  name: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_ProductObjectProperty
  package_dimensions: Stripe_PackageDimensions

  """Whether this product is shipped (i.e., physical goods)."""
  shippable: Boolean

  """
  Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used.
  """
  statement_descriptor: String
  tax_code: Stripe_ProductTaxCodeProperty

  """
  A label that represents units of this product in Stripe and on customersâ€™ receipts and invoices. When set, this will be included in associated invoice line item descriptions.
  """
  unit_label: String

  """
  Time at which the object was last updated. Measured in seconds since the Unix epoch.
  """
  updated: Int

  """A URL of a publicly-accessible webpage for this product."""
  url: String
  prices: [Stripe_Price]
  reviews: ReviewsIo_ListProductReviewsResponse
  _shapeId: String
  _id: ID
  searchSummary: String
}

enum Stripe_ProductObjectProperty {
  product
}

type Stripe_PackageDimensions {
  """Height, in inches."""
  height: Float

  """Length, in inches."""
  length: Float

  """Weight, in ounces."""
  weight: Float

  """Width, in inches."""
  width: Float
}

union Stripe_ProductTaxCodeProperty = WrappedString | Stripe_TaxCode

type WrappedString {
  value: String!
}

type Stripe_TaxCode {
  """
  A detailed description of which types of products the tax code represents.
  """
  description: String

  """Unique identifier for the object."""
  id: String

  """A short name for the tax code."""
  name: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_TaxCodeObjectProperty
}

enum Stripe_TaxCodeObjectProperty {
  tax_code
}

type Stripe_Price {
  """Whether the price can be used for new purchases."""
  active: Boolean

  """
  Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
  """
  billing_scheme: Stripe_PriceBillingSchemeProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.
  """
  lookup_key: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """A brief description of the price, hidden from customers."""
  nickname: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_PriceObjectProperty

  """The Stripe product associated with this subscription."""
  product: Stripe_Product
  recurring: Stripe_Recurring

  """
  Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
  """
  tax_behavior: Stripe_PriceTaxBehaviorProperty

  """
  Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
  """
  tiers: [Stripe_PriceTier]

  """
  Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
  """
  tiers_mode: Stripe_PriceTiersModeProperty
  transform_quantity: Stripe_TransformQuantity

  """
  One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
  """
  type: Stripe_PriceTypeProperty

  """
  The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
  """
  unit_amount: Int

  """
  The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
  """
  unit_amount_decimal: String
}

enum Stripe_PriceBillingSchemeProperty {
  per_unit
  tiered
}

enum Stripe_PriceObjectProperty {
  price
}

type Stripe_Recurring {
  """
  Specifies a usage aggregation strategy for prices of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
  """
  aggregate_usage: Stripe_RecurringAggregateUsageProperty

  """
  The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
  """
  interval: Stripe_RecurringIntervalProperty

  """
  The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
  """
  interval_count: Int

  """
  Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
  """
  usage_type: Stripe_RecurringUsageTypeProperty
}

enum Stripe_RecurringAggregateUsageProperty {
  last_during_period
  last_ever
  max
  sum
}

enum Stripe_RecurringIntervalProperty {
  day
  month
  week
  year
}

enum Stripe_RecurringUsageTypeProperty {
  licensed
  metered
}

enum Stripe_PriceTaxBehaviorProperty {
  exclusive
  inclusive
  unspecified
}

type Stripe_PriceTier {
  """Price for the entire tier."""
  flat_amount: Int

  """
  Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.
  """
  flat_amount_decimal: String

  """Per unit price for units relevant to the tier."""
  unit_amount: Int

  """
  Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
  """
  unit_amount_decimal: String

  """Up to and including to this quantity will be contained in the tier."""
  up_to: Int
}

enum Stripe_PriceTiersModeProperty {
  graduated
  volume
}

type Stripe_TransformQuantity {
  """Divide usage by this number."""
  divide_by: Int

  """After division, either round the result `up` or `down`."""
  round: Stripe_TransformQuantityRoundProperty
}

enum Stripe_TransformQuantityRoundProperty {
  down
  up
}

enum Stripe_PriceTypeProperty {
  one_time
  recurring
}

input TSWhereStripeProductInput {
  active: TSWhereBooleanInput
  created: TSWhereIntegerInput
  description: TSWhereStringInput
  id: TSWhereStringInput
  images: TSWhereStripe_ProductImagesInput
  livemode: TSWhereBooleanInput
  name: TSWhereStringInput
  object: TSWhereInput
  package_dimensions: TSWhereStripe_PackageDimensionsInput
  shippable: TSWhereBooleanInput
  statement_descriptor: TSWhereStringInput
  tax_code: TSWhereStripe_TaxCodeWrappedStringUnionInput
  unit_label: TSWhereStringInput
  updated: TSWhereIntegerInput
  url: TSWhereStringInput
  prices: TSWhereStripe_PriceInput
  reviews: TSWhereReviewsIo_ListProductReviewsResponseInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  AND: [TSWhereStripeProductInput]
  OR: [TSWhereStripeProductInput]
  NOT: TSWhereStripeProductInput
}

input TSWhereStripe_ProductImagesInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereInput {
  title: TSWhereStringInput
  description: TSWhereStringInput
  filename: TSWhereStringInput
  caption: TSWhereDraftjsInput
  credit: TSWhereDraftjsInput
  path: TSWhereStringInput
  mimeType: TSWhereStringInput
  sourceUrl: TSWhereStringInput
  uploadStatus: TSWhereStringInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
  s3Key: TSWhereStringInput
  baseUrl: TSWhereStringInput
  provider: TSWhereStringInput
  idKey: TSWhereStringInput
  destination: TSWhereStringInput
  privateAcl: TSWhereBooleanInput
  environmentVariables: TSWhereTsStaticSiteEnvironmentVariablesInput
  triggers: TSWhereTsStaticSiteTriggersInput
  templateHash: TSWhereStringInput
  amount: TSWhereIntegerInput
  amount_capturable: TSWhereIntegerInput
  amount_details: TSWhereStripe_PaymentFlowsAmountDetailsInput
  amount_received: TSWhereIntegerInput
  application: TSWhereStripe_ApplicationWrappedStringUnionInput
  application_fee_amount: TSWhereIntegerInput
  automatic_payment_methods: TSWhereStripe_PaymentFlowsAutomaticPaymentMethodsPaymentIntentInput
  canceled_at: TSWhereIntegerInput
  cancellation_reason: TSWhereInput
  capture_method: TSWhereInput
  charges: TSWhereStripe_PaymentIntentChargesInput
  client_secret: TSWhereStringInput
  confirmation_method: TSWhereInput
  created: TSWhereIntegerInput
  currency: TSWhereStringInput
  customer: TSWhereStringInput
  id: TSWhereStringInput
  invoice: TSWhereStripe_InvoiceWrappedStringUnionInput
  last_payment_error: TSWhereStripe_ApiErrorsInput
  livemode: TSWhereBooleanInput
  next_action: TSWhereStripe_PaymentIntentNextActionInput
  object: TSWhereInput
  on_behalf_of: TSWhereStripe_AccountWrappedStringUnionInput
  payment_method: TSWhereStripe_PaymentMethodWrappedStringUnionInput
  payment_method_options: TSWhereStripe_PaymentIntentPaymentMethodOptionsInput
  payment_method_types: TSWhereStripe_PaymentIntentPaymentMethodTypesInput
  processing: TSWhereStripe_PaymentIntentProcessingInput
  receipt_email: TSWhereStringInput
  review: TSWhereStripe_ReviewWrappedStringUnionInput
  setup_future_usage: TSWhereInput
  shipping: TSWhereStripe_ShippingInput
  statement_descriptor: TSWhereStringInput
  statement_descriptor_suffix: TSWhereStringInput
  status: TSWhereInput
  transfer_data: TSWhereStripe_TransferDataInput
  transfer_group: TSWhereStringInput
  invoiceItems: TSWhereStripe_InvoiceitemInput
  sessionItems: TSWhereStripe_ItemInput
  shipment: TSWhereShipEngine_LabelInput
  active: TSWhereBooleanInput
  images: TSWhereStripe_ProductImagesInput
  name: TSWhereStringInput
  package_dimensions: TSWhereStripe_PackageDimensionsInput
  shippable: TSWhereBooleanInput
  tax_code: TSWhereStripe_TaxCodeWrappedStringUnionInput
  unit_label: TSWhereStringInput
  updated: TSWhereIntegerInput
  url: TSWhereStringInput
  prices: TSWhereStripe_PriceInput
  reviews: TSWhereReviewsIo_ListProductReviewsResponseInput
  email: TSWhereStringInput
  bio: TSWhereStringInput
  avatar: TSWhereAssetRelationshipInput
  shopifyCustomerId: TSWhereStringInput
  stripeCustomerId: TSWhereStringInput
  message: TSWhereStringInput
  links: TSWhereNavigationDataLinksInput
  navigation: TSWhereFooterNavigationInput
  newsletter: TSWhereFooterNewsletterInput
  components: TSWhereStorefrontComponentsInput
  shopifyProductId: TSWhereStringInput
  AND: [TSWhereInput]
  OR: [TSWhereInput]
  NOT: TSWhereInput
}

input TSWhereStripe_PaymentFlowsAmountDetailsInput {
  tip: TSWhereStripe_PaymentFlowsAmountDetailsResourceTipInput
}

input TSWhereStripe_PaymentFlowsAmountDetailsResourceTipInput {
  amount: TSWhereIntegerInput
}

input TSWhereStripe_ApplicationWrappedStringUnionInput {
  value: TSWhereStringInput
  id: TSWhereStringInput
  name: TSWhereStringInput
  object: TSWhereInput
}

input TSWhereStripe_PaymentFlowsAutomaticPaymentMethodsPaymentIntentInput {
  enabled: TSWhereBooleanInput
}

input TSWhereStripe_PaymentIntentChargesInput {
  data: TSWhereStripe_ChargeInput
  has_more: TSWhereBooleanInput
  object: TSWhereInput
  url: TSWhereStringInput
}

input TSWhereStripe_ChargeInput {
  amount: TSWhereIntegerInput
  amount_captured: TSWhereIntegerInput
  amount_refunded: TSWhereIntegerInput
  application: TSWhereStripe_ApplicationWrappedStringUnionInput
  application_fee: TSWhereStripe_ApplicationFeeWrappedStringUnionInput
  application_fee_amount: TSWhereIntegerInput
  balance_transaction: TSWhereStripe_BalanceTransactionWrappedStringUnionInput
  billing_details: TSWhereStripe_BillingDetailsInput
  calculated_statement_descriptor: TSWhereStringInput
  captured: TSWhereBooleanInput
  created: TSWhereIntegerInput
  currency: TSWhereStringInput
  customer: TSWhereStringInput
  description: TSWhereStringInput
  disputed: TSWhereBooleanInput
  failure_balance_transaction: TSWhereStripe_BalanceTransactionWrappedStringUnionInput
  failure_code: TSWhereStringInput
  failure_message: TSWhereStringInput
  fraud_details: TSWhereStripe_ChargeFraudDetailsInput
  id: TSWhereStringInput
  invoice: TSWhereStripe_InvoiceWrappedStringUnionInput
  livemode: TSWhereBooleanInput
  object: TSWhereInput
  on_behalf_of: TSWhereStripe_AccountWrappedStringUnionInput
  order: TSWhereStripe_OrderWrappedStringUnionInput
  outcome: TSWhereStripe_ChargeOutcomeInput
  paid: TSWhereBooleanInput
  payment_intent: TSWhereStripe_PaymentIntentWrappedStringUnionInput
  payment_method: TSWhereStringInput
  payment_method_details: TSWhereStripe_PaymentMethodDetailsInput
  receipt_email: TSWhereStringInput
  receipt_number: TSWhereStringInput
  receipt_url: TSWhereStringInput
  refunded: TSWhereBooleanInput
  refunds: TSWhereStripe_PaymentIntentRefundsInput
  review: TSWhereStripe_ReviewWrappedStringUnionInput
  shipping: TSWhereStripe_ShippingInput
  source_transfer: TSWhereStripe_TransferWrappedStringUnionInput
  statement_descriptor: TSWhereStringInput
  statement_descriptor_suffix: TSWhereStringInput
  status: TSWhereInput
  transfer: TSWhereStripe_TransferWrappedStringUnionInput
  transfer_data: TSWhereStripe_ChargeTransferDataInput
  transfer_group: TSWhereStringInput
}

input TSWhereStripe_ApplicationFeeWrappedStringUnionInput {
  value: TSWhereStringInput
  amount: TSWhereIntegerInput
  amount_refunded: TSWhereIntegerInput
  created: TSWhereIntegerInput
  currency: TSWhereStringInput
  id: TSWhereStringInput
  livemode: TSWhereBooleanInput
  object: TSWhereInput
  refunded: TSWhereBooleanInput
  refunds: TSWhereStripe_ApplicationFeeRefundsInput
}

input TSWhereStripe_ApplicationFeeRefundsInput {
  data: TSWhereStripe_FeeRefundInput
  has_more: TSWhereBooleanInput
  object: TSWhereInput
  url: TSWhereStringInput
}

input TSWhereStripe_FeeRefundInput {
  amount: TSWhereIntegerInput
  created: TSWhereIntegerInput
  currency: TSWhereStringInput
  id: TSWhereStringInput
  object: TSWhereInput
}

input TSWhereStripe_BalanceTransactionWrappedStringUnionInput {
  value: TSWhereStringInput
  amount: TSWhereIntegerInput
  available_on: TSWhereIntegerInput
  created: TSWhereIntegerInput
  currency: TSWhereStringInput
  description: TSWhereStringInput
  exchange_rate: TSWhereNumberInput
  fee: TSWhereIntegerInput
  fee_details: TSWhereStripe_FeeInput
  id: TSWhereStringInput
  net: TSWhereIntegerInput
  object: TSWhereInput
  reporting_category: TSWhereStringInput
  status: TSWhereStringInput
  type: TSWhereInput
}

input TSWhereStripe_FeeInput {
  amount: TSWhereIntegerInput
  application: TSWhereStringInput
  currency: TSWhereStringInput
  description: TSWhereStringInput
  type: TSWhereStringInput
}

input TSWhereStripe_BillingDetailsInput {
  address: TSWhereStripe_AddressInput
  email: TSWhereStringInput
  name: TSWhereStringInput
  phone: TSWhereStringInput
}

input TSWhereStripe_AddressInput {
  city: TSWhereStringInput
  country: TSWhereStringInput
  line1: TSWhereStringInput
  line2: TSWhereStringInput
  postal_code: TSWhereStringInput
  state: TSWhereStringInput
}

input TSWhereStripe_ChargeFraudDetailsInput {
  stripe_report: TSWhereStringInput
  user_report: TSWhereStringInput
}

input TSWhereStripe_InvoiceWrappedStringUnionInput {
  value: TSWhereStringInput
  account_country: TSWhereStringInput
  account_name: TSWhereStringInput
  account_tax_ids: TSWhereStripe_InvoiceAccountTaxIdsInput
  amount_due: TSWhereIntegerInput
  amount_paid: TSWhereIntegerInput
  amount_remaining: TSWhereIntegerInput
  application_fee_amount: TSWhereIntegerInput
  attempt_count: TSWhereIntegerInput
  attempted: TSWhereBooleanInput
  auto_advance: TSWhereBooleanInput
  automatic_tax: TSWhereStripe_AutomaticTaxInput
  billing_reason: TSWhereInput
  collection_method: TSWhereInput
  created: TSWhereIntegerInput
  currency: TSWhereStringInput
  custom_fields: TSWhereStripe_InvoiceSettingCustomFieldInput
  customer: TSWhereStringInput
  customer_address: TSWhereStripe_AddressInput
  customer_email: TSWhereStringInput
  customer_name: TSWhereStringInput
  customer_phone: TSWhereStringInput
  customer_shipping: TSWhereStripe_ShippingInput
  customer_tax_exempt: TSWhereInput
  customer_tax_ids: TSWhereStripe_InvoicesResourceInvoiceTaxIdInput
  default_tax_rates: TSWhereStripe_TaxRateInput
  description: TSWhereStringInput
  discount: TSWhereStripe_DiscountInput
  discounts: TSWhereStripe_InvoiceDiscountsInput
  due_date: TSWhereIntegerInput
  ending_balance: TSWhereIntegerInput
  footer: TSWhereStringInput
  hosted_invoice_url: TSWhereStringInput
  id: TSWhereStringInput
  invoice_pdf: TSWhereStringInput
  last_finalization_error: TSWhereStripe_ApiErrorsInput
  lines: TSWhereStripe_InvoiceLinesInput
  livemode: TSWhereBooleanInput
  next_payment_attempt: TSWhereIntegerInput
  number: TSWhereStringInput
  object: TSWhereInput
  paid: TSWhereBooleanInput
  paid_out_of_band: TSWhereBooleanInput
  payment_settings: TSWhereStripe_InvoicesPaymentSettingsInput
  period_end: TSWhereIntegerInput
  period_start: TSWhereIntegerInput
  post_payment_credit_notes_amount: TSWhereIntegerInput
  pre_payment_credit_notes_amount: TSWhereIntegerInput
  receipt_number: TSWhereStringInput
  starting_balance: TSWhereIntegerInput
  statement_descriptor: TSWhereStringInput
  status: TSWhereInput
  status_transitions: TSWhereStripe_InvoicesStatusTransitionsInput
  subscription_proration_date: TSWhereIntegerInput
  subtotal: TSWhereIntegerInput
  tax: TSWhereIntegerInput
  threshold_reason: TSWhereStripe_InvoiceThresholdReasonInput
  total: TSWhereIntegerInput
  total_discount_amounts: TSWhereStripe_DiscountsResourceDiscountAmountInput
  total_tax_amounts: TSWhereStripe_InvoiceTaxAmountInput
  transfer_data: TSWhereStripe_InvoiceTransferDataInput
  webhooks_delivered_at: TSWhereIntegerInput
}

input TSWhereStripe_InvoiceAccountTaxIdsInput {
  value: TSWhereStringInput
  country: TSWhereStringInput
  created: TSWhereIntegerInput
  id: TSWhereStringInput
  livemode: TSWhereBooleanInput
  object: TSWhereInput
  type: TSWhereInput
  verification: TSWhereStripe_TaxIdVerificationInput
}

input TSWhereStripe_TaxIdVerificationInput {
  status: TSWhereInput
  verified_address: TSWhereStringInput
  verified_name: TSWhereStringInput
}

input TSWhereStripe_AutomaticTaxInput {
  enabled: TSWhereBooleanInput
  status: TSWhereInput
}

input TSWhereStripe_InvoiceSettingCustomFieldInput {
  name: TSWhereStringInput
  value: TSWhereStringInput
}

input TSWhereStripe_ShippingInput {
  address: TSWhereStripe_AddressInput
  carrier: TSWhereStringInput
  name: TSWhereStringInput
  phone: TSWhereStringInput
  tracking_number: TSWhereStringInput
}

input TSWhereStripe_InvoicesResourceInvoiceTaxIdInput {
  type: TSWhereInput
  value: TSWhereStringInput
}

input TSWhereStripe_TaxRateInput {
  active: TSWhereBooleanInput
  country: TSWhereStringInput
  created: TSWhereIntegerInput
  description: TSWhereStringInput
  display_name: TSWhereStringInput
  id: TSWhereStringInput
  inclusive: TSWhereBooleanInput
  jurisdiction: TSWhereStringInput
  livemode: TSWhereBooleanInput
  object: TSWhereInput
  percentage: TSWhereNumberInput
  state: TSWhereStringInput
  tax_type: TSWhereInput
}

input TSWhereStripe_DiscountInput {
  checkout_session: TSWhereStringInput
  coupon: TSWhereStripe_CouponInput
  customer: TSWhereStringInput
  end: TSWhereIntegerInput
  id: TSWhereStringInput
  invoice: TSWhereStringInput
  invoice_item: TSWhereStringInput
  object: TSWhereInput
  start: TSWhereIntegerInput
  subscription: TSWhereStringInput
}

input TSWhereStripe_CouponInput {
  amount_off: TSWhereIntegerInput
  applies_to: TSWhereStripe_CouponAppliesToInput
  created: TSWhereIntegerInput
  currency: TSWhereStringInput
  duration: TSWhereInput
  duration_in_months: TSWhereIntegerInput
  id: TSWhereStringInput
  livemode: TSWhereBooleanInput
  max_redemptions: TSWhereIntegerInput
  name: TSWhereStringInput
  object: TSWhereInput
  percent_off: TSWhereNumberInput
  redeem_by: TSWhereIntegerInput
  times_redeemed: TSWhereIntegerInput
  valid: TSWhereBooleanInput
}

input TSWhereStripe_CouponAppliesToInput {
  products: TSWhereStripe_InvoiceProductsInput
}

input TSWhereStripe_InvoiceProductsInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereStripe_InvoiceDiscountsInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereStripe_ApiErrorsInput {
  charge: TSWhereStringInput
  code: TSWhereStringInput
  decline_code: TSWhereStringInput
  doc_url: TSWhereStringInput
  message: TSWhereStringInput
  param: TSWhereStringInput
  payment_intent: TSWhereStripe_PaymentIntentInput
  payment_method: TSWhereStripe_PaymentMethodInput
  payment_method_type: TSWhereStringInput
  setup_intent: TSWhereStripe_SetupIntentInput
  source: TSWhereStripe_BankAccountStripe_CardStripe_SourceUnionInput
  type: TSWhereInput
}

input TSWhereStripe_PaymentIntentInput {
  amount: TSWhereIntegerInput
  amount_capturable: TSWhereIntegerInput
  amount_details: TSWhereStripe_PaymentFlowsAmountDetailsInput
  amount_received: TSWhereIntegerInput
  application: TSWhereStripe_ApplicationWrappedStringUnionInput
  application_fee_amount: TSWhereIntegerInput
  automatic_payment_methods: TSWhereStripe_PaymentFlowsAutomaticPaymentMethodsPaymentIntentInput
  canceled_at: TSWhereIntegerInput
  cancellation_reason: TSWhereInput
  capture_method: TSWhereInput
  charges: TSWhereStripe_PaymentIntentChargesInput
  client_secret: TSWhereStringInput
  confirmation_method: TSWhereInput
  created: TSWhereIntegerInput
  currency: TSWhereStringInput
  customer: TSWhereStringInput
  description: TSWhereStringInput
  id: TSWhereStringInput
  invoice: TSWhereStripe_InvoiceWrappedStringUnionInput
  last_payment_error: TSWhereStripe_ApiErrorsInput
  livemode: TSWhereBooleanInput
  next_action: TSWhereStripe_PaymentIntentNextActionInput
  object: TSWhereInput
  on_behalf_of: TSWhereStripe_AccountWrappedStringUnionInput
  payment_method: TSWhereStripe_PaymentMethodWrappedStringUnionInput
  payment_method_options: TSWhereStripe_PaymentIntentPaymentMethodOptionsInput
  payment_method_types: TSWhereStripe_PaymentIntentPaymentMethodTypesInput
  processing: TSWhereStripe_PaymentIntentProcessingInput
  receipt_email: TSWhereStringInput
  review: TSWhereStripe_ReviewWrappedStringUnionInput
  setup_future_usage: TSWhereInput
  shipping: TSWhereStripe_ShippingInput
  statement_descriptor: TSWhereStringInput
  statement_descriptor_suffix: TSWhereStringInput
  status: TSWhereInput
  transfer_data: TSWhereStripe_TransferDataInput
  transfer_group: TSWhereStringInput
  invoiceItems: TSWhereStripe_InvoiceitemInput
  sessionItems: TSWhereStripe_ItemInput
  shipment: TSWhereShipEngine_LabelInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
}

input TSWhereStripe_PaymentIntentNextActionInput {
  alipay_handle_redirect: TSWhereStripe_PaymentIntentNextActionAlipayHandleRedirectInput
  boleto_display_details: TSWhereStripe_PaymentIntentNextActionBoletoInput
  card_await_notification: TSWhereStripe_PaymentIntentNextActionCardAwaitNotificationInput
  display_bank_transfer_instructions: TSWhereStripe_PaymentIntentNextActionDisplayBankTransferInstructionsInput
  konbini_display_details: TSWhereStripe_PaymentIntentNextActionKonbiniInput
  oxxo_display_details: TSWhereStripe_PaymentIntentNextActionDisplayOxxoDetailsInput
  paynow_display_qr_code: TSWhereStripe_PaymentIntentNextActionPaynowDisplayQrCodeInput
  redirect_to_url: TSWhereStripe_PaymentIntentNextActionRedirectToUrlInput
  type: TSWhereStringInput
  verify_with_microdeposits: TSWhereStripe_PaymentIntentNextActionVerifyWithMicrodepositsInput
  wechat_pay_display_qr_code: TSWhereStripe_PaymentIntentNextActionWechatPayDisplayQrCodeInput
  wechat_pay_redirect_to_android_app: TSWhereStripe_PaymentIntentNextActionWechatPayRedirectToAndroidAppInput
  wechat_pay_redirect_to_ios_app: TSWhereStripe_PaymentIntentNextActionWechatPayRedirectToIosAppInput
}

input TSWhereStripe_PaymentIntentNextActionAlipayHandleRedirectInput {
  native_data: TSWhereStringInput
  native_url: TSWhereStringInput
  return_url: TSWhereStringInput
  url: TSWhereStringInput
}

input TSWhereStripe_PaymentIntentNextActionBoletoInput {
  expires_at: TSWhereIntegerInput
  hosted_voucher_url: TSWhereStringInput
  number: TSWhereStringInput
  pdf: TSWhereStringInput
}

input TSWhereStripe_PaymentIntentNextActionCardAwaitNotificationInput {
  charge_attempt_at: TSWhereIntegerInput
  customer_approval_required: TSWhereBooleanInput
}

input TSWhereStripe_PaymentIntentNextActionDisplayBankTransferInstructionsInput {
  amount_remaining: TSWhereIntegerInput
  currency: TSWhereStringInput
  financial_addresses: TSWhereStripe_FundingInstructionsBankTransferFinancialAddressInput
  reference: TSWhereStringInput
  type: TSWhereInput
}

input TSWhereStripe_FundingInstructionsBankTransferFinancialAddressInput {
  type: TSWhereInput
}

input TSWhereStripe_PaymentIntentNextActionKonbiniInput {
  expires_at: TSWhereIntegerInput
  hosted_voucher_url: TSWhereStringInput
  stores: TSWhereStripe_PaymentIntentNextActionKonbiniStoresInput
}

input TSWhereStripe_PaymentIntentNextActionKonbiniStoresInput {
  familymart: TSWhereStripe_PaymentIntentNextActionKonbiniFamilymartInput
  lawson: TSWhereStripe_PaymentIntentNextActionKonbiniLawsonInput
  ministop: TSWhereStripe_PaymentIntentNextActionKonbiniMinistopInput
  seicomart: TSWhereStripe_PaymentIntentNextActionKonbiniSeicomartInput
}

input TSWhereStripe_PaymentIntentNextActionKonbiniFamilymartInput {
  confirmation_number: TSWhereStringInput
  payment_code: TSWhereStringInput
}

input TSWhereStripe_PaymentIntentNextActionKonbiniLawsonInput {
  confirmation_number: TSWhereStringInput
  payment_code: TSWhereStringInput
}

input TSWhereStripe_PaymentIntentNextActionKonbiniMinistopInput {
  confirmation_number: TSWhereStringInput
  payment_code: TSWhereStringInput
}

input TSWhereStripe_PaymentIntentNextActionKonbiniSeicomartInput {
  confirmation_number: TSWhereStringInput
  payment_code: TSWhereStringInput
}

input TSWhereStripe_PaymentIntentNextActionDisplayOxxoDetailsInput {
  expires_after: TSWhereIntegerInput
  hosted_voucher_url: TSWhereStringInput
  number: TSWhereStringInput
}

input TSWhereStripe_PaymentIntentNextActionPaynowDisplayQrCodeInput {
  data: TSWhereStringInput
  image_url_png: TSWhereStringInput
  image_url_svg: TSWhereStringInput
}

input TSWhereStripe_PaymentIntentNextActionRedirectToUrlInput {
  return_url: TSWhereStringInput
  url: TSWhereStringInput
}

input TSWhereStripe_PaymentIntentNextActionVerifyWithMicrodepositsInput {
  arrival_date: TSWhereIntegerInput
  hosted_verification_url: TSWhereStringInput
  microdeposit_type: TSWhereInput
}

input TSWhereStripe_PaymentIntentNextActionWechatPayDisplayQrCodeInput {
  data: TSWhereStringInput
  image_data_url: TSWhereStringInput
  image_url_png: TSWhereStringInput
  image_url_svg: TSWhereStringInput
}

input TSWhereStripe_PaymentIntentNextActionWechatPayRedirectToAndroidAppInput {
  app_id: TSWhereStringInput
  nonce_str: TSWhereStringInput
  package: TSWhereStringInput
  partner_id: TSWhereStringInput
  prepay_id: TSWhereStringInput
  sign: TSWhereStringInput
  timestamp: TSWhereStringInput
}

input TSWhereStripe_PaymentIntentNextActionWechatPayRedirectToIosAppInput {
  native_url: TSWhereStringInput
}

input TSWhereStripe_AccountWrappedStringUnionInput {
  value: TSWhereStringInput
  business_profile: TSWhereStripe_AccountBusinessProfileInput
  business_type: TSWhereInput
  capabilities: TSWhereStripe_AccountCapabilitiesInput
  charges_enabled: TSWhereBooleanInput
  company: TSWhereStripe_LegalEntityCompanyInput
  controller: TSWhereStripe_AccountUnificationAccountControllerInput
  country: TSWhereStringInput
  created: TSWhereIntegerInput
  default_currency: TSWhereStringInput
  details_submitted: TSWhereBooleanInput
  email: TSWhereStringInput
  external_accounts: TSWhereStripe_AccountExternalAccountsInput
  future_requirements: TSWhereStripe_AccountFutureRequirementsInput
  id: TSWhereStringInput
  individual: TSWhereStripe_PersonInput
  object: TSWhereInput
  payouts_enabled: TSWhereBooleanInput
  requirements: TSWhereStripe_AccountRequirementsInput
  settings: TSWhereStripe_AccountSettingsInput
  tos_acceptance: TSWhereStripe_AccountTosAcceptanceInput
  type: TSWhereInput
}

input TSWhereStripe_AccountBusinessProfileInput {
  mcc: TSWhereStringInput
  name: TSWhereStringInput
  product_description: TSWhereStringInput
  support_address: TSWhereStripe_AddressInput
  support_email: TSWhereStringInput
  support_phone: TSWhereStringInput
  support_url: TSWhereStringInput
  url: TSWhereStringInput
}

input TSWhereStripe_AccountCapabilitiesInput {
  acss_debit_payments: TSWhereInput
  afterpay_clearpay_payments: TSWhereInput
  au_becs_debit_payments: TSWhereInput
  bacs_debit_payments: TSWhereInput
  bancontact_payments: TSWhereInput
  bank_transfer_payments: TSWhereInput
  boleto_payments: TSWhereInput
  card_issuing: TSWhereInput
  card_payments: TSWhereInput
  cartes_bancaires_payments: TSWhereInput
  eps_payments: TSWhereInput
  fpx_payments: TSWhereInput
  giropay_payments: TSWhereInput
  grabpay_payments: TSWhereInput
  ideal_payments: TSWhereInput
  jcb_payments: TSWhereInput
  klarna_payments: TSWhereInput
  konbini_payments: TSWhereInput
  legacy_payments: TSWhereInput
  oxxo_payments: TSWhereInput
  p24_payments: TSWhereInput
  paynow_payments: TSWhereInput
  sepa_debit_payments: TSWhereInput
  sofort_payments: TSWhereInput
  tax_reporting_us_1099_k: TSWhereInput
  tax_reporting_us_1099_misc: TSWhereInput
  transfers: TSWhereInput
  us_bank_account_ach_payments: TSWhereInput
}

input TSWhereStripe_LegalEntityCompanyInput {
  address: TSWhereStripe_AddressInput
  address_kana: TSWhereStripe_LegalEntityJapanAddressInput
  address_kanji: TSWhereStripe_LegalEntityJapanAddressInput
  directors_provided: TSWhereBooleanInput
  executives_provided: TSWhereBooleanInput
  name: TSWhereStringInput
  name_kana: TSWhereStringInput
  name_kanji: TSWhereStringInput
  owners_provided: TSWhereBooleanInput
  ownership_declaration: TSWhereStripe_LegalEntityUboDeclarationInput
  phone: TSWhereStringInput
  structure: TSWhereInput
  tax_id_provided: TSWhereBooleanInput
  tax_id_registrar: TSWhereStringInput
  vat_id_provided: TSWhereBooleanInput
  verification: TSWhereStripe_LegalEntityCompanyVerificationInput
}

input TSWhereStripe_LegalEntityJapanAddressInput {
  city: TSWhereStringInput
  country: TSWhereStringInput
  line1: TSWhereStringInput
  line2: TSWhereStringInput
  postal_code: TSWhereStringInput
  state: TSWhereStringInput
  town: TSWhereStringInput
}

input TSWhereStripe_LegalEntityUboDeclarationInput {
  date: TSWhereIntegerInput
  ip: TSWhereStringInput
  user_agent: TSWhereStringInput
}

input TSWhereStripe_LegalEntityCompanyVerificationInput {
  document: TSWhereStripe_LegalEntityCompanyVerificationDocumentInput
}

input TSWhereStripe_LegalEntityCompanyVerificationDocumentInput {
  details: TSWhereStringInput
  details_code: TSWhereStringInput
}

input TSWhereStripe_AccountUnificationAccountControllerInput {
  is_controller: TSWhereBooleanInput
  type: TSWhereInput
}

input TSWhereStripe_AccountExternalAccountsInput {
  data: TSWhereStripe_AccountDataInput
  has_more: TSWhereBooleanInput
  object: TSWhereInput
  url: TSWhereStringInput
}

input TSWhereStripe_AccountDataInput {
  account_holder_name: TSWhereStringInput
  account_holder_type: TSWhereStringInput
  account_type: TSWhereStringInput
  bank_name: TSWhereStringInput
  country: TSWhereStringInput
  currency: TSWhereStringInput
  customer: TSWhereStringInput
  default_for_currency: TSWhereBooleanInput
  fingerprint: TSWhereStringInput
  id: TSWhereStringInput
  last4: TSWhereStringInput
  object: TSWhereInput
  routing_number: TSWhereStringInput
  status: TSWhereStringInput
  address_city: TSWhereStringInput
  address_country: TSWhereStringInput
  address_line1: TSWhereStringInput
  address_line1_check: TSWhereStringInput
  address_line2: TSWhereStringInput
  address_state: TSWhereStringInput
  address_zip: TSWhereStringInput
  address_zip_check: TSWhereStringInput
  brand: TSWhereStringInput
  cvc_check: TSWhereStringInput
  dynamic_last4: TSWhereStringInput
  exp_month: TSWhereIntegerInput
  exp_year: TSWhereIntegerInput
  funding: TSWhereStringInput
  name: TSWhereStringInput
  tokenization_method: TSWhereStringInput
}

input TSWhereStripe_AccountFutureRequirementsInput {
  alternatives: TSWhereStripe_AccountRequirementsAlternativeInput
  current_deadline: TSWhereIntegerInput
  currently_due: TSWhereStripe_AccountCurrentlyDueInput
  disabled_reason: TSWhereStringInput
  errors: TSWhereStripe_AccountRequirementsErrorInput
  eventually_due: TSWhereStripe_AccountEventuallyDueInput
  past_due: TSWhereStripe_AccountPastDueInput
  pending_verification: TSWhereStripe_AccountPendingVerificationInput
}

input TSWhereStripe_AccountRequirementsAlternativeInput {
  alternative_fields_due: TSWhereStripe_AccountAlternativeFieldsDueInput
  original_fields_due: TSWhereStripe_AccountOriginalFieldsDueInput
}

input TSWhereStripe_AccountAlternativeFieldsDueInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereStripe_AccountOriginalFieldsDueInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereStripe_AccountCurrentlyDueInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereStripe_AccountRequirementsErrorInput {
  code: TSWhereInput
  reason: TSWhereStringInput
  requirement: TSWhereStringInput
}

input TSWhereStripe_AccountEventuallyDueInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereStripe_AccountPastDueInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereStripe_AccountPendingVerificationInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereStripe_PersonInput {
  account: TSWhereStringInput
  address: TSWhereStripe_AddressInput
  address_kana: TSWhereStripe_LegalEntityJapanAddressInput
  address_kanji: TSWhereStripe_LegalEntityJapanAddressInput
  created: TSWhereIntegerInput
  dob: TSWhereStripe_LegalEntityDobInput
  email: TSWhereStringInput
  first_name: TSWhereStringInput
  first_name_kana: TSWhereStringInput
  first_name_kanji: TSWhereStringInput
  full_name_aliases: TSWhereStripe_AccountFullNameAliasesInput
  future_requirements: TSWhereStripe_PersonFutureRequirementsInput
  gender: TSWhereStringInput
  id: TSWhereStringInput
  id_number_provided: TSWhereBooleanInput
  last_name: TSWhereStringInput
  last_name_kana: TSWhereStringInput
  last_name_kanji: TSWhereStringInput
  maiden_name: TSWhereStringInput
  nationality: TSWhereStringInput
  object: TSWhereInput
  phone: TSWhereStringInput
  political_exposure: TSWhereInput
  relationship: TSWhereStripe_PersonRelationshipInput
  requirements: TSWhereStripe_PersonRequirementsInput
  ssn_last_4_provided: TSWhereBooleanInput
  verification: TSWhereStripe_LegalEntityPersonVerificationInput
}

input TSWhereStripe_LegalEntityDobInput {
  day: TSWhereIntegerInput
  month: TSWhereIntegerInput
  year: TSWhereIntegerInput
}

input TSWhereStripe_AccountFullNameAliasesInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereStripe_PersonFutureRequirementsInput {
  alternatives: TSWhereStripe_AccountRequirementsAlternativeInput
  currently_due: TSWhereStripe_AccountCurrentlyDueInput
  errors: TSWhereStripe_AccountRequirementsErrorInput
  eventually_due: TSWhereStripe_AccountEventuallyDueInput
  past_due: TSWhereStripe_AccountPastDueInput
  pending_verification: TSWhereStripe_AccountPendingVerificationInput
}

input TSWhereStripe_PersonRelationshipInput {
  director: TSWhereBooleanInput
  executive: TSWhereBooleanInput
  owner: TSWhereBooleanInput
  percent_ownership: TSWhereNumberInput
  representative: TSWhereBooleanInput
  title: TSWhereStringInput
}

input TSWhereStripe_PersonRequirementsInput {
  alternatives: TSWhereStripe_AccountRequirementsAlternativeInput
  currently_due: TSWhereStripe_AccountCurrentlyDueInput
  errors: TSWhereStripe_AccountRequirementsErrorInput
  eventually_due: TSWhereStripe_AccountEventuallyDueInput
  past_due: TSWhereStripe_AccountPastDueInput
  pending_verification: TSWhereStripe_AccountPendingVerificationInput
}

input TSWhereStripe_LegalEntityPersonVerificationInput {
  additional_document: TSWhereStripe_LegalEntityPersonVerificationDocumentInput
  details: TSWhereStringInput
  details_code: TSWhereStringInput
  document: TSWhereStripe_LegalEntityPersonVerificationDocumentInput
  status: TSWhereStringInput
}

input TSWhereStripe_LegalEntityPersonVerificationDocumentInput {
  details: TSWhereStringInput
  details_code: TSWhereStringInput
}

input TSWhereStripe_AccountRequirementsInput {
  alternatives: TSWhereStripe_AccountRequirementsAlternativeInput
  current_deadline: TSWhereIntegerInput
  currently_due: TSWhereStripe_AccountCurrentlyDueInput
  disabled_reason: TSWhereStringInput
  errors: TSWhereStripe_AccountRequirementsErrorInput
  eventually_due: TSWhereStripe_AccountEventuallyDueInput
  past_due: TSWhereStripe_AccountPastDueInput
  pending_verification: TSWhereStripe_AccountPendingVerificationInput
}

input TSWhereStripe_AccountSettingsInput {
  bacs_debit_payments: TSWhereStripe_AccountBacsDebitPaymentsSettingsInput
  branding: TSWhereStripe_AccountBrandingSettingsInput
  card_issuing: TSWhereStripe_AccountCardIssuingSettingsInput
  card_payments: TSWhereStripe_AccountCardPaymentsSettingsInput
  dashboard: TSWhereStripe_AccountDashboardSettingsInput
  payments: TSWhereStripe_AccountPaymentsSettingsInput
  payouts: TSWhereStripe_AccountPayoutSettingsInput
  sepa_debit_payments: TSWhereStripe_AccountSepaDebitPaymentsSettingsInput
}

input TSWhereStripe_AccountBacsDebitPaymentsSettingsInput {
  display_name: TSWhereStringInput
}

input TSWhereStripe_AccountBrandingSettingsInput {
  primary_color: TSWhereStringInput
  secondary_color: TSWhereStringInput
}

input TSWhereStripe_AccountCardIssuingSettingsInput {
  tos_acceptance: TSWhereStripe_CardIssuingAccountTermsOfServiceInput
}

input TSWhereStripe_CardIssuingAccountTermsOfServiceInput {
  date: TSWhereIntegerInput
  ip: TSWhereStringInput
  user_agent: TSWhereStringInput
}

input TSWhereStripe_AccountCardPaymentsSettingsInput {
  decline_on: TSWhereStripe_AccountDeclineChargeOnInput
  statement_descriptor_prefix: TSWhereStringInput
}

input TSWhereStripe_AccountDeclineChargeOnInput {
  avs_failure: TSWhereBooleanInput
  cvc_failure: TSWhereBooleanInput
}

input TSWhereStripe_AccountDashboardSettingsInput {
  display_name: TSWhereStringInput
  timezone: TSWhereStringInput
}

input TSWhereStripe_AccountPaymentsSettingsInput {
  statement_descriptor: TSWhereStringInput
  statement_descriptor_kana: TSWhereStringInput
  statement_descriptor_kanji: TSWhereStringInput
}

input TSWhereStripe_AccountPayoutSettingsInput {
  debit_negative_balances: TSWhereBooleanInput
  schedule: TSWhereStripe_TransferScheduleInput
  statement_descriptor: TSWhereStringInput
}

input TSWhereStripe_TransferScheduleInput {
  delay_days: TSWhereIntegerInput
  interval: TSWhereStringInput
  monthly_anchor: TSWhereIntegerInput
  weekly_anchor: TSWhereStringInput
}

input TSWhereStripe_AccountSepaDebitPaymentsSettingsInput {
  creditor_id: TSWhereStringInput
}

input TSWhereStripe_AccountTosAcceptanceInput {
  date: TSWhereIntegerInput
  ip: TSWhereStringInput
  service_agreement: TSWhereStringInput
  user_agent: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodWrappedStringUnionInput {
  value: TSWhereStringInput
  acss_debit: TSWhereStripe_PaymentMethodAcssDebitInput
  au_becs_debit: TSWhereStripe_PaymentMethodAuBecsDebitInput
  bacs_debit: TSWhereStripe_PaymentMethodBacsDebitInput
  billing_details: TSWhereStripe_BillingDetailsInput
  boleto: TSWhereStripe_PaymentMethodBoletoInput
  card: TSWhereStripe_PaymentMethodCardInput
  created: TSWhereIntegerInput
  eps: TSWhereStripe_PaymentMethodEpsInput
  fpx: TSWhereStripe_PaymentMethodFpxInput
  id: TSWhereStringInput
  ideal: TSWhereStripe_PaymentMethodIdealInput
  klarna: TSWhereStripe_PaymentMethodKlarnaInput
  livemode: TSWhereBooleanInput
  object: TSWhereInput
  p24: TSWhereStripe_PaymentMethodP24Input
  sepa_debit: TSWhereStripe_PaymentMethodSepaDebitInput
  sofort: TSWhereStripe_PaymentMethodSofortInput
  type: TSWhereInput
  us_bank_account: TSWhereStripe_PaymentMethodUsBankAccountInput
}

input TSWhereStripe_PaymentMethodAcssDebitInput {
  bank_name: TSWhereStringInput
  fingerprint: TSWhereStringInput
  institution_number: TSWhereStringInput
  last4: TSWhereStringInput
  transit_number: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodAuBecsDebitInput {
  bsb_number: TSWhereStringInput
  fingerprint: TSWhereStringInput
  last4: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodBacsDebitInput {
  fingerprint: TSWhereStringInput
  last4: TSWhereStringInput
  sort_code: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodBoletoInput {
  tax_id: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodCardInput {
  brand: TSWhereStringInput
  checks: TSWhereStripe_PaymentMethodCardChecksInput
  country: TSWhereStringInput
  exp_month: TSWhereIntegerInput
  exp_year: TSWhereIntegerInput
  fingerprint: TSWhereStringInput
  funding: TSWhereStringInput
  generated_from: TSWhereStripe_PaymentMethodCardGeneratedCardInput
  last4: TSWhereStringInput
  networks: TSWhereStripe_NetworksInput
  three_d_secure_usage: TSWhereStripe_ThreeDSecureUsageInput
  wallet: TSWhereStripe_PaymentMethodCardWalletInput
}

input TSWhereStripe_PaymentMethodCardChecksInput {
  address_line1_check: TSWhereStringInput
  address_postal_code_check: TSWhereStringInput
  cvc_check: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodCardGeneratedCardInput {
  charge: TSWhereStringInput
  payment_method_details: TSWhereStripe_CardGeneratedFromPaymentMethodDetailsInput
}

input TSWhereStripe_CardGeneratedFromPaymentMethodDetailsInput {
  card_present: TSWhereStripe_PaymentMethodDetailsCardPresentInput
  type: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsCardPresentInput {
  amount_authorized: TSWhereIntegerInput
  brand: TSWhereStringInput
  capture_before: TSWhereIntegerInput
  cardholder_name: TSWhereStringInput
  country: TSWhereStringInput
  emv_auth_data: TSWhereStringInput
  exp_month: TSWhereIntegerInput
  exp_year: TSWhereIntegerInput
  fingerprint: TSWhereStringInput
  funding: TSWhereStringInput
  generated_card: TSWhereStringInput
  incremental_authorization_supported: TSWhereBooleanInput
  last4: TSWhereStringInput
  network: TSWhereStringInput
  overcapture_supported: TSWhereBooleanInput
  read_method: TSWhereInput
  receipt: TSWhereStripe_PaymentMethodDetailsCardPresentReceiptInput
}

input TSWhereStripe_PaymentMethodDetailsCardPresentReceiptInput {
  account_type: TSWhereInput
  application_cryptogram: TSWhereStringInput
  application_preferred_name: TSWhereStringInput
  authorization_code: TSWhereStringInput
  authorization_response_code: TSWhereStringInput
  cardholder_verification_method: TSWhereStringInput
  dedicated_file_name: TSWhereStringInput
  terminal_verification_results: TSWhereStringInput
  transaction_status_information: TSWhereStringInput
}

input TSWhereStripe_NetworksInput {
  available: TSWhereStripe_PaymentMethodAvailableInput
  preferred: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodAvailableInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereStripe_ThreeDSecureUsageInput {
  supported: TSWhereBooleanInput
}

input TSWhereStripe_PaymentMethodCardWalletInput {
  dynamic_last4: TSWhereStringInput
  masterpass: TSWhereStripe_PaymentMethodCardWalletMasterpassInput
  type: TSWhereInput
  visa_checkout: TSWhereStripe_PaymentMethodCardWalletVisaCheckoutInput
}

input TSWhereStripe_PaymentMethodCardWalletMasterpassInput {
  billing_address: TSWhereStripe_AddressInput
  email: TSWhereStringInput
  name: TSWhereStringInput
  shipping_address: TSWhereStripe_AddressInput
}

input TSWhereStripe_PaymentMethodCardWalletVisaCheckoutInput {
  billing_address: TSWhereStripe_AddressInput
  email: TSWhereStringInput
  name: TSWhereStringInput
  shipping_address: TSWhereStripe_AddressInput
}

input TSWhereStripe_PaymentMethodEpsInput {
  bank: TSWhereInput
}

input TSWhereStripe_PaymentMethodFpxInput {
  bank: TSWhereInput
}

input TSWhereStripe_PaymentMethodIdealInput {
  bank: TSWhereInput
  bic: TSWhereInput
}

input TSWhereStripe_PaymentMethodKlarnaInput {
  dob: TSWhereStripe_PaymentFlowsPrivatePaymentMethodsKlarnaDobInput
}

input TSWhereStripe_PaymentFlowsPrivatePaymentMethodsKlarnaDobInput {
  day: TSWhereIntegerInput
  month: TSWhereIntegerInput
  year: TSWhereIntegerInput
}

input TSWhereStripe_PaymentMethodP24Input {
  bank: TSWhereInput
}

input TSWhereStripe_PaymentMethodSepaDebitInput {
  bank_code: TSWhereStringInput
  branch_code: TSWhereStringInput
  country: TSWhereStringInput
  fingerprint: TSWhereStringInput
  last4: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodSofortInput {
  country: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodUsBankAccountInput {
  account_holder_type: TSWhereInput
  account_type: TSWhereInput
  bank_name: TSWhereStringInput
  fingerprint: TSWhereStringInput
  last4: TSWhereStringInput
  routing_number: TSWhereStringInput
}

input TSWhereStripe_PaymentIntentPaymentMethodOptionsInput {
  acss_debit: TSWhere4c5fc35133092d01c0a6f6273b32acefUnionInput
  afterpay_clearpay: TSWhere69c699ae4c023cdd5081fd0b275d2314UnionInput
  alipay: TSWhere0c15571704f92e4deef74bf2861e3048UnionInput
  au_becs_debit: TSWhered0f94d051a53ade5163af84b3fd6b0f7UnionInput
  bacs_debit: TSWhere55b3d4514248bce7ac082bbc0da1833aUnionInput
  bancontact: TSWhereac15fe59c1b71bd6db2d201a4acee09dUnionInput
  boleto: TSWhere076b30d85cca1aae72305dffd8194343UnionInput
  card: TSWhere6181441ba9fb7eee556dd3a4a9d229e4UnionInput
  card_present: TSWherea245e0776494a0d51fe046b0453d38afUnionInput
  customer_balance: TSWhere8b9cb37bcfc0b30034cf6ebd1e41fe69UnionInput
  eps: TSWheref973d307d812f0dfb771bc8122e5c599UnionInput
  fpx: TSWhereabae1b112405e8b3c0dbfa673a54aaadUnionInput
  giropay: TSWhere8cc56b75820487c13c502fada2896d16UnionInput
  grabpay: TSWhereeaab7727acdc782ba4b7fd55f1d34914UnionInput
  ideal: TSWherebc8c021d852b37c55e33cd17b5bc5c8eUnionInput
  interac_present: TSWhere0790e0b407fa40ec44faa0c0093547c0UnionInput
  klarna: TSWhere431e685e94c88a23966c5e39578fd407UnionInput
  konbini: TSWhere00ef7207d1f936d9dfffc7da2b87c7a0UnionInput
  oxxo: TSWhere3ec3443ea1c1a903147c0d61800da976UnionInput
  p24: TSWherea35be11d8b3a6f85cf29c066bd2baeecUnionInput
  paynow: TSWhere3755b88328836d5c8b19acd047bf83f5UnionInput
  sepa_debit: TSWhere1ef47aea767cbab0a37f27b4392256afUnionInput
  sofort: TSWhere29eab390824f828a021e12d845868bf5UnionInput
  us_bank_account: TSWheree8df26123b430c2df83da95f1b7d7d58UnionInput
  wechat_pay: TSWheref3a2f1202624d0cdb50285826cb85a9eUnionInput
}

input TSWhere4c5fc35133092d01c0a6f6273b32acefUnionInput {
  mandate_options: TSWhereStripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitInput
  setup_future_usage: TSWhereInput
  verification_method: TSWhereInput
  capture_method: TSWhereInput
}

input TSWhereStripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitInput {
  custom_mandate_url: TSWhereStringInput
  interval_description: TSWhereStringInput
  payment_schedule: TSWhereInput
  transaction_type: TSWhereInput
}

input TSWhere69c699ae4c023cdd5081fd0b275d2314UnionInput {
  capture_method: TSWhereInput
  reference: TSWhereStringInput
  setup_future_usage: TSWhereInput
  verification_method: TSWhereInput
}

input TSWhere0c15571704f92e4deef74bf2861e3048UnionInput {
  setup_future_usage: TSWhereInput
  capture_method: TSWhereInput
  verification_method: TSWhereInput
}

input TSWhered0f94d051a53ade5163af84b3fd6b0f7UnionInput {
  setup_future_usage: TSWhereInput
  capture_method: TSWhereInput
  verification_method: TSWhereInput
}

input TSWhere55b3d4514248bce7ac082bbc0da1833aUnionInput {
  setup_future_usage: TSWhereInput
  capture_method: TSWhereInput
  verification_method: TSWhereInput
}

input TSWhereac15fe59c1b71bd6db2d201a4acee09dUnionInput {
  preferred_language: TSWhereInput
  setup_future_usage: TSWhereInput
  capture_method: TSWhereInput
  verification_method: TSWhereInput
}

input TSWhere076b30d85cca1aae72305dffd8194343UnionInput {
  expires_after_days: TSWhereIntegerInput
  setup_future_usage: TSWhereInput
  capture_method: TSWhereInput
  verification_method: TSWhereInput
}

input TSWhere6181441ba9fb7eee556dd3a4a9d229e4UnionInput {
  capture_method: TSWhereInput
  installments: TSWhereStripe_PaymentMethodOptionsCardInstallmentsInput
  mandate_options: TSWhereStripe_PaymentMethodOptionsCardMandateOptionsInput
  network: TSWhereInput
  request_three_d_secure: TSWhereInput
  setup_future_usage: TSWhereInput
  verification_method: TSWhereInput
}

input TSWhereStripe_PaymentMethodOptionsCardInstallmentsInput {
  available_plans: TSWhereStripe_PaymentMethodDetailsCardInstallmentsPlanInput
  enabled: TSWhereBooleanInput
  plan: TSWhereStripe_PaymentMethodDetailsCardInstallmentsPlanInput
}

input TSWhereStripe_PaymentMethodDetailsCardInstallmentsPlanInput {
  count: TSWhereIntegerInput
  interval: TSWhereInput
  type: TSWhereInput
}

input TSWhereStripe_PaymentMethodOptionsCardMandateOptionsInput {
  amount: TSWhereIntegerInput
  amount_type: TSWhereInput
  description: TSWhereStringInput
  end_date: TSWhereIntegerInput
  interval: TSWhereInput
  interval_count: TSWhereIntegerInput
  reference: TSWhereStringInput
  start_date: TSWhereIntegerInput
}

input TSWherea245e0776494a0d51fe046b0453d38afUnionInput {
  request_extended_authorization: TSWhereBooleanInput
  request_incremental_authorization_support: TSWhereBooleanInput
  capture_method: TSWhereInput
  setup_future_usage: TSWhereInput
  verification_method: TSWhereInput
}

input TSWhere8b9cb37bcfc0b30034cf6ebd1e41fe69UnionInput {
  bank_transfer: TSWhereStripe_PaymentMethodOptionsCustomerBalanceBankTransferInput
  funding_type: TSWhereInput
  setup_future_usage: TSWhereInput
  capture_method: TSWhereInput
  verification_method: TSWhereInput
}

input TSWhereStripe_PaymentMethodOptionsCustomerBalanceBankTransferInput {
  type: TSWhereInput
}

input TSWheref973d307d812f0dfb771bc8122e5c599UnionInput {
  setup_future_usage: TSWhereInput
  capture_method: TSWhereInput
  verification_method: TSWhereInput
}

input TSWhereabae1b112405e8b3c0dbfa673a54aaadUnionInput {
  setup_future_usage: TSWhereInput
  capture_method: TSWhereInput
  verification_method: TSWhereInput
}

input TSWhere8cc56b75820487c13c502fada2896d16UnionInput {
  setup_future_usage: TSWhereInput
  capture_method: TSWhereInput
  verification_method: TSWhereInput
}

input TSWhereeaab7727acdc782ba4b7fd55f1d34914UnionInput {
  setup_future_usage: TSWhereInput
  capture_method: TSWhereInput
  verification_method: TSWhereInput
}

input TSWherebc8c021d852b37c55e33cd17b5bc5c8eUnionInput {
  setup_future_usage: TSWhereInput
  capture_method: TSWhereInput
  verification_method: TSWhereInput
}

input TSWhere0790e0b407fa40ec44faa0c0093547c0UnionInput {
  capture_method: TSWhereInput
  setup_future_usage: TSWhereInput
  verification_method: TSWhereInput
}

input TSWhere431e685e94c88a23966c5e39578fd407UnionInput {
  capture_method: TSWhereInput
  preferred_locale: TSWhereStringInput
  setup_future_usage: TSWhereInput
  verification_method: TSWhereInput
}

input TSWhere00ef7207d1f936d9dfffc7da2b87c7a0UnionInput {
  confirmation_number: TSWhereStringInput
  expires_after_days: TSWhereIntegerInput
  expires_at: TSWhereIntegerInput
  product_description: TSWhereStringInput
  setup_future_usage: TSWhereInput
  capture_method: TSWhereInput
  verification_method: TSWhereInput
}

input TSWhere3ec3443ea1c1a903147c0d61800da976UnionInput {
  expires_after_days: TSWhereIntegerInput
  setup_future_usage: TSWhereInput
  capture_method: TSWhereInput
  verification_method: TSWhereInput
}

input TSWherea35be11d8b3a6f85cf29c066bd2baeecUnionInput {
  setup_future_usage: TSWhereInput
  capture_method: TSWhereInput
  verification_method: TSWhereInput
}

input TSWhere3755b88328836d5c8b19acd047bf83f5UnionInput {
  setup_future_usage: TSWhereInput
  capture_method: TSWhereInput
  verification_method: TSWhereInput
}

input TSWhere1ef47aea767cbab0a37f27b4392256afUnionInput {
  setup_future_usage: TSWhereInput
  capture_method: TSWhereInput
  verification_method: TSWhereInput
}

input TSWhere29eab390824f828a021e12d845868bf5UnionInput {
  preferred_language: TSWhereInput
  setup_future_usage: TSWhereInput
  capture_method: TSWhereInput
  verification_method: TSWhereInput
}

input TSWheree8df26123b430c2df83da95f1b7d7d58UnionInput {
  setup_future_usage: TSWhereInput
  verification_method: TSWhereInput
  capture_method: TSWhereInput
}

input TSWheref3a2f1202624d0cdb50285826cb85a9eUnionInput {
  app_id: TSWhereStringInput
  client: TSWhereInput
  setup_future_usage: TSWhereInput
  capture_method: TSWhereInput
  verification_method: TSWhereInput
}

input TSWhereStripe_PaymentIntentPaymentMethodTypesInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereStripe_PaymentIntentProcessingInput {
  card: TSWhereStripe_PaymentIntentCardProcessingInput
  type: TSWhereInput
}

input TSWhereStripe_PaymentIntentCardProcessingInput {
  customer_notification: TSWhereStripe_PaymentIntentProcessingCustomerNotificationInput
}

input TSWhereStripe_PaymentIntentProcessingCustomerNotificationInput {
  approval_requested: TSWhereBooleanInput
  completes_at: TSWhereIntegerInput
}

input TSWhereStripe_ReviewWrappedStringUnionInput {
  value: TSWhereStringInput
  billing_zip: TSWhereStringInput
  closed_reason: TSWhereInput
  created: TSWhereIntegerInput
  id: TSWhereStringInput
  ip_address: TSWhereStringInput
  ip_address_location: TSWhereStripe_RadarReviewResourceLocationInput
  livemode: TSWhereBooleanInput
  object: TSWhereInput
  open: TSWhereBooleanInput
  opened_reason: TSWhereInput
  reason: TSWhereStringInput
  session: TSWhereStripe_RadarReviewResourceSessionInput
}

input TSWhereStripe_RadarReviewResourceLocationInput {
  city: TSWhereStringInput
  country: TSWhereStringInput
  latitude: TSWhereNumberInput
  longitude: TSWhereNumberInput
  region: TSWhereStringInput
}

input TSWhereStripe_RadarReviewResourceSessionInput {
  browser: TSWhereStringInput
  device: TSWhereStringInput
  platform: TSWhereStringInput
  version: TSWhereStringInput
}

input TSWhereStripe_TransferDataInput {
  amount: TSWhereIntegerInput
  destination: TSWhereStripe_AccountWrappedStringUnionInput
}

input TSWhereStripe_InvoiceitemInput {
  amount: TSWhereIntegerInput
  currency: TSWhereStringInput
  customer: TSWhereStringInput
  date: TSWhereIntegerInput
  description: TSWhereStringInput
  discountable: TSWhereBooleanInput
  discounts: TSWhereStripe_PaymentIntentDiscountsInput
  id: TSWhereStringInput
  invoice: TSWhereStripe_InvoiceWrappedStringUnionInput
  livemode: TSWhereBooleanInput
  object: TSWhereInput
  period: TSWhereStripe_InvoiceLineItemPeriodInput
  price: TSWhereStripe_PriceInput
  proration: TSWhereBooleanInput
  quantity: TSWhereIntegerInput
  subscription: TSWhereStripe_SubscriptionWrappedStringUnionInput
  subscription_item: TSWhereStringInput
  tax_rates: TSWhereStripe_TaxRateInput
  test_clock: TSWhereStripe_TestHelpersTestClockWrappedStringUnionInput
  unit_amount: TSWhereIntegerInput
  unit_amount_decimal: TSWhereStringInput
}

input TSWhereStripe_PaymentIntentDiscountsInput {
  value: TSWhereStringInput
  checkout_session: TSWhereStringInput
  coupon: TSWhereStripe_CouponInput
  customer: TSWhereStringInput
  end: TSWhereIntegerInput
  id: TSWhereStringInput
  invoice: TSWhereStringInput
  invoice_item: TSWhereStringInput
  object: TSWhereInput
  start: TSWhereIntegerInput
  subscription: TSWhereStringInput
}

input TSWhereStripe_InvoiceLineItemPeriodInput {
  end: TSWhereIntegerInput
  start: TSWhereIntegerInput
}

input TSWhereStripe_PriceInput {
  active: TSWhereBooleanInput
  billing_scheme: TSWhereInput
  created: TSWhereIntegerInput
  currency: TSWhereStringInput
  id: TSWhereStringInput
  livemode: TSWhereBooleanInput
  lookup_key: TSWhereStringInput
  nickname: TSWhereStringInput
  object: TSWhereInput
  product: TSWhereStripe_ProductInput
  recurring: TSWhereStripe_RecurringInput
  tax_behavior: TSWhereInput
  tiers: TSWhereStripe_PriceTierInput
  tiers_mode: TSWhereInput
  transform_quantity: TSWhereStripe_TransformQuantityInput
  type: TSWhereInput
  unit_amount: TSWhereIntegerInput
  unit_amount_decimal: TSWhereStringInput
}

input TSWhereStripe_ProductInput {
  active: TSWhereBooleanInput
  created: TSWhereIntegerInput
  description: TSWhereStringInput
  id: TSWhereStringInput
  images: TSWhereStripe_ProductImagesInput
  livemode: TSWhereBooleanInput
  name: TSWhereStringInput
  object: TSWhereInput
  package_dimensions: TSWhereStripe_PackageDimensionsInput
  shippable: TSWhereBooleanInput
  statement_descriptor: TSWhereStringInput
  tax_code: TSWhereStripe_TaxCodeWrappedStringUnionInput
  unit_label: TSWhereStringInput
  updated: TSWhereIntegerInput
  url: TSWhereStringInput
  prices: TSWhereStripe_PriceInput
  reviews: TSWhereReviewsIo_ListProductReviewsResponseInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
}

input TSWhereStripe_PackageDimensionsInput {
  height: TSWhereNumberInput
  length: TSWhereNumberInput
  weight: TSWhereNumberInput
  width: TSWhereNumberInput
}

input TSWhereStripe_TaxCodeWrappedStringUnionInput {
  value: TSWhereStringInput
  description: TSWhereStringInput
  id: TSWhereStringInput
  name: TSWhereStringInput
  object: TSWhereInput
}

input TSWhereReviewsIo_ListProductReviewsResponseInput {
  write_review_link: TSWhereStringInput
  word: TSWhereStringInput
  stats: TSWhereStripe_ProductStatsInput
  store: TSWhereStripe_ProductStoreInput
  reviews: TSWhereStripe_ProductReviewsInput
  products: TSWhereStripe_ProductProductsInput
}

input TSWhereStripe_ProductStatsInput {
  average: TSWhereNumberInput
  count: TSWhereIntegerInput
}

input TSWhereStripe_ProductStoreInput {
  name: TSWhereStringInput
  logo: TSWhereStringInput
}

input TSWhereStripe_ProductReviewsInput {
  total: TSWhereIntegerInput
  per_page: TSWhereIntegerInput
  current_page: TSWhereIntegerInput
  last_page: TSWhereIntegerInput
  from: TSWhereIntegerInput
  to: TSWhereIntegerInput
  data: TSWhereReviewsIo_ProductReviewInput
}

input TSWhereReviewsIo_ProductReviewInput {
  product_review_id: TSWhereIntegerInput
  product_make: TSWhereStringInput
  order_id: TSWhereStringInput
  name: TSWhereStringInput
  sku: TSWhereStringInput
  review: TSWhereStringInput
  title: TSWhereStringInput
  rating: TSWhereIntegerInput
  date_created: TSWhereStringInput
  votes: TSWhereStringInput
  flags: TSWhereStringInput
  timeago: TSWhereStringInput
  date_formatted: TSWhereStringInput
  product: TSWhereReviewsIo_ProductInput
  reviewer: TSWhereReviewsIo_ReviewerInput
  images: TSWhereStripe_ProductImagesInput
  tags: TSWhereStripe_ProductTagsInput
  author: TSWhereStripe_ProductAuthorInput
}

input TSWhereReviewsIo_ProductInput {
  sku: TSWhereStringInput
  name: TSWhereStringInput
  description: TSWhereStringInput
  image_url: TSWhereStringInput
  link: TSWhereStringInput
  mpn: TSWhereStringInput
  gtin: TSWhereStringInput
  brand: TSWhereStringInput
  category: TSWhereStringInput
  custom: TSWhereStringInput
  pageUrl: TSWhereStringInput
}

input TSWhereReviewsIo_ReviewerInput {
  user_id: TSWhereIntegerInput
  first_name: TSWhereStringInput
  last_name: TSWhereStringInput
  verified_buyer: TSWhereInput
  address: TSWhereStringInput
  profile_picture: TSWhereStringInput
  gravatar: TSWhereStringInput
  email: TSWhereStringInput
  name_formatted: TSWhereStringInput
}

input TSWhereStripe_ProductTagsInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereStripe_ProductAuthorInput {
  email: TSWhereStringInput
}

input TSWhereStripe_ProductProductsInput {
  sku: TSWhereStringInput
  name: TSWhereStringInput
}

input TSWhereStripe_RecurringInput {
  aggregate_usage: TSWhereInput
  interval: TSWhereInput
  interval_count: TSWhereIntegerInput
  usage_type: TSWhereInput
}

input TSWhereStripe_PriceTierInput {
  flat_amount: TSWhereIntegerInput
  flat_amount_decimal: TSWhereStringInput
  unit_amount: TSWhereIntegerInput
  unit_amount_decimal: TSWhereStringInput
  up_to: TSWhereIntegerInput
}

input TSWhereStripe_TransformQuantityInput {
  divide_by: TSWhereIntegerInput
  round: TSWhereInput
}

input TSWhereStripe_SubscriptionWrappedStringUnionInput {
  value: TSWhereStringInput
  application_fee_percent: TSWhereNumberInput
  automatic_tax: TSWhereStripe_SubscriptionAutomaticTaxInput
  billing_cycle_anchor: TSWhereIntegerInput
  billing_thresholds: TSWhereStripe_SubscriptionBillingThresholdsInput
  cancel_at: TSWhereIntegerInput
  cancel_at_period_end: TSWhereBooleanInput
  canceled_at: TSWhereIntegerInput
  collection_method: TSWhereInput
  created: TSWhereIntegerInput
  current_period_end: TSWhereIntegerInput
  current_period_start: TSWhereIntegerInput
  customer: TSWhereStringInput
  days_until_due: TSWhereIntegerInput
  default_tax_rates: TSWhereStripe_TaxRateInput
  discount: TSWhereStripe_DiscountInput
  ended_at: TSWhereIntegerInput
  id: TSWhereStringInput
  items: TSWhereStripe_SubscriptionItemsInput
  livemode: TSWhereBooleanInput
  next_pending_invoice_item_invoice: TSWhereIntegerInput
  object: TSWhereInput
  pause_collection: TSWhereStripe_SubscriptionsResourcePauseCollectionInput
  payment_settings: TSWhereStripe_SubscriptionsResourcePaymentSettingsInput
  pending_invoice_item_interval: TSWhereStripe_SubscriptionPendingInvoiceItemIntervalInput
  pending_update: TSWhereStripe_SubscriptionsResourcePendingUpdateInput
  start_date: TSWhereIntegerInput
  status: TSWhereInput
  transfer_data: TSWhereStripe_SubscriptionTransferDataInput
  trial_end: TSWhereIntegerInput
  trial_start: TSWhereIntegerInput
}

input TSWhereStripe_SubscriptionAutomaticTaxInput {
  enabled: TSWhereBooleanInput
}

input TSWhereStripe_SubscriptionBillingThresholdsInput {
  amount_gte: TSWhereIntegerInput
  reset_billing_cycle_anchor: TSWhereBooleanInput
}

input TSWhereStripe_SubscriptionItemsInput {
  data: TSWhereStripe_SubscriptionItemInput
  has_more: TSWhereBooleanInput
  object: TSWhereInput
  url: TSWhereStringInput
}

input TSWhereStripe_SubscriptionItemInput {
  billing_thresholds: TSWhereStripe_SubscriptionItemBillingThresholdsInput
  created: TSWhereIntegerInput
  id: TSWhereStringInput
  object: TSWhereInput
  price: TSWhereStripe_PriceInput
  quantity: TSWhereIntegerInput
  subscription: TSWhereStringInput
  tax_rates: TSWhereStripe_TaxRateInput
}

input TSWhereStripe_SubscriptionItemBillingThresholdsInput {
  usage_gte: TSWhereIntegerInput
}

input TSWhereStripe_SubscriptionsResourcePauseCollectionInput {
  behavior: TSWhereInput
  resumes_at: TSWhereIntegerInput
}

input TSWhereStripe_SubscriptionsResourcePaymentSettingsInput {
  payment_method_options: TSWhereStripe_SubscriptionsResourcePaymentMethodOptionsInput
}

input TSWhereStripe_SubscriptionsResourcePaymentMethodOptionsInput {
  acss_debit: TSWhereStripe_InvoicePaymentMethodOptionsAcssDebitInput
  bancontact: TSWhereStripe_InvoicePaymentMethodOptionsBancontactInput
  card: TSWhereStripe_SubscriptionPaymentMethodOptionsCardInput
  customer_balance: TSWhereStripe_InvoicePaymentMethodOptionsCustomerBalanceInput
  us_bank_account: TSWhereStripe_InvoicePaymentMethodOptionsUsBankAccountInput
}

input TSWhereStripe_InvoicePaymentMethodOptionsAcssDebitInput {
  mandate_options: TSWhereStripe_InvoicePaymentMethodOptionsAcssDebitMandateOptionsInput
  verification_method: TSWhereInput
}

input TSWhereStripe_InvoicePaymentMethodOptionsAcssDebitMandateOptionsInput {
  transaction_type: TSWhereInput
}

input TSWhereStripe_InvoicePaymentMethodOptionsBancontactInput {
  preferred_language: TSWhereInput
}

input TSWhereStripe_SubscriptionPaymentMethodOptionsCardInput {
  mandate_options: TSWhereStripe_InvoiceMandateOptionsCardInput
  request_three_d_secure: TSWhereInput
}

input TSWhereStripe_InvoiceMandateOptionsCardInput {
  amount: TSWhereIntegerInput
  amount_type: TSWhereInput
  description: TSWhereStringInput
}

input TSWhereStripe_InvoicePaymentMethodOptionsCustomerBalanceInput {
  bank_transfer: TSWhereStripe_InvoicePaymentMethodOptionsCustomerBalanceBankTransferInput
  funding_type: TSWhereInput
}

input TSWhereStripe_InvoicePaymentMethodOptionsCustomerBalanceBankTransferInput {
  type: TSWhereStringInput
}

input TSWhereStripe_InvoicePaymentMethodOptionsUsBankAccountInput {
  verification_method: TSWhereInput
}

input TSWhereStripe_SubscriptionPendingInvoiceItemIntervalInput {
  interval: TSWhereInput
  interval_count: TSWhereIntegerInput
}

input TSWhereStripe_SubscriptionsResourcePendingUpdateInput {
  billing_cycle_anchor: TSWhereIntegerInput
  expires_at: TSWhereIntegerInput
  subscription_items: TSWhereStripe_SubscriptionItemInput
  trial_end: TSWhereIntegerInput
  trial_from_plan: TSWhereBooleanInput
}

input TSWhereStripe_SubscriptionTransferDataInput {
  amount_percent: TSWhereNumberInput
}

input TSWhereStripe_TestHelpersTestClockWrappedStringUnionInput {
  value: TSWhereStringInput
  created: TSWhereIntegerInput
  deletes_after: TSWhereIntegerInput
  frozen_time: TSWhereIntegerInput
  id: TSWhereStringInput
  livemode: TSWhereBooleanInput
  name: TSWhereStringInput
  object: TSWhereInput
  status: TSWhereInput
}

input TSWhereStripe_ItemInput {
  amount_subtotal: TSWhereIntegerInput
  amount_total: TSWhereIntegerInput
  currency: TSWhereStringInput
  description: TSWhereStringInput
  discounts: TSWhereStripe_LineItemsDiscountAmountInput
  id: TSWhereStringInput
  object: TSWhereInput
  price: TSWhereStripe_PriceInput
  quantity: TSWhereIntegerInput
  taxes: TSWhereStripe_LineItemsTaxAmountInput
}

input TSWhereStripe_LineItemsDiscountAmountInput {
  amount: TSWhereIntegerInput
  discount: TSWhereStripe_DiscountInput
}

input TSWhereStripe_LineItemsTaxAmountInput {
  amount: TSWhereIntegerInput
  rate: TSWhereStripe_TaxRateInput
}

input TSWhereShipEngine_LabelInput {
  label_id: TSWhereStringInput
  status: TSWhereStringInput
  shipment_id: TSWhereStringInput
  ship_date: TSWhereStringInput
  created_at: TSWhereStringInput
  tracking_number: TSWhereStringInput
  batch_id: TSWhereStringInput
  carrier_id: TSWhereStringInput
  charge_event: TSWhereStringInput
  service_code: TSWhereStringInput
  package_code: TSWhereStringInput
  voided_at: TSWhereStringInput
  label_format: TSWhereStringInput
  display_scheme: TSWhereStringInput
  label_layout: TSWhereStringInput
  label_image_id: TSWhereStringInput
  carrier_code: TSWhereStringInput
  tracking_status: TSWhereStringInput
  label_download: TSWhereShipEngine_LabelDownloadInput
  trackable: TSWhereBooleanInput
  packages: TSWhereShipEngine_PackageInput
}

input TSWhereShipEngine_LabelDownloadInput {
  href: TSWhereStringInput
  pdf: TSWhereStringInput
  png: TSWhereStringInput
  zpl: TSWhereStringInput
}

input TSWhereShipEngine_PackageInput {
  package_id: TSWhereIntegerInput
  description: TSWhereStringInput
  package_code: TSWhereStringInput
  tracking_number: TSWhereStringInput
  label_download: TSWhereShipEngine_LabelDownloadInput
  weight: TSWhereShipEngine_WeightInput
  dimensions: TSWhereShipEngine_DimensionsInput
}

input TSWhereShipEngine_WeightInput {
  value: TSWhereNumberInput
  unit: TSWhereStringInput
}

input TSWhereShipEngine_DimensionsInput {
  length: TSWhereNumberInput
  width: TSWhereNumberInput
  height: TSWhereNumberInput
  unit: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodInput {
  acss_debit: TSWhereStripe_PaymentMethodAcssDebitInput
  au_becs_debit: TSWhereStripe_PaymentMethodAuBecsDebitInput
  bacs_debit: TSWhereStripe_PaymentMethodBacsDebitInput
  billing_details: TSWhereStripe_BillingDetailsInput
  boleto: TSWhereStripe_PaymentMethodBoletoInput
  card: TSWhereStripe_PaymentMethodCardInput
  created: TSWhereIntegerInput
  customer: TSWhereStripe_CustomerWrappedStringUnionInput
  eps: TSWhereStripe_PaymentMethodEpsInput
  fpx: TSWhereStripe_PaymentMethodFpxInput
  id: TSWhereStringInput
  ideal: TSWhereStripe_PaymentMethodIdealInput
  klarna: TSWhereStripe_PaymentMethodKlarnaInput
  livemode: TSWhereBooleanInput
  object: TSWhereInput
  p24: TSWhereStripe_PaymentMethodP24Input
  sepa_debit: TSWhereStripe_PaymentMethodSepaDebitInput
  sofort: TSWhereStripe_PaymentMethodSofortInput
  type: TSWhereInput
  us_bank_account: TSWhereStripe_PaymentMethodUsBankAccountInput
}

input TSWhereStripe_CustomerWrappedStringUnionInput {
  value: TSWhereStringInput
  address: TSWhereStripe_AddressInput
  balance: TSWhereIntegerInput
  created: TSWhereIntegerInput
  currency: TSWhereStringInput
  delinquent: TSWhereBooleanInput
  description: TSWhereStringInput
  discount: TSWhereStripe_DiscountInput
  email: TSWhereStringInput
  id: TSWhereStringInput
  invoice_prefix: TSWhereStringInput
  invoice_settings: TSWhereStripe_InvoiceSettingCustomerSettingInput
  livemode: TSWhereBooleanInput
  name: TSWhereStringInput
  next_invoice_sequence: TSWhereIntegerInput
  object: TSWhereInput
  phone: TSWhereStringInput
  preferred_locales: TSWhereStripe_CustomerPreferredLocalesInput
  shipping: TSWhereStripe_ShippingInput
  sources: TSWhereStripe_CustomerSourcesInput
  subscriptions: TSWhereStripe_CustomerSubscriptionsInput
  tax: TSWhereStripe_CustomerTaxInput
  tax_exempt: TSWhereInput
  tax_ids: TSWhereStripe_CustomerTaxIdsInput
}

input TSWhereStripe_InvoiceSettingCustomerSettingInput {
  custom_fields: TSWhereStripe_InvoiceSettingCustomFieldInput
  footer: TSWhereStringInput
}

input TSWhereStripe_CustomerPreferredLocalesInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereStripe_CustomerSourcesInput {
  data: TSWhereStripe_CustomerDataInput
  has_more: TSWhereBooleanInput
  object: TSWhereInput
  url: TSWhereStringInput
}

input TSWhereStripe_CustomerDataInput {
  created: TSWhereIntegerInput
  customer: TSWhereStringInput
  fingerprint: TSWhereStringInput
  id: TSWhereStringInput
  livemode: TSWhereBooleanInput
  object: TSWhereInput
  payment_amount: TSWhereIntegerInput
  payment_currency: TSWhereStringInput
  reusable: TSWhereBooleanInput
  used: TSWhereBooleanInput
  username: TSWhereStringInput
  account_holder_name: TSWhereStringInput
  account_holder_type: TSWhereStringInput
  account_type: TSWhereStringInput
  bank_name: TSWhereStringInput
  country: TSWhereStringInput
  currency: TSWhereStringInput
  default_for_currency: TSWhereBooleanInput
  last4: TSWhereStringInput
  routing_number: TSWhereStringInput
  status: TSWhereStringInput
  active: TSWhereBooleanInput
  amount: TSWhereIntegerInput
  amount_received: TSWhereIntegerInput
  bitcoin_amount: TSWhereIntegerInput
  bitcoin_amount_received: TSWhereIntegerInput
  bitcoin_uri: TSWhereStringInput
  description: TSWhereStringInput
  email: TSWhereStringInput
  filled: TSWhereBooleanInput
  inbound_address: TSWhereStringInput
  payment: TSWhereStringInput
  refund_address: TSWhereStringInput
  transactions: TSWhereStripe_BitcoinReceiverTransactionsInput
  uncaptured_funds: TSWhereBooleanInput
  used_for_payment: TSWhereBooleanInput
  address_city: TSWhereStringInput
  address_country: TSWhereStringInput
  address_line1: TSWhereStringInput
  address_line1_check: TSWhereStringInput
  address_line2: TSWhereStringInput
  address_state: TSWhereStringInput
  address_zip: TSWhereStringInput
  address_zip_check: TSWhereStringInput
  brand: TSWhereStringInput
  cvc_check: TSWhereStringInput
  dynamic_last4: TSWhereStringInput
  exp_month: TSWhereIntegerInput
  exp_year: TSWhereIntegerInput
  funding: TSWhereStringInput
  name: TSWhereStringInput
  tokenization_method: TSWhereStringInput
  ach_credit_transfer: TSWhereStripe_SourceTypeAchCreditTransferInput
  ach_debit: TSWhereStripe_SourceTypeAchDebitInput
  acss_debit: TSWhereStripe_SourceTypeAcssDebitInput
  alipay: TSWhereStripe_SourceTypeAlipayInput
  au_becs_debit: TSWhereStripe_SourceTypeAuBecsDebitInput
  bancontact: TSWhereStripe_SourceTypeBancontactInput
  card: TSWhereStripe_SourceTypeCardInput
  card_present: TSWhereStripe_SourceTypeCardPresentInput
  client_secret: TSWhereStringInput
  code_verification: TSWhereStripe_SourceCodeVerificationFlowInput
  eps: TSWhereStripe_SourceTypeEpsInput
  flow: TSWhereStringInput
  giropay: TSWhereStripe_SourceTypeGiropayInput
  ideal: TSWhereStripe_SourceTypeIdealInput
  klarna: TSWhereStripe_SourceTypeKlarnaInput
  multibanco: TSWhereStripe_SourceTypeMultibancoInput
  owner: TSWhereStripe_SourceOwnerInput
  p24: TSWhereStripe_SourceTypeP24Input
  receiver: TSWhereStripe_SourceReceiverFlowInput
  redirect: TSWhereStripe_SourceRedirectFlowInput
  sepa_debit: TSWhereStripe_SourceTypeSepaDebitInput
  sofort: TSWhereStripe_SourceTypeSofortInput
  source_order: TSWhereStripe_SourceOrderInput
  statement_descriptor: TSWhereStringInput
  three_d_secure: TSWhereStripe_SourceTypeThreeDSecureInput
  type: TSWhereInput
  usage: TSWhereStringInput
  wechat: TSWhereStripe_SourceTypeWechatInput
}

input TSWhereStripe_BitcoinReceiverTransactionsInput {
  data: TSWhereStripe_BitcoinTransactionInput
  has_more: TSWhereBooleanInput
  object: TSWhereInput
  url: TSWhereStringInput
}

input TSWhereStripe_BitcoinTransactionInput {
  amount: TSWhereIntegerInput
  bitcoin_amount: TSWhereIntegerInput
  created: TSWhereIntegerInput
  currency: TSWhereStringInput
  id: TSWhereStringInput
  object: TSWhereInput
  receiver: TSWhereStringInput
}

input TSWhereStripe_SourceTypeAchCreditTransferInput {
  account_number: TSWhereStringInput
  bank_name: TSWhereStringInput
  fingerprint: TSWhereStringInput
  refund_account_holder_name: TSWhereStringInput
  refund_account_holder_type: TSWhereStringInput
  refund_routing_number: TSWhereStringInput
  routing_number: TSWhereStringInput
  swift_code: TSWhereStringInput
}

input TSWhereStripe_SourceTypeAchDebitInput {
  bank_name: TSWhereStringInput
  country: TSWhereStringInput
  fingerprint: TSWhereStringInput
  last4: TSWhereStringInput
  routing_number: TSWhereStringInput
  type: TSWhereStringInput
}

input TSWhereStripe_SourceTypeAcssDebitInput {
  bank_address_city: TSWhereStringInput
  bank_address_line_1: TSWhereStringInput
  bank_address_line_2: TSWhereStringInput
  bank_address_postal_code: TSWhereStringInput
  bank_name: TSWhereStringInput
  category: TSWhereStringInput
  country: TSWhereStringInput
  fingerprint: TSWhereStringInput
  last4: TSWhereStringInput
  routing_number: TSWhereStringInput
}

input TSWhereStripe_SourceTypeAlipayInput {
  data_string: TSWhereStringInput
  native_url: TSWhereStringInput
  statement_descriptor: TSWhereStringInput
}

input TSWhereStripe_SourceTypeAuBecsDebitInput {
  bsb_number: TSWhereStringInput
  fingerprint: TSWhereStringInput
  last4: TSWhereStringInput
}

input TSWhereStripe_SourceTypeBancontactInput {
  bank_code: TSWhereStringInput
  bank_name: TSWhereStringInput
  bic: TSWhereStringInput
  iban_last4: TSWhereStringInput
  preferred_language: TSWhereStringInput
  statement_descriptor: TSWhereStringInput
}

input TSWhereStripe_SourceTypeCardInput {
  address_line1_check: TSWhereStringInput
  address_zip_check: TSWhereStringInput
  brand: TSWhereStringInput
  country: TSWhereStringInput
  cvc_check: TSWhereStringInput
  dynamic_last4: TSWhereStringInput
  exp_month: TSWhereIntegerInput
  exp_year: TSWhereIntegerInput
  fingerprint: TSWhereStringInput
  funding: TSWhereStringInput
  last4: TSWhereStringInput
  name: TSWhereStringInput
  three_d_secure: TSWhereStringInput
  tokenization_method: TSWhereStringInput
}

input TSWhereStripe_SourceTypeCardPresentInput {
  application_cryptogram: TSWhereStringInput
  application_preferred_name: TSWhereStringInput
  authorization_code: TSWhereStringInput
  authorization_response_code: TSWhereStringInput
  brand: TSWhereStringInput
  country: TSWhereStringInput
  cvm_type: TSWhereStringInput
  data_type: TSWhereStringInput
  dedicated_file_name: TSWhereStringInput
  emv_auth_data: TSWhereStringInput
  evidence_customer_signature: TSWhereStringInput
  evidence_transaction_certificate: TSWhereStringInput
  exp_month: TSWhereIntegerInput
  exp_year: TSWhereIntegerInput
  fingerprint: TSWhereStringInput
  funding: TSWhereStringInput
  last4: TSWhereStringInput
  pos_device_id: TSWhereStringInput
  pos_entry_mode: TSWhereStringInput
  read_method: TSWhereStringInput
  reader: TSWhereStringInput
  terminal_verification_results: TSWhereStringInput
  transaction_status_information: TSWhereStringInput
}

input TSWhereStripe_SourceCodeVerificationFlowInput {
  attempts_remaining: TSWhereIntegerInput
  status: TSWhereStringInput
}

input TSWhereStripe_SourceTypeEpsInput {
  reference: TSWhereStringInput
  statement_descriptor: TSWhereStringInput
}

input TSWhereStripe_SourceTypeGiropayInput {
  bank_code: TSWhereStringInput
  bank_name: TSWhereStringInput
  bic: TSWhereStringInput
  statement_descriptor: TSWhereStringInput
}

input TSWhereStripe_SourceTypeIdealInput {
  bank: TSWhereStringInput
  bic: TSWhereStringInput
  iban_last4: TSWhereStringInput
  statement_descriptor: TSWhereStringInput
}

input TSWhereStripe_SourceTypeKlarnaInput {
  background_image_url: TSWhereStringInput
  client_token: TSWhereStringInput
  first_name: TSWhereStringInput
  last_name: TSWhereStringInput
  locale: TSWhereStringInput
  logo_url: TSWhereStringInput
  page_title: TSWhereStringInput
  pay_later_asset_urls_descriptive: TSWhereStringInput
  pay_later_asset_urls_standard: TSWhereStringInput
  pay_later_name: TSWhereStringInput
  pay_later_redirect_url: TSWhereStringInput
  pay_now_asset_urls_descriptive: TSWhereStringInput
  pay_now_asset_urls_standard: TSWhereStringInput
  pay_now_name: TSWhereStringInput
  pay_now_redirect_url: TSWhereStringInput
  pay_over_time_asset_urls_descriptive: TSWhereStringInput
  pay_over_time_asset_urls_standard: TSWhereStringInput
  pay_over_time_name: TSWhereStringInput
  pay_over_time_redirect_url: TSWhereStringInput
  payment_method_categories: TSWhereStringInput
  purchase_country: TSWhereStringInput
  purchase_type: TSWhereStringInput
  redirect_url: TSWhereStringInput
  shipping_delay: TSWhereIntegerInput
  shipping_first_name: TSWhereStringInput
  shipping_last_name: TSWhereStringInput
}

input TSWhereStripe_SourceTypeMultibancoInput {
  entity: TSWhereStringInput
  reference: TSWhereStringInput
  refund_account_holder_address_city: TSWhereStringInput
  refund_account_holder_address_country: TSWhereStringInput
  refund_account_holder_address_line1: TSWhereStringInput
  refund_account_holder_address_line2: TSWhereStringInput
  refund_account_holder_address_postal_code: TSWhereStringInput
  refund_account_holder_address_state: TSWhereStringInput
  refund_account_holder_name: TSWhereStringInput
  refund_iban: TSWhereStringInput
}

input TSWhereStripe_SourceOwnerInput {
  address: TSWhereStripe_AddressInput
  email: TSWhereStringInput
  name: TSWhereStringInput
  phone: TSWhereStringInput
  verified_address: TSWhereStripe_AddressInput
  verified_email: TSWhereStringInput
  verified_name: TSWhereStringInput
  verified_phone: TSWhereStringInput
}

input TSWhereStripe_SourceTypeP24Input {
  reference: TSWhereStringInput
}

input TSWhereStripe_SourceReceiverFlowInput {
  address: TSWhereStringInput
  amount_charged: TSWhereIntegerInput
  amount_received: TSWhereIntegerInput
  amount_returned: TSWhereIntegerInput
  refund_attributes_method: TSWhereStringInput
  refund_attributes_status: TSWhereStringInput
}

input TSWhereStripe_SourceRedirectFlowInput {
  failure_reason: TSWhereStringInput
  return_url: TSWhereStringInput
  status: TSWhereStringInput
  url: TSWhereStringInput
}

input TSWhereStripe_SourceTypeSepaDebitInput {
  bank_code: TSWhereStringInput
  branch_code: TSWhereStringInput
  country: TSWhereStringInput
  fingerprint: TSWhereStringInput
  last4: TSWhereStringInput
  mandate_reference: TSWhereStringInput
  mandate_url: TSWhereStringInput
}

input TSWhereStripe_SourceTypeSofortInput {
  bank_code: TSWhereStringInput
  bank_name: TSWhereStringInput
  bic: TSWhereStringInput
  country: TSWhereStringInput
  iban_last4: TSWhereStringInput
  preferred_language: TSWhereStringInput
  statement_descriptor: TSWhereStringInput
}

input TSWhereStripe_SourceOrderInput {
  amount: TSWhereIntegerInput
  currency: TSWhereStringInput
  email: TSWhereStringInput
  items: TSWhereStripe_SourceOrderItemInput
  shipping: TSWhereStripe_ShippingInput
}

input TSWhereStripe_SourceOrderItemInput {
  amount: TSWhereIntegerInput
  currency: TSWhereStringInput
  description: TSWhereStringInput
  parent: TSWhereStringInput
  quantity: TSWhereIntegerInput
  type: TSWhereStringInput
}

input TSWhereStripe_SourceTypeThreeDSecureInput {
  address_line1_check: TSWhereStringInput
  address_zip_check: TSWhereStringInput
  authenticated: TSWhereBooleanInput
  brand: TSWhereStringInput
  card: TSWhereStringInput
  country: TSWhereStringInput
  customer: TSWhereStringInput
  cvc_check: TSWhereStringInput
  dynamic_last4: TSWhereStringInput
  exp_month: TSWhereIntegerInput
  exp_year: TSWhereIntegerInput
  fingerprint: TSWhereStringInput
  funding: TSWhereStringInput
  last4: TSWhereStringInput
  name: TSWhereStringInput
  three_d_secure: TSWhereStringInput
  tokenization_method: TSWhereStringInput
}

input TSWhereStripe_SourceTypeWechatInput {
  prepay_id: TSWhereStringInput
  qr_code_url: TSWhereStringInput
  statement_descriptor: TSWhereStringInput
}

input TSWhereStripe_CustomerSubscriptionsInput {
  data: TSWhereStripe_SubscriptionInput
  has_more: TSWhereBooleanInput
  object: TSWhereInput
  url: TSWhereStringInput
}

input TSWhereStripe_SubscriptionInput {
  application_fee_percent: TSWhereNumberInput
  automatic_tax: TSWhereStripe_SubscriptionAutomaticTaxInput
  billing_cycle_anchor: TSWhereIntegerInput
  billing_thresholds: TSWhereStripe_SubscriptionBillingThresholdsInput
  cancel_at: TSWhereIntegerInput
  cancel_at_period_end: TSWhereBooleanInput
  canceled_at: TSWhereIntegerInput
  collection_method: TSWhereInput
  created: TSWhereIntegerInput
  current_period_end: TSWhereIntegerInput
  current_period_start: TSWhereIntegerInput
  customer: TSWhereStringInput
  days_until_due: TSWhereIntegerInput
  default_tax_rates: TSWhereStripe_TaxRateInput
  discount: TSWhereStripe_DiscountInput
  ended_at: TSWhereIntegerInput
  id: TSWhereStringInput
  items: TSWhereStripe_CustomerItemsInput
  livemode: TSWhereBooleanInput
  next_pending_invoice_item_invoice: TSWhereIntegerInput
  object: TSWhereInput
  pause_collection: TSWhereStripe_SubscriptionsResourcePauseCollectionInput
  payment_settings: TSWhereStripe_SubscriptionsResourcePaymentSettingsInput
  pending_invoice_item_interval: TSWhereStripe_SubscriptionPendingInvoiceItemIntervalInput
  pending_update: TSWhereStripe_SubscriptionsResourcePendingUpdateInput
  start_date: TSWhereIntegerInput
  status: TSWhereInput
  transfer_data: TSWhereStripe_SubscriptionTransferDataInput
  trial_end: TSWhereIntegerInput
  trial_start: TSWhereIntegerInput
}

input TSWhereStripe_CustomerItemsInput {
  data: TSWhereStripe_SubscriptionItemInput
  has_more: TSWhereBooleanInput
  object: TSWhereInput
  url: TSWhereStringInput
}

input TSWhereStripe_CustomerTaxInput {
  automatic_tax: TSWhereInput
  ip_address: TSWhereStringInput
  location: TSWhereStripe_CustomerTaxLocationInput
}

input TSWhereStripe_CustomerTaxLocationInput {
  country: TSWhereStringInput
  source: TSWhereInput
  state: TSWhereStringInput
}

input TSWhereStripe_CustomerTaxIdsInput {
  data: TSWhereStripe_TaxIdInput
  has_more: TSWhereBooleanInput
  object: TSWhereInput
  url: TSWhereStringInput
}

input TSWhereStripe_TaxIdInput {
  country: TSWhereStringInput
  created: TSWhereIntegerInput
  id: TSWhereStringInput
  livemode: TSWhereBooleanInput
  object: TSWhereInput
  type: TSWhereInput
  value: TSWhereStringInput
  verification: TSWhereStripe_TaxIdVerificationInput
}

input TSWhereStripe_SetupIntentInput {
  application: TSWhereStripe_ApplicationWrappedStringUnionInput
  cancellation_reason: TSWhereInput
  client_secret: TSWhereStringInput
  created: TSWhereIntegerInput
  customer: TSWhereStringInput
  description: TSWhereStringInput
  id: TSWhereStringInput
  last_setup_error: TSWhereStripe_ApiErrorsInput
  latest_attempt: TSWhereStripe_SetupAttemptWrappedStringUnionInput
  livemode: TSWhereBooleanInput
  mandate: TSWhereStripe_MandateWrappedStringUnionInput
  next_action: TSWhereStripe_SetupIntentNextActionInput
  object: TSWhereInput
  on_behalf_of: TSWhereStripe_AccountWrappedStringUnionInput
  payment_method: TSWhereStripe_PaymentMethodWrappedStringUnionInput
  payment_method_options: TSWhereStripe_SetupIntentPaymentMethodOptionsInput
  payment_method_types: TSWhereStripe_PaymentIntentPaymentMethodTypesInput
  single_use_mandate: TSWhereStripe_MandateWrappedStringUnionInput
  status: TSWhereInput
  usage: TSWhereStringInput
}

input TSWhereStripe_SetupAttemptWrappedStringUnionInput {
  value: TSWhereStringInput
  created: TSWhereIntegerInput
  id: TSWhereStringInput
  livemode: TSWhereBooleanInput
  object: TSWhereInput
  payment_method_details: TSWhereStripe_SetupAttemptPaymentMethodDetailsInput
  setup_error: TSWhereStripe_ApiErrorsInput
  status: TSWhereStringInput
  usage: TSWhereStringInput
}

input TSWhereStripe_SetupAttemptPaymentMethodDetailsInput {
  bancontact: TSWhereStripe_SetupAttemptPaymentMethodDetailsBancontactInput
  card: TSWhereStripe_SetupAttemptPaymentMethodDetailsCardInput
  ideal: TSWhereStripe_SetupAttemptPaymentMethodDetailsIdealInput
  sofort: TSWhereStripe_SetupAttemptPaymentMethodDetailsSofortInput
  type: TSWhereStringInput
}

input TSWhereStripe_SetupAttemptPaymentMethodDetailsBancontactInput {
  bank_code: TSWhereStringInput
  bank_name: TSWhereStringInput
  bic: TSWhereStringInput
  iban_last4: TSWhereStringInput
  preferred_language: TSWhereInput
  verified_name: TSWhereStringInput
}

input TSWhereStripe_SetupAttemptPaymentMethodDetailsCardInput {
  three_d_secure: TSWhereStripe_ThreeDSecureDetailsInput
}

input TSWhereStripe_ThreeDSecureDetailsInput {
  authentication_flow: TSWhereInput
  result: TSWhereInput
  result_reason: TSWhereInput
  version: TSWhereInput
}

input TSWhereStripe_SetupAttemptPaymentMethodDetailsIdealInput {
  bank: TSWhereInput
  bic: TSWhereInput
  iban_last4: TSWhereStringInput
  verified_name: TSWhereStringInput
}

input TSWhereStripe_SetupAttemptPaymentMethodDetailsSofortInput {
  bank_code: TSWhereStringInput
  bank_name: TSWhereStringInput
  bic: TSWhereStringInput
  iban_last4: TSWhereStringInput
  preferred_language: TSWhereInput
  verified_name: TSWhereStringInput
}

input TSWhereStripe_MandateWrappedStringUnionInput {
  value: TSWhereStringInput
  customer_acceptance: TSWhereStripe_CustomerAcceptanceInput
  id: TSWhereStringInput
  livemode: TSWhereBooleanInput
  object: TSWhereInput
  payment_method_details: TSWhereStripe_MandatePaymentMethodDetailsInput
  single_use: TSWhereStripe_MandateSingleUseInput
  status: TSWhereInput
  type: TSWhereInput
}

input TSWhereStripe_CustomerAcceptanceInput {
  accepted_at: TSWhereIntegerInput
  online: TSWhereStripe_OnlineAcceptanceInput
  type: TSWhereInput
}

input TSWhereStripe_OnlineAcceptanceInput {
  ip_address: TSWhereStringInput
  user_agent: TSWhereStringInput
}

input TSWhereStripe_MandatePaymentMethodDetailsInput {
  acss_debit: TSWhereStripe_MandateAcssDebitInput
  au_becs_debit: TSWhereStripe_MandateAuBecsDebitInput
  bacs_debit: TSWhereStripe_MandateBacsDebitInput
  sepa_debit: TSWhereStripe_MandateSepaDebitInput
  type: TSWhereStringInput
}

input TSWhereStripe_MandateAcssDebitInput {
  interval_description: TSWhereStringInput
  payment_schedule: TSWhereInput
  transaction_type: TSWhereInput
}

input TSWhereStripe_MandateAuBecsDebitInput {
  url: TSWhereStringInput
}

input TSWhereStripe_MandateBacsDebitInput {
  network_status: TSWhereInput
  reference: TSWhereStringInput
  url: TSWhereStringInput
}

input TSWhereStripe_MandateSepaDebitInput {
  reference: TSWhereStringInput
  url: TSWhereStringInput
}

input TSWhereStripe_MandateSingleUseInput {
  amount: TSWhereIntegerInput
  currency: TSWhereStringInput
}

input TSWhereStripe_SetupIntentNextActionInput {
  redirect_to_url: TSWhereStripe_SetupIntentNextActionRedirectToUrlInput
  type: TSWhereStringInput
  verify_with_microdeposits: TSWhereStripe_SetupIntentNextActionVerifyWithMicrodepositsInput
}

input TSWhereStripe_SetupIntentNextActionRedirectToUrlInput {
  return_url: TSWhereStringInput
  url: TSWhereStringInput
}

input TSWhereStripe_SetupIntentNextActionVerifyWithMicrodepositsInput {
  arrival_date: TSWhereIntegerInput
  hosted_verification_url: TSWhereStringInput
  microdeposit_type: TSWhereInput
}

input TSWhereStripe_SetupIntentPaymentMethodOptionsInput {
  acss_debit: TSWhere6c955fa05d8df9184cc18d8841c3705dUnionInput
  card: TSWhereStripe_SetupIntentPaymentMethodOptionsCardInput
  sepa_debit: TSWhere256af04705b008a07ca5c137b490ba88UnionInput
  us_bank_account: TSWhere5e84458a02fb07e8c3d5d9b0bb3e5d99UnionInput
}

input TSWhere6c955fa05d8df9184cc18d8841c3705dUnionInput {
  currency: TSWhereInput
  mandate_options: TSWhereStripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitInput
  verification_method: TSWhereInput
}

input TSWhereStripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitInput {
  custom_mandate_url: TSWhereStringInput
  interval_description: TSWhereStringInput
  payment_schedule: TSWhereInput
  transaction_type: TSWhereInput
}

input TSWhereStripe_SetupIntentPaymentMethodOptionsCardInput {
  mandate_options: TSWhereStripe_SetupIntentPaymentMethodOptionsCardMandateOptionsInput
  request_three_d_secure: TSWhereInput
}

input TSWhereStripe_SetupIntentPaymentMethodOptionsCardMandateOptionsInput {
  amount: TSWhereIntegerInput
  amount_type: TSWhereInput
  currency: TSWhereStringInput
  description: TSWhereStringInput
  end_date: TSWhereIntegerInput
  interval: TSWhereInput
  interval_count: TSWhereIntegerInput
  reference: TSWhereStringInput
  start_date: TSWhereIntegerInput
}

input TSWhere256af04705b008a07ca5c137b490ba88UnionInput {
  verification_method: TSWhereInput
}

input TSWhere5e84458a02fb07e8c3d5d9b0bb3e5d99UnionInput {
  verification_method: TSWhereInput
}

input TSWhereStripe_BankAccountStripe_CardStripe_SourceUnionInput {
  account_holder_name: TSWhereStringInput
  account_holder_type: TSWhereStringInput
  account_type: TSWhereStringInput
  bank_name: TSWhereStringInput
  country: TSWhereStringInput
  currency: TSWhereStringInput
  customer: TSWhereStringInput
  default_for_currency: TSWhereBooleanInput
  fingerprint: TSWhereStringInput
  id: TSWhereStringInput
  last4: TSWhereStringInput
  object: TSWhereInput
  routing_number: TSWhereStringInput
  status: TSWhereStringInput
  address_city: TSWhereStringInput
  address_country: TSWhereStringInput
  address_line1: TSWhereStringInput
  address_line1_check: TSWhereStringInput
  address_line2: TSWhereStringInput
  address_state: TSWhereStringInput
  address_zip: TSWhereStringInput
  address_zip_check: TSWhereStringInput
  brand: TSWhereStringInput
  cvc_check: TSWhereStringInput
  dynamic_last4: TSWhereStringInput
  exp_month: TSWhereIntegerInput
  exp_year: TSWhereIntegerInput
  funding: TSWhereStringInput
  name: TSWhereStringInput
  tokenization_method: TSWhereStringInput
  ach_credit_transfer: TSWhereStripe_SourceTypeAchCreditTransferInput
  ach_debit: TSWhereStripe_SourceTypeAchDebitInput
  acss_debit: TSWhereStripe_SourceTypeAcssDebitInput
  alipay: TSWhereStripe_SourceTypeAlipayInput
  amount: TSWhereIntegerInput
  au_becs_debit: TSWhereStripe_SourceTypeAuBecsDebitInput
  bancontact: TSWhereStripe_SourceTypeBancontactInput
  card: TSWhereStripe_SourceTypeCardInput
  card_present: TSWhereStripe_SourceTypeCardPresentInput
  client_secret: TSWhereStringInput
  code_verification: TSWhereStripe_SourceCodeVerificationFlowInput
  created: TSWhereIntegerInput
  eps: TSWhereStripe_SourceTypeEpsInput
  flow: TSWhereStringInput
  giropay: TSWhereStripe_SourceTypeGiropayInput
  ideal: TSWhereStripe_SourceTypeIdealInput
  klarna: TSWhereStripe_SourceTypeKlarnaInput
  livemode: TSWhereBooleanInput
  multibanco: TSWhereStripe_SourceTypeMultibancoInput
  owner: TSWhereStripe_SourceOwnerInput
  p24: TSWhereStripe_SourceTypeP24Input
  receiver: TSWhereStripe_SourceReceiverFlowInput
  redirect: TSWhereStripe_SourceRedirectFlowInput
  sepa_debit: TSWhereStripe_SourceTypeSepaDebitInput
  sofort: TSWhereStripe_SourceTypeSofortInput
  source_order: TSWhereStripe_SourceOrderInput
  statement_descriptor: TSWhereStringInput
  three_d_secure: TSWhereStripe_SourceTypeThreeDSecureInput
  type: TSWhereInput
  usage: TSWhereStringInput
  wechat: TSWhereStripe_SourceTypeWechatInput
}

input TSWhereStripe_InvoiceLinesInput {
  data: TSWhereStripe_LineItemInput
  has_more: TSWhereBooleanInput
  object: TSWhereInput
  url: TSWhereStringInput
}

input TSWhereStripe_LineItemInput {
  amount: TSWhereIntegerInput
  currency: TSWhereStringInput
  description: TSWhereStringInput
  discount_amounts: TSWhereStripe_DiscountsResourceDiscountAmountInput
  discountable: TSWhereBooleanInput
  discounts: TSWhereStripe_InvoiceDiscountsInput
  id: TSWhereStringInput
  invoice_item: TSWhereStringInput
  livemode: TSWhereBooleanInput
  object: TSWhereInput
  period: TSWhereStripe_InvoiceLineItemPeriodInput
  price: TSWhereStripe_PriceInput
  proration: TSWhereBooleanInput
  proration_details: TSWhereStripe_InvoicesLineItemsProrationDetailsInput
  quantity: TSWhereIntegerInput
  subscription: TSWhereStringInput
  subscription_item: TSWhereStringInput
  tax_amounts: TSWhereStripe_InvoiceTaxAmountInput
  tax_rates: TSWhereStripe_TaxRateInput
  type: TSWhereInput
}

input TSWhereStripe_DiscountsResourceDiscountAmountInput {
  amount: TSWhereIntegerInput
}

input TSWhereStripe_InvoicesLineItemsProrationDetailsInput {
  credited_items: TSWhereStripe_InvoicesLineItemsCreditedItemsInput
}

input TSWhereStripe_InvoicesLineItemsCreditedItemsInput {
  invoice: TSWhereStringInput
  invoice_line_items: TSWhereStripe_InvoiceInvoiceLineItemsInput
}

input TSWhereStripe_InvoiceInvoiceLineItemsInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereStripe_InvoiceTaxAmountInput {
  amount: TSWhereIntegerInput
  inclusive: TSWhereBooleanInput
}

input TSWhereStripe_InvoicesPaymentSettingsInput {
  payment_method_options: TSWhereStripe_InvoicesPaymentMethodOptionsInput
}

input TSWhereStripe_InvoicesPaymentMethodOptionsInput {
  acss_debit: TSWhereStripe_InvoicePaymentMethodOptionsAcssDebitInput
  bancontact: TSWhereStripe_InvoicePaymentMethodOptionsBancontactInput
  card: TSWhereStripe_InvoicePaymentMethodOptionsCardInput
  customer_balance: TSWhereStripe_InvoicePaymentMethodOptionsCustomerBalanceInput
  us_bank_account: TSWhereStripe_InvoicePaymentMethodOptionsUsBankAccountInput
}

input TSWhereStripe_InvoicePaymentMethodOptionsCardInput {
  request_three_d_secure: TSWhereInput
}

input TSWhereStripe_InvoicesStatusTransitionsInput {
  finalized_at: TSWhereIntegerInput
  marked_uncollectible_at: TSWhereIntegerInput
  paid_at: TSWhereIntegerInput
  voided_at: TSWhereIntegerInput
}

input TSWhereStripe_InvoiceThresholdReasonInput {
  amount_gte: TSWhereIntegerInput
  item_reasons: TSWhereStripe_InvoiceItemThresholdReasonInput
}

input TSWhereStripe_InvoiceItemThresholdReasonInput {
  line_item_ids: TSWhereStripe_InvoiceLineItemIdsInput
  usage_gte: TSWhereIntegerInput
}

input TSWhereStripe_InvoiceLineItemIdsInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereStripe_InvoiceTransferDataInput {
  amount: TSWhereIntegerInput
}

input TSWhereStripe_OrderWrappedStringUnionInput {
  value: TSWhereStringInput
  amount: TSWhereIntegerInput
  amount_returned: TSWhereIntegerInput
  application: TSWhereStringInput
  application_fee: TSWhereIntegerInput
  created: TSWhereIntegerInput
  currency: TSWhereStringInput
  customer: TSWhereStringInput
  email: TSWhereStringInput
  external_coupon_code: TSWhereStringInput
  id: TSWhereStringInput
  items: TSWhereStripe_OrderItemInput
  livemode: TSWhereBooleanInput
  object: TSWhereInput
  returns: TSWhereStripe_OrderReturnsInput
  selected_shipping_method: TSWhereStringInput
  shipping: TSWhereStripe_ShippingInput
  shipping_methods: TSWhereStripe_ShippingMethodInput
  status: TSWhereStringInput
  status_transitions: TSWhereStripe_StatusTransitionsInput
  updated: TSWhereIntegerInput
  upstream_id: TSWhereStringInput
}

input TSWhereStripe_OrderItemInput {
  amount: TSWhereIntegerInput
  currency: TSWhereStringInput
  description: TSWhereStringInput
  object: TSWhereInput
  quantity: TSWhereIntegerInput
  type: TSWhereStringInput
}

input TSWhereStripe_OrderReturnsInput {
  data: TSWhereStripe_OrderReturnInput
  has_more: TSWhereBooleanInput
  object: TSWhereInput
  url: TSWhereStringInput
}

input TSWhereStripe_OrderReturnInput {
  amount: TSWhereIntegerInput
  created: TSWhereIntegerInput
  currency: TSWhereStringInput
  id: TSWhereStringInput
  items: TSWhereStripe_OrderItemInput
  livemode: TSWhereBooleanInput
  object: TSWhereInput
}

input TSWhereStripe_ShippingMethodInput {
  amount: TSWhereIntegerInput
  currency: TSWhereStringInput
  delivery_estimate: TSWhereStripe_DeliveryEstimateInput
  description: TSWhereStringInput
  id: TSWhereStringInput
}

input TSWhereStripe_DeliveryEstimateInput {
  date: TSWhereStringInput
  earliest: TSWhereStringInput
  latest: TSWhereStringInput
  type: TSWhereStringInput
}

input TSWhereStripe_StatusTransitionsInput {
  canceled: TSWhereIntegerInput
  fulfiled: TSWhereIntegerInput
  paid: TSWhereIntegerInput
  returned: TSWhereIntegerInput
}

input TSWhereStripe_ChargeOutcomeInput {
  network_status: TSWhereStringInput
  reason: TSWhereStringInput
  risk_level: TSWhereStringInput
  risk_score: TSWhereIntegerInput
  rule: TSWhereStripe_RuleWrappedStringUnionInput
  seller_message: TSWhereStringInput
  type: TSWhereStringInput
}

input TSWhereStripe_RuleWrappedStringUnionInput {
  value: TSWhereStringInput
  action: TSWhereStringInput
  id: TSWhereStringInput
  predicate: TSWhereStringInput
}

input TSWhereStripe_PaymentIntentWrappedStringUnionInput {
  value: TSWhereStringInput
  amount: TSWhereIntegerInput
  amount_capturable: TSWhereIntegerInput
  amount_details: TSWhereStripe_PaymentFlowsAmountDetailsInput
  amount_received: TSWhereIntegerInput
  application: TSWhereStripe_ApplicationWrappedStringUnionInput
  application_fee_amount: TSWhereIntegerInput
  automatic_payment_methods: TSWhereStripe_PaymentFlowsAutomaticPaymentMethodsPaymentIntentInput
  canceled_at: TSWhereIntegerInput
  cancellation_reason: TSWhereInput
  capture_method: TSWhereInput
  charges: TSWhereStripe_PaymentIntentChargesInput
  client_secret: TSWhereStringInput
  confirmation_method: TSWhereInput
  created: TSWhereIntegerInput
  currency: TSWhereStringInput
  customer: TSWhereStringInput
  description: TSWhereStringInput
  id: TSWhereStringInput
  invoice: TSWhereStripe_InvoiceWrappedStringUnionInput
  last_payment_error: TSWhereStripe_ApiErrorsInput
  livemode: TSWhereBooleanInput
  next_action: TSWhereStripe_PaymentIntentNextActionInput
  object: TSWhereInput
  on_behalf_of: TSWhereStripe_AccountWrappedStringUnionInput
  payment_method: TSWhereStripe_PaymentMethodWrappedStringUnionInput
  payment_method_options: TSWhereStripe_PaymentIntentPaymentMethodOptionsInput
  payment_method_types: TSWhereStripe_PaymentIntentPaymentMethodTypesInput
  processing: TSWhereStripe_PaymentIntentProcessingInput
  receipt_email: TSWhereStringInput
  review: TSWhereStripe_ReviewWrappedStringUnionInput
  setup_future_usage: TSWhereInput
  shipping: TSWhereStripe_ShippingInput
  statement_descriptor: TSWhereStringInput
  statement_descriptor_suffix: TSWhereStringInput
  status: TSWhereInput
  transfer_data: TSWhereStripe_TransferDataInput
  transfer_group: TSWhereStringInput
  invoiceItems: TSWhereStripe_InvoiceitemInput
  sessionItems: TSWhereStripe_ItemInput
  shipment: TSWhereShipEngine_LabelInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
}

input TSWhereStripe_PaymentMethodDetailsInput {
  ach_credit_transfer: TSWhereStripe_PaymentMethodDetailsAchCreditTransferInput
  ach_debit: TSWhereStripe_PaymentMethodDetailsAchDebitInput
  acss_debit: TSWhereStripe_PaymentMethodDetailsAcssDebitInput
  afterpay_clearpay: TSWhereStripe_PaymentMethodDetailsAfterpayClearpayInput
  alipay: TSWhereStripe_PaymentFlowsPrivatePaymentMethodsAlipayDetailsInput
  au_becs_debit: TSWhereStripe_PaymentMethodDetailsAuBecsDebitInput
  bacs_debit: TSWhereStripe_PaymentMethodDetailsBacsDebitInput
  bancontact: TSWhereStripe_PaymentMethodDetailsBancontactInput
  boleto: TSWhereStripe_PaymentMethodDetailsBoletoInput
  card: TSWhereStripe_PaymentMethodDetailsCardInput
  card_present: TSWhereStripe_PaymentMethodDetailsCardPresentInput
  eps: TSWhereStripe_PaymentMethodDetailsEpsInput
  fpx: TSWhereStripe_PaymentMethodDetailsFpxInput
  giropay: TSWhereStripe_PaymentMethodDetailsGiropayInput
  grabpay: TSWhereStripe_PaymentMethodDetailsGrabpayInput
  ideal: TSWhereStripe_PaymentMethodDetailsIdealInput
  interac_present: TSWhereStripe_PaymentMethodDetailsInteracPresentInput
  klarna: TSWhereStripe_PaymentMethodDetailsKlarnaInput
  konbini: TSWhereStripe_PaymentMethodDetailsKonbiniInput
  multibanco: TSWhereStripe_PaymentMethodDetailsMultibancoInput
  oxxo: TSWhereStripe_PaymentMethodDetailsOxxoInput
  p24: TSWhereStripe_PaymentMethodDetailsP24Input
  paynow: TSWhereStripe_PaymentMethodDetailsPaynowInput
  sepa_debit: TSWhereStripe_PaymentMethodDetailsSepaDebitInput
  sofort: TSWhereStripe_PaymentMethodDetailsSofortInput
  type: TSWhereStringInput
  us_bank_account: TSWhereStripe_PaymentMethodDetailsUsBankAccountInput
  wechat_pay: TSWhereStripe_PaymentMethodDetailsWechatPayInput
}

input TSWhereStripe_PaymentMethodDetailsAchCreditTransferInput {
  account_number: TSWhereStringInput
  bank_name: TSWhereStringInput
  routing_number: TSWhereStringInput
  swift_code: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsAchDebitInput {
  account_holder_type: TSWhereInput
  bank_name: TSWhereStringInput
  country: TSWhereStringInput
  fingerprint: TSWhereStringInput
  last4: TSWhereStringInput
  routing_number: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsAcssDebitInput {
  bank_name: TSWhereStringInput
  fingerprint: TSWhereStringInput
  institution_number: TSWhereStringInput
  last4: TSWhereStringInput
  mandate: TSWhereStringInput
  transit_number: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsAfterpayClearpayInput {
  reference: TSWhereStringInput
}

input TSWhereStripe_PaymentFlowsPrivatePaymentMethodsAlipayDetailsInput {
  buyer_id: TSWhereStringInput
  fingerprint: TSWhereStringInput
  transaction_id: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsAuBecsDebitInput {
  bsb_number: TSWhereStringInput
  fingerprint: TSWhereStringInput
  last4: TSWhereStringInput
  mandate: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsBacsDebitInput {
  fingerprint: TSWhereStringInput
  last4: TSWhereStringInput
  mandate: TSWhereStringInput
  sort_code: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsBancontactInput {
  bank_code: TSWhereStringInput
  bank_name: TSWhereStringInput
  bic: TSWhereStringInput
  generated_sepa_debit: TSWhereStripe_PaymentMethodWrappedStringUnionInput
  generated_sepa_debit_mandate: TSWhereStripe_MandateWrappedStringUnionInput
  iban_last4: TSWhereStringInput
  preferred_language: TSWhereInput
  verified_name: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsBoletoInput {
  tax_id: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsCardInput {
  brand: TSWhereStringInput
  checks: TSWhereStripe_PaymentMethodDetailsCardChecksInput
  country: TSWhereStringInput
  exp_month: TSWhereIntegerInput
  exp_year: TSWhereIntegerInput
  fingerprint: TSWhereStringInput
  funding: TSWhereStringInput
  installments: TSWhereStripe_PaymentMethodDetailsCardInstallmentsInput
  last4: TSWhereStringInput
  mandate: TSWhereStringInput
  network: TSWhereStringInput
  three_d_secure: TSWhereStripe_ThreeDSecureDetailsInput
  wallet: TSWhereStripe_PaymentMethodDetailsCardWalletInput
}

input TSWhereStripe_PaymentMethodDetailsCardChecksInput {
  address_line1_check: TSWhereStringInput
  address_postal_code_check: TSWhereStringInput
  cvc_check: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsCardInstallmentsInput {
  plan: TSWhereStripe_PaymentMethodDetailsCardInstallmentsPlanInput
}

input TSWhereStripe_PaymentMethodDetailsCardWalletInput {
  dynamic_last4: TSWhereStringInput
  masterpass: TSWhereStripe_PaymentMethodDetailsCardWalletMasterpassInput
  type: TSWhereInput
  visa_checkout: TSWhereStripe_PaymentMethodDetailsCardWalletVisaCheckoutInput
}

input TSWhereStripe_PaymentMethodDetailsCardWalletMasterpassInput {
  billing_address: TSWhereStripe_AddressInput
  email: TSWhereStringInput
  name: TSWhereStringInput
  shipping_address: TSWhereStripe_AddressInput
}

input TSWhereStripe_PaymentMethodDetailsCardWalletVisaCheckoutInput {
  billing_address: TSWhereStripe_AddressInput
  email: TSWhereStringInput
  name: TSWhereStringInput
  shipping_address: TSWhereStripe_AddressInput
}

input TSWhereStripe_PaymentMethodDetailsEpsInput {
  bank: TSWhereInput
  verified_name: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsFpxInput {
  bank: TSWhereInput
  transaction_id: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsGiropayInput {
  bank_code: TSWhereStringInput
  bank_name: TSWhereStringInput
  bic: TSWhereStringInput
  verified_name: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsGrabpayInput {
  transaction_id: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsIdealInput {
  bank: TSWhereInput
  bic: TSWhereInput
  generated_sepa_debit: TSWhereStripe_PaymentMethodWrappedStringUnionInput
  generated_sepa_debit_mandate: TSWhereStripe_MandateWrappedStringUnionInput
  iban_last4: TSWhereStringInput
  verified_name: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsInteracPresentInput {
  brand: TSWhereStringInput
  cardholder_name: TSWhereStringInput
  country: TSWhereStringInput
  emv_auth_data: TSWhereStringInput
  exp_month: TSWhereIntegerInput
  exp_year: TSWhereIntegerInput
  fingerprint: TSWhereStringInput
  funding: TSWhereStringInput
  generated_card: TSWhereStringInput
  last4: TSWhereStringInput
  network: TSWhereStringInput
  preferred_locales: TSWhereStripe_PaymentIntentPreferredLocalesInput
  read_method: TSWhereInput
  receipt: TSWhereStripe_PaymentMethodDetailsInteracPresentReceiptInput
}

input TSWhereStripe_PaymentIntentPreferredLocalesInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereStripe_PaymentMethodDetailsInteracPresentReceiptInput {
  account_type: TSWhereInput
  application_cryptogram: TSWhereStringInput
  application_preferred_name: TSWhereStringInput
  authorization_code: TSWhereStringInput
  authorization_response_code: TSWhereStringInput
  cardholder_verification_method: TSWhereStringInput
  dedicated_file_name: TSWhereStringInput
  terminal_verification_results: TSWhereStringInput
  transaction_status_information: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsKlarnaInput {
  payment_method_category: TSWhereStringInput
  preferred_locale: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsKonbiniInput {
  store: TSWhereStripe_PaymentMethodDetailsKonbiniStoreInput
}

input TSWhereStripe_PaymentMethodDetailsKonbiniStoreInput {
  chain: TSWhereInput
}

input TSWhereStripe_PaymentMethodDetailsMultibancoInput {
  entity: TSWhereStringInput
  reference: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsOxxoInput {
  number: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsP24Input {
  bank: TSWhereInput
  reference: TSWhereStringInput
  verified_name: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsPaynowInput {
  reference: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsSepaDebitInput {
  bank_code: TSWhereStringInput
  branch_code: TSWhereStringInput
  country: TSWhereStringInput
  fingerprint: TSWhereStringInput
  last4: TSWhereStringInput
  mandate: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsSofortInput {
  bank_code: TSWhereStringInput
  bank_name: TSWhereStringInput
  bic: TSWhereStringInput
  country: TSWhereStringInput
  generated_sepa_debit: TSWhereStripe_PaymentMethodWrappedStringUnionInput
  generated_sepa_debit_mandate: TSWhereStripe_MandateWrappedStringUnionInput
  iban_last4: TSWhereStringInput
  preferred_language: TSWhereInput
  verified_name: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsUsBankAccountInput {
  account_holder_type: TSWhereInput
  account_type: TSWhereInput
  bank_name: TSWhereStringInput
  fingerprint: TSWhereStringInput
  last4: TSWhereStringInput
  routing_number: TSWhereStringInput
}

input TSWhereStripe_PaymentMethodDetailsWechatPayInput {
  fingerprint: TSWhereStringInput
  transaction_id: TSWhereStringInput
}

input TSWhereStripe_PaymentIntentRefundsInput {
  data: TSWhereStripe_RefundInput
  has_more: TSWhereBooleanInput
  object: TSWhereInput
  url: TSWhereStringInput
}

input TSWhereStripe_RefundInput {
  amount: TSWhereIntegerInput
  balance_transaction: TSWhereStripe_BalanceTransactionWrappedStringUnionInput
  charge: TSWhereStripe_ChargeWrappedStringUnionInput
  created: TSWhereIntegerInput
  currency: TSWhereStringInput
  description: TSWhereStringInput
  failure_balance_transaction: TSWhereStripe_BalanceTransactionWrappedStringUnionInput
  failure_reason: TSWhereStringInput
  id: TSWhereStringInput
  next_action: TSWhereStripe_RefundNextActionInput
  object: TSWhereInput
  payment_intent: TSWhereStripe_PaymentIntentWrappedStringUnionInput
  reason: TSWhereInput
  receipt_number: TSWhereStringInput
  source_transfer_reversal: TSWhereStripe_TransferReversalWrappedStringUnionInput
  status: TSWhereStringInput
  transfer_reversal: TSWhereStripe_TransferReversalWrappedStringUnionInput
}

input TSWhereStripe_ChargeWrappedStringUnionInput {
  value: TSWhereStringInput
  amount: TSWhereIntegerInput
  amount_captured: TSWhereIntegerInput
  amount_refunded: TSWhereIntegerInput
  application_fee_amount: TSWhereIntegerInput
  billing_details: TSWhereStripe_BillingDetailsInput
  calculated_statement_descriptor: TSWhereStringInput
  captured: TSWhereBooleanInput
  created: TSWhereIntegerInput
  currency: TSWhereStringInput
  customer: TSWhereStringInput
  description: TSWhereStringInput
  disputed: TSWhereBooleanInput
  failure_code: TSWhereStringInput
  failure_message: TSWhereStringInput
  fraud_details: TSWhereStripe_ChargeFraudDetailsInput
  id: TSWhereStringInput
  livemode: TSWhereBooleanInput
  object: TSWhereInput
  outcome: TSWhereStripe_ChargeOutcomeInput
  paid: TSWhereBooleanInput
  payment_method: TSWhereStringInput
  payment_method_details: TSWhereStripe_PaymentMethodDetailsInput
  receipt_email: TSWhereStringInput
  receipt_number: TSWhereStringInput
  receipt_url: TSWhereStringInput
  refunded: TSWhereBooleanInput
  refunds: TSWhereStripe_ChargeRefundsInput
  shipping: TSWhereStripe_ShippingInput
  statement_descriptor: TSWhereStringInput
  statement_descriptor_suffix: TSWhereStringInput
  status: TSWhereInput
  transfer_data: TSWhereStripe_ChargeTransferDataInput
  transfer_group: TSWhereStringInput
}

input TSWhereStripe_ChargeRefundsInput {
  data: TSWhereStripe_RefundInput
  has_more: TSWhereBooleanInput
  object: TSWhereInput
  url: TSWhereStringInput
}

input TSWhereStripe_ChargeTransferDataInput {
  amount: TSWhereIntegerInput
  destination: TSWhereStripe_AccountWrappedStringUnionInput
}

input TSWhereStripe_RefundNextActionInput {
  display_details: TSWhereStripe_RefundNextActionDisplayDetailsInput
  type: TSWhereStringInput
}

input TSWhereStripe_RefundNextActionDisplayDetailsInput {
  email_sent: TSWhereStripe_EmailSentInput
  expires_at: TSWhereIntegerInput
}

input TSWhereStripe_EmailSentInput {
  email_sent_at: TSWhereIntegerInput
  email_sent_to: TSWhereStringInput
}

input TSWhereStripe_TransferReversalWrappedStringUnionInput {
  value: TSWhereStringInput
  amount: TSWhereIntegerInput
  created: TSWhereIntegerInput
  currency: TSWhereStringInput
  id: TSWhereStringInput
  object: TSWhereInput
}

input TSWhereStripe_TransferWrappedStringUnionInput {
  value: TSWhereStringInput
  amount: TSWhereIntegerInput
  amount_reversed: TSWhereIntegerInput
  created: TSWhereIntegerInput
  currency: TSWhereStringInput
  description: TSWhereStringInput
  id: TSWhereStringInput
  livemode: TSWhereBooleanInput
  object: TSWhereInput
  reversals: TSWhereStripe_TransferReversalsInput
  reversed: TSWhereBooleanInput
  source_type: TSWhereStringInput
  transfer_group: TSWhereStringInput
}

input TSWhereStripe_TransferReversalsInput {
  data: TSWhereStripe_TransferReversalInput
  has_more: TSWhereBooleanInput
  object: TSWhereInput
  url: TSWhereStringInput
}

input TSWhereStripe_TransferReversalInput {
  amount: TSWhereIntegerInput
  created: TSWhereIntegerInput
  currency: TSWhereStringInput
  id: TSWhereStringInput
  object: TSWhereInput
}

input TSWhereAssetRelationshipInput {
  title: TSWhereStringInput
  description: TSWhereStringInput
  filename: TSWhereStringInput
  caption: TSWhereDraftjsInput
  credit: TSWhereDraftjsInput
  path: TSWhereStringInput
  mimeType: TSWhereStringInput
  sourceUrl: TSWhereStringInput
  uploadStatus: TSWhereStringInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
  s3Key: TSWhereStringInput
}

input TSWhereNavigationDataLinksInput {
  categories: TSWhereNavigationDataCategoriesInput
  pages: TSWhereNavigationDataPagesInput
}

input TSWhereNavigationDataCategoriesInput {
  name: TSWhereStringInput
  featured: TSWhereNavigationDataLinksCategoriesFeaturedInput
  collection: TSWhereNavigationDataLinksCategoriesCollectionInput
  categories: TSWhereNavigationDataLinksCategoriesCategoriesInput
  brands: TSWhereNavigationDataLinksCategoriesBrandsInput
}

input TSWhereNavigationDataLinksCategoriesFeaturedInput {
  name: TSWhereStringInput
  href: TSWhereStringInput
}

input TSWhereNavigationDataLinksCategoriesCollectionInput {
  name: TSWhereStringInput
  href: TSWhereStringInput
}

input TSWhereNavigationDataLinksCategoriesCategoriesInput {
  name: TSWhereStringInput
  href: TSWhereStringInput
}

input TSWhereNavigationDataLinksCategoriesBrandsInput {
  name: TSWhereStringInput
  href: TSWhereStringInput
}

input TSWhereNavigationDataPagesInput {
  name: TSWhereStringInput
  href: TSWhereStringInput
}

input TSWhereFooterNavigationInput {
  sections: TSWhereFooterSectionsInput
}

input TSWhereFooterSectionsInput {
  name: TSWhereStringInput
  items: TSWhereFooterNavigationSectionsItemsInput
}

input TSWhereFooterNavigationSectionsItemsInput {
  name: TSWhereStringInput
  href: TSWhereStringInput
}

input TSWhereFooterNewsletterInput {
  text: TSWhereTextInput
}

input TSWhereTextInput {
  primary: TSWhereStringInput
  secondary: TSWhereStringInput
  button: TSWhereStringInput
}

input TSWhereStorefrontComponentsInput {
  offers: TSWhereOffersComponentOffersInput
  primaryText: TSWhereStringInput
  secondaryText: TSWhereStringInput
  buttonText: TSWhereStringInput
  image: TSWhereStringInput
  collections: TSWhereCollectionsComponentCollectionsInput
}

input TSWhereOffersComponentOffersInput {
  href: TSWhereStringInput
  name: TSWhereStringInput
  description: TSWhereStringInput
}

input TSWhereCollectionsComponentCollectionsInput {
  name: TSWhereStringInput
  description: TSWhereStringInput
  imageSrc: TSWhereStringInput
  imageAlt: TSWhereStringInput
  href: TSWhereStringInput
}

type Profile implements TSSearchable {
  """"""
  id: String

  """"""
  name: String

  """"""
  email: String

  """"""
  bio: String

  """"""
  avatar(enableLocaleFallback: Boolean = true, locale: String): Asset

  """"""
  shopifyCustomerId: String
  shopifyCustomer: Shopify_Customer

  """"""
  stripeCustomerId: String

  """"""
  stripeCustomer: Stripe_Customer

  """"""
  loyaltyCard: Voucherify_LoyaltyCard

  """"""
  orders: [Stripe_Invoice]
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean @deprecated(reason: "Use _status instead")
  _enabledAt: String @deprecated(reason: "Use a custom date field instead")
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

"""
Represents information about a customer of the shop, such as the customer's contact details, their order
history, and whether they've agreed to receive marketing material by email.

**Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
"""
type Shopify_Customer {
  """Whether the customer has agreed to receive marketing material."""
  acceptsMarketing: Boolean! @deprecated(reason: "Use `emailMarketingConsent` instead")

  """
  The date and time when the customer consented or objected to receiving marketing material by email.
  """
  acceptsMarketingUpdatedAt: DateTime! @deprecated(reason: "Use `emailMarketingConsent` instead")

  """A list of addresses associated with the customer."""
  addresses(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_MailingAddress!]!

  """The average amount that the customer spent per order."""
  averageOrderAmount: Money @deprecated(reason: "Use `averageOrderAmountV2` instead")

  """The average amount that the customer spent per order."""
  averageOrderAmountV2: Shopify_MoneyV2

  """
  Whether the merchant can delete the customer from their store.
  
  A customer can be deleted from a store only if they have not yet made an order. After a customer makes an
  order, they can't be deleted from a store.
  """
  canDelete: Boolean!

  """The date and time when the customer was added to the store."""
  createdAt: DateTime!

  """The default address associated with the customer."""
  defaultAddress: Shopify_MailingAddress

  """
  The full name of the customer, based on the values for first_name and last_name. If the first_name and
  last_name are not available, then this falls back to the customer's email address, and if that is not available, the customer's phone number.
  """
  displayName: String!

  """The customer's email address."""
  email: String

  """A list of events associated with the customer."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_EventSortKeys = ID

    """
    Supported filter parameters:
     - `comments`
     - `created_at`
     - `subject_type`
     - `verb`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_EventConnection!

  """The customer's first name."""
  firstName: String

  """Whether the customer has a note associated with them."""
  hasNote: Boolean! @deprecated(reason: "Check for a value in the note field directly instead.")

  """
  Whether the merchant has added timeline comments about the customer on the customer's page.
  """
  hasTimelineComment: Boolean! @deprecated(reason: "To query for comments on the timeline, use the events connection and a `query` argument containing `verb:comment`, or look for a `CommentEvent` in the `__typename` of events.")

  """A globally-unique identifier."""
  id: ID!

  """The image associated with the customer."""
  image(
    """
    Image width and height (1 - 2048 pixels) This argument is deprecated: Use `maxWidth` or `maxHeight` on `Image.transformedSrc` instead.
    """
    size: Int
  ): Shopify_Image!

  """The customer's last name."""
  lastName: String

  """The customer's last order."""
  lastOrder: Shopify_Order

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """
  The amount of time since the customer was first added to the store.
  
  Example: 'about 12 years'.
  """
  lifetimeDuration: String!

  """The customer's locale."""
  locale: String!

  """
  The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines, that the
  customer gave when they consented to receive marketing material by email.
  
  If the customer does not accept email marketing, then this property is `null`.
  """
  marketingOptInLevel: Shopify_CustomerMarketingOptInLevel @deprecated(reason: "Use `emailMarketingConsent` instead")

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String!

    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield

  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID

    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!

  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!

  """A unique identifier for the customer that's used with Multipass login."""
  multipassIdentifier: String

  """A note about the customer."""
  note: String

  """A list of the customer's orders."""
  orders(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_OrderSortKeys = ID

    """
    Supported filter parameters:
     - `cart_token`
     - `channel`
     - `channel_id`
     - `chargeback_status`
     - `checkout_token`
     - `created_at`
     - `credit_card_last4`
     - `customer_id`
     - `delivery_method`
     - `discount_code`
     - `earliest_fulfill_by`
     - `email`
     - `financial_status`
     - `fraud_protection_level`
     - `fulfillment_location_id`
     - `fulfillment_status`
     - `gateway`
     - `location_id`
     - `name`
     - `payment_provider_id`
     - `processed_at`
     - `reference_location_id`
     - `return_status`
     - `risk_level`
     - `sales_channel`
     - `source_identifier`
     - `source_name`
     - `status`
     - `tag`
     - `tag_not`
     - `test`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_OrderConnection!

  """
  The number of orders that the customer has made at the store in their lifetime.
  """
  ordersCount: UnsignedInt64! @deprecated(reason: "Use `numberOfOrders` instead")

  """A list of the customer's payment methods."""
  paymentMethods(
    """Whether to show the customer's revoked payment method."""
    showRevoked: Boolean = false

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CustomerPaymentMethodConnection!

  """The customer's phone number."""
  phone: String

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!

    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!

  """
  Possible subscriber states of a customer defined by their subscription contracts.
  """
  productSubscriberStatus: Shopify_CustomerProductSubscriberStatus!

  """
  The current SMS marketing state for the customer's phone number.
  
  If the customer does not have a phone number, then this property is `null`.
  """
  smsMarketingConsent: Shopify_CustomerSmsMarketingConsentState

  """The state of the customer's account with the shop."""
  state: Shopify_CustomerState!

  """A list of the customer's subscription contracts."""
  subscriptionContracts(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionContractConnection!

  """A comma separated list of tags that have been added to the customer."""
  tags: [String!]!

  """
  Whether the customer is exempt from being charged taxes on their orders.
  """
  taxExempt: Boolean!

  """The list of tax exemptions applied to the customer."""
  taxExemptions: [Shopify_TaxExemption!]!

  """
  The total amount that the customer has spent on orders in their lifetime.
  """
  totalSpent: Money! @deprecated(reason: "Use `amountSpent` instead")

  """
  The total amount that the customer has spent on orders in their lifetime.
  """
  totalSpentV2: Shopify_MoneyV2! @deprecated(reason: "Use `amountSpent` instead")

  """The date and time when the customer was last updated."""
  updatedAt: DateTime!

  """
  Whether the email address is formatted correctly. This does not
  guarantee that the email address actually exists.
  """
  validEmailAddress: Boolean!

  """
  Whether the customer has verified their email address. Defaults to `true` if the customer is created through the Shopify admin or API.
  """
  verifiedEmail: Boolean!
}

scalar DateTime

"""
Represents a customer mailing address.

For example, a customer's default address and an order's billing address are both mailling addresses.
"""
type Shopify_MailingAddress {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """The name of the city, district, village, or town."""
  city: String

  """The name of the customer's company or organization."""
  company: String

  """The name of the country."""
  country: String

  """
  The two-letter code for the country of the address.
  
  For example, US.
  """
  countryCode: String @deprecated(reason: "Use `countryCodeV2` instead")

  """
  The two-letter code for the country of the address.
  
  For example, US.
  """
  countryCodeV2: Shopify_CountryCode

  """The first name of the customer."""
  firstName: String

  """
  A formatted version of the address, customized by the provided arguments.
  """
  formatted(
    """Whether to include the customer's name in the formatted address."""
    withName: Boolean = false

    """Whether to include the customer's company in the formatted address."""
    withCompany: Boolean = true
  ): [String!]!

  """A comma-separated list of the values for city, province, and country."""
  formattedArea: String

  """A globally-unique identifier."""
  id: ID!

  """The last name of the customer."""
  lastName: String

  """The latitude coordinate of the customer address."""
  latitude: Float

  """The longitude coordinate of the customer address."""
  longitude: Float

  """The full name of the customer, based on firstName and lastName."""
  name: String

  """
  A unique phone number for the customer.
  
  Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String

  """The region of the address, such as the province, state, or district."""
  province: String

  """
  The two-letter code for the region.
  
  For example, ON.
  """
  provinceCode: String

  """The zip or postal code of the address."""
  zip: String
}

enum Shopify_CountryCode {
  AF
  AX
  AL
  DZ
  AD
  AO
  AI
  AG
  AR
  AM
  AW
  AC
  AU
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BM
  BT
  BO
  BA
  BW
  BV
  BR
  IO
  BN
  BG
  BF
  BI
  KH
  CA
  CV
  BQ
  KY
  CF
  TD
  CL
  CN
  CX
  CC
  CO
  KM
  CG
  CD
  CK
  CR
  HR
  CU
  CW
  CY
  CZ
  CI
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GQ
  ER
  EE
  SZ
  ET
  FK
  FO
  FJ
  FI
  FR
  GF
  PF
  TF
  GA
  GM
  GE
  DE
  GH
  GI
  GR
  GL
  GD
  GP
  GT
  GG
  GN
  GW
  GY
  HT
  HM
  VA
  HN
  HK
  HU
  IS
  IN
  ID
  IR
  IQ
  IE
  IM
  IL
  IT
  JM
  JP
  JE
  JO
  KZ
  KE
  KI
  KP
  XK
  KW
  KG
  LA
  LV
  LB
  LS
  LR
  LY
  LI
  LT
  LU
  MO
  MG
  MW
  MY
  MV
  ML
  MT
  MQ
  MR
  MU
  YT
  MX
  MD
  MC
  MN
  ME
  MS
  MA
  MZ
  MM
  NA
  NR
  NP
  NL
  AN
  NC
  NZ
  NI
  NE
  NG
  NU
  NF
  MK
  NO
  OM
  PK
  PS
  PA
  PG
  PY
  PE
  PH
  PN
  PL
  PT
  QA
  CM
  RE
  RO
  RU
  RW
  BL
  SH
  KN
  LC
  MF
  PM
  WS
  SM
  ST
  SA
  SN
  RS
  SC
  SL
  SG
  SX
  SK
  SI
  SB
  SO
  ZA
  GS
  KR
  SS
  ES
  LK
  VC
  SD
  SR
  SJ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TL
  TG
  TK
  TO
  TT
  TA
  TN
  TR
  TM
  TC
  TV
  UG
  UA
  AE
  GB
  US
  UM
  UY
  UZ
  VU
  VE
  VN
  VG
  WF
  EH
  YE
  ZM
  ZW
  ZZ
}

scalar Money

"""A monetary value with currency."""
type Shopify_MoneyV2 {
  """Decimal money amount."""
  amount: Decimal!

  """Currency of the money."""
  currencyCode: Shopify_CurrencyCode!
}

scalar Decimal

enum Shopify_CurrencyCode {
  USD
  EUR
  GBP
  CAD
  AFN
  ALL
  DZD
  AOA
  ARS
  AMD
  AWG
  AUD
  BBD
  AZN
  BDT
  BSD
  BHD
  BIF
  BZD
  BMD
  BTN
  BAM
  BRL
  BOB
  BWP
  BND
  BGN
  MMK
  KHR
  CVE
  KYD
  XAF
  CLP
  CNY
  COP
  KMF
  CDF
  CRC
  HRK
  CZK
  DKK
  DOP
  XCD
  EGP
  ETB
  XPF
  FJD
  GMD
  GHS
  GTQ
  GYD
  GEL
  HTG
  HNL
  HKD
  HUF
  ISK
  INR
  IDR
  ILS
  IQD
  JMD
  JPY
  JEP
  JOD
  KZT
  KES
  KWD
  KGS
  LAK
  LVL
  LBP
  LSL
  LRD
  LTL
  MGA
  MKD
  MOP
  MWK
  MVR
  MXN
  MYR
  MUR
  MDL
  MAD
  MNT
  MZN
  NAD
  NPR
  ANG
  NZD
  NIO
  NGN
  NOK
  OMR
  PAB
  PKR
  PGK
  PYG
  PEN
  PHP
  PLN
  QAR
  RON
  RUB
  RWF
  WST
  SAR
  RSD
  SCR
  SGD
  SDG
  SYP
  ZAR
  KRW
  SSP
  SBD
  LKR
  SRD
  SZL
  SEK
  CHF
  TWD
  THB
  TZS
  TTD
  TND
  TRY
  TMT
  UGX
  UAH
  AED
  UYU
  UZS
  VUV
  VND
  XOF
  YER
  ZMW
  BYN
  BYR
  DJF
  ERN
  FKP
  GIP
  GNF
  IRR
  KID
  LYD
  MRU
  SLL
  SHP
  SOS
  STD
  TJS
  TOP
  VEF
  VES
  XXX
}

"""An auto-generated type for paginating through multiple Events."""
type Shopify_EventConnection {
  """A list of edges."""
  edges: [Shopify_EventEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Event and a cursor during pagination.
"""
type Shopify_EventEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of EventEdge."""
  node: Shopify_Event!
}

"""
Events chronicle resource activities such as the creation of an article, the fulfillment of an order, or the
addition of a product.
"""
type Shopify_Event {
  """The name of the app that created the event."""
  appTitle: String

  """Whether the event was created by an app."""
  attributeToApp: Boolean!

  """Whether the event was caused by an admin user."""
  attributeToUser: Boolean!

  """The date and time when the event was created."""
  createdAt: DateTime!

  """Whether the event is critical."""
  criticalAlert: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """Human readable text that describes the event."""
  message: FormattedString!
}

scalar FormattedString

"""
Returns information about pagination in a connection, in accordance with the
[Relay specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).
"""
type Shopify_PageInfo {
  """Whether there are more pages to fetch following the current page."""
  hasNextPage: Boolean!

  """Whether there are any pages prior to the current page."""
  hasPreviousPage: Boolean!
}

enum Shopify_EventSortKeys {
  CREATED_AT
  ID
  RELEVANCE
}

"""Represents an image resource."""
type Shopify_Image {
  """A word or phrase to share the nature or contents of an image."""
  altText: String

  """
  The original height of the image in pixels. Returns `null` if the image is not hosted by Shopify.
  """
  height: Int

  """A unique identifier for the image."""
  id: ID

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String!

    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield

  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!

  """
  The location of the original image as a URL.
  
  If there are any existing transformations in the original source URL, they will remain and not be stripped.
  """
  originalSrc: Url! @deprecated(reason: "Use `url` instead")

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!

    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!

  """The location of the image as a URL."""
  src: Url! @deprecated(reason: "Use `url` instead")

  """
  The location of the transformed image as a URL.
  
  All transformation arguments are considered "best-effort". If they can be applied to an image, they will be.
  Otherwise any transformations which an image type does not support will be ignored.
  """
  transformedSrc(
    """Image width in pixels between 1 and 5760."""
    maxWidth: Int

    """Image height in pixels between 1 and 5760."""
    maxHeight: Int

    """Crops the image according to the specified region."""
    crop: Shopify_CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int = 1

    """
    Best effort conversion of image into content type (SVG -> PNG, Anything -> JPG, Anything -> WEBP are supported).
    """
    preferredContentType: Shopify_ImageContentType
  ): Url! @deprecated(reason: "Use `url(transform:)` instead")

  """
  The location of the image as a URL.
  
  If no transform options are specified, then the original image will be preserved including any pre-applied transforms.
  
  All transformation options are considered "best-effort". Any transformation that the original image type doesn't support will be ignored.
  
  If you need multiple variations of the same image, then you can use [GraphQL aliases](https://graphql.org/learn/queries/#aliases).
  """
  url(
    """A set of options to transform the original image."""
    transform: Shopify_ImageTransformInput
  ): Url!

  """
  The original width of the image in pixels. Returns `null` if the image is not hosted by Shopify.
  """
  width: Int
}

"""
Metafields enable you to attach additional information to a Shopify resource, such as a [Product](https://shopify.dev/api/admin-graphql/latest/objects/product) or a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection).
For more information about where you can attach metafields refer to [HasMetafields](https://shopify.dev/api/admin/graphql/reference/common-objects/HasMetafields).
Some examples of the data that metafields enable you to store are specifications, size charts, downloadable documents, release dates, images, or part numbers.
Metafields are identified by an owner resource, namespace, and key. and store a value along with type information for that value.
"""
type Shopify_Metafield {
  """The date and time when the metafield was created."""
  createdAt: DateTime!

  """
  The optional, associated metafield definition that maps to this metafield's namespace and key pair.
  """
  definition: Shopify_MetafieldDefinition

  """The description of the metafield."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  """The unique identifier for the metafield in its namespace."""
  key: String!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """
  A container for a group of metafields.
  Grouping metafields within a namespace prevents your metafields from conflicting with other metafields that have the same key name.
  """
  namespace: String!

  """The resource that the metafield is attached to."""
  owner: Shopify_HasMetafields!

  """The resource that the metafield is attached to."""
  ownerType: Shopify_MetafieldOwnerType!

  """
  Returns a reference object if the metafield definition's type is a resource reference.
  """
  reference: Shopify_MetafieldReference

  """
  The type of data that the metafield stores in the `value` field.
  See the list of [supported types](https://shopify.dev/apps/metafields/types).
  """
  type: String!

  """The date and time when the metafield was updated."""
  updatedAt: DateTime!

  """
  The data to store in the metafield. The data is always stored as a string, regardless of the metafield's type.
  """
  value: String!
}

"""
Metafield definitions enable you to define additional validation constraints for metafields, and enable the
merchant to edit metafield values in context.
"""
type Shopify_MetafieldDefinition {
  """The description of a metafield definition."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  """
  The key name used to identify a metafield definition within a namespace.
  """
  key: String!

  """The list of metafields associated with a metafield definition."""
  metafields(
    """Returns the metafields filtered by the validation status."""
    validationStatus: Shopify_MetafieldValidationStatus = ANY

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!

  """The count of metafields under a metafield definition."""
  metafieldsCount(
    """The current validation status."""
    validationStatus: Shopify_MetafieldValidationStatus
  ): Int!

  """The human-readable name for the metafield definition."""
  name: String!

  """
  The namespace of the metafield definition. You can use a namespace to group related metafields.
  """
  namespace: String!

  """
  The resource type that the metafield definition is attached to. For example, `Product` or `Collection`.
  """
  ownerType: Shopify_MetafieldOwnerType!

  """The position of the metafield definition in the pinned list."""
  pinnedPosition: Int

  """
  The standard metafield definition template associated with a metafield definition.
  """
  standardTemplate: Shopify_StandardMetafieldDefinitionTemplate

  """The type of data that the metafield will store."""
  type: Shopify_MetafieldDefinitionType!

  """
  The validation status for the existing metafields within a metafield definition.
  """
  validationStatus: Shopify_MetafieldDefinitionValidationStatus!

  """
  A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
  the metafield. For example, for a metafield with the type `date`, you can set a minimum date validation, so
  that the metafield will only store dates after the specific minimum date.
  """
  validations: [Shopify_MetafieldDefinitionValidation!]!
}

"""An auto-generated type for paginating through multiple Metafields."""
type Shopify_MetafieldConnection {
  """A list of edges."""
  edges: [Shopify_MetafieldEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Metafield and a cursor during pagination.
"""
type Shopify_MetafieldEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MetafieldEdge."""
  node: Shopify_Metafield!
}

enum Shopify_MetafieldValidationStatus {
  ANY
  VALID
  INVALID
}

enum Shopify_MetafieldOwnerType {
  ARTICLE
  BLOG
  COLLECTION
  CUSTOMER
  DRAFTORDER
  ORDER
  PAGE
  PRODUCT
  PRODUCTIMAGE
  PRODUCTVARIANT
  SHOP
}

"""
Standard metafield definition templates provide preset configurations to create metafield definitions.
Each template has a specific namespace and key that we've reserved to have specific meanings for common use cases.

Refer to the [list of standard metafield definitions](https://shopify.dev/apps/metafields/definitions/standard-definitions).
"""
type Shopify_StandardMetafieldDefinitionTemplate {
  """The description of the standard metafield definition."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  """
  The key owned by the definition after the definition has been activated.
  """
  key: String!

  """The human-readable name for the standard metafield definition."""
  name: String!

  """
  The namespace owned by the definition after the definition has been activated.
  """
  namespace: String!

  """
  The list of resource types that the standard metafield definition can be applied to.
  """
  ownerTypes: [Shopify_MetafieldOwnerType!]!

  """
  The associated [metafield definition type](https://shopify.dev/apps/metafields/definitions/types) that the metafield stores.
  """
  type: Shopify_MetafieldDefinitionType!

  """The configured validations for the standard metafield definition."""
  validations: [Shopify_MetafieldDefinitionValidation!]!
}

"""
A metafield definition type provides basic foundation and validation for a metafield.
"""
type Shopify_MetafieldDefinitionType {
  """The category associated with the metafield definition type."""
  category: String!

  """
  The name of the type for the metafield definition.
  See the list of [supported types](https://shopify.dev/apps/metafields/types).
  """
  name: String!

  """The supported validations for a metafield definition type."""
  supportedValidations: [Shopify_MetafieldDefinitionSupportedValidation!]!

  """
  Whether metafields without a definition can be migrated to a definition of this type.
  """
  supportsDefinitionMigrations: Boolean!

  """The value type for a metafield created with this definition type."""
  valueType: Shopify_MetafieldValueType! @deprecated(reason: "`valueType` is deprecated and `name` should be used for type information.")
}

"""
The type and name for the optional validation configuration of a metafield.

For example, a supported validation might consist of a `max` name and a `number_integer` type.
This validation can then be used to enforce a maximum character length for a `single_line_text_field` metafield.
"""
type Shopify_MetafieldDefinitionSupportedValidation {
  """The name of the metafield definition validation."""
  name: String!

  """The type of input for the validation."""
  type: String!
}

enum Shopify_MetafieldValueType {
  STRING
  INTEGER
  JSON_STRING
  BOOLEAN
}

"""
A configured metafield definition validation.

For example, for a metafield definition of `number_integer` type, you can set a validation with the name `max`
and a value of `15`. This validation will ensure that the value of the metafield is a number less than or equal to 15.

Refer to the [list of supported validations](https://shopify.dev/api/admin/graphql/reference/common-objects/metafieldDefinitionTypes#examples-Fetch_all_metafield_definition_types).
"""
type Shopify_MetafieldDefinitionValidation {
  """The validation name."""
  name: String!

  """The name for the metafield type of this validation."""
  type: String!

  """The validation value."""
  value: String
}

enum Shopify_MetafieldDefinitionValidationStatus {
  ALL_VALID
  IN_PROGRESS
  SOME_INVALID
}

scalar UnsignedInt64

"""
Represents information about the metafields associated to the specified resource.
"""
type Shopify_HasMetafields {
  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String!

    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield

  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!

    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!
}

"""
Private metafields represent custom metadata that is attached to a resource.
Private metafields are accessible only by the application that created them and only from the GraphQL Admin API.

An application can create a maximum of 10 private metafields per shop resource.
"""
type Shopify_PrivateMetafield {
  """The date and time when the private metafield was created."""
  createdAt: DateTime!

  """The id of the private metafield."""
  id: ID!

  """The key name of the private metafield."""
  key: String!

  """The namespace of the private metafield."""
  namespace: String!

  """The date and time when the private metafield was updated."""
  updatedAt: DateTime!

  """The value of a private metafield."""
  value: String!

  """Represents the private metafield value type."""
  valueType: Shopify_PrivateMetafieldValueType!
}

enum Shopify_PrivateMetafieldValueType {
  STRING
  INTEGER
  JSON_STRING
}

"""
An auto-generated type for paginating through multiple PrivateMetafields.
"""
type Shopify_PrivateMetafieldConnection {
  """A list of edges."""
  edges: [Shopify_PrivateMetafieldEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one PrivateMetafield and a cursor during pagination.
"""
type Shopify_PrivateMetafieldEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of PrivateMetafieldEdge."""
  node: Shopify_PrivateMetafield!
}

"""The resource referenced by the metafield value."""
union Shopify_MetafieldReference = Shopify_GenericFile | Shopify_MediaImage | Shopify_OnlineStorePage | Shopify_Product | Shopify_ProductVariant

"""A generic file."""
type Shopify_GenericFile {
  """A word or phrase to describe the contents or the function of a file."""
  alt: String

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was created.
  """
  createdAt: DateTime!

  """Any errors that have occurred on the file."""
  fileErrors: [Shopify_FileError!]!

  """The status of the file."""
  fileStatus: Shopify_FileStatus!

  """A globally-unique identifier."""
  id: ID!

  """The preview image for the media."""
  preview: Shopify_MediaPreviewImage

  """The URL of the file."""
  url: Url
}

"""A file error."""
type Shopify_FileError {
  """Code representing the type of error."""
  code: Shopify_FileErrorCode!

  """Additional details regarding the error."""
  details: String

  """Translated error message."""
  message: String!
}

enum Shopify_FileErrorCode {
  UNKNOWN
  INVALID_SIGNED_URL
  IMAGE_DOWNLOAD_FAILURE
  IMAGE_PROCESSING_FAILURE
  MEDIA_TIMEOUT_ERROR
  EXTERNAL_VIDEO_NOT_FOUND
  EXTERNAL_VIDEO_UNLISTED
  EXTERNAL_VIDEO_INVALID_ASPECT_RATIO
  EXTERNAL_VIDEO_EMBED_DISABLED
  EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING
  GENERIC_FILE_DOWNLOAD_FAILURE
  GENERIC_FILE_INVALID_SIZE
  VIDEO_METADATA_READ_ERROR
  VIDEO_INVALID_FILETYPE_ERROR
  VIDEO_MIN_WIDTH_ERROR
  VIDEO_MAX_WIDTH_ERROR
  VIDEO_MIN_HEIGHT_ERROR
  VIDEO_MAX_HEIGHT_ERROR
  VIDEO_MIN_DURATION_ERROR
  VIDEO_MAX_DURATION_ERROR
  VIDEO_VALIDATION_ERROR
  MODEL3D_VALIDATION_ERROR
  MODEL3D_THUMBNAIL_GENERATION_ERROR
  MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR
  MODEL3D_GLB_OUTPUT_CREATION_ERROR
  MODEL3D_PROCESSING_FAILURE
  UNSUPPORTED_IMAGE_FILE_TYPE
  INVALID_IMAGE_FILE_SIZE
  INVALID_IMAGE_ASPECT_RATIO
  INVALID_IMAGE_RESOLUTION
  FILE_STORAGE_LIMIT_EXCEEDED
}

enum Shopify_FileStatus {
  UPLOADED
  PROCESSING
  READY
  FAILED
}

"""Represents the preview image for a media."""
type Shopify_MediaPreviewImage {
  """
  The preview image for the media. Returns `null` until `status` is `READY`.
  """
  image: Shopify_Image

  """Current status of the preview image."""
  status: Shopify_MediaPreviewImageStatus!
}

enum Shopify_MediaPreviewImageStatus {
  UPLOADED
  PROCESSING
  READY
  FAILED
}

scalar Url

"""An image hosted on Shopify."""
type Shopify_MediaImage {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was created.
  """
  createdAt: DateTime!

  """Any errors that have occurred on the file."""
  fileErrors: [Shopify_FileError!]!

  """The status of the file."""
  fileStatus: Shopify_FileStatus!

  """A globally-unique identifier."""
  id: ID!

  """The image for the media. Returns `null` until `status` is `READY`."""
  image: Shopify_Image

  """The media content type."""
  mediaContentType: Shopify_MediaContentType!

  """Any errors which have occurred on the media."""
  mediaErrors: [Shopify_MediaError!]!

  """The warnings attached to the media."""
  mediaWarnings: [Shopify_MediaWarning!]!

  """The MIME type of the image."""
  mimeType: String

  """The preview image for the media."""
  preview: Shopify_MediaPreviewImage

  """Current status of the media."""
  status: Shopify_MediaStatus!
}

enum Shopify_MediaContentType {
  VIDEO
  EXTERNAL_VIDEO
  MODEL_3D
  IMAGE
}

"""Represents a media error."""
type Shopify_MediaError {
  """Code representing the type of error."""
  code: Shopify_MediaErrorCode!

  """Additional details regarding the error."""
  details: String

  """Translated error message."""
  message: String!
}

enum Shopify_MediaErrorCode {
  UNKNOWN
  INVALID_SIGNED_URL
  IMAGE_DOWNLOAD_FAILURE
  IMAGE_PROCESSING_FAILURE
  MEDIA_TIMEOUT_ERROR
  EXTERNAL_VIDEO_NOT_FOUND
  EXTERNAL_VIDEO_UNLISTED
  EXTERNAL_VIDEO_INVALID_ASPECT_RATIO
  EXTERNAL_VIDEO_EMBED_DISABLED
  EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING
  GENERIC_FILE_DOWNLOAD_FAILURE
  GENERIC_FILE_INVALID_SIZE
  VIDEO_METADATA_READ_ERROR
  VIDEO_INVALID_FILETYPE_ERROR
  VIDEO_MIN_WIDTH_ERROR
  VIDEO_MAX_WIDTH_ERROR
  VIDEO_MIN_HEIGHT_ERROR
  VIDEO_MAX_HEIGHT_ERROR
  VIDEO_MIN_DURATION_ERROR
  VIDEO_MAX_DURATION_ERROR
  VIDEO_VALIDATION_ERROR
  MODEL3D_VALIDATION_ERROR
  MODEL3D_THUMBNAIL_GENERATION_ERROR
  MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR
  MODEL3D_GLB_OUTPUT_CREATION_ERROR
  MODEL3D_PROCESSING_FAILURE
  UNSUPPORTED_IMAGE_FILE_TYPE
  INVALID_IMAGE_FILE_SIZE
  INVALID_IMAGE_ASPECT_RATIO
  INVALID_IMAGE_RESOLUTION
  FILE_STORAGE_LIMIT_EXCEEDED
}

"""Represents a media warning."""
type Shopify_MediaWarning {
  """The code representing the type of warning."""
  code: Shopify_MediaWarningCode!

  """Translated warning message."""
  message: String
}

enum Shopify_MediaWarningCode {
  MODEL_SMALL_PHYSICAL_SIZE
  MODEL_LARGE_PHYSICAL_SIZE
}

enum Shopify_MediaStatus {
  UPLOADED
  PROCESSING
  READY
  FAILED
}

"""A custom page on the Online Store."""
type Shopify_OnlineStorePage {
  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """A globally-unique identifier."""
  id: ID!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [Shopify_PublishedTranslation!]!
}

"""Published translation of a field of a resource."""
type Shopify_PublishedTranslation {
  """The resource field that is being translated."""
  key: String!

  """The locale of this translation."""
  locale: String!

  """The translation value."""
  value: String
}

type Shopify_Product {
  """The description of the product, complete with HTML formatting."""
  bodyHtml: String @deprecated(reason: "Use `descriptionHtml` instead")

  """A list of the collections that include the product."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_CollectionSortKeys = ID

    """
    Supported filter parameters:
     - `collection_type`
     - `publishable_status`
     - `published_status`
     - `title`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_CollectionConnection!

  """The pricing that applies for a customer in a given context."""
  contextualPricing(
    """The context used to generate contextual pricing for the variant."""
    context: Shopify_ContextualPricingContextInput!
  ): Shopify_ProductContextualPricing!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was created.
  """
  createdAt: DateTime!

  """The custom product type specified by the merchant."""
  customProductType: String

  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """
  A stripped description of the product, single line with HTML tags removed.
  """
  description(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String!

  """The description of the product, complete with HTML formatting."""
  descriptionHtml: Html!

  """
  Stripped description of the product, single line with HTML tags removed.
  Truncated to 60 characters.
  """
  descriptionPlainSummary: String! @deprecated(reason: "Use `description` instead")

  """The featured image for the product."""
  featuredImage: Shopify_Image

  """The featured media for the product."""
  featuredMedia: Shopify_Media

  """
  Information about the product that's provided through resource feedback.
  """
  feedback: Shopify_ResourceFeedback

  """The theme template used when viewing the gift card in a store."""
  giftCardTemplateSuffix: String

  """A unique human-friendly string of the product's title."""
  handle: String!

  """
  Whether the product has only a single variant with the default option and value.
  """
  hasOnlyDefaultVariant: Boolean!

  """Whether the product has out of stock variants."""
  hasOutOfStockVariants: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """The images associated with the product."""
  images(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """
    Crops the image according to the specified region. This argument is deprecated: Use `crop` on `Image.transformedSrc` instead.
    """
    crop: Shopify_CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3. This argument is deprecated: Use `scale` on `Image.transformedSrc` instead.
    """
    scale: Int = 1

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductImageSortKeys = POSITION
  ): Shopify_ImageConnection!

  """Whether the product is in a given collection."""
  inCollection(
    """The ID of the collection to check."""
    id: ID!
  ): Boolean!

  """Whether the product is a gift card."""
  isGiftCard: Boolean!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """
  The media associated with the product. This can include images, 3D models, or videos.
  """
  media(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductMediaSortKeys = POSITION
  ): Shopify_MediaConnection!

  """Total count of media belonging to a product."""
  mediaCount: Int!

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String!

    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield

  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID

    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!

  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!

  """The online store preview URL."""
  onlineStorePreviewUrl: Url

  """
  The online store URL for the product.
  A value of `null` indicates that the product is not published to the Online Store sales channel.
  """
  onlineStoreUrl: Url

  """
  A list of product options. The limit is specified by Shop.resourceLimits.maxProductOptions.
  """
  options(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_ProductOption!]!

  """The price range of the product."""
  priceRange: Shopify_ProductPriceRange! @deprecated(reason: "Deprecated in API version 2020-10. Use `priceRangeV2` instead.")

  """The price range of the product with prices formatted as decimals."""
  priceRangeV2: Shopify_ProductPriceRangeV2!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!

    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!

  """The product type specified by the merchant."""
  productType: String!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was published to the Online Store.
  """
  publishedAt: DateTime

  """Check to see whether the resource is published to a given channel."""
  publishedOnChannel(
    """The ID of the channel to check."""
    channelId: ID!
  ): Boolean! @deprecated(reason: "Use `publishedOnPublication` instead")

  """Check to see whether the resource is published to a given publication."""
  publishedOnPublication(
    """The ID of the publication to check."""
    publicationId: ID!
  ): Boolean!

  """
  Whether the product can only be purchased with a selling plan (subscription). Products that are sold on subscription (`requiresSellingPlan: true`) can be updated only for online stores. If you update a product to be subscription only, then the product is unpublished from all channels except the online store.
  """
  requiresSellingPlan: Boolean!

  """
  The resource that is either published or staged to be published to the calling app's publication. Requires the `read_product_listings` scope.
  """
  resourcePublicationOnCurrentPublication: Shopify_ResourcePublicationV2

  """Count of selling plan groups associated with the product."""
  sellingPlanGroupCount: Int!

  """
  A list of all selling plan groups defined in the current shop associated with the product either directly or through any of its variants.
  """
  sellingPlanGroups(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SellingPlanGroupConnection!

  """SEO information of the product."""
  seo: Shopify_SEO!

  """The standardized product type in the Shopify product taxonomy."""
  standardizedProductType: Shopify_StandardizedProductType

  """The product status. This controls visibility across all channels."""
  status: Shopify_ProductStatus!

  """
  The Storefront GraphQL API ID of the `Product`.
  
  As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
  """
  storefrontId: StorefrontId! @deprecated(reason: "Use `id` instead")

  """
  A comma separated list of tags associated with the product. Updating `tags` overwrites
  any existing tags that were previously added to the product. To add new tags without overwriting
  existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
  mutation.
  """
  tags: [String!]!

  """The theme template used when viewing the product in a store."""
  templateSuffix: String

  """The title of the product."""
  title: String!

  """The quantity of inventory in stock."""
  totalInventory: Int!

  """The number of variants that are associated with the product."""
  totalVariants: Int!

  """Whether inventory tracking has been enabled for the product."""
  tracksInventory: Boolean!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [Shopify_PublishedTranslation!]!

  """
  The date and time when the product was last modified.
  A product's `updatedAt` value can change for different reasons. For example, if an order
  is placed for a product that has inventory tracking set up, then the inventory adjustment
  is counted as an update.
  """
  updatedAt: DateTime!

  """A list of variants associated with the product."""
  variants(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductVariantSortKeys = POSITION
  ): Shopify_ProductVariantConnection!

  """The name of the product's vendor."""
  vendor: String!
  reviews: ReviewsIo_ListProductReviewsResponse

  """The Recharge subscription data associated with this product"""
  recharge: Recharge_Product
}

"""An auto-generated type for paginating through multiple Collections."""
type Shopify_CollectionConnection {
  """A list of edges."""
  edges: [Shopify_CollectionEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Collection and a cursor during pagination.
"""
type Shopify_CollectionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CollectionEdge."""
  node: Shopify_Collection!
}

"""
Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.

Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.

Collections can also be created for a custom group of products. These are called custom or manual collections.
"""
type Shopify_Collection {
  """
  A single-line, text-only description of the collection, stripped of any HTML tags and formatting that were included in the description.
  """
  description(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String!

  """
  The description of the collection, including any HTML tags and formatting. This content is typically displayed to customers, such as on an online store, depending on the theme.
  """
  descriptionHtml: Html!

  """
  Information about the collection that's provided through resource feedback.
  """
  feedback: Shopify_ResourceFeedback

  """
  A unique string that identifies the collection. If a handle isn't specified when a collection is created, it's automatically generated from the collection's original title, and typically includes words from the title separated by hyphens. For example, a collection that was created with the title `Summer Catalog 2022` might have the handle `summer-catalog-2022`.
  
  If the title is changed, the handle doesn't automatically change.
  
  The handle can be used in themes by the Liquid templating language to refer to the collection, but using the ID is preferred because it never changes.
  """
  handle: String!

  """Whether the collection includes the specified product."""
  hasProduct(
    """The ID of the product to check."""
    id: ID!
  ): Boolean!

  """A globally-unique identifier."""
  id: ID!

  """The image associated with the collection."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """
    Crops the image according to the specified region. This argument is deprecated: Use `crop` on `Image.transformedSrc` instead.
    """
    crop: Shopify_CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3. This argument is deprecated: Use `scale` on `Image.transformedSrc` instead.
    """
    scale: Int = 1
  ): Shopify_Image

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String!

    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield

  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID

    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!

  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!

    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!

  """The products that are included in the collection."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductCollectionSortKeys = COLLECTION_DEFAULT
  ): Shopify_ProductConnection!

  """The number of products in the collection."""
  productsCount: Int!

  """Check to see whether the resource is published to a given channel."""
  publishedOnChannel(
    """The ID of the channel to check."""
    channelId: ID!
  ): Boolean! @deprecated(reason: "Use `publishedOnPublication` instead")

  """Check to see whether the resource is published to a given publication."""
  publishedOnPublication(
    """The ID of the publication to check."""
    publicationId: ID!
  ): Boolean!

  """
  For a smart (automated) collection, specifies the rules that determine whether a product is included.
  """
  ruleSet: Shopify_CollectionRuleSet

  """
  If the default SEO fields for page title and description have been modified, contains the modified information.
  """
  seo: Shopify_SEO!

  """
  The order in which the products in the collection are displayed by default in the Shopify admin and in sales channels, such as an online store.
  """
  sortOrder: Shopify_CollectionSortOrder!

  """
  The Storefront GraphQL API ID of the `Collection`.
  
  As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
  """
  storefrontId: StorefrontId! @deprecated(reason: "Use `id` instead")

  """
  The suffix of the Liquid template being used to show the collection in an online store. For example, if the value is `custom`, then the collection is using the `collection.custom.liquid` template. If the value is `null`, then the collection is using the default `collection.liquid` template.
  """
  templateSuffix: String

  """
  The name of the collection. It's displayed in the Shopify admin and is typically displayed in sales channels, such as an online store.
  """
  title: String!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [Shopify_PublishedTranslation!]!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the collection was last modified.
  """
  updatedAt: DateTime!
}

scalar Html

"""
Represents feedback from apps about a resource, and the steps required to set up the apps on the shop.
"""
type Shopify_ResourceFeedback {
  """
  Feedback from an app about the steps a merchant needs to take to set up the app on their store.
  """
  appFeedback: [Shopify_AppFeedback!]! @deprecated(reason: "Use `details` instead")

  """List of AppFeedback detailing issues regarding a resource."""
  details: [Shopify_AppFeedback!]!

  """Summary of resource feedback pertaining to the resource."""
  summary: String!
}

"""
Reports the status of shops and their resources and displays this information
within Shopify admin. AppFeedback is used to notify merchants about steps they need to take
to set up an app on their store.
"""
type Shopify_AppFeedback {
  """The application associated to the feedback."""
  app: Shopify_App!

  """A link to where merchants can resolve errors."""
  link: Shopify_Link

  """The feedback message presented to the merchant."""
  messages: [Shopify_UserError!]!
}

"""A Shopify application."""
type Shopify_App {
  """A unique application API identifier."""
  apiKey: String!

  """App store page URL of the app."""
  appStoreAppUrl: Url

  """App store page URL of the developer who created the app."""
  appStoreDeveloperUrl: Url

  """Banner image for the app."""
  banner: Shopify_Image!

  """Description of the app."""
  description: String

  """The name of the app developer."""
  developerName: String

  """Website of the developer who created the app."""
  developerUrl: Url! @deprecated(reason: "Use `appStoreDeveloperUrl` instead")

  """Whether the app uses the Embedded App SDK."""
  embedded: Boolean!

  """Requirements that must be met before the app can be installed."""
  failedRequirements: [Shopify_FailedRequirement!]!

  """
  A list of app features that are shown in the Shopify App Store listing.
  """
  features: [String!]!

  """Feedback from this app about the store."""
  feedback: Shopify_AppFeedback

  """Handle of the app."""
  handle: String

  """Icon that represents the app."""
  icon: Shopify_Image!

  """A globally-unique identifier."""
  id: ID!

  """Webpage where you can install the app."""
  installUrl: Url

  """
  Corresponding AppInstallation for this shop and App.
  Returns null if the App is not installed.
  """
  installation: Shopify_AppInstallation

  """
  Whether the app is the [post purchase](https://shopify.dev/apps/checkout/post-purchase) app in use.
  """
  isPostPurchaseAppInUse: Boolean!

  """Webpage that the app starts in."""
  launchUrl: Url! @deprecated(reason: "Use AppInstallation.launchUrl instead")

  """
  Menu items for the app, which also appear as submenu items in left navigation sidebar in the Shopify admin.
  """
  navigationItems: [Shopify_NavigationItem!]! @deprecated(reason: "Use AppInstallation.navigationItems instead")

  """Detailed information about the app pricing."""
  pricingDetails: String

  """Summary of the app pricing details."""
  pricingDetailsSummary: String!

  """Link to app privacy policy."""
  privacyPolicyUrl: Url

  """Whether the app is published to the Shopify App Store."""
  published: Boolean!

  """Screenshots of the app."""
  screenshots: [Shopify_Image!]!

  """Whether the app was developed by Shopify."""
  shopifyDeveloped: Boolean!

  """Name of the app."""
  title: String!

  """
  Message that appears when the app is uninstalled. For example:
  By removing this app, you will no longer be able to publish products to MySocialSite or view this app in your Shopify admin. You can re-enable this channel at any time.
  """
  uninstallMessage: String!

  """Webpage where you can uninstall the app."""
  uninstallUrl: Url @deprecated(reason: "Use AppInstallation.uninstallUrl instead")
}

"""Requirements that must be met before an app can be installed."""
type Shopify_FailedRequirement {
  """
  Action to be taken to resolve a failed requirement, including URL link.
  """
  action: Shopify_NavigationItem

  """
  A concise set of copy strings to be displayed to merchants, to guide them in resolving problems your app
  encounters when trying to make use of their Shop and its resources.
  """
  message: String!
}

"""A navigation item, holding basic link attributes."""
type Shopify_NavigationItem {
  """The unique identifier of the navigation item."""
  id: String!

  """The name of the navigation item."""
  title: String!

  """The URL of the page that the navigation item links to."""
  url: Url!
}

"""Represents an installed application on a shop."""
type Shopify_AppInstallation {
  """
  The access scopes granted to the application by a merchant during installation.
  """
  accessScopes: [Shopify_AccessScope!]!

  """
  The active application subscriptions billed to the shop on a recurring basis.
  """
  activeSubscriptions: [Shopify_AppSubscription!]!

  """All subscriptions created for a shop."""
  allSubscriptions(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_AppSubscriptionSortKeys = CREATED_AT
  ): Shopify_AppSubscriptionConnection!

  """Application which is installed."""
  app: Shopify_App!

  """Channel associated with the installed application."""
  channel: Shopify_Channel @deprecated(reason: "Use `publication` instead")

  """Credits that can be used towards future app purchases."""
  credits(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_AppTransactionSortKeys = CREATED_AT
  ): Shopify_AppCreditConnection!

  """A globally-unique identifier."""
  id: ID!

  """The URL to launch the application."""
  launchUrl: Url!

  """One-time purchases to a shop."""
  oneTimePurchases(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_AppTransactionSortKeys = CREATED_AT
  ): Shopify_AppPurchaseOneTimeConnection!

  """The publication associated with the installed application."""
  publication: Shopify_Publication

  """
  The records that track the externally-captured revenue for the app. The records are used for revenue attribution purposes.
  """
  revenueAttributionRecords(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_AppRevenueAttributionRecordSortKeys = CREATED_AT
  ): Shopify_AppRevenueAttributionRecordConnection!

  """Subscriptions charge to a shop on a recurring basis."""
  subscriptions: [Shopify_AppSubscription!]! @deprecated(reason: "Use `activeSubscriptions` instead")

  """The URL to uninstall the application."""
  uninstallUrl: Url
}

"""
The permission required to access a Shopify Admin API or Storefront API resource for a shop. Merchants grant access scopes that are requested by applications.
"""
type Shopify_AccessScope {
  """
  A description of the actions that the access scope allows an app to perform.
  """
  description: String!

  """
  A readable string that represents the access scope. The string usually follows the format `{action}_{resource}`. `{action}` is `read` or `write`, and `{resource}` is the resource that the action can be performed on. `{action}` and `{resource}` are separated by an underscore. For example, `read_orders` or `write_products`.
  """
  handle: String!
}

"""
Provides users access to services and/or features for a duration of time.
"""
type Shopify_AppSubscription {
  """The date and time when the app subscription was created."""
  createdAt: DateTime!

  """The date and time when the current app subscription period ends."""
  currentPeriodEnd: DateTime

  """A globally-unique identifier."""
  id: ID!

  """The plans attached to the app subscription."""
  lineItems: [Shopify_AppSubscriptionLineItem!]!

  """The name of the app subscription."""
  name: String!

  """
  The URL that the merchant is redirected to after approving the app subscription.
  """
  returnUrl: Url!

  """The status of the app subscription."""
  status: Shopify_AppSubscriptionStatus!

  """Specifies whether the app subscription is a test transaction."""
  test: Boolean!

  """
  The number of free trial days, starting at the subscription's creation date, by which billing is delayed.
  """
  trialDays: Int!
}

"""The plan attached to an app subscription."""
type Shopify_AppSubscriptionLineItem {
  """A globally-unique identifier."""
  id: ID!

  """The pricing model for the app subscription."""
  plan: Shopify_AppPlanV2!

  """A list of the store's usage records for a usage pricing plan."""
  usageRecords(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_AppUsageRecordSortKeys = CREATED_AT
  ): Shopify_AppUsageRecordConnection!
}

"""The app plan that the merchant is subscribed to."""
type Shopify_AppPlanV2 {
  """The plan billed to a shop on a recurring basis."""
  pricingDetails: Shopify_AppPricingDetails!
}

"""
The information about the price that's charged to a shop every plan period.
The concrete type can be `AppRecurringPricing` for recurring billing or `AppUsagePricing` for usage-based billing.
"""
union Shopify_AppPricingDetails = Shopify_AppRecurringPricing | Shopify_AppUsagePricing

"""
The pricing information about a subscription app.
The object contains an interval (the frequency at which the shop is billed for an app subscription) and
a price (the amount to be charged to the subscribing shop at each interval).
"""
type Shopify_AppRecurringPricing {
  """
  The frequency at which the subscribing shop is billed for an app subscription.
  """
  interval: Shopify_AppPricingInterval!

  """
  The amount and currency to be charged to the subscribing shop every billing interval.
  """
  price: Shopify_MoneyV2!
}

enum Shopify_AppPricingInterval {
  ANNUAL
  EVERY_30_DAYS
}

"""
Defines a usage pricing model for the app subscription.
These charges are variable based on how much the merchant uses the app.
"""
type Shopify_AppUsagePricing {
  """The total usage records for interval."""
  balanceUsed: Shopify_MoneyV2!

  """
  The capped amount prevents the merchant from being charged for any usage over that amount during a billing period.
  This prevents billing from exceeding a maximum threshold over the duration of the billing period.
  For the merchant to continue using the app after exceeding a capped amount, they would need to agree to a new usage charge.
  """
  cappedAmount: Shopify_MoneyV2!

  """The frequency with which the app usage records are billed."""
  interval: Shopify_AppPricingInterval!

  """
  The terms and conditions for app usage pricing.
  Must be present in order to create usage charges.
  The terms are presented to the merchant when they approve an app's usage charges.
  """
  terms: String!
}

"""
An auto-generated type for paginating through multiple AppUsageRecords.
"""
type Shopify_AppUsageRecordConnection {
  """A list of edges."""
  edges: [Shopify_AppUsageRecordEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one AppUsageRecord and a cursor during pagination.
"""
type Shopify_AppUsageRecordEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of AppUsageRecordEdge."""
  node: Shopify_AppUsageRecord!
}

"""Store usage for app subscriptions with usage pricing."""
type Shopify_AppUsageRecord {
  """The date and time when the usage record was created."""
  createdAt: DateTime!

  """The description of the app usage record."""
  description: String!

  """A globally-unique identifier."""
  id: ID!

  """
  The price of the usage record. The only permitted currency code is USD.
  """
  price: Shopify_MoneyV2!

  """Defines the usage pricing plan the merchant is subscribed to."""
  subscriptionLineItem: Shopify_AppSubscriptionLineItem!
}

enum Shopify_AppUsageRecordSortKeys {
  CREATED_AT
  ID
  RELEVANCE
}

enum Shopify_AppSubscriptionStatus {
  PENDING
  ACCEPTED
  ACTIVE
  DECLINED
  EXPIRED
  FROZEN
  CANCELLED
}

"""
An auto-generated type for paginating through multiple AppSubscriptions.
"""
type Shopify_AppSubscriptionConnection {
  """A list of edges."""
  edges: [Shopify_AppSubscriptionEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one AppSubscription and a cursor during pagination.
"""
type Shopify_AppSubscriptionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of AppSubscriptionEdge."""
  node: Shopify_AppSubscription!
}

enum Shopify_AppSubscriptionSortKeys {
  CREATED_AT
  ID
  RELEVANCE
}

"""
A channel represents an app where you sell a group of products and collections.
A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
"""
type Shopify_Channel {
  """Underlying app used by the channel."""
  app: Shopify_App!

  """
  The collection publications for the list of collections published to the channel.
  """
  collectionPublicationsV3(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ResourcePublicationConnection!

  """The list of collections published to the channel."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CollectionConnection!

  """Unique identifier for the channel."""
  handle: String! @deprecated(reason: "Use `id` instead")

  """Whether the collection is available to the channel."""
  hasCollection(
    """Collection ID to check."""
    id: ID!
  ): Boolean!

  """A globally-unique identifier."""
  id: ID!

  """Name of the channel."""
  name: String!

  """
  Menu items for the channel, which also appear as submenu items in left navigation sidebar in the Shopify admin.
  """
  navigationItems: [Shopify_NavigationItem!]! @deprecated(reason: "Use App.navigationItems instead")

  """Home page for the channel."""
  overviewPath: Url @deprecated(reason: "Use App.launchUrl instead")

  """
  The product publications for the list of products published to the channel.
  """
  productPublicationsV3(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ResourcePublicationConnection!

  """The list of products published to the channel."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductConnection!

  """Whether or not this channel supports future publishing."""
  supportsFuturePublishing: Boolean!
}

"""
An auto-generated type for paginating through multiple ResourcePublications.
"""
type Shopify_ResourcePublicationConnection {
  """A list of edges."""
  edges: [Shopify_ResourcePublicationEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ResourcePublication and a cursor during pagination.
"""
type Shopify_ResourcePublicationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ResourcePublicationEdge."""
  node: Shopify_ResourcePublication!
}

"""
A resource publication represents that a resource has been published to a publication.
"""
type Shopify_ResourcePublication {
  """The channel the resource publication is published to."""
  channel: Shopify_Channel! @deprecated(reason: "Use `publication` instead")

  """
  Whether the resource publication is published. Also returns true if the resource publication is scheduled to be published.
  If false, then the resource publication is neither published nor scheduled to be published.
  """
  isPublished: Boolean!

  """The publication the resource publication is published to."""
  publication: Shopify_Publication!

  """
  The date that the resource publication was or is going to be published to the publication.
  """
  publishDate: DateTime!

  """The resource published to the publication."""
  publishable: Shopify_Publishable!
}

"""
A publication is a group of products and collections that is published to an app.
"""
type Shopify_Publication {
  """The app associated with the publication."""
  app: Shopify_App!

  """
  The collection publications for the list of collections published to the publication.
  """
  collectionPublicationsV3(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ResourcePublicationConnection!

  """The list of collections published to the publication."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CollectionConnection!

  """Whether the collection is available to the publication."""
  hasCollection(
    """Collection ID to check."""
    id: ID!
  ): Boolean!

  """A globally-unique identifier."""
  id: ID!

  """Name of the publication."""
  name: String!

  """
  The product publications for the list of products published to the publication.
  """
  productPublicationsV3(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ResourcePublicationConnection!

  """The list of products published to the publication."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductConnection!

  """Whether or not this publication supports future publishing."""
  supportsFuturePublishing: Boolean!
}

"""An auto-generated type for paginating through multiple Products."""
type Shopify_ProductConnection {
  """A list of edges."""
  edges: [Shopify_ProductEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Product and a cursor during pagination.
"""
type Shopify_ProductEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ProductEdge."""
  node: Shopify_Product!
}

"""
Represents a resource that can be published to a channel.
A publishable resource can be either a Product or Collection.
"""
type Shopify_Publishable {
  """Check to see whether the resource is published to a given channel."""
  publishedOnChannel(
    """The ID of the channel to check."""
    channelId: ID!
  ): Boolean! @deprecated(reason: "Use `publishedOnPublication` instead")

  """Check to see whether the resource is published to a given publication."""
  publishedOnPublication(
    """The ID of the publication to check."""
    publicationId: ID!
  ): Boolean!
}

"""An auto-generated type for paginating through multiple AppCredits."""
type Shopify_AppCreditConnection {
  """A list of edges."""
  edges: [Shopify_AppCreditEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one AppCredit and a cursor during pagination.
"""
type Shopify_AppCreditEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of AppCreditEdge."""
  node: Shopify_AppCredit!
}

"""
App credits can be applied by the merchant towards future app purchases, subscriptions, or usage records in Shopify.
"""
type Shopify_AppCredit {
  """The amount that can be used towards future app purchases in Shopify."""
  amount: Shopify_MoneyV2!

  """The date and time when the app credit was created."""
  createdAt: DateTime!

  """The description of the app credit."""
  description: String!

  """A globally-unique identifier."""
  id: ID!

  """Whether the app credit is a test transaction."""
  test: Boolean!
}

enum Shopify_AppTransactionSortKeys {
  CREATED_AT
  ID
  RELEVANCE
}

"""
An auto-generated type for paginating through multiple AppPurchaseOneTimes.
"""
type Shopify_AppPurchaseOneTimeConnection {
  """A list of edges."""
  edges: [Shopify_AppPurchaseOneTimeEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one AppPurchaseOneTime and a cursor during pagination.
"""
type Shopify_AppPurchaseOneTimeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of AppPurchaseOneTimeEdge."""
  node: Shopify_AppPurchaseOneTime!
}

"""Services and features purchased once by a store."""
type Shopify_AppPurchaseOneTime {
  """The date and time when the app purchase occurred."""
  createdAt: DateTime!

  """A globally-unique identifier."""
  id: ID!

  """The name of the app purchase."""
  name: String!

  """The amount to be charged to the store for the app purchase."""
  price: Shopify_MoneyV2!

  """The status of the app purchase."""
  status: Shopify_AppPurchaseStatus!

  """Whether the app purchase is a test transaction."""
  test: Boolean!
}

enum Shopify_AppPurchaseStatus {
  ACCEPTED
  ACTIVE
  DECLINED
  EXPIRED
  PENDING
}

"""
An auto-generated type for paginating through multiple AppRevenueAttributionRecords.
"""
type Shopify_AppRevenueAttributionRecordConnection {
  """A list of edges."""
  edges: [Shopify_AppRevenueAttributionRecordEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one AppRevenueAttributionRecord and a cursor during pagination.
"""
type Shopify_AppRevenueAttributionRecordEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of AppRevenueAttributionRecordEdge."""
  node: Shopify_AppRevenueAttributionRecord!
}

"""Represents app revenue that was captured externally by the partner."""
type Shopify_AppRevenueAttributionRecord {
  """The financial amount captured in this attribution."""
  amount: Shopify_MoneyV2!

  """The timestamp when the financial amount was captured."""
  capturedAt: DateTime!

  """The timestamp at which this revenue attribution was issued."""
  createdAt: DateTime!

  """A globally-unique identifier."""
  id: ID!

  """
  The unique value submitted during the creation of the app revenue attribution record.
  For more information, refer to
  [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
  """
  idempotencyKey: String!

  """Indicates whether this is a test submission."""
  test: Boolean!

  """The type of revenue attribution."""
  type: Shopify_AppRevenueAttributionType!
}

enum Shopify_AppRevenueAttributionType {
  APPLICATION_PURCHASE
  APPLICATION_SUBSCRIPTION
  APPLICATION_USAGE
  OTHER
}

enum Shopify_AppRevenueAttributionRecordSortKeys {
  CREATED_AT
  ID
  RELEVANCE
}

"""A link to direct users to."""
type Shopify_Link {
  """A context-sensitive label for the link."""
  label: String!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [Shopify_PublishedTranslation!]!

  """The URL that the link visits."""
  url: Url!
}

"""Represents an error in the input of a mutation."""
type Shopify_UserError {
  """The path to the input field that caused the error."""
  field: [String]

  """The error message."""
  message: String!
}

enum Shopify_CropRegion {
  CENTER
  TOP
  BOTTOM
  LEFT
  RIGHT
}

"""
An auto-generated type for paginating through multiple MetafieldDefinitions.
"""
type Shopify_MetafieldDefinitionConnection {
  """A list of edges."""
  edges: [Shopify_MetafieldDefinitionEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one MetafieldDefinition and a cursor during pagination.
"""
type Shopify_MetafieldDefinitionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MetafieldDefinitionEdge."""
  node: Shopify_MetafieldDefinition!
}

enum Shopify_MetafieldDefinitionPinnedStatus {
  ANY
  PINNED
  UNPINNED
}

enum Shopify_MetafieldDefinitionSortKeys {
  ID
  NAME
  PINNED_POSITION
  RELEVANCE
}

enum Shopify_ProductCollectionSortKeys {
  TITLE
  PRICE
  BEST_SELLING
  CREATED
  ID
  MANUAL
  COLLECTION_DEFAULT
  RELEVANCE
}

"""
The set of rules that are used to determine which products are included in the collection.
"""
type Shopify_CollectionRuleSet {
  """
  Whether products must match any or all of the rules to be included in the collection.
  If true, then products must match one or more of the rules to be included in the collection.
  If false, then products must match all of the rules to be included in the collection.
  """
  appliedDisjunctively: Boolean!

  """The rules used to assign products to the collection."""
  rules: [Shopify_CollectionRule!]!
}

"""Represents at rule that's used to assign products to a collection."""
type Shopify_CollectionRule {
  """
  The attribute that the rule focuses on (for example, `title` or `product_type`).
  """
  column: Shopify_CollectionRuleColumn!

  """The value that the operator is applied to (for example, `Hats`)."""
  condition: String!

  """
  The type of operator that the rule is based on (for example, `equals`, `contains`, or `not_equals`).
  """
  relation: Shopify_CollectionRuleRelation!
}

enum Shopify_CollectionRuleColumn {
  TAG
  TITLE
  TYPE
  VENDOR
  VARIANT_PRICE
  IS_PRICE_REDUCED
  VARIANT_COMPARE_AT_PRICE
  VARIANT_WEIGHT
  VARIANT_INVENTORY
  VARIANT_TITLE
}

enum Shopify_CollectionRuleRelation {
  CONTAINS
  ENDS_WITH
  EQUALS
  GREATER_THAN
  IS_NOT_SET
  IS_SET
  LESS_THAN
  NOT_CONTAINS
  NOT_EQUALS
  STARTS_WITH
}

"""SEO information."""
type Shopify_SEO {
  """SEO Description."""
  description: String

  """SEO Title."""
  title: String
}

enum Shopify_CollectionSortOrder {
  ALPHA_ASC
  ALPHA_DESC
  BEST_SELLING
  CREATED
  CREATED_DESC
  MANUAL
  PRICE_ASC
  PRICE_DESC
}

scalar StorefrontId

enum Shopify_CollectionSortKeys {
  TITLE
  UPDATED_AT
  ID
  RELEVANCE
}

"""
The price of a product in a specific country.
Prices vary between countries.
"""
type Shopify_ProductContextualPricing {
  """
  The pricing of the variant with the highest price in the given context.
  """
  maxVariantPricing: Shopify_ProductVariantContextualPricing

  """The pricing of the variant with the lowest price in the given context."""
  minVariantPricing: Shopify_ProductVariantContextualPricing

  """The price range of the product with prices formatted as decimals."""
  priceRange: Shopify_ProductPriceRangeV2!
}

"""
The price of a product variant in a specific country.
Prices vary between countries.
"""
type Shopify_ProductVariantContextualPricing {
  """The final compare-at price after all adjustments are applied."""
  compareAtPrice: Shopify_MoneyV2

  """The final price after all adjustments are applied."""
  price: Shopify_MoneyV2!
}

"""The price range of the product."""
type Shopify_ProductPriceRangeV2 {
  """The highest variant's price."""
  maxVariantPrice: Shopify_MoneyV2!

  """The lowest variant's price."""
  minVariantPrice: Shopify_MoneyV2!
}

"""The context data that determines the pricing of a variant."""
input Shopify_ContextualPricingContextInput {
  """The country code used to fetch country-specific prices."""
  country: Shopify_CountryCode
}

"""Represents a media interface."""
type Shopify_Media {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  """The media content type."""
  mediaContentType: Shopify_MediaContentType!

  """Any errors which have occurred on the media."""
  mediaErrors: [Shopify_MediaError!]!

  """The warnings attached to the media."""
  mediaWarnings: [Shopify_MediaWarning!]!

  """The preview image for the media."""
  preview: Shopify_MediaPreviewImage

  """Current status of the media."""
  status: Shopify_MediaStatus!
}

"""An auto-generated type for paginating through multiple Images."""
type Shopify_ImageConnection {
  """A list of edges."""
  edges: [Shopify_ImageEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Image and a cursor during pagination.
"""
type Shopify_ImageEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ImageEdge."""
  node: Shopify_Image!
}

enum Shopify_ProductImageSortKeys {
  CREATED_AT
  POSITION
  ID
  RELEVANCE
}

"""An auto-generated type for paginating through multiple Media."""
type Shopify_MediaConnection {
  """A list of edges."""
  edges: [Shopify_MediaEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Media and a cursor during pagination.
"""
type Shopify_MediaEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MediaEdge."""
  node: Shopify_Media!
}

enum Shopify_ProductMediaSortKeys {
  POSITION
  ID
  RELEVANCE
}

"""
Product property names like "Size", "Color", and "Material".
Variants are selected based on permutations of these options.
255 characters limit each.
"""
type Shopify_ProductOption {
  """A globally-unique identifier."""
  id: ID!

  """The product optionâ€™s name."""
  name: String!

  """The product option's position."""
  position: Int!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [Shopify_PublishedTranslation!]!

  """The corresponding value to the product option name."""
  values: [String!]!
}

"""The price range of the product."""
type Shopify_ProductPriceRange {
  """The highest variant's price."""
  maxVariantPrice: Shopify_MoneyV2!

  """The lowest variant's price."""
  minVariantPrice: Shopify_MoneyV2!
}

"""
A resource publication represents that a resource either has been published or will be published to a publication.
"""
type Shopify_ResourcePublicationV2 {
  """
  Whether the resource publication is published. If true, then the resource publication is published to the publication.
  If false, then the resource publication is staged to be published to the publication.
  """
  isPublished: Boolean!

  """The publication the resource publication is published to."""
  publication: Shopify_Publication!

  """
  The date that the resource publication was or is going to be published to the publication.
  """
  publishDate: DateTime

  """The resource published to the publication."""
  publishable: Shopify_Publishable!
}

"""
An auto-generated type for paginating through multiple SellingPlanGroups.
"""
type Shopify_SellingPlanGroupConnection {
  """A list of edges."""
  edges: [Shopify_SellingPlanGroupEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SellingPlanGroup and a cursor during pagination.
"""
type Shopify_SellingPlanGroupEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SellingPlanGroupEdge."""
  node: Shopify_SellingPlanGroup!
}

"""
Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
and associated records (selling plans and policies) are deleted 48 hours after a merchant
uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
"""
type Shopify_SellingPlanGroup {
  """The identifier for app, exposed in Liquid and product JSON."""
  appId: String

  """
  Whether the given product is directly associated to the selling plan group.
  """
  appliesToProduct(
    """The ID of the product."""
    productId: ID!
  ): Boolean!

  """
  Whether the given product variant is directly associated to the selling plan group.
  """
  appliesToProductVariant(
    """The ID of the product."""
    productVariantId: ID!
  ): Boolean!

  """
  Whether any of the product variants of the given product are associated to the selling plan group.
  """
  appliesToProductVariants(
    """The ID of the product."""
    productId: ID!
  ): Boolean!

  """The date and time when the selling plan group was created."""
  createdAt: DateTime!

  """The merchant-facing description of the selling plan group."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  """The merchant-facing label of the selling plan group."""
  merchantCode: String!

  """The buyer-facing label of the selling plan group."""
  name: String!

  """
  The values of all options available on the selling plan group. Selling plans are grouped together in Liquid when they are created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
  """
  options: [String!]!

  """The relative position of the selling plan group for display."""
  position: Int

  """A count of products associated to the selling plan group."""
  productCount: Int!

  """A count of product variants associated to the selling plan group."""
  productVariantCount(
    """The ID of the product to scope the count to."""
    productId: ID
  ): Int!

  """Product variants associated to the selling plan group."""
  productVariants(
    """Filters the product variants by a product ID."""
    productId: ID

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductVariantConnection!

  """Products associated to the selling plan group."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductConnection!

  """Selling plans associated to the selling plan group."""
  sellingPlans(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SellingPlanConnection!

  """A summary of the policies associated to the selling plan group."""
  summary: String
}

"""
An auto-generated type for paginating through multiple ProductVariants.
"""
type Shopify_ProductVariantConnection {
  """A list of edges."""
  edges: [Shopify_ProductVariantEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ProductVariant and a cursor during pagination.
"""
type Shopify_ProductVariantEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ProductVariantEdge."""
  node: Shopify_ProductVariant!
}

"""Represents a product variant."""
type Shopify_ProductVariant {
  """Whether the product variant is available for sale."""
  availableForSale: Boolean!

  """The value of the barcode associated with the product."""
  barcode: String

  """The compare-at price of the variant in the default shop currency."""
  compareAtPrice: Money

  """The pricing that applies for a customer in a given context."""
  contextualPricing(
    """The context used to generate contextual pricing for the variant."""
    context: Shopify_ContextualPricingContextInput!
  ): Shopify_ProductVariantContextualPricing!

  """The date and time when the variant was created."""
  createdAt: DateTime!

  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """The delivery profile for the variant."""
  deliveryProfile: Shopify_DeliveryProfile

  """
  Display name of the variant, based on product's title + variant's title.
  """
  displayName: String!

  """The fulfillment service associated with the product."""
  fulfillmentService: Shopify_FulfillmentService

  """
  Whether changes to the fulfillment service for the product variant are allowed.
  """
  fulfillmentServiceEditable: Shopify_EditableProperty!

  """The Harmonized System Code (or HS Tariff Code) for the variant."""
  harmonizedSystemCode: String @deprecated(reason: "Use `InventoryItem.harmonizedSystemCode` instead.")

  """A globally-unique identifier."""
  id: ID!

  """The featured image for the variant."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """
    Crops the image according to the specified region. This argument is deprecated: Use `crop` on `Image.transformedSrc` instead.
    """
    crop: Shopify_CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3. This argument is deprecated: Use `scale` on `Image.transformedSrc` instead.
    """
    scale: Int = 1
  ): Shopify_Image

  """The inventory item, which is used to query for inventory information."""
  inventoryItem: Shopify_InventoryItem!

  """
  The fulfillment service that tracks the number of items in stock for the product variant.
  """
  inventoryManagement: Shopify_ProductVariantInventoryManagement! @deprecated(reason: "Use tracked attribute on `inventoryItem` instead.")

  """
  Whether customers are allowed to place an order for the product variant when it's out of stock.
  """
  inventoryPolicy: Shopify_ProductVariantInventoryPolicy!

  """The total sellable quantity of the variant."""
  inventoryQuantity: Int

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The media associated with the product variant."""
  media(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MediaConnection!

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String!

    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield

  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID

    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!

  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!

  """
  The order of the product variant in the list of product variants. The first position in the list is 1.
  """
  position: Int!

  """
  List of prices and compare-at prices in the presentment currencies for this shop.
  """
  presentmentPrices(
    """The presentment currencies prices should return in."""
    presentmentCurrencies: [Shopify_CurrencyCode]

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductVariantPricePairConnection!

  """The price of the product variant in the default shop currency."""
  price: Money!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!

    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!

  """The product that this variant belongs to."""
  product: Shopify_Product!

  """
  Whether a customer needs to provide a shipping address when placing an order for the product variant.
  """
  requiresShipping: Boolean! @deprecated(reason: "Use `InventoryItem.requiresShipping` instead.")

  """List of product options applied to the variant."""
  selectedOptions: [Shopify_SelectedOption!]!

  """
  The total sellable quantity of the variant for online channels.
  This doesn't represent the total available inventory or capture
  [limitations based on customer location](https://help.shopify.com/manual/markets/inventory_and_fulfillment).
  """
  sellableOnlineQuantity: Int!

  """Count of selling plan groups associated with the product variant."""
  sellingPlanGroupCount: Int!

  """
  A list of all selling plan groups defined in the current shop associated with the product variant.
  """
  sellingPlanGroups(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SellingPlanGroupConnection!

  """
  An identifier for the product variant in the shop. Required in order to connect to a fulfillment service.
  """
  sku: String

  """
  The Storefront GraphQL API ID of the `ProductVariant`.
  
  As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
  """
  storefrontId: StorefrontId! @deprecated(reason: "Use `id` instead")

  """The tax code for the product variant."""
  taxCode: String

  """Whether a tax is charged when the product variant is sold."""
  taxable: Boolean!

  """The title of the product variant."""
  title: String!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [Shopify_PublishedTranslation!]!

  """
  The date and time (ISO 8601 format) when the product variant was last modified.
  """
  updatedAt: DateTime!

  """
  The weight of the product variant in the unit system specified with weight_unit.
  """
  weight: Float

  """
  The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: `g`, `kg`, `oz`, `lb`.
  """
  weightUnit: Shopify_WeightUnit!
}

"""
A shipping profile. In Shopify, a shipping profile is a set of shipping rates scoped to a set of products or variants that can be shipped from selected locations to zones.
"""
type Shopify_DeliveryProfile {
  """The number of active shipping rates for the profile."""
  activeMethodDefinitionsCount: Int!

  """Whether this is the default profile."""
  default: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """
  Whether this shop has enabled legacy compatibility mode for delivery profiles.
  """
  legacyMode: Boolean!

  """The number of locations without rates defined."""
  locationsWithoutRatesCount: Int!

  """The name of the delivery profile."""
  name: String!

  """The number of active origin locations for the profile."""
  originLocationCount: Int!

  """
  The number of product variants for this profile. The count for the default profile is not supported and will return -1.
  """
  productVariantsCount: Int! @deprecated(reason: "Use `productVariantsCountV2` instead")

  """How many product variants are in this profile."""
  productVariantsCountV2: Shopify_DeliveryProductVariantsCount!

  """The products and variants associated with this profile."""
  profileItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """
    Sort the underlying list by the given key. This argument is deprecated: Profile item sorting is no longer supported.
    """
    sortKey: Shopify_ProfileItemSortKeys = ID
  ): Shopify_DeliveryProfileItemConnection!

  """The location groups and associated zones using this profile."""
  profileLocationGroups: [Shopify_DeliveryProfileLocationGroup!]!

  """Selling plan groups associated with the specified delivery profile."""
  sellingPlanGroups(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SellingPlanGroupConnection!

  """
  List of locations that have not been assigned to a location group for this profile.
  """
  unassignedLocations: [Shopify_Location!]!

  """The number of countries with active rates to deliver to."""
  zoneCountryCount: Int!
}

"""
How many product variants are in a profile. This count is capped at 500.
"""
type Shopify_DeliveryProductVariantsCount {
  """Whether the count has reached the cap of 500."""
  capped: Boolean!

  """The product variant count."""
  count: Int!
}

"""
An auto-generated type for paginating through multiple DeliveryProfileItems.
"""
type Shopify_DeliveryProfileItemConnection {
  """A list of edges."""
  edges: [Shopify_DeliveryProfileItemEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one DeliveryProfileItem and a cursor during pagination.
"""
type Shopify_DeliveryProfileItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DeliveryProfileItemEdge."""
  node: Shopify_DeliveryProfileItem!
}

"""
A product and the subset of associated variants that are part of this delivery profile.
"""
type Shopify_DeliveryProfileItem {
  """A globally-unique identifier."""
  id: ID!

  """A product associated with this profile."""
  product: Shopify_Product!

  """The product variants associated with this delivery profile."""
  variants(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """
    Sort the underlying list by the given key. This argument is deprecated: Profile item variant sorting is no longer supported.
    """
    sortKey: Shopify_ProductVariantSortKeys = ID
  ): Shopify_ProductVariantConnection!
}

enum Shopify_ProductVariantSortKeys {
  TITLE
  NAME
  SKU
  INVENTORY_QUANTITY
  INVENTORY_MANAGEMENT
  INVENTORY_LEVELS_AVAILABLE
  INVENTORY_POLICY
  FULL_TITLE
  POPULAR
  POSITION
  ID
  RELEVANCE
}

enum Shopify_ProfileItemSortKeys {
  TITLE
  PRODUCT_TYPE
  VENDOR
  INVENTORY_TOTAL
  UPDATED_AT
  CREATED_AT
  PUBLISHED_AT
  ID
  RELEVANCE
}

"""
Links a location group with zones. Both are associated to a delivery profile.
"""
type Shopify_DeliveryProfileLocationGroup {
  """
  The countries already selected in any zone for the specified location group.
  """
  countriesInAnyZone: [Shopify_DeliveryCountryAndZone!]!

  """The collection of locations that make up the specified location group."""
  locationGroup: Shopify_DeliveryLocationGroup!

  """The applicable zones associated to the specified location group."""
  locationGroupZones(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_DeliveryLocationGroupZoneConnection!
}

"""The country details and the associated shipping zone."""
type Shopify_DeliveryCountryAndZone {
  """The country details."""
  country: Shopify_DeliveryCountry!

  """The name of the shipping zone."""
  zone: String!
}

"""A country that is used to define a shipping zone."""
type Shopify_DeliveryCountry {
  """
  A two-letter country code in ISO 3166-1 alpha-2 standard.
  It also includes a flag indicating whether the country should be
  a part of the 'Rest Of World' shipping zone.
  """
  code: Shopify_DeliveryCountryCodeOrRestOfWorld!

  """A globally-unique identifier."""
  id: ID!

  """The full name of the country."""
  name: String!

  """The list of regions associated with this country."""
  provinces: [Shopify_DeliveryProvince!]!

  """
  The translated name of the country. The translation returned is based on the system's locale.
  """
  translatedName: String!
}

"""
The country code and whether the country is a part of the 'Rest Of World' shipping zone.
"""
type Shopify_DeliveryCountryCodeOrRestOfWorld {
  """The country code in the ISO 3166-1 alpha-2 format."""
  countryCode: Shopify_CountryCode

  """Whether the country is a part of the 'Rest of World' shipping zone."""
  restOfWorld: Boolean!
}

"""A region that is used to define a shipping zone."""
type Shopify_DeliveryProvince {
  """The code of the region."""
  code: String!

  """A globally-unique identifier."""
  id: ID!

  """The full name of the region."""
  name: String!

  """
  The translated name of the region. The translation returned is based on the system's locale.
  """
  translatedName: String!
}

"""
A location group is a collection of active locations. They share zones and delivery methods across delivery
profiles.
"""
type Shopify_DeliveryLocationGroup {
  """A globally-unique identifier."""
  id: ID!

  """A list of active locations that are part of this location group."""
  locations(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_LocationSortKeys = NAME

    """
    Supported filter parameters:
     - `active`
     - `address1`
     - `address2`
     - `city`
     - `country`
     - `legacy`
     - `name`
     - `province`
     - `zip`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """If true, also include the legacy locations of fulfillment services."""
    includeLegacy: Boolean = false

    """If true, also include the locations that are deactivated."""
    includeInactive: Boolean = false
  ): Shopify_LocationConnection!
}

"""An auto-generated type for paginating through multiple Locations."""
type Shopify_LocationConnection {
  """A list of edges."""
  edges: [Shopify_LocationEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Location and a cursor during pagination.
"""
type Shopify_LocationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of LocationEdge."""
  node: Shopify_Location!
}

"""Represents the location where the physical good resides."""
type Shopify_Location {
  """Whether this location can be reactivated."""
  activatable: Boolean!

  """The address of this location."""
  address: Shopify_LocationAddress!

  """Whether the location address has been verified."""
  addressVerified: Boolean!

  """Whether this location can be deactivated."""
  deactivatable: Boolean!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) that the location was deactivated at. For example, 3:30 pm on September 7, 2019 in the time zone of UTC (Universal Time Coordinated) is represented as `"2019-09-07T15:50:00Z`".
  """
  deactivatedAt: String

  """Whether this location can be deleted."""
  deletable: Boolean!

  """Name of the service provider that fulfills from this location."""
  fulfillmentService: Shopify_FulfillmentService

  """Whether this location can fulfill online orders."""
  fulfillsOnlineOrders: Boolean!

  """Whether this location has active inventory."""
  hasActiveInventory: Boolean!

  """Whether this location has orders that need to be fulfilled."""
  hasUnfulfilledOrders: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """The quantities of an inventory item at this location."""
  inventoryLevel(
    """The ID of the inventory item to obtain the inventory level for."""
    inventoryItemId: ID!
  ): Shopify_InventoryLevel

  """
  A list of the quantities of the inventory items that can be stocked at this location.
  """
  inventoryLevels(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """
    Supported filter parameters:
     - `created_at`
     - `inventory_group_id`
     - `inventory_item_id`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_InventoryLevelConnection!

  """Whether the location is active."""
  isActive: Boolean!

  """Whether the location is your primary location for shipping inventory."""
  isPrimary: Boolean! @deprecated(reason: "The concept of a primary location is deprecated, shipsInventory can be used to get a fallback location")

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID

    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!

  """The name of the location."""
  name: String!

  """
  Whether this location is used for calculating shipping rates. In multi-origin shipping mode, this flag is ignored.
  """
  shipsInventory: Boolean!

  """List of suggested addresses for this location (empty if none)."""
  suggestedAddresses: [Shopify_LocationSuggestedAddress!]!
}

"""Represents the address of a location."""
type Shopify_LocationAddress {
  """The first line of the address for the location."""
  address1: String

  """The second line of the address for the location."""
  address2: String

  """The city of the location."""
  city: String

  """The country of the location."""
  country: String

  """The country code of the location."""
  countryCode: String

  """A formatted version of the address for the location."""
  formatted: [String!]!

  """The latitude coordinates of the location."""
  latitude: Float

  """The longitude coordinates of the location."""
  longitude: Float

  """The phone number of the location."""
  phone: String

  """The province of the location."""
  province: String

  """
  The code for the province, state, or district of the address of the location.
  """
  provinceCode: String

  """The ZIP code of the location."""
  zip: String
}

"""
Represents a fulfillment service. A fulfillment service is a third-party service that prepares and ships orders on behalf of the store owner.
"""
type Shopify_FulfillmentService {
  """The callback URL the fulfillment service has registered for requests."""
  callbackUrl: Url

  """
  Whether the fulfillment service has opted into fulfillment order based requests.
  """
  fulfillmentOrdersOptIn: Boolean!

  """Human-readable unique identifier for this fulfillment service."""
  handle: String!

  """The ID of the fulfillment service."""
  id: ID!

  """
  Whether the fulfillment service tracks product inventory and provides updates to Shopify.
  """
  inventoryManagement: Boolean!

  """Location associated with the fulfillment service."""
  location: Shopify_Location

  """Whether the fulfillment service supports local deliveries."""
  productBased: Boolean!

  """The name of the fulfillment service as seen by merchants."""
  serviceName: String!

  """Shipping methods associated with the fulfillment service provider."""
  shippingMethods: [Shopify_ShippingMethod!]!

  """Type associated with the fulfillment service."""
  type: Shopify_FulfillmentServiceType!
}

"""
The shipping method for the delivery. Customers will see applicable shipping methods in the shipping section of checkout.
"""
type Shopify_ShippingMethod {
  """A unique code associated with the rate. For example: `expedited_mail`"""
  code: String!

  """
  A description of the rate, which customers will see at checkout.
  For example: `Local delivery`, `Free Express Worldwide`, `Includes tracking and insurance`.
  """
  label: String!
}

enum Shopify_FulfillmentServiceType {
  GIFT_CARD
  MANUAL
  THIRD_PARTY
}

"""
The quantities of an inventory item that are related to a specific location.
"""
type Shopify_InventoryLevel {
  """
  The quantity of inventory items that are available at the inventory level's associated location.
  """
  available: Int!

  """
  Whether the inventory items associated with the inventory level can be deactivated.
  """
  canDeactivate: Boolean!

  """The date and time when the inventory level was created."""
  createdAt: DateTime!

  """
  Describes either the impact of deactivating the inventory level, or why the inventory level can't be deactivated.
  """
  deactivationAlert: String

  """
  Describes, in HTML with embedded URLs, either the impact of deactivating the inventory level or why the inventory level can't be deactivated.
  """
  deactivationAlertHtml: FormattedString

  """A globally-unique identifier."""
  id: ID!

  """
  The quantity of inventory items that are going to the inventory level's associated location.
  """
  incoming: Int!

  """Inventory item associated with the inventory level."""
  item: Shopify_InventoryItem!

  """The location associated with the inventory level."""
  location: Shopify_Location!

  """The date and time when the inventory level was updated."""
  updatedAt: DateTime!
}

"""
Represents the goods available to be shipped to a customer.
It holds essential information about the goods, including SKU and whether it is tracked.
"""
type Shopify_InventoryItem {
  """The ISO 3166-1 alpha-2 country code of where the item originated from."""
  countryCodeOfOrigin: Shopify_CountryCode

  """A list of country specific harmonized system codes."""
  countryHarmonizedSystemCodes(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CountryHarmonizedSystemCodeConnection!

  """The date and time when the inventory item was created."""
  createdAt: DateTime!

  """The number of inventory items that share the same SKU with this item."""
  duplicateSkuCount: Int!

  """The harmonized system code of the item."""
  harmonizedSystemCode: String

  """A globally-unique identifier."""
  id: ID!

  """The URL that points to the inventory history for the item."""
  inventoryHistoryUrl: Url

  """The inventory item's quantities at the specified location."""
  inventoryLevel(
    """ID of the location for which the inventory level is requested."""
    locationId: ID!
  ): Shopify_InventoryLevel

  """
  A list of the inventory item's quantities for each location that the inventory item can be stocked at.
  """
  inventoryLevels(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """
    Supported filter parameters:
     - `created_at`
     - `inventory_group_id`
     - `inventory_item_id`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_InventoryLevelConnection!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The number of locations where this inventory item is stocked."""
  locationsCount: Int!

  """
  The ISO 3166-2 alpha-2 province code of where the item originated from.
  """
  provinceCodeOfOrigin: String

  """Whether the inventory item requires shipping."""
  requiresShipping: Boolean!

  """Inventory item SKU."""
  sku: String

  """Whether inventory levels are tracked for the item."""
  tracked: Boolean!

  """
  Whether the value of the `tracked` field for the inventory item can be changed.
  """
  trackedEditable: Shopify_EditableProperty!

  """Unit cost associated with the inventory item."""
  unitCost: Shopify_MoneyV2

  """The date and time when the inventory item was updated."""
  updatedAt: DateTime!

  """The variant that owns this inventory item."""
  variant: Shopify_ProductVariant!
}

"""
An auto-generated type for paginating through multiple CountryHarmonizedSystemCodes.
"""
type Shopify_CountryHarmonizedSystemCodeConnection {
  """A list of edges."""
  edges: [Shopify_CountryHarmonizedSystemCodeEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one CountryHarmonizedSystemCode and a cursor during pagination.
"""
type Shopify_CountryHarmonizedSystemCodeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CountryHarmonizedSystemCodeEdge."""
  node: Shopify_CountryHarmonizedSystemCode!
}

"""
The country-specific harmonized system code and ISO country code for an inventory item.
"""
type Shopify_CountryHarmonizedSystemCode {
  """
  The ISO 3166-1 alpha-2 country code for the country that issued the specified harmonized system code.
  """
  countryCode: Shopify_CountryCode!

  """
  The country-specific harmonized system code. These are usually longer than 6 digits.
  """
  harmonizedSystemCode: String!
}

"""
An auto-generated type for paginating through multiple InventoryLevels.
"""
type Shopify_InventoryLevelConnection {
  """A list of edges."""
  edges: [Shopify_InventoryLevelEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one InventoryLevel and a cursor during pagination.
"""
type Shopify_InventoryLevelEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of InventoryLevelEdge."""
  node: Shopify_InventoryLevel!
}

"""The attribute editable information."""
type Shopify_EditableProperty {
  """Whether the attribute is locked for editing."""
  locked: Boolean!

  """The reason the attribute is locked for editing."""
  reason: FormattedString
}

"""Represents a suggested address for a location."""
type Shopify_LocationSuggestedAddress {
  """The first line of the suggested address."""
  address1: String

  """The second line of the suggested address."""
  address2: String

  """The city of the suggested address."""
  city: String

  """The country of the suggested address."""
  country: String

  """The country code of the suggested address."""
  countryCode: Shopify_CountryCode

  """A formatted version of the suggested address."""
  formatted: [String!]!

  """The province of the suggested address."""
  province: String

  """
  The code for the province, state, or district of the suggested address.
  """
  provinceCode: String

  """The ZIP code of the suggested address."""
  zip: String
}

enum Shopify_LocationSortKeys {
  NAME
  ID
  RELEVANCE
}

"""
An auto-generated type for paginating through multiple DeliveryLocationGroupZones.
"""
type Shopify_DeliveryLocationGroupZoneConnection {
  """A list of edges."""
  edges: [Shopify_DeliveryLocationGroupZoneEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one DeliveryLocationGroupZone and a cursor during pagination.
"""
type Shopify_DeliveryLocationGroupZoneEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DeliveryLocationGroupZoneEdge."""
  node: Shopify_DeliveryLocationGroupZone!
}

"""
Links a location group with a zone and the associated method definitions.
"""
type Shopify_DeliveryLocationGroupZone {
  """The number of method definitions for the zone."""
  methodDefinitionCounts: Shopify_DeliveryMethodDefinitionCounts!

  """The method definitions associated to a zone and location group."""
  methodDefinitions(
    """Return only eligible or ineligible method definitions."""
    eligible: Boolean

    """Return only merchant or participant method definitions."""
    type: Shopify_DeliveryMethodDefinitionType

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_MethodDefinitionSortKeys = ID
  ): Shopify_DeliveryMethodDefinitionConnection!

  """The zone associated to a location group."""
  zone: Shopify_DeliveryZone!
}

"""
The number of method definitions for a zone, separated into merchant-owned and participant definitions.
"""
type Shopify_DeliveryMethodDefinitionCounts {
  """The number of participant method definitions for the specified zone."""
  participantDefinitionsCount: Int!

  """
  The number of merchant-defined method definitions for the specified zone.
  """
  rateDefinitionsCount: Int!
}

"""
An auto-generated type for paginating through multiple DeliveryMethodDefinitions.
"""
type Shopify_DeliveryMethodDefinitionConnection {
  """A list of edges."""
  edges: [Shopify_DeliveryMethodDefinitionEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one DeliveryMethodDefinition and a cursor during pagination.
"""
type Shopify_DeliveryMethodDefinitionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DeliveryMethodDefinitionEdge."""
  node: Shopify_DeliveryMethodDefinition!
}

"""
A method definition contains the delivery rate and the conditions that must be met for the method to be
applied.
"""
type Shopify_DeliveryMethodDefinition {
  """Whether this method definition is active."""
  active: Boolean!

  """The description of the method definition."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  """
  The method conditions that must pass for this method definition to be applied to an order.
  """
  methodConditions: [Shopify_DeliveryCondition!]!

  """The name of the method definition."""
  name: String!

  """
  The provided rate for this method definition, from a rate definition or participant.
  """
  rateProvider: Shopify_DeliveryRateProvider!
}

"""
A condition that must pass for a delivery method definition to be applied to an order.
"""
type Shopify_DeliveryCondition {
  """The value (weight or price) that the condition field is compared to."""
  conditionCriteria: Shopify_DeliveryConditionCriteria!

  """The field to compare the criterion value against, using the operator."""
  field: Shopify_DeliveryConditionField!

  """A globally-unique identifier."""
  id: ID!

  """The operator to compare the field and criterion value."""
  operator: Shopify_DeliveryConditionOperator!
}

"""The value (weight or price) that the condition field is compared to."""
union Shopify_DeliveryConditionCriteria = Shopify_MoneyV2 | Shopify_Weight

"""A weight, which includes a numeric value and a unit of measurement."""
type Shopify_Weight {
  """The unit of measurement for `value`."""
  unit: Shopify_WeightUnit!

  """The weight value using the unit system specified with `unit`."""
  value: Float!
}

enum Shopify_WeightUnit {
  KILOGRAMS
  GRAMS
  POUNDS
  OUNCES
}

enum Shopify_DeliveryConditionField {
  TOTAL_WEIGHT
  TOTAL_PRICE
}

enum Shopify_DeliveryConditionOperator {
  GREATER_THAN_OR_EQUAL_TO
  LESS_THAN_OR_EQUAL_TO
}

"""A rate provided by a merchant-defined rate or a participant."""
union Shopify_DeliveryRateProvider = Shopify_DeliveryParticipant | Shopify_DeliveryRateDefinition

"""
A participant defines carrier-calculated rates for shipping services
with a possible merchant-defined fixed fee or a percentage-of-rate fee.
"""
type Shopify_DeliveryParticipant {
  """
  Whether to display new shipping services automatically to the customer when the service becomes available.
  """
  adaptToNewServicesFlag: Boolean!

  """The carrier used for this participant."""
  carrierService: Shopify_DeliveryCarrierService!

  """The merchant-defined fixed fee for this participant."""
  fixedFee: Shopify_MoneyV2

  """A globally-unique identifier."""
  id: ID!

  """
  The carrier-specific services offered by the participant, and whether each service is active.
  """
  participantServices: [Shopify_DeliveryParticipantService!]!

  """The merchant-defined percentage-of-rate fee for this participant."""
  percentageOfRateFee: Float!
}

"""A shipping service provider or a carrier account."""
type Shopify_DeliveryCarrierService {
  """The list of services offered for given destinations."""
  availableServicesForCountries(
    """The locations of the possible origins."""
    origins: [ID]

    """The country codes of the destinations."""
    countryCodes: [Shopify_CountryCode]

    """Whether to use 'Rest of World' as the destination."""
    restOfWorld: Boolean!
  ): [Shopify_DeliveryAvailableService!]!

  """
  The properly formatted name of the shipping service provider, ready to display.
  """
  formattedName: String

  """The logo of the service provider."""
  icon: Shopify_Image!

  """A globally-unique identifier."""
  id: ID!

  """The name of the shipping service provider."""
  name: String
}

"""
A shipping service and a list of countries that the service is available for.
"""
type Shopify_DeliveryAvailableService {
  """The countries the service provider ships to."""
  countries: Shopify_DeliveryCountryCodesOrRestOfWorld!

  """The name of the service."""
  name: String!
}

"""
The list of country codes and information whether the countries
are a part of the 'Rest Of World' shipping zone.
"""
type Shopify_DeliveryCountryCodesOrRestOfWorld {
  """List of applicable country codes in the ISO 3166-1 alpha-2 format."""
  countryCodes: [Shopify_CountryCode!]!

  """Whether the countries are a part of the 'Rest of World' shipping zone."""
  restOfWorld: Boolean!
}

"""A mail service provided by the participant."""
type Shopify_DeliveryParticipantService {
  """Whether the service is active."""
  active: Boolean!

  """The name of the service."""
  name: String!
}

"""
The merchant-defined rate of the [DeliveryMethodDefinition](https://shopify.dev/api/admin-graphql/latest/objects/DeliveryMethodDefinition).
"""
type Shopify_DeliveryRateDefinition {
  """A globally-unique identifier."""
  id: ID!

  """The price of this rate."""
  price: Shopify_MoneyV2!
}

enum Shopify_DeliveryMethodDefinitionType {
  MERCHANT
  PARTICIPANT
}

enum Shopify_MethodDefinitionSortKeys {
  RATE_PROVIDER_TYPE
  ID
  RELEVANCE
}

"""
A zone is a group of countries that have the same shipping rates. Customers can order products from a store only if they choose a shipping destination that's included in one of the store's zones.
"""
type Shopify_DeliveryZone {
  """The list of countries within the zone."""
  countries: [Shopify_DeliveryCountry!]!

  """A globally-unique identifier."""
  id: ID!

  """The name of the zone."""
  name: String!
}

enum Shopify_ProductVariantInventoryManagement {
  SHOPIFY
  NOT_MANAGED
  FULFILLMENT_SERVICE
}

enum Shopify_ProductVariantInventoryPolicy {
  DENY
  CONTINUE
}

"""
An auto-generated type for paginating through multiple ProductVariantPricePairs.
"""
type Shopify_ProductVariantPricePairConnection {
  """A list of edges."""
  edges: [Shopify_ProductVariantPricePairEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ProductVariantPricePair and a cursor during pagination.
"""
type Shopify_ProductVariantPricePairEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ProductVariantPricePairEdge."""
  node: Shopify_ProductVariantPricePair!
}

"""The compare-at price and price of a variant sharing a currency."""
type Shopify_ProductVariantPricePair {
  """The compare-at price of the variant with associated currency."""
  compareAtPrice: Shopify_MoneyV2

  """The price of the variant with associated currency."""
  price: Shopify_MoneyV2!
}

"""
Properties used by customers to select a product variant.
Products can have multiple options, like different sizes or colors.
"""
type Shopify_SelectedOption {
  """The product optionâ€™s name."""
  name: String!

  """The product optionâ€™s value."""
  value: String!
}

"""An auto-generated type for paginating through multiple SellingPlans."""
type Shopify_SellingPlanConnection {
  """A list of edges."""
  edges: [Shopify_SellingPlanEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SellingPlan and a cursor during pagination.
"""
type Shopify_SellingPlanEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SellingPlanEdge."""
  node: Shopify_SellingPlan!
}

"""
Represents how a product can be sold and purchased. Selling plans and associated records (selling plan groups
and policies) are deleted 48 hours after a merchant uninstalls their subscriptions app. We recommend backing
up these records if you need to restore them later.

For more information on selling plans, refer to
[*Creating and managing selling plans*](https://shopify.dev/apps/subscriptions/selling-plans).
"""
type Shopify_SellingPlan {
  """A selling plan policy which describes the recurring billing details."""
  billingPolicy: Shopify_SellingPlanBillingPolicy!

  """The date and time when the selling plan was created."""
  createdAt: DateTime!

  """A selling plan policy which describes the delivery details."""
  deliveryPolicy: Shopify_SellingPlanDeliveryPolicy!

  """Buyer facing string which describes the selling plan commitment."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  """
  A customer-facing description of the selling plan.
  
  If your store supports multiple currencies, then don't include country-specific pricing content, such as "Buy monthly, get 10$ CAD off". This field won't be converted to reflect different currencies.
  """
  name: String!

  """
  The values of all options available on the selling plan. Selling plans are grouped together in Liquid when they are created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
  """
  options: [String!]!

  """
  Relative position of the selling plan for display. A lower position will be displayed before a higher position.
  """
  position: Int

  """Selling plan pricing details."""
  pricingPolicies: [Shopify_SellingPlanPricingPolicy!]!
}

"""
Represents the billing frequency associated to the selling plan (for example, bill every week, or bill every
three months). The selling plan billing policy and associated records (selling plan groups, selling plans, pricing
policies, and delivery policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
We recommend backing up these records if you need to restore them later.
"""
union Shopify_SellingPlanBillingPolicy = Shopify_SellingPlanRecurringBillingPolicy

"""Represents a recurring selling plan billing policy."""
type Shopify_SellingPlanRecurringBillingPolicy {
  """
  Specific anchor dates upon which the billing interval calculations should be made.
  """
  anchors: [Shopify_SellingPlanAnchor!]!

  """The date and time when the selling plan billing policy was created."""
  createdAt: DateTime!

  """The billing frequency, it can be either: day, week, month or year."""
  interval: Shopify_SellingPlanInterval!

  """The number of intervals between billings."""
  intervalCount: Int!

  """Maximum number of billing iterations."""
  maxCycles: Int

  """Minimum number of billing iterations."""
  minCycles: Int
}

"""Represents a selling plan policy anchor."""
type Shopify_SellingPlanAnchor {
  """
  The day of the anchor.
  
  If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
  the days of the week according to ISO 8601, where 1 is Monday.
  
  If `type` is not WEEKDAY, then the value must be between 1-31.
  """
  day: Int!

  """
  The month of the anchor. If type is different than YEARDAY, this field must be null, otherwise it must be
  between 1-12.
  """
  month: Int

  """
  Represents the anchor type, it can be one one of WEEKDAY, MONTHDAY, YEARDAY.
  """
  type: Shopify_SellingPlanAnchorType!
}

enum Shopify_SellingPlanAnchorType {
  WEEKDAY
  MONTHDAY
  YEARDAY
}

enum Shopify_SellingPlanInterval {
  DAY
  WEEK
  MONTH
  YEAR
}

"""
Represents the delivery frequency associated to the selling plan (for example, deliver every month, or deliver
every other week). The selling plan delivery policy and associated records (selling plan groups, selling plans,
pricing policies, and billing policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
We recommend backing up these records if you need to restore them later.
"""
union Shopify_SellingPlanDeliveryPolicy = Shopify_SellingPlanRecurringDeliveryPolicy

"""Represents a recurring selling plan delivery policy."""
type Shopify_SellingPlanRecurringDeliveryPolicy {
  """
  Specific anchor dates upon which the delivery interval calculations should be made.
  """
  anchors: [Shopify_SellingPlanAnchor!]!

  """The date and time when the selling plan delivery policy was created."""
  createdAt: DateTime!

  """A buffer period for orders to be included in a cycle."""
  cutoff: Int

  """
  Whether the delivery policy is merchant or buyer-centric.
  Buyer-centric delivery policies state the time when the buyer will receive the goods.
  Merchant-centric delivery policies state the time when the fulfillment should be started.
  Currently, only merchant-centric delivery policies are supported.
  """
  intent: Shopify_SellingPlanRecurringDeliveryPolicyIntent!

  """The delivery frequency, it can be either: day, week, month or year."""
  interval: Shopify_SellingPlanInterval!

  """The number of intervals between deliveries."""
  intervalCount: Int!

  """
  Fulfillment or delivery behavior of the first fulfillment when the order is placed before the anchor. The default value for this field is `ASAP`.
  """
  preAnchorBehavior: Shopify_SellingPlanRecurringDeliveryPolicyPreAnchorBehavior!
}

enum Shopify_SellingPlanRecurringDeliveryPolicyIntent {
  FULFILLMENT_BEGIN
}

enum Shopify_SellingPlanRecurringDeliveryPolicyPreAnchorBehavior {
  ASAP
  NEXT
}

"""
Represents the type of pricing associated to the selling plan (for example, a $10 or 20% discount that is set
for a limited period or that is fixed for the duration of the subscription). Selling plan pricing policies and
associated records (selling plan groups, selling plans, billing policy, and delivery policy) are deleted 48
hours after a merchant uninstalls their subscriptions app. We recommend backing up these records if you need
to restore them later.
"""
union Shopify_SellingPlanPricingPolicy = Shopify_SellingPlanFixedPricingPolicy | Shopify_SellingPlanRecurringPricingPolicy

"""Represents a fixed selling plan pricing policy."""
type Shopify_SellingPlanFixedPricingPolicy {
  """The price adjustment type."""
  adjustmentType: Shopify_SellingPlanPricingPolicyAdjustmentType!

  """The price adjustment value."""
  adjustmentValue: Shopify_SellingPlanPricingPolicyAdjustmentValue!

  """
  The date and time when the fixed selling plan pricing policy was created.
  """
  createdAt: DateTime!
}

enum Shopify_SellingPlanPricingPolicyAdjustmentType {
  PERCENTAGE
  FIXED_AMOUNT
  PRICE
}

"""Represents a selling plan pricing policy adjustment value type."""
union Shopify_SellingPlanPricingPolicyAdjustmentValue = Shopify_MoneyV2 | Shopify_SellingPlanPricingPolicyPercentageValue

"""
Represents the percentage value of a selling plan pricing policy percentage type.
"""
type Shopify_SellingPlanPricingPolicyPercentageValue {
  """The percentage value."""
  percentage: Float!
}

"""Represents a recurring selling plan pricing policy."""
type Shopify_SellingPlanRecurringPricingPolicy {
  """The price adjustment type."""
  adjustmentType: Shopify_SellingPlanPricingPolicyAdjustmentType!

  """The price adjustment value."""
  adjustmentValue: Shopify_SellingPlanPricingPolicyAdjustmentValue!

  """Cycle after which this pricing policy applies."""
  afterCycle: Int

  """
  The date and time when the recurring selling plan pricing policy was created.
  """
  createdAt: DateTime!
}

"""
Represents the details of a specific type of product within the [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt).
"""
type Shopify_StandardizedProductType {
  """
  The product taxonomy node associated with the standardized product type.
  """
  productTaxonomyNode: Shopify_ProductTaxonomyNode
}

"""
Represents a [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt) node.
"""
type Shopify_ProductTaxonomyNode {
  """
  The full name of the product taxonomy node. For example,  Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds.
  """
  fullName: String!

  """The ID of the product taxonomy node."""
  id: ID!

  """Whether the node is a leaf node."""
  isLeaf: Boolean!

  """Whether the node is a root node."""
  isRoot: Boolean!

  """The name of the product taxonomy node. For example, Dog Beds."""
  name: String!
}

enum Shopify_ProductStatus {
  ACTIVE
  ARCHIVED
  DRAFT
}

type Recharge_Product {
  id: Float
  product_id: Float
  shopify_product_id: Float
  discount_type: String
  discount_amount: Float
  subscription_defaults: Recharge_ProductSubscriptionDefaultsProperty
  external_product_id: String
  brand: String
  images: Recharge_ProductImagesProperty
  title: String
}

type Recharge_ProductSubscriptionDefaultsProperty {
  charge_interval_frequency: Float
  cutoff_day_of_month: Float
  cutoff_day_of_week: Float
  expire_after_specific_number_of_charges: Float
  order_day_of_month: Float
  order_day_of_week: Float
  order_interval_frequency: Float
  order_interval_unit: String
  storefront_purchase_options: String
  order_interval_frequency_options: [String]
}

type Recharge_ProductImagesProperty {
  large: String
  medium: String
  original: String
  small: String
}

enum Shopify_ImageContentType {
  PNG
  JPG
  WEBP
}

"""
The available options for transforming an image.

All transformation options are considered "best-effort". Any transformation that the original image type doesn't support will be ignored.
"""
input Shopify_ImageTransformInput {
  """Crop the image according to the specified region."""
  crop: Shopify_CropRegion

  """Image width in pixels between 1 and 5760."""
  maxWidth: Int

  """Image height in pixels between 1 and 5760."""
  maxHeight: Int

  """
  Image size multiplier for high-resolution retina displays. Must be within 1..3.
  """
  scale: Int = 1

  """
  Convert the source image into the preferred content type.
  Supported conversions: `.svg` to `.png`, any file type to `.jpg`, and any file type to `.webp`.
  """
  preferredContentType: Shopify_ImageContentType
}

"""
An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.
Learn more about [editing an existing order with the Admin API](https://shopify.dev/api/examples/order-editing).

Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
then you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted
access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
[Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.

**Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
"""
type Shopify_Order {
  """A list of sales agreements associated with the order."""
  agreements(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """
    Supported filter parameters:
     - `happened_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_SalesAgreementConnection!

  """A list of messages that appear on the order page in the Shopify admin."""
  alerts: [Shopify_ResourceAlert!]!

  """The application that created the order."""
  app: Shopify_OrderApp

  """The billing address of the customer."""
  billingAddress: Shopify_MailingAddress

  """Whether the billing address matches the shipping address."""
  billingAddressMatchesShippingAddress: Boolean!

  """Whether the order can be manually marked as paid."""
  canMarkAsPaid: Boolean!

  """Whether a customer email exists for the order."""
  canNotifyCustomer: Boolean!

  """
  The reason provided when the order was canceled.
  Returns `null` if the order wasn't canceled.
  """
  cancelReason: Shopify_OrderCancelReason

  """
  The date and time when the order was canceled.
  Returns `null` if the order wasn't canceled.
  """
  cancelledAt: DateTime

  """Whether payment for the order can be captured."""
  capturable: Boolean!

  """
  The total order-level discount amount, before returns, in shop currency.
  """
  cartDiscountAmount: Money @deprecated(reason: "Use `cartDiscountAmountSet` instead")

  """
  The total order-level discount amount, before returns, in shop and presentment currencies.
  """
  cartDiscountAmountSet: Shopify_MoneyBag

  """The channel that created the order."""
  channel: Shopify_Channel @deprecated(reason: "Use `publication` instead")

  """The IP address of the API client that created the order."""
  clientIp: String

  """Whether the order is closed."""
  closed: Boolean!

  """
  The date and time when the order was closed.
  Returns `null` if the order is not closed.
  """
  closedAt: DateTime

  """Whether inventory has been reserved for the order."""
  confirmed: Boolean!

  """Date and time when the order was created in Shopify."""
  createdAt: DateTime!

  """The shop currency when the order was placed."""
  currencyCode: Shopify_CurrencyCode!

  """
  The current order-level discount amount after all order updates, in shop and presentment currencies.
  """
  currentCartDiscountAmountSet: Shopify_MoneyBag!

  """
  The sum of the quantities for all line items that contribute to the order's current subtotal price.
  """
  currentSubtotalLineItemsQuantity: Int!

  """
  The sum of the prices for all line items after discounts and returns, in shop and presentment currencies.
  If `taxesIncluded` is `true`, then the subtotal also includes tax.
  """
  currentSubtotalPriceSet: Shopify_MoneyBag!

  """
  A list of all tax lines applied to line items on the order, after returns.
  Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
  """
  currentTaxLines: [Shopify_TaxLine!]!

  """
  The total amount discounted on the order after returns, in shop and presentment currencies.
  This includes both order and line level discounts.
  """
  currentTotalDiscountsSet: Shopify_MoneyBag!

  """
  The total amount of duties after returns, in shop and presentment currencies.
  Returns `null` if duties aren't applicable.
  """
  currentTotalDutiesSet: Shopify_MoneyBag

  """
  The total price of the order, after returns, in shop and presentment currencies.
  This includes taxes and discounts.
  """
  currentTotalPriceSet: Shopify_MoneyBag!

  """
  The sum of the prices of all tax lines applied to line items on the order, after returns, in shop and presentment currencies.
  """
  currentTotalTaxSet: Shopify_MoneyBag!

  """The total weight of the order after returns, in grams."""
  currentTotalWeight: UnsignedInt64!

  """A list of the custom attributes added to the order."""
  customAttributes: [Shopify_Attribute!]!

  """The customer that placed the order."""
  customer: Shopify_Customer

  """Whether the customer agreed to receive marketing materials."""
  customerAcceptsMarketing: Boolean!

  """
  The customer's visits and interactions with the online store before placing the order.
  """
  customerJourney: Shopify_CustomerJourney @deprecated(reason: "Use `customerJourneySummary` instead")

  """
  The customer's visits and interactions with the online store before placing the order.
  """
  customerJourneySummary: Shopify_CustomerJourneySummary

  """
  A two-letter or three-letter language code, optionally followed by a region modifier.
  """
  customerLocale: String

  """A list of discounts that are applied to the order."""
  discountApplications(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_DiscountApplicationConnection!

  """The discount code used for the order."""
  discountCode: String

  """
  The primary address of the customer.
  Returns `null` if neither the shipping address nor the billing address was provided.
  """
  displayAddress: Shopify_MailingAddress

  """
  The financial status of the order that can be shown to the merchant.
  This field does not capture all the details of an order's financial state. It should only be used for display summary purposes.
  """
  displayFinancialStatus: Shopify_OrderDisplayFinancialStatus

  """
  The fulfillment status for the order that can be shown to the merchant.
  This field does not capture all the details of an order's fulfillment state. It should only be used for display summary purposes.
  For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
  """
  displayFulfillmentStatus: Shopify_OrderDisplayFulfillmentStatus!

  """A list of the disputes associated with the order."""
  disputes: [Shopify_OrderDisputeSummary!]!

  """
  A list of draft fulfillments that can be created for the order, which includes line items that can be partially fulfilled.
  """
  draftFulfillments: [Shopify_DraftFulfillment!]! @deprecated(reason: "Use `fulfillmentOrders` instead")

  """Whether the order has had any edits applied."""
  edited: Boolean!

  """The email address associated with the customer."""
  email: String

  """
  Whether taxes on the order are estimated.
  This field returns `false` when taxes on the order are finalized and aren't subject to any changes.
  """
  estimatedTaxes: Boolean!

  """A list of events associated with the order."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_EventSortKeys = ID

    """
    Supported filter parameters:
     - `comments`
     - `created_at`
     - `subject_type`
     - `verb`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_EventConnection!

  """
  Whether there are line items that can be fulfilled.
  This field returns `false` when the order has no fulfillable line items.
  For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
  """
  fulfillable: Boolean!

  """A list of fulfillment orders for the order."""
  fulfillmentOrders(
    """
    Whether fulfillment orders that are hidden from the merchant are included.
    For example, fulfillment orders that were closed after being combined or moved are hidden.
    """
    displayable: Boolean = false

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """
    Supported filter parameters:
     - `assigned_location_id`
     - `status`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_FulfillmentOrderConnection!

  """List of shipments for the order."""
  fulfillments(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_Fulfillment!]!

  """Whether the order has been paid in full."""
  fullyPaid: Boolean!

  """Whether the merchant added a timeline comment to the order."""
  hasTimelineComment: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """
  The URL of the first page of the online store that the customer visited before they submitted the order.
  """
  landingPageDisplayText: String @deprecated(reason: "Use `customerJourneySummary.lastVisit.landingPageHtml` instead")

  """
  The first page of the online store that the customer visited before they submitted the order.
  """
  landingPageUrl: Url @deprecated(reason: "Use `customerJourneySummary.lastVisit.landingPage` instead")

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """A list of the order's line items."""
  lineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_LineItemConnection!

  """A list of the order's line items."""
  lineItemsMutable(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_LineItemMutableConnection! @deprecated(reason: "Use `lineItems` instead")

  """List of localization extensions for the resource."""
  localizationExtensions(
    """The country codes of the extensions."""
    countryCodes: [Shopify_CountryCode]

    """The purpose of the extensions."""
    purposes: [Shopify_LocalizationExtensionPurpose]

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_LocalizationExtensionConnection!

  """
  The fulfillment location that was assigned when the order was created.
  Use the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder) object for up-to-date fulfillment location information.
  """
  location: String @deprecated(reason: "Use `physicalLocation` instead")

  """
  Whether the order can be edited by the merchant. For example, canceled orders canâ€™t be edited.
  """
  merchantEditable: Boolean!

  """
  A list of reasons why the order can't be edited. For example, "Canceled orders canâ€™t be edited".
  """
  merchantEditableErrors: [String!]!

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String!

    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield

  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID

    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!

  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!

  """
  The unique identifier for the order that appears on the order page in the Shopify admin and the order status page.
  For example, "#1001", "EN1001", or "1001-A".
  This value isn't unique across multiple stores.
  """
  name: String!

  """
  The net payment for the order, based on the total amount received minus the total amount refunded, in shop currency.
  """
  netPayment: Money! @deprecated(reason: "Use `netPaymentSet` instead")

  """
  The net payment for the order, based on the total amount received minus the total amount refunded, in shop and presentment currencies.
  """
  netPaymentSet: Shopify_MoneyBag!

  """
  A list of line items that can't be fulfilled.
  For example, tips and fully refunded line items can't be fulfilled.
  For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
  """
  nonFulfillableLineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_LineItemConnection!

  """The contents of the note associated with the order."""
  note: String

  """
  The total amount of duties before returns, in shop and presentment currencies.
  Returns `null` if duties aren't applicable.
  """
  originalTotalDutiesSet: Shopify_MoneyBag

  """
  The total price of the order at the time of order creation, in shop and presentment currencies.
  """
  originalTotalPriceSet: Shopify_MoneyBag!

  """The payment collection details for the order."""
  paymentCollectionDetails: Shopify_OrderPaymentCollectionDetails!

  """
  A list of the names of all payment gateways used for the order.
  For example, "Shopify Payments" and "Cash on Delivery (COD)".
  """
  paymentGatewayNames: [String!]!

  """The payment terms associated with the order."""
  paymentTerms: Shopify_PaymentTerms

  """The phone number associated with the customer."""
  phone: String

  """
  The fulfillment location that was assigned when the order was created.
  Use the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder) object for up to date fulfillment location information.
  """
  physicalLocation: Shopify_Location

  """The payment `CurrencyCode` of the customer for the order."""
  presentmentCurrencyCode: Shopify_CurrencyCode!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!

    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!

  """
  The date and time when the order was processed.
  This date and time might not match the date and time when the order was created.
  """
  processedAt: DateTime!

  """The publication that the order was created from."""
  publication: Shopify_Publication

  """
  The marketing referral code from the link that the customer clicked to visit the store.
  Supports the following URL attributes: "ref", "source", or "r".
  For example, if the URL is `{shop}.myshopify.com/products/slide?ref=j2tj1tn2`, then this value is `j2tj1tn2`.
  """
  referralCode: String @deprecated(reason: "Use `customerJourneySummary.lastVisit.referralCode` instead")

  """
  A web domain or short description of the source that sent the customer to your online store. For example, "shopify.com" or "email".
  """
  referrerDisplayText: String @deprecated(reason: "Use `customerJourneySummary.lastVisit.referralInfoHtml` instead")

  """
  The URL of the webpage where the customer clicked a link that sent them to your online store.
  """
  referrerUrl: Url @deprecated(reason: "Use `customerJourneySummary.lastVisit.referrerUrl` instead")

  """
  The difference between the suggested and actual refund amount of all refunds that have been applied to the order. A positive value indicates a difference in the merchant's favor, and a negative value indicates a difference in the customer's favor.
  """
  refundDiscrepancySet: Shopify_MoneyBag!

  """Whether the order can be refunded."""
  refundable: Boolean!

  """A list of refunds that have been applied to the order."""
  refunds(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_Refund!]!

  """
  Whether the order has shipping lines or at least one line item on the order that requires shipping.
  """
  requiresShipping: Boolean!

  """Whether any line item on the order can be restocked."""
  restockable: Boolean!

  """The fraud risk level of the order."""
  riskLevel: Shopify_OrderRiskLevel!

  """A list of risks associated with the order."""
  risks(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_OrderRisk!]!

  """The mailing address of the customer."""
  shippingAddress: Shopify_MailingAddress

  """A summary of all shipping costs on the order."""
  shippingLine: Shopify_ShippingLine

  """A list of the order's shipping lines."""
  shippingLines(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ShippingLineConnection!

  """
  The sum of the quantities for all line items that contribute to the order's subtotal price.
  """
  subtotalLineItemsQuantity: Int!

  """
  The sum of the prices for all line items after discounts and before returns, in shop currency.
  If `taxesIncluded` is `true`, then the subtotal also includes tax.
  """
  subtotalPrice: Money @deprecated(reason: "Use `subtotalPriceSet` instead")

  """
  The sum of the prices for all line items after discounts and before returns, in shop and presentment currencies.
  If `taxesIncluded` is `true`, then the subtotal also includes tax.
  """
  subtotalPriceSet: Shopify_MoneyBag

  """A suggested refund for the order."""
  suggestedRefund(
    """
    The amount to refund for shipping. Overrides the `refundShipping` argument.
    Use the `shippingAmountV2` argument for multi-currency orders.
    """
    shippingAmount: Money

    """Whether to refund the full shipping amount."""
    refundShipping: Boolean

    """The line items from the order to include in the refund."""
    refundLineItems: [Shopify_RefundLineItemInput]

    """The duties from the order to include in the refund."""
    refundDuties: [Shopify_RefundDutyInput]

    """
    Whether the suggested refund should be created from all refundable line items on the order.
    If `true`, the `refundLineItems` argument will be ignored.
    """
    suggestFullRefund: Boolean = false
  ): Shopify_SuggestedRefund

  """
  A comma separated list of tags associated with the order. Updating `tags` overwrites
  any existing tags that were previously added to the order. To add new tags without overwriting
  existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
  mutation.
  """
  tags: [String!]!

  """
  A list of all tax lines applied to line items on the order, before returns.
  Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
  """
  taxLines: [Shopify_TaxLine!]!

  """Whether taxes are included in the subtotal price of the order."""
  taxesIncluded: Boolean!

  """
  Whether the order is a test.
  Test orders are made using the Shopify Bogus Gateway or a payment provider with test mode enabled.
  A test order cannot be converted into a real order and vice versa.
  """
  test: Boolean!

  """
  The authorized amount that is uncaptured or undercaptured, in shop currency.
  This amount isn't adjusted for returns.
  """
  totalCapturable: Money! @deprecated(reason: "Use `totalCapturableSet` instead")

  """
  The authorized amount that is uncaptured or undercaptured, in shop and presentment currencies.
  This amount isn't adjusted for returns.
  """
  totalCapturableSet: Shopify_MoneyBag!

  """
  The total amount discounted on the order before returns, in shop currency.
  This includes both order and line level discounts.
  """
  totalDiscounts: Money @deprecated(reason: "Use `totalDiscountsSet` instead")

  """
  The total amount discounted on the order before returns, in shop and presentment currencies.
  This includes both order and line level discounts.
  """
  totalDiscountsSet: Shopify_MoneyBag

  """
  The total amount not yet transacted for the order, in shop and presentment currencies.
  A positive value indicates a difference in the merchant's favor (payment from customer to merchant) and a negative value indicates a difference in the customer's favor (refund from merchant to customer).
  """
  totalOutstandingSet: Shopify_MoneyBag!

  """
  The total price of the order, before returns, in shop currency.
  This includes taxes and discounts.
  """
  totalPrice: Money! @deprecated(reason: "Use `totalPriceSet` instead")

  """
  The total price of the order, before returns, in shop and presentment currencies.
  This includes taxes and discounts.
  """
  totalPriceSet: Shopify_MoneyBag!

  """
  The total amount received from the customer before returns, in shop currency.
  """
  totalReceived: Money! @deprecated(reason: "Use `totalReceivedSet` instead")

  """
  The total amount received from the customer before returns, in shop and presentment currencies.
  """
  totalReceivedSet: Shopify_MoneyBag!

  """The total amount that was refunded, in shop currency."""
  totalRefunded: Money! @deprecated(reason: "Use `totalRefundedSet` instead")

  """
  The total amount that was refunded, in shop and presentment currencies.
  """
  totalRefundedSet: Shopify_MoneyBag!

  """
  The total amount of shipping that was refunded, in shop and presentment currencies.
  """
  totalRefundedShippingSet: Shopify_MoneyBag!

  """
  The total shipping amount before discounts and returns, in shop currency.
  """
  totalShippingPrice: Money! @deprecated(reason: "Use `totalShippingPriceSet` instead")

  """
  The total shipping amount before discounts and returns, in shop and presentment currencies.
  """
  totalShippingPriceSet: Shopify_MoneyBag!

  """The total tax amount before returns, in shop currency."""
  totalTax: Money @deprecated(reason: "Use `totalTaxSet` instead")

  """
  The total tax amount before returns, in shop and presentment currencies.
  """
  totalTaxSet: Shopify_MoneyBag

  """The sum of all tip amounts for the order, in shop currency."""
  totalTipReceived: Shopify_MoneyV2! @deprecated(reason: "Use `totalTipReceivedSet` instead")

  """
  The sum of all tip amounts for the order, in shop and presentment currencies.
  """
  totalTipReceivedSet: Shopify_MoneyBag!

  """The total weight of the order before returns, in grams."""
  totalWeight: UnsignedInt64

  """A list of transactions associated with the order."""
  transactions(
    """Truncate the array result to this size."""
    first: Int

    """Filter transactions by whether they are capturable."""
    capturable: Boolean

    """
    Filter transactions by whether they can be resolved manually.
    For example, fully captured or voided transactions are not manually resolvable.
    """
    manuallyResolvable: Boolean
  ): [Shopify_OrderTransaction!]!

  """Whether no payments have been made for the order."""
  unpaid: Boolean!

  """The date and time when the order was modified last."""
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple SalesAgreements.
"""
type Shopify_SalesAgreementConnection {
  """A list of edges."""
  edges: [Shopify_SalesAgreementEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SalesAgreement and a cursor during pagination.
"""
type Shopify_SalesAgreementEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SalesAgreementEdge."""
  node: Shopify_SalesAgreement!
}

"""
An addition, removal, modification, or other sale commitment associated with an order.
"""
type Shopify_SalesAgreement {
  """The application that created the agreement."""
  app: Shopify_App

  """The date and time at which the agreement occured."""
  happenedAt: DateTime!

  """The unique identifier for the agreement."""
  id: ID!

  """The reason the agremeent was created."""
  reason: Shopify_OrderActionType!

  """The sales associated with the agreement."""
  sales(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SaleConnection!
}

enum Shopify_OrderActionType {
  ORDER
  ORDER_EDIT
  REFUND
  UNKNOWN
}

"""An auto-generated type for paginating through multiple Sales."""
type Shopify_SaleConnection {
  """A list of edges."""
  edges: [Shopify_SaleEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Sale and a cursor during pagination.
"""
type Shopify_SaleEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SaleEdge."""
  node: Shopify_Sale!
}

"""An individual sale record associated with a sales agreement."""
type Shopify_Sale {
  """The type of order action that the sale represents."""
  actionType: Shopify_SaleActionType!

  """The unique identifier for the sale."""
  id: ID!

  """The line type assocated with the sale."""
  lineType: Shopify_SaleLineType!

  """The number of units either ordered or intended to be returned."""
  quantity: Int

  """All individual taxes associated with the sale."""
  taxes: [Shopify_SaleTax!]!

  """The total sale amount after taxes and discounts."""
  totalAmount: Shopify_MoneyBag!

  """The total discounts allocated to the sale after taxes."""
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag!

  """The total discounts allocated to the sale before taxes."""
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag!

  """The total amount of taxes for the sale."""
  totalTaxAmount: Shopify_MoneyBag!
}

enum Shopify_SaleActionType {
  ORDER
  RETURN
  UPDATE
  UNKNOWN
}

enum Shopify_SaleLineType {
  PRODUCT
  TIP
  GIFT_CARD
  SHIPPING
  DUTY
  UNKNOWN
  ADJUSTMENT
}

"""The tax allocated to a sale from a single tax line."""
type Shopify_SaleTax {
  """
  The portion of the total tax amount on the related sale that comes from the associated tax line.
  """
  amount: Shopify_MoneyBag!

  """The unique identifier for the sale tax."""
  id: ID!

  """The tax line associated with the sale."""
  taxLine: Shopify_TaxLine!
}

"""
A collection of monetary values in their respective currencies. Typically used in the context of multi-currency pricing and transactions,
when an amount in the shop's currency is converted to the customer's currency of choice (the presentment currency).
"""
type Shopify_MoneyBag {
  """Amount in presentment currency."""
  presentmentMoney: Shopify_MoneyV2!

  """Amount in shop currency."""
  shopMoney: Shopify_MoneyV2!
}

"""Represents a single tax applied to the associated line item."""
type Shopify_TaxLine {
  """
  Whether the channel that submitted the tax line is liable for remitting. A value of null indicates unknown liability for this tax line.
  """
  channelLiable: Boolean

  """
  The amount of tax, in shop currency, after discounts and before returns.
  """
  price: Money! @deprecated(reason: "Use `priceSet` instead")

  """
  The amount of tax, in shop and presentment currencies, after discounts and before returns.
  """
  priceSet: Shopify_MoneyBag!

  """
  The proportion of the line item price that the tax represents as a decimal.
  """
  rate: Float

  """
  The proportion of the line item price that the tax represents as a percentage.
  """
  ratePercentage: Float

  """The name of the tax."""
  title: String!
}

"""
An alert message that appears in the Shopify admin about a problem with a store resource, with 1 or more actions to take. For example, you could use an alert to indicate that you're not charging taxes on some product variants.
They can optionally have a specific icon and be dismissed by merchants.
"""
type Shopify_ResourceAlert {
  """
  Buttons in the alert that link to related information.
  For example, _Edit variants_.
  """
  actions: [Shopify_ResourceAlertAction!]!

  """
  The secondary text in the alert that includes further information or instructions about how to solve a problem.
  """
  content: Html!

  """
  Unique identifier that appears when an alert is manually closed by the merchant.
  Most alerts cannot be manually closed.
  """
  dismissibleHandle: String

  """An icon that is optionally displayed with the alert."""
  icon: Shopify_ResourceAlertIcon

  """Indication of how important the alert is."""
  severity: Shopify_ResourceAlertSeverity!

  """
  The primary text in the alert that includes information or describes the problem.
  """
  title: String!
}

"""An action associated to a resource alert, such as editing variants."""
type Shopify_ResourceAlertAction {
  """Whether the action appears as a button or as a link."""
  primary: Boolean!

  """Resource for the action to show."""
  show: String

  """The text for the button in the alert. For example, _Edit variants_."""
  title: String!

  """The target URL that the button links to."""
  url: Url!
}

enum Shopify_ResourceAlertIcon {
  CHECKMARK_CIRCLE
  INFORMATION_CIRCLE
}

enum Shopify_ResourceAlertSeverity {
  DEFAULT
  INFO
  WARNING
  SUCCESS
  CRITICAL
  ERROR
}

"""The [application](https://shopify.dev/apps) that created the order."""
type Shopify_OrderApp {
  """The application icon."""
  icon: Shopify_Image!

  """The name of the application."""
  name: String!
}

enum Shopify_OrderCancelReason {
  CUSTOMER
  FRAUD
  INVENTORY
  DECLINED
  OTHER
}

"""Represents a generic custom attribute."""
type Shopify_Attribute {
  """Key or name of the attribute."""
  key: String!

  """Value of the attribute."""
  value: String
}

"""Represents a customer's visiting activities on a shop's online store."""
type Shopify_CustomerJourney {
  """The position of the current order within the customer's order history."""
  customerOrderIndex: Int!

  """
  The amount of days between first session and order creation date. First session represents first session since the last order, or first session within the 30 day attribution window, if more than 30 days has passed since the last order.
  """
  daysToConversion: Int!

  """The customer's first session going into the shop."""
  firstVisit: Shopify_CustomerVisit!

  """The last session before an order is made."""
  lastVisit: Shopify_CustomerVisit

  """Events preceding a customer order, such as shop sessions."""
  moments: [Shopify_CustomerMoment!]!
}

"""
Represents a customer's session visiting a shop's online store, including information about the marketing activity attributed to starting the session.
"""
type Shopify_CustomerVisit {
  """A globally-unique identifier."""
  id: ID!

  """URL of the first page the customer landed on for the session."""
  landingPage: Url

  """
  Landing page information with URL linked in HTML. For example, the first page the customer visited was store.myshopify.com/products/1.
  """
  landingPageHtml: Html

  """
  Represent actions taken by an app, on behalf of a merchant,
  to market Shopify resources such as products, collections, and discounts.
  """
  marketingEvent: Shopify_MarketingEvent

  """The date and time when the customer's session occurred."""
  occurredAt: DateTime!

  """
  Marketing referral code from the link that the customer clicked to visit the store.
  Supports the following URL attributes: _ref_, _source_, or _r_.
  For example, if the URL is myshopifystore.com/products/slide?ref=j2tj1tn2, then this value is j2tj1tn2.
  """
  referralCode: String

  """Referral information with URLs linked in HTML."""
  referralInfoHtml: FormattedString!

  """
  Webpage where the customer clicked a link that sent them to the online store.
  For example, _https://randomblog.com/page1_ or _android-app://com.google.android.gm_.
  """
  referrerUrl: Url

  """
  Source from which the customer visited the store, such as a platform (Facebook, Google), email, direct,
  a website domain, QR code, or unknown.
  """
  source: String!

  """Describes the source explicitly for first or last session."""
  sourceDescription: String

  """Type of marketing tactic."""
  sourceType: Shopify_MarketingTactic

  """
  A set of UTM parameters gathered from the URL parameters of the referrer.
  """
  utmParameters: Shopify_UTMParameters
}

"""Represents actions that market a merchant's store or products."""
type Shopify_MarketingEvent {
  """The app that the marketing event is attributed to."""
  app: Shopify_App!

  """The marketing channel used by the marketing event."""
  channel: Shopify_MarketingChannel

  """A human-readable description of the marketing event."""
  description: String

  """The date and time when the marketing event ended."""
  endedAt: DateTime

  """A globally-unique identifier."""
  id: ID!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The URL where the marketing event can be managed."""
  manageUrl: Url

  """The URL where the marketing event can be previewed."""
  previewUrl: Url

  """An optional ID that helps Shopify validate engagement data."""
  remoteId: String

  """The date and time when the marketing event is scheduled to end."""
  scheduledToEndAt: DateTime

  """
  Where the `MarketingEvent` occurred and what kind of content was used.
  Because `utmSource` and `utmMedium` are often used interchangeably, this is
  based on a combination of `marketingChannel`, `referringDomain`, and `type` to
  provide a consistent representation for any given piece of marketing
  regardless of the app that created it.
  """
  sourceAndMedium: String!

  """The date and time when the marketing event started."""
  startedAt: DateTime!

  """The display text for the marketing event type."""
  targetTypeDisplayText: String! @deprecated(reason: "Use `sourceAndMedium` instead")

  """The marketing event type."""
  type: Shopify_MarketingTactic!

  """The name of the marketing campaign."""
  utmCampaign: String

  """
  The medium that the marketing campaign is using. Example values: `cpc`, `banner`.
  """
  utmMedium: String

  """
  The referrer of the marketing event. Example values: `google`, `newsletter`.
  """
  utmSource: String
}

enum Shopify_MarketingChannel {
  SEARCH
  DISPLAY
  SOCIAL
  EMAIL
  REFERRAL
}

enum Shopify_MarketingTactic {
  ABANDONED_CART
  AD
  AFFILIATE
  LINK
  LOYALTY
  MESSAGE
  NEWSLETTER
  NOTIFICATION
  POST
  RETARGETING
  TRANSACTIONAL
  SEO
  DIRECT
  STOREFRONT_APP
  DISPLAY
  SEARCH
  FOLLOW_UP
  RECEIPT
}

"""Represents a set of UTM parameters."""
type Shopify_UTMParameters {
  """The name of a marketing campaign."""
  campaign: String

  """
  Identifies specific content in a marketing campaign. Used to differentiate between similar content or links in a marketing campaign to determine which is the most effective.
  """
  content: String

  """
  The medium of a marketing campaign, such as a banner or email newsletter.
  """
  medium: String

  """
  The source of traffic to the merchant's store, such as Google or an email newsletter.
  """
  source: String

  """Paid search terms used by a marketing campaign."""
  term: String
}

"""
Represents a session preceding an order, often used for building a timeline of events leading to an order.
"""
type Shopify_CustomerMoment {
  """The date and time when the customer's session occurred."""
  occurredAt: DateTime!
}

"""Represents a customer's visiting activities on a shop's online store."""
type Shopify_CustomerJourneySummary {
  """
  The position of the current order within the customer's order history. Test orders aren't included.
  """
  customerOrderIndex: Int

  """
  The number of days between the first session and the order creation date. The first session represents the first session since the last order, or the first session within the 30 day attribution window, if more than 30 days have passed since the last order.
  """
  daysToConversion: Int

  """The customer's first session going into the shop."""
  firstVisit: Shopify_CustomerVisit

  """The last session before an order is made."""
  lastVisit: Shopify_CustomerVisit

  """The events preceding a customer's order, such as shop sessions."""
  moments(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CustomerMomentConnection

  """
  The total number of customer moments associated with this order. Returns null if the order is still in the process of being attributed.
  """
  momentsCount: Int

  """
  Whether or not the attributed sessions for the order have been created yet.
  """
  ready: Boolean!
}

"""
An auto-generated type for paginating through multiple CustomerMoments.
"""
type Shopify_CustomerMomentConnection {
  """A list of edges."""
  edges: [Shopify_CustomerMomentEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one CustomerMoment and a cursor during pagination.
"""
type Shopify_CustomerMomentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CustomerMomentEdge."""
  node: Shopify_CustomerMoment!
}

"""
An auto-generated type for paginating through multiple DiscountApplications.
"""
type Shopify_DiscountApplicationConnection {
  """A list of edges."""
  edges: [Shopify_DiscountApplicationEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one DiscountApplication and a cursor during pagination.
"""
type Shopify_DiscountApplicationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DiscountApplicationEdge."""
  node: Shopify_DiscountApplication!
}

"""
Discount applications capture the intentions of a discount source at
the time of application on an order's line items or shipping lines.

Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/2022-04/objects/discountallocation) object.
"""
type Shopify_DiscountApplication {
  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: Shopify_DiscountApplicationAllocationMethod!

  """
  An ordered index that can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.
  """
  index: Int!

  """How the discount amount is distributed on the discounted lines."""
  targetSelection: Shopify_DiscountApplicationTargetSelection!

  """Whether the discount is applied on line items or shipping lines."""
  targetType: Shopify_DiscountApplicationTargetType!

  """The value of the discount application."""
  value: Shopify_PricingValue!
}

enum Shopify_DiscountApplicationAllocationMethod {
  ACROSS
  EACH
  ONE
}

enum Shopify_DiscountApplicationTargetSelection {
  ALL
  ENTITLED
  EXPLICIT
}

enum Shopify_DiscountApplicationTargetType {
  LINE_ITEM
  SHIPPING_LINE
}

"""
The type of value given to a customer when a discount is applied to an order. For example, the application of the discount might give the customer a percentage off a specified item. Alternatively, the application of the discount might give the customer a monetary value in a given currency off an order.
"""
union Shopify_PricingValue = Shopify_MoneyV2 | Shopify_PricingPercentageValue

"""The value of the percentage pricing object."""
type Shopify_PricingPercentageValue {
  """The percentage value of the object."""
  percentage: Float!
}

enum Shopify_OrderDisplayFinancialStatus {
  PENDING
  AUTHORIZED
  PARTIALLY_PAID
  PARTIALLY_REFUNDED
  VOIDED
  PAID
  REFUNDED
  EXPIRED
}

enum Shopify_OrderDisplayFulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  RESTOCKED
  PENDING_FULFILLMENT
  OPEN
  IN_PROGRESS
  ON_HOLD
  SCHEDULED
}

"""A summary of the important details for a dispute on an order."""
type Shopify_OrderDisputeSummary {
  """A globally-unique identifier."""
  id: ID!

  """The type that the dispute was initiated as."""
  initiatedAs: Shopify_DisputeType!

  """The current status of the dispute."""
  status: Shopify_DisputeStatus!
}

enum Shopify_DisputeType {
  CHARGEBACK
  INQUIRY
}

enum Shopify_DisputeStatus {
  NEEDS_RESPONSE
  UNDER_REVIEW
  CHARGE_REFUNDED
  ACCEPTED
  WON
  LOST
}

"""
Returns unfulfilled line items grouped by their fulfillment service. Each draft fulfillment contains additional information, such as whether the fulfillment requires shipping and whether a shipping label can be printed for it.
"""
type Shopify_DraftFulfillment {
  """Whether a label can be purchased."""
  allowLabelPurchase: Boolean!

  """
  The line items (which might correspond to a variant) that are part of this draft fulfillment.
  """
  lineItems: [Shopify_LineItem!]!

  """Whether a fulfillment requires shipping."""
  requiresShipping: Boolean!

  """The service responsible for fulfilling the fulfillment."""
  service: Shopify_FulfillmentService!
}

"""Represents a single line item on an order."""
type Shopify_LineItem {
  """Whether the line item can be restocked."""
  canRestock: Boolean! @deprecated(reason: "Use `restockable` instead")

  """The subscription contract associated with this line item."""
  contract: Shopify_SubscriptionContract

  """The line item's quantity, minus the removed quantity."""
  currentQuantity: Int!

  """A list of additional information about the line item."""
  customAttributes: [Shopify_Attribute!]!

  """
  The discounts that have been allocated onto the line item by discount applications.
  """
  discountAllocations: [Shopify_DiscountAllocation!]!

  """The total line price after discounts are applied, in shop currency."""
  discountedTotal: Money! @deprecated(reason: "Use `discountedTotalSet` instead")

  """
  The total line price after discounts are applied, in shop and presentment currencies.
  """
  discountedTotalSet: Shopify_MoneyBag!

  """
  The approximate split price of a line item unit, in shop currency. This value doesn't include discounts applied to the entire order.
  """
  discountedUnitPrice: Money! @deprecated(reason: "Use `discountedUnitPriceSet` instead")

  """
  The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order.
  """
  discountedUnitPriceSet: Shopify_MoneyBag!

  """The duties associated with the line item."""
  duties: [Shopify_Duty!]!

  """The total number of units to fulfill."""
  fulfillableQuantity: Int! @deprecated(reason: "Use [FulfillmentOrderLineItem#remainingQuantity](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderLineItem#field-fulfillmentorderlineitem-remainingquantity) instead.")

  """
  The service provider that fulfills the line item.
  
  Deleted fulfillment services will return null.
  """
  fulfillmentService: Shopify_FulfillmentService @deprecated(reason: "Use [FulfillmentOrder#assignedLocation](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder#field-fulfillmentorder-assignedlocation) instead.")

  """
  The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
  'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
  """
  fulfillmentStatus: String! @deprecated(reason: "Use [FulfillmentOrderLineItem#remainingQuantity](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderLineItem#field-fulfillmentorderlineitem-remainingquantity) instead")

  """A globally-unique identifier."""
  id: ID!

  """The image associated to the line item's variant."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """
    Crops the image according to the specified region. This argument is deprecated: Use `crop` on `Image.transformedSrc` instead.
    """
    crop: Shopify_CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3. This argument is deprecated: Use `scale` on `Image.transformedSrc` instead.
    """
    scale: Int = 1
  ): Shopify_Image

  """Whether the line item can be edited or not."""
  merchantEditable: Boolean!

  """The name of the product."""
  name: String!

  """
  The total number of units that can't be fulfilled.
          For example, if items have been refunded, or the item is not something that can be fulfilled,
          like a tip.Please see the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object for more fulfillment details.
  """
  nonFulfillableQuantity: Int!

  """
  The total price without discounts applied, in shop currency.
  This value is based on the unit price of the variant x quantity.
  """
  originalTotal: Money! @deprecated(reason: "Use `originalTotalSet` instead")

  """
  The total price in shop and presentment currencies, without discounts applied. This value is based on the unit price of the variant x quantity.
  """
  originalTotalSet: Shopify_MoneyBag!

  """The variant unit price without discounts applied, in shop currency."""
  originalUnitPrice: Money! @deprecated(reason: "Use `originalUnitPriceSet` instead")

  """
  The variant unit price without discounts applied, in shop and presentment currencies.
  """
  originalUnitPriceSet: Shopify_MoneyBag!

  """The Product object associated with this line item's variant."""
  product: Shopify_Product

  """The number of variant units ordered."""
  quantity: Int!

  """The line item's quantity, minus the removed quantity."""
  refundableQuantity: Int!

  """Whether physical shipping is required for the variant."""
  requiresShipping: Boolean!

  """Whether the line item can be restocked."""
  restockable: Boolean!

  """The selling plan details associated with the line item."""
  sellingPlan: Shopify_LineItemSellingPlan

  """The variant SKU number."""
  sku: String

  """The taxes charged for this line item."""
  taxLines(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_TaxLine!]!

  """Whether the variant is taxable."""
  taxable: Boolean!

  """The title of the product."""
  title: String!

  """The sum of all AppliedDiscounts on this line item, in shop currency."""
  totalDiscount: Money! @deprecated(reason: "Use `totalDiscountSet` instead")

  """
  The sum of all AppliedDiscounts on this line item, in shop and presentment currencies.
  """
  totalDiscountSet: Shopify_MoneyBag!

  """The total discounted value of unfulfilled units, in shop currency."""
  unfulfilledDiscountedTotal: Money! @deprecated(reason: "Use `unfulfilledDiscountedTotalSet` instead")

  """
  The total discounted value of unfulfilled units, in shop and presentment currencies.
  """
  unfulfilledDiscountedTotalSet: Shopify_MoneyBag!

  """
  The total price, without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop currency.
  """
  unfulfilledOriginalTotal: Money! @deprecated(reason: "Use `unfulfilledOriginalTotalSet` instead")

  """
  The total price, without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop and presentment currencies.
  """
  unfulfilledOriginalTotalSet: Shopify_MoneyBag!

  """The number of units not yet fulfilled."""
  unfulfilledQuantity: Int!

  """The Variant object associated with this line item."""
  variant: Shopify_ProductVariant

  """The name of the variant."""
  variantTitle: String

  """The name of the vendor who made the variant."""
  vendor: String
}

"""Represents a Subscription Contract."""
type Shopify_SubscriptionContract {
  """The subscription app that this subscription contract is registered to."""
  app: Shopify_App

  """URL of the subscription contract page on the subscription app."""
  appAdminUrl: Url

  """
  The list of billing attempts associated with the subscription contract.
  """
  billingAttempts(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionBillingAttemptConnection!

  """The billing policy associated with the subscription contract."""
  billingPolicy: Shopify_SubscriptionBillingPolicy!

  """The date and time when the subscription contract was created."""
  createdAt: DateTime!

  """The currency used for the subscription contract."""
  currencyCode: Shopify_CurrencyCode!

  """The customer to whom the subscription contract belongs."""
  customer: Shopify_Customer

  """The customer payment method used for the subscription contract."""
  customerPaymentMethod(
    """Whether to show the customer's revoked payment method."""
    showRevoked: Boolean = false
  ): Shopify_CustomerPaymentMethod

  """The delivery method for each billing of the subscription contract."""
  deliveryMethod: Shopify_SubscriptionDeliveryMethod

  """The delivery policy associated with the subscription contract."""
  deliveryPolicy: Shopify_SubscriptionDeliveryPolicy!

  """The delivery price for each billing of the subscription contract."""
  deliveryPrice: Shopify_MoneyV2!

  """
  The list of subscription discounts associated with the subscription contract.
  """
  discounts(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionManualDiscountConnection!

  """A globally-unique identifier."""
  id: ID!

  """The current status of the last payment."""
  lastPaymentStatus: Shopify_SubscriptionContractLastPaymentStatus

  """The number of lines associated with the subscription contract."""
  lineCount: Int!

  """
  The list of subscription lines associated with the subscription contract.
  """
  lines(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionLineConnection!

  """The next billing date for the subscription contract."""
  nextBillingDate: DateTime

  """The note field that will be applied to the generated orders."""
  note: String

  """A list of the subscription contract's orders."""
  orders(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_OrderConnection!

  """The order from which this contract originated."""
  originOrder: Shopify_Order

  """The current status of the subscription contract."""
  status: Shopify_SubscriptionContractSubscriptionStatus!

  """The date and time when the subscription contract was updated."""
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple SubscriptionBillingAttempts.
"""
type Shopify_SubscriptionBillingAttemptConnection {
  """A list of edges."""
  edges: [Shopify_SubscriptionBillingAttemptEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SubscriptionBillingAttempt and a cursor during pagination.
"""
type Shopify_SubscriptionBillingAttemptEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SubscriptionBillingAttemptEdge."""
  node: Shopify_SubscriptionBillingAttempt!
}

"""
A record of an execution of the subscription billing process. Billing attempts use
idempotency keys to avoid duplicate order creation. A successful billing attempt
will create an order.
"""
type Shopify_SubscriptionBillingAttempt {
  """The date and time when the billing attempt was completed."""
  completedAt: DateTime

  """The date and time when the billing attempt was created."""
  createdAt: DateTime!

  """A code corresponding to a payment error during processing."""
  errorCode: Shopify_SubscriptionBillingAttemptErrorCode

  """A message describing a payment error during processing."""
  errorMessage: String

  """A globally-unique identifier."""
  id: ID!

  """A unique key generated by the client to avoid duplicate payments."""
  idempotencyKey: String!

  """
  The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow.
  """
  nextActionUrl: Url

  """The result of this billing attempt if completed successfully."""
  order: Shopify_Order

  """Whether or not the billing attempt is still processing."""
  ready: Boolean!

  """The subscription contract."""
  subscriptionContract: Shopify_SubscriptionContract!
}

enum Shopify_SubscriptionBillingAttemptErrorCode {
  PAYMENT_METHOD_NOT_FOUND
  PAYMENT_PROVIDER_IS_NOT_ENABLED
  INVALID_PAYMENT_METHOD
  UNEXPECTED_ERROR
  EXPIRED_PAYMENT_METHOD
  PAYMENT_METHOD_DECLINED
  AUTHENTICATION_ERROR
  TEST_MODE
  BUYER_CANCELED_PAYMENT_METHOD
  CUSTOMER_NOT_FOUND
  CUSTOMER_INVALID
  INVALID_SHIPPING_ADDRESS
}

"""Represents a Subscription Billing Policy."""
type Shopify_SubscriptionBillingPolicy {
  """
  Specific anchor dates upon which the billing interval calculations should be made.
  """
  anchors: [Shopify_SellingPlanAnchor!]!

  """
  The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
  """
  interval: Shopify_SellingPlanInterval!

  """The number of billing intervals between invoices."""
  intervalCount: Int!

  """Maximum amount of cycles after which the subscription ends."""
  maxCycles: Int

  """Minimum amount of cycles required in the subscription."""
  minCycles: Int
}

"""A customer's payment method."""
type Shopify_CustomerPaymentMethod {
  """The customer to whom the payment method belongs."""
  customer: Shopify_Customer

  """The ID of this payment method."""
  id: ID!

  """The instrument for this payment method."""
  instrument: Shopify_CustomerPaymentInstrument

  """The time that the payment method was revoked."""
  revokedAt: DateTime

  """The revocation reason for this payment method."""
  revokedReason: Shopify_CustomerPaymentMethodRevocationReason

  """List Subscription Contracts."""
  subscriptionContracts(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionContractConnection!
}

"""All possible instruments for CustomerPaymentMethods."""
union Shopify_CustomerPaymentInstrument = Shopify_CustomerCreditCard | Shopify_CustomerPaypalBillingAgreement | Shopify_CustomerShopPayAgreement

"""Represents a card instrument for customer payment method."""
type Shopify_CustomerCreditCard {
  """The billing address of the card."""
  billingAddress: Shopify_CustomerCreditCardBillingAddress

  """The brand of the card."""
  brand: String!

  """Whether the card is about to expire."""
  expiresSoon: Boolean!

  """The expiry month of the card."""
  expiryMonth: Int!

  """The expiry year of the card."""
  expiryYear: Int!

  """The card's BIN number."""
  firstDigits: String

  """
  The payment method can be revoked if there are no active subscription contracts.
  """
  isRevocable: Boolean!

  """The last 4 digits of the card."""
  lastDigits: String!

  """The masked card number with only the last 4 digits displayed."""
  maskedNumber: String!

  """The name of the card holder."""
  name: String!

  """The source of the card if coming from a wallet such as Apple Pay."""
  source: String

  """The last 4 digits of the Device Account Number."""
  virtualLastDigits: String
}

"""The billing address of a credit card payment instrument."""
type Shopify_CustomerCreditCardBillingAddress {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """The name of the city, district, village, or town."""
  city: String

  """The name of the country."""
  country: String

  """
  The two-letter code for the country of the address.
  For example, US.
  """
  countryCode: Shopify_CountryCode

  """The region of the address, such as the province, state, or district."""
  province: String

  """
  The two-letter code for the region.
  For example, ON.
  """
  provinceCode: String

  """The zip or postal code of the address."""
  zip: String
}

"""Represents a PayPal instrument for customer payment method."""
type Shopify_CustomerPaypalBillingAgreement {
  """The billing address of this payment method."""
  billingAddress: Shopify_CustomerPaymentInstrumentBillingAddress

  """Whether the PayPal billing agreement is inactive."""
  inactive: Boolean!

  """
  Whether the payment method can be revoked.The payment method can be revoked if there are no active subscription contracts.
  """
  isRevocable: Boolean!

  """The customers's PayPal account email address."""
  paypalAccountEmail: String
}

"""The billing address of a payment instrument."""
type Shopify_CustomerPaymentInstrumentBillingAddress {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """The name of the city, district, village, or town."""
  city: String

  """The name of the country."""
  country: String

  """
  The two-letter code for the country of the address.
  For example, US.
  """
  countryCode: Shopify_CountryCode

  """The name of the buyer of the address."""
  name: String

  """The region of the address, such as the province, state, or district."""
  province: String

  """
  The two-letter code for the region.
  For example, ON.
  """
  provinceCode: String

  """The zip or postal code of the address."""
  zip: String
}

"""Represents a Shop Pay card instrument for customer payment method."""
type Shopify_CustomerShopPayAgreement {
  """Whether the card is about to expire."""
  expiresSoon: Boolean!

  """The expiry month of the card."""
  expiryMonth: Int!

  """The expiry year of the card."""
  expiryYear: Int!

  """Whether the Shop Pay billing agreement is inactive."""
  inactive: Boolean!

  """
  The payment method can be revoked if there are no active subscription contracts.
  """
  isRevocable: Boolean!

  """The last 4 digits of the card."""
  lastDigits: String!

  """The masked card number with only the last 4 digits displayed."""
  maskedNumber: String!

  """The name of the card holder."""
  name: String!
}

enum Shopify_CustomerPaymentMethodRevocationReason {
  AUTHORIZE_NET_GATEWAY_NOT_ENABLED
  AUTHORIZE_NET_RETURNED_NO_PAYMENT_METHOD
  FAILED_TO_UPDATE_CREDIT_CARD
  MANUALLY_REVOKED
  STRIPE_API_AUTHENTICATION_ERROR
  STRIPE_API_INVALID_REQUEST_ERROR
  STRIPE_GATEWAY_NOT_ENABLED
  STRIPE_RETURNED_NO_PAYMENT_METHOD
  STRIPE_PAYMENT_METHOD_NOT_CARD
}

"""
An auto-generated type for paginating through multiple SubscriptionContracts.
"""
type Shopify_SubscriptionContractConnection {
  """A list of edges."""
  edges: [Shopify_SubscriptionContractEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SubscriptionContract and a cursor during pagination.
"""
type Shopify_SubscriptionContractEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SubscriptionContractEdge."""
  node: Shopify_SubscriptionContract!
}

"""
Describes the delivery method to use to get the physical goods to the customer.
"""
union Shopify_SubscriptionDeliveryMethod = Shopify_SubscriptionDeliveryMethodShipping

"""
Represents a shipping delivery method: a mailing address and a shipping option.
"""
type Shopify_SubscriptionDeliveryMethodShipping {
  """The address to ship to."""
  address: Shopify_SubscriptionMailingAddress!

  """The details of the shipping method to use."""
  shippingOption: Shopify_SubscriptionDeliveryMethodShippingOption!
}

"""Represents a Mailing Address on a Subscription."""
type Shopify_SubscriptionMailingAddress {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """The name of the city, district, village, or town."""
  city: String

  """The name of the customer's company or organization."""
  company: String

  """The name of the country."""
  country: String

  """
  The two-letter code for the country of the address.
  
  For example, US.
  """
  countryCode: Shopify_CountryCode

  """The first name of the customer."""
  firstName: String

  """The last name of the customer."""
  lastName: String

  """The full name of the customer, based on firstName and lastName."""
  name: String

  """
  A unique phone number for the customer. Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String

  """The region of the address, such as the province, state, or district."""
  province: String

  """
  The two-letter code for the region.
  
  For example, ON.
  """
  provinceCode: String

  """The zip or postal code of the address."""
  zip: String
}

"""Represents the selected shipping option on a subscription contract."""
type Shopify_SubscriptionDeliveryMethodShippingOption {
  """The carrier service of the shipping option."""
  carrierService: Shopify_DeliveryCarrierService

  """The code of the shipping option."""
  code: String

  """The description of the shipping option."""
  description: String

  """The presentment title of the shipping option."""
  presentmentTitle: String

  """The title of the shipping option."""
  title: String
}

"""Represents a Subscription Delivery Policy."""
type Shopify_SubscriptionDeliveryPolicy {
  """
  Specific anchor dates upon which the delivery interval calculations should be made.
  """
  anchors: [Shopify_SellingPlanAnchor!]!

  """
  The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
  """
  interval: Shopify_SellingPlanInterval!

  """The number of delivery intervals between deliveries."""
  intervalCount: Int!
}

"""
An auto-generated type for paginating through multiple SubscriptionManualDiscounts.
"""
type Shopify_SubscriptionManualDiscountConnection {
  """A list of edges."""
  edges: [Shopify_SubscriptionManualDiscountEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SubscriptionManualDiscount and a cursor during pagination.
"""
type Shopify_SubscriptionManualDiscountEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SubscriptionManualDiscountEdge."""
  node: Shopify_SubscriptionManualDiscount!
}

"""Custom subscription discount."""
type Shopify_SubscriptionManualDiscount {
  """Entitled line items used to apply the subscription discount on."""
  entitledLines: Shopify_SubscriptionDiscountEntitledLines!

  """The unique identifier."""
  id: ID!

  """
  The maximum number of times the subscription discount will be applied on orders.
  """
  recurringCycleLimit: Int

  """The reason that the discount on the subscription draft is rejected."""
  rejectionReason: Shopify_SubscriptionDiscountRejectionReason

  """Type of line the discount applies on."""
  targetType: Shopify_DiscountTargetType!

  """The title associated with the subscription discount."""
  title: String

  """The type of the subscription discount."""
  type: Shopify_DiscountType!

  """The number of times the discount was applied."""
  usageCount: Int!

  """The value of the subscription discount."""
  value: Shopify_SubscriptionDiscountValue!
}

"""Represents the subscription lines the discount applies on."""
type Shopify_SubscriptionDiscountEntitledLines {
  """
  Specify whether the subscription discount will apply on all subscription lines.
  """
  all: Boolean!

  """
  The list of subscription lines associated with the subscription discount.
  """
  lines(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionLineConnection!
}

"""
An auto-generated type for paginating through multiple SubscriptionLines.
"""
type Shopify_SubscriptionLineConnection {
  """A list of edges."""
  edges: [Shopify_SubscriptionLineEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SubscriptionLine and a cursor during pagination.
"""
type Shopify_SubscriptionLineEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SubscriptionLineEdge."""
  node: Shopify_SubscriptionLine!
}

"""Represents a Subscription Line."""
type Shopify_SubscriptionLine {
  """
  The price per unit for the subscription line in the contract's currency.
  """
  currentPrice: Shopify_MoneyV2!

  """List of custom attributes associated to the line item."""
  customAttributes: [Shopify_Attribute!]!

  """Discount allocations."""
  discountAllocations: [Shopify_SubscriptionDiscountAllocation!]!

  """The unique identifier."""
  id: ID!

  """Total line price including all discounts."""
  lineDiscountedPrice: Shopify_MoneyV2!

  """Describe the price changes of the line over time."""
  pricingPolicy: Shopify_SubscriptionPricingPolicy

  """The product id associated with the subscription line."""
  productId: ID

  """The quantity of the unit selected for the subscription line."""
  quantity: Int!

  """Whether physical shipping is required for the variant."""
  requiresShipping: Boolean!

  """
  The selling plan ID associated to the line.
  
  Indicates which selling plan was used to create this
  contract line initially. The selling plan ID is also used to
  find the associated delivery profile.
  
  The subscription contract, subscription line, or selling plan might have
  changed. As a result, the selling plan's attributes might not
  match the information on the contract.
  """
  sellingPlanId: ID

  """
  The selling plan name associated to the line. This name describes
  the order line items created from this subscription line
  for both merchants and customers.
  
  The value can be different from the selling plan's name, because both
  the selling plan's name and the subscription line's selling_plan_name
  attribute can be updated independently.
  """
  sellingPlanName: String

  """Variant SKU number of the item associated with the subscription line."""
  sku: String

  """Whether the variant is taxable."""
  taxable: Boolean!

  """Product title of the item associated with the subscription line."""
  title: String!

  """The product variant id associated with the subscription line."""
  variantId: ID

  """The image associated with the line item's variant or product."""
  variantImage: Shopify_Image

  """
  Product variant title of the item associated with the subscription line.
  """
  variantTitle: String
}

"""Represents what a particular discount reduces from a line price."""
type Shopify_SubscriptionDiscountAllocation {
  """Allocation amount."""
  amount: Shopify_MoneyV2!

  """Discount that created the allocation."""
  discount: Shopify_SubscriptionDiscount!
}

"""Subscription draft discount types."""
union Shopify_SubscriptionDiscount = Shopify_SubscriptionAppliedCodeDiscount | Shopify_SubscriptionManualDiscount

"""Represents an applied code discount."""
type Shopify_SubscriptionAppliedCodeDiscount {
  """The unique identifier."""
  id: ID!

  """The redeem code of the discount that applies on the subscription."""
  redeemCode: String!

  """The reason that the discount on the subscription draft is rejected."""
  rejectionReason: Shopify_SubscriptionDiscountRejectionReason
}

enum Shopify_SubscriptionDiscountRejectionReason {
  NOT_FOUND
  NO_ENTITLED_LINE_ITEMS
  QUANTITY_NOT_IN_RANGE
  PURCHASE_NOT_IN_RANGE
  CUSTOMER_NOT_ELIGIBLE
  USAGE_LIMIT_REACHED
  CUSTOMER_USAGE_LIMIT_REACHED
  CURRENTLY_INACTIVE
  NO_ENTITLED_SHIPPING_LINES
  INCOMPATIBLE_PURCHASE_TYPE
  INTERNAL_ERROR
}

"""Represents a Subscription Line Pricing Policy."""
type Shopify_SubscriptionPricingPolicy {
  """
  The base price per unit for the subscription line in the contract's currency.
  """
  basePrice: Shopify_MoneyV2!

  """The adjustments per cycle for the subscription line."""
  cycleDiscounts: [Shopify_SubscriptionCyclePriceAdjustment!]!
}

"""Represents a Subscription Line Pricing Cycle Adjustment."""
type Shopify_SubscriptionCyclePriceAdjustment {
  """Price adjustment type."""
  adjustmentType: Shopify_SellingPlanPricingPolicyAdjustmentType!

  """Price adjustment value."""
  adjustmentValue: Shopify_SellingPlanPricingPolicyAdjustmentValue!

  """The number of cycles required before this pricing policy applies."""
  afterCycle: Int!

  """The computed price after the adjustments applied."""
  computedPrice: Shopify_MoneyV2!
}

enum Shopify_DiscountTargetType {
  LINE_ITEM
  SHIPPING_LINE
}

enum Shopify_DiscountType {
  MANUAL
  CODE_DISCOUNT
}

"""The value of the discount and how it will be applied."""
union Shopify_SubscriptionDiscountValue = Shopify_SubscriptionDiscountFixedAmountValue | Shopify_SubscriptionDiscountPercentageValue

"""The value of the discount and how it will be applied."""
type Shopify_SubscriptionDiscountFixedAmountValue {
  """The fixed amount value of the discount."""
  amount: Shopify_MoneyV2!

  """Whether the amount is applied per item."""
  appliesOnEachItem: Boolean!
}

"""The percentage value of the discount."""
type Shopify_SubscriptionDiscountPercentageValue {
  """The percentage value of the discount."""
  percentage: Int!
}

enum Shopify_SubscriptionContractLastPaymentStatus {
  SUCCEEDED
  FAILED
}

"""An auto-generated type for paginating through multiple Orders."""
type Shopify_OrderConnection {
  """A list of edges."""
  edges: [Shopify_OrderEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Order and a cursor during pagination.
"""
type Shopify_OrderEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of OrderEdge."""
  node: Shopify_Order!
}

enum Shopify_SubscriptionContractSubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
  EXPIRED
  FAILED
}

"""
An amount that's allocated to a line based on an associated discount application.
"""
type Shopify_DiscountAllocation {
  """
  The money amount that's allocated to a line based on the associated discount application.
  """
  allocatedAmount: Shopify_MoneyV2! @deprecated(reason: "Use `allocatedAmountSet` instead")

  """
  The money amount that's allocated to a line based on the associated discount application in shop and presentment currencies.
  """
  allocatedAmountSet: Shopify_MoneyBag!

  """The discount application that the allocated amount originated from."""
  discountApplication: Shopify_DiscountApplication!
}

"""The duty details for a line item."""
type Shopify_Duty {
  """
  The ISO 3166-1 alpha-2 country code of the country of origin used in calculating the duty.
  """
  countryCodeOfOrigin: Shopify_CountryCode

  """The harmonized system code of the item used in calculating the duty."""
  harmonizedSystemCode: String

  """A globally-unique identifier."""
  id: ID!

  """The amount of the duty."""
  price: Shopify_MoneyBag!

  """A list of taxes charged on the duty."""
  taxLines: [Shopify_TaxLine!]!
}

"""Represents the selling plan for a line item."""
type Shopify_LineItemSellingPlan {
  """The name of the selling plan for display purposes."""
  name: String!
}

"""
An auto-generated type for paginating through multiple FulfillmentOrders.
"""
type Shopify_FulfillmentOrderConnection {
  """A list of edges."""
  edges: [Shopify_FulfillmentOrderEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one FulfillmentOrder and a cursor during pagination.
"""
type Shopify_FulfillmentOrderEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentOrderEdge."""
  node: Shopify_FulfillmentOrder!
}

"""
Represents a fulfillment order. In Shopify, a fulfillment order represents a group of one or more items
in an order that are to be fulfilled from the same location. There can be more than one fulfillment order
for an order at a given location.
"""
type Shopify_FulfillmentOrder {
  """
  The fulfillment order's assigned location. This is the location expected to perform fulfillment.
  """
  assignedLocation: Shopify_FulfillmentOrderAssignedLocation!

  """Delivery method of this fulfillment order."""
  deliveryMethod: Shopify_DeliveryMethod

  """The destination where the items should be sent."""
  destination: Shopify_FulfillmentOrderDestination

  """The date and time at which the fulfillment order will be fulfillable."""
  fulfillAt: DateTime

  """The fulfillment holds applied on the fulfillment order."""
  fulfillmentHolds: [Shopify_FulfillmentHold!]!

  """A list of fulfillments for the fulfillment order."""
  fulfillments(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_FulfillmentConnection!

  """A globally-unique identifier."""
  id: ID!

  """The duties delivery method of this fulfillment order."""
  internationalDuties: Shopify_FulfillmentOrderInternationalDuties

  """A list of the fulfillment order's line items."""
  lineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_FulfillmentOrderLineItemConnection!

  """
  A list of locations that the fulfillment order can potentially move to.
  """
  locationsForMove(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_FulfillmentOrderLocationForMoveConnection!

  """
  A list of requests sent by the merchant to the fulfillment service for this fulfillment order.
  """
  merchantRequests(
    """The kind of request the merchant sent."""
    kind: Shopify_FulfillmentOrderMerchantRequestKind

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_FulfillmentOrderMerchantRequestConnection!

  """The order that's associated with the fulfillment order."""
  order: Shopify_Order!

  """The request status of the fulfillment order."""
  requestStatus: Shopify_FulfillmentOrderRequestStatus!

  """The status of the fulfillment order."""
  status: Shopify_FulfillmentOrderStatus!

  """The actions that can be performed on this fulfillment order."""
  supportedActions: [Shopify_FulfillmentOrderSupportedAction!]!
}

"""
Represents the assigned location of a fulfillment order, which is a snapshot of the location
at which the fulfillment order was created. The assigned location is expected to perform fulfillment.
"""
type Shopify_FulfillmentOrderAssignedLocation {
  """The first line of the address for the location."""
  address1: String

  """The second line of the address for the location."""
  address2: String

  """The city of the location."""
  city: String

  """The two-letter country code of the location."""
  countryCode: Shopify_CountryCode!

  """
  The location where the fulfillment order was created. This can differ from the
  `FulfillmentOrderAssignedLocation` if the location was updated since the fulfillment order
  was closed.
  """
  location: Shopify_Location

  """The name of the location."""
  name: String!

  """The phone number of the location."""
  phone: String

  """The province of the location."""
  province: String

  """The ZIP code of the location."""
  zip: String
}

"""The delivery method used by a fulfillment order."""
type Shopify_DeliveryMethod {
  """A globally-unique identifier."""
  id: ID!

  """The type of the delivery method."""
  methodType: Shopify_DeliveryMethodType!
}

enum Shopify_DeliveryMethodType {
  SHIPPING
  PICK_UP
  NONE
  RETAIL
  LOCAL
}

"""
Represents the destination where the items should be sent upon fulfillment.
"""
type Shopify_FulfillmentOrderDestination {
  """The first line of the address of the destination."""
  address1: String

  """The second line of the address of the destination."""
  address2: String

  """The city of the destination."""
  city: String

  """The company of the destination."""
  company: String

  """The two-letter country code of the destination."""
  countryCode: Shopify_CountryCode

  """The email of the customer at the destination."""
  email: String

  """The first name of the customer at the destination."""
  firstName: String

  """A globally-unique identifier."""
  id: ID!

  """The last name of the customer at the destination."""
  lastName: String

  """The phone number of the customer at the destination."""
  phone: String

  """The province of the destination."""
  province: String

  """The ZIP code of the destination."""
  zip: String
}

"""A fulfillment hold currently applied on a fulfillment order."""
type Shopify_FulfillmentHold {
  """The reason for the fulfillment hold."""
  reason: Shopify_FulfillmentHoldReason!

  """Additional information about the fulfillment hold reason."""
  reasonNotes: String
}

enum Shopify_FulfillmentHoldReason {
  AWAITING_PAYMENT
  HIGH_RISK_OF_FRAUD
  INCORRECT_ADDRESS
  INVENTORY_OUT_OF_STOCK
  OTHER
}

"""An auto-generated type for paginating through multiple Fulfillments."""
type Shopify_FulfillmentConnection {
  """A list of edges."""
  edges: [Shopify_FulfillmentEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Fulfillment and a cursor during pagination.
"""
type Shopify_FulfillmentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentEdge."""
  node: Shopify_Fulfillment!
}

"""
Represents a fulfillment. In Shopify, a fulfillment represents a shipment of one or more items in an order. When an order has been completely fulfilled, it means that all the items that are included in the order have been sent to the customer. There can be more than one fulfillment for an order.
"""
type Shopify_Fulfillment {
  """The date and time when the fulfillment was created."""
  createdAt: DateTime!

  """The date that this fulfillment was delivered."""
  deliveredAt: DateTime

  """Human readable display status for this fulfillment."""
  displayStatus: Shopify_FulfillmentDisplayStatus

  """The estimated date that this fulfillment will arrive."""
  estimatedDeliveryAt: DateTime

  """The history of events associated with this fulfillment."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_FulfillmentEventSortKeys = HAPPENED_AT
  ): Shopify_FulfillmentEventConnection!

  """List of the fulfillment's line items."""
  fulfillmentLineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_FulfillmentLineItemConnection!

  """A paginated list of fulfillment orders for the fulfillment."""
  fulfillmentOrders(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_FulfillmentOrderConnection!

  """A globally-unique identifier."""
  id: ID!

  """The date and time when the fulfillment went into transit."""
  inTransitAt: DateTime

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The location that the fulfillment was processed at."""
  location: Shopify_Location

  """Human readable reference identifier for this fulfillment."""
  name: String!

  """The order for which the fulfillment was created."""
  order: Shopify_Order!

  """
  The address at which the fulfillment occurred. Typically this is the address of the warehouse or fulfillment center.
  """
  originAddress: Shopify_FulfillmentOriginAddress

  """Whether any of the line items in the fulfillment require shipping."""
  requiresShipping: Boolean!

  """Fulfillment service associated with the fulfillment."""
  service: Shopify_FulfillmentService

  """The status of the fulfillment."""
  status: Shopify_FulfillmentStatus!

  """Sum of all line item quantities for the fulfillment."""
  totalQuantity: Int!

  """
  Tracking information associated with the fulfillment,
  such as the tracking company, tracking number, and tracking URL.
  """
  trackingInfo(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_FulfillmentTrackingInfo!]!

  """The date and time when the fulfillment was last modified."""
  updatedAt: DateTime!
}

enum Shopify_FulfillmentDisplayStatus {
  ATTEMPTED_DELIVERY
  CANCELED
  CONFIRMED
  DELIVERED
  FAILURE
  FULFILLED
  IN_TRANSIT
  LABEL_PRINTED
  LABEL_PURCHASED
  LABEL_VOIDED
  MARKED_AS_FULFILLED
  NOT_DELIVERED
  OUT_FOR_DELIVERY
  READY_FOR_PICKUP
  PICKED_UP
  SUBMITTED
}

"""
An auto-generated type for paginating through multiple FulfillmentEvents.
"""
type Shopify_FulfillmentEventConnection {
  """A list of edges."""
  edges: [Shopify_FulfillmentEventEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one FulfillmentEvent and a cursor during pagination.
"""
type Shopify_FulfillmentEventEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentEventEdge."""
  node: Shopify_FulfillmentEvent!
}

"""
The fulfillment event that describes the fulfilllment status at a particular time.
"""
type Shopify_FulfillmentEvent {
  """The time at which this fulfillment event happened."""
  happenedAt: DateTime!

  """A globally-unique identifier."""
  id: ID!

  """The status of this fulfillment event."""
  status: Shopify_FulfillmentEventStatus!
}

enum Shopify_FulfillmentEventStatus {
  LABEL_PURCHASED
  LABEL_PRINTED
  READY_FOR_PICKUP
  CONFIRMED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  ATTEMPTED_DELIVERY
  DELIVERED
  FAILURE
}

enum Shopify_FulfillmentEventSortKeys {
  HAPPENED_AT
  ID
  RELEVANCE
}

"""
An auto-generated type for paginating through multiple FulfillmentLineItems.
"""
type Shopify_FulfillmentLineItemConnection {
  """A list of edges."""
  edges: [Shopify_FulfillmentLineItemEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination.
"""
type Shopify_FulfillmentLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentLineItemEdge."""
  node: Shopify_FulfillmentLineItem!
}

"""Represents a line item from an order that's included in a fulfillment."""
type Shopify_FulfillmentLineItem {
  """The total price after discounts are applied."""
  discountedTotal: Money! @deprecated(reason: "Use `discountedTotalSet` instead")

  """
  The total price after discounts are applied in shop and presentment currencies.
  """
  discountedTotalSet: Shopify_MoneyBag!

  """A globally-unique identifier."""
  id: ID!

  """The associated order's line item."""
  lineItem: Shopify_LineItem!

  """The total price before discounts are applied."""
  originalTotal: Money! @deprecated(reason: "Use `originalTotalSet` instead")

  """
  The total price before discounts are applied in shop and presentment currencies.
  """
  originalTotalSet: Shopify_MoneyBag!

  """Number of line items in the fulfillment."""
  quantity: Int
}

"""
The address at which the fulfillment occurred. Typically this is the address of the warehouse or fulfillment center.
"""
type Shopify_FulfillmentOriginAddress {
  """The street address of the fulfillment location."""
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """The city in which the fulfillment location is located."""
  city: String

  """The country code of the fulfillment location."""
  countryCode: String!

  """The province code of the fulfillment location."""
  provinceCode: String

  """The zip code of the fulfillment location."""
  zip: String
}

enum Shopify_FulfillmentStatus {
  PENDING
  OPEN
  SUCCESS
  CANCELLED
  ERROR
  FAILURE
}

"""Represents the tracking information for a fulfillment."""
type Shopify_FulfillmentTrackingInfo {
  """The name of the tracking company."""
  company: String

  """The tracking number of the fulfillment."""
  number: String

  """The URLs to track the fulfillment."""
  url: Url
}

"""The international duties relevant to a fulfillment order."""
type Shopify_FulfillmentOrderInternationalDuties {
  """The method of duties payment. Example values: `DDP`, `DAP`."""
  incoterm: String!
}

"""
An auto-generated type for paginating through multiple FulfillmentOrderLineItems.
"""
type Shopify_FulfillmentOrderLineItemConnection {
  """A list of edges."""
  edges: [Shopify_FulfillmentOrderLineItemEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one FulfillmentOrderLineItem and a cursor during pagination.
"""
type Shopify_FulfillmentOrderLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentOrderLineItemEdge."""
  node: Shopify_FulfillmentOrderLineItem!
}

"""Represents a line item belonging to a fulfillment order."""
type Shopify_FulfillmentOrderLineItem {
  """A globally-unique identifier."""
  id: ID!

  """The associated order line item."""
  lineItem: Shopify_LineItem!

  """The number of units remaining to be fulfilled."""
  remainingQuantity: Int!

  """The total number of units to be fulfilled."""
  totalQuantity: Int!
}

"""
An auto-generated type for paginating through multiple FulfillmentOrderLocationForMoves.
"""
type Shopify_FulfillmentOrderLocationForMoveConnection {
  """A list of edges."""
  edges: [Shopify_FulfillmentOrderLocationForMoveEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one FulfillmentOrderLocationForMove and a cursor during pagination.
"""
type Shopify_FulfillmentOrderLocationForMoveEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentOrderLocationForMoveEdge."""
  node: Shopify_FulfillmentOrderLocationForMove!
}

"""A location that a fulfillment order can potentially move to."""
type Shopify_FulfillmentOrderLocationForMove {
  """
  The location being considered as the fulfillment order's new assigned location.
  """
  location: Shopify_Location!

  """
  A human-readable string with the reason why the fulfillment order, or some of its line items, can't be
  moved to the location.
  """
  message: String

  """Whether the fulfillment order can be moved to the location."""
  movable: Boolean!
}

"""
An auto-generated type for paginating through multiple FulfillmentOrderMerchantRequests.
"""
type Shopify_FulfillmentOrderMerchantRequestConnection {
  """A list of edges."""
  edges: [Shopify_FulfillmentOrderMerchantRequestEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one FulfillmentOrderMerchantRequest and a cursor during pagination.
"""
type Shopify_FulfillmentOrderMerchantRequestEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentOrderMerchantRequestEdge."""
  node: Shopify_FulfillmentOrderMerchantRequest!
}

"""
Represents a request made by the merchant to a fulfillment service for a fulfillment order.
"""
type Shopify_FulfillmentOrderMerchantRequest {
  """A globally-unique identifier."""
  id: ID!

  """The kind of request made."""
  kind: Shopify_FulfillmentOrderMerchantRequestKind!

  """The optional message that the merchant included in the request."""
  message: String

  """
  Additional options requested by the merchant. These depend on the `kind` of the request.
  For example, for a `FULFILLMENT_REQUEST`, one option is `notify_customer`, which indicates whether the
  merchant intends to notify the customer upon fulfillment. The fulfillment service can then set
  `notifyCustomer` when making calls to `FulfillmentCreateV2`.
  """
  requestOptions: Json

  """The response from the fulfillment service."""
  responseData: Json

  """The timestamp when the request was made."""
  sentAt: DateTime!
}

enum Shopify_FulfillmentOrderMerchantRequestKind {
  FULFILLMENT_REQUEST
  CANCELLATION_REQUEST
}

scalar Json

enum Shopify_FulfillmentOrderRequestStatus {
  UNSUBMITTED
  SUBMITTED
  ACCEPTED
  REJECTED
  CANCELLATION_REQUESTED
  CANCELLATION_ACCEPTED
  CANCELLATION_REJECTED
  CLOSED
}

enum Shopify_FulfillmentOrderStatus {
  OPEN
  IN_PROGRESS
  CANCELLED
  INCOMPLETE
  CLOSED
  SCHEDULED
  ON_HOLD
}

"""
One of the actions that the fulfillment order supports in its current state.
"""
type Shopify_FulfillmentOrderSupportedAction {
  """The action value."""
  action: Shopify_FulfillmentOrderAction!

  """
  The external URL to be used to initiate the fulfillment process outside Shopify.
  Applicable only when the `action` value is `EXTERNAL`.
  """
  externalUrl: Url
}

enum Shopify_FulfillmentOrderAction {
  CREATE_FULFILLMENT
  REQUEST_FULFILLMENT
  CANCEL_FULFILLMENT_ORDER
  MOVE
  REQUEST_CANCELLATION
  MARK_AS_OPEN
  RELEASE_HOLD
  HOLD
  EXTERNAL
}

"""An auto-generated type for paginating through multiple LineItems."""
type Shopify_LineItemConnection {
  """A list of edges."""
  edges: [Shopify_LineItemEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one LineItem and a cursor during pagination.
"""
type Shopify_LineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of LineItemEdge."""
  node: Shopify_LineItem!
}

"""
An auto-generated type for paginating through multiple LineItemMutables.
"""
type Shopify_LineItemMutableConnection {
  """A list of edges."""
  edges: [Shopify_LineItemMutableEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one LineItemMutable and a cursor during pagination.
"""
type Shopify_LineItemMutableEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of LineItemMutableEdge."""
  node: Shopify_LineItemMutable!
}

"""Represents a single line item on an order."""
type Shopify_LineItemMutable {
  """Whether the line item can be restocked."""
  canRestock: Boolean! @deprecated(reason: "Use `restockable` instead")

  """A list of additional information about the line item."""
  customAttributes: [Shopify_Attribute!]!

  """
  The discounts that have been allocated onto the line item by discount applications.
  """
  discountAllocations: [Shopify_DiscountAllocation!]!

  """The total line price after discounts are applied, in shop currency."""
  discountedTotal: Money! @deprecated(reason: "Use `discountedTotalSet` instead")

  """
  The total line price after discounts are applied, in shop and presentment currencies.
  """
  discountedTotalSet: Shopify_MoneyBag!

  """
  The approximate split price of a line item unit, in shop currency. This value doesn't include discounts applied to the entire order.
  """
  discountedUnitPrice: Money! @deprecated(reason: "Use `discountedUnitPriceSet` instead")

  """
  The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order.
  """
  discountedUnitPriceSet: Shopify_MoneyBag!

  """The total number of units to fulfill."""
  fulfillableQuantity: Int!

  """
  The service provider that fulfills the line item.
  
  Deleted fulfillment services will return null.
  """
  fulfillmentService: Shopify_FulfillmentService

  """
  The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
  'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
  """
  fulfillmentStatus: String!

  """A globally-unique identifier."""
  id: ID!

  """The image associated to the line item's variant."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """
    Crops the image according to the specified region. This argument is deprecated: Use `crop` on `Image.transformedSrc` instead.
    """
    crop: Shopify_CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3. This argument is deprecated: Use `scale` on `Image.transformedSrc` instead.
    """
    scale: Int = 1
  ): Shopify_Image

  """Whether the line item can be edited or not."""
  merchantEditable: Boolean!

  """The name of the product."""
  name: String!

  """
  The total number of units that can't be fulfilled. For example, if items have been refunded, or the item is not something that can be fulfilled, like a tip.
  """
  nonFulfillableQuantity: Int!

  """
  The total price without any discounts applied, in shop currency. ""This value is based on the unit price of the variant x quantity.
  """
  originalTotal: Money! @deprecated(reason: "Use `originalTotalSet` instead")

  """
  The total price in shop and presentment currencies, without discounts applied. This value is based on the unit price of the variant x quantity.
  """
  originalTotalSet: Shopify_MoneyBag!

  """The variant unit price without discounts applied, in shop currency."""
  originalUnitPrice: Money! @deprecated(reason: "Use `originalUnitPriceSet` instead")

  """
  The variant unit price without discounts applied, in shop and presentment currencies.
  """
  originalUnitPriceSet: Shopify_MoneyBag!

  """The Product object associated with this line item's variant."""
  product: Shopify_Product

  """The number of variant units ordered."""
  quantity: Int!

  """The line item's quantity, minus the removed quantity."""
  refundableQuantity: Int!

  """Whether physical shipping is required for the variant."""
  requiresShipping: Boolean!

  """Whether the line item can be restocked."""
  restockable: Boolean!

  """The variant SKU number."""
  sku: String

  """The TaxLine object connected to this line item."""
  taxLines(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_TaxLine!]!

  """Whether the variant is taxable."""
  taxable: Boolean!

  """The title of the product."""
  title: String!

  """The sum of all AppliedDiscounts on this line item, in shop currency."""
  totalDiscount: Money! @deprecated(reason: "Use `totalDiscountSet` instead")

  """
  The sum of all AppliedDiscounts on this line item in shop and presentment currencies.
  """
  totalDiscountSet: Shopify_MoneyBag!

  """The total discounted value of unfulfilled units, in shop currency."""
  unfulfilledDiscountedTotal: Money! @deprecated(reason: "Use `unfulfilledDiscountedTotalSet` instead")

  """
  The total discounted value of unfulfilled units, in shop and presentment currencies.
  """
  unfulfilledDiscountedTotalSet: Shopify_MoneyBag!

  """
  The total price without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop currency.
  """
  unfulfilledOriginalTotal: Money! @deprecated(reason: "Use `unfulfilledOriginalTotalSet` instead")

  """
  The total price without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop and presentment currencies.
  """
  unfulfilledOriginalTotalSet: Shopify_MoneyBag!

  """The number of units not yet fulfilled."""
  unfulfilledQuantity: Int!

  """The Variant object associated with this line item."""
  variant: Shopify_ProductVariant

  """The name of the variant."""
  variantTitle: String

  """The name of the vendor who made the variant."""
  vendor: String
}

"""
An auto-generated type for paginating through multiple LocalizationExtensions.
"""
type Shopify_LocalizationExtensionConnection {
  """A list of edges."""
  edges: [Shopify_LocalizationExtensionEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one LocalizationExtension and a cursor during pagination.
"""
type Shopify_LocalizationExtensionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of LocalizationExtensionEdge."""
  node: Shopify_LocalizationExtension!
}

"""
Represents the value captured by a localization extension. Localization extensions are additional fields required by certain countries on international orders. For example, some countries require additional fields for customs information or tax identification numbers.
"""
type Shopify_LocalizationExtension {
  """Country ISO 3166-1 alpha-2 code."""
  countryCode: Shopify_CountryCode!

  """The localized extension keys that are allowed."""
  key: Shopify_LocalizationExtensionKey!

  """The purpose of this localization extension."""
  purpose: Shopify_LocalizationExtensionPurpose!

  """The localized extension title."""
  title: String!

  """The value of the field."""
  value: String!
}

enum Shopify_LocalizationExtensionKey {
  TAX_CREDENTIAL_BR
  SHIPPING_CREDENTIAL_BR
  SHIPPING_CREDENTIAL_CN
  TAX_CREDENTIAL_IT
  TAX_EMAIL_IT
  SHIPPING_CREDENTIAL_KR
}

enum Shopify_LocalizationExtensionPurpose {
  SHIPPING
  TAX
}

"""
The payment collection details for an order that requires additional payment following an edit to the order.
"""
type Shopify_OrderPaymentCollectionDetails {
  """The URL to use for collecting an additional payment on the order."""
  additionalPaymentCollectionUrl: Url
}

"""Represents the payment terms for an order or draft order."""
type Shopify_PaymentTerms {
  """
  Duration of payment terms in days based on the payment terms template used to create the payment terms.
  """
  dueInDays: Int

  """A globally-unique identifier."""
  id: ID!

  """Whether the payment terms have overdue payment schedules."""
  overdue: Boolean!

  """List of schedules for the payment terms."""
  paymentSchedules(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PaymentScheduleConnection!

  """
  The name of the payment terms template used to create the payment terms.
  """
  paymentTermsName: String!

  """The type of a payment terms template used to create the payment terms."""
  paymentTermsType: Shopify_PaymentTermsType!

  """The translated payment terms name."""
  translatedName: String!
}

"""
An auto-generated type for paginating through multiple PaymentSchedules.
"""
type Shopify_PaymentScheduleConnection {
  """A list of edges."""
  edges: [Shopify_PaymentScheduleEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one PaymentSchedule and a cursor during pagination.
"""
type Shopify_PaymentScheduleEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of PaymentScheduleEdge."""
  node: Shopify_PaymentSchedule!
}

"""
Represents the payment schedule for a single payment defined in the payment terms.
"""
type Shopify_PaymentSchedule {
  """Amount owed for this payment schedule."""
  amount: Shopify_MoneyV2!

  """Date and time when the payment schedule is paid or fulfilled."""
  completedAt: DateTime

  """Date and time when the payment schedule is due."""
  dueAt: DateTime

  """A globally-unique identifier."""
  id: ID!

  """Date and time when the invoice is sent."""
  issuedAt: DateTime
}

enum Shopify_PaymentTermsType {
  RECEIPT
  NET
  FIXED
  UNKNOWN
}

"""
The record of the line items and transactions that were refunded to a customer, along with restocking instructions for refunded line items.
"""
type Shopify_Refund {
  """The date and time when the refund was created."""
  createdAt: DateTime

  """A list of the refunded duties as part of this refund."""
  duties: [Shopify_RefundDuty]

  """A globally-unique identifier."""
  id: ID!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The optional note associated with the refund."""
  note: String

  """The order associated with the refund."""
  order: Shopify_Order!

  """The `RefundLineItem` resources attached to the refund."""
  refundLineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_RefundLineItemConnection!

  """The total amount across all transactions for the refund."""
  totalRefunded: Shopify_MoneyV2! @deprecated(reason: "Use `totalRefundedSet` instead")

  """
  The total amount across all transactions for the refund, in shop and presentment currencies.
  """
  totalRefundedSet: Shopify_MoneyBag!

  """The transactions associated with the refund."""
  transactions(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_OrderTransactionConnection!

  """The date and time when the refund was updated."""
  updatedAt: DateTime!
}

"""Represents a refunded duty."""
type Shopify_RefundDuty {
  """The amount of a refunded duty in shop and presentment currencies."""
  amountSet: Shopify_MoneyBag!

  """The duty associated with this refunded duty."""
  originalDuty: Shopify_Duty
}

"""
An auto-generated type for paginating through multiple RefundLineItems.
"""
type Shopify_RefundLineItemConnection {
  """A list of edges."""
  edges: [Shopify_RefundLineItemEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one RefundLineItem and a cursor during pagination.
"""
type Shopify_RefundLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of RefundLineItemEdge."""
  node: Shopify_RefundLineItem!
}

"""A line item that's included in a refund."""
type Shopify_RefundLineItem {
  """The `LineItem` resource associated to the refunded line item."""
  lineItem: Shopify_LineItem!

  """The inventory restock location."""
  location: Shopify_Location

  """The price of a refunded line item."""
  price: Money! @deprecated(reason: "Use `priceSet` instead")

  """The price of a refunded line item in shop and presentment currencies."""
  priceSet: Shopify_MoneyBag!

  """The quantity of a refunded line item."""
  quantity: Int!

  """The type of restock for the refunded line item."""
  restockType: Shopify_RefundLineItemRestockType!

  """
  Whether the refunded line item was restocked. Not applicable in the context of a SuggestedRefund.
  """
  restocked: Boolean!

  """The subtotal price of a refunded line item."""
  subtotal: Money! @deprecated(reason: "Use `subtotalSet` instead")

  """
  The subtotal price of a refunded line item in shop and presentment currencies.
  """
  subtotalSet: Shopify_MoneyBag!

  """The total tax charged on a refunded line item."""
  totalTax: Money! @deprecated(reason: "Use `totalTaxSet` instead")

  """
  The total tax charged on a refunded line item in shop and presentment currencies.
  """
  totalTaxSet: Shopify_MoneyBag!
}

enum Shopify_RefundLineItemRestockType {
  RETURN
  CANCEL
  LEGACY_RESTOCK
  NO_RESTOCK
}

"""
An auto-generated type for paginating through multiple OrderTransactions.
"""
type Shopify_OrderTransactionConnection {
  """A list of edges."""
  edges: [Shopify_OrderTransactionEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one OrderTransaction and a cursor during pagination.
"""
type Shopify_OrderTransactionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of OrderTransactionEdge."""
  node: Shopify_OrderTransaction!
}

"""A payment transaction in the context of an order."""
type Shopify_OrderTransaction {
  """The masked account number associated with the payment method."""
  accountNumber: String

  """The amount of money."""
  amount: Money! @deprecated(reason: "Use `amountSet` instead")

  """
  The amount and currency of the transaction in shop and presentment currencies.
  """
  amountSet: Shopify_MoneyBag!

  """The amount and currency of the transaction."""
  amountV2: Shopify_MoneyV2! @deprecated(reason: "Use `amountSet` instead")

  """Authorization code associated with the transaction."""
  authorizationCode: String

  """
  The time when the authorization expires. This field is available only to stores on a Shopify Plus plan and is populated only for Shopify Payments authorizations.
  """
  authorizationExpiresAt: DateTime

  """Date and time when the transaction was created."""
  createdAt: DateTime!

  """A standardized error code, independent of the payment provider."""
  errorCode: Shopify_OrderTransactionErrorCode

  """
  The transaction fees charged on the order transaction. Only present for Shopify Payments transactions.
  """
  fees: [Shopify_TransactionFee!]!

  """
  The human-readable payment gateway name used to process the transaction.
  """
  formattedGateway: String

  """The payment gateway used to process the transaction."""
  gateway: String

  """A globally-unique identifier."""
  id: ID!

  """The kind of transaction."""
  kind: Shopify_OrderTransactionKind!

  """Whether the transaction can be manually captured."""
  manuallyCapturable: Boolean!

  """
  Specifies the available amount to refund on the gateway.
  This value is only available for transactions of type `SuggestedRefund`.
  """
  maximumRefundable: Money @deprecated(reason: "Use `maximumRefundableV2` instead")

  """
  Specifies the available amount with currency to refund on the gateway.
  This value is only available for transactions of type `SuggestedRefund`.
  """
  maximumRefundableV2: Shopify_MoneyV2

  """The associated order."""
  order: Shopify_Order

  """
  The associated parent transaction, for example the authorization of a capture.
  """
  parentTransaction: Shopify_OrderTransaction

  """The payment icon to display for the transaction."""
  paymentIcon(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """
    Crops the image according to the specified region. This argument is deprecated: Use `crop` on `Image.transformedSrc` instead.
    """
    crop: Shopify_CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3. This argument is deprecated: Use `scale` on `Image.transformedSrc` instead.
    """
    scale: Int = 1
  ): Shopify_Image

  """
  The payment method used for the transaction. This value is `null` if the payment method is unknown.
  """
  paymentMethod: Shopify_PaymentMethods @deprecated(reason: "Use `paymentIcon` instead")

  """Date and time when the transaction was processed."""
  processedAt: DateTime

  """
  The transaction receipt that the payment gateway attaches to the transaction.
  The value of this field depends on which payment gateway processed the transaction.
  """
  receipt: String @deprecated(reason: "Use `receiptJson` instead")

  """The settlement currency."""
  settlementCurrency: Shopify_CurrencyCode

  """
  The rate used when converting the transaction amount to settlement currency.
  """
  settlementCurrencyRate: Decimal

  """
  Contains all Shopify Payments information related to an order transaction. This field is available only to stores on a Shopify Plus plan.
  """
  shopifyPaymentsSet: Shopify_ShopifyPaymentsTransactionSet

  """The status of this transaction."""
  status: Shopify_OrderTransactionStatus!

  """Whether the transaction is a test transaction."""
  test: Boolean!

  """
  Specifies the available amount to capture on the gateway.
  Only available when an amount is capturable or manually mark as paid.
  """
  totalUnsettled: Money @deprecated(reason: "Use `totalUnsettledSet` instead")

  """
  Specifies the available amount with currency to capture on the gateway in shop and presentment currencies.
  Only available when an amount is capturable or manually mark as paid.
  """
  totalUnsettledSet: Shopify_MoneyBag

  """
  Specifies the available amount with currency to capture on the gateway.
  Only available when an amount is capturable or manually mark as paid.
  """
  totalUnsettledV2: Shopify_MoneyV2 @deprecated(reason: "Use `totalUnsettledSet` instead")
}

enum Shopify_OrderTransactionErrorCode {
  INCORRECT_NUMBER
  INVALID_NUMBER
  INVALID_EXPIRY_DATE
  INVALID_CVC
  EXPIRED_CARD
  INCORRECT_CVC
  INCORRECT_ZIP
  INCORRECT_ADDRESS
  INCORRECT_PIN
  CARD_DECLINED
  PROCESSING_ERROR
  CALL_ISSUER
  PICK_UP_CARD
  CONFIG_ERROR
  TEST_MODE_LIVE_CARD
  UNSUPPORTED_FEATURE
  GENERIC_ERROR
  INVALID_COUNTRY
  INVALID_AMOUNT
  PAYMENT_METHOD_UNAVAILABLE
  AMAZON_PAYMENTS_INVALID_PAYMENT_METHOD
  AMAZON_PAYMENTS_MAX_AMOUNT_CHARGED
  AMAZON_PAYMENTS_MAX_AMOUNT_REFUNDED
  AMAZON_PAYMENTS_MAX_AUTHORIZATIONS_CAPTURED
  AMAZON_PAYMENTS_MAX_REFUNDS_PROCESSED
  AMAZON_PAYMENTS_ORDER_REFERENCE_CANCELED
  AMAZON_PAYMENTS_STALE
}

"""Transaction fee related to an order transaction."""
type Shopify_TransactionFee {
  """Amount of the fee."""
  amount: Shopify_MoneyV2!

  """Flat rate charge for a transaction."""
  flatFee: Shopify_MoneyV2!

  """Name of the credit card flat fee."""
  flatFeeName: String

  """A globally-unique identifier."""
  id: ID!

  """Percentage charge."""
  rate: Decimal!

  """Name of the credit card rate."""
  rateName: String

  """Tax amount charged on the fee."""
  taxAmount: Shopify_MoneyV2!

  """Name of the type of fee."""
  type: String!
}

enum Shopify_OrderTransactionKind {
  SALE
  CAPTURE
  AUTHORIZATION
  VOID
  REFUND
  CHANGE
  EMV_AUTHORIZATION
  SUGGESTED_REFUND
}

enum Shopify_PaymentMethods {
  VISA
  MASTERCARD
  DISCOVER
  AMERICAN_EXPRESS
  DINERS_CLUB
  JCB
  UNIONPAY
  ELO
  DANKORT
  MAESTRO
  FORBRUGSFORENINGEN
  PAYPAL
  BOGUS
  BITCOIN
  LITECOIN
  DOGECOIN
  INTERAC
}

"""
Presents all Shopify Payments specific information related to an order transaction.
"""
type Shopify_ShopifyPaymentsTransactionSet {
  """Contains all fields related to an extended authorization."""
  extendedAuthorizationSet: Shopify_ShopifyPaymentsExtendedAuthorization

  """Contains all fields related to a refund."""
  refundSet: Shopify_ShopifyPaymentsRefundSet
}

"""
Presents all Shopify Payments information related to an extended authorization.
"""
type Shopify_ShopifyPaymentsExtendedAuthorization {
  """
  The time after which the extended authorization expires. After the expiry, the merchant is unable to capture the payment.
  """
  extendedAuthorizationExpiresAt: DateTime!

  """The time after which capture will incur an additional fee."""
  standardAuthorizationExpiresAt: DateTime!
}

"""
Presents all Shopify Payments specific information related to an order refund.
"""
type Shopify_ShopifyPaymentsRefundSet {
  """
  The acquirer reference number (ARN) code generated for Visa/Mastercard transactions.
  """
  acquirerReferenceNumber: String
}

enum Shopify_OrderTransactionStatus {
  SUCCESS
  FAILURE
  PENDING
  ERROR
  AWAITING_RESPONSE
  UNKNOWN
}

enum Shopify_OrderRiskLevel {
  LOW
  MEDIUM
  HIGH
}

"""Represents a fraud check on an order."""
type Shopify_OrderRisk {
  """
  Whether the risk level is shown in the Shopify admin. If false, then this order risk is ignored when Shopify determines the overall risk level for the order.
  """
  display: Boolean!

  """
  The likelihood that an order is fraudulent, based on this order risk.
  
  The level can be set by Shopify risk analysis or by an app.
  """
  level: Shopify_OrderRiskLevel

  """The risk message that's shown to the merchant in the Shopify admin."""
  message: String
}

"""
Represents the shipping details that the customer chose for their order.
"""
type Shopify_ShippingLine {
  """
  A reference to the carrier service that provided the rate.
  Present when the rate was computed by a third-party carrier service.
  """
  carrierIdentifier: String

  """A reference to the shipping method."""
  code: String

  """Whether the shipping line is custom or not."""
  custom: Boolean!

  """The general classification of the delivery method."""
  deliveryCategory: String

  """The discounts that have been allocated to the shipping line."""
  discountAllocations: [Shopify_DiscountAllocation!]!

  """The pre-tax shipping price with discounts applied."""
  discountedPrice: Shopify_MoneyV2! @deprecated(reason: "Use `discountedPriceSet` instead")

  """The pre-tax shipping price with discounts applied."""
  discountedPriceSet: Shopify_MoneyBag!

  """A globally-unique identifier."""
  id: ID

  """The pre-tax shipping price without any discounts applied."""
  originalPrice: Shopify_MoneyV2! @deprecated(reason: "Use `originalPriceSet` instead")

  """The pre-tax shipping price without any discounts applied."""
  originalPriceSet: Shopify_MoneyBag!

  """The phone number at the shipping address."""
  phone: String

  """Returns the price of the shipping line."""
  price: Money! @deprecated(reason: "Use `originalPriceSet` instead")

  """
  The fulfillment service requested for the shipping method.
  Present if the shipping method requires processing by a third party fulfillment service.
  """
  requestedFulfillmentService: Shopify_FulfillmentService

  """
  A unique identifier for the shipping rate. The format can change without notice and is not meant to be shown to users.
  """
  shippingRateHandle: String

  """Returns the rate source for the shipping line."""
  source: String

  """The TaxLine objects connected to this shipping line."""
  taxLines: [Shopify_TaxLine!]!

  """Returns the title of the shipping line."""
  title: String!
}

"""An auto-generated type for paginating through multiple ShippingLines."""
type Shopify_ShippingLineConnection {
  """A list of edges."""
  edges: [Shopify_ShippingLineEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ShippingLine and a cursor during pagination.
"""
type Shopify_ShippingLineEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ShippingLineEdge."""
  node: Shopify_ShippingLine!
}

"""
Represents a refund suggested by Shopify based on the items being reimbursed. You can then use the suggested refund object to generate an actual refund.
"""
type Shopify_SuggestedRefund {
  """The total monetary value to be refunded."""
  amount: Money! @deprecated(reason: "Use `amountSet` instead")

  """
  The total monetary value to be refunded in shop and presentment currencies.
  """
  amountSet: Shopify_MoneyBag!

  """The sum of all the discounted prices of the line items being refunded."""
  discountedSubtotalSet: Shopify_MoneyBag!

  """The total monetary value available to refund."""
  maximumRefundable: Money! @deprecated(reason: "Use `maximumRefundableSet` instead")

  """
  The total monetary value available to refund in shop and presentment currencies.
  """
  maximumRefundableSet: Shopify_MoneyBag!

  """A list of duties to be refunded from the order."""
  refundDuties: [Shopify_RefundDuty!]!

  """A list of line items to be refunded, along with restock instructions."""
  refundLineItems: [Shopify_RefundLineItem!]!

  """The shipping costs to be refunded from the order."""
  shipping: Shopify_ShippingRefund!

  """The sum of all the prices of the line items being refunded."""
  subtotal: Money! @deprecated(reason: "Use `subtotalSet` instead")

  """
  The sum of all the prices of the line items being refunded in shop and presentment currencies.
  """
  subtotalSet: Shopify_MoneyBag!

  """A list of suggested order transactions."""
  suggestedTransactions: [Shopify_SuggestedOrderTransaction!]!

  """
  The total cart discount amount that was applied to all line items in this refund.
  """
  totalCartDiscountAmountSet: Shopify_MoneyBag!

  """
  The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive.
  """
  totalDutiesSet: Shopify_MoneyBag!

  """
  The sum of the taxes being refunded from the order in shop and presentment currencies. The value must be positive.
  """
  totalTaxSet: Shopify_MoneyBag!

  """
  The sum of the taxes being refunded from the order. The value must be positive.
  """
  totalTaxes: Money! @deprecated(reason: "Use `totalTaxSet` instead")
}

"""Represents the shipping costs refunded on the Refund."""
type Shopify_ShippingRefund {
  """The monetary value of the shipping fees to be refunded."""
  amount: Money! @deprecated(reason: "Use `amountSet` instead")

  """
  The monetary value of the shipping fees to be refunded in shop and presentment currencies.
  """
  amountSet: Shopify_MoneyBag!

  """The maximum amount of shipping fees currently refundable."""
  maximumRefundable: Money! @deprecated(reason: "Use `maximumRefundableSet` instead")

  """
  The maximum amount of shipping fees currently refundable in shop and presentment currencies.
  """
  maximumRefundableSet: Shopify_MoneyBag!

  """
  The monetary value of the tax allocated to shipping fees to be refunded.
  """
  tax: Money! @deprecated(reason: "Use `taxSet` instead")

  """
  The monetary value of the tax allocated to shipping fees to be refunded in shop and presentment currencies.
  """
  taxSet: Shopify_MoneyBag!
}

"""
A suggested transaction. Suggested transaction are usually used in the context of refunds
and exchanges.
"""
type Shopify_SuggestedOrderTransaction {
  """The masked account number associated with the payment method."""
  accountNumber: String

  """The amount of the transaction."""
  amount: Money! @deprecated(reason: "Use `amountSet` instead")

  """
  The amount and currency of the suggested order transaction in shop and presentment currencies.
  """
  amountSet: Shopify_MoneyBag!

  """
  The human-readable payment gateway name suggested to process the transaction.
  """
  formattedGateway: String

  """The suggested payment gateway used to process the transaction."""
  gateway: String

  """Specifies the kind of the suggested order transaction."""
  kind: Shopify_SuggestedOrderTransactionKind!

  """
  Specifies the available amount to refund on the gateway. Only available within SuggestedRefund.
  """
  maximumRefundable: Money @deprecated(reason: "Use `maximumRefundableSet` instead")

  """
  Specifies the available amount to refund on the gateway in shop and presentment currencies. Only available within SuggestedRefund.
  """
  maximumRefundableSet: Shopify_MoneyBag

  """
  The associated parent transaction, for example the authorization of a capture.
  """
  parentTransaction: Shopify_OrderTransaction
}

enum Shopify_SuggestedOrderTransactionKind {
  SUGGESTED_REFUND
}

"""The fields required to reimburse line items on a refund."""
input Shopify_RefundLineItemInput {
  """The ID of the line item in the refund."""
  lineItemId: ID!

  """The quantity of the associated line item to be refunded."""
  quantity: Int!

  """The type of restock for this line item."""
  restockType: Shopify_RefundLineItemRestockType

  """
  The intended location for restocking. If the `restockType` is set to `NO_RESTOCK`, then this value is empty.`
  """
  locationId: ID
}

"""The fields required to reimburse duties on a refund."""
input Shopify_RefundDutyInput {
  """The ID of the duty in the refund."""
  dutyId: ID!

  """The type of refund for this duty."""
  refundType: Shopify_RefundDutyRefundType
}

enum Shopify_RefundDutyRefundType {
  PROPORTIONAL
  FULL
}

enum Shopify_CustomerMarketingOptInLevel {
  SINGLE_OPT_IN
  CONFIRMED_OPT_IN
  UNKNOWN
}

enum Shopify_OrderSortKeys {
  CREATED_AT
  CUSTOMER_NAME
  FINANCIAL_STATUS
  FULFILLMENT_STATUS
  ORDER_NUMBER
  PROCESSED_AT
  TOTAL_PRICE
  UPDATED_AT
  ID
  RELEVANCE
}

"""
An auto-generated type for paginating through multiple CustomerPaymentMethods.
"""
type Shopify_CustomerPaymentMethodConnection {
  """A list of edges."""
  edges: [Shopify_CustomerPaymentMethodEdge!]!

  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one CustomerPaymentMethod and a cursor during pagination.
"""
type Shopify_CustomerPaymentMethodEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CustomerPaymentMethodEdge."""
  node: Shopify_CustomerPaymentMethod!
}

enum Shopify_CustomerProductSubscriberStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  FAILED
  NEVER_SUBSCRIBED
  PAUSED
}

"""
The record of when a customer consented to receive marketing material by SMS.

The customer's consent state reflects the record with the most recent date when consent was updated.
"""
type Shopify_CustomerSmsMarketingConsentState {
  """
  The source from which the SMS marketing information for the customer was collected.
  """
  consentCollectedFrom: Shopify_CustomerConsentCollectedFrom

  """
  The date and time when the customer consented to receive marketing material by SMS.
  If no date is provided, then the date and time when the consent information was sent is used.
  """
  consentUpdatedAt: DateTime

  """
  The marketing subscription opt-in level that was set when the customer consented to receive marketing information.
  """
  marketingOptInLevel: Shopify_CustomerMarketingOptInLevel!

  """The current SMS marketing state for the customer."""
  marketingState: Shopify_CustomerSmsMarketingState!
}

enum Shopify_CustomerConsentCollectedFrom {
  SHOPIFY
  OTHER
}

enum Shopify_CustomerSmsMarketingState {
  NOT_SUBSCRIBED
  PENDING
  SUBSCRIBED
  UNSUBSCRIBED
  REDACTED
}

enum Shopify_CustomerState {
  DECLINED
  DISABLED
  ENABLED
  INVITED
}

enum Shopify_TaxExemption {
  CA_STATUS_CARD_EXEMPTION
  CA_BC_RESELLER_EXEMPTION
  CA_MB_RESELLER_EXEMPTION
  CA_SK_RESELLER_EXEMPTION
  CA_DIPLOMAT_EXEMPTION
  CA_BC_COMMERCIAL_FISHERY_EXEMPTION
  CA_MB_COMMERCIAL_FISHERY_EXEMPTION
  CA_NS_COMMERCIAL_FISHERY_EXEMPTION
  CA_PE_COMMERCIAL_FISHERY_EXEMPTION
  CA_SK_COMMERCIAL_FISHERY_EXEMPTION
  CA_BC_PRODUCTION_AND_MACHINERY_EXEMPTION
  CA_SK_PRODUCTION_AND_MACHINERY_EXEMPTION
  CA_BC_SUB_CONTRACTOR_EXEMPTION
  CA_SK_SUB_CONTRACTOR_EXEMPTION
  CA_BC_CONTRACTOR_EXEMPTION
  CA_SK_CONTRACTOR_EXEMPTION
  CA_ON_PURCHASE_EXEMPTION
  CA_MB_FARMER_EXEMPTION
  CA_NS_FARMER_EXEMPTION
  CA_SK_FARMER_EXEMPTION
}

type Stripe_Customer {
  address: Stripe_Address

  """
  Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized.
  """
  balance: Int

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes.
  """
  currency: String
  default_source: Stripe_CustomerDefaultSourceProperty

  """
  When the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed. When the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.
  
  If an invoice is marked uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't get reset to `false`.
  """
  delinquent: Boolean

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  discount: Stripe_Discount

  """The customer's email address."""
  email: String

  """Unique identifier for the object."""
  id: String

  """The prefix for the customer used to generate unique invoice numbers."""
  invoice_prefix: String
  invoice_settings: Stripe_InvoiceSettingCustomerSetting

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """The customer's full name or business name."""
  name: String

  """The suffix of the customer's next invoice number, e.g., 0001."""
  next_invoice_sequence: Int

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_CustomerObjectProperty

  """The customer's phone number."""
  phone: String

  """The customer's preferred locales (languages), ordered by preference."""
  preferred_locales: [String]
  shipping: Stripe_Shipping

  """The customer's payment sources, if any."""
  sources: Stripe_CustomerSourcesProperty

  """The customer's current subscriptions, if any."""
  subscriptions: Stripe_CustomerSubscriptionsProperty
  tax: Stripe_CustomerTax

  """
  Describes the customer's tax exemption status. One of `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the text **"Reverse charge"**.
  """
  tax_exempt: Stripe_CustomerTaxExemptProperty

  """The customer's tax IDs."""
  tax_ids: Stripe_CustomerTaxIdsProperty
  test_clock: Stripe_CustomerTestClockProperty
}

type Stripe_Address {
  """City, district, suburb, town, or village."""
  city: String

  """
  Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  """
  country: String

  """Address line 1 (e.g., street, PO Box, or company name)."""
  line1: String

  """Address line 2 (e.g., apartment, suite, unit, or building)."""
  line2: String

  """ZIP or postal code."""
  postal_code: String

  """State, county, province, or region."""
  state: String
}

union Stripe_CustomerDefaultSourceProperty = WrappedString | Stripe_AlipayAccount | Stripe_BankAccount | Stripe_BitcoinReceiver | Stripe_Card | Stripe_Source

type Stripe_AlipayAccount {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  customer: String

  """
  Uniquely identifies the account and will be the same across all Alipay account objects that are linked to the same Alipay account.
  """
  fingerprint: String

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_AlipayAccountObjectProperty

  """
  If the Alipay account object is not reusable, the exact amount that you can create a charge for.
  """
  payment_amount: Int

  """
  If the Alipay account object is not reusable, the exact currency that you can create a charge for.
  """
  payment_currency: String

  """
  True if you can create multiple payments using this account. If the account is reusable, then you can freely choose the amount of each payment.
  """
  reusable: Boolean

  """Whether this Alipay account object has ever been used for a payment."""
  used: Boolean

  """The username for the Alipay account."""
  username: String
}

enum Stripe_AlipayAccountObjectProperty {
  alipay_account
}

type Stripe_BankAccount {
  account: Stripe_BankAccountAccountProperty

  """The name of the person or business that owns the bank account."""
  account_holder_name: String

  """
  The type of entity that holds the account. This can be either `individual` or `company`.
  """
  account_holder_type: String

  """
  The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.
  """
  account_type: String

  """
  A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout.
  """
  available_payout_methods: [Stripe_BankAccountAvailablePayoutMethodsProperty]

  """
  Name of the bank associated with the routing number (e.g., `WELLS FARGO`).
  """
  bank_name: String

  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String

  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
  """
  currency: String
  customer: String

  """
  Whether this bank account is the default external account for its currency.
  """
  default_for_currency: Boolean

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Unique identifier for the object."""
  id: String

  """The last four digits of the bank account number."""
  last4: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_BankAccountObjectProperty

  """The routing transit number for the bank account."""
  routing_number: String

  """
  For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isnâ€™t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a transfer sent to this bank account fails, we'll set the status to `errored` and will not continue to send transfers until the bank details are updated.
  
  For external accounts, possible values are `new` and `errored`. Validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
  """
  status: String
}

union Stripe_BankAccountAccountProperty = WrappedString | Stripe_Account

type Stripe_Account {
  business_profile: Stripe_AccountBusinessProfile

  """The business type."""
  business_type: Stripe_AccountBusinessTypeProperty
  capabilities: Stripe_AccountCapabilities

  """Whether the account can create live charges."""
  charges_enabled: Boolean
  company: Stripe_LegalEntityCompany
  controller: Stripe_AccountUnificationAccountController

  """The account's country."""
  country: String

  """
  Time at which the account was connected. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts).
  """
  default_currency: String

  """
  Whether account details have been submitted. Standard accounts cannot receive payouts before this is true.
  """
  details_submitted: Boolean

  """
  An email address associated with the account. You can treat this as metadata: it is not used for authentication or messaging account holders.
  """
  email: String

  """
  External accounts (bank accounts and debit cards) currently attached to this account
  """
  external_accounts: Stripe_AccountExternalAccountsProperty
  future_requirements: Stripe_AccountFutureRequirements

  """Unique identifier for the object."""
  id: String
  individual: Stripe_Person

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_AccountObjectProperty

  """Whether Stripe can send payouts to this account."""
  payouts_enabled: Boolean
  requirements: Stripe_AccountRequirements
  settings: Stripe_AccountSettings
  tos_acceptance: Stripe_AccountTosAcceptance

  """The Stripe account type. Can be `standard`, `express`, or `custom`."""
  type: Stripe_AccountTypeProperty
}

type Stripe_AccountBusinessProfile {
  """
  [The merchant category code for the account](https://stripe.com/docs/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide.
  """
  mcc: String

  """The customer-facing business name."""
  name: String

  """
  Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes.
  """
  product_description: String
  support_address: Stripe_Address

  """A publicly available email address for sending support issues to."""
  support_email: String

  """A publicly available phone number to call with support issues."""
  support_phone: String

  """A publicly available website for handling support issues."""
  support_url: String

  """The business's publicly available website."""
  url: String
}

enum Stripe_AccountBusinessTypeProperty {
  company
  government_entity
  individual
  non_profit
}

type Stripe_AccountCapabilities {
  """
  The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges.
  """
  acss_debit_payments: Stripe_AccountCapabilitiesAcssDebitPaymentsProperty

  """
  The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges.
  """
  afterpay_clearpay_payments: Stripe_AccountCapabilitiesAfterpayClearpayPaymentsProperty

  """
  The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.
  """
  au_becs_debit_payments: Stripe_AccountCapabilitiesAuBecsDebitPaymentsProperty

  """
  The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges.
  """
  bacs_debit_payments: Stripe_AccountCapabilitiesBacsDebitPaymentsProperty

  """
  The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges.
  """
  bancontact_payments: Stripe_AccountCapabilitiesBancontactPaymentsProperty

  """
  The status of the customer_balance payments capability of the account, or whether the account can directly process customer_balance charges.
  """
  bank_transfer_payments: Stripe_AccountCapabilitiesBankTransferPaymentsProperty

  """
  The status of the boleto payments capability of the account, or whether the account can directly process boleto charges.
  """
  boleto_payments: Stripe_AccountCapabilitiesBoletoPaymentsProperty

  """
  The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
  """
  card_issuing: Stripe_AccountCapabilitiesCardIssuingProperty

  """
  The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
  """
  card_payments: Stripe_AccountCapabilitiesCardPaymentsProperty

  """
  The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency.
  """
  cartes_bancaires_payments: Stripe_AccountCapabilitiesCartesBancairesPaymentsProperty

  """
  The status of the EPS payments capability of the account, or whether the account can directly process EPS charges.
  """
  eps_payments: Stripe_AccountCapabilitiesEpsPaymentsProperty

  """
  The status of the FPX payments capability of the account, or whether the account can directly process FPX charges.
  """
  fpx_payments: Stripe_AccountCapabilitiesFpxPaymentsProperty

  """
  The status of the giropay payments capability of the account, or whether the account can directly process giropay charges.
  """
  giropay_payments: Stripe_AccountCapabilitiesGiropayPaymentsProperty

  """
  The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges.
  """
  grabpay_payments: Stripe_AccountCapabilitiesGrabpayPaymentsProperty

  """
  The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges.
  """
  ideal_payments: Stripe_AccountCapabilitiesIdealPaymentsProperty

  """
  The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.
  """
  jcb_payments: Stripe_AccountCapabilitiesJcbPaymentsProperty

  """
  The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges.
  """
  klarna_payments: Stripe_AccountCapabilitiesKlarnaPaymentsProperty

  """
  The status of the konbini payments capability of the account, or whether the account can directly process konbini charges.
  """
  konbini_payments: Stripe_AccountCapabilitiesKonbiniPaymentsProperty

  """The status of the legacy payments capability of the account."""
  legacy_payments: Stripe_AccountCapabilitiesLegacyPaymentsProperty

  """
  The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges.
  """
  oxxo_payments: Stripe_AccountCapabilitiesOxxoPaymentsProperty

  """
  The status of the P24 payments capability of the account, or whether the account can directly process P24 charges.
  """
  p24_payments: Stripe_AccountCapabilitiesP24PaymentsProperty

  """
  The status of the paynow payments capability of the account, or whether the account can directly process paynow charges.
  """
  paynow_payments: Stripe_AccountCapabilitiesPaynowPaymentsProperty

  """
  The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges.
  """
  sepa_debit_payments: Stripe_AccountCapabilitiesSepaDebitPaymentsProperty

  """
  The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges.
  """
  sofort_payments: Stripe_AccountCapabilitiesSofortPaymentsProperty

  """The status of the tax reporting 1099-K (US) capability of the account."""
  tax_reporting_us_1099_k: Stripe_AccountCapabilitiesTaxReportingUs1099KProperty

  """
  The status of the tax reporting 1099-MISC (US) capability of the account.
  """
  tax_reporting_us_1099_misc: Stripe_AccountCapabilitiesTaxReportingUs1099MiscProperty

  """
  The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
  """
  transfers: Stripe_AccountCapabilitiesTransfersProperty

  """
  The status of the US bank account ACH payments capability of the account, or whether the account can directly process US bank account charges.
  """
  us_bank_account_ach_payments: Stripe_AccountCapabilitiesUsBankAccountAchPaymentsProperty
}

enum Stripe_AccountCapabilitiesAcssDebitPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesAfterpayClearpayPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesAuBecsDebitPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesBacsDebitPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesBancontactPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesBankTransferPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesBoletoPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesCardIssuingProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesCardPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesCartesBancairesPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesEpsPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesFpxPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesGiropayPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesGrabpayPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesIdealPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesJcbPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesKlarnaPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesKonbiniPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesLegacyPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesOxxoPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesP24PaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesPaynowPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesSepaDebitPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesSofortPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesTaxReportingUs1099KProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesTaxReportingUs1099MiscProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesTransfersProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesUsBankAccountAchPaymentsProperty {
  active
  inactive
  pending
}

type Stripe_LegalEntityCompany {
  address: Stripe_Address
  address_kana: Stripe_LegalEntityJapanAddress
  address_kanji: Stripe_LegalEntityJapanAddress

  """
  Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided).
  """
  directors_provided: Boolean

  """
  Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided.
  """
  executives_provided: Boolean

  """The company's legal name."""
  name: String

  """The Kana variation of the company's legal name (Japan only)."""
  name_kana: String

  """The Kanji variation of the company's legal name (Japan only)."""
  name_kanji: String

  """
  Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together).
  """
  owners_provided: Boolean
  ownership_declaration: Stripe_LegalEntityUboDeclaration

  """The company's phone number (used for verification)."""
  phone: String

  """
  The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details.
  """
  structure: Stripe_LegalEntityCompanyStructureProperty

  """Whether the company's business ID number was provided."""
  tax_id_provided: Boolean

  """
  The jurisdiction in which the `tax_id` is registered (Germany-based companies only).
  """
  tax_id_registrar: String

  """Whether the company's business VAT number was provided."""
  vat_id_provided: Boolean
  verification: Stripe_LegalEntityCompanyVerification
}

type Stripe_LegalEntityJapanAddress {
  """City/Ward."""
  city: String

  """
  Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  """
  country: String

  """Block/Building number."""
  line1: String

  """Building details."""
  line2: String

  """ZIP or postal code."""
  postal_code: String

  """Prefecture."""
  state: String

  """Town/cho-me."""
  town: String
}

type Stripe_LegalEntityUboDeclaration {
  """
  The Unix timestamp marking when the beneficial owner attestation was made.
  """
  date: Int

  """The IP address from which the beneficial owner attestation was made."""
  ip: String

  """
  The user-agent string from the browser where the beneficial owner attestation was made.
  """
  user_agent: String
}

enum Stripe_LegalEntityCompanyStructureProperty {
  free_zone_establishment
  free_zone_llc
  government_instrumentality
  governmental_unit
  incorporated_non_profit
  limited_liability_partnership
  llc
  multi_member_llc
  private_company
  private_corporation
  private_partnership
  public_company
  public_corporation
  public_partnership
  single_member_llc
  sole_establishment
  sole_proprietorship
  tax_exempt_government_instrumentality
  unincorporated_association
  unincorporated_non_profit
}

type Stripe_LegalEntityCompanyVerification {
  document: Stripe_LegalEntityCompanyVerificationDocument
}

type Stripe_LegalEntityCompanyVerificationDocument {
  back: Stripe_LegalEntityCompanyVerificationDocumentBackProperty

  """
  A user-displayable string describing the verification state of this document.
  """
  details: String

  """
  One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document.
  """
  details_code: String
  front: Stripe_LegalEntityCompanyVerificationDocumentFrontProperty
}

union Stripe_LegalEntityCompanyVerificationDocumentBackProperty = WrappedString | Stripe_File

type Stripe_File {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  The time at which the file expires and is no longer available in epoch seconds.
  """
  expires_at: Int

  """A filename for the file, suitable for saving to a filesystem."""
  filename: String

  """Unique identifier for the object."""
  id: String

  """
  A list of [file links](https://stripe.com/docs/api#file_links) that point at this file.
  """
  links: Stripe_FileLinksProperty

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_FileObjectProperty

  """
  The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.
  """
  purpose: Stripe_FilePurposeProperty

  """The size in bytes of the file object."""
  size: Int

  """A user friendly title for the document."""
  title: String

  """The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`)."""
  type: String

  """
  The URL from which the file can be downloaded using your live secret API key.
  """
  url: String
}

"""
A list of [file links](https://stripe.com/docs/api#file_links) that point at this file.
"""
type Stripe_FileLinksProperty {
  """Details about each object."""
  data: [Stripe_FileLink!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_FileLinksObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

type Stripe_FileLink {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """Whether this link is already expired."""
  expired: Boolean

  """Time at which the link expires."""
  expires_at: Int
  file: Stripe_FileLinkFileProperty

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_FileLinkObjectProperty

  """The publicly accessible URL to download the file."""
  url: String
}

union Stripe_FileLinkFileProperty = WrappedString | Stripe_File

enum Stripe_FileLinkObjectProperty {
  file_link
}

enum Stripe_FileLinksObjectProperty {
  list
}

enum Stripe_FileObjectProperty {
  file
}

enum Stripe_FilePurposeProperty {
  account_requirement
  additional_verification
  business_icon
  business_logo
  customer_signature
  dispute_evidence
  document_provider_identity_document
  finance_report_run
  identity_document
  identity_document_downloadable
  pci_document
  selfie
  sigma_scheduled_query
  tax_document_user_upload
}

union Stripe_LegalEntityCompanyVerificationDocumentFrontProperty = WrappedString | Stripe_File

type Stripe_AccountUnificationAccountController {
  """
  `true` if the Connect application retrieving the resource controls the account and can therefore exercise [platform controls](https://stripe.com/docs/connect/platform-controls-for-standard-accounts). Otherwise, this field is null.
  """
  is_controller: Boolean

  """
  The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself.
  """
  type: Stripe_AccountUnificationAccountControllerTypeProperty
}

enum Stripe_AccountUnificationAccountControllerTypeProperty {
  account
  application
}

"""
External accounts (bank accounts and debit cards) currently attached to this account
"""
type Stripe_AccountExternalAccountsProperty {
  """
  The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards.
  """
  data: [Stripe_AccountExternalAccountsDataProperty!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_AccountExternalAccountsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

union Stripe_AccountExternalAccountsDataProperty = Stripe_BankAccount | Stripe_Card

type Stripe_Card {
  account: Stripe_CardAccountProperty

  """City/District/Suburb/Town/Village."""
  address_city: String

  """Billing address country, if provided when creating card."""
  address_country: String

  """Address line 1 (Street address/PO Box/Company name)."""
  address_line1: String

  """
  If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_line1_check: String

  """Address line 2 (Apartment/Suite/Unit/Building)."""
  address_line2: String

  """State/County/Province/Region."""
  address_state: String

  """ZIP or postal code."""
  address_zip: String

  """
  If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_zip_check: String

  """
  A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout.
  """
  available_payout_methods: [Stripe_CardAvailablePayoutMethodsProperty]

  """
  Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.
  """
  brand: String

  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String

  """
  Three-letter [ISO code for currency](https://stripe.com/docs/payouts). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency.
  """
  currency: String
  customer: String

  """
  If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge).
  """
  cvc_check: String

  """Whether this card is the default external account for its currency."""
  default_for_currency: Boolean

  """
  (For tokenized numbers only.) The last four digits of the device account number.
  """
  dynamic_last4: String

  """Two-digit number representing the card's expiration month."""
  exp_month: Int

  """Four-digit number representing the card's expiration year."""
  exp_year: Int

  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  
  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
  """
  fingerprint: String

  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String

  """Unique identifier for the object."""
  id: String

  """The last four digits of the card."""
  last4: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """Cardholder name."""
  name: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_CardObjectProperty
  recipient: Stripe_CardRecipientProperty

  """
  For external accounts, possible values are `new` and `errored`. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
  """
  status: String

  """
  If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null.
  """
  tokenization_method: String
}

union Stripe_CardAccountProperty = WrappedString | Stripe_Account

enum Stripe_CardAvailablePayoutMethodsProperty {
  instant
  standard
}

enum Stripe_CardObjectProperty {
  card
}

union Stripe_CardRecipientProperty = WrappedString | Stripe_Recipient

type Stripe_Recipient {
  active_account: Stripe_BankAccount

  """"""
  cards: Stripe_RecipientCardsProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  default_card: Stripe_RecipientDefaultCardProperty

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  email: String

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject
  migrated_to: Stripe_RecipientMigratedToProperty

  """Full, legal name of the recipient."""
  name: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_RecipientObjectProperty
  rolled_back_from: Stripe_RecipientRolledBackFromProperty

  """Type of the recipient, one of `individual` or `corporation`."""
  type: String
}

""""""
type Stripe_RecipientCardsProperty {
  data: [Stripe_Card!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_RecipientCardsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

enum Stripe_RecipientCardsObjectProperty {
  list
}

union Stripe_RecipientDefaultCardProperty = WrappedString | Stripe_Card

union Stripe_RecipientMigratedToProperty = WrappedString | Stripe_Account

enum Stripe_RecipientObjectProperty {
  recipient
}

union Stripe_RecipientRolledBackFromProperty = WrappedString | Stripe_Account

enum Stripe_AccountExternalAccountsObjectProperty {
  list
}

type Stripe_AccountFutureRequirements {
  """
  Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
  """
  alternatives: [Stripe_AccountRequirementsAlternative]

  """
  Date on which `future_requirements` merges with the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on its enablement state prior to transitioning.
  """
  current_deadline: Int

  """
  Fields that need to be collected to keep the account enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash.
  """
  currently_due: [String]

  """
  This is typed as a string for consistency with `requirements.disabled_reason`, but it safe to assume `future_requirements.disabled_reason` is empty because fields in `future_requirements` will never disable the account.
  """
  disabled_reason: String

  """
  Fields that are `currently_due` and need to be collected again because validation or verification failed.
  """
  errors: [Stripe_AccountRequirementsError]

  """
  Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well.
  """
  eventually_due: [String]

  """
  Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`.
  """
  past_due: [String]

  """
  Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`.
  """
  pending_verification: [String]
}

type Stripe_AccountRequirementsAlternative {
  """
  Fields that can be provided to satisfy all fields in `original_fields_due`.
  """
  alternative_fields_due: [String]

  """
  Fields that are due and can be satisfied by providing all fields in `alternative_fields_due`.
  """
  original_fields_due: [String]
}

type Stripe_AccountRequirementsError {
  """The code for the type of error."""
  code: Stripe_AccountRequirementsErrorCodeProperty

  """
  An informative message that indicates the error type and provides additional details about the error.
  """
  reason: String

  """
  The specific user onboarding requirement field (in the requirements hash) that needs to be resolved.
  """
  requirement: String
}

enum Stripe_AccountRequirementsErrorCodeProperty {
  invalid_address_city_state_postal_code
  invalid_street_address
  invalid_value_other
  verification_document_address_mismatch
  verification_document_address_missing
  verification_document_corrupt
  verification_document_country_not_supported
  verification_document_dob_mismatch
  verification_document_duplicate_type
  verification_document_expired
  verification_document_failed_copy
  verification_document_failed_greyscale
  verification_document_failed_other
  verification_document_failed_test_mode
  verification_document_fraudulent
  verification_document_id_number_mismatch
  verification_document_id_number_missing
  verification_document_incomplete
  verification_document_invalid
  verification_document_issue_or_expiry_date_missing
  verification_document_manipulated
  verification_document_missing_back
  verification_document_missing_front
  verification_document_name_mismatch
  verification_document_name_missing
  verification_document_nationality_mismatch
  verification_document_not_readable
  verification_document_not_signed
  verification_document_not_uploaded
  verification_document_photo_mismatch
  verification_document_too_large
  verification_document_type_not_supported
  verification_failed_address_match
  verification_failed_business_iec_number
  verification_failed_document_match
  verification_failed_id_number_match
  verification_failed_keyed_identity
  verification_failed_keyed_match
  verification_failed_name_match
  verification_failed_other
  verification_failed_tax_id_match
  verification_failed_tax_id_not_issued
  verification_missing_executives
  verification_missing_owners
  verification_requires_additional_memorandum_of_associations
}

type Stripe_Person {
  """The account the person is associated with."""
  account: String
  address: Stripe_Address
  address_kana: Stripe_LegalEntityJapanAddress
  address_kanji: Stripe_LegalEntityJapanAddress

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  dob: Stripe_LegalEntityDob

  """The person's email address."""
  email: String

  """The person's first name."""
  first_name: String

  """The Kana variation of the person's first name (Japan only)."""
  first_name_kana: String

  """The Kanji variation of the person's first name (Japan only)."""
  first_name_kanji: String

  """A list of alternate names or aliases that the person is known by."""
  full_name_aliases: [String]
  future_requirements: Stripe_PersonFutureRequirements

  """
  The person's gender (International regulations require either "male" or "female").
  """
  gender: String

  """Unique identifier for the object."""
  id: String

  """Whether the person's `id_number` was provided."""
  id_number_provided: Boolean

  """The person's last name."""
  last_name: String

  """The Kana variation of the person's last name (Japan only)."""
  last_name_kana: String

  """The Kanji variation of the person's last name (Japan only)."""
  last_name_kanji: String

  """The person's maiden name."""
  maiden_name: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """The country where the person is a national."""
  nationality: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_PersonObjectProperty

  """The person's phone number."""
  phone: String

  """
  Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction.
  """
  political_exposure: Stripe_PersonPoliticalExposureProperty
  relationship: Stripe_PersonRelationship
  requirements: Stripe_PersonRequirements

  """
  Whether the last four digits of the person's Social Security number have been provided (U.S. only).
  """
  ssn_last_4_provided: Boolean
  verification: Stripe_LegalEntityPersonVerification
}

type Stripe_LegalEntityDob {
  """The day of birth, between 1 and 31."""
  day: Int

  """The month of birth, between 1 and 12."""
  month: Int

  """The four-digit year of birth."""
  year: Int
}

type Stripe_PersonFutureRequirements {
  """
  Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
  """
  alternatives: [Stripe_AccountRequirementsAlternative]

  """
  Fields that need to be collected to keep the person's account enabled. If not collected by the account's `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash, and may immediately become `past_due`, but the account may also be given a grace period depending on the account's enablement state prior to transition.
  """
  currently_due: [String]

  """
  Fields that are `currently_due` and need to be collected again because validation or verification failed.
  """
  errors: [Stripe_AccountRequirementsError]

  """
  Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `future_requirements[current_deadline]` becomes set.
  """
  eventually_due: [String]

  """
  Fields that weren't collected by the account's `requirements.current_deadline`. These fields need to be collected to enable the person's account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`.
  """
  past_due: [String]

  """
  Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`.
  """
  pending_verification: [String]
}

enum Stripe_PersonObjectProperty {
  person
}

enum Stripe_PersonPoliticalExposureProperty {
  existing
  none
}

type Stripe_PersonRelationship {
  """
  Whether the person is a director of the account's legal entity. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations.
  """
  director: Boolean

  """
  Whether the person has significant responsibility to control, manage, or direct the organization.
  """
  executive: Boolean

  """Whether the person is an owner of the accountâ€™s legal entity."""
  owner: Boolean

  """The percent owned by the person of the account's legal entity."""
  percent_ownership: Float

  """
  Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account.
  """
  representative: Boolean

  """The person's title (e.g., CEO, Support Engineer)."""
  title: String
}

type Stripe_PersonRequirements {
  """
  Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
  """
  alternatives: [Stripe_AccountRequirementsAlternative]

  """
  Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
  """
  currently_due: [String]

  """
  Fields that are `currently_due` and need to be collected again because validation or verification failed.
  """
  errors: [Stripe_AccountRequirementsError]

  """
  Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `current_deadline` becomes set.
  """
  eventually_due: [String]

  """
  Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable the person's account.
  """
  past_due: [String]

  """
  Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`.
  """
  pending_verification: [String]
}

type Stripe_LegalEntityPersonVerification {
  additional_document: Stripe_LegalEntityPersonVerificationDocument

  """
  A user-displayable string describing the verification state for the person. For example, this may say "Provided identity information could not be verified".
  """
  details: String

  """
  One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person.
  """
  details_code: String
  document: Stripe_LegalEntityPersonVerificationDocument

  """
  The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`.
  """
  status: String
}

type Stripe_LegalEntityPersonVerificationDocument {
  back: Stripe_LegalEntityPersonVerificationDocumentBackProperty

  """
  A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read".
  """
  details: String

  """
  One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document.
  """
  details_code: String
  front: Stripe_LegalEntityPersonVerificationDocumentFrontProperty
}

union Stripe_LegalEntityPersonVerificationDocumentBackProperty = WrappedString | Stripe_File

union Stripe_LegalEntityPersonVerificationDocumentFrontProperty = WrappedString | Stripe_File

enum Stripe_AccountObjectProperty {
  account
}

type Stripe_AccountRequirements {
  """
  Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
  """
  alternatives: [Stripe_AccountRequirementsAlternative]

  """
  Date by which the fields in `currently_due` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected.
  """
  current_deadline: Int

  """
  Fields that need to be collected to keep the account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
  """
  currently_due: [String]

  """
  If the account is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`.
  """
  disabled_reason: String

  """
  Fields that are `currently_due` and need to be collected again because validation or verification failed.
  """
  errors: [Stripe_AccountRequirementsError]

  """
  Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set.
  """
  eventually_due: [String]

  """
  Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the account.
  """
  past_due: [String]

  """
  Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`.
  """
  pending_verification: [String]
}

type Stripe_AccountSettings {
  bacs_debit_payments: Stripe_AccountBacsDebitPaymentsSettings
  branding: Stripe_AccountBrandingSettings
  card_issuing: Stripe_AccountCardIssuingSettings
  card_payments: Stripe_AccountCardPaymentsSettings
  dashboard: Stripe_AccountDashboardSettings
  payments: Stripe_AccountPaymentsSettings
  payouts: Stripe_AccountPayoutSettings
  sepa_debit_payments: Stripe_AccountSepaDebitPaymentsSettings
}

type Stripe_AccountBacsDebitPaymentsSettings {
  """
  The Bacs Direct Debit Display Name for this account. For payments made with Bacs Direct Debit, this will appear on the mandate, and as the statement descriptor.
  """
  display_name: String
}

type Stripe_AccountBrandingSettings {
  icon: Stripe_AccountBrandingSettingsIconProperty
  logo: Stripe_AccountBrandingSettingsLogoProperty

  """
  A CSS hex color value representing the primary branding color for this account
  """
  primary_color: String

  """
  A CSS hex color value representing the secondary branding color for this account
  """
  secondary_color: String
}

union Stripe_AccountBrandingSettingsIconProperty = WrappedString | Stripe_File

union Stripe_AccountBrandingSettingsLogoProperty = WrappedString | Stripe_File

type Stripe_AccountCardIssuingSettings {
  tos_acceptance: Stripe_CardIssuingAccountTermsOfService
}

type Stripe_CardIssuingAccountTermsOfService {
  """
  The Unix timestamp marking when the account representative accepted the service agreement.
  """
  date: Int

  """
  The IP address from which the account representative accepted the service agreement.
  """
  ip: String

  """
  The user agent of the browser from which the account representative accepted the service agreement.
  """
  user_agent: String
}

type Stripe_AccountCardPaymentsSettings {
  decline_on: Stripe_AccountDeclineChargeOn

  """
  The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion.
  """
  statement_descriptor_prefix: String
}

type Stripe_AccountDeclineChargeOn {
  """
  Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification.
  """
  avs_failure: Boolean

  """
  Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification.
  """
  cvc_failure: Boolean
}

type Stripe_AccountDashboardSettings {
  """
  The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts.
  """
  display_name: String

  """
  The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones).
  """
  timezone: String
}

type Stripe_AccountPaymentsSettings {
  """
  The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge.
  """
  statement_descriptor: String

  """
  The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only)
  """
  statement_descriptor_kana: String

  """
  The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only)
  """
  statement_descriptor_kanji: String
}

type Stripe_AccountPayoutSettings {
  """
  A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See our [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances) documentation for details. Default value is `false` for Custom accounts, otherwise `true`.
  """
  debit_negative_balances: Boolean
  schedule: Stripe_TransferSchedule

  """
  The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard.
  """
  statement_descriptor: String
}

type Stripe_TransferSchedule {
  """
  The number of days charges for the account will be held before being paid out.
  """
  delay_days: Int

  """
  How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`.
  """
  interval: String

  """
  The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months.
  """
  monthly_anchor: Int

  """
  The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly.
  """
  weekly_anchor: String
}

type Stripe_AccountSepaDebitPaymentsSettings {
  """
  SEPA creditor identifier that identifies the company making the payment.
  """
  creditor_id: String
}

type Stripe_AccountTosAcceptance {
  """
  The Unix timestamp marking when the account representative accepted their service agreement
  """
  date: Int

  """
  The IP address from which the account representative accepted their service agreement
  """
  ip: String

  """The user's service agreement type"""
  service_agreement: String

  """
  The user agent of the browser from which the account representative accepted their service agreement
  """
  user_agent: String
}

enum Stripe_AccountTypeProperty {
  custom
  express
  standard
}

enum Stripe_BankAccountAvailablePayoutMethodsProperty {
  instant
  standard
}

enum Stripe_BankAccountObjectProperty {
  bank_account
}

type Stripe_BitcoinReceiver {
  """
  True when this bitcoin receiver has received a non-zero amount of bitcoin.
  """
  active: Boolean

  """The amount of `currency` that you are collecting as payment."""
  amount: Int

  """
  The amount of `currency` to which `bitcoin_amount_received` has been converted.
  """
  amount_received: Int

  """
  The amount of bitcoin that the customer should send to fill the receiver. The `bitcoin_amount` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin.
  """
  bitcoin_amount: Int

  """
  The amount of bitcoin that has been sent by the customer to this receiver.
  """
  bitcoin_amount_received: Int

  """
  This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets).
  """
  bitcoin_uri: String

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which the bitcoin will be converted.
  """
  currency: String

  """The customer ID of the bitcoin receiver."""
  customer: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """
  The customer's email address, set by the API call that creates the receiver.
  """
  email: String

  """
  This flag is initially false and updates to true when the customer sends the `bitcoin_amount` to this receiver.
  """
  filled: Boolean

  """Unique identifier for the object."""
  id: String

  """
  A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver.
  """
  inbound_address: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_BitcoinReceiverObjectProperty

  """
  The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key.
  """
  payment: String

  """The refund address of this bitcoin receiver."""
  refund_address: String

  """
  A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key.
  """
  transactions: Stripe_BitcoinReceiverTransactionsProperty

  """
  This receiver contains uncaptured funds that can be used for a payment or refunded.
  """
  uncaptured_funds: Boolean

  """Indicate if this source is used for payment."""
  used_for_payment: Boolean
}

enum Stripe_BitcoinReceiverObjectProperty {
  bitcoin_receiver
}

"""
A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key.
"""
type Stripe_BitcoinReceiverTransactionsProperty {
  """Details about each object."""
  data: [Stripe_BitcoinTransaction!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_BitcoinReceiverTransactionsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

type Stripe_BitcoinTransaction {
  """
  The amount of `currency` that the transaction was converted to in real-time.
  """
  amount: Int

  """The amount of bitcoin contained in the transaction."""
  bitcoin_amount: Int

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which this transaction was converted.
  """
  currency: String

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_BitcoinTransactionObjectProperty

  """The receiver to which this transaction was sent."""
  receiver: String
}

enum Stripe_BitcoinTransactionObjectProperty {
  bitcoin_transaction
}

enum Stripe_BitcoinReceiverTransactionsObjectProperty {
  list
}

type Stripe_Source {
  ach_credit_transfer: Stripe_SourceTypeAchCreditTransfer
  ach_debit: Stripe_SourceTypeAchDebit
  acss_debit: Stripe_SourceTypeAcssDebit
  alipay: Stripe_SourceTypeAlipay

  """
  A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
  """
  amount: Int
  au_becs_debit: Stripe_SourceTypeAuBecsDebit
  bancontact: Stripe_SourceTypeBancontact
  card: Stripe_SourceTypeCard
  card_present: Stripe_SourceTypeCardPresent

  """
  The client secret of the source. Used for client-side retrieval using a publishable key.
  """
  client_secret: String
  code_verification: Stripe_SourceCodeVerificationFlow

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.
  """
  currency: String

  """
  The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.
  """
  customer: String
  eps: Stripe_SourceTypeEps

  """
  The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.
  """
  flow: String
  giropay: Stripe_SourceTypeGiropay

  """Unique identifier for the object."""
  id: String
  ideal: Stripe_SourceTypeIdeal
  klarna: Stripe_SourceTypeKlarna

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject
  multibanco: Stripe_SourceTypeMultibanco

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_SourceObjectProperty
  owner: Stripe_SourceOwner
  p24: Stripe_SourceTypeP24
  receiver: Stripe_SourceReceiverFlow
  redirect: Stripe_SourceRedirectFlow
  sepa_debit: Stripe_SourceTypeSepaDebit
  sofort: Stripe_SourceTypeSofort
  source_order: Stripe_SourceOrder

  """
  Extra information about a source. This will appear on your customer's statement every time you charge the source.
  """
  statement_descriptor: String

  """
  The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.
  """
  status: String
  three_d_secure: Stripe_SourceTypeThreeDSecure

  """
  The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.
  """
  type: Stripe_SourceTypeProperty

  """
  Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
  """
  usage: String
  wechat: Stripe_SourceTypeWechat
}

type Stripe_SourceTypeAchCreditTransfer {
  account_number: String
  bank_name: String
  fingerprint: String
  refund_account_holder_name: String
  refund_account_holder_type: String
  refund_routing_number: String
  routing_number: String
  swift_code: String
}

type Stripe_SourceTypeAchDebit {
  bank_name: String
  country: String
  fingerprint: String
  last4: String
  routing_number: String
  type: String
}

type Stripe_SourceTypeAcssDebit {
  bank_address_city: String
  bank_address_line_1: String
  bank_address_line_2: String
  bank_address_postal_code: String
  bank_name: String
  category: String
  country: String
  fingerprint: String
  last4: String
  routing_number: String
}

type Stripe_SourceTypeAlipay {
  data_string: String
  native_url: String
  statement_descriptor: String
}

type Stripe_SourceTypeAuBecsDebit {
  bsb_number: String
  fingerprint: String
  last4: String
}

type Stripe_SourceTypeBancontact {
  bank_code: String
  bank_name: String
  bic: String
  iban_last4: String
  preferred_language: String
  statement_descriptor: String
}

type Stripe_SourceTypeCard {
  address_line1_check: String
  address_zip_check: String
  brand: String
  country: String
  cvc_check: String
  dynamic_last4: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  funding: String
  last4: String
  name: String
  three_d_secure: String
  tokenization_method: String
}

type Stripe_SourceTypeCardPresent {
  application_cryptogram: String
  application_preferred_name: String
  authorization_code: String
  authorization_response_code: String
  brand: String
  country: String
  cvm_type: String
  data_type: String
  dedicated_file_name: String
  emv_auth_data: String
  evidence_customer_signature: String
  evidence_transaction_certificate: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  funding: String
  last4: String
  pos_device_id: String
  pos_entry_mode: String
  read_method: String
  reader: String
  terminal_verification_results: String
  transaction_status_information: String
}

type Stripe_SourceCodeVerificationFlow {
  """
  The number of attempts remaining to authenticate the source object with a verification code.
  """
  attempts_remaining: Int

  """
  The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0).
  """
  status: String
}

type Stripe_SourceTypeEps {
  reference: String
  statement_descriptor: String
}

type Stripe_SourceTypeGiropay {
  bank_code: String
  bank_name: String
  bic: String
  statement_descriptor: String
}

type Stripe_SourceTypeIdeal {
  bank: String
  bic: String
  iban_last4: String
  statement_descriptor: String
}

type Stripe_SourceTypeKlarna {
  background_image_url: String
  client_token: String
  first_name: String
  last_name: String
  locale: String
  logo_url: String
  page_title: String
  pay_later_asset_urls_descriptive: String
  pay_later_asset_urls_standard: String
  pay_later_name: String
  pay_later_redirect_url: String
  pay_now_asset_urls_descriptive: String
  pay_now_asset_urls_standard: String
  pay_now_name: String
  pay_now_redirect_url: String
  pay_over_time_asset_urls_descriptive: String
  pay_over_time_asset_urls_standard: String
  pay_over_time_name: String
  pay_over_time_redirect_url: String
  payment_method_categories: String
  purchase_country: String
  purchase_type: String
  redirect_url: String
  shipping_delay: Int
  shipping_first_name: String
  shipping_last_name: String
}

type Stripe_SourceTypeMultibanco {
  entity: String
  reference: String
  refund_account_holder_address_city: String
  refund_account_holder_address_country: String
  refund_account_holder_address_line1: String
  refund_account_holder_address_line2: String
  refund_account_holder_address_postal_code: String
  refund_account_holder_address_state: String
  refund_account_holder_name: String
  refund_iban: String
}

enum Stripe_SourceObjectProperty {
  source
}

type Stripe_SourceOwner {
  address: Stripe_Address

  """Owner's email address."""
  email: String

  """Owner's full name."""
  name: String

  """Owner's phone number (including extension)."""
  phone: String
  verified_address: Stripe_Address

  """
  Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_email: String

  """
  Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String

  """
  Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_phone: String
}

type Stripe_SourceTypeP24 {
  reference: String
}

type Stripe_SourceReceiverFlow {
  """
  The address of the receiver source. This is the value that should be communicated to the customer to send their funds to.
  """
  address: String

  """
  The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency.
  """
  amount_charged: Int

  """
  The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency.
  """
  amount_received: Int

  """
  The total amount that was returned to the customer. The amount returned is expressed in the source's currency.
  """
  amount_returned: Int

  """Type of refund attribute method, one of `email`, `manual`, or `none`."""
  refund_attributes_method: String

  """
  Type of refund attribute status, one of `missing`, `requested`, or `available`.
  """
  refund_attributes_status: String
}

type Stripe_SourceRedirectFlow {
  """
  The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`.
  """
  failure_reason: String

  """
  The URL you provide to redirect the customer to after they authenticated their payment.
  """
  return_url: String

  """
  The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused).
  """
  status: String

  """
  The URL provided to you to redirect a customer to as part of a `redirect` authentication flow.
  """
  url: String
}

type Stripe_SourceTypeSepaDebit {
  bank_code: String
  branch_code: String
  country: String
  fingerprint: String
  last4: String
  mandate_reference: String
  mandate_url: String
}

type Stripe_SourceTypeSofort {
  bank_code: String
  bank_name: String
  bic: String
  country: String
  iban_last4: String
  preferred_language: String
  statement_descriptor: String
}

type Stripe_SourceOrder {
  """
  A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order.
  """
  amount: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """The email address of the customer placing the order."""
  email: String

  """List of items constituting the order."""
  items: [Stripe_SourceOrderItem]
  shipping: Stripe_Shipping
}

type Stripe_SourceOrderItem {
  """The amount (price) for this order item."""
  amount: Int

  """This currency of this order item. Required when `amount` is present."""
  currency: String

  """Human-readable description for this order item."""
  description: String

  """
  The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU).
  """
  parent: String

  """
  The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered.
  """
  quantity: Int

  """The type of this order item. Must be `sku`, `tax`, or `shipping`."""
  type: String
}

type Stripe_Shipping {
  address: Stripe_Address

  """
  The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.
  """
  carrier: String

  """Recipient name."""
  name: String

  """Recipient phone (including extension)."""
  phone: String

  """
  The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
  """
  tracking_number: String
}

type Stripe_SourceTypeThreeDSecure {
  address_line1_check: String
  address_zip_check: String
  authenticated: Boolean
  brand: String
  card: String
  country: String
  customer: String
  cvc_check: String
  dynamic_last4: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  funding: String
  last4: String
  name: String
  three_d_secure: String
  tokenization_method: String
}

enum Stripe_SourceTypeProperty {
  ach_credit_transfer
  ach_debit
  acss_debit
  alipay
  au_becs_debit
  bancontact
  card
  card_present
  eps
  giropay
  ideal
  klarna
  multibanco
  p24
  sepa_debit
  sofort
  three_d_secure
  wechat
}

type Stripe_SourceTypeWechat {
  prepay_id: String
  qr_code_url: String
  statement_descriptor: String
}

type Stripe_Discount {
  """
  The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode.
  """
  checkout_session: String
  coupon: Stripe_Coupon
  customer: String

  """
  If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null.
  """
  end: Int

  """
  The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array.
  """
  id: String

  """
  The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice.
  """
  invoice: String

  """
  The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item.
  """
  invoice_item: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_DiscountObjectProperty
  promotion_code: Stripe_DiscountPromotionCodeProperty

  """Date that the coupon was applied."""
  start: Int

  """
  The subscription that this coupon is applied to, if it is applied to a particular subscription.
  """
  subscription: String
}

type Stripe_Coupon {
  """
  Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
  """
  amount_off: Int
  applies_to: Stripe_CouponAppliesTo

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off.
  """
  currency: String

  """
  One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.
  """
  duration: Stripe_CouponDurationProperty

  """
  If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`.
  """
  duration_in_months: Int

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
  """
  max_redemptions: Int

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  Name of the coupon displayed to customers on for instance invoices or receipts.
  """
  name: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_CouponObjectProperty

  """
  Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a %s100 invoice %s50 instead.
  """
  percent_off: Float

  """Date after which the coupon can no longer be redeemed."""
  redeem_by: Int

  """Number of times this coupon has been applied to a customer."""
  times_redeemed: Int

  """
  Taking account of the above properties, whether this coupon can still be applied to a customer.
  """
  valid: Boolean
}

type Stripe_CouponAppliesTo {
  """A list of product IDs this coupon applies to"""
  products: [String]
}

enum Stripe_CouponDurationProperty {
  forever
  once
  repeating
}

enum Stripe_CouponObjectProperty {
  coupon
}

enum Stripe_DiscountObjectProperty {
  discount
}

union Stripe_DiscountPromotionCodeProperty = WrappedString | Stripe_PromotionCode

type Stripe_PromotionCode {
  """
  Whether the promotion code is currently active. A promotion code is only active if the coupon is also valid.
  """
  active: Boolean

  """
  The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer.
  """
  code: String
  coupon: Stripe_Coupon

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  customer: Stripe_PromotionCodeCustomerProperty

  """Date at which the promotion code can no longer be redeemed."""
  expires_at: Int

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """Maximum number of times this promotion code can be redeemed."""
  max_redemptions: Int

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_PromotionCodeObjectProperty
  restrictions: Stripe_PromotionCodesResourceRestrictions

  """Number of times this promotion code has been used."""
  times_redeemed: Int
}

union Stripe_PromotionCodeCustomerProperty = WrappedString | Stripe_Customer | Stripe_DeletedCustomer

type Stripe_DeletedCustomer {
  """Always true for a deleted object"""
  deleted: Boolean

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_DeletedCustomerObjectProperty
}

enum Stripe_DeletedCustomerObjectProperty {
  customer
}

enum Stripe_PromotionCodeObjectProperty {
  promotion_code
}

type Stripe_PromotionCodesResourceRestrictions {
  """
  A Boolean indicating if the Promotion Code should only be redeemed for Customers without any successful payments or invoices
  """
  first_time_transaction: Boolean

  """
  Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work).
  """
  minimum_amount: Int

  """
  Three-letter [ISO code](https://stripe.com/docs/currencies) for minimum_amount
  """
  minimum_amount_currency: String
}

type Stripe_InvoiceSettingCustomerSetting {
  """Default custom fields to be displayed on invoices for this customer."""
  custom_fields: [Stripe_InvoiceSettingCustomField]
  default_payment_method: Stripe_InvoiceSettingCustomerSettingDefaultPaymentMethodProperty

  """Default footer to be displayed on invoices for this customer."""
  footer: String
}

type Stripe_InvoiceSettingCustomField {
  """The name of the custom field."""
  name: String

  """The value of the custom field."""
  value: String
}

union Stripe_InvoiceSettingCustomerSettingDefaultPaymentMethodProperty = WrappedString | Stripe_PaymentMethod

type Stripe_PaymentMethod {
  acss_debit: Stripe_PaymentMethodAcssDebit
  afterpay_clearpay: Stripe_PaymentMethodAfterpayClearpay
  alipay: Stripe_PaymentFlowsPrivatePaymentMethodsAlipay
  au_becs_debit: Stripe_PaymentMethodAuBecsDebit
  bacs_debit: Stripe_PaymentMethodBacsDebit
  bancontact: Stripe_PaymentMethodBancontact
  billing_details: Stripe_BillingDetails
  boleto: Stripe_PaymentMethodBoleto
  card: Stripe_PaymentMethodCard
  card_present: Stripe_PaymentMethodCardPresent

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  customer: Stripe_PaymentMethodCustomerProperty
  customer_balance: Stripe_PaymentMethodCustomerBalance
  eps: Stripe_PaymentMethodEps
  fpx: Stripe_PaymentMethodFpx
  giropay: Stripe_PaymentMethodGiropay
  grabpay: Stripe_PaymentMethodGrabpay

  """Unique identifier for the object."""
  id: String
  ideal: Stripe_PaymentMethodIdeal
  interac_present: Stripe_PaymentMethodInteracPresent
  klarna: Stripe_PaymentMethodKlarna
  konbini: Stripe_PaymentMethodKonbini

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_PaymentMethodObjectProperty
  oxxo: Stripe_PaymentMethodOxxo
  p24: Stripe_PaymentMethodP24
  paynow: Stripe_PaymentMethodPaynow
  sepa_debit: Stripe_PaymentMethodSepaDebit
  sofort: Stripe_PaymentMethodSofort

  """
  The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
  """
  type: Stripe_PaymentMethodTypeProperty
  us_bank_account: Stripe_PaymentMethodUsBankAccount
  wechat_pay: Stripe_PaymentMethodWechatPay
}

type Stripe_PaymentMethodAcssDebit {
  """Name of the bank associated with the bank account."""
  bank_name: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Institution number of the bank account."""
  institution_number: String

  """Last four digits of the bank account number."""
  last4: String

  """Transit number of the bank account."""
  transit_number: String
}

type Stripe_PaymentMethodAfterpayClearpay {
  result: JSONObject
}

type Stripe_PaymentFlowsPrivatePaymentMethodsAlipay {
  result: JSONObject
}

type Stripe_PaymentMethodAuBecsDebit {
  """
  Six-digit number identifying bank and branch associated with this bank account.
  """
  bsb_number: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Last four digits of the bank account number."""
  last4: String
}

type Stripe_PaymentMethodBacsDebit {
  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Last four digits of the bank account number."""
  last4: String

  """Sort code of the bank account. (e.g., `10-20-30`)"""
  sort_code: String
}

type Stripe_PaymentMethodBancontact {
  result: JSONObject
}

type Stripe_BillingDetails {
  address: Stripe_Address

  """Email address."""
  email: String

  """Full name."""
  name: String

  """Billing phone number (including extension)."""
  phone: String
}

type Stripe_PaymentMethodBoleto {
  """Uniquely identifies the customer tax id (CNPJ or CPF)"""
  tax_id: String
}

type Stripe_PaymentMethodCard {
  """
  Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  brand: String
  checks: Stripe_PaymentMethodCardChecks

  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String

  """Two-digit number representing the card's expiration month."""
  exp_month: Int

  """Four-digit number representing the card's expiration year."""
  exp_year: Int

  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  
  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
  """
  fingerprint: String

  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String
  generated_from: Stripe_PaymentMethodCardGeneratedCard

  """The last four digits of the card."""
  last4: String
  networks: Stripe_Networks
  three_d_secure_usage: Stripe_ThreeDSecureUsage
  wallet: Stripe_PaymentMethodCardWallet
}

type Stripe_PaymentMethodCardChecks {
  """
  If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_line1_check: String

  """
  If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_postal_code_check: String

  """
  If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  cvc_check: String
}

type Stripe_PaymentMethodCardGeneratedCard {
  """The charge that created this object."""
  charge: String
  payment_method_details: Stripe_CardGeneratedFromPaymentMethodDetails
  setup_attempt: Stripe_PaymentMethodCardGeneratedCardSetupAttemptProperty
}

type Stripe_CardGeneratedFromPaymentMethodDetails {
  card_present: Stripe_PaymentMethodDetailsCardPresent

  """
  The type of payment method transaction-specific details from the transaction that generated this `card` payment method. Always `card_present`.
  """
  type: String
}

type Stripe_PaymentMethodDetailsCardPresent {
  """The authorized amount"""
  amount_authorized: Int

  """
  Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  brand: String

  """
  When using manual capture, a future timestamp after which the charge will be automatically refunded if uncaptured.
  """
  capture_before: Int

  """
  The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
  """
  cardholder_name: String

  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String

  """Authorization response cryptogram."""
  emv_auth_data: String

  """Two-digit number representing the card's expiration month."""
  exp_month: Int

  """Four-digit number representing the card's expiration year."""
  exp_year: Int

  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  
  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
  """
  fingerprint: String

  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String

  """
  ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
  """
  generated_card: String

  """
  Whether this [PaymentIntent](https://stripe.com/docs/api/payment_intents) is eligible for incremental authorizations. Request support using [request_incremental_authorization_support](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-payment_method_options-card_present-request_incremental_authorization_support).
  """
  incremental_authorization_supported: Boolean

  """The last four digits of the card."""
  last4: String

  """
  Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  network: String

  """Defines whether the authorized amount can be over-captured or not"""
  overcapture_supported: Boolean

  """How card details were read in this transaction."""
  read_method: Stripe_PaymentMethodDetailsCardPresentReadMethodProperty
  receipt: Stripe_PaymentMethodDetailsCardPresentReceipt
}

enum Stripe_PaymentMethodDetailsCardPresentReadMethodProperty {
  contact_emv
  contactless_emv
  contactless_magstripe_mode
  magnetic_stripe_fallback
  magnetic_stripe_track2
}

type Stripe_PaymentMethodDetailsCardPresentReceipt {
  """The type of account being debited or credited"""
  account_type: Stripe_PaymentMethodDetailsCardPresentReceiptAccountTypeProperty

  """EMV tag 9F26, cryptogram generated by the integrated circuit chip."""
  application_cryptogram: String

  """Mnenomic of the Application Identifier."""
  application_preferred_name: String

  """Identifier for this transaction."""
  authorization_code: String

  """EMV tag 8A. A code returned by the card issuer."""
  authorization_response_code: String

  """How the cardholder verified ownership of the card."""
  cardholder_verification_method: String

  """
  EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.
  """
  dedicated_file_name: String

  """The outcome of a series of EMV functions performed by the card reader."""
  terminal_verification_results: String

  """
  An indication of various EMV functions performed during the transaction.
  """
  transaction_status_information: String
}

enum Stripe_PaymentMethodDetailsCardPresentReceiptAccountTypeProperty {
  checking
  credit
  prepaid
  unknown
}

union Stripe_PaymentMethodCardGeneratedCardSetupAttemptProperty = WrappedString | Stripe_SetupAttempt

type Stripe_SetupAttempt {
  application: Stripe_SetupAttemptApplicationProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  customer: Stripe_SetupAttemptCustomerProperty

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_SetupAttemptObjectProperty
  on_behalf_of: Stripe_SetupAttemptOnBehalfOfProperty
  payment_method: Stripe_SetupAttemptPaymentMethodProperty
  payment_method_details: Stripe_SetupAttemptPaymentMethodDetails
  setup_error: Stripe_ApiErrors
  setup_intent: Stripe_SetupAttemptSetupIntentProperty

  """
  Status of this SetupAttempt, one of `requires_confirmation`, `requires_action`, `processing`, `succeeded`, `failed`, or `abandoned`.
  """
  status: String

  """
  The value of [usage](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-usage) on the SetupIntent at the time of this confirmation, one of `off_session` or `on_session`.
  """
  usage: String
}

union Stripe_SetupAttemptApplicationProperty = WrappedString | Stripe_Application

type Stripe_Application {
  """Unique identifier for the object."""
  id: String

  """The name of the application."""
  name: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_ApplicationObjectProperty
}

enum Stripe_ApplicationObjectProperty {
  application
}

union Stripe_SetupAttemptCustomerProperty = WrappedString | Stripe_Customer | Stripe_DeletedCustomer

enum Stripe_SetupAttemptObjectProperty {
  setup_attempt
}

union Stripe_SetupAttemptOnBehalfOfProperty = WrappedString | Stripe_Account

union Stripe_SetupAttemptPaymentMethodProperty = WrappedString | Stripe_PaymentMethod

type Stripe_SetupAttemptPaymentMethodDetails {
  acss_debit: Stripe_SetupAttemptPaymentMethodDetailsAcssDebit
  au_becs_debit: Stripe_SetupAttemptPaymentMethodDetailsAuBecsDebit
  bacs_debit: Stripe_SetupAttemptPaymentMethodDetailsBacsDebit
  bancontact: Stripe_SetupAttemptPaymentMethodDetailsBancontact
  boleto: Stripe_SetupAttemptPaymentMethodDetailsBoleto
  card: Stripe_SetupAttemptPaymentMethodDetailsCard
  card_present: Stripe_SetupAttemptPaymentMethodDetailsCardPresent
  ideal: Stripe_SetupAttemptPaymentMethodDetailsIdeal
  sepa_debit: Stripe_SetupAttemptPaymentMethodDetailsSepaDebit
  sofort: Stripe_SetupAttemptPaymentMethodDetailsSofort

  """
  The type of the payment method used in the SetupIntent (e.g., `card`). An additional hash is included on `payment_method_details` with a name matching this value. It contains confirmation-specific information for the payment method.
  """
  type: String
  us_bank_account: Stripe_SetupAttemptPaymentMethodDetailsUsBankAccount
}

type Stripe_SetupAttemptPaymentMethodDetailsAcssDebit {
  result: JSONObject
}

type Stripe_SetupAttemptPaymentMethodDetailsAuBecsDebit {
  result: JSONObject
}

type Stripe_SetupAttemptPaymentMethodDetailsBacsDebit {
  result: JSONObject
}

type Stripe_SetupAttemptPaymentMethodDetailsBancontact {
  """Bank code of bank associated with the bank account."""
  bank_code: String

  """Name of the bank associated with the bank account."""
  bank_name: String

  """Bank Identifier Code of the bank associated with the bank account."""
  bic: String
  generated_sepa_debit: Stripe_SetupAttemptPaymentMethodDetailsBancontactGeneratedSepaDebitProperty
  generated_sepa_debit_mandate: Stripe_SetupAttemptPaymentMethodDetailsBancontactGeneratedSepaDebitMandateProperty

  """Last four characters of the IBAN."""
  iban_last4: String

  """
  Preferred language of the Bancontact authorization page that the customer is redirected to.
  Can be one of `en`, `de`, `fr`, or `nl`
  """
  preferred_language: Stripe_SetupAttemptPaymentMethodDetailsBancontactPreferredLanguageProperty

  """
  Owner's verified full name. Values are verified or provided by Bancontact directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

union Stripe_SetupAttemptPaymentMethodDetailsBancontactGeneratedSepaDebitProperty = WrappedString | Stripe_PaymentMethod

union Stripe_SetupAttemptPaymentMethodDetailsBancontactGeneratedSepaDebitMandateProperty = WrappedString | Stripe_Mandate

type Stripe_Mandate {
  customer_acceptance: Stripe_CustomerAcceptance

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean
  multi_use: Stripe_MandateMultiUse

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_MandateObjectProperty
  payment_method: Stripe_MandatePaymentMethodProperty
  payment_method_details: Stripe_MandatePaymentMethodDetails
  single_use: Stripe_MandateSingleUse

  """
  The status of the mandate, which indicates whether it can be used to initiate a payment.
  """
  status: Stripe_MandateStatusProperty

  """The type of the mandate."""
  type: Stripe_MandateTypeProperty
}

type Stripe_CustomerAcceptance {
  """The time at which the customer accepted the Mandate."""
  accepted_at: Int
  offline: Stripe_OfflineAcceptance
  online: Stripe_OnlineAcceptance

  """
  The type of customer acceptance information included with the Mandate. One of `online` or `offline`.
  """
  type: Stripe_CustomerAcceptanceTypeProperty
}

type Stripe_OfflineAcceptance {
  result: JSONObject
}

type Stripe_OnlineAcceptance {
  """The IP address from which the Mandate was accepted by the customer."""
  ip_address: String

  """
  The user agent of the browser from which the Mandate was accepted by the customer.
  """
  user_agent: String
}

enum Stripe_CustomerAcceptanceTypeProperty {
  offline
  online
}

type Stripe_MandateMultiUse {
  result: JSONObject
}

enum Stripe_MandateObjectProperty {
  mandate
}

union Stripe_MandatePaymentMethodProperty = WrappedString | Stripe_PaymentMethod

type Stripe_MandatePaymentMethodDetails {
  acss_debit: Stripe_MandateAcssDebit
  au_becs_debit: Stripe_MandateAuBecsDebit
  bacs_debit: Stripe_MandateBacsDebit
  card: Stripe_CardMandatePaymentMethodDetails
  sepa_debit: Stripe_MandateSepaDebit

  """
  The type of the payment method associated with this mandate. An additional hash is included on `payment_method_details` with a name matching this value. It contains mandate information specific to the payment method.
  """
  type: String
  us_bank_account: Stripe_MandateUsBankAccount
}

type Stripe_MandateAcssDebit {
  """
  List of Stripe products where this mandate can be selected automatically.
  """
  default_for: [Stripe_MandateAcssDebitDefaultForProperty]

  """
  Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
  """
  interval_description: String

  """Payment schedule for the mandate."""
  payment_schedule: Stripe_MandateAcssDebitPaymentScheduleProperty

  """Transaction type of the mandate."""
  transaction_type: Stripe_MandateAcssDebitTransactionTypeProperty
}

enum Stripe_MandateAcssDebitDefaultForProperty {
  invoice
  subscription
}

enum Stripe_MandateAcssDebitPaymentScheduleProperty {
  combined
  interval
  sporadic
}

enum Stripe_MandateAcssDebitTransactionTypeProperty {
  business
  personal
}

type Stripe_MandateAuBecsDebit {
  """
  The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively.
  """
  url: String
}

type Stripe_MandateBacsDebit {
  """
  The status of the mandate on the Bacs network. Can be one of `pending`, `revoked`, `refused`, or `accepted`.
  """
  network_status: Stripe_MandateBacsDebitNetworkStatusProperty

  """The unique reference identifying the mandate on the Bacs network."""
  reference: String

  """The URL that will contain the mandate that the customer has signed."""
  url: String
}

enum Stripe_MandateBacsDebitNetworkStatusProperty {
  accepted
  pending
  refused
  revoked
}

type Stripe_CardMandatePaymentMethodDetails {
  result: JSONObject
}

type Stripe_MandateSepaDebit {
  """The unique reference of the mandate."""
  reference: String

  """
  The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively.
  """
  url: String
}

type Stripe_MandateUsBankAccount {
  result: JSONObject
}

type Stripe_MandateSingleUse {
  """On a single use mandate, the amount of the payment."""
  amount: Int

  """On a single use mandate, the currency of the payment."""
  currency: String
}

enum Stripe_MandateStatusProperty {
  active
  inactive
  pending
}

enum Stripe_MandateTypeProperty {
  multi_use
  single_use
}

enum Stripe_SetupAttemptPaymentMethodDetailsBancontactPreferredLanguageProperty {
  de
  en
  fr
  nl
}

type Stripe_SetupAttemptPaymentMethodDetailsBoleto {
  result: JSONObject
}

type Stripe_SetupAttemptPaymentMethodDetailsCard {
  three_d_secure: Stripe_ThreeDSecureDetails
}

type Stripe_ThreeDSecureDetails {
  """
  For authenticated transactions: how the customer was authenticated by
  the issuing bank.
  """
  authentication_flow: Stripe_ThreeDSecureDetailsAuthenticationFlowProperty

  """Indicates the outcome of 3D Secure authentication."""
  result: Stripe_ThreeDSecureDetailsResultProperty

  """
  Additional information about why 3D Secure succeeded or failed based
  on the `result`.
  """
  result_reason: Stripe_ThreeDSecureDetailsResultReasonProperty

  """The version of 3D Secure that was used."""
  version: Stripe_ThreeDSecureDetailsVersionProperty
}

enum Stripe_ThreeDSecureDetailsAuthenticationFlowProperty {
  challenge
  frictionless
}

enum Stripe_ThreeDSecureDetailsResultProperty {
  attempt_acknowledged
  authenticated
  failed
  not_supported
  processing_error
}

enum Stripe_ThreeDSecureDetailsResultReasonProperty {
  abandoned
  bypassed
  canceled
  card_not_enrolled
  network_not_supported
  protocol_error
  rejected
}

enum Stripe_ThreeDSecureDetailsVersionProperty {
  ONEDOT0DOT2
  TWODOT1DOT0
  TWODOT2DOT0
}

type Stripe_SetupAttemptPaymentMethodDetailsCardPresent {
  generated_card: Stripe_SetupAttemptPaymentMethodDetailsCardPresentGeneratedCardProperty
}

union Stripe_SetupAttemptPaymentMethodDetailsCardPresentGeneratedCardProperty = WrappedString | Stripe_PaymentMethod

type Stripe_SetupAttemptPaymentMethodDetailsIdeal {
  """
  The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
  """
  bank: Stripe_SetupAttemptPaymentMethodDetailsIdealBankProperty

  """The Bank Identifier Code of the customer's bank."""
  bic: Stripe_SetupAttemptPaymentMethodDetailsIdealBicProperty
  generated_sepa_debit: Stripe_SetupAttemptPaymentMethodDetailsIdealGeneratedSepaDebitProperty
  generated_sepa_debit_mandate: Stripe_SetupAttemptPaymentMethodDetailsIdealGeneratedSepaDebitMandateProperty

  """Last four characters of the IBAN."""
  iban_last4: String

  """
  Owner's verified full name. Values are verified or provided by iDEAL directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

enum Stripe_SetupAttemptPaymentMethodDetailsIdealBankProperty {
  abn_amro
  asn_bank
  bunq
  handelsbanken
  ing
  knab
  moneyou
  rabobank
  regiobank
  revolut
  sns_bank
  triodos_bank
  van_lanschot
}

enum Stripe_SetupAttemptPaymentMethodDetailsIdealBicProperty {
  ABNANL2A
  ASNBNL21
  BUNQNL2A
  FVLBNL22
  HANDNL2A
  INGBNL2A
  KNABNL2H
  MOYONL21
  RABONL2U
  RBRBNL21
  REVOLT21
  SNSBNL2A
  TRIONL2U
}

union Stripe_SetupAttemptPaymentMethodDetailsIdealGeneratedSepaDebitProperty = WrappedString | Stripe_PaymentMethod

union Stripe_SetupAttemptPaymentMethodDetailsIdealGeneratedSepaDebitMandateProperty = WrappedString | Stripe_Mandate

type Stripe_SetupAttemptPaymentMethodDetailsSepaDebit {
  result: JSONObject
}

type Stripe_SetupAttemptPaymentMethodDetailsSofort {
  """Bank code of bank associated with the bank account."""
  bank_code: String

  """Name of the bank associated with the bank account."""
  bank_name: String

  """Bank Identifier Code of the bank associated with the bank account."""
  bic: String
  generated_sepa_debit: Stripe_SetupAttemptPaymentMethodDetailsSofortGeneratedSepaDebitProperty
  generated_sepa_debit_mandate: Stripe_SetupAttemptPaymentMethodDetailsSofortGeneratedSepaDebitMandateProperty

  """Last four characters of the IBAN."""
  iban_last4: String

  """
  Preferred language of the Sofort authorization page that the customer is redirected to.
  Can be one of `en`, `de`, `fr`, or `nl`
  """
  preferred_language: Stripe_SetupAttemptPaymentMethodDetailsSofortPreferredLanguageProperty

  """
  Owner's verified full name. Values are verified or provided by Sofort directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

union Stripe_SetupAttemptPaymentMethodDetailsSofortGeneratedSepaDebitProperty = WrappedString | Stripe_PaymentMethod

union Stripe_SetupAttemptPaymentMethodDetailsSofortGeneratedSepaDebitMandateProperty = WrappedString | Stripe_Mandate

enum Stripe_SetupAttemptPaymentMethodDetailsSofortPreferredLanguageProperty {
  de
  en
  fr
  nl
}

type Stripe_SetupAttemptPaymentMethodDetailsUsBankAccount {
  result: JSONObject
}

type Stripe_ApiErrors {
  """For card errors, the ID of the failed charge."""
  charge: String

  """
  For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported.
  """
  code: String

  """
  For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one.
  """
  decline_code: String

  """
  A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported.
  """
  doc_url: String

  """
  A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.
  """
  message: String

  """
  If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.
  """
  param: String
  payment_intent: Stripe_PaymentIntent
  payment_method: Stripe_PaymentMethod

  """
  If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors.
  """
  payment_method_type: String
  setup_intent: Stripe_SetupIntent
  source: Stripe_ApiErrorsSourceProperty

  """
  The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`
  """
  type: Stripe_ApiErrorsTypeProperty
}

type Stripe_PaymentIntent implements TSSearchable {
  """
  Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  """
  amount: Int

  """Amount that can be captured from this PaymentIntent."""
  amount_capturable: Int
  amount_details: Stripe_PaymentFlowsAmountDetails

  """Amount that was collected by this PaymentIntent."""
  amount_received: Int
  application: Stripe_PaymentIntentApplicationProperty

  """
  The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  """
  application_fee_amount: Int
  automatic_payment_methods: Stripe_PaymentFlowsAutomaticPaymentMethodsPaymentIntent

  """
  Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.
  """
  canceled_at: Int

  """
  Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`).
  """
  cancellation_reason: Stripe_PaymentIntentCancellationReasonProperty

  """Controls when the funds will be captured from the customer's account."""
  capture_method: Stripe_PaymentIntentCaptureMethodProperty

  """Charges that were created by this PaymentIntent, if any."""
  charges: Stripe_PaymentIntentChargesProperty

  """
  The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key. 
  
  The client secret can be used to complete a payment from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
  
  Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?ui=elements) and learn about how `client_secret` should be handled.
  """
  client_secret: String
  confirmation_method: Stripe_PaymentIntentConfirmationMethodProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  customer: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """Unique identifier for the object."""
  id: String
  invoice: Stripe_PaymentIntentInvoiceProperty
  last_payment_error: Stripe_ApiErrors

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. For more information, see the [documentation](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata).
  """
  metadata: JSONObject
  next_action: Stripe_PaymentIntentNextAction

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_PaymentIntentObjectProperty
  on_behalf_of: Stripe_PaymentIntentOnBehalfOfProperty
  payment_method: Stripe_PaymentIntentPaymentMethodProperty
  payment_method_options: Stripe_PaymentIntentPaymentMethodOptions

  """
  The list of payment method types (e.g. card) that this PaymentIntent is allowed to use.
  """
  payment_method_types: [String]
  processing: Stripe_PaymentIntentProcessing

  """
  Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
  """
  receipt_email: String
  review: Stripe_PaymentIntentReviewProperty

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentIntentSetupFutureUsageProperty
  shipping: Stripe_Shipping

  """
  For non-card charges, you can use this value as the complete description that appears on your customersâ€™ statements. Must contain at least one letter, maximum 22 characters.
  """
  statement_descriptor: String

  """
  Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor thatâ€™s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
  """
  statement_descriptor_suffix: String

  """
  Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  """
  status: Stripe_PaymentIntentStatusProperty
  transfer_data: Stripe_TransferData

  """
  A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
  """
  transfer_group: String
  invoiceItems: [Stripe_Invoiceitem]

  """The Stripe checkout session associated with this payment."""
  sessionItems: [Stripe_Item]

  """The ShipEngine label associated with this payment."""
  shipment: ShipEngine_Label
  _shapeId: String
  _id: ID
  searchSummary: String
}

type Stripe_PaymentFlowsAmountDetails {
  tip: Stripe_PaymentFlowsAmountDetailsResourceTip
}

type Stripe_PaymentFlowsAmountDetailsResourceTip {
  """Portion of the amount that corresponds to a tip."""
  amount: Int
}

union Stripe_PaymentIntentApplicationProperty = WrappedString | Stripe_Application

type Stripe_PaymentFlowsAutomaticPaymentMethodsPaymentIntent {
  """Automatically calculates compatible payment methods"""
  enabled: Boolean
}

enum Stripe_PaymentIntentCancellationReasonProperty {
  abandoned
  automatic
  duplicate
  failed_invoice
  fraudulent
  requested_by_customer
  void_invoice
}

enum Stripe_PaymentIntentCaptureMethodProperty {
  automatic
  manual
}

"""Charges that were created by this PaymentIntent, if any."""
type Stripe_PaymentIntentChargesProperty {
  """
  This list only contains the latest charge, even if there were previously multiple unsuccessful charges. To view all previous charges for a PaymentIntent, you can filter the charges list using the `payment_intent` [parameter](https://stripe.com/docs/api/charges/list#list_charges-payment_intent).
  """
  data: [Stripe_Charge!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_PaymentIntentChargesObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

type Stripe_Charge {
  """
  Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  """
  amount: Int

  """
  Amount in %s captured (can be less than the amount attribute on the charge if a partial capture was made).
  """
  amount_captured: Int

  """
  Amount in %s refunded (can be less than the amount attribute on the charge if a partial refund was issued).
  """
  amount_refunded: Int
  application: Stripe_ChargeApplicationProperty
  application_fee: Stripe_ChargeApplicationFeeProperty

  """
  The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details.
  """
  application_fee_amount: Int
  balance_transaction: Stripe_ChargeBalanceTransactionProperty
  billing_details: Stripe_BillingDetails

  """
  The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined.
  """
  calculated_statement_descriptor: String

  """
  If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.
  """
  captured: Boolean

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  customer: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """Whether the charge has been disputed."""
  disputed: Boolean
  failure_balance_transaction: Stripe_ChargeFailureBalanceTransactionProperty

  """
  Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes).
  """
  failure_code: String

  """
  Message to user further explaining reason for charge failure if available.
  """
  failure_message: String
  fraud_details: Stripe_ChargeFraudDetails

  """Unique identifier for the object."""
  id: String
  invoice: Stripe_ChargeInvoiceProperty

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_ChargeObjectProperty
  on_behalf_of: Stripe_ChargeOnBehalfOfProperty
  order: Stripe_ChargeOrderProperty
  outcome: Stripe_ChargeOutcome

  """
  `true` if the charge succeeded, or was successfully authorized for later capture.
  """
  paid: Boolean
  payment_intent: Stripe_ChargePaymentIntentProperty

  """ID of the payment method used in this charge."""
  payment_method: String
  payment_method_details: Stripe_PaymentMethodDetails

  """
  This is the email address that the receipt for this charge was sent to.
  """
  receipt_email: String

  """
  This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent.
  """
  receipt_number: String

  """
  This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt.
  """
  receipt_url: String

  """
  Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.
  """
  refunded: Boolean

  """A list of refunds that have been applied to the charge."""
  refunds: Stripe_ChargeRefundsProperty
  review: Stripe_ChargeReviewProperty
  shipping: Stripe_Shipping
  source_transfer: Stripe_ChargeSourceTransferProperty

  """
  For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customersâ€™ statements. Must contain at least one letter, maximum 22 characters.
  """
  statement_descriptor: String

  """
  Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor thatâ€™s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
  """
  statement_descriptor_suffix: String

  """
  The status of the payment is either `succeeded`, `pending`, or `failed`.
  """
  status: Stripe_ChargeStatusProperty
  transfer: Stripe_ChargeTransferProperty
  transfer_data: Stripe_ChargeTransferData

  """
  A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details.
  """
  transfer_group: String
}

union Stripe_ChargeApplicationProperty = WrappedString | Stripe_Application

union Stripe_ChargeApplicationFeeProperty = WrappedString | Stripe_ApplicationFee

type Stripe_ApplicationFee {
  account: Stripe_ApplicationFeeAccountProperty

  """Amount earned, in %s."""
  amount: Int

  """
  Amount in %s refunded (can be less than the amount attribute on the fee if a partial refund was issued)
  """
  amount_refunded: Int
  application: Stripe_ApplicationFeeApplicationProperty
  balance_transaction: Stripe_ApplicationFeeBalanceTransactionProperty
  charge: Stripe_ApplicationFeeChargeProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_ApplicationFeeObjectProperty
  originating_transaction: Stripe_ApplicationFeeOriginatingTransactionProperty

  """
  Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false.
  """
  refunded: Boolean

  """A list of refunds that have been applied to the fee."""
  refunds: Stripe_ApplicationFeeRefundsProperty
}

union Stripe_ApplicationFeeAccountProperty = WrappedString | Stripe_Account

union Stripe_ApplicationFeeApplicationProperty = WrappedString | Stripe_Application

union Stripe_ApplicationFeeBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction

type Stripe_BalanceTransaction {
  """Gross amount of the transaction, in %s."""
  amount: Int

  """
  The date the transaction's net funds will become available in the Stripe balance.
  """
  available_on: Int

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """
  The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the `amount` in currency A, times `exchange_rate`, would be the `amount` in currency B. For example, suppose you charged a customer 10.00 EUR. Then the PaymentIntent's `amount` would be `1000` and `currency` would be `eur`. Suppose this was converted into 12.34 USD in your Stripe account. Then the BalanceTransaction's `amount` would be `1234`, `currency` would be `usd`, and `exchange_rate` would be `1.234`.
  """
  exchange_rate: Float

  """Fees (in %s) paid for this transaction."""
  fee: Int

  """Detailed breakdown of fees (in %s) paid for this transaction."""
  fee_details: [Stripe_Fee]

  """Unique identifier for the object."""
  id: String

  """Net amount of the transaction, in %s."""
  net: Int

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_BalanceTransactionObjectProperty

  """
  [Learn more](https://stripe.com/docs/reports/reporting-categories) about how reporting categories can help you understand balance transactions from an accounting perspective.
  """
  reporting_category: String
  source: Stripe_BalanceTransactionSourceProperty

  """
  If the transaction's net funds are available in the Stripe balance yet. Either `available` or `pending`.
  """
  status: String

  """
  Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. [Learn more](https://stripe.com/docs/reports/balance-transaction-types) about balance transaction types and what they represent. If you are looking to classify transactions for accounting purposes, you might want to consider `reporting_category` instead.
  """
  type: Stripe_BalanceTransactionTypeProperty
}

type Stripe_Fee {
  """Amount of the fee, in cents."""
  amount: Int

  """ID of the Connect application that earned the fee."""
  application: String

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """Type of the fee, one of: `application_fee`, `stripe_fee` or `tax`."""
  type: String
}

enum Stripe_BalanceTransactionObjectProperty {
  balance_transaction
}

union Stripe_BalanceTransactionSourceProperty = WrappedString | Stripe_ApplicationFee | Stripe_Charge | Stripe_ConnectCollectionTransfer | Stripe_Dispute | Stripe_FeeRefund | Stripe_IssuingAuthorization | Stripe_IssuingDispute | Stripe_IssuingTransaction | Stripe_Payout | Stripe_PlatformTaxFee | Stripe_Refund | Stripe_ReserveTransaction | Stripe_TaxDeductedAtSource | Stripe_Topup | Stripe_Transfer | Stripe_TransferReversal

type Stripe_ConnectCollectionTransfer {
  """Amount transferred, in %s."""
  amount: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  destination: Stripe_ConnectCollectionTransferDestinationProperty

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_ConnectCollectionTransferObjectProperty
}

union Stripe_ConnectCollectionTransferDestinationProperty = WrappedString | Stripe_Account

enum Stripe_ConnectCollectionTransferObjectProperty {
  connect_collection_transfer
}

type Stripe_Dispute {
  """
  Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed).
  """
  amount: Int

  """
  List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute.
  """
  balance_transactions: [Stripe_BalanceTransaction]
  charge: Stripe_DisputeChargeProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  evidence: Stripe_DisputeEvidence
  evidence_details: Stripe_DisputeEvidenceDetails

  """Unique identifier for the object."""
  id: String

  """
  If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute.
  """
  is_charge_refundable: Boolean

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_DisputeObjectProperty
  payment_intent: Stripe_DisputePaymentIntentProperty

  """
  Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).
  """
  reason: String

  """
  Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `charge_refunded`, `won`, or `lost`.
  """
  status: Stripe_DisputeStatusProperty
}

union Stripe_DisputeChargeProperty = WrappedString | Stripe_Charge

type Stripe_DisputeEvidence {
  """
  Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity.
  """
  access_activity_log: String

  """The billing address provided by the customer."""
  billing_address: String
  cancellation_policy: Stripe_DisputeEvidenceCancellationPolicyProperty

  """
  An explanation of how and when the customer was shown your refund policy prior to purchase.
  """
  cancellation_policy_disclosure: String

  """A justification for why the customer's subscription was not canceled."""
  cancellation_rebuttal: String
  customer_communication: Stripe_DisputeEvidenceCustomerCommunicationProperty

  """The email address of the customer."""
  customer_email_address: String

  """The name of the customer."""
  customer_name: String

  """The IP address that the customer used when making the purchase."""
  customer_purchase_ip: String
  customer_signature: Stripe_DisputeEvidenceCustomerSignatureProperty
  duplicate_charge_documentation: Stripe_DisputeEvidenceDuplicateChargeDocumentationProperty

  """
  An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate.
  """
  duplicate_charge_explanation: String

  """
  The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge.
  """
  duplicate_charge_id: String

  """A description of the product or service that was sold."""
  product_description: String
  receipt: Stripe_DisputeEvidenceReceiptProperty
  refund_policy: Stripe_DisputeEvidenceRefundPolicyProperty

  """
  Documentation demonstrating that the customer was shown your refund policy prior to purchase.
  """
  refund_policy_disclosure: String

  """A justification for why the customer is not entitled to a refund."""
  refund_refusal_explanation: String

  """
  The date on which the customer received or began receiving the purchased service, in a clear human-readable format.
  """
  service_date: String
  service_documentation: Stripe_DisputeEvidenceServiceDocumentationProperty

  """
  The address to which a physical product was shipped. You should try to include as complete address information as possible.
  """
  shipping_address: String

  """
  The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas.
  """
  shipping_carrier: String

  """
  The date on which a physical product began its route to the shipping address, in a clear human-readable format.
  """
  shipping_date: String
  shipping_documentation: Stripe_DisputeEvidenceShippingDocumentationProperty

  """
  The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
  """
  shipping_tracking_number: String
  uncategorized_file: Stripe_DisputeEvidenceUncategorizedFileProperty

  """Any additional evidence or statements."""
  uncategorized_text: String
}

union Stripe_DisputeEvidenceCancellationPolicyProperty = WrappedString | Stripe_File

union Stripe_DisputeEvidenceCustomerCommunicationProperty = WrappedString | Stripe_File

union Stripe_DisputeEvidenceCustomerSignatureProperty = WrappedString | Stripe_File

union Stripe_DisputeEvidenceDuplicateChargeDocumentationProperty = WrappedString | Stripe_File

union Stripe_DisputeEvidenceReceiptProperty = WrappedString | Stripe_File

union Stripe_DisputeEvidenceRefundPolicyProperty = WrappedString | Stripe_File

union Stripe_DisputeEvidenceServiceDocumentationProperty = WrappedString | Stripe_File

union Stripe_DisputeEvidenceShippingDocumentationProperty = WrappedString | Stripe_File

union Stripe_DisputeEvidenceUncategorizedFileProperty = WrappedString | Stripe_File

type Stripe_DisputeEvidenceDetails {
  """
  Date by which evidence must be submitted in order to successfully challenge dispute. Will be null if the customer's bank or credit card company doesn't allow a response for this particular dispute.
  """
  due_by: Int

  """Whether evidence has been staged for this dispute."""
  has_evidence: Boolean

  """
  Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed.
  """
  past_due: Boolean

  """
  The number of times evidence has been submitted. Typically, you may only submit evidence once.
  """
  submission_count: Int
}

enum Stripe_DisputeObjectProperty {
  dispute
}

union Stripe_DisputePaymentIntentProperty = WrappedString | Stripe_PaymentIntent

enum Stripe_DisputeStatusProperty {
  charge_refunded
  lost
  needs_response
  under_review
  warning_closed
  warning_needs_response
  warning_under_review
  won
}

type Stripe_FeeRefund {
  """Amount, in %s."""
  amount: Int
  balance_transaction: Stripe_FeeRefundBalanceTransactionProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  fee: Stripe_FeeRefundFeeProperty

  """Unique identifier for the object."""
  id: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_FeeRefundObjectProperty
}

union Stripe_FeeRefundBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction

union Stripe_FeeRefundFeeProperty = WrappedString | Stripe_ApplicationFee

enum Stripe_FeeRefundObjectProperty {
  fee_refund
}

type Stripe_IssuingAuthorization {
  """
  The total amount that was authorized or rejected. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount: Int
  amount_details: Stripe_IssuingAuthorizationAmountDetails

  """Whether the authorization has been approved."""
  approved: Boolean

  """How the card details were provided."""
  authorization_method: Stripe_IssuingAuthorizationAuthorizationMethodProperty

  """List of balance transactions associated with this authorization."""
  balance_transactions: [Stripe_BalanceTransaction]
  card: Stripe_IssuingCard
  cardholder: Stripe_IssuingAuthorizationCardholderProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  merchant_amount: Int

  """
  The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  merchant_currency: String
  merchant_data: Stripe_IssuingAuthorizationMerchantData

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_IssuingAuthorizationObjectProperty
  pending_request: Stripe_IssuingAuthorizationPendingRequest

  """
  History of every time `pending_request` was approved/denied, either by you directly or by Stripe (e.g. based on your `spending_controls`). If the merchant changes the authorization by performing an [incremental authorization](https://stripe.com/docs/issuing/purchases/authorizations), you can look at this field to see the previous requests for the authorization.
  """
  request_history: [Stripe_IssuingAuthorizationRequest]

  """The current status of the authorization in its lifecycle."""
  status: Stripe_IssuingAuthorizationStatusProperty

  """
  List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization.
  """
  transactions: [Stripe_IssuingTransaction]
  verification_data: Stripe_IssuingAuthorizationVerificationData

  """
  The digital wallet used for this authorization. One of `apple_pay`, `google_pay`, or `samsung_pay`.
  """
  wallet: String
}

type Stripe_IssuingAuthorizationAmountDetails {
  """The fee charged by the ATM for the cash withdrawal."""
  atm_fee: Int
}

enum Stripe_IssuingAuthorizationAuthorizationMethodProperty {
  chip
  contactless
  keyed_in
  online
  swipe
}

type Stripe_IssuingCard {
  """The brand of the card."""
  brand: String

  """The reason why the card was canceled."""
  cancellation_reason: Stripe_IssuingCardCancellationReasonProperty
  cardholder: Stripe_IssuingCardholder

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  The card's CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint.
  """
  cvc: String

  """The expiration month of the card."""
  exp_month: Int

  """The expiration year of the card."""
  exp_year: Int

  """Unique identifier for the object."""
  id: String

  """The last 4 digits of the card number."""
  last4: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint.
  """
  number: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_IssuingCardObjectProperty
  replaced_by: Stripe_IssuingCardReplacedByProperty
  replacement_for: Stripe_IssuingCardReplacementForProperty

  """The reason why the previous card needed to be replaced."""
  replacement_reason: Stripe_IssuingCardReplacementReasonProperty
  shipping: Stripe_IssuingCardShipping
  spending_controls: Stripe_IssuingCardAuthorizationControls

  """Whether authorizations can be approved on this card."""
  status: Stripe_IssuingCardStatusProperty

  """The type of the card."""
  type: Stripe_IssuingCardTypeProperty
  wallets: Stripe_IssuingCardWallets
}

enum Stripe_IssuingCardCancellationReasonProperty {
  lost
  stolen
}

type Stripe_IssuingCardholder {
  billing: Stripe_IssuingCardholderAddress
  company: Stripe_IssuingCardholderCompany

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """The cardholder's email address."""
  email: String

  """Unique identifier for the object."""
  id: String
  individual: Stripe_IssuingCardholderIndividual

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """The cardholder's name. This will be printed on cards issued to them."""
  name: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_IssuingCardholderObjectProperty

  """
  The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details.
  """
  phone_number: String
  requirements: Stripe_IssuingCardholderRequirements
  spending_controls: Stripe_IssuingCardholderAuthorizationControls

  """Specifies whether to permit authorizations on this cardholder's cards."""
  status: Stripe_IssuingCardholderStatusProperty

  """One of `individual` or `company`."""
  type: Stripe_IssuingCardholderTypeProperty
}

type Stripe_IssuingCardholderAddress {
  address: Stripe_Address
}

type Stripe_IssuingCardholderCompany {
  """Whether the company's business ID number was provided."""
  tax_id_provided: Boolean
}

type Stripe_IssuingCardholderIndividual {
  dob: Stripe_IssuingCardholderIndividualDob

  """The first name of this cardholder."""
  first_name: String

  """The last name of this cardholder."""
  last_name: String
  verification: Stripe_IssuingCardholderVerification
}

type Stripe_IssuingCardholderIndividualDob {
  """The day of birth, between 1 and 31."""
  day: Int

  """The month of birth, between 1 and 12."""
  month: Int

  """The four-digit year of birth."""
  year: Int
}

type Stripe_IssuingCardholderVerification {
  document: Stripe_IssuingCardholderIdDocument
}

type Stripe_IssuingCardholderIdDocument {
  back: Stripe_IssuingCardholderIdDocumentBackProperty
  front: Stripe_IssuingCardholderIdDocumentFrontProperty
}

union Stripe_IssuingCardholderIdDocumentBackProperty = WrappedString | Stripe_File

union Stripe_IssuingCardholderIdDocumentFrontProperty = WrappedString | Stripe_File

enum Stripe_IssuingCardholderObjectProperty {
  issuingDOTcardholder
}

type Stripe_IssuingCardholderRequirements {
  """
  If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason.
  """
  disabled_reason: Stripe_IssuingCardholderRequirementsDisabledReasonProperty

  """
  Array of fields that need to be collected in order to verify and re-enable the cardholder.
  """
  past_due: [Stripe_IssuingCardholderRequirementsPastDueProperty]
}

enum Stripe_IssuingCardholderRequirementsDisabledReasonProperty {
  listed
  rejectedDOTlisted
  under_review
}

enum Stripe_IssuingCardholderRequirementsPastDueProperty {
  companyDOTtax_id
  individualDOTdobDOTday
  individualDOTdobDOTmonth
  individualDOTdobDOTyear
  individualDOTfirst_name
  individualDOTlast_name
  individualDOTverificationDOTdocument
}

type Stripe_IssuingCardholderAuthorizationControls {
  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`.
  """
  allowed_categories: [Stripe_IssuingCardholderAuthorizationControlsAllowedCategoriesProperty]

  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`.
  """
  blocked_categories: [Stripe_IssuingCardholderAuthorizationControlsBlockedCategoriesProperty]

  """
  Limit spending with amount-based rules that apply across this cardholder's cards.
  """
  spending_limits: [Stripe_IssuingCardholderSpendingLimit]

  """Currency of the amounts within `spending_limits`."""
  spending_limits_currency: String
}

enum Stripe_IssuingCardholderAuthorizationControlsAllowedCategoriesProperty {
  ac_refrigeration_repair
  accounting_bookkeeping_services
  advertising_services
  agricultural_cooperative
  airlines_air_carriers
  airports_flying_fields
  ambulance_services
  amusement_parks_carnivals
  antique_reproductions
  antique_shops
  aquariums
  architectural_surveying_services
  art_dealers_and_galleries
  artists_supply_and_craft_shops
  auto_and_home_supply_stores
  auto_body_repair_shops
  auto_paint_shops
  auto_service_shops
  automated_cash_disburse
  automated_fuel_dispensers
  automobile_associations
  automotive_parts_and_accessories_stores
  automotive_tire_stores
  bail_and_bond_payments
  bakeries
  bands_orchestras
  barber_and_beauty_shops
  betting_casino_gambling
  bicycle_shops
  billiard_pool_establishments
  boat_dealers
  boat_rentals_and_leases
  book_stores
  books_periodicals_and_newspapers
  bowling_alleys
  bus_lines
  business_secretarial_schools
  buying_shopping_services
  cable_satellite_and_other_pay_television_and_radio
  camera_and_photographic_supply_stores
  candy_nut_and_confectionery_stores
  car_and_truck_dealers_new_used
  car_and_truck_dealers_used_only
  car_rental_agencies
  car_washes
  carpentry_services
  carpet_upholstery_cleaning
  caterers
  charitable_and_social_service_organizations_fundraising
  chemicals_and_allied_products
  child_care_services
  childrens_and_infants_wear_stores
  chiropodists_podiatrists
  chiropractors
  cigar_stores_and_stands
  civic_social_fraternal_associations
  cleaning_and_maintenance
  clothing_rental
  colleges_universities
  commercial_equipment
  commercial_footwear
  commercial_photography_art_and_graphics
  commuter_transport_and_ferries
  computer_network_services
  computer_programming
  computer_repair
  computer_software_stores
  computers_peripherals_and_software
  concrete_work_services
  construction_materials
  consulting_public_relations
  correspondence_schools
  cosmetic_stores
  counseling_services
  country_clubs
  courier_services
  court_costs
  credit_reporting_agencies
  cruise_lines
  dairy_products_stores
  dance_hall_studios_schools
  dating_escort_services
  dentists_orthodontists
  department_stores
  detective_agencies
  digital_goods_applications
  digital_goods_games
  digital_goods_large_volume
  digital_goods_media
  direct_marketing_catalog_merchant
  direct_marketing_combination_catalog_and_retail_merchant
  direct_marketing_inbound_telemarketing
  direct_marketing_insurance_services
  direct_marketing_other
  direct_marketing_outbound_telemarketing
  direct_marketing_subscription
  direct_marketing_travel
  discount_stores
  doctors
  door_to_door_sales
  drapery_window_covering_and_upholstery_stores
  drinking_places
  drug_stores_and_pharmacies
  drugs_drug_proprietaries_and_druggist_sundries
  dry_cleaners
  durable_goods
  duty_free_stores
  eating_places_restaurants
  educational_services
  electric_razor_stores
  electrical_parts_and_equipment
  electrical_services
  electronics_repair_shops
  electronics_stores
  elementary_secondary_schools
  employment_temp_agencies
  equipment_rental
  exterminating_services
  family_clothing_stores
  fast_food_restaurants
  financial_institutions
  fines_government_administrative_entities
  fireplace_fireplace_screens_and_accessories_stores
  floor_covering_stores
  florists
  florists_supplies_nursery_stock_and_flowers
  freezer_and_locker_meat_provisioners
  fuel_dealers_non_automotive
  funeral_services_crematories
  furniture_home_furnishings_and_equipment_stores_except_appliances
  furniture_repair_refinishing
  furriers_and_fur_shops
  general_services
  gift_card_novelty_and_souvenir_shops
  glass_paint_and_wallpaper_stores
  glassware_crystal_stores
  golf_courses_public
  government_services
  grocery_stores_supermarkets
  hardware_equipment_and_supplies
  hardware_stores
  health_and_beauty_spas
  hearing_aids_sales_and_supplies
  heating_plumbing_a_c
  hobby_toy_and_game_shops
  home_supply_warehouse_stores
  hospitals
  hotels_motels_and_resorts
  household_appliance_stores
  industrial_supplies
  information_retrieval_services
  insurance_default
  insurance_underwriting_premiums
  intra_company_purchases
  jewelry_stores_watches_clocks_and_silverware_stores
  landscaping_services
  laundries
  laundry_cleaning_services
  legal_services_attorneys
  luggage_and_leather_goods_stores
  lumber_building_materials_stores
  manual_cash_disburse
  marinas_service_and_supplies
  masonry_stonework_and_plaster
  massage_parlors
  medical_and_dental_labs
  medical_dental_ophthalmic_and_hospital_equipment_and_supplies
  medical_services
  membership_organizations
  mens_and_boys_clothing_and_accessories_stores
  mens_womens_clothing_stores
  metal_service_centers
  miscellaneous
  miscellaneous_apparel_and_accessory_shops
  miscellaneous_auto_dealers
  miscellaneous_business_services
  miscellaneous_food_stores
  miscellaneous_general_merchandise
  miscellaneous_general_services
  miscellaneous_home_furnishing_specialty_stores
  miscellaneous_publishing_and_printing
  miscellaneous_recreation_services
  miscellaneous_repair_shops
  miscellaneous_specialty_retail
  mobile_home_dealers
  motion_picture_theaters
  motor_freight_carriers_and_trucking
  motor_homes_dealers
  motor_vehicle_supplies_and_new_parts
  motorcycle_shops_and_dealers
  motorcycle_shops_dealers
  music_stores_musical_instruments_pianos_and_sheet_music
  news_dealers_and_newsstands
  non_fi_money_orders
  non_fi_stored_value_card_purchase_load
  nondurable_goods
  nurseries_lawn_and_garden_supply_stores
  nursing_personal_care
  office_and_commercial_furniture
  opticians_eyeglasses
  optometrists_ophthalmologist
  orthopedic_goods_prosthetic_devices
  osteopaths
  package_stores_beer_wine_and_liquor
  paints_varnishes_and_supplies
  parking_lots_garages
  passenger_railways
  pawn_shops
  pet_shops_pet_food_and_supplies
  petroleum_and_petroleum_products
  photo_developing
  photographic_photocopy_microfilm_equipment_and_supplies
  photographic_studios
  picture_video_production
  piece_goods_notions_and_other_dry_goods
  plumbing_heating_equipment_and_supplies
  political_organizations
  postal_services_government_only
  precious_stones_and_metals_watches_and_jewelry
  professional_services
  public_warehousing_and_storage
  quick_copy_repro_and_blueprint
  railroads
  real_estate_agents_and_managers_rentals
  record_stores
  recreational_vehicle_rentals
  religious_goods_stores
  religious_organizations
  roofing_siding_sheet_metal
  secretarial_support_services
  security_brokers_dealers
  service_stations
  sewing_needlework_fabric_and_piece_goods_stores
  shoe_repair_hat_cleaning
  shoe_stores
  small_appliance_repair
  snowmobile_dealers
  special_trade_services
  specialty_cleaning
  sporting_goods_stores
  sporting_recreation_camps
  sports_and_riding_apparel_stores
  sports_clubs_fields
  stamp_and_coin_stores
  stationary_office_supplies_printing_and_writing_paper
  stationery_stores_office_and_school_supply_stores
  swimming_pools_sales
  t_ui_travel_germany
  tailors_alterations
  tax_payments_government_agencies
  tax_preparation_services
  taxicabs_limousines
  telecommunication_equipment_and_telephone_sales
  telecommunication_services
  telegraph_services
  tent_and_awning_shops
  testing_laboratories
  theatrical_ticket_agencies
  timeshares
  tire_retreading_and_repair
  tolls_bridge_fees
  tourist_attractions_and_exhibits
  towing_services
  trailer_parks_campgrounds
  transportation_services
  travel_agencies_tour_operators
  truck_stop_iteration
  truck_utility_trailer_rentals
  typesetting_plate_making_and_related_services
  typewriter_stores
  u_s_federal_government_agencies_or_departments
  uniforms_commercial_clothing
  used_merchandise_and_secondhand_stores
  utilities
  variety_stores
  veterinary_services
  video_amusement_game_supplies
  video_game_arcades
  video_tape_rental_stores
  vocational_trade_schools
  watch_jewelry_repair
  welding_repair
  wholesale_clubs
  wig_and_toupee_stores
  wires_money_orders
  womens_accessory_and_specialty_shops
  womens_ready_to_wear_stores
  wrecking_and_salvage_yards
}

enum Stripe_IssuingCardholderAuthorizationControlsBlockedCategoriesProperty {
  ac_refrigeration_repair
  accounting_bookkeeping_services
  advertising_services
  agricultural_cooperative
  airlines_air_carriers
  airports_flying_fields
  ambulance_services
  amusement_parks_carnivals
  antique_reproductions
  antique_shops
  aquariums
  architectural_surveying_services
  art_dealers_and_galleries
  artists_supply_and_craft_shops
  auto_and_home_supply_stores
  auto_body_repair_shops
  auto_paint_shops
  auto_service_shops
  automated_cash_disburse
  automated_fuel_dispensers
  automobile_associations
  automotive_parts_and_accessories_stores
  automotive_tire_stores
  bail_and_bond_payments
  bakeries
  bands_orchestras
  barber_and_beauty_shops
  betting_casino_gambling
  bicycle_shops
  billiard_pool_establishments
  boat_dealers
  boat_rentals_and_leases
  book_stores
  books_periodicals_and_newspapers
  bowling_alleys
  bus_lines
  business_secretarial_schools
  buying_shopping_services
  cable_satellite_and_other_pay_television_and_radio
  camera_and_photographic_supply_stores
  candy_nut_and_confectionery_stores
  car_and_truck_dealers_new_used
  car_and_truck_dealers_used_only
  car_rental_agencies
  car_washes
  carpentry_services
  carpet_upholstery_cleaning
  caterers
  charitable_and_social_service_organizations_fundraising
  chemicals_and_allied_products
  child_care_services
  childrens_and_infants_wear_stores
  chiropodists_podiatrists
  chiropractors
  cigar_stores_and_stands
  civic_social_fraternal_associations
  cleaning_and_maintenance
  clothing_rental
  colleges_universities
  commercial_equipment
  commercial_footwear
  commercial_photography_art_and_graphics
  commuter_transport_and_ferries
  computer_network_services
  computer_programming
  computer_repair
  computer_software_stores
  computers_peripherals_and_software
  concrete_work_services
  construction_materials
  consulting_public_relations
  correspondence_schools
  cosmetic_stores
  counseling_services
  country_clubs
  courier_services
  court_costs
  credit_reporting_agencies
  cruise_lines
  dairy_products_stores
  dance_hall_studios_schools
  dating_escort_services
  dentists_orthodontists
  department_stores
  detective_agencies
  digital_goods_applications
  digital_goods_games
  digital_goods_large_volume
  digital_goods_media
  direct_marketing_catalog_merchant
  direct_marketing_combination_catalog_and_retail_merchant
  direct_marketing_inbound_telemarketing
  direct_marketing_insurance_services
  direct_marketing_other
  direct_marketing_outbound_telemarketing
  direct_marketing_subscription
  direct_marketing_travel
  discount_stores
  doctors
  door_to_door_sales
  drapery_window_covering_and_upholstery_stores
  drinking_places
  drug_stores_and_pharmacies
  drugs_drug_proprietaries_and_druggist_sundries
  dry_cleaners
  durable_goods
  duty_free_stores
  eating_places_restaurants
  educational_services
  electric_razor_stores
  electrical_parts_and_equipment
  electrical_services
  electronics_repair_shops
  electronics_stores
  elementary_secondary_schools
  employment_temp_agencies
  equipment_rental
  exterminating_services
  family_clothing_stores
  fast_food_restaurants
  financial_institutions
  fines_government_administrative_entities
  fireplace_fireplace_screens_and_accessories_stores
  floor_covering_stores
  florists
  florists_supplies_nursery_stock_and_flowers
  freezer_and_locker_meat_provisioners
  fuel_dealers_non_automotive
  funeral_services_crematories
  furniture_home_furnishings_and_equipment_stores_except_appliances
  furniture_repair_refinishing
  furriers_and_fur_shops
  general_services
  gift_card_novelty_and_souvenir_shops
  glass_paint_and_wallpaper_stores
  glassware_crystal_stores
  golf_courses_public
  government_services
  grocery_stores_supermarkets
  hardware_equipment_and_supplies
  hardware_stores
  health_and_beauty_spas
  hearing_aids_sales_and_supplies
  heating_plumbing_a_c
  hobby_toy_and_game_shops
  home_supply_warehouse_stores
  hospitals
  hotels_motels_and_resorts
  household_appliance_stores
  industrial_supplies
  information_retrieval_services
  insurance_default
  insurance_underwriting_premiums
  intra_company_purchases
  jewelry_stores_watches_clocks_and_silverware_stores
  landscaping_services
  laundries
  laundry_cleaning_services
  legal_services_attorneys
  luggage_and_leather_goods_stores
  lumber_building_materials_stores
  manual_cash_disburse
  marinas_service_and_supplies
  masonry_stonework_and_plaster
  massage_parlors
  medical_and_dental_labs
  medical_dental_ophthalmic_and_hospital_equipment_and_supplies
  medical_services
  membership_organizations
  mens_and_boys_clothing_and_accessories_stores
  mens_womens_clothing_stores
  metal_service_centers
  miscellaneous
  miscellaneous_apparel_and_accessory_shops
  miscellaneous_auto_dealers
  miscellaneous_business_services
  miscellaneous_food_stores
  miscellaneous_general_merchandise
  miscellaneous_general_services
  miscellaneous_home_furnishing_specialty_stores
  miscellaneous_publishing_and_printing
  miscellaneous_recreation_services
  miscellaneous_repair_shops
  miscellaneous_specialty_retail
  mobile_home_dealers
  motion_picture_theaters
  motor_freight_carriers_and_trucking
  motor_homes_dealers
  motor_vehicle_supplies_and_new_parts
  motorcycle_shops_and_dealers
  motorcycle_shops_dealers
  music_stores_musical_instruments_pianos_and_sheet_music
  news_dealers_and_newsstands
  non_fi_money_orders
  non_fi_stored_value_card_purchase_load
  nondurable_goods
  nurseries_lawn_and_garden_supply_stores
  nursing_personal_care
  office_and_commercial_furniture
  opticians_eyeglasses
  optometrists_ophthalmologist
  orthopedic_goods_prosthetic_devices
  osteopaths
  package_stores_beer_wine_and_liquor
  paints_varnishes_and_supplies
  parking_lots_garages
  passenger_railways
  pawn_shops
  pet_shops_pet_food_and_supplies
  petroleum_and_petroleum_products
  photo_developing
  photographic_photocopy_microfilm_equipment_and_supplies
  photographic_studios
  picture_video_production
  piece_goods_notions_and_other_dry_goods
  plumbing_heating_equipment_and_supplies
  political_organizations
  postal_services_government_only
  precious_stones_and_metals_watches_and_jewelry
  professional_services
  public_warehousing_and_storage
  quick_copy_repro_and_blueprint
  railroads
  real_estate_agents_and_managers_rentals
  record_stores
  recreational_vehicle_rentals
  religious_goods_stores
  religious_organizations
  roofing_siding_sheet_metal
  secretarial_support_services
  security_brokers_dealers
  service_stations
  sewing_needlework_fabric_and_piece_goods_stores
  shoe_repair_hat_cleaning
  shoe_stores
  small_appliance_repair
  snowmobile_dealers
  special_trade_services
  specialty_cleaning
  sporting_goods_stores
  sporting_recreation_camps
  sports_and_riding_apparel_stores
  sports_clubs_fields
  stamp_and_coin_stores
  stationary_office_supplies_printing_and_writing_paper
  stationery_stores_office_and_school_supply_stores
  swimming_pools_sales
  t_ui_travel_germany
  tailors_alterations
  tax_payments_government_agencies
  tax_preparation_services
  taxicabs_limousines
  telecommunication_equipment_and_telephone_sales
  telecommunication_services
  telegraph_services
  tent_and_awning_shops
  testing_laboratories
  theatrical_ticket_agencies
  timeshares
  tire_retreading_and_repair
  tolls_bridge_fees
  tourist_attractions_and_exhibits
  towing_services
  trailer_parks_campgrounds
  transportation_services
  travel_agencies_tour_operators
  truck_stop_iteration
  truck_utility_trailer_rentals
  typesetting_plate_making_and_related_services
  typewriter_stores
  u_s_federal_government_agencies_or_departments
  uniforms_commercial_clothing
  used_merchandise_and_secondhand_stores
  utilities
  variety_stores
  veterinary_services
  video_amusement_game_supplies
  video_game_arcades
  video_tape_rental_stores
  vocational_trade_schools
  watch_jewelry_repair
  welding_repair
  wholesale_clubs
  wig_and_toupee_stores
  wires_money_orders
  womens_accessory_and_specialty_shops
  womens_ready_to_wear_stores
  wrecking_and_salvage_yards
}

type Stripe_IssuingCardholderSpendingLimit {
  """Maximum amount allowed to spend per interval."""
  amount: Int

  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories.
  """
  categories: [Stripe_IssuingCardholderSpendingLimitCategoriesProperty]

  """Interval (or event) to which the amount applies."""
  interval: Stripe_IssuingCardholderSpendingLimitIntervalProperty
}

enum Stripe_IssuingCardholderSpendingLimitCategoriesProperty {
  ac_refrigeration_repair
  accounting_bookkeeping_services
  advertising_services
  agricultural_cooperative
  airlines_air_carriers
  airports_flying_fields
  ambulance_services
  amusement_parks_carnivals
  antique_reproductions
  antique_shops
  aquariums
  architectural_surveying_services
  art_dealers_and_galleries
  artists_supply_and_craft_shops
  auto_and_home_supply_stores
  auto_body_repair_shops
  auto_paint_shops
  auto_service_shops
  automated_cash_disburse
  automated_fuel_dispensers
  automobile_associations
  automotive_parts_and_accessories_stores
  automotive_tire_stores
  bail_and_bond_payments
  bakeries
  bands_orchestras
  barber_and_beauty_shops
  betting_casino_gambling
  bicycle_shops
  billiard_pool_establishments
  boat_dealers
  boat_rentals_and_leases
  book_stores
  books_periodicals_and_newspapers
  bowling_alleys
  bus_lines
  business_secretarial_schools
  buying_shopping_services
  cable_satellite_and_other_pay_television_and_radio
  camera_and_photographic_supply_stores
  candy_nut_and_confectionery_stores
  car_and_truck_dealers_new_used
  car_and_truck_dealers_used_only
  car_rental_agencies
  car_washes
  carpentry_services
  carpet_upholstery_cleaning
  caterers
  charitable_and_social_service_organizations_fundraising
  chemicals_and_allied_products
  child_care_services
  childrens_and_infants_wear_stores
  chiropodists_podiatrists
  chiropractors
  cigar_stores_and_stands
  civic_social_fraternal_associations
  cleaning_and_maintenance
  clothing_rental
  colleges_universities
  commercial_equipment
  commercial_footwear
  commercial_photography_art_and_graphics
  commuter_transport_and_ferries
  computer_network_services
  computer_programming
  computer_repair
  computer_software_stores
  computers_peripherals_and_software
  concrete_work_services
  construction_materials
  consulting_public_relations
  correspondence_schools
  cosmetic_stores
  counseling_services
  country_clubs
  courier_services
  court_costs
  credit_reporting_agencies
  cruise_lines
  dairy_products_stores
  dance_hall_studios_schools
  dating_escort_services
  dentists_orthodontists
  department_stores
  detective_agencies
  digital_goods_applications
  digital_goods_games
  digital_goods_large_volume
  digital_goods_media
  direct_marketing_catalog_merchant
  direct_marketing_combination_catalog_and_retail_merchant
  direct_marketing_inbound_telemarketing
  direct_marketing_insurance_services
  direct_marketing_other
  direct_marketing_outbound_telemarketing
  direct_marketing_subscription
  direct_marketing_travel
  discount_stores
  doctors
  door_to_door_sales
  drapery_window_covering_and_upholstery_stores
  drinking_places
  drug_stores_and_pharmacies
  drugs_drug_proprietaries_and_druggist_sundries
  dry_cleaners
  durable_goods
  duty_free_stores
  eating_places_restaurants
  educational_services
  electric_razor_stores
  electrical_parts_and_equipment
  electrical_services
  electronics_repair_shops
  electronics_stores
  elementary_secondary_schools
  employment_temp_agencies
  equipment_rental
  exterminating_services
  family_clothing_stores
  fast_food_restaurants
  financial_institutions
  fines_government_administrative_entities
  fireplace_fireplace_screens_and_accessories_stores
  floor_covering_stores
  florists
  florists_supplies_nursery_stock_and_flowers
  freezer_and_locker_meat_provisioners
  fuel_dealers_non_automotive
  funeral_services_crematories
  furniture_home_furnishings_and_equipment_stores_except_appliances
  furniture_repair_refinishing
  furriers_and_fur_shops
  general_services
  gift_card_novelty_and_souvenir_shops
  glass_paint_and_wallpaper_stores
  glassware_crystal_stores
  golf_courses_public
  government_services
  grocery_stores_supermarkets
  hardware_equipment_and_supplies
  hardware_stores
  health_and_beauty_spas
  hearing_aids_sales_and_supplies
  heating_plumbing_a_c
  hobby_toy_and_game_shops
  home_supply_warehouse_stores
  hospitals
  hotels_motels_and_resorts
  household_appliance_stores
  industrial_supplies
  information_retrieval_services
  insurance_default
  insurance_underwriting_premiums
  intra_company_purchases
  jewelry_stores_watches_clocks_and_silverware_stores
  landscaping_services
  laundries
  laundry_cleaning_services
  legal_services_attorneys
  luggage_and_leather_goods_stores
  lumber_building_materials_stores
  manual_cash_disburse
  marinas_service_and_supplies
  masonry_stonework_and_plaster
  massage_parlors
  medical_and_dental_labs
  medical_dental_ophthalmic_and_hospital_equipment_and_supplies
  medical_services
  membership_organizations
  mens_and_boys_clothing_and_accessories_stores
  mens_womens_clothing_stores
  metal_service_centers
  miscellaneous
  miscellaneous_apparel_and_accessory_shops
  miscellaneous_auto_dealers
  miscellaneous_business_services
  miscellaneous_food_stores
  miscellaneous_general_merchandise
  miscellaneous_general_services
  miscellaneous_home_furnishing_specialty_stores
  miscellaneous_publishing_and_printing
  miscellaneous_recreation_services
  miscellaneous_repair_shops
  miscellaneous_specialty_retail
  mobile_home_dealers
  motion_picture_theaters
  motor_freight_carriers_and_trucking
  motor_homes_dealers
  motor_vehicle_supplies_and_new_parts
  motorcycle_shops_and_dealers
  motorcycle_shops_dealers
  music_stores_musical_instruments_pianos_and_sheet_music
  news_dealers_and_newsstands
  non_fi_money_orders
  non_fi_stored_value_card_purchase_load
  nondurable_goods
  nurseries_lawn_and_garden_supply_stores
  nursing_personal_care
  office_and_commercial_furniture
  opticians_eyeglasses
  optometrists_ophthalmologist
  orthopedic_goods_prosthetic_devices
  osteopaths
  package_stores_beer_wine_and_liquor
  paints_varnishes_and_supplies
  parking_lots_garages
  passenger_railways
  pawn_shops
  pet_shops_pet_food_and_supplies
  petroleum_and_petroleum_products
  photo_developing
  photographic_photocopy_microfilm_equipment_and_supplies
  photographic_studios
  picture_video_production
  piece_goods_notions_and_other_dry_goods
  plumbing_heating_equipment_and_supplies
  political_organizations
  postal_services_government_only
  precious_stones_and_metals_watches_and_jewelry
  professional_services
  public_warehousing_and_storage
  quick_copy_repro_and_blueprint
  railroads
  real_estate_agents_and_managers_rentals
  record_stores
  recreational_vehicle_rentals
  religious_goods_stores
  religious_organizations
  roofing_siding_sheet_metal
  secretarial_support_services
  security_brokers_dealers
  service_stations
  sewing_needlework_fabric_and_piece_goods_stores
  shoe_repair_hat_cleaning
  shoe_stores
  small_appliance_repair
  snowmobile_dealers
  special_trade_services
  specialty_cleaning
  sporting_goods_stores
  sporting_recreation_camps
  sports_and_riding_apparel_stores
  sports_clubs_fields
  stamp_and_coin_stores
  stationary_office_supplies_printing_and_writing_paper
  stationery_stores_office_and_school_supply_stores
  swimming_pools_sales
  t_ui_travel_germany
  tailors_alterations
  tax_payments_government_agencies
  tax_preparation_services
  taxicabs_limousines
  telecommunication_equipment_and_telephone_sales
  telecommunication_services
  telegraph_services
  tent_and_awning_shops
  testing_laboratories
  theatrical_ticket_agencies
  timeshares
  tire_retreading_and_repair
  tolls_bridge_fees
  tourist_attractions_and_exhibits
  towing_services
  trailer_parks_campgrounds
  transportation_services
  travel_agencies_tour_operators
  truck_stop_iteration
  truck_utility_trailer_rentals
  typesetting_plate_making_and_related_services
  typewriter_stores
  u_s_federal_government_agencies_or_departments
  uniforms_commercial_clothing
  used_merchandise_and_secondhand_stores
  utilities
  variety_stores
  veterinary_services
  video_amusement_game_supplies
  video_game_arcades
  video_tape_rental_stores
  vocational_trade_schools
  watch_jewelry_repair
  welding_repair
  wholesale_clubs
  wig_and_toupee_stores
  wires_money_orders
  womens_accessory_and_specialty_shops
  womens_ready_to_wear_stores
  wrecking_and_salvage_yards
}

enum Stripe_IssuingCardholderSpendingLimitIntervalProperty {
  all_time
  daily
  monthly
  per_authorization
  weekly
  yearly
}

enum Stripe_IssuingCardholderStatusProperty {
  active
  blocked
  inactive
}

enum Stripe_IssuingCardholderTypeProperty {
  company
  individual
}

enum Stripe_IssuingCardObjectProperty {
  issuingDOTcard
}

union Stripe_IssuingCardReplacedByProperty = WrappedString | Stripe_IssuingCard

union Stripe_IssuingCardReplacementForProperty = WrappedString | Stripe_IssuingCard

enum Stripe_IssuingCardReplacementReasonProperty {
  damaged
  expired
  lost
  stolen
}

type Stripe_IssuingCardShipping {
  address: Stripe_Address

  """The delivery company that shipped a card."""
  carrier: Stripe_IssuingCardShippingCarrierProperty

  """
  A unix timestamp representing a best estimate of when the card will be delivered.
  """
  eta: Int

  """Recipient name."""
  name: String

  """Shipment service, such as `standard` or `express`."""
  service: Stripe_IssuingCardShippingServiceProperty

  """The delivery status of the card."""
  status: Stripe_IssuingCardShippingStatusProperty

  """A tracking number for a card shipment."""
  tracking_number: String

  """
  A link to the shipping carrier's site where you can view detailed information about a card shipment.
  """
  tracking_url: String

  """Packaging options."""
  type: Stripe_IssuingCardShippingTypeProperty
}

enum Stripe_IssuingCardShippingCarrierProperty {
  dhl
  fedex
  royal_mail
  usps
}

enum Stripe_IssuingCardShippingServiceProperty {
  express
  priority
  standard
}

enum Stripe_IssuingCardShippingStatusProperty {
  canceled
  delivered
  failure
  pending
  returned
  shipped
}

enum Stripe_IssuingCardShippingTypeProperty {
  bulk
  individual
}

type Stripe_IssuingCardAuthorizationControls {
  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`.
  """
  allowed_categories: [Stripe_IssuingCardAuthorizationControlsAllowedCategoriesProperty]

  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`.
  """
  blocked_categories: [Stripe_IssuingCardAuthorizationControlsBlockedCategoriesProperty]

  """
  Limit spending with amount-based rules that apply across any cards this card replaced (i.e., its `replacement_for` card and _that_ card's `replacement_for` card, up the chain).
  """
  spending_limits: [Stripe_IssuingCardSpendingLimit]

  """
  Currency of the amounts within `spending_limits`. Always the same as the currency of the card.
  """
  spending_limits_currency: String
}

enum Stripe_IssuingCardAuthorizationControlsAllowedCategoriesProperty {
  ac_refrigeration_repair
  accounting_bookkeeping_services
  advertising_services
  agricultural_cooperative
  airlines_air_carriers
  airports_flying_fields
  ambulance_services
  amusement_parks_carnivals
  antique_reproductions
  antique_shops
  aquariums
  architectural_surveying_services
  art_dealers_and_galleries
  artists_supply_and_craft_shops
  auto_and_home_supply_stores
  auto_body_repair_shops
  auto_paint_shops
  auto_service_shops
  automated_cash_disburse
  automated_fuel_dispensers
  automobile_associations
  automotive_parts_and_accessories_stores
  automotive_tire_stores
  bail_and_bond_payments
  bakeries
  bands_orchestras
  barber_and_beauty_shops
  betting_casino_gambling
  bicycle_shops
  billiard_pool_establishments
  boat_dealers
  boat_rentals_and_leases
  book_stores
  books_periodicals_and_newspapers
  bowling_alleys
  bus_lines
  business_secretarial_schools
  buying_shopping_services
  cable_satellite_and_other_pay_television_and_radio
  camera_and_photographic_supply_stores
  candy_nut_and_confectionery_stores
  car_and_truck_dealers_new_used
  car_and_truck_dealers_used_only
  car_rental_agencies
  car_washes
  carpentry_services
  carpet_upholstery_cleaning
  caterers
  charitable_and_social_service_organizations_fundraising
  chemicals_and_allied_products
  child_care_services
  childrens_and_infants_wear_stores
  chiropodists_podiatrists
  chiropractors
  cigar_stores_and_stands
  civic_social_fraternal_associations
  cleaning_and_maintenance
  clothing_rental
  colleges_universities
  commercial_equipment
  commercial_footwear
  commercial_photography_art_and_graphics
  commuter_transport_and_ferries
  computer_network_services
  computer_programming
  computer_repair
  computer_software_stores
  computers_peripherals_and_software
  concrete_work_services
  construction_materials
  consulting_public_relations
  correspondence_schools
  cosmetic_stores
  counseling_services
  country_clubs
  courier_services
  court_costs
  credit_reporting_agencies
  cruise_lines
  dairy_products_stores
  dance_hall_studios_schools
  dating_escort_services
  dentists_orthodontists
  department_stores
  detective_agencies
  digital_goods_applications
  digital_goods_games
  digital_goods_large_volume
  digital_goods_media
  direct_marketing_catalog_merchant
  direct_marketing_combination_catalog_and_retail_merchant
  direct_marketing_inbound_telemarketing
  direct_marketing_insurance_services
  direct_marketing_other
  direct_marketing_outbound_telemarketing
  direct_marketing_subscription
  direct_marketing_travel
  discount_stores
  doctors
  door_to_door_sales
  drapery_window_covering_and_upholstery_stores
  drinking_places
  drug_stores_and_pharmacies
  drugs_drug_proprietaries_and_druggist_sundries
  dry_cleaners
  durable_goods
  duty_free_stores
  eating_places_restaurants
  educational_services
  electric_razor_stores
  electrical_parts_and_equipment
  electrical_services
  electronics_repair_shops
  electronics_stores
  elementary_secondary_schools
  employment_temp_agencies
  equipment_rental
  exterminating_services
  family_clothing_stores
  fast_food_restaurants
  financial_institutions
  fines_government_administrative_entities
  fireplace_fireplace_screens_and_accessories_stores
  floor_covering_stores
  florists
  florists_supplies_nursery_stock_and_flowers
  freezer_and_locker_meat_provisioners
  fuel_dealers_non_automotive
  funeral_services_crematories
  furniture_home_furnishings_and_equipment_stores_except_appliances
  furniture_repair_refinishing
  furriers_and_fur_shops
  general_services
  gift_card_novelty_and_souvenir_shops
  glass_paint_and_wallpaper_stores
  glassware_crystal_stores
  golf_courses_public
  government_services
  grocery_stores_supermarkets
  hardware_equipment_and_supplies
  hardware_stores
  health_and_beauty_spas
  hearing_aids_sales_and_supplies
  heating_plumbing_a_c
  hobby_toy_and_game_shops
  home_supply_warehouse_stores
  hospitals
  hotels_motels_and_resorts
  household_appliance_stores
  industrial_supplies
  information_retrieval_services
  insurance_default
  insurance_underwriting_premiums
  intra_company_purchases
  jewelry_stores_watches_clocks_and_silverware_stores
  landscaping_services
  laundries
  laundry_cleaning_services
  legal_services_attorneys
  luggage_and_leather_goods_stores
  lumber_building_materials_stores
  manual_cash_disburse
  marinas_service_and_supplies
  masonry_stonework_and_plaster
  massage_parlors
  medical_and_dental_labs
  medical_dental_ophthalmic_and_hospital_equipment_and_supplies
  medical_services
  membership_organizations
  mens_and_boys_clothing_and_accessories_stores
  mens_womens_clothing_stores
  metal_service_centers
  miscellaneous
  miscellaneous_apparel_and_accessory_shops
  miscellaneous_auto_dealers
  miscellaneous_business_services
  miscellaneous_food_stores
  miscellaneous_general_merchandise
  miscellaneous_general_services
  miscellaneous_home_furnishing_specialty_stores
  miscellaneous_publishing_and_printing
  miscellaneous_recreation_services
  miscellaneous_repair_shops
  miscellaneous_specialty_retail
  mobile_home_dealers
  motion_picture_theaters
  motor_freight_carriers_and_trucking
  motor_homes_dealers
  motor_vehicle_supplies_and_new_parts
  motorcycle_shops_and_dealers
  motorcycle_shops_dealers
  music_stores_musical_instruments_pianos_and_sheet_music
  news_dealers_and_newsstands
  non_fi_money_orders
  non_fi_stored_value_card_purchase_load
  nondurable_goods
  nurseries_lawn_and_garden_supply_stores
  nursing_personal_care
  office_and_commercial_furniture
  opticians_eyeglasses
  optometrists_ophthalmologist
  orthopedic_goods_prosthetic_devices
  osteopaths
  package_stores_beer_wine_and_liquor
  paints_varnishes_and_supplies
  parking_lots_garages
  passenger_railways
  pawn_shops
  pet_shops_pet_food_and_supplies
  petroleum_and_petroleum_products
  photo_developing
  photographic_photocopy_microfilm_equipment_and_supplies
  photographic_studios
  picture_video_production
  piece_goods_notions_and_other_dry_goods
  plumbing_heating_equipment_and_supplies
  political_organizations
  postal_services_government_only
  precious_stones_and_metals_watches_and_jewelry
  professional_services
  public_warehousing_and_storage
  quick_copy_repro_and_blueprint
  railroads
  real_estate_agents_and_managers_rentals
  record_stores
  recreational_vehicle_rentals
  religious_goods_stores
  religious_organizations
  roofing_siding_sheet_metal
  secretarial_support_services
  security_brokers_dealers
  service_stations
  sewing_needlework_fabric_and_piece_goods_stores
  shoe_repair_hat_cleaning
  shoe_stores
  small_appliance_repair
  snowmobile_dealers
  special_trade_services
  specialty_cleaning
  sporting_goods_stores
  sporting_recreation_camps
  sports_and_riding_apparel_stores
  sports_clubs_fields
  stamp_and_coin_stores
  stationary_office_supplies_printing_and_writing_paper
  stationery_stores_office_and_school_supply_stores
  swimming_pools_sales
  t_ui_travel_germany
  tailors_alterations
  tax_payments_government_agencies
  tax_preparation_services
  taxicabs_limousines
  telecommunication_equipment_and_telephone_sales
  telecommunication_services
  telegraph_services
  tent_and_awning_shops
  testing_laboratories
  theatrical_ticket_agencies
  timeshares
  tire_retreading_and_repair
  tolls_bridge_fees
  tourist_attractions_and_exhibits
  towing_services
  trailer_parks_campgrounds
  transportation_services
  travel_agencies_tour_operators
  truck_stop_iteration
  truck_utility_trailer_rentals
  typesetting_plate_making_and_related_services
  typewriter_stores
  u_s_federal_government_agencies_or_departments
  uniforms_commercial_clothing
  used_merchandise_and_secondhand_stores
  utilities
  variety_stores
  veterinary_services
  video_amusement_game_supplies
  video_game_arcades
  video_tape_rental_stores
  vocational_trade_schools
  watch_jewelry_repair
  welding_repair
  wholesale_clubs
  wig_and_toupee_stores
  wires_money_orders
  womens_accessory_and_specialty_shops
  womens_ready_to_wear_stores
  wrecking_and_salvage_yards
}

enum Stripe_IssuingCardAuthorizationControlsBlockedCategoriesProperty {
  ac_refrigeration_repair
  accounting_bookkeeping_services
  advertising_services
  agricultural_cooperative
  airlines_air_carriers
  airports_flying_fields
  ambulance_services
  amusement_parks_carnivals
  antique_reproductions
  antique_shops
  aquariums
  architectural_surveying_services
  art_dealers_and_galleries
  artists_supply_and_craft_shops
  auto_and_home_supply_stores
  auto_body_repair_shops
  auto_paint_shops
  auto_service_shops
  automated_cash_disburse
  automated_fuel_dispensers
  automobile_associations
  automotive_parts_and_accessories_stores
  automotive_tire_stores
  bail_and_bond_payments
  bakeries
  bands_orchestras
  barber_and_beauty_shops
  betting_casino_gambling
  bicycle_shops
  billiard_pool_establishments
  boat_dealers
  boat_rentals_and_leases
  book_stores
  books_periodicals_and_newspapers
  bowling_alleys
  bus_lines
  business_secretarial_schools
  buying_shopping_services
  cable_satellite_and_other_pay_television_and_radio
  camera_and_photographic_supply_stores
  candy_nut_and_confectionery_stores
  car_and_truck_dealers_new_used
  car_and_truck_dealers_used_only
  car_rental_agencies
  car_washes
  carpentry_services
  carpet_upholstery_cleaning
  caterers
  charitable_and_social_service_organizations_fundraising
  chemicals_and_allied_products
  child_care_services
  childrens_and_infants_wear_stores
  chiropodists_podiatrists
  chiropractors
  cigar_stores_and_stands
  civic_social_fraternal_associations
  cleaning_and_maintenance
  clothing_rental
  colleges_universities
  commercial_equipment
  commercial_footwear
  commercial_photography_art_and_graphics
  commuter_transport_and_ferries
  computer_network_services
  computer_programming
  computer_repair
  computer_software_stores
  computers_peripherals_and_software
  concrete_work_services
  construction_materials
  consulting_public_relations
  correspondence_schools
  cosmetic_stores
  counseling_services
  country_clubs
  courier_services
  court_costs
  credit_reporting_agencies
  cruise_lines
  dairy_products_stores
  dance_hall_studios_schools
  dating_escort_services
  dentists_orthodontists
  department_stores
  detective_agencies
  digital_goods_applications
  digital_goods_games
  digital_goods_large_volume
  digital_goods_media
  direct_marketing_catalog_merchant
  direct_marketing_combination_catalog_and_retail_merchant
  direct_marketing_inbound_telemarketing
  direct_marketing_insurance_services
  direct_marketing_other
  direct_marketing_outbound_telemarketing
  direct_marketing_subscription
  direct_marketing_travel
  discount_stores
  doctors
  door_to_door_sales
  drapery_window_covering_and_upholstery_stores
  drinking_places
  drug_stores_and_pharmacies
  drugs_drug_proprietaries_and_druggist_sundries
  dry_cleaners
  durable_goods
  duty_free_stores
  eating_places_restaurants
  educational_services
  electric_razor_stores
  electrical_parts_and_equipment
  electrical_services
  electronics_repair_shops
  electronics_stores
  elementary_secondary_schools
  employment_temp_agencies
  equipment_rental
  exterminating_services
  family_clothing_stores
  fast_food_restaurants
  financial_institutions
  fines_government_administrative_entities
  fireplace_fireplace_screens_and_accessories_stores
  floor_covering_stores
  florists
  florists_supplies_nursery_stock_and_flowers
  freezer_and_locker_meat_provisioners
  fuel_dealers_non_automotive
  funeral_services_crematories
  furniture_home_furnishings_and_equipment_stores_except_appliances
  furniture_repair_refinishing
  furriers_and_fur_shops
  general_services
  gift_card_novelty_and_souvenir_shops
  glass_paint_and_wallpaper_stores
  glassware_crystal_stores
  golf_courses_public
  government_services
  grocery_stores_supermarkets
  hardware_equipment_and_supplies
  hardware_stores
  health_and_beauty_spas
  hearing_aids_sales_and_supplies
  heating_plumbing_a_c
  hobby_toy_and_game_shops
  home_supply_warehouse_stores
  hospitals
  hotels_motels_and_resorts
  household_appliance_stores
  industrial_supplies
  information_retrieval_services
  insurance_default
  insurance_underwriting_premiums
  intra_company_purchases
  jewelry_stores_watches_clocks_and_silverware_stores
  landscaping_services
  laundries
  laundry_cleaning_services
  legal_services_attorneys
  luggage_and_leather_goods_stores
  lumber_building_materials_stores
  manual_cash_disburse
  marinas_service_and_supplies
  masonry_stonework_and_plaster
  massage_parlors
  medical_and_dental_labs
  medical_dental_ophthalmic_and_hospital_equipment_and_supplies
  medical_services
  membership_organizations
  mens_and_boys_clothing_and_accessories_stores
  mens_womens_clothing_stores
  metal_service_centers
  miscellaneous
  miscellaneous_apparel_and_accessory_shops
  miscellaneous_auto_dealers
  miscellaneous_business_services
  miscellaneous_food_stores
  miscellaneous_general_merchandise
  miscellaneous_general_services
  miscellaneous_home_furnishing_specialty_stores
  miscellaneous_publishing_and_printing
  miscellaneous_recreation_services
  miscellaneous_repair_shops
  miscellaneous_specialty_retail
  mobile_home_dealers
  motion_picture_theaters
  motor_freight_carriers_and_trucking
  motor_homes_dealers
  motor_vehicle_supplies_and_new_parts
  motorcycle_shops_and_dealers
  motorcycle_shops_dealers
  music_stores_musical_instruments_pianos_and_sheet_music
  news_dealers_and_newsstands
  non_fi_money_orders
  non_fi_stored_value_card_purchase_load
  nondurable_goods
  nurseries_lawn_and_garden_supply_stores
  nursing_personal_care
  office_and_commercial_furniture
  opticians_eyeglasses
  optometrists_ophthalmologist
  orthopedic_goods_prosthetic_devices
  osteopaths
  package_stores_beer_wine_and_liquor
  paints_varnishes_and_supplies
  parking_lots_garages
  passenger_railways
  pawn_shops
  pet_shops_pet_food_and_supplies
  petroleum_and_petroleum_products
  photo_developing
  photographic_photocopy_microfilm_equipment_and_supplies
  photographic_studios
  picture_video_production
  piece_goods_notions_and_other_dry_goods
  plumbing_heating_equipment_and_supplies
  political_organizations
  postal_services_government_only
  precious_stones_and_metals_watches_and_jewelry
  professional_services
  public_warehousing_and_storage
  quick_copy_repro_and_blueprint
  railroads
  real_estate_agents_and_managers_rentals
  record_stores
  recreational_vehicle_rentals
  religious_goods_stores
  religious_organizations
  roofing_siding_sheet_metal
  secretarial_support_services
  security_brokers_dealers
  service_stations
  sewing_needlework_fabric_and_piece_goods_stores
  shoe_repair_hat_cleaning
  shoe_stores
  small_appliance_repair
  snowmobile_dealers
  special_trade_services
  specialty_cleaning
  sporting_goods_stores
  sporting_recreation_camps
  sports_and_riding_apparel_stores
  sports_clubs_fields
  stamp_and_coin_stores
  stationary_office_supplies_printing_and_writing_paper
  stationery_stores_office_and_school_supply_stores
  swimming_pools_sales
  t_ui_travel_germany
  tailors_alterations
  tax_payments_government_agencies
  tax_preparation_services
  taxicabs_limousines
  telecommunication_equipment_and_telephone_sales
  telecommunication_services
  telegraph_services
  tent_and_awning_shops
  testing_laboratories
  theatrical_ticket_agencies
  timeshares
  tire_retreading_and_repair
  tolls_bridge_fees
  tourist_attractions_and_exhibits
  towing_services
  trailer_parks_campgrounds
  transportation_services
  travel_agencies_tour_operators
  truck_stop_iteration
  truck_utility_trailer_rentals
  typesetting_plate_making_and_related_services
  typewriter_stores
  u_s_federal_government_agencies_or_departments
  uniforms_commercial_clothing
  used_merchandise_and_secondhand_stores
  utilities
  variety_stores
  veterinary_services
  video_amusement_game_supplies
  video_game_arcades
  video_tape_rental_stores
  vocational_trade_schools
  watch_jewelry_repair
  welding_repair
  wholesale_clubs
  wig_and_toupee_stores
  wires_money_orders
  womens_accessory_and_specialty_shops
  womens_ready_to_wear_stores
  wrecking_and_salvage_yards
}

type Stripe_IssuingCardSpendingLimit {
  """Maximum amount allowed to spend per interval."""
  amount: Int

  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories.
  """
  categories: [Stripe_IssuingCardSpendingLimitCategoriesProperty]

  """Interval (or event) to which the amount applies."""
  interval: Stripe_IssuingCardSpendingLimitIntervalProperty
}

enum Stripe_IssuingCardSpendingLimitCategoriesProperty {
  ac_refrigeration_repair
  accounting_bookkeeping_services
  advertising_services
  agricultural_cooperative
  airlines_air_carriers
  airports_flying_fields
  ambulance_services
  amusement_parks_carnivals
  antique_reproductions
  antique_shops
  aquariums
  architectural_surveying_services
  art_dealers_and_galleries
  artists_supply_and_craft_shops
  auto_and_home_supply_stores
  auto_body_repair_shops
  auto_paint_shops
  auto_service_shops
  automated_cash_disburse
  automated_fuel_dispensers
  automobile_associations
  automotive_parts_and_accessories_stores
  automotive_tire_stores
  bail_and_bond_payments
  bakeries
  bands_orchestras
  barber_and_beauty_shops
  betting_casino_gambling
  bicycle_shops
  billiard_pool_establishments
  boat_dealers
  boat_rentals_and_leases
  book_stores
  books_periodicals_and_newspapers
  bowling_alleys
  bus_lines
  business_secretarial_schools
  buying_shopping_services
  cable_satellite_and_other_pay_television_and_radio
  camera_and_photographic_supply_stores
  candy_nut_and_confectionery_stores
  car_and_truck_dealers_new_used
  car_and_truck_dealers_used_only
  car_rental_agencies
  car_washes
  carpentry_services
  carpet_upholstery_cleaning
  caterers
  charitable_and_social_service_organizations_fundraising
  chemicals_and_allied_products
  child_care_services
  childrens_and_infants_wear_stores
  chiropodists_podiatrists
  chiropractors
  cigar_stores_and_stands
  civic_social_fraternal_associations
  cleaning_and_maintenance
  clothing_rental
  colleges_universities
  commercial_equipment
  commercial_footwear
  commercial_photography_art_and_graphics
  commuter_transport_and_ferries
  computer_network_services
  computer_programming
  computer_repair
  computer_software_stores
  computers_peripherals_and_software
  concrete_work_services
  construction_materials
  consulting_public_relations
  correspondence_schools
  cosmetic_stores
  counseling_services
  country_clubs
  courier_services
  court_costs
  credit_reporting_agencies
  cruise_lines
  dairy_products_stores
  dance_hall_studios_schools
  dating_escort_services
  dentists_orthodontists
  department_stores
  detective_agencies
  digital_goods_applications
  digital_goods_games
  digital_goods_large_volume
  digital_goods_media
  direct_marketing_catalog_merchant
  direct_marketing_combination_catalog_and_retail_merchant
  direct_marketing_inbound_telemarketing
  direct_marketing_insurance_services
  direct_marketing_other
  direct_marketing_outbound_telemarketing
  direct_marketing_subscription
  direct_marketing_travel
  discount_stores
  doctors
  door_to_door_sales
  drapery_window_covering_and_upholstery_stores
  drinking_places
  drug_stores_and_pharmacies
  drugs_drug_proprietaries_and_druggist_sundries
  dry_cleaners
  durable_goods
  duty_free_stores
  eating_places_restaurants
  educational_services
  electric_razor_stores
  electrical_parts_and_equipment
  electrical_services
  electronics_repair_shops
  electronics_stores
  elementary_secondary_schools
  employment_temp_agencies
  equipment_rental
  exterminating_services
  family_clothing_stores
  fast_food_restaurants
  financial_institutions
  fines_government_administrative_entities
  fireplace_fireplace_screens_and_accessories_stores
  floor_covering_stores
  florists
  florists_supplies_nursery_stock_and_flowers
  freezer_and_locker_meat_provisioners
  fuel_dealers_non_automotive
  funeral_services_crematories
  furniture_home_furnishings_and_equipment_stores_except_appliances
  furniture_repair_refinishing
  furriers_and_fur_shops
  general_services
  gift_card_novelty_and_souvenir_shops
  glass_paint_and_wallpaper_stores
  glassware_crystal_stores
  golf_courses_public
  government_services
  grocery_stores_supermarkets
  hardware_equipment_and_supplies
  hardware_stores
  health_and_beauty_spas
  hearing_aids_sales_and_supplies
  heating_plumbing_a_c
  hobby_toy_and_game_shops
  home_supply_warehouse_stores
  hospitals
  hotels_motels_and_resorts
  household_appliance_stores
  industrial_supplies
  information_retrieval_services
  insurance_default
  insurance_underwriting_premiums
  intra_company_purchases
  jewelry_stores_watches_clocks_and_silverware_stores
  landscaping_services
  laundries
  laundry_cleaning_services
  legal_services_attorneys
  luggage_and_leather_goods_stores
  lumber_building_materials_stores
  manual_cash_disburse
  marinas_service_and_supplies
  masonry_stonework_and_plaster
  massage_parlors
  medical_and_dental_labs
  medical_dental_ophthalmic_and_hospital_equipment_and_supplies
  medical_services
  membership_organizations
  mens_and_boys_clothing_and_accessories_stores
  mens_womens_clothing_stores
  metal_service_centers
  miscellaneous
  miscellaneous_apparel_and_accessory_shops
  miscellaneous_auto_dealers
  miscellaneous_business_services
  miscellaneous_food_stores
  miscellaneous_general_merchandise
  miscellaneous_general_services
  miscellaneous_home_furnishing_specialty_stores
  miscellaneous_publishing_and_printing
  miscellaneous_recreation_services
  miscellaneous_repair_shops
  miscellaneous_specialty_retail
  mobile_home_dealers
  motion_picture_theaters
  motor_freight_carriers_and_trucking
  motor_homes_dealers
  motor_vehicle_supplies_and_new_parts
  motorcycle_shops_and_dealers
  motorcycle_shops_dealers
  music_stores_musical_instruments_pianos_and_sheet_music
  news_dealers_and_newsstands
  non_fi_money_orders
  non_fi_stored_value_card_purchase_load
  nondurable_goods
  nurseries_lawn_and_garden_supply_stores
  nursing_personal_care
  office_and_commercial_furniture
  opticians_eyeglasses
  optometrists_ophthalmologist
  orthopedic_goods_prosthetic_devices
  osteopaths
  package_stores_beer_wine_and_liquor
  paints_varnishes_and_supplies
  parking_lots_garages
  passenger_railways
  pawn_shops
  pet_shops_pet_food_and_supplies
  petroleum_and_petroleum_products
  photo_developing
  photographic_photocopy_microfilm_equipment_and_supplies
  photographic_studios
  picture_video_production
  piece_goods_notions_and_other_dry_goods
  plumbing_heating_equipment_and_supplies
  political_organizations
  postal_services_government_only
  precious_stones_and_metals_watches_and_jewelry
  professional_services
  public_warehousing_and_storage
  quick_copy_repro_and_blueprint
  railroads
  real_estate_agents_and_managers_rentals
  record_stores
  recreational_vehicle_rentals
  religious_goods_stores
  religious_organizations
  roofing_siding_sheet_metal
  secretarial_support_services
  security_brokers_dealers
  service_stations
  sewing_needlework_fabric_and_piece_goods_stores
  shoe_repair_hat_cleaning
  shoe_stores
  small_appliance_repair
  snowmobile_dealers
  special_trade_services
  specialty_cleaning
  sporting_goods_stores
  sporting_recreation_camps
  sports_and_riding_apparel_stores
  sports_clubs_fields
  stamp_and_coin_stores
  stationary_office_supplies_printing_and_writing_paper
  stationery_stores_office_and_school_supply_stores
  swimming_pools_sales
  t_ui_travel_germany
  tailors_alterations
  tax_payments_government_agencies
  tax_preparation_services
  taxicabs_limousines
  telecommunication_equipment_and_telephone_sales
  telecommunication_services
  telegraph_services
  tent_and_awning_shops
  testing_laboratories
  theatrical_ticket_agencies
  timeshares
  tire_retreading_and_repair
  tolls_bridge_fees
  tourist_attractions_and_exhibits
  towing_services
  trailer_parks_campgrounds
  transportation_services
  travel_agencies_tour_operators
  truck_stop_iteration
  truck_utility_trailer_rentals
  typesetting_plate_making_and_related_services
  typewriter_stores
  u_s_federal_government_agencies_or_departments
  uniforms_commercial_clothing
  used_merchandise_and_secondhand_stores
  utilities
  variety_stores
  veterinary_services
  video_amusement_game_supplies
  video_game_arcades
  video_tape_rental_stores
  vocational_trade_schools
  watch_jewelry_repair
  welding_repair
  wholesale_clubs
  wig_and_toupee_stores
  wires_money_orders
  womens_accessory_and_specialty_shops
  womens_ready_to_wear_stores
  wrecking_and_salvage_yards
}

enum Stripe_IssuingCardSpendingLimitIntervalProperty {
  all_time
  daily
  monthly
  per_authorization
  weekly
  yearly
}

enum Stripe_IssuingCardStatusProperty {
  active
  canceled
  inactive
}

enum Stripe_IssuingCardTypeProperty {
  physical
  virtual
}

type Stripe_IssuingCardWallets {
  apple_pay: Stripe_IssuingCardApplePay
  google_pay: Stripe_IssuingCardGooglePay

  """Unique identifier for a card used with digital wallets"""
  primary_account_identifier: String
}

type Stripe_IssuingCardApplePay {
  """Apple Pay Eligibility"""
  eligible: Boolean

  """Reason the card is ineligible for Apple Pay"""
  ineligible_reason: Stripe_IssuingCardApplePayIneligibleReasonProperty
}

enum Stripe_IssuingCardApplePayIneligibleReasonProperty {
  missing_agreement
  missing_cardholder_contact
  unsupported_region
}

type Stripe_IssuingCardGooglePay {
  """Google Pay Eligibility"""
  eligible: Boolean

  """Reason the card is ineligible for Google Pay"""
  ineligible_reason: Stripe_IssuingCardGooglePayIneligibleReasonProperty
}

enum Stripe_IssuingCardGooglePayIneligibleReasonProperty {
  missing_agreement
  missing_cardholder_contact
  unsupported_region
}

union Stripe_IssuingAuthorizationCardholderProperty = WrappedString | Stripe_IssuingCardholder

type Stripe_IssuingAuthorizationMerchantData {
  """
  A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values.
  """
  category: String

  """The merchant category code for the sellerâ€™s business"""
  category_code: String

  """City where the seller is located"""
  city: String

  """Country where the seller is located"""
  country: String

  """Name of the seller"""
  name: String

  """Identifier assigned to the seller by the card brand"""
  network_id: String

  """Postal code where the seller is located"""
  postal_code: String

  """State where the seller is located"""
  state: String
}

enum Stripe_IssuingAuthorizationObjectProperty {
  issuingDOTauthorization
}

type Stripe_IssuingAuthorizationPendingRequest {
  """
  The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount: Int
  amount_details: Stripe_IssuingAuthorizationAmountDetails

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.
  """
  is_amount_controllable: Boolean

  """
  The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  merchant_amount: Int

  """The local currency the merchant is requesting to authorize."""
  merchant_currency: String
}

type Stripe_IssuingAuthorizationRequest {
  """
  The `pending_request.amount` at the time of the request, presented in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved.
  """
  amount: Int
  amount_details: Stripe_IssuingAuthorizationAmountDetails

  """Whether this request was approved."""
  approved: Boolean

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  merchant_amount: Int

  """
  The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  merchant_currency: String

  """The reason for the approval or decline."""
  reason: Stripe_IssuingAuthorizationRequestReasonProperty
}

enum Stripe_IssuingAuthorizationRequestReasonProperty {
  account_disabled
  card_active
  card_inactive
  cardholder_inactive
  cardholder_verification_required
  insufficient_funds
  not_allowed
  spending_controls
  suspected_fraud
  verification_failed
  webhook_approved
  webhook_declined
  webhook_timeout
}

enum Stripe_IssuingAuthorizationStatusProperty {
  closed
  pending
  reversed
}

type Stripe_IssuingTransaction {
  """
  The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount: Int
  amount_details: Stripe_IssuingTransactionAmountDetails
  authorization: Stripe_IssuingTransactionAuthorizationProperty
  balance_transaction: Stripe_IssuingTransactionBalanceTransactionProperty
  card: Stripe_IssuingTransactionCardProperty
  cardholder: Stripe_IssuingTransactionCardholderProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  dispute: Stripe_IssuingTransactionDisputeProperty

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency.
  """
  merchant_amount: Int

  """The currency with which the merchant is taking payment."""
  merchant_currency: String
  merchant_data: Stripe_IssuingAuthorizationMerchantData

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_IssuingTransactionObjectProperty
  purchase_details: Stripe_IssuingTransactionPurchaseDetails

  """The nature of the transaction."""
  type: Stripe_IssuingTransactionTypeProperty

  """
  The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`.
  """
  wallet: Stripe_IssuingTransactionWalletProperty
}

type Stripe_IssuingTransactionAmountDetails {
  """The fee charged by the ATM for the cash withdrawal."""
  atm_fee: Int
}

union Stripe_IssuingTransactionAuthorizationProperty = WrappedString | Stripe_IssuingAuthorization

union Stripe_IssuingTransactionBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction

union Stripe_IssuingTransactionCardProperty = WrappedString | Stripe_IssuingCard

union Stripe_IssuingTransactionCardholderProperty = WrappedString | Stripe_IssuingCardholder

union Stripe_IssuingTransactionDisputeProperty = WrappedString | Stripe_IssuingDispute

type Stripe_IssuingDispute {
  """
  Disputed amount. Usually the amount of the `transaction`, but can differ (usually because of currency fluctuation).
  """
  amount: Int

  """List of balance transactions associated with the dispute."""
  balance_transactions: [Stripe_BalanceTransaction]

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """The currency the `transaction` was made in."""
  currency: String
  evidence: Stripe_IssuingDisputeEvidence

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_IssuingDisputeObjectProperty

  """Current status of the dispute."""
  status: Stripe_IssuingDisputeStatusProperty
  transaction: Stripe_IssuingDisputeTransactionProperty
}

type Stripe_IssuingDisputeEvidence {
  canceled: Stripe_IssuingDisputeCanceledEvidence
  duplicate: Stripe_IssuingDisputeDuplicateEvidence
  fraudulent: Stripe_IssuingDisputeFraudulentEvidence
  merchandise_not_as_described: Stripe_IssuingDisputeMerchandiseNotAsDescribedEvidence
  not_received: Stripe_IssuingDisputeNotReceivedEvidence
  other: Stripe_IssuingDisputeOtherEvidence

  """
  The reason for filing the dispute. Its value will match the field containing the evidence.
  """
  reason: Stripe_IssuingDisputeEvidenceReasonProperty
  service_not_as_described: Stripe_IssuingDisputeServiceNotAsDescribedEvidence
}

type Stripe_IssuingDisputeCanceledEvidence {
  additional_documentation: Stripe_IssuingDisputeCanceledEvidenceAdditionalDocumentationProperty

  """Date when order was canceled."""
  canceled_at: Int

  """Whether the cardholder was provided with a cancellation policy."""
  cancellation_policy_provided: Boolean

  """Reason for canceling the order."""
  cancellation_reason: String

  """Date when the cardholder expected to receive the product."""
  expected_at: Int

  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String

  """Description of the merchandise or service that was purchased."""
  product_description: String

  """Whether the product was a merchandise or service."""
  product_type: Stripe_IssuingDisputeCanceledEvidenceProductTypeProperty

  """Result of cardholder's attempt to return the product."""
  return_status: Stripe_IssuingDisputeCanceledEvidenceReturnStatusProperty

  """Date when the product was returned or attempted to be returned."""
  returned_at: Int
}

union Stripe_IssuingDisputeCanceledEvidenceAdditionalDocumentationProperty = WrappedString | Stripe_File

enum Stripe_IssuingDisputeCanceledEvidenceProductTypeProperty {
  merchandise
  service
}

enum Stripe_IssuingDisputeCanceledEvidenceReturnStatusProperty {
  merchant_rejected
  successful
}

type Stripe_IssuingDisputeDuplicateEvidence {
  additional_documentation: Stripe_IssuingDisputeDuplicateEvidenceAdditionalDocumentationProperty
  card_statement: Stripe_IssuingDisputeDuplicateEvidenceCardStatementProperty
  cash_receipt: Stripe_IssuingDisputeDuplicateEvidenceCashReceiptProperty
  check_image: Stripe_IssuingDisputeDuplicateEvidenceCheckImageProperty

  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String

  """
  Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one.
  """
  original_transaction: String
}

union Stripe_IssuingDisputeDuplicateEvidenceAdditionalDocumentationProperty = WrappedString | Stripe_File

union Stripe_IssuingDisputeDuplicateEvidenceCardStatementProperty = WrappedString | Stripe_File

union Stripe_IssuingDisputeDuplicateEvidenceCashReceiptProperty = WrappedString | Stripe_File

union Stripe_IssuingDisputeDuplicateEvidenceCheckImageProperty = WrappedString | Stripe_File

type Stripe_IssuingDisputeFraudulentEvidence {
  additional_documentation: Stripe_IssuingDisputeFraudulentEvidenceAdditionalDocumentationProperty

  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String
}

union Stripe_IssuingDisputeFraudulentEvidenceAdditionalDocumentationProperty = WrappedString | Stripe_File

type Stripe_IssuingDisputeMerchandiseNotAsDescribedEvidence {
  additional_documentation: Stripe_IssuingDisputeMerchandiseNotAsDescribedEvidenceAdditionalDocumentationProperty

  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String

  """Date when the product was received."""
  received_at: Int

  """Description of the cardholder's attempt to return the product."""
  return_description: String

  """Result of cardholder's attempt to return the product."""
  return_status: Stripe_IssuingDisputeMerchandiseNotAsDescribedEvidenceReturnStatusProperty

  """Date when the product was returned or attempted to be returned."""
  returned_at: Int
}

union Stripe_IssuingDisputeMerchandiseNotAsDescribedEvidenceAdditionalDocumentationProperty = WrappedString | Stripe_File

enum Stripe_IssuingDisputeMerchandiseNotAsDescribedEvidenceReturnStatusProperty {
  merchant_rejected
  successful
}

type Stripe_IssuingDisputeNotReceivedEvidence {
  additional_documentation: Stripe_IssuingDisputeNotReceivedEvidenceAdditionalDocumentationProperty

  """Date when the cardholder expected to receive the product."""
  expected_at: Int

  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String

  """Description of the merchandise or service that was purchased."""
  product_description: String

  """Whether the product was a merchandise or service."""
  product_type: Stripe_IssuingDisputeNotReceivedEvidenceProductTypeProperty
}

union Stripe_IssuingDisputeNotReceivedEvidenceAdditionalDocumentationProperty = WrappedString | Stripe_File

enum Stripe_IssuingDisputeNotReceivedEvidenceProductTypeProperty {
  merchandise
  service
}

type Stripe_IssuingDisputeOtherEvidence {
  additional_documentation: Stripe_IssuingDisputeOtherEvidenceAdditionalDocumentationProperty

  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String

  """Description of the merchandise or service that was purchased."""
  product_description: String

  """Whether the product was a merchandise or service."""
  product_type: Stripe_IssuingDisputeOtherEvidenceProductTypeProperty
}

union Stripe_IssuingDisputeOtherEvidenceAdditionalDocumentationProperty = WrappedString | Stripe_File

enum Stripe_IssuingDisputeOtherEvidenceProductTypeProperty {
  merchandise
  service
}

enum Stripe_IssuingDisputeEvidenceReasonProperty {
  canceled
  duplicate
  fraudulent
  merchandise_not_as_described
  not_received
  other
  service_not_as_described
}

type Stripe_IssuingDisputeServiceNotAsDescribedEvidence {
  additional_documentation: Stripe_IssuingDisputeServiceNotAsDescribedEvidenceAdditionalDocumentationProperty

  """Date when order was canceled."""
  canceled_at: Int

  """Reason for canceling the order."""
  cancellation_reason: String

  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String

  """Date when the product was received."""
  received_at: Int
}

union Stripe_IssuingDisputeServiceNotAsDescribedEvidenceAdditionalDocumentationProperty = WrappedString | Stripe_File

enum Stripe_IssuingDisputeObjectProperty {
  issuingDOTdispute
}

enum Stripe_IssuingDisputeStatusProperty {
  expired
  lost
  submitted
  unsubmitted
  won
}

union Stripe_IssuingDisputeTransactionProperty = WrappedString | Stripe_IssuingTransaction

enum Stripe_IssuingTransactionObjectProperty {
  issuingDOTtransaction
}

type Stripe_IssuingTransactionPurchaseDetails {
  flight: Stripe_IssuingTransactionFlightData
  fuel: Stripe_IssuingTransactionFuelData
  lodging: Stripe_IssuingTransactionLodgingData

  """The line items in the purchase."""
  receipt: [Stripe_IssuingTransactionReceiptData]

  """A merchant-specific order number."""
  reference: String
}

type Stripe_IssuingTransactionFlightData {
  """The time that the flight departed."""
  departure_at: Int

  """The name of the passenger."""
  passenger_name: String

  """Whether the ticket is refundable."""
  refundable: Boolean

  """The legs of the trip."""
  segments: [Stripe_IssuingTransactionFlightDataLeg]

  """The travel agency that issued the ticket."""
  travel_agency: String
}

type Stripe_IssuingTransactionFlightDataLeg {
  """The three-letter IATA airport code of the flight's destination."""
  arrival_airport_code: String

  """The airline carrier code."""
  carrier: String

  """The three-letter IATA airport code that the flight departed from."""
  departure_airport_code: String

  """The flight number."""
  flight_number: String

  """The flight's service class."""
  service_class: String

  """Whether a stopover is allowed on this flight."""
  stopover_allowed: Boolean
}

type Stripe_IssuingTransactionFuelData {
  """
  The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`.
  """
  type: String

  """The units for `volume_decimal`. One of `us_gallon` or `liter`."""
  unit: String

  """
  The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places.
  """
  unit_cost_decimal: String

  """
  The volume of the fuel that was pumped, represented as a decimal string with at most 12 decimal places.
  """
  volume_decimal: String
}

type Stripe_IssuingTransactionLodgingData {
  """The time of checking into the lodging."""
  check_in_at: Int

  """The number of nights stayed at the lodging."""
  nights: Int
}

type Stripe_IssuingTransactionReceiptData {
  """
  The description of the item. The maximum length of this field is 26 characters.
  """
  description: String

  """The quantity of the item."""
  quantity: Float

  """The total for this line item in cents."""
  total: Int

  """The unit cost of the item in cents."""
  unit_cost: Int
}

enum Stripe_IssuingTransactionTypeProperty {
  capture
  refund
}

enum Stripe_IssuingTransactionWalletProperty {
  apple_pay
  google_pay
  samsung_pay
}

type Stripe_IssuingAuthorizationVerificationData {
  """
  Whether the cardholder provided an address first line and if it matched the cardholderâ€™s `billing.address.line1`.
  """
  address_line1_check: Stripe_IssuingAuthorizationVerificationDataAddressLine1CheckProperty

  """
  Whether the cardholder provided a postal code and if it matched the cardholderâ€™s `billing.address.postal_code`.
  """
  address_postal_code_check: Stripe_IssuingAuthorizationVerificationDataAddressPostalCodeCheckProperty

  """
  Whether the cardholder provided a CVC and if it matched Stripeâ€™s record.
  """
  cvc_check: Stripe_IssuingAuthorizationVerificationDataCvcCheckProperty

  """
  Whether the cardholder provided an expiry date and if it matched Stripeâ€™s record.
  """
  expiry_check: Stripe_IssuingAuthorizationVerificationDataExpiryCheckProperty
}

enum Stripe_IssuingAuthorizationVerificationDataAddressLine1CheckProperty {
  match
  mismatch
  not_provided
}

enum Stripe_IssuingAuthorizationVerificationDataAddressPostalCodeCheckProperty {
  match
  mismatch
  not_provided
}

enum Stripe_IssuingAuthorizationVerificationDataCvcCheckProperty {
  match
  mismatch
  not_provided
}

enum Stripe_IssuingAuthorizationVerificationDataExpiryCheckProperty {
  match
  mismatch
  not_provided
}

type Stripe_Payout {
  """Amount (in %s) to be transferred to your bank account or debit card."""
  amount: Int

  """
  Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.
  """
  arrival_date: Int

  """
  Returns `true` if the payout was created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule), and `false` if it was [requested manually](https://stripe.com/docs/payouts#manual-payouts).
  """
  automatic: Boolean
  balance_transaction: Stripe_PayoutBalanceTransactionProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  destination: Stripe_PayoutDestinationProperty
  failure_balance_transaction: Stripe_PayoutFailureBalanceTransactionProperty

  """
  Error code explaining reason for payout failure if available. See [Types of payout failures](https://stripe.com/docs/api#payout_failures) for a list of failure codes.
  """
  failure_code: String

  """
  Message to user further explaining reason for payout failure if available.
  """
  failure_message: String

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces](https://stripe.com/blog/instant-payouts-for-marketplaces) for more information.)
  """
  method: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_PayoutObjectProperty
  original_payout: Stripe_PayoutOriginalPayoutProperty
  reversed_by: Stripe_PayoutReversedByProperty

  """
  The source balance this payout came from. One of `card`, `fpx`, or `bank_account`.
  """
  source_type: String

  """
  Extra information about a payout to be displayed on the user's bank statement.
  """
  statement_descriptor: String

  """
  Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it is submitted to the bank, when it becomes `in_transit`. The status then changes to `paid` if the transaction goes through, or to `failed` or `canceled` (within 5 business days). Some failed payouts may initially show as `paid` but then change to `failed`.
  """
  status: String

  """Can be `bank_account` or `card`."""
  type: Stripe_PayoutTypeProperty
}

union Stripe_PayoutBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction

union Stripe_PayoutDestinationProperty = WrappedString | Stripe_BankAccount | Stripe_Card | Stripe_DeletedBankAccount | Stripe_DeletedCard

type Stripe_DeletedBankAccount {
  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
  """
  currency: String

  """Always true for a deleted object"""
  deleted: Boolean

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_DeletedBankAccountObjectProperty
}

enum Stripe_DeletedBankAccountObjectProperty {
  bank_account
}

type Stripe_DeletedCard {
  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
  """
  currency: String

  """Always true for a deleted object"""
  deleted: Boolean

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_DeletedCardObjectProperty
}

enum Stripe_DeletedCardObjectProperty {
  card
}

union Stripe_PayoutFailureBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction

enum Stripe_PayoutObjectProperty {
  payout
}

union Stripe_PayoutOriginalPayoutProperty = WrappedString | Stripe_Payout

union Stripe_PayoutReversedByProperty = WrappedString | Stripe_Payout

enum Stripe_PayoutTypeProperty {
  bank_account
  card
}

type Stripe_PlatformTaxFee {
  """The Connected account that incurred this charge."""
  account: String

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_PlatformTaxFeeObjectProperty

  """The payment object that caused this tax to be inflicted."""
  source_transaction: String

  """The type of tax (VAT)."""
  type: String
}

enum Stripe_PlatformTaxFeeObjectProperty {
  platform_tax_fee
}

type Stripe_Refund {
  """Amount, in %s."""
  amount: Int
  balance_transaction: Stripe_RefundBalanceTransactionProperty
  charge: Stripe_RefundChargeProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)
  """
  description: String
  failure_balance_transaction: Stripe_RefundFailureBalanceTransactionProperty

  """
  If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`.
  """
  failure_reason: String

  """Unique identifier for the object."""
  id: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject
  next_action: Stripe_RefundNextAction

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_RefundObjectProperty
  payment_intent: Stripe_RefundPaymentIntentProperty

  """
  Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
  """
  reason: Stripe_RefundReasonProperty

  """
  This is the transaction number that appears on email receipts sent for this refund.
  """
  receipt_number: String
  source_transfer_reversal: Stripe_RefundSourceTransferReversalProperty

  """
  Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details.
  """
  status: String
  transfer_reversal: Stripe_RefundTransferReversalProperty
}

union Stripe_RefundBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction

union Stripe_RefundChargeProperty = WrappedString | Stripe_Charge

union Stripe_RefundFailureBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction

type Stripe_RefundNextAction {
  display_details: Stripe_RefundNextActionDisplayDetails

  """Type of the next action to perform."""
  type: String
}

type Stripe_RefundNextActionDisplayDetails {
  email_sent: Stripe_EmailSent

  """The expiry timestamp."""
  expires_at: Int
}

type Stripe_EmailSent {
  """The timestamp when the email was sent."""
  email_sent_at: Int

  """The recipient's email address."""
  email_sent_to: String
}

enum Stripe_RefundObjectProperty {
  refund
}

union Stripe_RefundPaymentIntentProperty = WrappedString | Stripe_PaymentIntent

enum Stripe_RefundReasonProperty {
  duplicate
  expired_uncaptured_charge
  fraudulent
  requested_by_customer
}

union Stripe_RefundSourceTransferReversalProperty = WrappedString | Stripe_TransferReversal

type Stripe_TransferReversal {
  """Amount, in %s."""
  amount: Int
  balance_transaction: Stripe_TransferReversalBalanceTransactionProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  destination_payment_refund: Stripe_TransferReversalDestinationPaymentRefundProperty

  """Unique identifier for the object."""
  id: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_TransferReversalObjectProperty
  source_refund: Stripe_TransferReversalSourceRefundProperty
  transfer: Stripe_TransferReversalTransferProperty
}

union Stripe_TransferReversalBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction

union Stripe_TransferReversalDestinationPaymentRefundProperty = WrappedString | Stripe_Refund

enum Stripe_TransferReversalObjectProperty {
  transfer_reversal
}

union Stripe_TransferReversalSourceRefundProperty = WrappedString | Stripe_Refund

union Stripe_TransferReversalTransferProperty = WrappedString | Stripe_Transfer

type Stripe_Transfer {
  """Amount in %s to be transferred."""
  amount: Int

  """
  Amount in %s reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).
  """
  amount_reversed: Int
  balance_transaction: Stripe_TransferBalanceTransactionProperty

  """Time that this record of the transfer was first created."""
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  destination: Stripe_TransferDestinationProperty
  destination_payment: Stripe_TransferDestinationPaymentProperty

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_TransferObjectProperty

  """A list of reversals that have been applied to the transfer."""
  reversals: Stripe_TransferReversalsProperty

  """
  Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.
  """
  reversed: Boolean
  source_transaction: Stripe_TransferSourceTransactionProperty

  """
  The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`.
  """
  source_type: String

  """
  A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details.
  """
  transfer_group: String
}

union Stripe_TransferBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction

union Stripe_TransferDestinationProperty = WrappedString | Stripe_Account

union Stripe_TransferDestinationPaymentProperty = WrappedString | Stripe_Charge

enum Stripe_TransferObjectProperty {
  transfer
}

"""A list of reversals that have been applied to the transfer."""
type Stripe_TransferReversalsProperty {
  """Details about each object."""
  data: [Stripe_TransferReversal!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_TransferReversalsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

enum Stripe_TransferReversalsObjectProperty {
  list
}

union Stripe_TransferSourceTransactionProperty = WrappedString | Stripe_Charge

union Stripe_RefundTransferReversalProperty = WrappedString | Stripe_TransferReversal

type Stripe_ReserveTransaction {
  amount: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_ReserveTransactionObjectProperty
}

enum Stripe_ReserveTransactionObjectProperty {
  reserve_transaction
}

type Stripe_TaxDeductedAtSource {
  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_TaxDeductedAtSourceObjectProperty

  """
  The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
  """
  period_end: Int

  """
  The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
  """
  period_start: Int

  """The TAN that was supplied to Stripe when TDS was assessed"""
  tax_deduction_account_number: String
}

enum Stripe_TaxDeductedAtSourceObjectProperty {
  tax_deducted_at_source
}

type Stripe_Topup {
  """Amount transferred."""
  amount: Int
  balance_transaction: Stripe_TopupBalanceTransactionProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """
  Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up.
  """
  expected_availability_date: Int

  """
  Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes).
  """
  failure_code: String

  """
  Message to user further explaining reason for top-up failure if available.
  """
  failure_message: String

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_TopupObjectProperty
  source: Stripe_Source

  """
  Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter.
  """
  statement_descriptor: String

  """
  The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`.
  """
  status: Stripe_TopupStatusProperty

  """A string that identifies this top-up as part of a group."""
  transfer_group: String
}

union Stripe_TopupBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction

enum Stripe_TopupObjectProperty {
  topup
}

enum Stripe_TopupStatusProperty {
  canceled
  failed
  pending
  reversed
  succeeded
}

enum Stripe_BalanceTransactionTypeProperty {
  adjustment
  advance
  advance_funding
  anticipation_repayment
  application_fee
  application_fee_refund
  charge
  connect_collection_transfer
  contribution
  issuing_authorization_hold
  issuing_authorization_release
  issuing_dispute
  issuing_transaction
  payment
  payment_failure_refund
  payment_refund
  payout
  payout_cancel
  payout_failure
  refund
  refund_failure
  reserve_transaction
  reserved_funds
  stripe_fee
  stripe_fx_fee
  tax_fee
  topup
  topup_reversal
  transfer
  transfer_cancel
  transfer_failure
  transfer_refund
}

union Stripe_ApplicationFeeChargeProperty = WrappedString | Stripe_Charge

enum Stripe_ApplicationFeeObjectProperty {
  application_fee
}

union Stripe_ApplicationFeeOriginatingTransactionProperty = WrappedString | Stripe_Charge

"""A list of refunds that have been applied to the fee."""
type Stripe_ApplicationFeeRefundsProperty {
  """Details about each object."""
  data: [Stripe_FeeRefund!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_ApplicationFeeRefundsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

enum Stripe_ApplicationFeeRefundsObjectProperty {
  list
}

union Stripe_ChargeBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction

union Stripe_ChargeFailureBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction

type Stripe_ChargeFraudDetails {
  """Assessments from Stripe. If set, the value is `fraudulent`."""
  stripe_report: String

  """
  Assessments reported by you. If set, possible values of are `safe` and `fraudulent`.
  """
  user_report: String
}

union Stripe_ChargeInvoiceProperty = WrappedString | Stripe_Invoice

type Stripe_Invoice {
  """
  The country of the business associated with this invoice, most often the business creating the invoice.
  """
  account_country: String

  """
  The public name of the business associated with this invoice, most often the business creating the invoice.
  """
  account_name: String

  """
  The account tax IDs associated with the invoice. Only editable when the invoice is a draft.
  """
  account_tax_ids: [Stripe_InvoiceAccountTaxIdsProperty]

  """
  Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`.
  """
  amount_due: Int

  """The amount, in %s, that was paid."""
  amount_paid: Int

  """The amount remaining, in %s, that is due."""
  amount_remaining: Int

  """
  The fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid.
  """
  application_fee_amount: Int

  """
  Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.
  """
  attempt_count: Int

  """
  Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users.
  """
  attempted: Boolean

  """
  Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action.
  """
  auto_advance: Boolean
  automatic_tax: Stripe_AutomaticTax

  """
  Indicates the reason why the invoice was created. `subscription_cycle` indicates an invoice created by a subscription advancing into a new period. `subscription_create` indicates an invoice created due to creating a subscription. `subscription_update` indicates an invoice created due to updating a subscription. `subscription` is set for all old invoices to indicate either a change to a subscription or a period advancement. `manual` is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The `upcoming` value is reserved for simulated invoices per the upcoming invoice endpoint. `subscription_threshold` indicates an invoice created due to a billing threshold being reached.
  """
  billing_reason: Stripe_InvoiceBillingReasonProperty
  charge: Stripe_InvoiceChargeProperty

  """
  Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.
  """
  collection_method: Stripe_InvoiceCollectionMethodProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """Custom fields displayed on the invoice."""
  custom_fields: [Stripe_InvoiceSettingCustomField]
  customer: String
  customer_address: Stripe_Address

  """
  The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated.
  """
  customer_email: String

  """
  The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated.
  """
  customer_name: String

  """
  The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated.
  """
  customer_phone: String
  customer_shipping: Stripe_Shipping

  """
  The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated.
  """
  customer_tax_exempt: Stripe_InvoiceCustomerTaxExemptProperty

  """
  The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated.
  """
  customer_tax_ids: [Stripe_InvoicesResourceInvoiceTaxId]
  default_payment_method: Stripe_InvoiceDefaultPaymentMethodProperty
  default_source: Stripe_InvoiceDefaultSourceProperty

  """The tax rates applied to this invoice, if any."""
  default_tax_rates: [Stripe_TaxRate]

  """
  An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.
  """
  description: String
  discount: Stripe_Discount
  discounts: [String]

  """
  The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`.
  """
  due_date: Int

  """
  Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null.
  """
  ending_balance: Int

  """Footer displayed on the invoice."""
  footer: String

  """
  The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null.
  """
  hosted_invoice_url: String

  """Unique identifier for the object."""
  id: String

  """
  The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null.
  """
  invoice_pdf: String
  last_finalization_error: Stripe_ApiErrors

  """
  The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.
  """
  lines: Stripe_InvoiceLinesProperty

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`.
  """
  next_payment_attempt: Int

  """
  A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified.
  """
  number: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_InvoiceObjectProperty
  on_behalf_of: Stripe_InvoiceOnBehalfOfProperty

  """
  Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.
  """
  paid: Boolean

  """
  Returns true if the invoice was manually marked paid, returns false if the invoice hasn't been paid yet or was paid on Stripe.
  """
  paid_out_of_band: Boolean
  payment_intent: Stripe_InvoicePaymentIntentProperty
  payment_settings: Stripe_InvoicesPaymentSettings

  """
  End of the usage period during which invoice items were added to this invoice.
  """
  period_end: Int

  """
  Start of the usage period during which invoice items were added to this invoice.
  """
  period_start: Int

  """Total amount of all post-payment credit notes issued for this invoice."""
  post_payment_credit_notes_amount: Int

  """Total amount of all pre-payment credit notes issued for this invoice."""
  pre_payment_credit_notes_amount: Int
  quote: Stripe_InvoiceQuoteProperty

  """
  This is the transaction number that appears on email receipts sent for this invoice.
  """
  receipt_number: String

  """
  Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance.
  """
  starting_balance: Int

  """
  Extra information about an invoice for the customer's credit card statement.
  """
  statement_descriptor: String

  """
  The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
  """
  status: Stripe_InvoiceStatusProperty
  status_transitions: Stripe_InvoicesStatusTransitions
  subscription: Stripe_InvoiceSubscriptionProperty

  """
  Only set for upcoming invoices that preview prorations. The time used to calculate prorations.
  """
  subscription_proration_date: Int

  """
  Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated
  """
  subtotal: Int

  """
  The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice.
  """
  tax: Int
  test_clock: Stripe_InvoiceTestClockProperty
  threshold_reason: Stripe_InvoiceThresholdReason

  """Total after discounts and taxes."""
  total: Int

  """The aggregate amounts calculated per discount across all line items."""
  total_discount_amounts: [Stripe_DiscountsResourceDiscountAmount]

  """The aggregate amounts calculated per tax rate for all line items."""
  total_tax_amounts: [Stripe_InvoiceTaxAmount]
  transfer_data: Stripe_InvoiceTransferData

  """
  Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created.
  """
  webhooks_delivered_at: Int
}

union Stripe_InvoiceAccountTaxIdsProperty = WrappedString | Stripe_TaxId

type Stripe_TaxId {
  """Two-letter ISO code representing the country of the tax ID."""
  country: String

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  customer: Stripe_TaxIdCustomerProperty

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_TaxIdObjectProperty

  """
  Type of the tax ID, one of `ae_trn`, `au_abn`, `au_arn`, `bg_uic`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `es_cif`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `th_vat`, `tw_vat`, `ua_vat`, `us_ein`, or `za_vat`. Note that some legacy tax IDs have type `unknown`
  """
  type: Stripe_TaxIdTypeProperty

  """Value of the tax ID."""
  value: String
  verification: Stripe_TaxIdVerification
}

union Stripe_TaxIdCustomerProperty = WrappedString | Stripe_Customer

enum Stripe_TaxIdObjectProperty {
  tax_id
}

enum Stripe_TaxIdTypeProperty {
  ae_trn
  au_abn
  au_arn
  bg_uic
  br_cnpj
  br_cpf
  ca_bn
  ca_gst_hst
  ca_pst_bc
  ca_pst_mb
  ca_pst_sk
  ca_qst
  ch_vat
  cl_tin
  es_cif
  eu_vat
  gb_vat
  ge_vat
  hk_br
  hu_tin
  id_npwp
  il_vat
  in_gst
  is_vat
  jp_cn
  jp_rn
  kr_brn
  li_uid
  mx_rfc
  my_frp
  my_itn
  my_sst
  no_vat
  nz_gst
  ru_inn
  ru_kpp
  sa_vat
  sg_gst
  sg_uen
  si_tin
  th_vat
  tw_vat
  ua_vat
  unknown
  us_ein
  za_vat
}

type Stripe_TaxIdVerification {
  """
  Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`.
  """
  status: Stripe_TaxIdVerificationStatusProperty

  """Verified address."""
  verified_address: String

  """Verified name."""
  verified_name: String
}

enum Stripe_TaxIdVerificationStatusProperty {
  pending
  unavailable
  unverified
  verified
}

type Stripe_AutomaticTax {
  """Whether Stripe automatically computes tax on this invoice."""
  enabled: Boolean

  """
  The status of the most recent automated tax calculation for this invoice.
  """
  status: Stripe_AutomaticTaxStatusProperty
}

enum Stripe_AutomaticTaxStatusProperty {
  complete
  failed
  requires_location_inputs
}

enum Stripe_InvoiceBillingReasonProperty {
  automatic_pending_invoice_item_invoice
  manual
  quote_accept
  subscription
  subscription_create
  subscription_cycle
  subscription_threshold
  subscription_update
  upcoming
}

union Stripe_InvoiceChargeProperty = WrappedString | Stripe_Charge

enum Stripe_InvoiceCollectionMethodProperty {
  charge_automatically
  send_invoice
}

enum Stripe_InvoiceCustomerTaxExemptProperty {
  exempt
  none
  reverse
}

type Stripe_InvoicesResourceInvoiceTaxId {
  """
  The type of the tax ID, one of `eu_vat`, `br_cnpj`, `br_cpf`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, or `unknown`
  """
  type: Stripe_InvoicesResourceInvoiceTaxIdTypeProperty

  """The value of the tax ID."""
  value: String
}

enum Stripe_InvoicesResourceInvoiceTaxIdTypeProperty {
  ae_trn
  au_abn
  au_arn
  bg_uic
  br_cnpj
  br_cpf
  ca_bn
  ca_gst_hst
  ca_pst_bc
  ca_pst_mb
  ca_pst_sk
  ca_qst
  ch_vat
  cl_tin
  es_cif
  eu_vat
  gb_vat
  ge_vat
  hk_br
  hu_tin
  id_npwp
  il_vat
  in_gst
  is_vat
  jp_cn
  jp_rn
  kr_brn
  li_uid
  mx_rfc
  my_frp
  my_itn
  my_sst
  no_vat
  nz_gst
  ru_inn
  ru_kpp
  sa_vat
  sg_gst
  sg_uen
  si_tin
  th_vat
  tw_vat
  ua_vat
  unknown
  us_ein
  za_vat
}

union Stripe_InvoiceDefaultPaymentMethodProperty = WrappedString | Stripe_PaymentMethod

union Stripe_InvoiceDefaultSourceProperty = WrappedString | Stripe_AlipayAccount | Stripe_BankAccount | Stripe_BitcoinReceiver | Stripe_Card | Stripe_Source

type Stripe_TaxRate {
  """
  Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
  """
  active: Boolean

  """
  Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  """
  country: String

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
  """
  description: String

  """
  The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page.
  """
  display_name: String

  """Unique identifier for the object."""
  id: String

  """This specifies if the tax rate is inclusive or exclusive."""
  inclusive: Boolean

  """
  The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customerâ€™s invoice.
  """
  jurisdiction: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_TaxRateObjectProperty

  """This represents the tax rate percent out of 100."""
  percentage: Float

  """
  [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States.
  """
  state: String

  """The high-level tax type, such as `vat` or `sales_tax`."""
  tax_type: Stripe_TaxRateTaxTypeProperty
}

enum Stripe_TaxRateObjectProperty {
  tax_rate
}

enum Stripe_TaxRateTaxTypeProperty {
  gst
  hst
  jct
  pst
  qst
  rst
  sales_tax
  vat
}

"""
The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.
"""
type Stripe_InvoiceLinesProperty {
  """Details about each object."""
  data: [Stripe_LineItem!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_InvoiceLinesObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

type Stripe_LineItem {
  """The amount, in %s."""
  amount: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """The amount of discount calculated per discount for this line item."""
  discount_amounts: [Stripe_DiscountsResourceDiscountAmount]

  """
  If true, discounts will apply to this line item. Always false for prorations.
  """
  discountable: Boolean

  """
  The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
  """
  discounts: [Stripe_LineItemDiscountsProperty]

  """Unique identifier for the object."""
  id: String

  """
  The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any.
  """
  invoice_item: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription` this will reflect the metadata of the subscription that caused the line item to be created.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_LineItemObjectProperty
  period: Stripe_InvoiceLineItemPeriod
  price: Stripe_Price

  """Whether this is a proration."""
  proration: Boolean
  proration_details: Stripe_InvoicesLineItemsProrationDetails

  """
  The quantity of the subscription, if the line item is a subscription or a proration.
  """
  quantity: Int

  """The subscription that the invoice item pertains to, if any."""
  subscription: String

  """
  The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription.
  """
  subscription_item: String

  """The amount of tax calculated per tax rate for this line item"""
  tax_amounts: [Stripe_InvoiceTaxAmount]

  """The tax rates which apply to the line item."""
  tax_rates: [Stripe_TaxRate]

  """
  A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`.
  """
  type: Stripe_LineItemTypeProperty
}

type Stripe_DiscountsResourceDiscountAmount {
  """The amount, in %s, of the discount."""
  amount: Int
  discount: Stripe_DiscountsResourceDiscountAmountDiscountProperty
}

union Stripe_DiscountsResourceDiscountAmountDiscountProperty = WrappedString | Stripe_Discount | Stripe_DeletedDiscount

type Stripe_DeletedDiscount {
  """
  The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode.
  """
  checkout_session: String
  coupon: Stripe_Coupon
  customer: String

  """Always true for a deleted object"""
  deleted: Boolean

  """
  The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array.
  """
  id: String

  """
  The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice.
  """
  invoice: String

  """
  The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item.
  """
  invoice_item: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_DeletedDiscountObjectProperty
  promotion_code: Stripe_DeletedDiscountPromotionCodeProperty

  """Date that the coupon was applied."""
  start: Int

  """
  The subscription that this coupon is applied to, if it is applied to a particular subscription.
  """
  subscription: String
}

enum Stripe_DeletedDiscountObjectProperty {
  discount
}

union Stripe_DeletedDiscountPromotionCodeProperty = WrappedString | Stripe_PromotionCode

union Stripe_LineItemDiscountsProperty = WrappedString | Stripe_Discount

enum Stripe_LineItemObjectProperty {
  line_item
}

type Stripe_InvoiceLineItemPeriod {
  """
  The end of the period, which must be greater than or equal to the start.
  """
  end: Int

  """The start of the period."""
  start: Int
}

type Stripe_InvoicesLineItemsProrationDetails {
  credited_items: Stripe_InvoicesLineItemsCreditedItems
}

type Stripe_InvoicesLineItemsCreditedItems {
  """Invoice containing the credited invoice line items"""
  invoice: String

  """Credited invoice line items"""
  invoice_line_items: [String]
}

type Stripe_InvoiceTaxAmount {
  """The amount, in %s, of the tax."""
  amount: Int

  """Whether this tax amount is inclusive or exclusive."""
  inclusive: Boolean
  tax_rate: Stripe_InvoiceTaxAmountTaxRateProperty
}

union Stripe_InvoiceTaxAmountTaxRateProperty = WrappedString | Stripe_TaxRate

enum Stripe_LineItemTypeProperty {
  invoiceitem
  subscription
}

enum Stripe_InvoiceLinesObjectProperty {
  list
}

enum Stripe_InvoiceObjectProperty {
  invoice
}

union Stripe_InvoiceOnBehalfOfProperty = WrappedString | Stripe_Account

union Stripe_InvoicePaymentIntentProperty = WrappedString | Stripe_PaymentIntent

type Stripe_InvoicesPaymentSettings {
  payment_method_options: Stripe_InvoicesPaymentMethodOptions

  """
  The list of payment method types (e.g. card) to provide to the invoiceâ€™s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoiceâ€™s default payment method, the subscriptionâ€™s default payment method, the customerâ€™s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).
  """
  payment_method_types: [Stripe_InvoicesPaymentSettingsPaymentMethodTypesProperty]
}

type Stripe_InvoicesPaymentMethodOptions {
  acss_debit: Stripe_InvoicePaymentMethodOptionsAcssDebit
  bancontact: Stripe_InvoicePaymentMethodOptionsBancontact
  card: Stripe_InvoicePaymentMethodOptionsCard
  customer_balance: Stripe_InvoicePaymentMethodOptionsCustomerBalance
  konbini: Stripe_InvoicePaymentMethodOptionsKonbini
  us_bank_account: Stripe_InvoicePaymentMethodOptionsUsBankAccount
}

type Stripe_InvoicePaymentMethodOptionsAcssDebit {
  mandate_options: Stripe_InvoicePaymentMethodOptionsAcssDebitMandateOptions

  """Bank account verification method."""
  verification_method: Stripe_InvoicePaymentMethodOptionsAcssDebitVerificationMethodProperty
}

type Stripe_InvoicePaymentMethodOptionsAcssDebitMandateOptions {
  """Transaction type of the mandate."""
  transaction_type: Stripe_InvoicePaymentMethodOptionsAcssDebitMandateOptionsTransactionTypeProperty
}

enum Stripe_InvoicePaymentMethodOptionsAcssDebitMandateOptionsTransactionTypeProperty {
  business
  personal
}

enum Stripe_InvoicePaymentMethodOptionsAcssDebitVerificationMethodProperty {
  automatic
  instant
  microdeposits
}

type Stripe_InvoicePaymentMethodOptionsBancontact {
  """
  Preferred language of the Bancontact authorization page that the customer is redirected to.
  """
  preferred_language: Stripe_InvoicePaymentMethodOptionsBancontactPreferredLanguageProperty
}

enum Stripe_InvoicePaymentMethodOptionsBancontactPreferredLanguageProperty {
  de
  en
  fr
  nl
}

type Stripe_InvoicePaymentMethodOptionsCard {
  """
  We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
  """
  request_three_d_secure: Stripe_InvoicePaymentMethodOptionsCardRequestThreeDSecureProperty
}

enum Stripe_InvoicePaymentMethodOptionsCardRequestThreeDSecureProperty {
  any
  automatic
}

type Stripe_InvoicePaymentMethodOptionsCustomerBalance {
  bank_transfer: Stripe_InvoicePaymentMethodOptionsCustomerBalanceBankTransfer

  """
  The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
  """
  funding_type: Stripe_InvoicePaymentMethodOptionsCustomerBalanceFundingTypeProperty
}

type Stripe_InvoicePaymentMethodOptionsCustomerBalanceBankTransfer {
  """
  The bank transfer type that can be used for funding. Permitted values include: `us_bank_account`, `eu_bank_account`, `id_bank_account`, `gb_bank_account`, `jp_bank_account`, `mx_bank_account`, `eu_bank_transfer`, `gb_bank_transfer`, `id_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
  """
  type: String
}

enum Stripe_InvoicePaymentMethodOptionsCustomerBalanceFundingTypeProperty {
  bank_transfer
}

type Stripe_InvoicePaymentMethodOptionsKonbini {
  result: JSONObject
}

type Stripe_InvoicePaymentMethodOptionsUsBankAccount {
  """Bank account verification method."""
  verification_method: Stripe_InvoicePaymentMethodOptionsUsBankAccountVerificationMethodProperty
}

enum Stripe_InvoicePaymentMethodOptionsUsBankAccountVerificationMethodProperty {
  automatic
  instant
  microdeposits
}

enum Stripe_InvoicesPaymentSettingsPaymentMethodTypesProperty {
  ach_credit_transfer
  ach_debit
  acss_debit
  au_becs_debit
  bacs_debit
  bancontact
  boleto
  card
  customer_balance
  fpx
  giropay
  grabpay
  ideal
  konbini
  paynow
  sepa_debit
  sofort
  us_bank_account
  wechat_pay
}

union Stripe_InvoiceQuoteProperty = WrappedString | Stripe_Quote

type Stripe_Quote {
  """Total before any discounts or taxes are applied."""
  amount_subtotal: Int

  """Total after discounts and taxes are applied."""
  amount_total: Int

  """
  The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Only applicable if there are no line items with recurring prices on the quote.
  """
  application_fee_amount: Int

  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. Only applicable if there are line items with recurring prices on the quote.
  """
  application_fee_percent: Float
  automatic_tax: Stripe_QuotesResourceAutomaticTax

  """
  Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.
  """
  collection_method: Stripe_QuoteCollectionMethodProperty
  computed: Stripe_QuotesResourceComputed

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  customer: String

  """The tax rates applied to this quote."""
  default_tax_rates: [Stripe_QuoteDefaultTaxRatesProperty]

  """A description that will be displayed on the quote PDF."""
  description: String

  """The discounts applied to this quote."""
  discounts: [Stripe_QuoteDiscountsProperty]

  """
  The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
  """
  expires_at: Int

  """A footer that will be displayed on the quote PDF."""
  footer: String
  from_quote: Stripe_QuotesResourceFromQuote

  """A header that will be displayed on the quote PDF."""
  header: String

  """Unique identifier for the object."""
  id: String
  invoice: Stripe_QuoteInvoiceProperty
  invoice_settings: Stripe_InvoiceSettingQuoteSetting

  """A list of items the customer is being quoted for."""
  line_items: Stripe_QuoteLineItemsProperty

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize).
  """
  number: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_QuoteObjectProperty
  on_behalf_of: Stripe_QuoteOnBehalfOfProperty

  """The status of the quote."""
  status: Stripe_QuoteStatusProperty
  status_transitions: Stripe_QuotesResourceStatusTransitions
  subscription: Stripe_QuoteSubscriptionProperty
  subscription_data: Stripe_QuotesResourceSubscriptionData
  subscription_schedule: Stripe_QuoteSubscriptionScheduleProperty
  test_clock: Stripe_QuoteTestClockProperty
  total_details: Stripe_QuotesResourceTotalDetails
  transfer_data: Stripe_QuotesResourceTransferData
}

type Stripe_QuotesResourceAutomaticTax {
  """Automatically calculate taxes"""
  enabled: Boolean

  """
  The status of the most recent automated tax calculation for this quote.
  """
  status: Stripe_QuotesResourceAutomaticTaxStatusProperty
}

enum Stripe_QuotesResourceAutomaticTaxStatusProperty {
  complete
  failed
  requires_location_inputs
}

enum Stripe_QuoteCollectionMethodProperty {
  charge_automatically
  send_invoice
}

type Stripe_QuotesResourceComputed {
  recurring: Stripe_QuotesResourceRecurring
  upfront: Stripe_QuotesResourceUpfront
}

type Stripe_QuotesResourceRecurring {
  """Total before any discounts or taxes are applied."""
  amount_subtotal: Int

  """Total after discounts and taxes are applied."""
  amount_total: Int

  """
  The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
  """
  interval: Stripe_QuotesResourceRecurringIntervalProperty

  """
  The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
  """
  interval_count: Int
  total_details: Stripe_QuotesResourceTotalDetails
}

enum Stripe_QuotesResourceRecurringIntervalProperty {
  day
  month
  week
  year
}

type Stripe_QuotesResourceTotalDetails {
  """This is the sum of all the discounts."""
  amount_discount: Int

  """This is the sum of all the shipping amounts."""
  amount_shipping: Int

  """This is the sum of all the tax amounts."""
  amount_tax: Int
  breakdown: Stripe_QuotesResourceTotalDetailsResourceBreakdown
}

type Stripe_QuotesResourceTotalDetailsResourceBreakdown {
  """The aggregated discounts."""
  discounts: [Stripe_LineItemsDiscountAmount]

  """The aggregated tax amounts by rate."""
  taxes: [Stripe_LineItemsTaxAmount]
}

type Stripe_LineItemsDiscountAmount {
  """The amount discounted."""
  amount: Int
  discount: Stripe_Discount
}

type Stripe_LineItemsTaxAmount {
  """Amount of tax applied for this rate."""
  amount: Int
  rate: Stripe_TaxRate
}

type Stripe_QuotesResourceUpfront {
  """Total before any discounts or taxes are applied."""
  amount_subtotal: Int

  """Total after discounts and taxes are applied."""
  amount_total: Int

  """
  The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice.
  """
  line_items: Stripe_QuotesResourceUpfrontLineItemsProperty
  total_details: Stripe_QuotesResourceTotalDetails
}

"""
The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice.
"""
type Stripe_QuotesResourceUpfrontLineItemsProperty {
  """Details about each object."""
  data: [Stripe_Item!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_QuotesResourceUpfrontLineItemsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

type Stripe_Item {
  """Total before any discounts or taxes are applied."""
  amount_subtotal: Int

  """Total after discounts and taxes."""
  amount_total: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name.
  """
  description: String

  """The discounts applied to the line item."""
  discounts: [Stripe_LineItemsDiscountAmount]

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_ItemObjectProperty
  price: Stripe_Price

  """The quantity of products being purchased."""
  quantity: Int

  """The taxes applied to the line item."""
  taxes: [Stripe_LineItemsTaxAmount]
}

enum Stripe_ItemObjectProperty {
  item
}

enum Stripe_QuotesResourceUpfrontLineItemsObjectProperty {
  list
}

union Stripe_QuoteDefaultTaxRatesProperty = WrappedString | Stripe_TaxRate

union Stripe_QuoteDiscountsProperty = WrappedString | Stripe_Discount

type Stripe_QuotesResourceFromQuote {
  """Whether this quote is a revision of a different quote."""
  is_revision: Boolean
  quote: Stripe_QuotesResourceFromQuoteQuoteProperty
}

union Stripe_QuotesResourceFromQuoteQuoteProperty = WrappedString | Stripe_Quote

union Stripe_QuoteInvoiceProperty = WrappedString | Stripe_Invoice | Stripe_DeletedInvoice

type Stripe_DeletedInvoice {
  """Always true for a deleted object"""
  deleted: Boolean

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_DeletedInvoiceObjectProperty
}

enum Stripe_DeletedInvoiceObjectProperty {
  invoice
}

type Stripe_InvoiceSettingQuoteSetting {
  """
  Number of days within which a customer must pay invoices generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`.
  """
  days_until_due: Int
}

"""A list of items the customer is being quoted for."""
type Stripe_QuoteLineItemsProperty {
  """Details about each object."""
  data: [Stripe_Item!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_QuoteLineItemsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

enum Stripe_QuoteLineItemsObjectProperty {
  list
}

enum Stripe_QuoteObjectProperty {
  quote
}

union Stripe_QuoteOnBehalfOfProperty = WrappedString | Stripe_Account

enum Stripe_QuoteStatusProperty {
  accepted
  canceled
  draft
  open
}

type Stripe_QuotesResourceStatusTransitions {
  """
  The time that the quote was accepted. Measured in seconds since Unix epoch.
  """
  accepted_at: Int

  """
  The time that the quote was canceled. Measured in seconds since Unix epoch.
  """
  canceled_at: Int

  """
  The time that the quote was finalized. Measured in seconds since Unix epoch.
  """
  finalized_at: Int
}

union Stripe_QuoteSubscriptionProperty = WrappedString | Stripe_Subscription

type Stripe_Subscription {
  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account.
  """
  application_fee_percent: Float
  automatic_tax: Stripe_SubscriptionAutomaticTax

  """
  Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
  """
  billing_cycle_anchor: Int
  billing_thresholds: Stripe_SubscriptionBillingThresholds

  """
  A date in the future at which the subscription will automatically get canceled
  """
  cancel_at: Int

  """
  If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.
  """
  cancel_at_period_end: Boolean

  """
  If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
  """
  canceled_at: Int

  """
  Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
  """
  collection_method: Stripe_SubscriptionCollectionMethodProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
  """
  current_period_end: Int

  """
  Start of the current period that the subscription has been invoiced for.
  """
  current_period_start: Int
  customer: String

  """
  Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`.
  """
  days_until_due: Int
  default_payment_method: Stripe_SubscriptionDefaultPaymentMethodProperty
  default_source: Stripe_SubscriptionDefaultSourceProperty

  """
  The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription.
  """
  default_tax_rates: [Stripe_TaxRate]
  discount: Stripe_Discount

  """If the subscription has ended, the date the subscription ended."""
  ended_at: Int

  """Unique identifier for the object."""
  id: String

  """List of subscription items, each with an attached price."""
  items: Stripe_SubscriptionItemsProperty
  latest_invoice: Stripe_SubscriptionLatestInvoiceProperty

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`.
  """
  next_pending_invoice_item_invoice: Int

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_SubscriptionObjectProperty
  pause_collection: Stripe_SubscriptionsResourcePauseCollection
  payment_settings: Stripe_SubscriptionsResourcePaymentSettings
  pending_invoice_item_interval: Stripe_SubscriptionPendingInvoiceItemInterval
  pending_setup_intent: Stripe_SubscriptionPendingSetupIntentProperty
  pending_update: Stripe_SubscriptionsResourcePendingUpdate
  schedule: Stripe_SubscriptionScheduleProperty

  """
  Date when the subscription was first created. The date might differ from the `created` date due to backdating.
  """
  start_date: Int

  """
  Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`. 
  
  For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated. 
  
  A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over. 
  
  If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts. 
  
  If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
  """
  status: Stripe_SubscriptionStatusProperty
  test_clock: Stripe_SubscriptionTestClockProperty
  transfer_data: Stripe_SubscriptionTransferData

  """If the subscription has a trial, the end of that trial."""
  trial_end: Int

  """If the subscription has a trial, the beginning of that trial."""
  trial_start: Int
}

type Stripe_SubscriptionAutomaticTax {
  """Whether Stripe automatically computes tax on this subscription."""
  enabled: Boolean
}

type Stripe_SubscriptionBillingThresholds {
  """Monetary threshold that triggers the subscription to create an invoice"""
  amount_gte: Int

  """
  Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`.
  """
  reset_billing_cycle_anchor: Boolean
}

enum Stripe_SubscriptionCollectionMethodProperty {
  charge_automatically
  send_invoice
}

union Stripe_SubscriptionDefaultPaymentMethodProperty = WrappedString | Stripe_PaymentMethod

union Stripe_SubscriptionDefaultSourceProperty = WrappedString | Stripe_AlipayAccount | Stripe_BankAccount | Stripe_BitcoinReceiver | Stripe_Card | Stripe_Source

"""List of subscription items, each with an attached price."""
type Stripe_SubscriptionItemsProperty {
  """Details about each object."""
  data: [Stripe_SubscriptionItem!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_SubscriptionItemsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

type Stripe_SubscriptionItem {
  billing_thresholds: Stripe_SubscriptionItemBillingThresholds

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """Unique identifier for the object."""
  id: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_SubscriptionItemObjectProperty
  price: Stripe_Price

  """
  The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed.
  """
  quantity: Int

  """The `subscription` this `subscription_item` belongs to."""
  subscription: String

  """
  The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`.
  """
  tax_rates: [Stripe_TaxRate]
}

type Stripe_SubscriptionItemBillingThresholds {
  """Usage threshold that triggers the subscription to create an invoice"""
  usage_gte: Int
}

enum Stripe_SubscriptionItemObjectProperty {
  subscription_item
}

enum Stripe_SubscriptionItemsObjectProperty {
  list
}

union Stripe_SubscriptionLatestInvoiceProperty = WrappedString | Stripe_Invoice

enum Stripe_SubscriptionObjectProperty {
  subscription
}

type Stripe_SubscriptionsResourcePauseCollection {
  """
  The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`.
  """
  behavior: Stripe_SubscriptionsResourcePauseCollectionBehaviorProperty

  """The time after which the subscription will resume collecting payments."""
  resumes_at: Int
}

enum Stripe_SubscriptionsResourcePauseCollectionBehaviorProperty {
  keep_as_draft
  mark_uncollectible
  void
}

type Stripe_SubscriptionsResourcePaymentSettings {
  payment_method_options: Stripe_SubscriptionsResourcePaymentMethodOptions

  """
  The list of payment method types to provide to every invoice created by the subscription. If not set, Stripe attempts to automatically determine the types to use by looking at the invoiceâ€™s default payment method, the subscriptionâ€™s default payment method, the customerâ€™s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).
  """
  payment_method_types: [Stripe_SubscriptionsResourcePaymentSettingsPaymentMethodTypesProperty]
}

type Stripe_SubscriptionsResourcePaymentMethodOptions {
  acss_debit: Stripe_InvoicePaymentMethodOptionsAcssDebit
  bancontact: Stripe_InvoicePaymentMethodOptionsBancontact
  card: Stripe_SubscriptionPaymentMethodOptionsCard
  customer_balance: Stripe_InvoicePaymentMethodOptionsCustomerBalance
  konbini: Stripe_InvoicePaymentMethodOptionsKonbini
  us_bank_account: Stripe_InvoicePaymentMethodOptionsUsBankAccount
}

type Stripe_SubscriptionPaymentMethodOptionsCard {
  mandate_options: Stripe_InvoiceMandateOptionsCard

  """
  We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
  """
  request_three_d_secure: Stripe_SubscriptionPaymentMethodOptionsCardRequestThreeDSecureProperty
}

type Stripe_InvoiceMandateOptionsCard {
  """Amount to be charged for future payments."""
  amount: Int

  """
  One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
  """
  amount_type: Stripe_InvoiceMandateOptionsCardAmountTypeProperty

  """
  A description of the mandate or subscription that is meant to be displayed to the customer.
  """
  description: String
}

enum Stripe_InvoiceMandateOptionsCardAmountTypeProperty {
  fixed
  maximum
}

enum Stripe_SubscriptionPaymentMethodOptionsCardRequestThreeDSecureProperty {
  any
  automatic
}

enum Stripe_SubscriptionsResourcePaymentSettingsPaymentMethodTypesProperty {
  ach_credit_transfer
  ach_debit
  acss_debit
  au_becs_debit
  bacs_debit
  bancontact
  boleto
  card
  customer_balance
  fpx
  giropay
  grabpay
  ideal
  konbini
  paynow
  sepa_debit
  sofort
  us_bank_account
  wechat_pay
}

type Stripe_SubscriptionPendingInvoiceItemInterval {
  """
  Specifies invoicing frequency. Either `day`, `week`, `month` or `year`.
  """
  interval: Stripe_SubscriptionPendingInvoiceItemIntervalIntervalProperty

  """
  The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).
  """
  interval_count: Int
}

enum Stripe_SubscriptionPendingInvoiceItemIntervalIntervalProperty {
  day
  month
  week
  year
}

union Stripe_SubscriptionPendingSetupIntentProperty = WrappedString | Stripe_SetupIntent

type Stripe_SetupIntent {
  application: Stripe_SetupIntentApplicationProperty

  """
  Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`.
  """
  cancellation_reason: Stripe_SetupIntentCancellationReasonProperty

  """
  The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.
  
  The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
  """
  client_secret: String

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  customer: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """Unique identifier for the object."""
  id: String
  last_setup_error: Stripe_ApiErrors
  latest_attempt: Stripe_SetupIntentLatestAttemptProperty

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean
  mandate: Stripe_SetupIntentMandateProperty

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject
  next_action: Stripe_SetupIntentNextAction

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_SetupIntentObjectProperty
  on_behalf_of: Stripe_SetupIntentOnBehalfOfProperty
  payment_method: Stripe_SetupIntentPaymentMethodProperty
  payment_method_options: Stripe_SetupIntentPaymentMethodOptions

  """
  The list of payment method types (e.g. card) that this SetupIntent is allowed to set up.
  """
  payment_method_types: [String]
  single_use_mandate: Stripe_SetupIntentSingleUseMandateProperty

  """
  [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`.
  """
  status: Stripe_SetupIntentStatusProperty

  """
  Indicates how the payment method is intended to be used in the future.
  
  Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.
  """
  usage: String
}

union Stripe_SetupIntentApplicationProperty = WrappedString | Stripe_Application

enum Stripe_SetupIntentCancellationReasonProperty {
  abandoned
  duplicate
  requested_by_customer
}

union Stripe_SetupIntentLatestAttemptProperty = WrappedString | Stripe_SetupAttempt

union Stripe_SetupIntentMandateProperty = WrappedString | Stripe_Mandate

type Stripe_SetupIntentNextAction {
  redirect_to_url: Stripe_SetupIntentNextActionRedirectToUrl

  """
  Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`.
  """
  type: String

  """
  When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.
  """
  use_stripe_sdk: JSONObject
  verify_with_microdeposits: Stripe_SetupIntentNextActionVerifyWithMicrodeposits
}

type Stripe_SetupIntentNextActionRedirectToUrl {
  """
  If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
  """
  return_url: String

  """The URL you must redirect your customer to in order to authenticate."""
  url: String
}

type Stripe_SetupIntentNextActionVerifyWithMicrodeposits {
  """The timestamp when the microdeposits are expected to land."""
  arrival_date: Int

  """
  The URL for the hosted verification page, which allows customers to verify their bank account.
  """
  hosted_verification_url: String

  """
  The type of the microdeposit sent to the customer. Used to distinguish between different verification methods.
  """
  microdeposit_type: Stripe_SetupIntentNextActionVerifyWithMicrodepositsMicrodepositTypeProperty
}

enum Stripe_SetupIntentNextActionVerifyWithMicrodepositsMicrodepositTypeProperty {
  amounts
  descriptor_code
}

enum Stripe_SetupIntentObjectProperty {
  setup_intent
}

union Stripe_SetupIntentOnBehalfOfProperty = WrappedString | Stripe_Account

union Stripe_SetupIntentPaymentMethodProperty = WrappedString | Stripe_PaymentMethod

type Stripe_SetupIntentPaymentMethodOptions {
  acss_debit: Stripe_SetupIntentPaymentMethodOptionsAcssDebitProperty
  card: Stripe_SetupIntentPaymentMethodOptionsCard
  sepa_debit: Stripe_SetupIntentPaymentMethodOptionsSepaDebitProperty
  us_bank_account: Stripe_SetupIntentPaymentMethodOptionsUsBankAccountProperty
}

union Stripe_SetupIntentPaymentMethodOptionsAcssDebitProperty = Stripe_SetupIntentPaymentMethodOptionsAcssDebit | Stripe_SetupIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_SetupIntentPaymentMethodOptionsAcssDebit {
  """Currency supported by the bank account"""
  currency: Stripe_SetupIntentPaymentMethodOptionsAcssDebitCurrencyProperty
  mandate_options: Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit

  """Bank account verification method."""
  verification_method: Stripe_SetupIntentPaymentMethodOptionsAcssDebitVerificationMethodProperty
}

enum Stripe_SetupIntentPaymentMethodOptionsAcssDebitCurrencyProperty {
  cad
  usd
}

type Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit {
  """A URL for custom mandate text"""
  custom_mandate_url: String

  """
  List of Stripe products where this mandate can be selected automatically.
  """
  default_for: [Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitDefaultForProperty]

  """
  Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
  """
  interval_description: String

  """Payment schedule for the mandate."""
  payment_schedule: Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentScheduleProperty

  """Transaction type of the mandate."""
  transaction_type: Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionTypeProperty
}

enum Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitDefaultForProperty {
  invoice
  subscription
}

enum Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentScheduleProperty {
  combined
  interval
  sporadic
}

enum Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionTypeProperty {
  business
  personal
}

enum Stripe_SetupIntentPaymentMethodOptionsAcssDebitVerificationMethodProperty {
  automatic
  instant
  microdeposits
}

type Stripe_SetupIntentTypeSpecificPaymentMethodOptionsClient {
  """Bank account verification method."""
  verification_method: Stripe_SetupIntentTypeSpecificPaymentMethodOptionsClientVerificationMethodProperty
}

enum Stripe_SetupIntentTypeSpecificPaymentMethodOptionsClientVerificationMethodProperty {
  automatic
  instant
  microdeposits
}

type Stripe_SetupIntentPaymentMethodOptionsCard {
  mandate_options: Stripe_SetupIntentPaymentMethodOptionsCardMandateOptions

  """
  We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
  """
  request_three_d_secure: Stripe_SetupIntentPaymentMethodOptionsCardRequestThreeDSecureProperty
}

type Stripe_SetupIntentPaymentMethodOptionsCardMandateOptions {
  """Amount to be charged for future payments."""
  amount: Int

  """
  One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
  """
  amount_type: Stripe_SetupIntentPaymentMethodOptionsCardMandateOptionsAmountTypeProperty

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  A description of the mandate or subscription that is meant to be displayed to the customer.
  """
  description: String

  """
  End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date.
  """
  end_date: Int

  """
  Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`.
  """
  interval: Stripe_SetupIntentPaymentMethodOptionsCardMandateOptionsIntervalProperty

  """
  The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`.
  """
  interval_count: Int

  """Unique identifier for the mandate or subscription."""
  reference: String

  """
  Start date of the mandate or subscription. Start date should not be lesser than yesterday.
  """
  start_date: Int

  """Specifies the type of mandates supported. Possible values are `india`."""
  supported_types: [Stripe_SetupIntentPaymentMethodOptionsCardMandateOptionsSupportedTypesProperty]
}

enum Stripe_SetupIntentPaymentMethodOptionsCardMandateOptionsAmountTypeProperty {
  fixed
  maximum
}

enum Stripe_SetupIntentPaymentMethodOptionsCardMandateOptionsIntervalProperty {
  day
  month
  sporadic
  week
  year
}

enum Stripe_SetupIntentPaymentMethodOptionsCardMandateOptionsSupportedTypesProperty {
  india
}

enum Stripe_SetupIntentPaymentMethodOptionsCardRequestThreeDSecureProperty {
  any
  automatic
  challenge_only
}

union Stripe_SetupIntentPaymentMethodOptionsSepaDebitProperty = Stripe_SetupIntentPaymentMethodOptionsSepaDebit | Stripe_SetupIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_SetupIntentPaymentMethodOptionsSepaDebit {
  mandate_options: Stripe_SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit
}

type Stripe_SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit {
  result: JSONObject
}

union Stripe_SetupIntentPaymentMethodOptionsUsBankAccountProperty = Stripe_SetupIntentPaymentMethodOptionsUsBankAccount | Stripe_SetupIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_SetupIntentPaymentMethodOptionsUsBankAccount {
  """Bank account verification method."""
  verification_method: Stripe_SetupIntentPaymentMethodOptionsUsBankAccountVerificationMethodProperty
}

enum Stripe_SetupIntentPaymentMethodOptionsUsBankAccountVerificationMethodProperty {
  automatic
  instant
  microdeposits
}

union Stripe_SetupIntentSingleUseMandateProperty = WrappedString | Stripe_Mandate

enum Stripe_SetupIntentStatusProperty {
  canceled
  processing
  requires_action
  requires_confirmation
  requires_payment_method
  succeeded
}

type Stripe_SubscriptionsResourcePendingUpdate {
  """
  If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
  """
  billing_cycle_anchor: Int

  """
  The point after which the changes reflected by this update will be discarded and no longer applied.
  """
  expires_at: Int

  """
  List of subscription items, each with an attached plan, that will be set if the update is applied.
  """
  subscription_items: [Stripe_SubscriptionItem]

  """
  Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied.
  """
  trial_end: Int

  """
  Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
  """
  trial_from_plan: Boolean
}

union Stripe_SubscriptionScheduleProperty = WrappedString | Stripe_SubscriptionSchedule

type Stripe_SubscriptionSchedule {
  """
  Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.
  """
  canceled_at: Int

  """
  Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.
  """
  completed_at: Int

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  current_phase: Stripe_SubscriptionScheduleCurrentPhase
  customer: Stripe_SubscriptionScheduleCustomerProperty
  default_settings: Stripe_SubscriptionSchedulesResourceDefaultSettings

  """
  Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` and `cancel`.
  """
  end_behavior: Stripe_SubscriptionScheduleEndBehaviorProperty

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_SubscriptionScheduleObjectProperty

  """Configuration for the subscription schedule's phases."""
  phases: [Stripe_SubscriptionSchedulePhaseConfiguration]

  """
  Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.
  """
  released_at: Int

  """
  ID of the subscription once managed by the subscription schedule (if it is released).
  """
  released_subscription: String

  """
  The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
  """
  status: Stripe_SubscriptionScheduleStatusProperty
  subscription: Stripe_SubscriptionScheduleSubscriptionProperty
  test_clock: Stripe_SubscriptionScheduleTestClockProperty
}

type Stripe_SubscriptionScheduleCurrentPhase {
  """The end of this phase of the subscription schedule."""
  end_date: Int

  """The start of this phase of the subscription schedule."""
  start_date: Int
}

union Stripe_SubscriptionScheduleCustomerProperty = WrappedString | Stripe_Customer | Stripe_DeletedCustomer

type Stripe_SubscriptionSchedulesResourceDefaultSettings {
  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule.
  """
  application_fee_percent: Float
  automatic_tax: Stripe_SubscriptionSchedulesResourceDefaultSettingsAutomaticTax

  """
  Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
  """
  billing_cycle_anchor: Stripe_SubscriptionSchedulesResourceDefaultSettingsBillingCycleAnchorProperty
  billing_thresholds: Stripe_SubscriptionBillingThresholds

  """
  Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
  """
  collection_method: Stripe_SubscriptionSchedulesResourceDefaultSettingsCollectionMethodProperty
  default_payment_method: Stripe_SubscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethodProperty
  invoice_settings: Stripe_InvoiceSettingSubscriptionScheduleSetting
  transfer_data: Stripe_SubscriptionTransferData
}

type Stripe_SubscriptionSchedulesResourceDefaultSettingsAutomaticTax {
  """
  Whether Stripe automatically computes tax on invoices created during this phase.
  """
  enabled: Boolean
}

enum Stripe_SubscriptionSchedulesResourceDefaultSettingsBillingCycleAnchorProperty {
  automatic
  phase_start
}

enum Stripe_SubscriptionSchedulesResourceDefaultSettingsCollectionMethodProperty {
  charge_automatically
  send_invoice
}

union Stripe_SubscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethodProperty = WrappedString | Stripe_PaymentMethod

type Stripe_InvoiceSettingSubscriptionScheduleSetting {
  """
  Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.
  """
  days_until_due: Int
}

type Stripe_SubscriptionTransferData {
  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
  """
  amount_percent: Float
  destination: Stripe_SubscriptionTransferDataDestinationProperty
}

union Stripe_SubscriptionTransferDataDestinationProperty = WrappedString | Stripe_Account

enum Stripe_SubscriptionScheduleEndBehaviorProperty {
  cancel
  none
  release
  renew
}

enum Stripe_SubscriptionScheduleObjectProperty {
  subscription_schedule
}

type Stripe_SubscriptionSchedulePhaseConfiguration {
  """
  A list of prices and quantities that will generate invoice items appended to the first invoice for this phase.
  """
  add_invoice_items: [Stripe_SubscriptionScheduleAddInvoiceItem]

  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule.
  """
  application_fee_percent: Float
  automatic_tax: Stripe_SchedulesPhaseAutomaticTax

  """
  Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
  """
  billing_cycle_anchor: Stripe_SubscriptionSchedulePhaseConfigurationBillingCycleAnchorProperty
  billing_thresholds: Stripe_SubscriptionBillingThresholds

  """
  Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
  """
  collection_method: Stripe_SubscriptionSchedulePhaseConfigurationCollectionMethodProperty
  coupon: Stripe_SubscriptionSchedulePhaseConfigurationCouponProperty
  default_payment_method: Stripe_SubscriptionSchedulePhaseConfigurationDefaultPaymentMethodProperty

  """
  The default tax rates to apply to the subscription during this phase of the subscription schedule.
  """
  default_tax_rates: [Stripe_TaxRate]

  """The end of this phase of the subscription schedule."""
  end_date: Int
  invoice_settings: Stripe_InvoiceSettingSubscriptionScheduleSetting

  """
  Subscription items to configure the subscription to during this phase of the subscription schedule.
  """
  items: [Stripe_SubscriptionScheduleConfigurationItem]

  """
  If the subscription schedule will prorate when transitioning to this phase. Possible values are `create_prorations` and `none`.
  """
  proration_behavior: Stripe_SubscriptionSchedulePhaseConfigurationProrationBehaviorProperty

  """The start of this phase of the subscription schedule."""
  start_date: Int
  transfer_data: Stripe_SubscriptionTransferData

  """When the trial ends within the phase."""
  trial_end: Int
}

type Stripe_SubscriptionScheduleAddInvoiceItem {
  price: Stripe_SubscriptionScheduleAddInvoiceItemPriceProperty

  """The quantity of the invoice item."""
  quantity: Int

  """
  The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item.
  """
  tax_rates: [Stripe_TaxRate]
}

union Stripe_SubscriptionScheduleAddInvoiceItemPriceProperty = WrappedString | Stripe_Price | Stripe_DeletedPrice

type Stripe_DeletedPrice {
  """Always true for a deleted object"""
  deleted: Boolean

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_DeletedPriceObjectProperty
}

enum Stripe_DeletedPriceObjectProperty {
  price
}

type Stripe_SchedulesPhaseAutomaticTax {
  """
  Whether Stripe automatically computes tax on invoices created during this phase.
  """
  enabled: Boolean
}

enum Stripe_SubscriptionSchedulePhaseConfigurationBillingCycleAnchorProperty {
  automatic
  phase_start
}

enum Stripe_SubscriptionSchedulePhaseConfigurationCollectionMethodProperty {
  charge_automatically
  send_invoice
}

union Stripe_SubscriptionSchedulePhaseConfigurationCouponProperty = WrappedString | Stripe_Coupon | Stripe_DeletedCoupon

type Stripe_DeletedCoupon {
  """Always true for a deleted object"""
  deleted: Boolean

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_DeletedCouponObjectProperty
}

enum Stripe_DeletedCouponObjectProperty {
  coupon
}

union Stripe_SubscriptionSchedulePhaseConfigurationDefaultPaymentMethodProperty = WrappedString | Stripe_PaymentMethod

type Stripe_SubscriptionScheduleConfigurationItem {
  billing_thresholds: Stripe_SubscriptionItemBillingThresholds
  price: Stripe_SubscriptionScheduleConfigurationItemPriceProperty

  """Quantity of the plan to which the customer should be subscribed."""
  quantity: Int

  """
  The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`.
  """
  tax_rates: [Stripe_TaxRate]
}

union Stripe_SubscriptionScheduleConfigurationItemPriceProperty = WrappedString | Stripe_Price | Stripe_DeletedPrice

enum Stripe_SubscriptionSchedulePhaseConfigurationProrationBehaviorProperty {
  always_invoice
  create_prorations
  none
}

enum Stripe_SubscriptionScheduleStatusProperty {
  active
  canceled
  completed
  not_started
  released
}

union Stripe_SubscriptionScheduleSubscriptionProperty = WrappedString | Stripe_Subscription

union Stripe_SubscriptionScheduleTestClockProperty = WrappedString | Stripe_TestHelpersTestClock

type Stripe_TestHelpersTestClock {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """Time at which this clock is scheduled to auto delete."""
  deletes_after: Int

  """Time at which all objects belonging to this clock are frozen."""
  frozen_time: Int

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """The custom name supplied at creation."""
  name: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_TestHelpersTestClockObjectProperty

  """The status of the Test Clock."""
  status: Stripe_TestHelpersTestClockStatusProperty
}

enum Stripe_TestHelpersTestClockObjectProperty {
  test_helpersDOTtest_clock
}

enum Stripe_TestHelpersTestClockStatusProperty {
  advancing
  internal_failure
  ready
}

enum Stripe_SubscriptionStatusProperty {
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  trialing
  unpaid
}

union Stripe_SubscriptionTestClockProperty = WrappedString | Stripe_TestHelpersTestClock

type Stripe_QuotesResourceSubscriptionData {
  """
  When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. This date is ignored if it is in the past when the quote is accepted. Measured in seconds since the Unix epoch.
  """
  effective_date: Int

  """
  Integer representing the number of trial period days before the customer is charged for the first time.
  """
  trial_period_days: Int
}

union Stripe_QuoteSubscriptionScheduleProperty = WrappedString | Stripe_SubscriptionSchedule

union Stripe_QuoteTestClockProperty = WrappedString | Stripe_TestHelpersTestClock

type Stripe_QuotesResourceTransferData {
  """
  The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination.
  """
  amount: Int

  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount will be transferred to the destination.
  """
  amount_percent: Float
  destination: Stripe_QuotesResourceTransferDataDestinationProperty
}

union Stripe_QuotesResourceTransferDataDestinationProperty = WrappedString | Stripe_Account

enum Stripe_InvoiceStatusProperty {
  deleted
  draft
  open
  paid
  uncollectible
  void
}

type Stripe_InvoicesStatusTransitions {
  """The time that the invoice draft was finalized."""
  finalized_at: Int

  """The time that the invoice was marked uncollectible."""
  marked_uncollectible_at: Int

  """The time that the invoice was paid."""
  paid_at: Int

  """The time that the invoice was voided."""
  voided_at: Int
}

union Stripe_InvoiceSubscriptionProperty = WrappedString | Stripe_Subscription

union Stripe_InvoiceTestClockProperty = WrappedString | Stripe_TestHelpersTestClock

type Stripe_InvoiceThresholdReason {
  """
  The total invoice amount threshold boundary if it triggered the threshold invoice.
  """
  amount_gte: Int

  """Indicates which line items triggered a threshold invoice."""
  item_reasons: [Stripe_InvoiceItemThresholdReason]
}

type Stripe_InvoiceItemThresholdReason {
  """The IDs of the line items that triggered the threshold invoice."""
  line_item_ids: [String]

  """The quantity threshold boundary that applied to the given line item."""
  usage_gte: Int
}

type Stripe_InvoiceTransferData {
  """
  The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination.
  """
  amount: Int
  destination: Stripe_InvoiceTransferDataDestinationProperty
}

union Stripe_InvoiceTransferDataDestinationProperty = WrappedString | Stripe_Account

enum Stripe_ChargeObjectProperty {
  charge
}

union Stripe_ChargeOnBehalfOfProperty = WrappedString | Stripe_Account

union Stripe_ChargeOrderProperty = WrappedString | Stripe_Order

type Stripe_Order {
  """
  A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order.
  """
  amount: Int

  """The total amount that was returned to the customer."""
  amount_returned: Int

  """ID of the Connect Application that created the order."""
  application: String

  """
  A fee in cents that will be applied to the order and transferred to the application ownerâ€™s Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees documentation.
  """
  application_fee: Int
  charge: Stripe_OrderChargeProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  customer: String

  """The email address of the customer placing the order."""
  email: String

  """External coupon code to load for this order."""
  external_coupon_code: String

  """Unique identifier for the object."""
  id: String

  """
  List of items constituting the order. An order can have up to 25 items.
  """
  items: [Stripe_OrderItem]

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_OrderObjectProperty

  """A list of returns that have taken place for this order."""
  returns: Stripe_OrderReturnsProperty

  """
  The shipping method that is currently selected for this order, if any. If present, it is equal to one of the `id`s of shipping methods in the `shipping_methods` array. At order creation time, if there are multiple shipping methods, Stripe will automatically selected the first method.
  """
  selected_shipping_method: String
  shipping: Stripe_Shipping

  """
  A list of supported shipping methods for this order. The desired shipping method can be specified either by updating the order, or when paying it.
  """
  shipping_methods: [Stripe_ShippingMethod]

  """
  Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More details in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses).
  """
  status: String
  status_transitions: Stripe_StatusTransitions

  """
  Time at which the object was last updated. Measured in seconds since the Unix epoch.
  """
  updated: Int

  """The user's order ID if it is different from the Stripe order ID."""
  upstream_id: String
}

union Stripe_OrderChargeProperty = WrappedString | Stripe_Charge

type Stripe_OrderItem {
  """
  A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item.
  """
  amount: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  Description of the line item, meant to be displayable to the user (e.g., `"Express shipping"`).
  """
  description: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_OrderItemObjectProperty
  parent: Stripe_OrderItemParentProperty

  """
  A positive integer representing the number of instances of `parent` that are included in this order item. Applicable/present only if `type` is `sku`.
  """
  quantity: Int

  """The type of line item. One of `sku`, `tax`, `shipping`, or `discount`."""
  type: String
}

enum Stripe_OrderItemObjectProperty {
  order_item
}

union Stripe_OrderItemParentProperty = WrappedString | Stripe_Sku

type Stripe_Sku {
  """Whether the SKU is available for purchase."""
  active: Boolean

  """
  A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`.
  """
  attributes: JSONObject

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """Unique identifier for the object."""
  id: String

  """
  The URL of an image for this SKU, meant to be displayable to the customer.
  """
  image: String
  inventory: Stripe_SkuInventory

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_SkuObjectProperty
  package_dimensions: Stripe_PackageDimensions

  """
  The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge Â¥100, Japanese Yen being a zero-decimal currency).
  """
  price: Int
  product: Stripe_SkuProductProperty

  """
  Time at which the object was last updated. Measured in seconds since the Unix epoch.
  """
  updated: Int
}

type Stripe_SkuInventory {
  """
  The count of inventory available. Will be present if and only if `type` is `finite`.
  """
  quantity: Int

  """
  Inventory type. Possible values are `finite`, `bucket` (not quantified), and `infinite`.
  """
  type: String

  """
  An indicator of the inventory available. Possible values are `in_stock`, `limited`, and `out_of_stock`. Will be present if and only if `type` is `bucket`.
  """
  value: String
}

enum Stripe_SkuObjectProperty {
  sku
}

union Stripe_SkuProductProperty = WrappedString | Stripe_Product

enum Stripe_OrderObjectProperty {
  order
}

"""A list of returns that have taken place for this order."""
type Stripe_OrderReturnsProperty {
  """Details about each object."""
  data: [Stripe_OrderReturn!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_OrderReturnsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

type Stripe_OrderReturn {
  """
  A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the returned line item.
  """
  amount: Int

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """Unique identifier for the object."""
  id: String

  """The items included in this order return."""
  items: [Stripe_OrderItem]

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_OrderReturnObjectProperty
  order: Stripe_OrderReturnOrderProperty
  refund: Stripe_OrderReturnRefundProperty
}

enum Stripe_OrderReturnObjectProperty {
  order_return
}

union Stripe_OrderReturnOrderProperty = WrappedString | Stripe_Order

union Stripe_OrderReturnRefundProperty = WrappedString | Stripe_Refund

enum Stripe_OrderReturnsObjectProperty {
  list
}

type Stripe_ShippingMethod {
  """
  A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item.
  """
  amount: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  delivery_estimate: Stripe_DeliveryEstimate

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """Unique identifier for the object."""
  id: String
}

type Stripe_DeliveryEstimate {
  """
  If `type` is `"exact"`, `date` will be the expected delivery date in the format YYYY-MM-DD.
  """
  date: String

  """
  If `type` is `"range"`, `earliest` will be be the earliest delivery date in the format YYYY-MM-DD.
  """
  earliest: String

  """
  If `type` is `"range"`, `latest` will be the latest delivery date in the format YYYY-MM-DD.
  """
  latest: String

  """The type of estimate. Must be either `"range"` or `"exact"`."""
  type: String
}

type Stripe_StatusTransitions {
  """The time that the order was canceled."""
  canceled: Int

  """The time that the order was fulfilled."""
  fulfiled: Int

  """The time that the order was paid."""
  paid: Int

  """The time that the order was returned."""
  returned: Int
}

type Stripe_ChargeOutcome {
  """
  Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement.
  """
  network_status: String

  """
  An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details.
  """
  reason: String

  """
  Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. This field is only available with Radar.
  """
  risk_level: String

  """
  Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams.
  """
  risk_score: Int
  rule: Stripe_ChargeOutcomeRuleProperty

  """
  A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer.
  """
  seller_message: String

  """
  Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details.
  """
  type: String
}

union Stripe_ChargeOutcomeRuleProperty = WrappedString | Stripe_Rule

type Stripe_Rule {
  """The action taken on the payment."""
  action: String

  """Unique identifier for the object."""
  id: String

  """The predicate to evaluate the payment against."""
  predicate: String
}

union Stripe_ChargePaymentIntentProperty = WrappedString | Stripe_PaymentIntent

type Stripe_PaymentMethodDetails {
  ach_credit_transfer: Stripe_PaymentMethodDetailsAchCreditTransfer
  ach_debit: Stripe_PaymentMethodDetailsAchDebit
  acss_debit: Stripe_PaymentMethodDetailsAcssDebit
  afterpay_clearpay: Stripe_PaymentMethodDetailsAfterpayClearpay
  alipay: Stripe_PaymentFlowsPrivatePaymentMethodsAlipayDetails
  au_becs_debit: Stripe_PaymentMethodDetailsAuBecsDebit
  bacs_debit: Stripe_PaymentMethodDetailsBacsDebit
  bancontact: Stripe_PaymentMethodDetailsBancontact
  boleto: Stripe_PaymentMethodDetailsBoleto
  card: Stripe_PaymentMethodDetailsCard
  card_present: Stripe_PaymentMethodDetailsCardPresent
  customer_balance: Stripe_PaymentMethodDetailsCustomerBalance
  eps: Stripe_PaymentMethodDetailsEps
  fpx: Stripe_PaymentMethodDetailsFpx
  giropay: Stripe_PaymentMethodDetailsGiropay
  grabpay: Stripe_PaymentMethodDetailsGrabpay
  ideal: Stripe_PaymentMethodDetailsIdeal
  interac_present: Stripe_PaymentMethodDetailsInteracPresent
  klarna: Stripe_PaymentMethodDetailsKlarna
  konbini: Stripe_PaymentMethodDetailsKonbini
  multibanco: Stripe_PaymentMethodDetailsMultibanco
  oxxo: Stripe_PaymentMethodDetailsOxxo
  p24: Stripe_PaymentMethodDetailsP24
  paynow: Stripe_PaymentMethodDetailsPaynow
  sepa_debit: Stripe_PaymentMethodDetailsSepaDebit
  sofort: Stripe_PaymentMethodDetailsSofort
  stripe_account: Stripe_PaymentMethodDetailsStripeAccount

  """
  The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `acss_debit`, `alipay`, `au_becs_debit`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`.
  An additional hash is included on `payment_method_details` with a name matching this value.
  It contains information specific to the payment method.
  """
  type: String
  us_bank_account: Stripe_PaymentMethodDetailsUsBankAccount
  wechat: Stripe_PaymentMethodDetailsWechat
  wechat_pay: Stripe_PaymentMethodDetailsWechatPay
}

type Stripe_PaymentMethodDetailsAchCreditTransfer {
  """Account number to transfer funds to."""
  account_number: String

  """Name of the bank associated with the routing number."""
  bank_name: String

  """Routing transit number for the bank account to transfer funds to."""
  routing_number: String

  """SWIFT code of the bank associated with the routing number."""
  swift_code: String
}

type Stripe_PaymentMethodDetailsAchDebit {
  """
  Type of entity that holds the account. This can be either `individual` or `company`.
  """
  account_holder_type: Stripe_PaymentMethodDetailsAchDebitAccountHolderTypeProperty

  """Name of the bank associated with the bank account."""
  bank_name: String

  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Last four digits of the bank account number."""
  last4: String

  """Routing transit number of the bank account."""
  routing_number: String
}

enum Stripe_PaymentMethodDetailsAchDebitAccountHolderTypeProperty {
  company
  individual
}

type Stripe_PaymentMethodDetailsAcssDebit {
  """Name of the bank associated with the bank account."""
  bank_name: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Institution number of the bank account"""
  institution_number: String

  """Last four digits of the bank account number."""
  last4: String

  """ID of the mandate used to make this payment."""
  mandate: String

  """Transit number of the bank account."""
  transit_number: String
}

type Stripe_PaymentMethodDetailsAfterpayClearpay {
  """Order identifier shown to the merchant in Afterpayâ€™s online portal."""
  reference: String
}

type Stripe_PaymentFlowsPrivatePaymentMethodsAlipayDetails {
  """
  Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same.
  """
  buyer_id: String

  """
  Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same.
  """
  fingerprint: String

  """Transaction ID of this particular Alipay transaction."""
  transaction_id: String
}

type Stripe_PaymentMethodDetailsAuBecsDebit {
  """Bank-State-Branch number of the bank account."""
  bsb_number: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Last four digits of the bank account number."""
  last4: String

  """ID of the mandate used to make this payment."""
  mandate: String
}

type Stripe_PaymentMethodDetailsBacsDebit {
  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Last four digits of the bank account number."""
  last4: String

  """ID of the mandate used to make this payment."""
  mandate: String

  """Sort code of the bank account. (e.g., `10-20-30`)"""
  sort_code: String
}

type Stripe_PaymentMethodDetailsBancontact {
  """Bank code of bank associated with the bank account."""
  bank_code: String

  """Name of the bank associated with the bank account."""
  bank_name: String

  """Bank Identifier Code of the bank associated with the bank account."""
  bic: String
  generated_sepa_debit: Stripe_PaymentMethodDetailsBancontactGeneratedSepaDebitProperty
  generated_sepa_debit_mandate: Stripe_PaymentMethodDetailsBancontactGeneratedSepaDebitMandateProperty

  """Last four characters of the IBAN."""
  iban_last4: String

  """
  Preferred language of the Bancontact authorization page that the customer is redirected to.
  Can be one of `en`, `de`, `fr`, or `nl`
  """
  preferred_language: Stripe_PaymentMethodDetailsBancontactPreferredLanguageProperty

  """
  Owner's verified full name. Values are verified or provided by Bancontact directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

union Stripe_PaymentMethodDetailsBancontactGeneratedSepaDebitProperty = WrappedString | Stripe_PaymentMethod

union Stripe_PaymentMethodDetailsBancontactGeneratedSepaDebitMandateProperty = WrappedString | Stripe_Mandate

enum Stripe_PaymentMethodDetailsBancontactPreferredLanguageProperty {
  de
  en
  fr
  nl
}

type Stripe_PaymentMethodDetailsBoleto {
  """
  The tax ID of the customer (CPF for individuals consumers or CNPJ for businesses consumers)
  """
  tax_id: String
}

type Stripe_PaymentMethodDetailsCard {
  """
  Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  brand: String
  checks: Stripe_PaymentMethodDetailsCardChecks

  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String

  """Two-digit number representing the card's expiration month."""
  exp_month: Int

  """Four-digit number representing the card's expiration year."""
  exp_year: Int

  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  
  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
  """
  fingerprint: String

  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String
  installments: Stripe_PaymentMethodDetailsCardInstallments

  """The last four digits of the card."""
  last4: String

  """ID of the mandate used to make this payment or created by it."""
  mandate: String

  """
  Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  network: String
  three_d_secure: Stripe_ThreeDSecureDetails
  wallet: Stripe_PaymentMethodDetailsCardWallet
}

type Stripe_PaymentMethodDetailsCardChecks {
  """
  If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_line1_check: String

  """
  If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_postal_code_check: String

  """
  If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  cvc_check: String
}

type Stripe_PaymentMethodDetailsCardInstallments {
  plan: Stripe_PaymentMethodDetailsCardInstallmentsPlan
}

type Stripe_PaymentMethodDetailsCardInstallmentsPlan {
  """
  For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card.
  """
  count: Int

  """
  For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
  One of `month`.
  """
  interval: Stripe_PaymentMethodDetailsCardInstallmentsPlanIntervalProperty

  """Type of installment plan, one of `fixed_count`."""
  type: Stripe_PaymentMethodDetailsCardInstallmentsPlanTypeProperty
}

enum Stripe_PaymentMethodDetailsCardInstallmentsPlanIntervalProperty {
  month
}

enum Stripe_PaymentMethodDetailsCardInstallmentsPlanTypeProperty {
  fixed_count
}

type Stripe_PaymentMethodDetailsCardWallet {
  amex_express_checkout: Stripe_PaymentMethodDetailsCardWalletAmexExpressCheckout
  apple_pay: Stripe_PaymentMethodDetailsCardWalletApplePay

  """
  (For tokenized numbers only.) The last four digits of the device account number.
  """
  dynamic_last4: String
  google_pay: Stripe_PaymentMethodDetailsCardWalletGooglePay
  masterpass: Stripe_PaymentMethodDetailsCardWalletMasterpass
  samsung_pay: Stripe_PaymentMethodDetailsCardWalletSamsungPay

  """
  The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
  """
  type: Stripe_PaymentMethodDetailsCardWalletTypeProperty
  visa_checkout: Stripe_PaymentMethodDetailsCardWalletVisaCheckout
}

type Stripe_PaymentMethodDetailsCardWalletAmexExpressCheckout {
  result: JSONObject
}

type Stripe_PaymentMethodDetailsCardWalletApplePay {
  result: JSONObject
}

type Stripe_PaymentMethodDetailsCardWalletGooglePay {
  result: JSONObject
}

type Stripe_PaymentMethodDetailsCardWalletMasterpass {
  billing_address: Stripe_Address

  """
  Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  email: String

  """
  Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  name: String
  shipping_address: Stripe_Address
}

type Stripe_PaymentMethodDetailsCardWalletSamsungPay {
  result: JSONObject
}

enum Stripe_PaymentMethodDetailsCardWalletTypeProperty {
  amex_express_checkout
  apple_pay
  google_pay
  masterpass
  samsung_pay
  visa_checkout
}

type Stripe_PaymentMethodDetailsCardWalletVisaCheckout {
  billing_address: Stripe_Address

  """
  Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  email: String

  """
  Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  name: String
  shipping_address: Stripe_Address
}

type Stripe_PaymentMethodDetailsCustomerBalance {
  result: JSONObject
}

type Stripe_PaymentMethodDetailsEps {
  """
  The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
  """
  bank: Stripe_PaymentMethodDetailsEpsBankProperty

  """
  Owner's verified full name. Values are verified or provided by EPS directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  EPS rarely provides this information so the attribute is usually empty.
  """
  verified_name: String
}

enum Stripe_PaymentMethodDetailsEpsBankProperty {
  arzte_und_apotheker_bank
  austrian_anadi_bank_ag
  bank_austria
  bankhaus_carl_spangler
  bankhaus_schelhammer_und_schattera_ag
  bawag_psk_ag
  bks_bank_ag
  brull_kallmus_bank_ag
  btv_vier_lander_bank
  capital_bank_grawe_gruppe_ag
  dolomitenbank
  easybank_ag
  erste_bank_und_sparkassen
  hypo_alpeadriabank_international_ag
  hypo_bank_burgenland_aktiengesellschaft
  hypo_noe_lb_fur_niederosterreich_u_wien
  hypo_oberosterreich_salzburg_steiermark
  hypo_tirol_bank_ag
  hypo_vorarlberg_bank_ag
  marchfelder_bank
  oberbank_ag
  raiffeisen_bankengruppe_osterreich
  schoellerbank_ag
  sparda_bank_wien
  volksbank_gruppe
  volkskreditbank_ag
  vr_bank_braunau
}

type Stripe_PaymentMethodDetailsFpx {
  """
  The customer's bank. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`.
  """
  bank: Stripe_PaymentMethodDetailsFpxBankProperty

  """
  Unique transaction id generated by FPX for every request from the merchant
  """
  transaction_id: String
}

enum Stripe_PaymentMethodDetailsFpxBankProperty {
  affin_bank
  agrobank
  alliance_bank
  ambank
  bank_islam
  bank_muamalat
  bank_rakyat
  bsn
  cimb
  deutsche_bank
  hong_leong_bank
  hsbc
  kfh
  maybank2e
  maybank2u
  ocbc
  pb_enterprise
  public_bank
  rhb
  standard_chartered
  uob
}

type Stripe_PaymentMethodDetailsGiropay {
  """Bank code of bank associated with the bank account."""
  bank_code: String

  """Name of the bank associated with the bank account."""
  bank_name: String

  """Bank Identifier Code of the bank associated with the bank account."""
  bic: String

  """
  Owner's verified full name. Values are verified or provided by Giropay directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  Giropay rarely provides this information so the attribute is usually empty.
  """
  verified_name: String
}

type Stripe_PaymentMethodDetailsGrabpay {
  """Unique transaction id generated by GrabPay"""
  transaction_id: String
}

type Stripe_PaymentMethodDetailsIdeal {
  """
  The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
  """
  bank: Stripe_PaymentMethodDetailsIdealBankProperty

  """The Bank Identifier Code of the customer's bank."""
  bic: Stripe_PaymentMethodDetailsIdealBicProperty
  generated_sepa_debit: Stripe_PaymentMethodDetailsIdealGeneratedSepaDebitProperty
  generated_sepa_debit_mandate: Stripe_PaymentMethodDetailsIdealGeneratedSepaDebitMandateProperty

  """Last four characters of the IBAN."""
  iban_last4: String

  """
  Owner's verified full name. Values are verified or provided by iDEAL directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

enum Stripe_PaymentMethodDetailsIdealBankProperty {
  abn_amro
  asn_bank
  bunq
  handelsbanken
  ing
  knab
  moneyou
  rabobank
  regiobank
  revolut
  sns_bank
  triodos_bank
  van_lanschot
}

enum Stripe_PaymentMethodDetailsIdealBicProperty {
  ABNANL2A
  ASNBNL21
  BUNQNL2A
  FVLBNL22
  HANDNL2A
  INGBNL2A
  KNABNL2H
  MOYONL21
  RABONL2U
  RBRBNL21
  REVOLT21
  SNSBNL2A
  TRIONL2U
}

union Stripe_PaymentMethodDetailsIdealGeneratedSepaDebitProperty = WrappedString | Stripe_PaymentMethod

union Stripe_PaymentMethodDetailsIdealGeneratedSepaDebitMandateProperty = WrappedString | Stripe_Mandate

type Stripe_PaymentMethodDetailsInteracPresent {
  """Card brand. Can be `interac`, `mastercard` or `visa`."""
  brand: String

  """
  The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
  """
  cardholder_name: String

  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String

  """Authorization response cryptogram."""
  emv_auth_data: String

  """Two-digit number representing the card's expiration month."""
  exp_month: Int

  """Four-digit number representing the card's expiration year."""
  exp_year: Int

  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  
  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
  """
  fingerprint: String

  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String

  """
  ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
  """
  generated_card: String

  """The last four digits of the card."""
  last4: String

  """
  Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  network: String

  """
  EMV tag 5F2D. Preferred languages specified by the integrated circuit chip.
  """
  preferred_locales: [String]

  """How card details were read in this transaction."""
  read_method: Stripe_PaymentMethodDetailsInteracPresentReadMethodProperty
  receipt: Stripe_PaymentMethodDetailsInteracPresentReceipt
}

enum Stripe_PaymentMethodDetailsInteracPresentReadMethodProperty {
  contact_emv
  contactless_emv
  contactless_magstripe_mode
  magnetic_stripe_fallback
  magnetic_stripe_track2
}

type Stripe_PaymentMethodDetailsInteracPresentReceipt {
  """The type of account being debited or credited"""
  account_type: Stripe_PaymentMethodDetailsInteracPresentReceiptAccountTypeProperty

  """EMV tag 9F26, cryptogram generated by the integrated circuit chip."""
  application_cryptogram: String

  """Mnenomic of the Application Identifier."""
  application_preferred_name: String

  """Identifier for this transaction."""
  authorization_code: String

  """EMV tag 8A. A code returned by the card issuer."""
  authorization_response_code: String

  """How the cardholder verified ownership of the card."""
  cardholder_verification_method: String

  """
  EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.
  """
  dedicated_file_name: String

  """The outcome of a series of EMV functions performed by the card reader."""
  terminal_verification_results: String

  """
  An indication of various EMV functions performed during the transaction.
  """
  transaction_status_information: String
}

enum Stripe_PaymentMethodDetailsInteracPresentReceiptAccountTypeProperty {
  checking
  savings
  unknown
}

type Stripe_PaymentMethodDetailsKlarna {
  """
  The Klarna payment method used for this transaction.
  Can be one of `pay_later`, `pay_now`, `pay_with_financing`, or `pay_in_installments`
  """
  payment_method_category: String

  """
  Preferred language of the Klarna authorization page that the customer is redirected to.
  Can be one of `de-AT`, `en-AT`, `nl-BE`, `fr-BE`, `en-BE`, `de-DE`, `en-DE`, `da-DK`, `en-DK`, `es-ES`, `en-ES`, `fi-FI`, `sv-FI`, `en-FI`, `en-GB`, `en-IE`, `it-IT`, `en-IT`, `nl-NL`, `en-NL`, `nb-NO`, `en-NO`, `sv-SE`, `en-SE`, `en-US`, `es-US`, `fr-FR`, or `en-FR`
  """
  preferred_locale: String
}

type Stripe_PaymentMethodDetailsKonbini {
  store: Stripe_PaymentMethodDetailsKonbiniStore
}

type Stripe_PaymentMethodDetailsKonbiniStore {
  """
  The name of the convenience store chain where the payment was completed.
  """
  chain: Stripe_PaymentMethodDetailsKonbiniStoreChainProperty
}

enum Stripe_PaymentMethodDetailsKonbiniStoreChainProperty {
  familymart
  lawson
  ministop
  seicomart
}

type Stripe_PaymentMethodDetailsMultibanco {
  """Entity number associated with this Multibanco payment."""
  entity: String

  """Reference number associated with this Multibanco payment."""
  reference: String
}

type Stripe_PaymentMethodDetailsOxxo {
  """OXXO reference number"""
  number: String
}

type Stripe_PaymentMethodDetailsP24 {
  """
  The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`.
  """
  bank: Stripe_PaymentMethodDetailsP24BankProperty

  """Unique reference for this Przelewy24 payment."""
  reference: String

  """
  Owner's verified full name. Values are verified or provided by Przelewy24 directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  Przelewy24 rarely provides this information so the attribute is usually empty.
  """
  verified_name: String
}

enum Stripe_PaymentMethodDetailsP24BankProperty {
  alior_bank
  bank_millennium
  bank_nowy_bfg_sa
  bank_pekao_sa
  banki_spbdzielcze
  blik
  bnp_paribas
  boz
  citi_handlowy
  credit_agricole
  envelobank
  etransfer_pocztowy24
  getin_bank
  ideabank
  ing
  inteligo
  mbank_mtransfer
  nest_przelew
  noble_pay
  pbac_z_ipko
  plus_bank
  santander_przelew24
  tmobile_usbugi_bankowe
  toyota_bank
  volkswagen_bank
}

type Stripe_PaymentMethodDetailsPaynow {
  """Reference number associated with this PayNow payment"""
  reference: String
}

type Stripe_PaymentMethodDetailsSepaDebit {
  """Bank code of bank associated with the bank account."""
  bank_code: String

  """Branch code of bank associated with the bank account."""
  branch_code: String

  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Last four characters of the IBAN."""
  last4: String

  """ID of the mandate used to make this payment."""
  mandate: String
}

type Stripe_PaymentMethodDetailsSofort {
  """Bank code of bank associated with the bank account."""
  bank_code: String

  """Name of the bank associated with the bank account."""
  bank_name: String

  """Bank Identifier Code of the bank associated with the bank account."""
  bic: String

  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String
  generated_sepa_debit: Stripe_PaymentMethodDetailsSofortGeneratedSepaDebitProperty
  generated_sepa_debit_mandate: Stripe_PaymentMethodDetailsSofortGeneratedSepaDebitMandateProperty

  """Last four characters of the IBAN."""
  iban_last4: String

  """
  Preferred language of the SOFORT authorization page that the customer is redirected to.
  Can be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`
  """
  preferred_language: Stripe_PaymentMethodDetailsSofortPreferredLanguageProperty

  """
  Owner's verified full name. Values are verified or provided by SOFORT directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

union Stripe_PaymentMethodDetailsSofortGeneratedSepaDebitProperty = WrappedString | Stripe_PaymentMethod

union Stripe_PaymentMethodDetailsSofortGeneratedSepaDebitMandateProperty = WrappedString | Stripe_Mandate

enum Stripe_PaymentMethodDetailsSofortPreferredLanguageProperty {
  de
  en
  es
  fr
  it
  nl
  pl
}

type Stripe_PaymentMethodDetailsStripeAccount {
  result: JSONObject
}

type Stripe_PaymentMethodDetailsUsBankAccount {
  """Account holder type: individual or company."""
  account_holder_type: Stripe_PaymentMethodDetailsUsBankAccountAccountHolderTypeProperty

  """Account type: checkings or savings. Defaults to checking if omitted."""
  account_type: Stripe_PaymentMethodDetailsUsBankAccountAccountTypeProperty

  """Name of the bank associated with the bank account."""
  bank_name: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Last four digits of the bank account number."""
  last4: String

  """Routing number of the bank account."""
  routing_number: String
}

enum Stripe_PaymentMethodDetailsUsBankAccountAccountHolderTypeProperty {
  company
  individual
}

enum Stripe_PaymentMethodDetailsUsBankAccountAccountTypeProperty {
  checking
  savings
}

type Stripe_PaymentMethodDetailsWechat {
  result: JSONObject
}

type Stripe_PaymentMethodDetailsWechatPay {
  """
  Uniquely identifies this particular WeChat Pay account. You can use this attribute to check whether two WeChat accounts are the same.
  """
  fingerprint: String

  """Transaction ID of this particular WeChat Pay transaction."""
  transaction_id: String
}

"""A list of refunds that have been applied to the charge."""
type Stripe_ChargeRefundsProperty {
  """Details about each object."""
  data: [Stripe_Refund!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_ChargeRefundsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

enum Stripe_ChargeRefundsObjectProperty {
  list
}

union Stripe_ChargeReviewProperty = WrappedString | Stripe_Review

type Stripe_Review {
  """The ZIP or postal code of the card used, if applicable."""
  billing_zip: String
  charge: Stripe_ReviewChargeProperty

  """
  The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.
  """
  closed_reason: Stripe_ReviewClosedReasonProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """Unique identifier for the object."""
  id: String

  """The IP address where the payment originated."""
  ip_address: String
  ip_address_location: Stripe_RadarReviewResourceLocation

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_ReviewObjectProperty

  """If `true`, the review needs action."""
  open: Boolean

  """The reason the review was opened. One of `rule` or `manual`."""
  opened_reason: Stripe_ReviewOpenedReasonProperty
  payment_intent: Stripe_ReviewPaymentIntentProperty

  """
  The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.
  """
  reason: String
  session: Stripe_RadarReviewResourceSession
}

union Stripe_ReviewChargeProperty = WrappedString | Stripe_Charge

enum Stripe_ReviewClosedReasonProperty {
  approved
  disputed
  redacted
  refunded
  refunded_as_fraud
}

type Stripe_RadarReviewResourceLocation {
  """The city where the payment originated."""
  city: String

  """
  Two-letter ISO code representing the country where the payment originated.
  """
  country: String

  """The geographic latitude where the payment originated."""
  latitude: Float

  """The geographic longitude where the payment originated."""
  longitude: Float

  """The state/county/province/region where the payment originated."""
  region: String
}

enum Stripe_ReviewObjectProperty {
  review
}

enum Stripe_ReviewOpenedReasonProperty {
  manual
  rule
}

union Stripe_ReviewPaymentIntentProperty = WrappedString | Stripe_PaymentIntent

type Stripe_RadarReviewResourceSession {
  """The browser used in this browser session (e.g., `Chrome`)."""
  browser: String

  """
  Information about the device used for the browser session (e.g., `Samsung SM-G930T`).
  """
  device: String

  """The platform for the browser session (e.g., `Macintosh`)."""
  platform: String

  """The version for the browser session (e.g., `61.0.3163.100`)."""
  version: String
}

union Stripe_ChargeSourceTransferProperty = WrappedString | Stripe_Transfer

enum Stripe_ChargeStatusProperty {
  failed
  pending
  succeeded
}

union Stripe_ChargeTransferProperty = WrappedString | Stripe_Transfer

type Stripe_ChargeTransferData {
  """
  The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account.
  """
  amount: Int
  destination: Stripe_ChargeTransferDataDestinationProperty
}

union Stripe_ChargeTransferDataDestinationProperty = WrappedString | Stripe_Account

enum Stripe_PaymentIntentChargesObjectProperty {
  list
}

enum Stripe_PaymentIntentConfirmationMethodProperty {
  automatic
  manual
}

union Stripe_PaymentIntentInvoiceProperty = WrappedString | Stripe_Invoice

type Stripe_PaymentIntentNextAction {
  alipay_handle_redirect: Stripe_PaymentIntentNextActionAlipayHandleRedirect
  boleto_display_details: Stripe_PaymentIntentNextActionBoleto
  card_await_notification: Stripe_PaymentIntentNextActionCardAwaitNotification
  display_bank_transfer_instructions: Stripe_PaymentIntentNextActionDisplayBankTransferInstructions
  konbini_display_details: Stripe_PaymentIntentNextActionKonbini
  oxxo_display_details: Stripe_PaymentIntentNextActionDisplayOxxoDetails
  paynow_display_qr_code: Stripe_PaymentIntentNextActionPaynowDisplayQrCode
  redirect_to_url: Stripe_PaymentIntentNextActionRedirectToUrl

  """
  Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`.
  """
  type: String

  """
  When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.
  """
  use_stripe_sdk: JSONObject
  verify_with_microdeposits: Stripe_PaymentIntentNextActionVerifyWithMicrodeposits
  wechat_pay_display_qr_code: Stripe_PaymentIntentNextActionWechatPayDisplayQrCode
  wechat_pay_redirect_to_android_app: Stripe_PaymentIntentNextActionWechatPayRedirectToAndroidApp
  wechat_pay_redirect_to_ios_app: Stripe_PaymentIntentNextActionWechatPayRedirectToIosApp
}

type Stripe_PaymentIntentNextActionAlipayHandleRedirect {
  """
  The native data to be used with Alipay SDK you must redirect your customer to in order to authenticate the payment in an Android App.
  """
  native_data: String

  """
  The native URL you must redirect your customer to in order to authenticate the payment in an iOS App.
  """
  native_url: String

  """
  If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
  """
  return_url: String

  """
  The URL you must redirect your customer to in order to authenticate the payment.
  """
  url: String
}

type Stripe_PaymentIntentNextActionBoleto {
  """The timestamp after which the boleto expires."""
  expires_at: Int

  """
  The URL to the hosted boleto voucher page, which allows customers to view the boleto voucher.
  """
  hosted_voucher_url: String

  """The boleto number."""
  number: String

  """The URL to the downloadable boleto voucher PDF."""
  pdf: String
}

type Stripe_PaymentIntentNextActionCardAwaitNotification {
  """
  The time that payment will be attempted. If customer approval is required, they need to provide approval before this time.
  """
  charge_attempt_at: Int

  """
  For payments greater than INR 5000, the customer must provide explicit approval of the payment with their bank. For payments of lower amount, no customer action is required.
  """
  customer_approval_required: Boolean
}

type Stripe_PaymentIntentNextActionDisplayBankTransferInstructions {
  """
  The remaining amount that needs to be transferred to complete the payment.
  """
  amount_remaining: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  A list of financial addresses that can be used to fund the customer balance
  """
  financial_addresses: [Stripe_FundingInstructionsBankTransferFinancialAddress]

  """
  A string identifying this payment. Instruct your customer to include this code in the reference or memo field of their bank transfer.
  """
  reference: String

  """Type of bank transfer"""
  type: Stripe_PaymentIntentNextActionDisplayBankTransferInstructionsTypeProperty
}

type Stripe_FundingInstructionsBankTransferFinancialAddress {
  """The payment networks supported by this FinancialAddress"""
  supported_networks: [Stripe_FundingInstructionsBankTransferFinancialAddressSupportedNetworksProperty]

  """The type of financial address"""
  type: Stripe_FundingInstructionsBankTransferFinancialAddressTypeProperty
  zengin: Stripe_FundingInstructionsBankTransferZenginRecord
}

enum Stripe_FundingInstructionsBankTransferFinancialAddressSupportedNetworksProperty {
  sepa
  zengin
}

enum Stripe_FundingInstructionsBankTransferFinancialAddressTypeProperty {
  iban
  zengin
}

type Stripe_FundingInstructionsBankTransferZenginRecord {
  result: JSONObject
}

enum Stripe_PaymentIntentNextActionDisplayBankTransferInstructionsTypeProperty {
  jp_bank_transfer
}

type Stripe_PaymentIntentNextActionKonbini {
  """The timestamp at which the pending Konbini payment expires."""
  expires_at: Int

  """
  The URL for the Konbini payment instructions page, which allows customers to view and print a Konbini voucher.
  """
  hosted_voucher_url: String
  stores: Stripe_PaymentIntentNextActionKonbiniStores
}

type Stripe_PaymentIntentNextActionKonbiniStores {
  familymart: Stripe_PaymentIntentNextActionKonbiniFamilymart
  lawson: Stripe_PaymentIntentNextActionKonbiniLawson
  ministop: Stripe_PaymentIntentNextActionKonbiniMinistop
  seicomart: Stripe_PaymentIntentNextActionKonbiniSeicomart
}

type Stripe_PaymentIntentNextActionKonbiniFamilymart {
  """The confirmation number."""
  confirmation_number: String

  """The payment code."""
  payment_code: String
}

type Stripe_PaymentIntentNextActionKonbiniLawson {
  """The confirmation number."""
  confirmation_number: String

  """The payment code."""
  payment_code: String
}

type Stripe_PaymentIntentNextActionKonbiniMinistop {
  """The confirmation number."""
  confirmation_number: String

  """The payment code."""
  payment_code: String
}

type Stripe_PaymentIntentNextActionKonbiniSeicomart {
  """The confirmation number."""
  confirmation_number: String

  """The payment code."""
  payment_code: String
}

type Stripe_PaymentIntentNextActionDisplayOxxoDetails {
  """The timestamp after which the OXXO voucher expires."""
  expires_after: Int

  """
  The URL for the hosted OXXO voucher page, which allows customers to view and print an OXXO voucher.
  """
  hosted_voucher_url: String

  """OXXO reference number."""
  number: String
}

type Stripe_PaymentIntentNextActionPaynowDisplayQrCode {
  """
  The raw data string used to generate QR code, it should be used together with QR code library.
  """
  data: String

  """The image_url_png string used to render QR code"""
  image_url_png: String

  """The image_url_svg string used to render QR code"""
  image_url_svg: String
}

type Stripe_PaymentIntentNextActionRedirectToUrl {
  """
  If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
  """
  return_url: String

  """
  The URL you must redirect your customer to in order to authenticate the payment.
  """
  url: String
}

type Stripe_PaymentIntentNextActionVerifyWithMicrodeposits {
  """The timestamp when the microdeposits are expected to land."""
  arrival_date: Int

  """
  The URL for the hosted verification page, which allows customers to verify their bank account.
  """
  hosted_verification_url: String

  """
  The type of the microdeposit sent to the customer. Used to distinguish between different verification methods.
  """
  microdeposit_type: Stripe_PaymentIntentNextActionVerifyWithMicrodepositsMicrodepositTypeProperty
}

enum Stripe_PaymentIntentNextActionVerifyWithMicrodepositsMicrodepositTypeProperty {
  amounts
  descriptor_code
}

type Stripe_PaymentIntentNextActionWechatPayDisplayQrCode {
  """The data being used to generate QR code"""
  data: String

  """The base64 image data for a pre-generated QR code"""
  image_data_url: String

  """The image_url_png string used to render QR code"""
  image_url_png: String

  """The image_url_svg string used to render QR code"""
  image_url_svg: String
}

type Stripe_PaymentIntentNextActionWechatPayRedirectToAndroidApp {
  """app_id is the APP ID registered on WeChat open platform"""
  app_id: String

  """nonce_str is a random string"""
  nonce_str: String

  """package is static value"""
  package: String

  """an unique merchant ID assigned by WeChat Pay"""
  partner_id: String

  """an unique trading ID assigned by WeChat Pay"""
  prepay_id: String

  """A signature"""
  sign: String

  """Specifies the current time in epoch format"""
  timestamp: String
}

type Stripe_PaymentIntentNextActionWechatPayRedirectToIosApp {
  """An universal link that redirect to WeChat Pay app"""
  native_url: String
}

enum Stripe_PaymentIntentObjectProperty {
  payment_intent
}

union Stripe_PaymentIntentOnBehalfOfProperty = WrappedString | Stripe_Account

union Stripe_PaymentIntentPaymentMethodProperty = WrappedString | Stripe_PaymentMethod

type Stripe_PaymentIntentPaymentMethodOptions {
  acss_debit: Stripe_PaymentIntentPaymentMethodOptionsAcssDebitProperty
  afterpay_clearpay: Stripe_PaymentIntentPaymentMethodOptionsAfterpayClearpayProperty
  alipay: Stripe_PaymentIntentPaymentMethodOptionsAlipayProperty
  au_becs_debit: Stripe_PaymentIntentPaymentMethodOptionsAuBecsDebitProperty
  bacs_debit: Stripe_PaymentIntentPaymentMethodOptionsBacsDebitProperty
  bancontact: Stripe_PaymentIntentPaymentMethodOptionsBancontactProperty
  boleto: Stripe_PaymentIntentPaymentMethodOptionsBoletoProperty
  card: Stripe_PaymentIntentPaymentMethodOptionsCardProperty
  card_present: Stripe_PaymentIntentPaymentMethodOptionsCardPresentProperty
  customer_balance: Stripe_PaymentIntentPaymentMethodOptionsCustomerBalanceProperty
  eps: Stripe_PaymentIntentPaymentMethodOptionsEpsProperty
  fpx: Stripe_PaymentIntentPaymentMethodOptionsFpxProperty
  giropay: Stripe_PaymentIntentPaymentMethodOptionsGiropayProperty
  grabpay: Stripe_PaymentIntentPaymentMethodOptionsGrabpayProperty
  ideal: Stripe_PaymentIntentPaymentMethodOptionsIdealProperty
  interac_present: Stripe_PaymentIntentPaymentMethodOptionsInteracPresentProperty
  klarna: Stripe_PaymentIntentPaymentMethodOptionsKlarnaProperty
  konbini: Stripe_PaymentIntentPaymentMethodOptionsKonbiniProperty
  oxxo: Stripe_PaymentIntentPaymentMethodOptionsOxxoProperty
  p24: Stripe_PaymentIntentPaymentMethodOptionsP24Property
  paynow: Stripe_PaymentIntentPaymentMethodOptionsPaynowProperty
  sepa_debit: Stripe_PaymentIntentPaymentMethodOptionsSepaDebitProperty
  sofort: Stripe_PaymentIntentPaymentMethodOptionsSofortProperty
  us_bank_account: Stripe_PaymentIntentPaymentMethodOptionsUsBankAccountProperty
  wechat_pay: Stripe_PaymentIntentPaymentMethodOptionsWechatPayProperty
}

union Stripe_PaymentIntentPaymentMethodOptionsAcssDebitProperty = Stripe_PaymentIntentPaymentMethodOptionsAcssDebit | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentIntentPaymentMethodOptionsAcssDebit {
  mandate_options: Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentIntentPaymentMethodOptionsAcssDebitSetupFutureUsageProperty

  """Bank account verification method."""
  verification_method: Stripe_PaymentIntentPaymentMethodOptionsAcssDebitVerificationMethodProperty
}

type Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit {
  """A URL for custom mandate text"""
  custom_mandate_url: String

  """
  Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
  """
  interval_description: String

  """Payment schedule for the mandate."""
  payment_schedule: Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentScheduleProperty

  """Transaction type of the mandate."""
  transaction_type: Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionTypeProperty
}

enum Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentScheduleProperty {
  combined
  interval
  sporadic
}

enum Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionTypeProperty {
  business
  personal
}

enum Stripe_PaymentIntentPaymentMethodOptionsAcssDebitSetupFutureUsageProperty {
  none
  off_session
  on_session
}

enum Stripe_PaymentIntentPaymentMethodOptionsAcssDebitVerificationMethodProperty {
  automatic
  instant
  microdeposits
}

type Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient {
  """Controls when the funds will be captured from the customer's account."""
  capture_method: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethodProperty

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsageProperty

  """Bank account verification method."""
  verification_method: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethodProperty
}

enum Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethodProperty {
  manual
}

enum Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsageProperty {
  none
  off_session
  on_session
}

enum Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethodProperty {
  automatic
  instant
  microdeposits
}

union Stripe_PaymentIntentPaymentMethodOptionsAfterpayClearpayProperty = Stripe_PaymentMethodOptionsAfterpayClearpay | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentMethodOptionsAfterpayClearpay {
  """Controls when the funds will be captured from the customer's account."""
  capture_method: Stripe_PaymentMethodOptionsAfterpayClearpayCaptureMethodProperty

  """
  Order identifier shown to the customer in Afterpayâ€™s online portal. We recommend using a value that helps you answer any questions a customer might have about
  the payment. The identifier is limited to 128 characters and may contain only letters, digits, underscores, backslashes and dashes.
  """
  reference: String

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentMethodOptionsAfterpayClearpaySetupFutureUsageProperty
}

enum Stripe_PaymentMethodOptionsAfterpayClearpayCaptureMethodProperty {
  manual
}

enum Stripe_PaymentMethodOptionsAfterpayClearpaySetupFutureUsageProperty {
  none
}

union Stripe_PaymentIntentPaymentMethodOptionsAlipayProperty = Stripe_PaymentMethodOptionsAlipay | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentMethodOptionsAlipay {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentMethodOptionsAlipaySetupFutureUsageProperty
}

enum Stripe_PaymentMethodOptionsAlipaySetupFutureUsageProperty {
  none
  off_session
}

union Stripe_PaymentIntentPaymentMethodOptionsAuBecsDebitProperty = Stripe_PaymentIntentPaymentMethodOptionsAuBecsDebit | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentIntentPaymentMethodOptionsAuBecsDebit {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentIntentPaymentMethodOptionsAuBecsDebitSetupFutureUsageProperty
}

enum Stripe_PaymentIntentPaymentMethodOptionsAuBecsDebitSetupFutureUsageProperty {
  none
  off_session
  on_session
}

union Stripe_PaymentIntentPaymentMethodOptionsBacsDebitProperty = Stripe_PaymentMethodOptionsBacsDebit | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentMethodOptionsBacsDebit {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentMethodOptionsBacsDebitSetupFutureUsageProperty
}

enum Stripe_PaymentMethodOptionsBacsDebitSetupFutureUsageProperty {
  none
  off_session
  on_session
}

union Stripe_PaymentIntentPaymentMethodOptionsBancontactProperty = Stripe_PaymentMethodOptionsBancontact | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentMethodOptionsBancontact {
  """
  Preferred language of the Bancontact authorization page that the customer is redirected to.
  """
  preferred_language: Stripe_PaymentMethodOptionsBancontactPreferredLanguageProperty

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentMethodOptionsBancontactSetupFutureUsageProperty
}

enum Stripe_PaymentMethodOptionsBancontactPreferredLanguageProperty {
  de
  en
  fr
  nl
}

enum Stripe_PaymentMethodOptionsBancontactSetupFutureUsageProperty {
  none
  off_session
}

union Stripe_PaymentIntentPaymentMethodOptionsBoletoProperty = Stripe_PaymentMethodOptionsBoleto | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentMethodOptionsBoleto {
  """
  The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time.
  """
  expires_after_days: Int

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentMethodOptionsBoletoSetupFutureUsageProperty
}

enum Stripe_PaymentMethodOptionsBoletoSetupFutureUsageProperty {
  none
  off_session
  on_session
}

union Stripe_PaymentIntentPaymentMethodOptionsCardProperty = Stripe_PaymentIntentPaymentMethodOptionsCard | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentIntentPaymentMethodOptionsCard {
  """Controls when the funds will be captured from the customer's account."""
  capture_method: Stripe_PaymentIntentPaymentMethodOptionsCardCaptureMethodProperty
  installments: Stripe_PaymentMethodOptionsCardInstallments
  mandate_options: Stripe_PaymentMethodOptionsCardMandateOptions

  """
  Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time.
  """
  network: Stripe_PaymentIntentPaymentMethodOptionsCardNetworkProperty

  """
  We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
  """
  request_three_d_secure: Stripe_PaymentIntentPaymentMethodOptionsCardRequestThreeDSecureProperty

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentIntentPaymentMethodOptionsCardSetupFutureUsageProperty
}

enum Stripe_PaymentIntentPaymentMethodOptionsCardCaptureMethodProperty {
  manual
}

type Stripe_PaymentMethodOptionsCardInstallments {
  """Installment plans that may be selected for this PaymentIntent."""
  available_plans: [Stripe_PaymentMethodDetailsCardInstallmentsPlan]

  """Whether Installments are enabled for this PaymentIntent."""
  enabled: Boolean
  plan: Stripe_PaymentMethodDetailsCardInstallmentsPlan
}

type Stripe_PaymentMethodOptionsCardMandateOptions {
  """Amount to be charged for future payments."""
  amount: Int

  """
  One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
  """
  amount_type: Stripe_PaymentMethodOptionsCardMandateOptionsAmountTypeProperty

  """
  A description of the mandate or subscription that is meant to be displayed to the customer.
  """
  description: String

  """
  End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date.
  """
  end_date: Int

  """
  Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`.
  """
  interval: Stripe_PaymentMethodOptionsCardMandateOptionsIntervalProperty

  """
  The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`.
  """
  interval_count: Int

  """Unique identifier for the mandate or subscription."""
  reference: String

  """
  Start date of the mandate or subscription. Start date should not be lesser than yesterday.
  """
  start_date: Int

  """Specifies the type of mandates supported. Possible values are `india`."""
  supported_types: [Stripe_PaymentMethodOptionsCardMandateOptionsSupportedTypesProperty]
}

enum Stripe_PaymentMethodOptionsCardMandateOptionsAmountTypeProperty {
  fixed
  maximum
}

enum Stripe_PaymentMethodOptionsCardMandateOptionsIntervalProperty {
  day
  month
  sporadic
  week
  year
}

enum Stripe_PaymentMethodOptionsCardMandateOptionsSupportedTypesProperty {
  india
}

enum Stripe_PaymentIntentPaymentMethodOptionsCardNetworkProperty {
  amex
  cartes_bancaires
  diners
  discover
  interac
  jcb
  mastercard
  unionpay
  unknown
  visa
}

enum Stripe_PaymentIntentPaymentMethodOptionsCardRequestThreeDSecureProperty {
  any
  automatic
  challenge_only
}

enum Stripe_PaymentIntentPaymentMethodOptionsCardSetupFutureUsageProperty {
  none
  off_session
  on_session
}

union Stripe_PaymentIntentPaymentMethodOptionsCardPresentProperty = Stripe_PaymentMethodOptionsCardPresent | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentMethodOptionsCardPresent {
  """
  Request ability to capture this payment beyond the standard [authorization validity window](https://stripe.com/docs/terminal/features/extended-authorizations#authorization-validity)
  """
  request_extended_authorization: Boolean

  """
  Request ability to [increment](https://stripe.com/docs/terminal/features/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https://stripe.com/docs/api/payment_intents/confirm) response to verify support.
  """
  request_incremental_authorization_support: Boolean
}

union Stripe_PaymentIntentPaymentMethodOptionsCustomerBalanceProperty = Stripe_PaymentMethodOptionsCustomerBalance | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentMethodOptionsCustomerBalance {
  bank_transfer: Stripe_PaymentMethodOptionsCustomerBalanceBankTransfer

  """
  The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
  """
  funding_type: Stripe_PaymentMethodOptionsCustomerBalanceFundingTypeProperty

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentMethodOptionsCustomerBalanceSetupFutureUsageProperty
}

type Stripe_PaymentMethodOptionsCustomerBalanceBankTransfer {
  """
  List of address types that should be returned in the financial_addresses response. If not specified, all valid types will be returned.
  
  Permitted values include: `zengin`.
  """
  requested_address_types: [Stripe_PaymentMethodOptionsCustomerBalanceBankTransferRequestedAddressTypesProperty]

  """
  The bank transfer type that this PaymentIntent is allowed to use for funding. Permitted values include: `us_bank_account`, `eu_bank_account`, `id_bank_account`, `gb_bank_account`, `jp_bank_account`, `mx_bank_account`, `eu_bank_transfer`, `gb_bank_transfer`, `id_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
  """
  type: Stripe_PaymentMethodOptionsCustomerBalanceBankTransferTypeProperty
}

enum Stripe_PaymentMethodOptionsCustomerBalanceBankTransferRequestedAddressTypesProperty {
  zengin
}

enum Stripe_PaymentMethodOptionsCustomerBalanceBankTransferTypeProperty {
  eu_bank_account
  eu_bank_transfer
  gb_bank_account
  gb_bank_transfer
  id_bank_account
  id_bank_transfer
  jp_bank_account
  jp_bank_transfer
  mx_bank_account
  mx_bank_transfer
  us_bank_account
  us_bank_transfer
}

enum Stripe_PaymentMethodOptionsCustomerBalanceFundingTypeProperty {
  bank_transfer
}

enum Stripe_PaymentMethodOptionsCustomerBalanceSetupFutureUsageProperty {
  none
}

union Stripe_PaymentIntentPaymentMethodOptionsEpsProperty = Stripe_PaymentIntentPaymentMethodOptionsEps | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentIntentPaymentMethodOptionsEps {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentIntentPaymentMethodOptionsEpsSetupFutureUsageProperty
}

enum Stripe_PaymentIntentPaymentMethodOptionsEpsSetupFutureUsageProperty {
  none
}

union Stripe_PaymentIntentPaymentMethodOptionsFpxProperty = Stripe_PaymentMethodOptionsFpx | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentMethodOptionsFpx {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentMethodOptionsFpxSetupFutureUsageProperty
}

enum Stripe_PaymentMethodOptionsFpxSetupFutureUsageProperty {
  none
}

union Stripe_PaymentIntentPaymentMethodOptionsGiropayProperty = Stripe_PaymentMethodOptionsGiropay | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentMethodOptionsGiropay {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentMethodOptionsGiropaySetupFutureUsageProperty
}

enum Stripe_PaymentMethodOptionsGiropaySetupFutureUsageProperty {
  none
}

union Stripe_PaymentIntentPaymentMethodOptionsGrabpayProperty = Stripe_PaymentMethodOptionsGrabpay | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentMethodOptionsGrabpay {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentMethodOptionsGrabpaySetupFutureUsageProperty
}

enum Stripe_PaymentMethodOptionsGrabpaySetupFutureUsageProperty {
  none
}

union Stripe_PaymentIntentPaymentMethodOptionsIdealProperty = Stripe_PaymentMethodOptionsIdeal | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentMethodOptionsIdeal {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentMethodOptionsIdealSetupFutureUsageProperty
}

enum Stripe_PaymentMethodOptionsIdealSetupFutureUsageProperty {
  none
  off_session
}

union Stripe_PaymentIntentPaymentMethodOptionsInteracPresentProperty = Stripe_PaymentMethodOptionsInteracPresent | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentMethodOptionsInteracPresent {
  result: JSONObject
}

union Stripe_PaymentIntentPaymentMethodOptionsKlarnaProperty = Stripe_PaymentMethodOptionsKlarna | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentMethodOptionsKlarna {
  """Controls when the funds will be captured from the customer's account."""
  capture_method: Stripe_PaymentMethodOptionsKlarnaCaptureMethodProperty

  """
  Preferred locale of the Klarna checkout page that the customer is redirected to.
  """
  preferred_locale: String

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentMethodOptionsKlarnaSetupFutureUsageProperty
}

enum Stripe_PaymentMethodOptionsKlarnaCaptureMethodProperty {
  manual
}

enum Stripe_PaymentMethodOptionsKlarnaSetupFutureUsageProperty {
  none
}

union Stripe_PaymentIntentPaymentMethodOptionsKonbiniProperty = Stripe_PaymentMethodOptionsKonbini | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentMethodOptionsKonbini {
  """
  An optional 10 to 11 digit numeric-only string determining the confirmation code at applicable convenience stores.
  """
  confirmation_number: String

  """
  The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST.
  """
  expires_after_days: Int

  """
  The timestamp at which the Konbini payment instructions will expire. Only one of `expires_after_days` or `expires_at` may be set.
  """
  expires_at: Int

  """
  A product descriptor of up to 22 characters, which will appear to customers at the convenience store.
  """
  product_description: String

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentMethodOptionsKonbiniSetupFutureUsageProperty
}

enum Stripe_PaymentMethodOptionsKonbiniSetupFutureUsageProperty {
  none
}

union Stripe_PaymentIntentPaymentMethodOptionsOxxoProperty = Stripe_PaymentMethodOptionsOxxo | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentMethodOptionsOxxo {
  """
  The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time.
  """
  expires_after_days: Int

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentMethodOptionsOxxoSetupFutureUsageProperty
}

enum Stripe_PaymentMethodOptionsOxxoSetupFutureUsageProperty {
  none
}

union Stripe_PaymentIntentPaymentMethodOptionsP24Property = Stripe_PaymentMethodOptionsP24 | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentMethodOptionsP24 {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentMethodOptionsP24SetupFutureUsageProperty
}

enum Stripe_PaymentMethodOptionsP24SetupFutureUsageProperty {
  none
}

union Stripe_PaymentIntentPaymentMethodOptionsPaynowProperty = Stripe_PaymentMethodOptionsPaynow | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentMethodOptionsPaynow {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentMethodOptionsPaynowSetupFutureUsageProperty
}

enum Stripe_PaymentMethodOptionsPaynowSetupFutureUsageProperty {
  none
}

union Stripe_PaymentIntentPaymentMethodOptionsSepaDebitProperty = Stripe_PaymentIntentPaymentMethodOptionsSepaDebit | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentIntentPaymentMethodOptionsSepaDebit {
  mandate_options: Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentIntentPaymentMethodOptionsSepaDebitSetupFutureUsageProperty
}

type Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit {
  result: JSONObject
}

enum Stripe_PaymentIntentPaymentMethodOptionsSepaDebitSetupFutureUsageProperty {
  none
  off_session
  on_session
}

union Stripe_PaymentIntentPaymentMethodOptionsSofortProperty = Stripe_PaymentMethodOptionsSofort | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentMethodOptionsSofort {
  """
  Preferred language of the SOFORT authorization page that the customer is redirected to.
  """
  preferred_language: Stripe_PaymentMethodOptionsSofortPreferredLanguageProperty

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentMethodOptionsSofortSetupFutureUsageProperty
}

enum Stripe_PaymentMethodOptionsSofortPreferredLanguageProperty {
  de
  en
  es
  fr
  it
  nl
  pl
}

enum Stripe_PaymentMethodOptionsSofortSetupFutureUsageProperty {
  none
  off_session
}

union Stripe_PaymentIntentPaymentMethodOptionsUsBankAccountProperty = Stripe_PaymentIntentPaymentMethodOptionsUsBankAccount | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentIntentPaymentMethodOptionsUsBankAccount {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentIntentPaymentMethodOptionsUsBankAccountSetupFutureUsageProperty

  """Bank account verification method."""
  verification_method: Stripe_PaymentIntentPaymentMethodOptionsUsBankAccountVerificationMethodProperty
}

enum Stripe_PaymentIntentPaymentMethodOptionsUsBankAccountSetupFutureUsageProperty {
  none
  off_session
  on_session
}

enum Stripe_PaymentIntentPaymentMethodOptionsUsBankAccountVerificationMethodProperty {
  automatic
  instant
  microdeposits
}

union Stripe_PaymentIntentPaymentMethodOptionsWechatPayProperty = Stripe_PaymentMethodOptionsWechatPay | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient

type Stripe_PaymentMethodOptionsWechatPay {
  """
  The app ID registered with WeChat Pay. Only required when client is ios or android.
  """
  app_id: String

  """The client type that the end customer will pay from"""
  client: Stripe_PaymentMethodOptionsWechatPayClientProperty

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentMethodOptionsWechatPaySetupFutureUsageProperty
}

enum Stripe_PaymentMethodOptionsWechatPayClientProperty {
  android
  ios
  web
}

enum Stripe_PaymentMethodOptionsWechatPaySetupFutureUsageProperty {
  none
}

type Stripe_PaymentIntentProcessing {
  card: Stripe_PaymentIntentCardProcessing

  """
  Type of the payment method for which payment is in `processing` state, one of `card`.
  """
  type: Stripe_PaymentIntentProcessingTypeProperty
}

type Stripe_PaymentIntentCardProcessing {
  customer_notification: Stripe_PaymentIntentProcessingCustomerNotification
}

type Stripe_PaymentIntentProcessingCustomerNotification {
  """
  Whether customer approval has been requested for this payment. For payments greater than INR 5000 or mandate amount, the customer must provide explicit approval of the payment with their bank.
  """
  approval_requested: Boolean

  """
  If customer approval is required, they need to provide approval before this time.
  """
  completes_at: Int
}

enum Stripe_PaymentIntentProcessingTypeProperty {
  card
}

union Stripe_PaymentIntentReviewProperty = WrappedString | Stripe_Review

enum Stripe_PaymentIntentSetupFutureUsageProperty {
  off_session
  on_session
}

enum Stripe_PaymentIntentStatusProperty {
  canceled
  processing
  requires_action
  requires_capture
  requires_confirmation
  requires_payment_method
  succeeded
}

type Stripe_TransferData {
  """
  Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  """
  amount: Int
  destination: Stripe_TransferDataDestinationProperty
}

union Stripe_TransferDataDestinationProperty = WrappedString | Stripe_Account

type Stripe_Invoiceitem {
  """
  Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`.
  """
  amount: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  customer: String

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  date: Int

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """
  If true, discounts will apply to this invoice item. Always false for prorations.
  """
  discountable: Boolean

  """
  The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
  """
  discounts: [Stripe_InvoiceitemDiscountsProperty]

  """Unique identifier for the object."""
  id: String
  invoice: Stripe_InvoiceitemInvoiceProperty

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_InvoiceitemObjectProperty
  period: Stripe_InvoiceLineItemPeriod
  price: Stripe_Price

  """
  Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.
  """
  proration: Boolean

  """
  Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for.
  """
  quantity: Int
  subscription: Stripe_InvoiceitemSubscriptionProperty

  """
  The subscription item that this invoice item has been created for, if any.
  """
  subscription_item: String

  """
  The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item.
  """
  tax_rates: [Stripe_TaxRate]
  test_clock: Stripe_InvoiceitemTestClockProperty

  """Unit amount (in the `currency` specified) of the invoice item."""
  unit_amount: Int

  """
  Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
  """
  unit_amount_decimal: String
}

union Stripe_InvoiceitemDiscountsProperty = WrappedString | Stripe_Discount

union Stripe_InvoiceitemInvoiceProperty = WrappedString | Stripe_Invoice

enum Stripe_InvoiceitemObjectProperty {
  invoiceitem
}

union Stripe_InvoiceitemSubscriptionProperty = WrappedString | Stripe_Subscription

union Stripe_InvoiceitemTestClockProperty = WrappedString | Stripe_TestHelpersTestClock

type ShipEngine_Label {
  label_id: String
  status: String
  shipment_id: String
  ship_date: String
  created_at: String
  tracking_number: String
  batch_id: String
  carrier_id: String
  charge_event: String
  service_code: String
  package_code: String
  voided_at: String
  label_format: String
  display_scheme: String
  label_layout: String
  label_image_id: String
  carrier_code: String
  tracking_status: String
  label_download: ShipEngine_LabelDownload
  trackable: Boolean
  packages: [ShipEngine_Package]
}

type ShipEngine_LabelDownload {
  href: String
  pdf: String
  png: String
  zpl: String
}

type ShipEngine_Package {
  package_id: Int
  description: String
  package_code: String
  tracking_number: String
  label_download: ShipEngine_LabelDownload
  weight: ShipEngine_Weight
  dimensions: ShipEngine_Dimensions
}

type ShipEngine_Weight {
  value: Float
  unit: String
}

type ShipEngine_Dimensions {
  length: Float
  width: Float
  height: Float
  unit: String
}

union Stripe_ApiErrorsSourceProperty = Stripe_BankAccount | Stripe_Card | Stripe_Source

enum Stripe_ApiErrorsTypeProperty {
  api_error
  card_error
  idempotency_error
  invalid_request_error
}

union Stripe_SetupAttemptSetupIntentProperty = WrappedString | Stripe_SetupIntent

type Stripe_Networks {
  """All available networks for the card."""
  available: [String]

  """The preferred network for the card."""
  preferred: String
}

type Stripe_ThreeDSecureUsage {
  """Whether 3D Secure is supported on this card."""
  supported: Boolean
}

type Stripe_PaymentMethodCardWallet {
  amex_express_checkout: Stripe_PaymentMethodCardWalletAmexExpressCheckout
  apple_pay: Stripe_PaymentMethodCardWalletApplePay

  """
  (For tokenized numbers only.) The last four digits of the device account number.
  """
  dynamic_last4: String
  google_pay: Stripe_PaymentMethodCardWalletGooglePay
  masterpass: Stripe_PaymentMethodCardWalletMasterpass
  samsung_pay: Stripe_PaymentMethodCardWalletSamsungPay

  """
  The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
  """
  type: Stripe_PaymentMethodCardWalletTypeProperty
  visa_checkout: Stripe_PaymentMethodCardWalletVisaCheckout
}

type Stripe_PaymentMethodCardWalletAmexExpressCheckout {
  result: JSONObject
}

type Stripe_PaymentMethodCardWalletApplePay {
  result: JSONObject
}

type Stripe_PaymentMethodCardWalletGooglePay {
  result: JSONObject
}

type Stripe_PaymentMethodCardWalletMasterpass {
  billing_address: Stripe_Address

  """
  Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  email: String

  """
  Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  name: String
  shipping_address: Stripe_Address
}

type Stripe_PaymentMethodCardWalletSamsungPay {
  result: JSONObject
}

enum Stripe_PaymentMethodCardWalletTypeProperty {
  amex_express_checkout
  apple_pay
  google_pay
  masterpass
  samsung_pay
  visa_checkout
}

type Stripe_PaymentMethodCardWalletVisaCheckout {
  billing_address: Stripe_Address

  """
  Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  email: String

  """
  Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  name: String
  shipping_address: Stripe_Address
}

type Stripe_PaymentMethodCardPresent {
  result: JSONObject
}

union Stripe_PaymentMethodCustomerProperty = WrappedString | Stripe_Customer

type Stripe_PaymentMethodCustomerBalance {
  result: JSONObject
}

type Stripe_PaymentMethodEps {
  """
  The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
  """
  bank: Stripe_PaymentMethodEpsBankProperty
}

enum Stripe_PaymentMethodEpsBankProperty {
  arzte_und_apotheker_bank
  austrian_anadi_bank_ag
  bank_austria
  bankhaus_carl_spangler
  bankhaus_schelhammer_und_schattera_ag
  bawag_psk_ag
  bks_bank_ag
  brull_kallmus_bank_ag
  btv_vier_lander_bank
  capital_bank_grawe_gruppe_ag
  dolomitenbank
  easybank_ag
  erste_bank_und_sparkassen
  hypo_alpeadriabank_international_ag
  hypo_bank_burgenland_aktiengesellschaft
  hypo_noe_lb_fur_niederosterreich_u_wien
  hypo_oberosterreich_salzburg_steiermark
  hypo_tirol_bank_ag
  hypo_vorarlberg_bank_ag
  marchfelder_bank
  oberbank_ag
  raiffeisen_bankengruppe_osterreich
  schoellerbank_ag
  sparda_bank_wien
  volksbank_gruppe
  volkskreditbank_ag
  vr_bank_braunau
}

type Stripe_PaymentMethodFpx {
  """
  The customer's bank, if provided. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`.
  """
  bank: Stripe_PaymentMethodFpxBankProperty
}

enum Stripe_PaymentMethodFpxBankProperty {
  affin_bank
  agrobank
  alliance_bank
  ambank
  bank_islam
  bank_muamalat
  bank_rakyat
  bsn
  cimb
  deutsche_bank
  hong_leong_bank
  hsbc
  kfh
  maybank2e
  maybank2u
  ocbc
  pb_enterprise
  public_bank
  rhb
  standard_chartered
  uob
}

type Stripe_PaymentMethodGiropay {
  result: JSONObject
}

type Stripe_PaymentMethodGrabpay {
  result: JSONObject
}

type Stripe_PaymentMethodIdeal {
  """
  The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
  """
  bank: Stripe_PaymentMethodIdealBankProperty

  """
  The Bank Identifier Code of the customer's bank, if the bank was provided.
  """
  bic: Stripe_PaymentMethodIdealBicProperty
}

enum Stripe_PaymentMethodIdealBankProperty {
  abn_amro
  asn_bank
  bunq
  handelsbanken
  ing
  knab
  moneyou
  rabobank
  regiobank
  revolut
  sns_bank
  triodos_bank
  van_lanschot
}

enum Stripe_PaymentMethodIdealBicProperty {
  ABNANL2A
  ASNBNL21
  BUNQNL2A
  FVLBNL22
  HANDNL2A
  INGBNL2A
  KNABNL2H
  MOYONL21
  RABONL2U
  RBRBNL21
  REVOLT21
  SNSBNL2A
  TRIONL2U
}

type Stripe_PaymentMethodInteracPresent {
  result: JSONObject
}

type Stripe_PaymentMethodKlarna {
  dob: Stripe_PaymentFlowsPrivatePaymentMethodsKlarnaDob
}

type Stripe_PaymentFlowsPrivatePaymentMethodsKlarnaDob {
  """The day of birth, between 1 and 31."""
  day: Int

  """The month of birth, between 1 and 12."""
  month: Int

  """The four-digit year of birth."""
  year: Int
}

type Stripe_PaymentMethodKonbini {
  result: JSONObject
}

enum Stripe_PaymentMethodObjectProperty {
  payment_method
}

type Stripe_PaymentMethodOxxo {
  result: JSONObject
}

type Stripe_PaymentMethodP24 {
  """The customer's bank, if provided."""
  bank: Stripe_PaymentMethodP24BankProperty
}

enum Stripe_PaymentMethodP24BankProperty {
  alior_bank
  bank_millennium
  bank_nowy_bfg_sa
  bank_pekao_sa
  banki_spbdzielcze
  blik
  bnp_paribas
  boz
  citi_handlowy
  credit_agricole
  envelobank
  etransfer_pocztowy24
  getin_bank
  ideabank
  ing
  inteligo
  mbank_mtransfer
  nest_przelew
  noble_pay
  pbac_z_ipko
  plus_bank
  santander_przelew24
  tmobile_usbugi_bankowe
  toyota_bank
  volkswagen_bank
}

type Stripe_PaymentMethodPaynow {
  result: JSONObject
}

type Stripe_PaymentMethodSepaDebit {
  """Bank code of bank associated with the bank account."""
  bank_code: String

  """Branch code of bank associated with the bank account."""
  branch_code: String

  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String
  generated_from: Stripe_SepaDebitGeneratedFrom

  """Last four characters of the IBAN."""
  last4: String
}

type Stripe_SepaDebitGeneratedFrom {
  charge: Stripe_SepaDebitGeneratedFromChargeProperty
  setup_attempt: Stripe_SepaDebitGeneratedFromSetupAttemptProperty
}

union Stripe_SepaDebitGeneratedFromChargeProperty = WrappedString | Stripe_Charge

union Stripe_SepaDebitGeneratedFromSetupAttemptProperty = WrappedString | Stripe_SetupAttempt

type Stripe_PaymentMethodSofort {
  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String
}

enum Stripe_PaymentMethodTypeProperty {
  acss_debit
  afterpay_clearpay
  alipay
  au_becs_debit
  bacs_debit
  bancontact
  boleto
  card
  card_present
  customer_balance
  eps
  fpx
  giropay
  grabpay
  ideal
  interac_present
  klarna
  konbini
  oxxo
  p24
  paynow
  sepa_debit
  sofort
  us_bank_account
  wechat_pay
}

type Stripe_PaymentMethodUsBankAccount {
  """Account holder type: individual or company."""
  account_holder_type: Stripe_PaymentMethodUsBankAccountAccountHolderTypeProperty

  """Account type: checkings or savings. Defaults to checking if omitted."""
  account_type: Stripe_PaymentMethodUsBankAccountAccountTypeProperty

  """The name of the bank."""
  bank_name: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Last four digits of the bank account number."""
  last4: String

  """Routing number of the bank account."""
  routing_number: String
}

enum Stripe_PaymentMethodUsBankAccountAccountHolderTypeProperty {
  company
  individual
}

enum Stripe_PaymentMethodUsBankAccountAccountTypeProperty {
  checking
  savings
}

type Stripe_PaymentMethodWechatPay {
  result: JSONObject
}

enum Stripe_CustomerObjectProperty {
  customer
}

"""The customer's payment sources, if any."""
type Stripe_CustomerSourcesProperty {
  """Details about each object."""
  data: [Stripe_CustomerSourcesDataProperty!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_CustomerSourcesObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

union Stripe_CustomerSourcesDataProperty = Stripe_AlipayAccount | Stripe_BankAccount | Stripe_BitcoinReceiver | Stripe_Card | Stripe_Source

enum Stripe_CustomerSourcesObjectProperty {
  list
}

"""The customer's current subscriptions, if any."""
type Stripe_CustomerSubscriptionsProperty {
  """Details about each object."""
  data: [Stripe_Subscription!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_CustomerSubscriptionsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

enum Stripe_CustomerSubscriptionsObjectProperty {
  list
}

type Stripe_CustomerTax {
  """
  Surfaces if automatic tax computation is possible given the current customer location information.
  """
  automatic_tax: Stripe_CustomerTaxAutomaticTaxProperty

  """
  A recent IP address of the customer used for tax reporting and tax location inference.
  """
  ip_address: String
  location: Stripe_CustomerTaxLocation
}

enum Stripe_CustomerTaxAutomaticTaxProperty {
  failed
  not_collecting
  supported
  unrecognized_location
}

type Stripe_CustomerTaxLocation {
  """The customer's country as identified by Stripe Tax."""
  country: String

  """The data source used to infer the customer's location."""
  source: Stripe_CustomerTaxLocationSourceProperty

  """
  The customer's state, county, province, or region as identified by Stripe Tax.
  """
  state: String
}

enum Stripe_CustomerTaxLocationSourceProperty {
  billing_address
  ip_address
  payment_method
  shipping_destination
}

enum Stripe_CustomerTaxExemptProperty {
  exempt
  none
  reverse
}

"""The customer's tax IDs."""
type Stripe_CustomerTaxIdsProperty {
  """Details about each object."""
  data: [Stripe_TaxId!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_CustomerTaxIdsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

enum Stripe_CustomerTaxIdsObjectProperty {
  list
}

union Stripe_CustomerTestClockProperty = WrappedString | Stripe_TestHelpersTestClock

type Voucherify_LoyaltyCard {
  id: String
  code: String
  campaign: String
  campaign_id: String
  type: String
  loyalty_card: Voucherify_LoyaltyCardStats
  active: Boolean
  assets: Voucherify_LoyaltyCardAssets
}

type Voucherify_LoyaltyCardStats {
  points: Int
  balance: Int
}

type Voucherify_LoyaltyCardAssets {
  qr: Voucherify_LoyaltyCardAsset
  barcode: Voucherify_LoyaltyCardAsset
}

type Voucherify_LoyaltyCardAsset {
  id: String
  url: String
}

type Stripe_PaymentIntentPaginatedList {
  items: [Stripe_PaymentIntent!]!
  total: Int!
}

input TSWhereStripePaymentIntentInput {
  amount: TSWhereIntegerInput
  amount_capturable: TSWhereIntegerInput
  amount_details: TSWhereStripe_PaymentFlowsAmountDetailsInput
  amount_received: TSWhereIntegerInput
  application: TSWhereStripe_ApplicationWrappedStringUnionInput
  application_fee_amount: TSWhereIntegerInput
  automatic_payment_methods: TSWhereStripe_PaymentFlowsAutomaticPaymentMethodsPaymentIntentInput
  canceled_at: TSWhereIntegerInput
  cancellation_reason: TSWhereInput
  capture_method: TSWhereInput
  charges: TSWhereStripe_PaymentIntentChargesInput
  client_secret: TSWhereStringInput
  confirmation_method: TSWhereInput
  created: TSWhereIntegerInput
  currency: TSWhereStringInput
  customer: TSWhereStringInput
  description: TSWhereStringInput
  id: TSWhereStringInput
  invoice: TSWhereStripe_InvoiceWrappedStringUnionInput
  last_payment_error: TSWhereStripe_ApiErrorsInput
  livemode: TSWhereBooleanInput
  next_action: TSWhereStripe_PaymentIntentNextActionInput
  object: TSWhereInput
  on_behalf_of: TSWhereStripe_AccountWrappedStringUnionInput
  payment_method: TSWhereStripe_PaymentMethodWrappedStringUnionInput
  payment_method_options: TSWhereStripe_PaymentIntentPaymentMethodOptionsInput
  payment_method_types: TSWhereStripe_PaymentIntentPaymentMethodTypesInput
  processing: TSWhereStripe_PaymentIntentProcessingInput
  receipt_email: TSWhereStringInput
  review: TSWhereStripe_ReviewWrappedStringUnionInput
  setup_future_usage: TSWhereInput
  shipping: TSWhereStripe_ShippingInput
  statement_descriptor: TSWhereStringInput
  statement_descriptor_suffix: TSWhereStringInput
  status: TSWhereInput
  transfer_data: TSWhereStripe_TransferDataInput
  transfer_group: TSWhereStringInput
  invoiceItems: TSWhereStripe_InvoiceitemInput
  sessionItems: TSWhereStripe_ItemInput
  shipment: TSWhereShipEngine_LabelInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  AND: [TSWhereStripePaymentIntentInput]
  OR: [TSWhereStripePaymentIntentInput]
  NOT: TSWhereStripePaymentIntentInput
}

type ProfilePaginatedList {
  items: [Profile!]!
  total: Int!
}

input TSWhereProfileInput {
  id: TSWhereStringInput
  name: TSWhereStringInput
  email: TSWhereStringInput
  bio: TSWhereStringInput
  avatar: TSWhereAssetRelationshipInput
  shopifyCustomerId: TSWhereStringInput
  stripeCustomerId: TSWhereStringInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
  AND: [TSWhereProfileInput]
  OR: [TSWhereProfileInput]
  NOT: TSWhereProfileInput
}

type Stripe_ListProductsResponse {
  """Details about each object."""
  data: [Stripe_Product]

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_ListProductsResponseObjectProperty

  """The URL where this list can be accessed."""
  url: String
}

enum Stripe_ListProductsResponseObjectProperty {
  list
}

type ProfileNewsletterStatus {
  """"""
  listId: String

  """"""
  listName: String

  """"""
  subscribed: Boolean
}

type Stripe_ListInvoiceLinesResponse {
  """Details about each object."""
  data: [Stripe_LineItem]

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_ListInvoiceLinesResponseObjectProperty

  """The URL where this list can be accessed."""
  url: String
}

enum Stripe_ListInvoiceLinesResponseObjectProperty {
  list
}

type Stripe_ListPaymentIntentsResponse {
  data: [Stripe_PaymentIntent]

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_ListPaymentIntentsResponseObjectProperty

  """The URL where this list can be accessed."""
  url: String
}

enum Stripe_ListPaymentIntentsResponseObjectProperty {
  list
}

type NavigationData implements TSSearchable {
  """"""
  message: String

  """"""
  links: NavigationDataLinks
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean @deprecated(reason: "Use _status instead")
  _enabledAt: String @deprecated(reason: "Use a custom date field instead")
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type NavigationDataLinks {
  """"""
  categories: [NavigationDataLinksCategories]

  """"""
  pages: [NavigationDataLinksPages]
}

type NavigationDataLinksCategories {
  """"""
  name: String

  """"""
  featured: [NavigationDataLinksCategoriesFeatured]

  """"""
  collection: [NavigationDataLinksCategoriesCollection]

  """"""
  categories: [NavigationDataLinksCategoriesCategories]

  """"""
  brands: [NavigationDataLinksCategoriesBrands]
}

type NavigationDataLinksCategoriesFeatured {
  """"""
  name: String

  """"""
  href: String
}

type NavigationDataLinksCategoriesCollection {
  """"""
  name: String

  """"""
  href: String
}

type NavigationDataLinksCategoriesCategories {
  """"""
  name: String

  """"""
  href: String
}

type NavigationDataLinksCategoriesBrands {
  """"""
  name: String

  """"""
  href: String
}

type NavigationDataLinksPages {
  """"""
  name: String

  """"""
  href: String
}

type Footer implements TSSearchable {
  """"""
  navigation: FooterNavigation

  """"""
  newsletter: FooterNewsletter
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean @deprecated(reason: "Use _status instead")
  _enabledAt: String @deprecated(reason: "Use a custom date field instead")
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type FooterNavigation {
  """"""
  sections: [FooterNavigationSections]
}

type FooterNavigationSections {
  """"""
  name: String

  """"""
  items: [NavigationLink]
}

type NavigationLink {
  name: String
  href: String
}

type FooterNewsletter {
  """"""
  text: Text
}

"""Reusable text shape"""
type Text {
  primary: String
  secondary: String
  button: String
}

enum Shopify_ProductSortKeys {
  TITLE
  PRODUCT_TYPE
  VENDOR
  INVENTORY_TOTAL
  UPDATED_AT
  CREATED_AT
  PUBLISHED_AT
  ID
  RELEVANCE
}

"""
A customer represents a customer account with the shop. Customer accounts store contact information for the customer, saving logged-in customers the trouble of having to provide it at every checkout.
"""
type ShopifyStorefront_Customer {
  """
  Indicates whether the customer has consented to be sent marketing material via email.
  """
  acceptsMarketing: Boolean!

  """A list of addresses for the customer."""
  addresses(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_MailingAddressConnection!

  """The date and time when the customer was created."""
  createdAt: DateTime!

  """The customerâ€™s default address."""
  defaultAddress: ShopifyStorefront_MailingAddress

  """The customerâ€™s name, email or phone number."""
  displayName: String!

  """The customerâ€™s email address."""
  email: String

  """The customerâ€™s first name."""
  firstName: String

  """A unique identifier for the customer."""
  id: ID!

  """The customer's most recently updated, incomplete checkout."""
  lastIncompleteCheckout: ShopifyStorefront_Checkout

  """The customerâ€™s last name."""
  lastName: String

  """Returns a metafield found by namespace and key."""
  metafield(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String!

    """Identifier for the metafield (maximum of 30 characters)."""
    key: String!
  ): ShopifyStorefront_Metafield

  """A paginated list of metafields associated with the resource."""
  metafields(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_MetafieldConnection! @deprecated(reason: "The `metafields` field will be removed in the future in favor of using [aliases](https://graphql.org/learn/queries/#aliases) with the `metafield` field.\n")

  """The orders associated with the customer."""
  orders(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ShopifyStorefront_OrderSortKeys = ID

    """
    Supported filter parameters:
     - `processed_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): ShopifyStorefront_OrderConnection!

  """The customerâ€™s phone number."""
  phone: String

  """
  A comma separated list of tags that have been added to the customer.
  Additional access scope required: unauthenticated_read_customer_tags.
  """
  tags: [String!]!

  """The date and time when the customer information was updated."""
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple MailingAddresses.
"""
type ShopifyStorefront_MailingAddressConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_MailingAddressEdge!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one MailingAddress and a cursor during pagination.
"""
type ShopifyStorefront_MailingAddressEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MailingAddressEdge."""
  node: ShopifyStorefront_MailingAddress!
}

"""Represents a mailing address for customers and shipping."""
type ShopifyStorefront_MailingAddress {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """The name of the city, district, village, or town."""
  city: String

  """The name of the customer's company or organization."""
  company: String

  """The name of the country."""
  country: String

  """
  The two-letter code for the country of the address.
  
  For example, US.
  """
  countryCode: String @deprecated(reason: "Use `countryCodeV2` instead")

  """
  The two-letter code for the country of the address.
  
  For example, US.
  """
  countryCodeV2: ShopifyStorefront_CountryCode

  """The first name of the customer."""
  firstName: String

  """
  A formatted version of the address, customized by the provided arguments.
  """
  formatted(
    """Whether to include the customer's name in the formatted address."""
    withName: Boolean = false

    """Whether to include the customer's company in the formatted address."""
    withCompany: Boolean = true
  ): [String!]!

  """A comma-separated list of the values for city, province, and country."""
  formattedArea: String

  """A globally-unique identifier."""
  id: ID!

  """The last name of the customer."""
  lastName: String

  """The latitude coordinate of the customer address."""
  latitude: Float

  """The longitude coordinate of the customer address."""
  longitude: Float

  """The full name of the customer, based on firstName and lastName."""
  name: String

  """
  A unique phone number for the customer.
  
  Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String

  """The region of the address, such as the province, state, or district."""
  province: String

  """
  The two-letter code for the region.
  
  For example, ON.
  """
  provinceCode: String

  """The zip or postal code of the address."""
  zip: String
}

enum ShopifyStorefront_CountryCode {
  AF
  AX
  AL
  DZ
  AD
  AO
  AI
  AG
  AR
  AM
  AW
  AC
  AU
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BM
  BT
  BO
  BA
  BW
  BV
  BR
  IO
  BN
  BG
  BF
  BI
  KH
  CA
  CV
  BQ
  KY
  CF
  TD
  CL
  CN
  CX
  CC
  CO
  KM
  CG
  CD
  CK
  CR
  HR
  CU
  CW
  CY
  CZ
  CI
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GQ
  ER
  EE
  SZ
  ET
  FK
  FO
  FJ
  FI
  FR
  GF
  PF
  TF
  GA
  GM
  GE
  DE
  GH
  GI
  GR
  GL
  GD
  GP
  GT
  GG
  GN
  GW
  GY
  HT
  HM
  VA
  HN
  HK
  HU
  IS
  IN
  ID
  IR
  IQ
  IE
  IM
  IL
  IT
  JM
  JP
  JE
  JO
  KZ
  KE
  KI
  KP
  XK
  KW
  KG
  LA
  LV
  LB
  LS
  LR
  LY
  LI
  LT
  LU
  MO
  MG
  MW
  MY
  MV
  ML
  MT
  MQ
  MR
  MU
  YT
  MX
  MD
  MC
  MN
  ME
  MS
  MA
  MZ
  MM
  NA
  NR
  NP
  NL
  AN
  NC
  NZ
  NI
  NE
  NG
  NU
  NF
  MK
  NO
  OM
  PK
  PS
  PA
  PG
  PY
  PE
  PH
  PN
  PL
  PT
  QA
  CM
  RE
  RO
  RU
  RW
  BL
  SH
  KN
  LC
  MF
  PM
  WS
  SM
  ST
  SA
  SN
  RS
  SC
  SL
  SG
  SX
  SK
  SI
  SB
  SO
  ZA
  GS
  KR
  SS
  ES
  LK
  VC
  SD
  SR
  SJ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TL
  TG
  TK
  TO
  TT
  TA
  TN
  TR
  TM
  TC
  TV
  UG
  UA
  AE
  GB
  US
  UM
  UY
  UZ
  VU
  VE
  VN
  VG
  WF
  EH
  YE
  ZM
  ZW
  ZZ
}

"""
Returns information about pagination in a connection, in accordance with the
[Relay specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).
"""
type ShopifyStorefront_PageInfo {
  """Whether there are more pages to fetch following the current page."""
  hasNextPage: Boolean!

  """Whether there are any pages prior to the current page."""
  hasPreviousPage: Boolean!
}

"""
A container for all the information required to checkout items and pay.
"""
type ShopifyStorefront_Checkout {
  """The gift cards used on the checkout."""
  appliedGiftCards: [ShopifyStorefront_AppliedGiftCard!]!

  """
  The available shipping rates for this Checkout.
  Should only be used when checkout `requiresShipping` is `true` and
  the shipping address is valid.
  """
  availableShippingRates: ShopifyStorefront_AvailableShippingRates

  """The identity of the customer associated with the checkout."""
  buyerIdentity: ShopifyStorefront_CheckoutBuyerIdentity!

  """The date and time when the checkout was completed."""
  completedAt: DateTime

  """The date and time when the checkout was created."""
  createdAt: DateTime!

  """The currency code for the checkout."""
  currencyCode: ShopifyStorefront_CurrencyCode!

  """A list of extra information that is added to the checkout."""
  customAttributes: [ShopifyStorefront_Attribute!]!

  """Discounts that have been applied on the checkout."""
  discountApplications(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_DiscountApplicationConnection!

  """The email attached to this checkout."""
  email: String

  """A globally-unique identifier."""
  id: ID!

  """
  A list of line item objects, each one containing information about an item in the checkout.
  """
  lineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_CheckoutLineItemConnection!

  """
  The sum of all the prices of all the items in the checkout. Duties, taxes, shipping and discounts excluded.
  """
  lineItemsSubtotalPrice: ShopifyStorefront_MoneyV2!

  """The note associated with the checkout."""
  note: String

  """The resulting order from a paid checkout."""
  order: ShopifyStorefront_Order

  """
  The Order Status Page for this Checkout, null when checkout is not completed.
  """
  orderStatusUrl: Url

  """
  The amount left to be paid. This is equal to the cost of the line items, taxes and shipping minus discounts and gift cards.
  """
  paymentDue: Money! @deprecated(reason: "Use `paymentDueV2` instead")

  """
  The amount left to be paid. This is equal to the cost of the line items, duties, taxes and shipping minus discounts and gift cards.
  """
  paymentDueV2: ShopifyStorefront_MoneyV2!

  """
  Whether or not the Checkout is ready and can be completed. Checkouts may
  have asynchronous operations that can take time to finish. If you want
  to complete a checkout or ensure all the fields are populated and up to
  date, polling is required until the value is true.
  """
  ready: Boolean!

  """States whether or not the fulfillment requires shipping."""
  requiresShipping: Boolean!

  """The shipping address to where the line items will be shipped."""
  shippingAddress: ShopifyStorefront_MailingAddress

  """
  The discounts that have been allocated onto the shipping line by discount applications.
  """
  shippingDiscountAllocations: [ShopifyStorefront_DiscountAllocation!]!

  """
  Once a shipping rate is selected by the customer it is transitioned to a `shipping_line` object.
  """
  shippingLine: ShopifyStorefront_ShippingRate

  """Price of the checkout before shipping and taxes."""
  subtotalPrice: Money! @deprecated(reason: "Use `subtotalPriceV2` instead")

  """Price of the checkout before duties, shipping and taxes."""
  subtotalPriceV2: ShopifyStorefront_MoneyV2!

  """Whether the checkout is tax exempt."""
  taxExempt: Boolean!

  """Whether taxes are included in the line item and shipping line prices."""
  taxesIncluded: Boolean!

  """The sum of all the duties applied to the line items in the checkout."""
  totalDuties: ShopifyStorefront_MoneyV2

  """
  The sum of all the prices of all the items in the checkout, taxes and discounts included.
  """
  totalPrice: Money! @deprecated(reason: "Use `totalPriceV2` instead")

  """
  The sum of all the prices of all the items in the checkout, duties, taxes and discounts included.
  """
  totalPriceV2: ShopifyStorefront_MoneyV2!

  """
  The sum of all the taxes applied to the line items and shipping lines in the checkout.
  """
  totalTax: Money! @deprecated(reason: "Use `totalTaxV2` instead")

  """
  The sum of all the taxes applied to the line items and shipping lines in the checkout.
  """
  totalTaxV2: ShopifyStorefront_MoneyV2!

  """The date and time when the checkout was last updated."""
  updatedAt: DateTime!

  """The url pointing to the checkout accessible from the web."""
  webUrl: Url!
}

"""Details about the gift card used on the checkout."""
type ShopifyStorefront_AppliedGiftCard {
  """The amount that was taken from the gift card by applying it."""
  amountUsed: Money! @deprecated(reason: "Use `amountUsedV2` instead")

  """The amount that was taken from the gift card by applying it."""
  amountUsedV2: ShopifyStorefront_MoneyV2!

  """The amount left on the gift card."""
  balance: Money! @deprecated(reason: "Use `balanceV2` instead")

  """The amount left on the gift card."""
  balanceV2: ShopifyStorefront_MoneyV2!

  """A globally-unique identifier."""
  id: ID!

  """The last characters of the gift card."""
  lastCharacters: String!

  """The amount that was applied to the checkout in its currency."""
  presentmentAmountUsed: ShopifyStorefront_MoneyV2!
}

"""A monetary value with currency."""
type ShopifyStorefront_MoneyV2 {
  """Decimal money amount."""
  amount: Decimal!

  """Currency of the money."""
  currencyCode: ShopifyStorefront_CurrencyCode!
}

enum ShopifyStorefront_CurrencyCode {
  USD
  EUR
  GBP
  CAD
  AFN
  ALL
  DZD
  AOA
  ARS
  AMD
  AWG
  AUD
  BBD
  AZN
  BDT
  BSD
  BHD
  BIF
  BZD
  BMD
  BTN
  BAM
  BRL
  BOB
  BWP
  BND
  BGN
  MMK
  KHR
  CVE
  KYD
  XAF
  CLP
  CNY
  COP
  KMF
  CDF
  CRC
  HRK
  CZK
  DKK
  DOP
  XCD
  EGP
  ETB
  XPF
  FJD
  GMD
  GHS
  GTQ
  GYD
  GEL
  HTG
  HNL
  HKD
  HUF
  ISK
  INR
  IDR
  ILS
  IQD
  JMD
  JPY
  JEP
  JOD
  KZT
  KES
  KWD
  KGS
  LAK
  LVL
  LBP
  LSL
  LRD
  LTL
  MGA
  MKD
  MOP
  MWK
  MVR
  MXN
  MYR
  MUR
  MDL
  MAD
  MNT
  MZN
  NAD
  NPR
  ANG
  NZD
  NIO
  NGN
  NOK
  OMR
  PAB
  PKR
  PGK
  PYG
  PEN
  PHP
  PLN
  QAR
  RON
  RUB
  RWF
  WST
  SAR
  STD
  RSD
  SCR
  SGD
  SDG
  SYP
  ZAR
  KRW
  SSP
  SBD
  LKR
  SRD
  SZL
  SEK
  CHF
  TWD
  THB
  TZS
  TTD
  TND
  TRY
  TMT
  UGX
  UAH
  AED
  UYU
  UZS
  VUV
  VND
  XOF
  YER
  ZMW
  BYN
  BYR
  DJF
  ERN
  FKP
  GIP
  GNF
  IRR
  KID
  LYD
  MRU
  SLL
  SHP
  SOS
  TJS
  TOP
  VEF
  VES
  XXX
}

"""A collection of available shipping rates for a checkout."""
type ShopifyStorefront_AvailableShippingRates {
  """
  Whether or not the shipping rates are ready.
  The `shippingRates` field is `null` when this value is `false`.
  This field should be polled until its value becomes `true`.
  """
  ready: Boolean!

  """The fetched shipping rates. `null` until the `ready` field is `true`."""
  shippingRates: [ShopifyStorefront_ShippingRate]
}

"""A shipping rate to be applied to a checkout."""
type ShopifyStorefront_ShippingRate {
  """Human-readable unique identifier for this shipping rate."""
  handle: String!

  """Price of this shipping rate."""
  price: Money! @deprecated(reason: "Use `priceV2` instead")

  """Price of this shipping rate."""
  priceV2: ShopifyStorefront_MoneyV2!

  """Title of this shipping rate."""
  title: String!
}

"""The identity of the customer associated with the checkout."""
type ShopifyStorefront_CheckoutBuyerIdentity {
  """The country code for the checkout. For example, `CA`."""
  countryCode: ShopifyStorefront_CountryCode
}

"""Represents a generic custom attribute."""
type ShopifyStorefront_Attribute {
  """Key or name of the attribute."""
  key: String!

  """Value of the attribute."""
  value: String
}

"""
An auto-generated type for paginating through multiple DiscountApplications.
"""
type ShopifyStorefront_DiscountApplicationConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_DiscountApplicationEdge!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one DiscountApplication and a cursor during pagination.
"""
type ShopifyStorefront_DiscountApplicationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DiscountApplicationEdge."""
  node: ShopifyStorefront_DiscountApplication!
}

"""
Discount applications capture the intentions of a discount source at
the time of application.
"""
type ShopifyStorefront_DiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: ShopifyStorefront_DiscountApplicationAllocationMethod!

  """Which lines of targetType that the discount is allocated over."""
  targetSelection: ShopifyStorefront_DiscountApplicationTargetSelection!

  """The type of line that the discount is applicable towards."""
  targetType: ShopifyStorefront_DiscountApplicationTargetType!

  """The value of the discount application."""
  value: ShopifyStorefront_PricingValue!
}

enum ShopifyStorefront_DiscountApplicationAllocationMethod {
  ACROSS
  EACH
  ONE
}

enum ShopifyStorefront_DiscountApplicationTargetSelection {
  ALL
  ENTITLED
  EXPLICIT
}

enum ShopifyStorefront_DiscountApplicationTargetType {
  LINE_ITEM
  SHIPPING_LINE
}

"""The price value (fixed or percentage) for a discount application."""
union ShopifyStorefront_PricingValue = ShopifyStorefront_MoneyV2 | ShopifyStorefront_PricingPercentageValue

"""The value of the percentage pricing object."""
type ShopifyStorefront_PricingPercentageValue {
  """The percentage value of the object."""
  percentage: Float!
}

"""
An auto-generated type for paginating through multiple CheckoutLineItems.
"""
type ShopifyStorefront_CheckoutLineItemConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_CheckoutLineItemEdge!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one CheckoutLineItem and a cursor during pagination.
"""
type ShopifyStorefront_CheckoutLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CheckoutLineItemEdge."""
  node: ShopifyStorefront_CheckoutLineItem!
}

"""A single line item in the checkout, grouped by variant and attributes."""
type ShopifyStorefront_CheckoutLineItem {
  """
  Extra information in the form of an array of Key-Value pairs about the line item.
  """
  customAttributes: [ShopifyStorefront_Attribute!]!

  """
  The discounts that have been allocated onto the checkout line item by discount applications.
  """
  discountAllocations: [ShopifyStorefront_DiscountAllocation!]!

  """A globally-unique identifier."""
  id: ID!

  """The quantity of the line item."""
  quantity: Int!

  """Title of the line item. Defaults to the product's title."""
  title: String!

  """Unit price of the line item."""
  unitPrice: ShopifyStorefront_MoneyV2

  """Product variant of the line item."""
  variant: ShopifyStorefront_ProductVariant
}

"""An amount discounting the line that has been allocated by a discount."""
type ShopifyStorefront_DiscountAllocation {
  """Amount of discount allocated."""
  allocatedAmount: ShopifyStorefront_MoneyV2!

  """The discount this allocated amount originated from."""
  discountApplication: ShopifyStorefront_DiscountApplication!
}

"""
A product variant represents a different version of a product, such as differing sizes or differing colors.
"""
type ShopifyStorefront_ProductVariant {
  """Indicates if the product variant is available for sale."""
  availableForSale: Boolean!

  """
  The barcode (for example, ISBN, UPC, or GTIN) associated with the variant.
  """
  barcode: String

  """
  The compare at price of the variant. This can be used to mark a variant as on sale, when `compareAtPrice` is higher than `price`.
  """
  compareAtPrice: Money @deprecated(reason: "Use `compareAtPriceV2` instead")

  """
  The compare at price of the variant. This can be used to mark a variant as on sale, when `compareAtPriceV2` is higher than `priceV2`.
  """
  compareAtPriceV2: ShopifyStorefront_MoneyV2

  """
  Whether a product is out of stock but still available for purchase (used for backorders).
  """
  currentlyNotInStock: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """
  Image associated with the product variant. This field falls back to the product image if no image is available.
  """
  image: ShopifyStorefront_Image

  """Returns a metafield found by namespace and key."""
  metafield(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String!

    """Identifier for the metafield (maximum of 30 characters)."""
    key: String!
  ): ShopifyStorefront_Metafield

  """A paginated list of metafields associated with the resource."""
  metafields(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_MetafieldConnection! @deprecated(reason: "The `metafields` field will be removed in the future in favor of using [aliases](https://graphql.org/learn/queries/#aliases) with the `metafield` field.\n")

  """The product variantâ€™s price."""
  price: Money! @deprecated(reason: "Use `priceV2` instead")

  """The product variantâ€™s price."""
  priceV2: ShopifyStorefront_MoneyV2!

  """The product object that the product variant belongs to."""
  product: ShopifyStorefront_Product!

  """The total sellable quantity of the variant for online sales channels."""
  quantityAvailable: Int

  """
  Whether a customer needs to provide a shipping address when placing an order for the product variant.
  """
  requiresShipping: Boolean!

  """List of product options applied to the variant."""
  selectedOptions: [ShopifyStorefront_SelectedOption!]!

  """
  Represents an association between a variant and a selling plan. Selling plan allocations describe which selling plans are available for each variant, and what their impact is on pricing.
  """
  sellingPlanAllocations(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_SellingPlanAllocationConnection!

  """The SKU (stock keeping unit) associated with the variant."""
  sku: String

  """The in-store pickup availability of this variant by location."""
  storeAvailability(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_StoreAvailabilityConnection!

  """The product variantâ€™s title."""
  title: String!

  """
  The unit price value for the variant based on the variant's measurement.
  """
  unitPrice: ShopifyStorefront_MoneyV2

  """The unit price measurement for the variant."""
  unitPriceMeasurement: ShopifyStorefront_UnitPriceMeasurement

  """
  The weight of the product variant in the unit system specified with `weight_unit`.
  """
  weight: Float

  """Unit of measurement for weight."""
  weightUnit: ShopifyStorefront_WeightUnit!
}

"""Represents an image resource."""
type ShopifyStorefront_Image {
  """A word or phrase to share the nature or contents of an image."""
  altText: String

  """
  The original height of the image in pixels. Returns `null` if the image is not hosted by Shopify.
  """
  height: Int

  """A unique identifier for the image."""
  id: ID

  """
  The location of the original image as a URL.
  
  If there are any existing transformations in the original source URL, they will remain and not be stripped.
  """
  originalSrc: Url! @deprecated(reason: "Use `url` instead")

  """The location of the image as a URL."""
  src: Url! @deprecated(reason: "Use `url` instead")

  """
  The location of the transformed image as a URL.
  
  All transformation arguments are considered "best-effort". If they can be applied to an image, they will be.
  Otherwise any transformations which an image type does not support will be ignored.
  """
  transformedSrc(
    """Image width in pixels between 1 and 5760."""
    maxWidth: Int

    """Image height in pixels between 1 and 5760."""
    maxHeight: Int

    """Crops the image according to the specified region."""
    crop: ShopifyStorefront_CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int = 1

    """
    Best effort conversion of image into content type (SVG -> PNG, Anything -> JPG, Anything -> WEBP are supported).
    """
    preferredContentType: ShopifyStorefront_ImageContentType
  ): Url! @deprecated(reason: "Use `url(transform:)` instead")

  """
  The location of the image as a URL.
  
  If no transform options are specified, then the original image will be preserved including any pre-applied transforms.
  
  All transformation options are considered "best-effort". Any transformation that the original image type doesn't support will be ignored.
  
  If you need multiple variations of the same image, then you can use [GraphQL aliases](https://graphql.org/learn/queries/#aliases).
  """
  url(
    """A set of options to transform the original image."""
    transform: ShopifyStorefront_ImageTransformInput
  ): Url!

  """
  The original width of the image in pixels. Returns `null` if the image is not hosted by Shopify.
  """
  width: Int
}

enum ShopifyStorefront_CropRegion {
  CENTER
  TOP
  BOTTOM
  LEFT
  RIGHT
}

enum ShopifyStorefront_ImageContentType {
  PNG
  JPG
  WEBP
}

"""
The available options for transforming an image.

All transformation options are considered "best-effort". Any transformation that the original image type doesn't support will be ignored.
"""
input ShopifyStorefront_ImageTransformInput {
  """Crop the image according to the specified region."""
  crop: ShopifyStorefront_CropRegion

  """Image width in pixels between 1 and 5760."""
  maxWidth: Int

  """Image height in pixels between 1 and 5760."""
  maxHeight: Int

  """
  Image size multiplier for high-resolution retina displays. Must be within 1..3.
  """
  scale: Int = 1

  """
  Convert the source image into the preferred content type.
  Supported conversions: `.svg` to `.png`, any file type to `.jpg`, and any file type to `.webp`.
  """
  preferredContentType: ShopifyStorefront_ImageContentType
}

"""
Metafields represent custom metadata attached to a resource. Metafields can be sorted into namespaces and are
comprised of keys, values, and value types.
"""
type ShopifyStorefront_Metafield {
  """The date and time when the storefront metafield was created."""
  createdAt: DateTime!

  """The description of a metafield."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  """The key name for a metafield."""
  key: String!

  """The namespace for a metafield."""
  namespace: String!

  """The parent object that the metafield belongs to."""
  parentResource: ShopifyStorefront_MetafieldParentResource!

  """
  Returns a reference object if the metafield definition's type is a resource reference.
  """
  reference: ShopifyStorefront_MetafieldReference

  """
  The type name of the metafield.
  See the list of [supported types](https://shopify.dev/apps/metafields/definitions/types).
  """
  type: String!

  """The date and time when the storefront metafield was updated."""
  updatedAt: DateTime!

  """The value of a metafield."""
  value: String!
}

"""A resource that the metafield belongs to."""
union ShopifyStorefront_MetafieldParentResource = ShopifyStorefront_Article | ShopifyStorefront_Blog | ShopifyStorefront_Collection | ShopifyStorefront_Customer | ShopifyStorefront_Order | ShopifyStorefront_Page | ShopifyStorefront_Product | ShopifyStorefront_ProductVariant | ShopifyStorefront_Shop

"""An article in an online store blog."""
type ShopifyStorefront_Article {
  """The article's author."""
  author: ShopifyStorefront_ArticleAuthor! @deprecated(reason: "Use `authorV2` instead")

  """The article's author."""
  authorV2: ShopifyStorefront_ArticleAuthor

  """The blog that the article belongs to."""
  blog: ShopifyStorefront_Blog!

  """List of comments posted on the article."""
  comments(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_CommentConnection!

  """Stripped content of the article, single line with HTML tags removed."""
  content(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String!

  """The content of the article, complete with HTML formatting."""
  contentHtml: Html!

  """Stripped excerpt of the article, single line with HTML tags removed."""
  excerpt(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String

  """The excerpt of the article, complete with HTML formatting."""
  excerptHtml: Html

  """
  A human-friendly unique string for the Article automatically generated from its title.
  """
  handle: String!

  """A globally-unique identifier."""
  id: ID!

  """The image associated with the article."""
  image: ShopifyStorefront_Image

  """Returns a metafield found by namespace and key."""
  metafield(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String!

    """Identifier for the metafield (maximum of 30 characters)."""
    key: String!
  ): ShopifyStorefront_Metafield

  """A paginated list of metafields associated with the resource."""
  metafields(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_MetafieldConnection! @deprecated(reason: "The `metafields` field will be removed in the future in favor of using [aliases](https://graphql.org/learn/queries/#aliases) with the `metafield` field.\n")

  """
  The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.
  """
  onlineStoreUrl: Url

  """The date and time when the article was published."""
  publishedAt: DateTime!

  """The articleâ€™s SEO information."""
  seo: ShopifyStorefront_SEO

  """A categorization that a article can be tagged with."""
  tags: [String!]!

  """The articleâ€™s name."""
  title: String!
}

"""The author of an article."""
type ShopifyStorefront_ArticleAuthor {
  """The author's bio."""
  bio: String

  """The authorâ€™s email."""
  email: String!

  """The author's first name."""
  firstName: String!

  """The author's last name."""
  lastName: String!

  """The author's full name."""
  name: String!
}

"""An online store blog."""
type ShopifyStorefront_Blog {
  """Find an article by its handle."""
  articleByHandle(
    """The handle of the article."""
    handle: String!
  ): ShopifyStorefront_Article

  """List of the blog's articles."""
  articles(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ShopifyStorefront_ArticleSortKeys = ID

    """
    Supported filter parameters:
     - `author`
     - `blog_title`
     - `created_at`
     - `tag`
     - `tag_not`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): ShopifyStorefront_ArticleConnection!

  """The authors who have contributed to the blog."""
  authors: [ShopifyStorefront_ArticleAuthor!]!

  """
  A human-friendly unique string for the Blog automatically generated from its title.
  """
  handle: String!

  """A globally-unique identifier."""
  id: ID!

  """Returns a metafield found by namespace and key."""
  metafield(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String!

    """Identifier for the metafield (maximum of 30 characters)."""
    key: String!
  ): ShopifyStorefront_Metafield

  """A paginated list of metafields associated with the resource."""
  metafields(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_MetafieldConnection! @deprecated(reason: "The `metafields` field will be removed in the future in favor of using [aliases](https://graphql.org/learn/queries/#aliases) with the `metafield` field.\n")

  """
  The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.
  """
  onlineStoreUrl: Url

  """The blog's SEO information."""
  seo: ShopifyStorefront_SEO

  """The blogsâ€™s title."""
  title: String!
}

"""An auto-generated type for paginating through multiple Articles."""
type ShopifyStorefront_ArticleConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_ArticleEdge!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one Article and a cursor during pagination.
"""
type ShopifyStorefront_ArticleEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ArticleEdge."""
  node: ShopifyStorefront_Article!
}

enum ShopifyStorefront_ArticleSortKeys {
  TITLE
  BLOG_TITLE
  AUTHOR
  UPDATED_AT
  PUBLISHED_AT
  ID
  RELEVANCE
}

"""An auto-generated type for paginating through multiple Metafields."""
type ShopifyStorefront_MetafieldConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_MetafieldEdge!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one Metafield and a cursor during pagination.
"""
type ShopifyStorefront_MetafieldEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MetafieldEdge."""
  node: ShopifyStorefront_Metafield!
}

"""SEO information."""
type ShopifyStorefront_SEO {
  """The meta description."""
  description: String

  """The SEO title."""
  title: String
}

"""An auto-generated type for paginating through multiple Comments."""
type ShopifyStorefront_CommentConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_CommentEdge!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one Comment and a cursor during pagination.
"""
type ShopifyStorefront_CommentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CommentEdge."""
  node: ShopifyStorefront_Comment!
}

"""A comment on an article."""
type ShopifyStorefront_Comment {
  """The commentâ€™s author."""
  author: ShopifyStorefront_CommentAuthor!

  """Stripped content of the comment, single line with HTML tags removed."""
  content(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String!

  """The content of the comment, complete with HTML formatting."""
  contentHtml: Html!

  """A globally-unique identifier."""
  id: ID!
}

"""The author of a comment."""
type ShopifyStorefront_CommentAuthor {
  """The author's email."""
  email: String!

  """The authorâ€™s name."""
  name: String!
}

"""
A collection represents a grouping of products that a shop owner can create to organize them or make their shops easier to browse.
"""
type ShopifyStorefront_Collection {
  """
  Stripped description of the collection, single line with HTML tags removed.
  """
  description(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String!

  """The description of the collection, complete with HTML formatting."""
  descriptionHtml: Html!

  """
  A human-friendly unique string for the collection automatically generated from its title.
  Limit of 255 characters.
  """
  handle: String!

  """A globally-unique identifier."""
  id: ID!

  """Image associated with the collection."""
  image: ShopifyStorefront_Image

  """Returns a metafield found by namespace and key."""
  metafield(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String!

    """Identifier for the metafield (maximum of 30 characters)."""
    key: String!
  ): ShopifyStorefront_Metafield

  """A paginated list of metafields associated with the resource."""
  metafields(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_MetafieldConnection! @deprecated(reason: "The `metafields` field will be removed in the future in favor of using [aliases](https://graphql.org/learn/queries/#aliases) with the `metafield` field.\n")

  """
  The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.
  """
  onlineStoreUrl: Url

  """List of products in the collection."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ShopifyStorefront_ProductCollectionSortKeys = COLLECTION_DEFAULT

    """Returns a subset of products matching all product filters."""
    filters: [ShopifyStorefront_ProductFilterInput]
  ): ShopifyStorefront_ProductConnection!

  """The collectionâ€™s name. Limit of 255 characters."""
  title: String!

  """The date and time when the collection was last modified."""
  updatedAt: DateTime!
}

"""An auto-generated type for paginating through multiple Products."""
type ShopifyStorefront_ProductConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_ProductEdge!]!

  """A list of available filters."""
  filters: [ShopifyStorefront_Filter!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one Product and a cursor during pagination.
"""
type ShopifyStorefront_ProductEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ProductEdge."""
  node: ShopifyStorefront_Product!
}

"""
A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
"""
type ShopifyStorefront_Product {
  """Indicates if at least one product variant is available for sale."""
  availableForSale: Boolean!

  """List of collections a product belongs to."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_CollectionConnection!

  """The compare at price of the product across all variants."""
  compareAtPriceRange: ShopifyStorefront_ProductPriceRange!

  """The date and time when the product was created."""
  createdAt: DateTime!

  """
  Stripped description of the product, single line with HTML tags removed.
  """
  description(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String!

  """The description of the product, complete with HTML formatting."""
  descriptionHtml: Html!

  """
  The featured image for the product.
  
  This field is functionally equivalent to `images(first: 1)`.
  """
  featuredImage: ShopifyStorefront_Image

  """
  A human-friendly unique string for the Product automatically generated from its title.
  They are used by the Liquid templating language to refer to objects.
  """
  handle: String!

  """A globally-unique identifier."""
  id: ID!

  """List of images associated with the product."""
  images(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ShopifyStorefront_ProductImageSortKeys = POSITION
  ): ShopifyStorefront_ImageConnection!

  """The media associated with the product."""
  media(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ShopifyStorefront_ProductMediaSortKeys = POSITION
  ): ShopifyStorefront_MediaConnection!

  """Returns a metafield found by namespace and key."""
  metafield(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String!

    """Identifier for the metafield (maximum of 30 characters)."""
    key: String!
  ): ShopifyStorefront_Metafield

  """A paginated list of metafields associated with the resource."""
  metafields(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_MetafieldConnection! @deprecated(reason: "The `metafields` field will be removed in the future in favor of using [aliases](https://graphql.org/learn/queries/#aliases) with the `metafield` field.\n")

  """
  The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.
  """
  onlineStoreUrl: Url

  """List of product options."""
  options(
    """Truncate the array result to this size."""
    first: Int
  ): [ShopifyStorefront_ProductOption!]!

  """The price range."""
  priceRange: ShopifyStorefront_ProductPriceRange!

  """
  A categorization that a product can be tagged with, commonly used for filtering and searching.
  """
  productType: String!

  """The date and time when the product was published to the channel."""
  publishedAt: DateTime!

  """Whether the product can only be purchased with a selling plan."""
  requiresSellingPlan: Boolean!

  """
  A list of a product's available selling plan groups. A selling plan group represents a selling method. For example, 'Subscribe and save' is a selling method where customers pay for goods or services per delivery. A selling plan group contains individual selling plans.
  """
  sellingPlanGroups(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_SellingPlanGroupConnection!

  """The product's SEO information."""
  seo: ShopifyStorefront_SEO!

  """
  A comma separated list of tags that have been added to the product.
  Additional access scope required for private apps: unauthenticated_read_product_tags.
  """
  tags: [String!]!

  """The productâ€™s title."""
  title: String!

  """The total quantity of inventory in stock for this Product."""
  totalInventory: Int

  """
  The date and time when the product was last modified.
  A product's `updatedAt` value can change for different reasons. For example, if an order
  is placed for a product that has inventory tracking set up, then the inventory adjustment
  is counted as an update.
  """
  updatedAt: DateTime!

  """
  Find a productâ€™s variant based on its selected options.
  This is useful for converting a userâ€™s selection of product options into a single matching variant.
  If there is not a variant for the selected options, `null` will be returned.
  """
  variantBySelectedOptions(
    """The input fields used for a selected option."""
    selectedOptions: [ShopifyStorefront_SelectedOptionInput!]!
  ): ShopifyStorefront_ProductVariant

  """List of the productâ€™s variants."""
  variants(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ShopifyStorefront_ProductVariantSortKeys = POSITION
  ): ShopifyStorefront_ProductVariantConnection!

  """The productâ€™s vendor name."""
  vendor: String!
}

"""An auto-generated type for paginating through multiple Collections."""
type ShopifyStorefront_CollectionConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_CollectionEdge!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one Collection and a cursor during pagination.
"""
type ShopifyStorefront_CollectionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CollectionEdge."""
  node: ShopifyStorefront_Collection!
}

"""The price range of the product."""
type ShopifyStorefront_ProductPriceRange {
  """The highest variant's price."""
  maxVariantPrice: ShopifyStorefront_MoneyV2!

  """The lowest variant's price."""
  minVariantPrice: ShopifyStorefront_MoneyV2!
}

"""An auto-generated type for paginating through multiple Images."""
type ShopifyStorefront_ImageConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_ImageEdge!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one Image and a cursor during pagination.
"""
type ShopifyStorefront_ImageEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ImageEdge."""
  node: ShopifyStorefront_Image!
}

enum ShopifyStorefront_ProductImageSortKeys {
  CREATED_AT
  POSITION
  ID
  RELEVANCE
}

"""An auto-generated type for paginating through multiple Media."""
type ShopifyStorefront_MediaConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_MediaEdge!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one Media and a cursor during pagination.
"""
type ShopifyStorefront_MediaEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MediaEdge."""
  node: ShopifyStorefront_Media!
}

"""Represents a media interface."""
type ShopifyStorefront_Media {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  """The media content type."""
  mediaContentType: ShopifyStorefront_MediaContentType!

  """The preview image for the media."""
  previewImage: ShopifyStorefront_Image
}

enum ShopifyStorefront_MediaContentType {
  EXTERNAL_VIDEO
  IMAGE
  MODEL_3D
  VIDEO
}

enum ShopifyStorefront_ProductMediaSortKeys {
  POSITION
  ID
  RELEVANCE
}

"""
Product property names like "Size", "Color", and "Material" that the customers can select.
Variants are selected based on permutations of these options.
255 characters limit each.
"""
type ShopifyStorefront_ProductOption {
  """A globally-unique identifier."""
  id: ID!

  """The product optionâ€™s name."""
  name: String!

  """The corresponding value to the product option name."""
  values: [String!]!
}

"""
An auto-generated type for paginating through multiple SellingPlanGroups.
"""
type ShopifyStorefront_SellingPlanGroupConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_SellingPlanGroupEdge!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one SellingPlanGroup and a cursor during pagination.
"""
type ShopifyStorefront_SellingPlanGroupEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SellingPlanGroupEdge."""
  node: ShopifyStorefront_SellingPlanGroup!
}

"""
Represents a selling method. For example, 'Subscribe and save' is a selling method where customers pay for goods or services per delivery. A selling plan group contains individual selling plans.
"""
type ShopifyStorefront_SellingPlanGroup {
  """
  A display friendly name for the app that created the selling plan group.
  """
  appName: String

  """The name of the selling plan group."""
  name: String!

  """
  Represents the selling plan options available in the drop-down list in the storefront. For example, 'Delivery every week' or 'Delivery every 2 weeks' specifies the delivery frequency options for the product.
  """
  options: [ShopifyStorefront_SellingPlanGroupOption!]!

  """
  A list of selling plans in a selling plan group. A selling plan is a representation of how products and variants can be sold and purchased. For example, an individual selling plan could be '6 weeks of prepaid granola, delivered weekly'.
  """
  sellingPlans(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_SellingPlanConnection!
}

"""
Represents an option on a selling plan group that's available in the drop-down list in the storefront.
"""
type ShopifyStorefront_SellingPlanGroupOption {
  """The name of the option. For example, 'Delivery every'."""
  name: String!

  """
  The values for the options specified by the selling plans in the selling plan group. For example, '1 week', '2 weeks', '3 weeks'.
  """
  values: [String!]!
}

"""An auto-generated type for paginating through multiple SellingPlans."""
type ShopifyStorefront_SellingPlanConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_SellingPlanEdge!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one SellingPlan and a cursor during pagination.
"""
type ShopifyStorefront_SellingPlanEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SellingPlanEdge."""
  node: ShopifyStorefront_SellingPlan!
}

"""Represents how products and variants can be sold and purchased."""
type ShopifyStorefront_SellingPlan {
  """The description of the selling plan."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  """
  The name of the selling plan. For example, '6 weeks of prepaid granola, delivered weekly'.
  """
  name: String!

  """
  The selling plan options available in the drop-down list in the storefront. For example, 'Delivery every week' or 'Delivery every 2 weeks' specifies the delivery frequency options for the product.
  """
  options: [ShopifyStorefront_SellingPlanOption!]!

  """
  The price adjustments that a selling plan makes when a variant is purchased with a selling plan.
  """
  priceAdjustments: [ShopifyStorefront_SellingPlanPriceAdjustment!]!

  """
  Whether purchasing the selling plan will result in multiple deliveries.
  """
  recurringDeliveries: Boolean!
}

"""An option provided by a Selling Plan."""
type ShopifyStorefront_SellingPlanOption {
  """The name of the option (ie "Delivery every")."""
  name: String

  """The value of the option (ie "Month")."""
  value: String
}

"""
Represents by how much the price of a variant associated with a selling plan is adjusted. Each variant can have up to two price adjustments.
"""
type ShopifyStorefront_SellingPlanPriceAdjustment {
  """
  The type of price adjustment. An adjustment value can have one of three types: percentage, amount off, or a new price.
  """
  adjustmentValue: ShopifyStorefront_SellingPlanPriceAdjustmentValue!

  """
  The number of orders that the price adjustment applies to If the price adjustment always applies, then this field is `null`.
  """
  orderCount: Int
}

"""
Represents by how much the price of a variant associated with a selling plan is adjusted. Each variant can have up to two price adjustments.
"""
union ShopifyStorefront_SellingPlanPriceAdjustmentValue = ShopifyStorefront_SellingPlanFixedAmountPriceAdjustment | ShopifyStorefront_SellingPlanFixedPriceAdjustment | ShopifyStorefront_SellingPlanPercentagePriceAdjustment

"""
A fixed amount that's deducted from the original variant price. For example, $10.00 off.
"""
type ShopifyStorefront_SellingPlanFixedAmountPriceAdjustment {
  """The money value of the price adjustment."""
  adjustmentAmount: ShopifyStorefront_MoneyV2!
}

"""
A fixed price adjustment for a variant that's purchased with a selling plan.
"""
type ShopifyStorefront_SellingPlanFixedPriceAdjustment {
  """A new price of the variant when it's purchased with the selling plan."""
  price: ShopifyStorefront_MoneyV2!
}

"""
A percentage amount that's deducted from the original variant price. For example, 10% off.
"""
type ShopifyStorefront_SellingPlanPercentagePriceAdjustment {
  """The percentage value of the price adjustment."""
  adjustmentPercentage: Int!
}

"""Specifies the input fields required for a selected option."""
input ShopifyStorefront_SelectedOptionInput {
  """The product optionâ€™s name."""
  name: String!

  """The product optionâ€™s value."""
  value: String!
}

"""
An auto-generated type for paginating through multiple ProductVariants.
"""
type ShopifyStorefront_ProductVariantConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_ProductVariantEdge!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one ProductVariant and a cursor during pagination.
"""
type ShopifyStorefront_ProductVariantEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ProductVariantEdge."""
  node: ShopifyStorefront_ProductVariant!
}

enum ShopifyStorefront_ProductVariantSortKeys {
  TITLE
  SKU
  POSITION
  ID
  RELEVANCE
}

"""A filter that is supported on the parent field."""
type ShopifyStorefront_Filter {
  """A unique identifier."""
  id: String!

  """A human-friendly string for this filter."""
  label: String!

  """An enumeration that denotes the type of data this filter represents."""
  type: ShopifyStorefront_FilterType!

  """The list of values for this filter."""
  values: [ShopifyStorefront_FilterValue!]!
}

enum ShopifyStorefront_FilterType {
  LIST
  PRICE_RANGE
}

"""A selectable value within a filter."""
type ShopifyStorefront_FilterValue {
  """The number of results that match this filter value."""
  count: Int!

  """A unique identifier."""
  id: String!

  """
  An input object that can be used to filter by this value on the parent field.
  
  The value is provided as a helper for building dynamic filtering UI. For example, if you have a list of selected `FilterValue` objects, you can combine their respective `input` values to use in a subsequent query.
  """
  input: Json!

  """A human-friendly string for this filter value."""
  label: String!
}

enum ShopifyStorefront_ProductCollectionSortKeys {
  TITLE
  PRICE
  BEST_SELLING
  CREATED
  ID
  MANUAL
  COLLECTION_DEFAULT
  RELEVANCE
}

"""A filter used to view a subset of products in a collection."""
input ShopifyStorefront_ProductFilterInput {
  """Filter on if the product is available for sale."""
  available: Boolean

  """A variant option to filter on."""
  variantOption: ShopifyStorefront_VariantOptionFilterInput

  """The product type to filter on."""
  productType: String

  """The product vendor to filter on."""
  productVendor: String

  """A range of prices to filter with-in."""
  price: ShopifyStorefront_PriceRangeFilterInput

  """A product metafield to filter on."""
  productMetafield: ShopifyStorefront_MetafieldFilterInput

  """A variant metafield to filter on."""
  variantMetafield: ShopifyStorefront_MetafieldFilterInput
}

"""
A filter used to view a subset of products in a collection matching a specific variant option.
"""
input ShopifyStorefront_VariantOptionFilterInput {
  """The name of the variant option to filter on."""
  name: String!

  """The value of the variant option to filter on."""
  value: String!
}

"""
A filter used to view a subset of products in a collection matching a specific price range.
"""
input ShopifyStorefront_PriceRangeFilterInput {
  """The minimum price in the range. Defaults to zero."""
  min: Float = 0

  """The maximum price in the range. Empty indicates no max price."""
  max: Float
}

"""
A filter used to view a subset of products in a collection matching a specific metafield value.

Only the following metafield types are currently supported:
- `number_integer`
- `number_decimal`
- `single_line_text_field`
- `boolean` as of 2022-04.
"""
input ShopifyStorefront_MetafieldFilterInput {
  """The namespace of the metafield to filter on."""
  namespace: String!

  """The key of the metafield to filter on."""
  key: String!

  """The value of the metafield."""
  value: String!
}

"""
An order is a customerâ€™s completed request to purchase one or more products from a shop. An order is created when a customer completes the checkout process, during which time they provides an email address, billing address and payment information.
"""
type ShopifyStorefront_Order {
  """
  The reason for the order's cancellation. Returns `null` if the order wasn't canceled.
  """
  cancelReason: ShopifyStorefront_OrderCancelReason

  """
  The date and time when the order was canceled. Returns null if the order wasn't canceled.
  """
  canceledAt: DateTime

  """The code of the currency used for the payment."""
  currencyCode: ShopifyStorefront_CurrencyCode!

  """
  The subtotal of line items and their discounts, excluding line items that have been removed. Does not contain order-level discounts, duties, shipping costs, or shipping discounts. Taxes are not included unless the order is a taxes-included order.
  """
  currentSubtotalPrice: ShopifyStorefront_MoneyV2!

  """The total cost of duties for the order, including refunds."""
  currentTotalDuties: ShopifyStorefront_MoneyV2

  """
  The total amount of the order, including duties, taxes and discounts, minus amounts for line items that have been removed.
  """
  currentTotalPrice: ShopifyStorefront_MoneyV2!

  """
  The total of all taxes applied to the order, excluding taxes for returned line items.
  """
  currentTotalTax: ShopifyStorefront_MoneyV2!

  """The locale code in which this specific order happened."""
  customerLocale: String

  """The unique URL that the customer can use to access the order."""
  customerUrl: Url

  """Discounts that have been applied on the order."""
  discountApplications(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_DiscountApplicationConnection!

  """Whether the order has had any edits applied or not."""
  edited: Boolean!

  """The customer's email address."""
  email: String

  """The financial status of the order."""
  financialStatus: ShopifyStorefront_OrderFinancialStatus

  """The fulfillment status for the order."""
  fulfillmentStatus: ShopifyStorefront_OrderFulfillmentStatus!

  """A globally-unique identifier."""
  id: ID!

  """List of the orderâ€™s line items."""
  lineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_OrderLineItemConnection!

  """Returns a metafield found by namespace and key."""
  metafield(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String!

    """Identifier for the metafield (maximum of 30 characters)."""
    key: String!
  ): ShopifyStorefront_Metafield

  """A paginated list of metafields associated with the resource."""
  metafields(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_MetafieldConnection! @deprecated(reason: "The `metafields` field will be removed in the future in favor of using [aliases](https://graphql.org/learn/queries/#aliases) with the `metafield` field.\n")

  """
  Unique identifier for the order that appears on the order.
  For example, _#1000_ or _Store1001.
  """
  name: String!

  """
  A unique numeric identifier for the order for use by shop owner and customer.
  """
  orderNumber: Int!

  """The total cost of duties charged at checkout."""
  originalTotalDuties: ShopifyStorefront_MoneyV2

  """The total price of the order before any applied edits."""
  originalTotalPrice: ShopifyStorefront_MoneyV2!

  """The customer's phone number for receiving SMS notifications."""
  phone: String

  """
  The date and time when the order was imported.
  This value can be set to dates in the past when importing from other systems.
  If no value is provided, it will be auto-generated based on current date and time.
  """
  processedAt: DateTime!

  """The address to where the order will be shipped."""
  shippingAddress: ShopifyStorefront_MailingAddress

  """
  The discounts that have been allocated onto the shipping line by discount applications.
  """
  shippingDiscountAllocations: [ShopifyStorefront_DiscountAllocation!]!

  """The unique URL for the order's status page."""
  statusUrl: Url!

  """Price of the order before shipping and taxes."""
  subtotalPrice: Money @deprecated(reason: "Use `subtotalPriceV2` instead")

  """Price of the order before duties, shipping and taxes."""
  subtotalPriceV2: ShopifyStorefront_MoneyV2

  """List of the orderâ€™s successful fulfillments."""
  successfulFulfillments(
    """Truncate the array result to this size."""
    first: Int
  ): [ShopifyStorefront_Fulfillment]

  """
  The sum of all the prices of all the items in the order, taxes and discounts included (must be positive).
  """
  totalPrice: Money! @deprecated(reason: "Use `totalPriceV2` instead")

  """
  The sum of all the prices of all the items in the order, duties, taxes and discounts included (must be positive).
  """
  totalPriceV2: ShopifyStorefront_MoneyV2!

  """The total amount that has been refunded."""
  totalRefunded: Money! @deprecated(reason: "Use `totalRefundedV2` instead")

  """The total amount that has been refunded."""
  totalRefundedV2: ShopifyStorefront_MoneyV2!

  """The total cost of shipping."""
  totalShippingPrice: Money! @deprecated(reason: "Use `totalShippingPriceV2` instead")

  """The total cost of shipping."""
  totalShippingPriceV2: ShopifyStorefront_MoneyV2!

  """The total cost of taxes."""
  totalTax: Money @deprecated(reason: "Use `totalTaxV2` instead")

  """The total cost of taxes."""
  totalTaxV2: ShopifyStorefront_MoneyV2
}

enum ShopifyStorefront_OrderCancelReason {
  CUSTOMER
  FRAUD
  INVENTORY
  DECLINED
  OTHER
}

enum ShopifyStorefront_OrderFinancialStatus {
  PENDING
  AUTHORIZED
  PARTIALLY_PAID
  PARTIALLY_REFUNDED
  VOIDED
  PAID
  REFUNDED
}

enum ShopifyStorefront_OrderFulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  RESTOCKED
  PENDING_FULFILLMENT
  OPEN
  IN_PROGRESS
  ON_HOLD
  SCHEDULED
}

"""An auto-generated type for paginating through multiple OrderLineItems."""
type ShopifyStorefront_OrderLineItemConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_OrderLineItemEdge!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one OrderLineItem and a cursor during pagination.
"""
type ShopifyStorefront_OrderLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of OrderLineItemEdge."""
  node: ShopifyStorefront_OrderLineItem!
}

"""
Represents a single line in an order. There is one line item for each distinct product variant.
"""
type ShopifyStorefront_OrderLineItem {
  """
  The number of entries associated to the line item minus the items that have been removed.
  """
  currentQuantity: Int!

  """List of custom attributes associated to the line item."""
  customAttributes: [ShopifyStorefront_Attribute!]!

  """
  The discounts that have been allocated onto the order line item by discount applications.
  """
  discountAllocations: [ShopifyStorefront_DiscountAllocation!]!

  """
  The total price of the line item, including discounts, and displayed in the presentment currency.
  """
  discountedTotalPrice: ShopifyStorefront_MoneyV2!

  """
  The total price of the line item, not including any discounts. The total price is calculated using the original unit price multiplied by the quantity, and it is displayed in the presentment currency.
  """
  originalTotalPrice: ShopifyStorefront_MoneyV2!

  """The number of products variants associated to the line item."""
  quantity: Int!

  """The title of the product combined with title of the variant."""
  title: String!

  """The product variant object associated to the line item."""
  variant: ShopifyStorefront_ProductVariant
}

"""Represents a single fulfillment in an order."""
type ShopifyStorefront_Fulfillment {
  """List of the fulfillment's line items."""
  fulfillmentLineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_FulfillmentLineItemConnection!

  """The name of the tracking company."""
  trackingCompany: String

  """
  Tracking information associated with the fulfillment,
  such as the tracking number and tracking URL.
  """
  trackingInfo(
    """Truncate the array result to this size."""
    first: Int
  ): [ShopifyStorefront_FulfillmentTrackingInfo!]!
}

"""
An auto-generated type for paginating through multiple FulfillmentLineItems.
"""
type ShopifyStorefront_FulfillmentLineItemConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_FulfillmentLineItemEdge!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination.
"""
type ShopifyStorefront_FulfillmentLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentLineItemEdge."""
  node: ShopifyStorefront_FulfillmentLineItem!
}

"""
Represents a single line item in a fulfillment. There is at most one fulfillment line item for each order line item.
"""
type ShopifyStorefront_FulfillmentLineItem {
  """The associated order's line item."""
  lineItem: ShopifyStorefront_OrderLineItem!

  """The amount fulfilled in this fulfillment."""
  quantity: Int!
}

"""Tracking information associated with the fulfillment."""
type ShopifyStorefront_FulfillmentTrackingInfo {
  """The tracking number of the fulfillment."""
  number: String

  """The URL to track the fulfillment."""
  url: Url
}

"""
Shopify merchants can create pages to hold static HTML content. Each Page object represents a custom page on the online store.
"""
type ShopifyStorefront_Page {
  """The description of the page, complete with HTML formatting."""
  body: Html!

  """Summary of the page body."""
  bodySummary: String!

  """The timestamp of the page creation."""
  createdAt: DateTime!

  """
  A human-friendly unique string for the page automatically generated from its title.
  """
  handle: String!

  """A globally-unique identifier."""
  id: ID!

  """Returns a metafield found by namespace and key."""
  metafield(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String!

    """Identifier for the metafield (maximum of 30 characters)."""
    key: String!
  ): ShopifyStorefront_Metafield

  """A paginated list of metafields associated with the resource."""
  metafields(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_MetafieldConnection! @deprecated(reason: "The `metafields` field will be removed in the future in favor of using [aliases](https://graphql.org/learn/queries/#aliases) with the `metafield` field.\n")

  """
  The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.
  """
  onlineStoreUrl: Url

  """The page's SEO information."""
  seo: ShopifyStorefront_SEO

  """The title of the page."""
  title: String!

  """The timestamp of the latest page update."""
  updatedAt: DateTime!
}

"""
Shop represents a collection of the general settings and information about the shop.
"""
type ShopifyStorefront_Shop {
  """A description of the shop."""
  description: String

  """Returns a metafield found by namespace and key."""
  metafield(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String!

    """Identifier for the metafield (maximum of 30 characters)."""
    key: String!
  ): ShopifyStorefront_Metafield

  """A paginated list of metafields associated with the resource."""
  metafields(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_MetafieldConnection! @deprecated(reason: "The `metafields` field will be removed in the future in favor of using [aliases](https://graphql.org/learn/queries/#aliases) with the `metafield` field.\n")

  """
  A string representing the way currency is formatted when the currency isnâ€™t specified.
  """
  moneyFormat: String!

  """The shopâ€™s name."""
  name: String!

  """Settings related to payments."""
  paymentSettings: ShopifyStorefront_PaymentSettings!

  """The shopâ€™s primary domain."""
  primaryDomain: ShopifyStorefront_Domain!

  """The shopâ€™s privacy policy."""
  privacyPolicy: ShopifyStorefront_ShopPolicy

  """The shopâ€™s refund policy."""
  refundPolicy: ShopifyStorefront_ShopPolicy

  """The shopâ€™s shipping policy."""
  shippingPolicy: ShopifyStorefront_ShopPolicy

  """Countries that the shop ships to."""
  shipsToCountries: [ShopifyStorefront_CountryCode!]!

  """The shopâ€™s subscription policy."""
  subscriptionPolicy: ShopifyStorefront_ShopPolicyWithDefault

  """The shopâ€™s terms of service."""
  termsOfService: ShopifyStorefront_ShopPolicy
}

"""Settings related to payments."""
type ShopifyStorefront_PaymentSettings {
  """List of the card brands which the shop accepts."""
  acceptedCardBrands: [ShopifyStorefront_CardBrand!]!

  """The url pointing to the endpoint to vault credit cards."""
  cardVaultUrl: Url!

  """The country where the shop is located."""
  countryCode: ShopifyStorefront_CountryCode!

  """The three-letter code for the shop's primary currency."""
  currencyCode: ShopifyStorefront_CurrencyCode!

  """
  A list of enabled currencies (ISO 4217 format) that the shop accepts. Merchants can enable currencies from their Shopify Payments settings in the Shopify admin.
  """
  enabledPresentmentCurrencies: [ShopifyStorefront_CurrencyCode!]!

  """The shopâ€™s Shopify Payments account id."""
  shopifyPaymentsAccountId: String

  """List of the digital wallets which the shop supports."""
  supportedDigitalWallets: [ShopifyStorefront_DigitalWallet!]!
}

enum ShopifyStorefront_CardBrand {
  VISA
  MASTERCARD
  DISCOVER
  AMERICAN_EXPRESS
  DINERS_CLUB
  JCB
}

enum ShopifyStorefront_DigitalWallet {
  APPLE_PAY
  ANDROID_PAY
  GOOGLE_PAY
  SHOPIFY_PAY
}

"""Represents a web address."""
type ShopifyStorefront_Domain {
  """The host name of the domain (eg: `example.com`)."""
  host: String!

  """Whether SSL is enabled or not."""
  sslEnabled: Boolean!

  """The URL of the domain (eg: `https://example.com`)."""
  url: Url!
}

"""
Policy that a merchant has configured for their store, such as their refund or privacy policy.
"""
type ShopifyStorefront_ShopPolicy {
  """Policy text, maximum size of 64kb."""
  body: String!

  """Policyâ€™s handle."""
  handle: String!

  """A globally-unique identifier."""
  id: ID!

  """Policyâ€™s title."""
  title: String!

  """Public URL to the policy."""
  url: Url!
}

"""
A policy for the store that comes with a default value, such as a subscription policy.
If the merchant hasn't configured a policy for their store, then the policy will return the default value.
Otherwise, the policy will return the merchant-configured value.
"""
type ShopifyStorefront_ShopPolicyWithDefault {
  """The text of the policy. Maximum size: 64KB."""
  body: String!

  """The handle of the policy."""
  handle: String!

  """
  The unique identifier of the policy. A default policy doesn't have an ID.
  """
  id: ID

  """The title of the policy."""
  title: String!

  """Public URL to the policy."""
  url: Url!
}

"""Returns the resource which is being referred to by a metafield."""
union ShopifyStorefront_MetafieldReference = ShopifyStorefront_MediaImage | ShopifyStorefront_Page | ShopifyStorefront_Product | ShopifyStorefront_ProductVariant

"""Represents a Shopify hosted image."""
type ShopifyStorefront_MediaImage {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  """A globally-unique identifier."""
  id: ID!

  """The image for the media."""
  image: ShopifyStorefront_Image

  """The media content type."""
  mediaContentType: ShopifyStorefront_MediaContentType!

  """The preview image for the media."""
  previewImage: ShopifyStorefront_Image
}

"""
Properties used by customers to select a product variant.
Products can have multiple options, like different sizes or colors.
"""
type ShopifyStorefront_SelectedOption {
  """The product optionâ€™s name."""
  name: String!

  """The product optionâ€™s value."""
  value: String!
}

"""
An auto-generated type for paginating through multiple SellingPlanAllocations.
"""
type ShopifyStorefront_SellingPlanAllocationConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_SellingPlanAllocationEdge!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one SellingPlanAllocation and a cursor during pagination.
"""
type ShopifyStorefront_SellingPlanAllocationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SellingPlanAllocationEdge."""
  node: ShopifyStorefront_SellingPlanAllocation!
}

"""
Represents an association between a variant and a selling plan. Selling plan allocations describe the options offered for each variant, and the price of the variant when purchased with a selling plan.
"""
type ShopifyStorefront_SellingPlanAllocation {
  """
  A list of price adjustments, with a maximum of two. When there are two, the first price adjustment goes into effect at the time of purchase, while the second one starts after a certain number of orders. A price adjustment represents how a selling plan affects pricing when a variant is purchased with a selling plan. Prices display in the customer's currency if the shop is configured for it.
  """
  priceAdjustments: [ShopifyStorefront_SellingPlanAllocationPriceAdjustment!]!

  """
  A representation of how products and variants can be sold and purchased. For example, an individual selling plan could be '6 weeks of prepaid granola, delivered weekly'.
  """
  sellingPlan: ShopifyStorefront_SellingPlan!
}

"""
The resulting prices for variants when they're purchased with a specific selling plan.
"""
type ShopifyStorefront_SellingPlanAllocationPriceAdjustment {
  """
  The price of the variant when it's purchased without a selling plan for the same number of deliveries. For example, if a customer purchases 6 deliveries of $10.00 granola separately, then the price is 6 x $10.00 = $60.00.
  """
  compareAtPrice: ShopifyStorefront_MoneyV2!

  """
  The effective price for a single delivery. For example, for a prepaid subscription plan that includes 6 deliveries at the price of $48.00, the per delivery price is $8.00.
  """
  perDeliveryPrice: ShopifyStorefront_MoneyV2!

  """
  The price of the variant when it's purchased with a selling plan For example, for a prepaid subscription plan that includes 6 deliveries of $10.00 granola, where the customer gets 20% off, the price is 6 x $10.00 x 0.80 = $48.00.
  """
  price: ShopifyStorefront_MoneyV2!

  """
  The resulting price per unit for the variant associated with the selling plan. If the variant isn't sold by quantity or measurement, then this field returns `null`.
  """
  unitPrice: ShopifyStorefront_MoneyV2
}

"""
An auto-generated type for paginating through multiple StoreAvailabilities.
"""
type ShopifyStorefront_StoreAvailabilityConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_StoreAvailabilityEdge!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one StoreAvailability and a cursor during pagination.
"""
type ShopifyStorefront_StoreAvailabilityEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of StoreAvailabilityEdge."""
  node: ShopifyStorefront_StoreAvailability!
}

"""
The availability of a product variant at a particular location.
Local pick-up must be enabled in the  store's shipping settings, otherwise this will return an empty result.
"""
type ShopifyStorefront_StoreAvailability {
  """Whether or not this product variant is in-stock at this location."""
  available: Boolean!

  """The location where this product variant is stocked at."""
  location: ShopifyStorefront_Location!

  """
  Returns the estimated amount of time it takes for pickup to be ready (Example: Usually ready in 24 hours).
  """
  pickUpTime: String!
}

"""Represents a location where product inventory is held."""
type ShopifyStorefront_Location {
  """The address of the location."""
  address: ShopifyStorefront_LocationAddress!

  """A globally-unique identifier."""
  id: ID!

  """The name of the location."""
  name: String!
}

"""Represents the address of a location."""
type ShopifyStorefront_LocationAddress {
  """The first line of the address for the location."""
  address1: String

  """The second line of the address for the location."""
  address2: String

  """The city of the location."""
  city: String

  """The country of the location."""
  country: String

  """The country code of the location."""
  countryCode: String

  """A formatted version of the address for the location."""
  formatted: [String!]!

  """The latitude coordinates of the location."""
  latitude: Float

  """The longitude coordinates of the location."""
  longitude: Float

  """The phone number of the location."""
  phone: String

  """The province of the location."""
  province: String

  """
  The code for the province, state, or district of the address of the location.
  """
  provinceCode: String

  """The ZIP code of the location."""
  zip: String
}

"""
The measurement used to calculate a unit price for a product variant (e.g. $9.99 / 100ml).
"""
type ShopifyStorefront_UnitPriceMeasurement {
  """The type of unit of measurement for the unit price measurement."""
  measuredType: ShopifyStorefront_UnitPriceMeasurementMeasuredType

  """The quantity unit for the unit price measurement."""
  quantityUnit: ShopifyStorefront_UnitPriceMeasurementMeasuredUnit

  """The quantity value for the unit price measurement."""
  quantityValue: Float!

  """The reference unit for the unit price measurement."""
  referenceUnit: ShopifyStorefront_UnitPriceMeasurementMeasuredUnit

  """The reference value for the unit price measurement."""
  referenceValue: Int!
}

enum ShopifyStorefront_UnitPriceMeasurementMeasuredType {
  VOLUME
  WEIGHT
  LENGTH
  AREA
}

enum ShopifyStorefront_UnitPriceMeasurementMeasuredUnit {
  ML
  CL
  L
  M3
  MG
  G
  KG
  MM
  CM
  M
  M2
}

enum ShopifyStorefront_WeightUnit {
  KILOGRAMS
  GRAMS
  POUNDS
  OUNCES
}

"""An auto-generated type for paginating through multiple Orders."""
type ShopifyStorefront_OrderConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_OrderEdge!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one Order and a cursor during pagination.
"""
type ShopifyStorefront_OrderEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of OrderEdge."""
  node: ShopifyStorefront_Order!
}

enum ShopifyStorefront_OrderSortKeys {
  PROCESSED_AT
  TOTAL_PRICE
  ID
  RELEVANCE
}

type Storefront implements TSSearchable {
  components: [StorefrontComponentsProperty!]!
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean @deprecated(reason: "Use _status instead")
  _enabledAt: String @deprecated(reason: "Use a custom date field instead")
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

union StorefrontComponentsProperty = OffersComponent | HeroComponent | CollectionsComponent | BackgroundImageComponent | SaleComponent | TestimonialsComponent

type OffersComponent {
  offers: [Offer!]!
}

type Offer {
  href: String!
  name: String!
  description: String!
}

type HeroComponent {
  primaryText: String!
  secondaryText: String!
  buttonText: String!
  image: String!
}

type CollectionsComponent {
  collections: [Collection!]!
}

type Collection {
  name: String
  description: String
  imageSrc: String
  imageAlt: String
  href: String
}

type BackgroundImageComponent {
  image: String!
}

type SaleComponent {
  primaryText: String!
  secondaryText: String!
  buttonText: String!
}

type TestimonialsComponent {
  testimonials: [JSONObject!]!
}

type Product implements TSSearchable {
  """Initialized with title from shopify"""
  name: String
  shopifyProduct: Shopify_Product
  shopifyProductId: String
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean @deprecated(reason: "Use _status instead")
  _enabledAt: String @deprecated(reason: "Use a custom date field instead")
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type ProductPaginatedList {
  items: [Product!]!
  total: Int!
}

input TSWhereProductInput {
  name: TSWhereStringInput
  shopifyProductId: TSWhereStringInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
  AND: [TSWhereProductInput]
  OR: [TSWhereProductInput]
  NOT: TSWhereProductInput
}

"""Asset search results"""
type AssetSearchResults {
  results: [Asset!]!
  total: Int!
}

"""TsStaticSite search results"""
type TsStaticSiteSearchResults {
  results: [TsStaticSite!]!
  total: Int!
}

"""Profile search results"""
type ProfileSearchResults {
  results: [Profile!]!
  total: Int!
}

"""Product search results"""
type ProductSearchResults {
  results: [Product!]!
  total: Int!
}

"""TSSearchable search results"""
type TSSearchableSearchResults {
  results: [TSSearchable!]!
  total: Int!
}

"""This query allow you to pass context to your queries"""
type WithContext {
  taxonomySuggest(
    shapeNames: [String]
    shapeIds: [String]
    contentTypeNames: [String]
    contentTypeIds: [String]
    terms: String
    locale: String
    enableLocaleFallback: Boolean = true

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): TSSuggestionPaginatedList

  """List Versions for a piece of content"""
  getContentVersion(id: ID!, version: Int!, locale: String, enableLocaleFallback: Boolean = true): TSVersionResponse

  """List Versions for a piece of content"""
  getContentVersionList(id: ID!, from: Int, size: Int): TSVersionsPaginatedList

  """Get a Asset by ID"""
  getAsset(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Asset

  """Returns a list Asset in natural order."""
  getAssetList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereAssetInput
  ): AssetPaginatedList

  """Get a TsStaticSite by ID"""
  getTsStaticSite(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): TsStaticSite

  """Returns a list TsStaticSite in natural order."""
  getTsStaticSiteList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereTsStaticSiteInput
  ): TsStaticSitePaginatedList
  ReviewsIo_listProductReviews(sku: String, mpn: String, page: String, per_page: String, photos: Int, verified_only: Int, comments_only: Int, minRating: Int, include_unpublished_images: Int, include_moderated: Int, order_id: String, min_date: String, max_date: String): ReviewsIo_ListProductReviewsResponse

  """Get Stripe products from the TakeShape API Index"""
  getIndexedProductList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereStripeProductInput
  ): Stripe_ProductPaginatedList

  """Get the signed in user's profile from ShapeDB"""
  getMyProfile: Profile

  """Get the signed in user's subscriptions from Stripe"""
  getMySubscriptions(expand: [String]): [Stripe_Subscription]

  """Get the signed-in user's payments from Stripe"""
  getMyPayments_UNINDEXED(expand: [String], limit: Float, created: JSON, startingAfter: String, endingBefore: String): [Stripe_PaymentIntent]

  """Get the signed-in user's payments from Stripe"""
  getMyPayments_INDEXED(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereStripePaymentIntentInput
  ): Stripe_PaymentIntentPaginatedList

  """Get the signed-in user's payments from Stripe"""
  getMyPayments(expand: [String], limit: Float, created: JSON, startingAfter: String, endingBefore: String): [Stripe_PaymentIntent]

  """Get the signed-in user's payments from Stripe"""
  getMyPaymentsIndexed(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereStripePaymentIntentInput
  ): Stripe_PaymentIntentPaginatedList

  """Get a profile by ID"""
  getProfile(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Profile

  """Returns a list of profiles in natural order."""
  getProfileList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProfileInput
  ): ProfilePaginatedList

  """
  <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>
  """
  Stripe_listProducts(active: Boolean, created: JSON, ending_before: String, expand: [String], ids: [String], limit: Int, shippable: Boolean, starting_after: String, url: String): Stripe_ListProductsResponse

  """
  <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p>
  """
  Stripe_getProduct(expand: [String], id: String!): Stripe_Product

  """Get a loyalty card from Voucherify"""
  getMyLoyaltyCard: Voucherify_LoyaltyCard
  getMyNewsletterSubscriptions: [ProfileNewsletterStatus]

  """
  <p>When retrieving an invoice, youâ€™ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
  """
  Stripe_listInvoiceLines(ending_before: String, expand: [String], invoice: String!, limit: Int, starting_after: String): Stripe_ListInvoiceLinesResponse

  """<p>Returns a list of PaymentIntents.</p>"""
  Stripe_listPaymentIntents(created: JSON, customer: String, ending_before: String, expand: [String], limit: Int, starting_after: String): Stripe_ListPaymentIntentsResponse

  """Get a NavigationData by ID"""
  getNavigationData(locale: String, enableLocaleFallback: Boolean = true): NavigationData

  """Get a Footer by ID"""
  getFooter(locale: String, enableLocaleFallback: Boolean = true): Footer
  Shopify_productVariants(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductVariantSortKeys = ID

    """
    Supported filter parameters:
     - `barcode`
     - `collection`
     - `delivery_profile_id`
     - `exclude_composite`
     - `gift_card`
     - `inventory_quantity`
     - `location_id`
     - `managed`
     - `managed_by`
     - `product_id`
     - `product_status`
     - `product_type`
     - `publishable_status`
     - `published_status`
     - `sku`
     - `tag`
     - `tag_not`
     - `taxable`
     - `title`
     - `updated_at`
     - `vendor`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    The ID of an existing saved search.
    The searchâ€™s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_ProductVariantConnection
  Shopify_products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductSortKeys = ID

    """
    Supported filter parameters:
     - `barcode`
     - `created_at`
     - `delivery_profile_id`
     - `error_feedback`
     - `gift_card`
     - `has_only_composites`
     - `has_only_default_variant`
     - `id`
     - `inventory_total`
     - `is_price_reduced`
     - `out_of_stock_somewhere`
     - `price`
     - `product_type`
     - `publishable_status`
     - `published_status`
     - `sku`
     - `status`
     - `tag`
     - `tag_not`
     - `title`
     - `updated_at`
     - `vendor`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    The ID of an existing saved search.
    The searchâ€™s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_ProductConnection
  Shopify_product(
    """The ID of the Product to return."""
    id: ID!
  ): Shopify_Product
  Shopify_customer(
    """The ID of the Customer to return."""
    id: ID!
  ): Shopify_Customer
  Shopify_customerPaymentMethod(
    """The ID of the CustomerPaymentMethod to return."""
    id: ID!

    """Whether to show the customer's revoked payment method."""
    showRevoked: Boolean = false
  ): Shopify_CustomerPaymentMethod
  ShopifyStorefront_customer(
    """The customer access token."""
    customerAccessToken: String!
  ): ShopifyStorefront_Customer
  getMyCustomer: ShopifyStorefront_Customer
  getMyAdminCustomer: Shopify_Customer

  """Get a Storefront by ID"""
  getStorefront(locale: String, enableLocaleFallback: Boolean = true): Storefront

  """Get a Product by ID"""
  getProduct(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Product

  """Returns a list Product in natural order."""
  getProductList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProductInput
  ): ProductPaginatedList
  searchAssetIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereAssetInput
  ): AssetSearchResults
  searchTsStaticSiteIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereTsStaticSiteInput
  ): TsStaticSiteSearchResults
  searchProfileIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProfileInput
  ): ProfileSearchResults
  searchProductIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProductInput
  ): ProductSearchResults
  search(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true
    shapeNames: [String]
    shapeIds: [String]
    contentTypeNames: [String]
    contentTypeIds: [String]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereInput
  ): TSSearchableSearchResults
}

type Mutation {
  """Initiate upload process for asset(s)"""
  uploadAssets(projectId: ID, files: [TSFile]!): [Upload]

  """Replace an asset file"""
  replaceAsset(projectId: ID, _id: ID!, _version: Int!, file: TSFile!): Upload

  """Update Asset"""
  updateAsset(input: UpdateAssetInput!, clientMutationId: String, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateAssetResult

  """Create Asset"""
  createAsset(input: CreateAssetInput!, clientMutationId: String): CreateAssetResult

  """Duplicate Asset"""
  duplicateAsset(input: DuplicateAssetInput!, clientMutationId: String, locale: String, enableLocaleFallback: Boolean = true): DuplicateAssetResult

  """Delete Asset"""
  deleteAsset(input: DeleteAssetInput!, clientMutationId: String): DeleteAssetResult

  """Update TsStaticSite"""
  updateTsStaticSite(input: UpdateTsStaticSiteInput!, clientMutationId: String, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateTsStaticSiteResult

  """Create TsStaticSite"""
  createTsStaticSite(input: CreateTsStaticSiteInput!, clientMutationId: String): CreateTsStaticSiteResult

  """Duplicate TsStaticSite"""
  duplicateTsStaticSite(input: DuplicateTsStaticSiteInput!, clientMutationId: String, locale: String, enableLocaleFallback: Boolean = true): DuplicateTsStaticSiteResult

  """Delete TsStaticSite"""
  deleteTsStaticSite(input: DeleteTsStaticSiteInput!, clientMutationId: String): DeleteTsStaticSiteResult

  """Create a shipment with ShipEngine."""
  createShipment(shipment_id: String, carrier_id: String, service_code: String, external_order_id: String, external_shipment_id: String, ship_date: String, created_at: String, modified_at: String, shipment_status: String, origin_type: String, insurance_provider: String, order_source_code: String, packages: [ShipEngine_PackageInput], ship_to: ShipEngine_AddressInput, ship_from: ShipEngine_AddressInput): ShipEngine_Label

  """A privileged user or webhook can upsert a user's profile in ShapeDB."""
  upsertProfile(id: String!, email: String!): Profile

  """Upsert the signed-in user's profile in ShapeDB."""
  upsertMyProfile(name: String, bio: String, avatarId: String): Profile

  """Upsert the signed-in user's Stripe customer"""
  upsertMyCustomer(name: String, description: String, address: UpsertMyCustomerPropertiesAddressPropertyInput): Stripe_Customer

  """Delete the signed-in user's subscription in Stripe"""
  deleteMySubscription(subscriptionId: String!): Stripe_Subscription

  """Create a Shopify storefront cart."""
  createMyCheckoutSession(lines: [CreateMyCheckoutSessionPropertiesLinesItemsPropertyInput!]!): ShopifyStorefront_Cart

  """Create a Shopify storefront cart."""
  createMyCheckout(email: String, lines: [CreateMyCheckoutPropertiesLinesItemsPropertyInput!]!): ShopifyStorefront_Cart
  subscribeMyEmailToNewsletter(list_id: String!): Klaviyo_AddMembersResponse
  unsubscribeMyEmailFromNewsletter(list_id: String!): Klaviyo_200Ok

  """Create a Stripe checkout session for the signed-in user"""
  createMyCheckoutSession_Stripe(redirectUrl: String!, mode: String!, lineItems: [CreateMyCheckoutSession_StripePropertiesLineItemsItemsPropertyInput!]!): Stripe_CheckoutSession

  """Update Profile"""
  updateProfile(input: UpdateProfileInput!, clientMutationId: String, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateProfileResult

  """Create Profile"""
  createProfile(input: CreateProfileInput!, clientMutationId: String): CreateProfileResult

  """Duplicate Profile"""
  duplicateProfile(input: DuplicateProfileInput!, clientMutationId: String, locale: String, enableLocaleFallback: Boolean = true): DuplicateProfileResult

  """Delete Profile"""
  deleteProfile(input: DeleteProfileInput!, clientMutationId: String): DeleteProfileResult

  """Create an order in Voucherify"""
  Voucherify_createOrder(email: String, amount: Float, status: String, items: [Voucherify_OrderItemInput]): Voucherify_Order
  Klaviyo_addMembers(input: AddListMembersInput, list_id: String!): Klaviyo_AddMembersResponse
  Klaviyo_removeMembers(
    "\nThe profiles that you would like to remove from the list. \n\nExample:\n\n{\n  \"emails\":[\"george.washington@klaviyo.com\",\"abraham.lincoln@klaviyo.com\"],\n  \"phone_numbers\":[\"+13239169023\"],\n  \"push_tokens\":[\"03df25c845d460bcdad7802d2vf6fc1dfde97283bf75cc993eb6dca835ea2e2r\"]\n}\n"
    input: Klaviyo_RemoveMembersPropertiesPropertyInput
    list_id: String!
  ): Klaviyo_200Ok

  """<p>Returns a list of Checkout Sessions.</p>"""
  listCheckoutSessions(ending_before: String, expand: [String], limit: Int, payment_intent: String, starting_after: String, subscription: String): Stripe_ListCheckoutSessionsResponse
  ReviewsIo_createInvitation(input: ReviewsIo_CreateInvitationPropertiesPropertyInput): ReviewsIo_CreateInvitationResponse

  """Update NavigationData"""
  updateNavigationData(input: UpdateNavigationDataInput!, clientMutationId: String, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateNavigationDataResult

  """Update Footer"""
  updateFooter(input: UpdateFooterInput!, clientMutationId: String, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateFooterResult
  ShopifyStorefront_cartCreate(
    """The fields used to create a cart."""
    input: ShopifyStorefront_CartInput
  ): ShopifyStorefront_CartCreatePayload
  createMyCart(
    """The fields used to create a cart."""
    input: ShopifyStorefront_CartInput
  ): ShopifyStorefront_CartCreatePayload
  ShopifyStorefront_customerAccessTokenCreate(
    """The fields used to create a customer access token."""
    input: ShopifyStorefront_CustomerAccessTokenCreateInput!
  ): ShopifyStorefront_CustomerAccessTokenCreatePayload
  ShopifyStorefront_customerCreate(
    """The fields used to create a new customer."""
    input: ShopifyStorefront_CustomerCreateInput!
  ): ShopifyStorefront_CustomerCreatePayload
  createCustomer(input: CreateCustomerPropertiesPropertyInput!): CreateCustomerPayload
  ShopifyStorefront_customerRecover(
    """The email address of the customer to recover."""
    email: String!
  ): ShopifyStorefront_CustomerRecoverPayload
  ShopifyStorefront_customerUpdate(
    """The access token used to identify the customer."""
    customerAccessToken: String!

    """The customer object input."""
    customer: ShopifyStorefront_CustomerUpdateInput!
  ): ShopifyStorefront_CustomerUpdatePayload
  ShopifyStorefront_customerAddressUpdate(
    """The access token used to identify the customer."""
    customerAccessToken: String!

    """Specifies the customer address to update."""
    id: ID!

    """The customerâ€™s mailing address."""
    address: ShopifyStorefront_MailingAddressInput!
  ): ShopifyStorefront_CustomerAddressUpdatePayload
  updateMyCustomer(
    """The access token used to identify the customer."""
    customerAccessToken: String

    """The customer object input."""
    customer: ShopifyStorefront_CustomerUpdateInput!
  ): ShopifyStorefront_CustomerUpdatePayload
  updateMyCustomerAddress(
    """The access token used to identify the customer."""
    customerAccessToken: String

    """Specifies the customer address to update."""
    id: ID!

    """The customerâ€™s mailing address."""
    address: ShopifyStorefront_MailingAddressInput!
  ): ShopifyStorefront_CustomerAddressUpdatePayload
  Gorgias_createTicket(message: String, email: String!): Gorgias_CreateTicketResponse

  """Update Storefront"""
  updateStorefront(input: UpdateStorefrontInput!, clientMutationId: String, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateStorefrontResult

  """
  Update Product. If the input has Shopify values and a Shopify ID, the Shopify product with that ID is updated.
  If the input has Shopify values and no Shopify ID, a Shopify product is created.
  """
  updateProduct(input: UpdateProductInterfaceInput!, clientMutationId: String, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateProductResult

  """
  Create Product. If Shopify values are provided, a Shopify product is also created and the new product ID is saved.
  """
  createProduct(input: CreateProductInterfaceInput!, clientMutationId: String): CreateProductResult

  """Duplicate Product"""
  duplicateProduct(input: DuplicateProductInput!, clientMutationId: String, locale: String, enableLocaleFallback: Boolean = true): DuplicateProductResult

  """Delete Product"""
  deleteProduct(input: DeleteProductInput!, clientMutationId: String): DeleteProductResult
}

"""A project file stored on s3"""
type Upload {
  uploadUrl: ID
  asset: Asset
}

input TSFile {
  name: String!
  type: String!
}

type UpdateAssetResult {
  clientMutationId: String
  result: Asset
}

"""update Asset input"""
input UpdateAssetInput {
  _id: ID!
  title: String
  description: String
  filename: String
  caption: JSON
  credit: JSON
  path: String
  mimeType: String
  sourceUrl: String
  uploadStatus: String
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  s3Key: String
}

"""Describes a structural update to an array of data."""
input ContentStructureInput {
  """A deep path to the array being updated (e.g. a.b[1].c)."""
  path: String!

  """
  An array where the indices represent the to index, and the values represent the from index.For example to transform ["a","b","c","d"] into ["c","a"], this value would be [2,0].
  """
  structure: [Int]
}

type CreateAssetResult {
  clientMutationId: String
  result: Asset
}

"""create Asset input"""
input CreateAssetInput {
  title: String
  description: String
  filename: String!
  caption: JSON
  credit: JSON
  path: String!
  mimeType: String
  sourceUrl: String
  uploadStatus: String
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  s3Key: String
}

type DuplicateAssetResult {
  clientMutationId: String
  result: Asset
}

"""duplicate Asset input"""
input DuplicateAssetInput {
  _id: ID!
  title: String
  description: String
  filename: String
  caption: JSON
  credit: JSON
  path: String
  mimeType: String
  sourceUrl: String
  uploadStatus: String
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  s3Key: String
}

type DeleteAssetResult {
  clientMutationId: String
  result: Boolean
}

"""delete Asset input"""
input DeleteAssetInput {
  _id: ID!
}

type UpdateTsStaticSiteResult {
  clientMutationId: String
  result: TsStaticSite
}

"""update TsStaticSite input"""
input UpdateTsStaticSiteInput {
  _id: ID!
  title: String
  baseUrl: String
  provider: String
  idKey: String
  secretKey: String
  destination: String
  privateAcl: Boolean
  environmentVariables: [TsStaticSiteEnvironmentVariablesInput]
  triggers: [TsStaticSiteTriggersInput]
  templateHash: String
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

input TsStaticSiteEnvironmentVariablesInput {
  name: String
  value: String
}

input TsStaticSiteTriggersInput {
  contentTypeId: String
  status: String
}

type CreateTsStaticSiteResult {
  clientMutationId: String
  result: TsStaticSite
}

"""create TsStaticSite input"""
input CreateTsStaticSiteInput {
  title: String!
  baseUrl: String
  provider: String! = "s3"
  idKey: String
  secretKey: String
  destination: String!
  privateAcl: Boolean
  environmentVariables: [TsStaticSiteEnvironmentVariablesInput]
  triggers: [TsStaticSiteTriggersInput]
  templateHash: String
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type DuplicateTsStaticSiteResult {
  clientMutationId: String
  result: TsStaticSite
}

"""duplicate TsStaticSite input"""
input DuplicateTsStaticSiteInput {
  _id: ID!
  title: String
  baseUrl: String
  provider: String
  idKey: String
  secretKey: String
  destination: String
  privateAcl: Boolean
  environmentVariables: [TsStaticSiteEnvironmentVariablesInput]
  triggers: [TsStaticSiteTriggersInput]
  templateHash: String
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type DeleteTsStaticSiteResult {
  clientMutationId: String
  result: Boolean
}

"""delete TsStaticSite input"""
input DeleteTsStaticSiteInput {
  _id: ID!
}

input ShipEngine_PackageInput {
  package_id: Int
  description: String
  package_code: String
  tracking_number: String
  label_download: ShipEngine_LabelDownloadInput
  weight: ShipEngine_WeightInput
  dimensions: ShipEngine_DimensionsInput
}

input ShipEngine_LabelDownloadInput {
  href: String
  pdf: String
  png: String
  zpl: String
}

input ShipEngine_WeightInput {
  value: Float
  unit: String
}

input ShipEngine_DimensionsInput {
  length: Float
  width: Float
  height: Float
  unit: String
}

input ShipEngine_AddressInput {
  name: String
  phone: String
  address_line1: String
  address_line2: String
  city_locality: String
  state_province: String
  postal_code: String
  country_code: String
  address_residential_indicator: String
}

input UpsertMyCustomerPropertiesAddressPropertyInput {
  line1: String
  line2: String
  city: String
  country: String
  postal_code: String
  state: String
}

"""
A cart represents the merchandise that a buyer intends to purchase, and the estimated cost associated with the cart. To learn how to interact with a cart during a customer's session, refer to [Manage a cart with the Storefront API](https://shopify.dev/api/examples/cart).
"""
type ShopifyStorefront_Cart {
  """
  The attributes associated with the cart. Attributes are represented as key-value pairs.
  """
  attributes: [ShopifyStorefront_Attribute!]!

  """Information about the buyer that is interacting with the cart."""
  buyerIdentity: ShopifyStorefront_CartBuyerIdentity!

  """The URL of the checkout for the cart."""
  checkoutUrl: Url!

  """The date and time when the cart was created."""
  createdAt: DateTime!

  """
  The case-insensitive discount codes that the customer added at checkout.
  """
  discountCodes: [ShopifyStorefront_CartDiscountCode!]!

  """
  The estimated costs that the buyer will pay at checkout. The estimated costs are subject to change and changes will be reflected at checkout. The `estimatedCost` field uses the `buyerIdentity` field to determine [international pricing](https://shopify.dev/api/examples/international-pricing#create-a-cart).
  """
  estimatedCost: ShopifyStorefront_CartEstimatedCost!

  """A globally-unique identifier."""
  id: ID!

  """
  A list of lines containing information about the items the customer intends to purchase.
  """
  lines(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyStorefront_CartLineConnection!

  """
  A note that is associated with the cart. For example, the note can be a personalized message to the buyer.
  """
  note: String

  """The date and time when the cart was updated."""
  updatedAt: DateTime!
}

"""
Represents information about the buyer that is interacting with the cart.
"""
type ShopifyStorefront_CartBuyerIdentity {
  """The country where the buyer is located."""
  countryCode: ShopifyStorefront_CountryCode

  """The customer account associated with the cart."""
  customer: ShopifyStorefront_Customer

  """The email address of the buyer that is interacting with the cart."""
  email: String

  """The phone number of the buyer that is interacting with the cart."""
  phone: String
}

"""The discount codes applied to the cart."""
type ShopifyStorefront_CartDiscountCode {
  """
  Whether the discount code is applicable to the cart's current contents.
  """
  applicable: Boolean!

  """The code for the discount."""
  code: String!
}

"""
The estimated costs that the buyer will pay at checkout.
It uses [`CartBuyerIdentity`](https://shopify.dev/api/storefront/reference/cart/cartbuyeridentity) to determine
[international pricing](https://shopify.dev/api/examples/international-pricing#create-a-cart).
"""
type ShopifyStorefront_CartEstimatedCost {
  """
  The estimated amount, before taxes and discounts, for the customer to pay.
  """
  subtotalAmount: ShopifyStorefront_MoneyV2!

  """The estimated total amount for the customer to pay."""
  totalAmount: ShopifyStorefront_MoneyV2!

  """The estimated duty amount for the customer to pay at checkout."""
  totalDutyAmount: ShopifyStorefront_MoneyV2

  """The estimated tax amount for the customer to pay at checkout."""
  totalTaxAmount: ShopifyStorefront_MoneyV2
}

"""An auto-generated type for paginating through multiple CartLines."""
type ShopifyStorefront_CartLineConnection {
  """A list of edges."""
  edges: [ShopifyStorefront_CartLineEdge!]!

  """Information to aid in pagination."""
  pageInfo: ShopifyStorefront_PageInfo!
}

"""
An auto-generated type which holds one CartLine and a cursor during pagination.
"""
type ShopifyStorefront_CartLineEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CartLineEdge."""
  node: ShopifyStorefront_CartLine!
}

"""Represents information about the merchandise in the cart."""
type ShopifyStorefront_CartLine {
  """
  The attributes associated with the cart line. Attributes are represented as key-value pairs.
  """
  attributes: [ShopifyStorefront_Attribute!]!

  """The discounts that have been applied to the cart line."""
  discountAllocations: [ShopifyStorefront_CartDiscountAllocation!]!

  """
  The estimated cost of the merchandise that the buyer will pay for at checkout. The estimated costs are subject to change and changes will be reflected at checkout.
  """
  estimatedCost: ShopifyStorefront_CartLineEstimatedCost!

  """A globally-unique identifier."""
  id: ID!

  """The merchandise that the buyer intends to purchase."""
  merchandise: ShopifyStorefront_Merchandise!

  """The quantity of the merchandise that the customer intends to purchase."""
  quantity: Int!

  """
  The selling plan associated with the cart line and the effect that each selling plan has on variants when they're purchased.
  """
  sellingPlanAllocation: ShopifyStorefront_SellingPlanAllocation
}

"""The discounts that have been applied to the cart line."""
type ShopifyStorefront_CartDiscountAllocation {
  """The discounted amount that has been applied to the cart line."""
  discountedAmount: ShopifyStorefront_MoneyV2!
}

"""
The estimated cost of the merchandise line that the buyer will pay at checkout.
"""
type ShopifyStorefront_CartLineEstimatedCost {
  """The estimated cost of the merchandise line before discounts."""
  subtotalAmount: ShopifyStorefront_MoneyV2!

  """The estimated total cost of the merchandise line."""
  totalAmount: ShopifyStorefront_MoneyV2!
}

"""The merchandise to be purchased at checkout."""
union ShopifyStorefront_Merchandise = ShopifyStorefront_ProductVariant

input CreateMyCheckoutSessionPropertiesLinesItemsPropertyInput {
  quantity: Int!
  merchandiseId: String!
  sellingPlanId: String
}

input CreateMyCheckoutPropertiesLinesItemsPropertyInput {
  quantity: Int!
  merchandiseId: String!
  sellingPlanId: String
}

type Klaviyo_AddMembersResponse {
  items: [Klaviyo_AddMembersResponseItemsProperty]
}

type Klaviyo_AddMembersResponseItemsProperty {
  id: String
  email: String
  phone_number: String
}

type Klaviyo_200Ok {
  result: JSONObject
}

type Stripe_CheckoutSession {
  after_expiration: Stripe_PaymentPagesCheckoutSessionAfterExpiration

  """Enables user redeemable promotion codes."""
  allow_promotion_codes: Boolean

  """Total of all items before discounts or taxes are applied."""
  amount_subtotal: Int

  """Total of all items after discounts and taxes are applied."""
  amount_total: Int
  automatic_tax: Stripe_PaymentPagesCheckoutSessionAutomaticTax

  """
  Describes whether Checkout should collect the customer's billing address.
  """
  billing_address_collection: Stripe_CheckoutSessionBillingAddressCollectionProperty

  """
  The URL the customer will be directed to if they decide to cancel payment and return to your website.
  """
  cancel_url: String

  """
  A unique string to reference the Checkout Session. This can be a
  customer ID, a cart ID, or similar, and can be used to reconcile the
  Session with your internal systems.
  """
  client_reference_id: String
  consent: Stripe_PaymentPagesCheckoutSessionConsent
  consent_collection: Stripe_PaymentPagesCheckoutSessionConsentCollection

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  customer: String

  """
  Configure whether a Checkout Session creates a Customer when the Checkout Session completes.
  """
  customer_creation: Stripe_CheckoutSessionCustomerCreationProperty
  customer_details: Stripe_PaymentPagesCheckoutSessionCustomerDetails

  """
  If provided, this value will be used when the Customer object is created.
  If not provided, customers will be asked to enter their email address.
  Use this parameter to prefill customer data if you already have an email
  on file. To access information about the customer once the payment flow is
  complete, use the `customer` attribute.
  """
  customer_email: String

  """The timestamp at which the Checkout Session will expire."""
  expires_at: Int

  """
  Unique identifier for the object. Used to pass to `redirectToCheckout`
  in Stripe.js.
  """
  id: String

  """The line items purchased by the customer."""
  line_items: Stripe_CheckoutSessionLineItemsProperty

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
  """
  locale: Stripe_CheckoutSessionLocaleProperty

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """The mode of the Checkout Session."""
  mode: Stripe_CheckoutSessionModeProperty
  object: String
  payment_intent: Stripe_CheckoutSessionPaymentIntentProperty
  payment_link: Stripe_CheckoutSessionPaymentLinkProperty
  payment_method_options: Stripe_CheckoutSessionPaymentMethodOptions

  """
  A list of the types of payment methods (e.g. card) this Checkout
  Session is allowed to accept.
  """
  payment_method_types: [String]

  """
  The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`.
  You can use this value to decide when to fulfill your customer's order.
  """
  payment_status: Stripe_CheckoutSessionPaymentStatusProperty
  phone_number_collection: Stripe_PaymentPagesCheckoutSessionPhoneNumberCollection

  """
  The ID of the original expired Checkout Session that triggered the recovery flow.
  """
  recovered_from: String
  setup_intent: Stripe_CheckoutSessionSetupIntentProperty
  shipping: Stripe_Shipping
  shipping_address_collection: Stripe_PaymentPagesCheckoutSessionShippingAddressCollection

  """The shipping rate options applied to this Session."""
  shipping_options: [Stripe_PaymentPagesCheckoutSessionShippingOption]
  shipping_rate: Stripe_CheckoutSessionShippingRateProperty

  """
  The status of the Checkout Session, one of `open`, `complete`, or `expired`.
  """
  status: Stripe_CheckoutSessionStatusProperty

  """
  Describes the type of transaction being performed by Checkout in order to customize
  relevant text on the page, such as the submit button. `submit_type` can only be
  specified on Checkout Sessions in `payment` mode, but not Checkout Sessions
  in `subscription` or `setup` mode.
  """
  submit_type: Stripe_CheckoutSessionSubmitTypeProperty
  subscription: Stripe_CheckoutSessionSubscriptionProperty

  """
  The URL the customer will be directed to after the payment or
  subscription creation is successful.
  """
  success_url: String
  tax_id_collection: Stripe_PaymentPagesCheckoutSessionTaxIdCollection
  total_details: Stripe_PaymentPagesCheckoutSessionTotalDetails

  """
  The URL to the Checkout Session. Redirect customers to this URL to take them to Checkout. If youâ€™re using [Custom Domains](https://stripe.com/docs/payments/checkout/custom-domains), the URL will use your subdomain. Otherwise, itâ€™ll use `checkout.stripe.com.`
  """
  url: String
}

type Stripe_PaymentPagesCheckoutSessionAfterExpiration {
  recovery: Stripe_PaymentPagesCheckoutSessionAfterExpirationRecovery
}

type Stripe_PaymentPagesCheckoutSessionAfterExpirationRecovery {
  """
  Enables user redeemable promotion codes on the recovered Checkout Sessions. Defaults to `false`
  """
  allow_promotion_codes: Boolean

  """
  If `true`, a recovery url will be generated to recover this Checkout Session if it
  expires before a transaction is completed. It will be attached to the
  Checkout Session object upon expiration.
  """
  enabled: Boolean

  """The timestamp at which the recovery URL will expire."""
  expires_at: Int

  """
  URL that creates a new Checkout Session when clicked that is a copy of this expired Checkout Session
  """
  url: String
}

type Stripe_PaymentPagesCheckoutSessionAutomaticTax {
  """Indicates whether automatic tax is enabled for the session"""
  enabled: Boolean

  """
  The status of the most recent automated tax calculation for this session.
  """
  status: Stripe_PaymentPagesCheckoutSessionAutomaticTaxStatusProperty
}

enum Stripe_PaymentPagesCheckoutSessionAutomaticTaxStatusProperty {
  complete
  failed
  requires_location_inputs
}

enum Stripe_CheckoutSessionBillingAddressCollectionProperty {
  auto
  required
}

type Stripe_PaymentPagesCheckoutSessionConsent {
  """
  If `opt_in`, the customer consents to receiving promotional communications
  from the merchant about this Checkout Session.
  """
  promotions: Stripe_PaymentPagesCheckoutSessionConsentPromotionsProperty
}

enum Stripe_PaymentPagesCheckoutSessionConsentPromotionsProperty {
  opt_in
  opt_out
}

type Stripe_PaymentPagesCheckoutSessionConsentCollection {
  """
  If set to `auto`, enables the collection of customer consent for promotional communications. The Checkout
  Session will determine whether to display an option to opt into promotional communication
  from the merchant depending on the customer's locale. Only available to US merchants.
  """
  promotions: Stripe_PaymentPagesCheckoutSessionConsentCollectionPromotionsProperty
}

enum Stripe_PaymentPagesCheckoutSessionConsentCollectionPromotionsProperty {
  auto
}

enum Stripe_CheckoutSessionCustomerCreationProperty {
  always
  if_required
}

type Stripe_PaymentPagesCheckoutSessionCustomerDetails {
  address: Stripe_Address

  """
  The email associated with the Customer, if one exists, on the Checkout Session at the time of checkout or at time of session expiry.
  Otherwise, if the customer has consented to promotional content, this value is the most recent valid email provided by the customer on the Checkout form.
  """
  email: String

  """
  The customer's name at the time of checkout. Note: This property is populated only for sessions on or after March 30, 2022.
  """
  name: String

  """The customer's phone number at the time of checkout"""
  phone: String

  """The customerâ€™s tax exempt status at time of checkout."""
  tax_exempt: Stripe_PaymentPagesCheckoutSessionCustomerDetailsTaxExemptProperty

  """The customerâ€™s tax IDs at time of checkout."""
  tax_ids: [Stripe_PaymentPagesCheckoutSessionTaxId]
}

enum Stripe_PaymentPagesCheckoutSessionCustomerDetailsTaxExemptProperty {
  exempt
  none
  reverse
}

type Stripe_PaymentPagesCheckoutSessionTaxId {
  """
  The type of the tax ID, one of `eu_vat`, `br_cnpj`, `br_cpf`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, or `unknown`
  """
  type: Stripe_PaymentPagesCheckoutSessionTaxIdTypeProperty

  """The value of the tax ID."""
  value: String
}

enum Stripe_PaymentPagesCheckoutSessionTaxIdTypeProperty {
  ae_trn
  au_abn
  au_arn
  bg_uic
  br_cnpj
  br_cpf
  ca_bn
  ca_gst_hst
  ca_pst_bc
  ca_pst_mb
  ca_pst_sk
  ca_qst
  ch_vat
  cl_tin
  es_cif
  eu_vat
  gb_vat
  ge_vat
  hk_br
  hu_tin
  id_npwp
  il_vat
  in_gst
  is_vat
  jp_cn
  jp_rn
  kr_brn
  li_uid
  mx_rfc
  my_frp
  my_itn
  my_sst
  no_vat
  nz_gst
  ru_inn
  ru_kpp
  sa_vat
  sg_gst
  sg_uen
  si_tin
  th_vat
  tw_vat
  ua_vat
  unknown
  us_ein
  za_vat
}

"""The line items purchased by the customer."""
type Stripe_CheckoutSessionLineItemsProperty {
  """Details about each object."""
  data: [Stripe_Item!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_CheckoutSessionLineItemsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

enum Stripe_CheckoutSessionLineItemsObjectProperty {
  list
}

enum Stripe_CheckoutSessionLocaleProperty {
  auto
  bg
  cs
  da
  de
  el
  en
  enDASHGB
  es
  esDASH419
  et
  fi
  fil
  fr
  frDASHCA
  hr
  hu
  id
  it
  ja
  ko
  lt
  lv
  ms
  mt
  nb
  nl
  pl
  pt
  ptDASHBR
  ro
  ru
  sk
  sl
  sv
  th
  tr
  vi
  zh
  zhDASHHK
  zhDASHTW
}

enum Stripe_CheckoutSessionModeProperty {
  payment
  setup
  subscription
}

union Stripe_CheckoutSessionPaymentIntentProperty = WrappedString | Stripe_PaymentIntent

union Stripe_CheckoutSessionPaymentLinkProperty = WrappedString | Stripe_PaymentLink

type Stripe_PaymentLink {
  """
  Whether the payment link's `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.
  """
  active: Boolean
  after_completion: Stripe_PaymentLinksResourceAfterCompletion

  """Whether user redeemable promotion codes are enabled."""
  allow_promotion_codes: Boolean

  """
  The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account.
  """
  application_fee_amount: Int

  """
  This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account.
  """
  application_fee_percent: Float
  automatic_tax: Stripe_PaymentLinksResourceAutomaticTax

  """Configuration for collecting the customer's billing address."""
  billing_address_collection: Stripe_PaymentLinkBillingAddressCollectionProperty

  """Unique identifier for the object."""
  id: String

  """The line items representing what is being sold."""
  line_items: Stripe_PaymentLinkLineItemsProperty

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_PaymentLinkObjectProperty
  on_behalf_of: Stripe_PaymentLinkOnBehalfOfProperty

  """
  The list of payment method types that customers can use. When `null`, Stripe will dynamically show relevant payment methods you've enabled in your [payment method settings](https://dashboard.stripe.com/settings/payment_methods).
  """
  payment_method_types: [Stripe_PaymentLinkPaymentMethodTypesProperty]
  phone_number_collection: Stripe_PaymentLinksResourcePhoneNumberCollection
  shipping_address_collection: Stripe_PaymentLinksResourceShippingAddressCollection
  subscription_data: Stripe_PaymentLinksResourceSubscriptionData
  transfer_data: Stripe_PaymentLinksResourceTransferData

  """The public URL that can be shared with customers."""
  url: String
}

type Stripe_PaymentLinksResourceAfterCompletion {
  hosted_confirmation: Stripe_PaymentLinksResourceCompletionBehaviorConfirmationPage
  redirect: Stripe_PaymentLinksResourceCompletionBehaviorRedirect

  """The specified behavior after the purchase is complete."""
  type: Stripe_PaymentLinksResourceAfterCompletionTypeProperty
}

type Stripe_PaymentLinksResourceCompletionBehaviorConfirmationPage {
  """
  The custom message that is displayed to the customer after the purchase is complete.
  """
  custom_message: String
}

type Stripe_PaymentLinksResourceCompletionBehaviorRedirect {
  """
  The URL the customer will be redirected to after the purchase is complete.
  """
  url: String
}

enum Stripe_PaymentLinksResourceAfterCompletionTypeProperty {
  hosted_confirmation
  redirect
}

type Stripe_PaymentLinksResourceAutomaticTax {
  """
  If `true`, tax will be calculated automatically using the customer's location.
  """
  enabled: Boolean
}

enum Stripe_PaymentLinkBillingAddressCollectionProperty {
  auto
  required
}

"""The line items representing what is being sold."""
type Stripe_PaymentLinkLineItemsProperty {
  """Details about each object."""
  data: [Stripe_Item!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_PaymentLinkLineItemsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

enum Stripe_PaymentLinkLineItemsObjectProperty {
  list
}

enum Stripe_PaymentLinkObjectProperty {
  payment_link
}

union Stripe_PaymentLinkOnBehalfOfProperty = WrappedString | Stripe_Account

enum Stripe_PaymentLinkPaymentMethodTypesProperty {
  card
}

type Stripe_PaymentLinksResourcePhoneNumberCollection {
  """If `true`, a phone number will be collected during checkout."""
  enabled: Boolean
}

type Stripe_PaymentLinksResourceShippingAddressCollection {
  """
  An array of two-letter ISO country codes representing which countries Checkout should provide as options for shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`.
  """
  allowed_countries: [Stripe_PaymentLinksResourceShippingAddressCollectionAllowedCountriesProperty]
}

enum Stripe_PaymentLinksResourceShippingAddressCollectionAllowedCountriesProperty {
  AC
  AD
  AE
  AF
  AG
  AI
  AL
  AM
  AO
  AQ
  AR
  AT
  AU
  AW
  AX
  AZ
  BA
  BB
  BD
  BE
  BF
  BG
  BH
  BI
  BJ
  BL
  BM
  BN
  BO
  BQ
  BR
  BS
  BT
  BV
  BW
  BY
  BZ
  CA
  CD
  CF
  CG
  CH
  CI
  CK
  CL
  CM
  CN
  CO
  CR
  CV
  CW
  CY
  CZ
  DE
  DJ
  DK
  DM
  DO
  DZ
  EC
  EE
  EG
  EH
  ER
  ES
  ET
  FI
  FJ
  FK
  FO
  FR
  GA
  GB
  GD
  GE
  GF
  GG
  GH
  GI
  GL
  GM
  GN
  GP
  GQ
  GR
  GS
  GT
  GU
  GW
  GY
  HK
  HN
  HR
  HT
  HU
  ID
  IE
  IL
  IM
  IN
  IO
  IQ
  IS
  IT
  JE
  JM
  JO
  JP
  KE
  KG
  KH
  KI
  KM
  KN
  KR
  KW
  KY
  KZ
  LA
  LB
  LC
  LI
  LK
  LR
  LS
  LT
  LU
  LV
  LY
  MA
  MC
  MD
  ME
  MF
  MG
  MK
  ML
  MM
  MN
  MO
  MQ
  MR
  MS
  MT
  MU
  MV
  MW
  MX
  MY
  MZ
  NA
  NC
  NE
  NG
  NI
  NL
  NO
  NP
  NR
  NU
  NZ
  OM
  PA
  PE
  PF
  PG
  PH
  PK
  PL
  PM
  PN
  PR
  PS
  PT
  PY
  QA
  RE
  RO
  RS
  RU
  RW
  SA
  SB
  SC
  SE
  SG
  SH
  SI
  SJ
  SK
  SL
  SM
  SN
  SO
  SR
  SS
  ST
  SV
  SX
  SZ
  TA
  TC
  TD
  TF
  TG
  TH
  TJ
  TK
  TL
  TM
  TN
  TO
  TR
  TT
  TV
  TW
  TZ
  UA
  UG
  US
  UY
  UZ
  VA
  VC
  VE
  VG
  VN
  VU
  WF
  WS
  XK
  YE
  YT
  ZA
  ZM
  ZW
  ZZ
}

type Stripe_PaymentLinksResourceSubscriptionData {
  """
  Integer representing the number of trial period days before the customer is charged for the first time.
  """
  trial_period_days: Int
}

type Stripe_PaymentLinksResourceTransferData {
  """
  The amount in %s that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
  """
  amount: Int
  destination: Stripe_PaymentLinksResourceTransferDataDestinationProperty
}

union Stripe_PaymentLinksResourceTransferDataDestinationProperty = WrappedString | Stripe_Account

type Stripe_CheckoutSessionPaymentMethodOptions {
  acss_debit: Stripe_CheckoutAcssDebitPaymentMethodOptions
  boleto: Stripe_CheckoutBoletoPaymentMethodOptions
  konbini: Stripe_CheckoutKonbiniPaymentMethodOptions
  oxxo: Stripe_CheckoutOxxoPaymentMethodOptions
  us_bank_account: Stripe_CheckoutUsBankAccountPaymentMethodOptions
}

type Stripe_CheckoutAcssDebitPaymentMethodOptions {
  """
  Currency supported by the bank account. Returned when the Session is in `setup` mode.
  """
  currency: Stripe_CheckoutAcssDebitPaymentMethodOptionsCurrencyProperty
  mandate_options: Stripe_CheckoutAcssDebitMandateOptions

  """Bank account verification method."""
  verification_method: Stripe_CheckoutAcssDebitPaymentMethodOptionsVerificationMethodProperty
}

enum Stripe_CheckoutAcssDebitPaymentMethodOptionsCurrencyProperty {
  cad
  usd
}

type Stripe_CheckoutAcssDebitMandateOptions {
  """A URL for custom mandate text"""
  custom_mandate_url: String

  """
  List of Stripe products where this mandate can be selected automatically. Returned when the Session is in `setup` mode.
  """
  default_for: [Stripe_CheckoutAcssDebitMandateOptionsDefaultForProperty]

  """
  Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
  """
  interval_description: String

  """Payment schedule for the mandate."""
  payment_schedule: Stripe_CheckoutAcssDebitMandateOptionsPaymentScheduleProperty

  """Transaction type of the mandate."""
  transaction_type: Stripe_CheckoutAcssDebitMandateOptionsTransactionTypeProperty
}

enum Stripe_CheckoutAcssDebitMandateOptionsDefaultForProperty {
  invoice
  subscription
}

enum Stripe_CheckoutAcssDebitMandateOptionsPaymentScheduleProperty {
  combined
  interval
  sporadic
}

enum Stripe_CheckoutAcssDebitMandateOptionsTransactionTypeProperty {
  business
  personal
}

enum Stripe_CheckoutAcssDebitPaymentMethodOptionsVerificationMethodProperty {
  automatic
  instant
  microdeposits
}

type Stripe_CheckoutBoletoPaymentMethodOptions {
  """
  The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time.
  """
  expires_after_days: Int
}

type Stripe_CheckoutKonbiniPaymentMethodOptions {
  """
  The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST.
  """
  expires_after_days: Int
}

type Stripe_CheckoutOxxoPaymentMethodOptions {
  """
  The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time.
  """
  expires_after_days: Int
}

type Stripe_CheckoutUsBankAccountPaymentMethodOptions {
  """Bank account verification method."""
  verification_method: Stripe_CheckoutUsBankAccountPaymentMethodOptionsVerificationMethodProperty
}

enum Stripe_CheckoutUsBankAccountPaymentMethodOptionsVerificationMethodProperty {
  automatic
  instant
}

enum Stripe_CheckoutSessionPaymentStatusProperty {
  no_payment_required
  paid
  unpaid
}

type Stripe_PaymentPagesCheckoutSessionPhoneNumberCollection {
  """Indicates whether phone number collection is enabled for the session"""
  enabled: Boolean
}

union Stripe_CheckoutSessionSetupIntentProperty = WrappedString | Stripe_SetupIntent

type Stripe_PaymentPagesCheckoutSessionShippingAddressCollection {
  """
  An array of two-letter ISO country codes representing which countries Checkout should provide as options for
  shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`.
  """
  allowed_countries: [Stripe_PaymentPagesCheckoutSessionShippingAddressCollectionAllowedCountriesProperty]
}

enum Stripe_PaymentPagesCheckoutSessionShippingAddressCollectionAllowedCountriesProperty {
  AC
  AD
  AE
  AF
  AG
  AI
  AL
  AM
  AO
  AQ
  AR
  AT
  AU
  AW
  AX
  AZ
  BA
  BB
  BD
  BE
  BF
  BG
  BH
  BI
  BJ
  BL
  BM
  BN
  BO
  BQ
  BR
  BS
  BT
  BV
  BW
  BY
  BZ
  CA
  CD
  CF
  CG
  CH
  CI
  CK
  CL
  CM
  CN
  CO
  CR
  CV
  CW
  CY
  CZ
  DE
  DJ
  DK
  DM
  DO
  DZ
  EC
  EE
  EG
  EH
  ER
  ES
  ET
  FI
  FJ
  FK
  FO
  FR
  GA
  GB
  GD
  GE
  GF
  GG
  GH
  GI
  GL
  GM
  GN
  GP
  GQ
  GR
  GS
  GT
  GU
  GW
  GY
  HK
  HN
  HR
  HT
  HU
  ID
  IE
  IL
  IM
  IN
  IO
  IQ
  IS
  IT
  JE
  JM
  JO
  JP
  KE
  KG
  KH
  KI
  KM
  KN
  KR
  KW
  KY
  KZ
  LA
  LB
  LC
  LI
  LK
  LR
  LS
  LT
  LU
  LV
  LY
  MA
  MC
  MD
  ME
  MF
  MG
  MK
  ML
  MM
  MN
  MO
  MQ
  MR
  MS
  MT
  MU
  MV
  MW
  MX
  MY
  MZ
  NA
  NC
  NE
  NG
  NI
  NL
  NO
  NP
  NR
  NU
  NZ
  OM
  PA
  PE
  PF
  PG
  PH
  PK
  PL
  PM
  PN
  PR
  PS
  PT
  PY
  QA
  RE
  RO
  RS
  RU
  RW
  SA
  SB
  SC
  SE
  SG
  SH
  SI
  SJ
  SK
  SL
  SM
  SN
  SO
  SR
  SS
  ST
  SV
  SX
  SZ
  TA
  TC
  TD
  TF
  TG
  TH
  TJ
  TK
  TL
  TM
  TN
  TO
  TR
  TT
  TV
  TW
  TZ
  UA
  UG
  US
  UY
  UZ
  VA
  VC
  VE
  VG
  VN
  VU
  WF
  WS
  XK
  YE
  YT
  ZA
  ZM
  ZW
  ZZ
}

type Stripe_PaymentPagesCheckoutSessionShippingOption {
  """A non-negative integer in cents representing how much to charge."""
  shipping_amount: Int
  shipping_rate: Stripe_PaymentPagesCheckoutSessionShippingOptionShippingRateProperty
}

union Stripe_PaymentPagesCheckoutSessionShippingOptionShippingRateProperty = WrappedString | Stripe_ShippingRate

type Stripe_ShippingRate {
  """
  Whether the shipping rate can be used for new purchases. Defaults to `true`.
  """
  active: Boolean

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  delivery_estimate: Stripe_ShippingRateDeliveryEstimate

  """
  The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.
  """
  display_name: String
  fixed_amount: Stripe_ShippingRateFixedAmount

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_ShippingRateObjectProperty

  """
  Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
  """
  tax_behavior: Stripe_ShippingRateTaxBehaviorProperty
  tax_code: Stripe_ShippingRateTaxCodeProperty

  """
  The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
  """
  type: Stripe_ShippingRateTypeProperty
}

type Stripe_ShippingRateDeliveryEstimate {
  maximum: Stripe_ShippingRateDeliveryEstimateBound
  minimum: Stripe_ShippingRateDeliveryEstimateBound
}

type Stripe_ShippingRateDeliveryEstimateBound {
  """A unit of time."""
  unit: Stripe_ShippingRateDeliveryEstimateBoundUnitProperty

  """Must be greater than 0."""
  value: Int
}

enum Stripe_ShippingRateDeliveryEstimateBoundUnitProperty {
  business_day
  day
  hour
  month
  week
}

type Stripe_ShippingRateFixedAmount {
  """A non-negative integer in cents representing how much to charge."""
  amount: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
}

enum Stripe_ShippingRateObjectProperty {
  shipping_rate
}

enum Stripe_ShippingRateTaxBehaviorProperty {
  exclusive
  inclusive
  unspecified
}

union Stripe_ShippingRateTaxCodeProperty = WrappedString | Stripe_TaxCode

enum Stripe_ShippingRateTypeProperty {
  fixed_amount
}

union Stripe_CheckoutSessionShippingRateProperty = WrappedString | Stripe_ShippingRate

enum Stripe_CheckoutSessionStatusProperty {
  complete
  expired
  open
}

enum Stripe_CheckoutSessionSubmitTypeProperty {
  auto
  book
  donate
  pay
}

union Stripe_CheckoutSessionSubscriptionProperty = WrappedString | Stripe_Subscription

type Stripe_PaymentPagesCheckoutSessionTaxIdCollection {
  """Indicates whether tax ID collection is enabled for the session"""
  enabled: Boolean
}

type Stripe_PaymentPagesCheckoutSessionTotalDetails {
  """This is the sum of all the discounts."""
  amount_discount: Int

  """This is the sum of all the shipping amounts."""
  amount_shipping: Int

  """This is the sum of all the tax amounts."""
  amount_tax: Int
  breakdown: Stripe_PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown
}

type Stripe_PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown {
  """The aggregated discounts."""
  discounts: [Stripe_LineItemsDiscountAmount]

  """The aggregated tax amounts by rate."""
  taxes: [Stripe_LineItemsTaxAmount]
}

input CreateMyCheckoutSession_StripePropertiesLineItemsItemsPropertyInput {
  price: String
  quantity: Int
}

type UpdateProfileResult {
  clientMutationId: String
  result: Profile
}

"""update Profile input"""
input UpdateProfileInput {
  _id: ID!

  """"""
  id: String

  """"""
  name: String

  """"""
  email: String

  """"""
  bio: String
  avatar: TSRelationshipInput

  """"""
  shopifyCustomerId: String

  """"""
  stripeCustomerId: String

  """"""
  orders: [Stripe_InvoiceInput]
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

input TSRelationshipInput {
  shapeId: String
  shapeName: String
  contentTypeId: String
  id: String!
}

input Stripe_InvoiceInput {
  """
  The country of the business associated with this invoice, most often the business creating the invoice.
  """
  account_country: String

  """
  The public name of the business associated with this invoice, most often the business creating the invoice.
  """
  account_name: String

  """
  The account tax IDs associated with the invoice. Only editable when the invoice is a draft.
  """
  account_tax_ids: [TaxIdWrappedStringInputUnion]

  """
  Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`.
  """
  amount_due: Int

  """The amount, in %s, that was paid."""
  amount_paid: Int

  """The amount remaining, in %s, that is due."""
  amount_remaining: Int

  """
  The fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid.
  """
  application_fee_amount: Int

  """
  Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.
  """
  attempt_count: Int

  """
  Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users.
  """
  attempted: Boolean

  """
  Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action.
  """
  auto_advance: Boolean
  automatic_tax: Stripe_AutomaticTaxInput

  """
  Indicates the reason why the invoice was created. `subscription_cycle` indicates an invoice created by a subscription advancing into a new period. `subscription_create` indicates an invoice created due to creating a subscription. `subscription_update` indicates an invoice created due to updating a subscription. `subscription` is set for all old invoices to indicate either a change to a subscription or a period advancement. `manual` is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The `upcoming` value is reserved for simulated invoices per the upcoming invoice endpoint. `subscription_threshold` indicates an invoice created due to a billing threshold being reached.
  """
  billing_reason: UpdateProfileResultBillingReason
  charge: ChargeWrappedStringInputUnion

  """
  Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.
  """
  collection_method: UpdateProfileResultCollectionMethod

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """Custom fields displayed on the invoice."""
  custom_fields: [Stripe_InvoiceSettingCustomFieldInput]
  customer: String
  customer_address: Stripe_AddressInput

  """
  The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated.
  """
  customer_email: String

  """
  The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated.
  """
  customer_name: String

  """
  The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated.
  """
  customer_phone: String
  customer_shipping: Stripe_ShippingInput

  """
  The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated.
  """
  customer_tax_exempt: UpdateProfileResultCustomerTaxExempt

  """
  The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated.
  """
  customer_tax_ids: [Stripe_InvoicesResourceInvoiceTaxIdInput]
  default_payment_method: PaymentMethodWrappedStringInputUnion
  default_source: AlipayAccountBankAccountBitcoinReceiverCardSourceWrappedStringInputUnion

  """The tax rates applied to this invoice, if any."""
  default_tax_rates: [Stripe_TaxRateInput]

  """
  An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.
  """
  description: String
  discount: Stripe_DiscountInput
  discounts: [String]

  """
  The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`.
  """
  due_date: Int

  """
  Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null.
  """
  ending_balance: Int

  """Footer displayed on the invoice."""
  footer: String

  """
  The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null.
  """
  hosted_invoice_url: String

  """Unique identifier for the object."""
  id: String

  """
  The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null.
  """
  invoice_pdf: String
  last_finalization_error: Stripe_ApiErrorsInput

  """
  The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.
  """
  lines: UpdateProfilePropertiesPropertiesOrdersItemsPropertiesLinesPropertyInput

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`.
  """
  next_payment_attempt: Int

  """
  A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified.
  """
  number: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  on_behalf_of: AccountWrappedStringInputUnion

  """
  Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.
  """
  paid: Boolean

  """
  Returns true if the invoice was manually marked paid, returns false if the invoice hasn't been paid yet or was paid on Stripe.
  """
  paid_out_of_band: Boolean
  payment_intent: PaymentIntentWrappedStringInputUnion
  payment_settings: Stripe_InvoicesPaymentSettingsInput

  """
  End of the usage period during which invoice items were added to this invoice.
  """
  period_end: Int

  """
  Start of the usage period during which invoice items were added to this invoice.
  """
  period_start: Int

  """Total amount of all post-payment credit notes issued for this invoice."""
  post_payment_credit_notes_amount: Int

  """Total amount of all pre-payment credit notes issued for this invoice."""
  pre_payment_credit_notes_amount: Int
  quote: QuoteWrappedStringInputUnion

  """
  This is the transaction number that appears on email receipts sent for this invoice.
  """
  receipt_number: String

  """
  Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance.
  """
  starting_balance: Int

  """
  Extra information about an invoice for the customer's credit card statement.
  """
  statement_descriptor: String

  """
  The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
  """
  status: UpdateProfileResultStatus
  status_transitions: Stripe_InvoicesStatusTransitionsInput
  subscription: SubscriptionWrappedStringInputUnion

  """
  Only set for upcoming invoices that preview prorations. The time used to calculate prorations.
  """
  subscription_proration_date: Int

  """
  Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated
  """
  subtotal: Int

  """
  The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice.
  """
  tax: Int
  test_clock: TestHelpersTestClockWrappedStringInputUnion
  threshold_reason: Stripe_InvoiceThresholdReasonInput

  """Total after discounts and taxes."""
  total: Int

  """The aggregate amounts calculated per discount across all line items."""
  total_discount_amounts: [Stripe_DiscountsResourceDiscountAmountInput]

  """The aggregate amounts calculated per tax rate for all line items."""
  total_tax_amounts: [Stripe_InvoiceTaxAmountInput]
  transfer_data: Stripe_InvoiceTransferDataInput

  """
  Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created.
  """
  webhooks_delivered_at: Int
}

input TaxIdWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  taxId: Stripe_TaxIdInput
}

input WrappedStringInput {
  value: String!
}

input Stripe_TaxIdInput {
  """Two-letter ISO code representing the country of the tax ID."""
  country: String

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  customer: CustomerWrappedStringInputUnion

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject

  """
  Type of the tax ID, one of `ae_trn`, `au_abn`, `au_arn`, `bg_uic`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `es_cif`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `th_vat`, `tw_vat`, `ua_vat`, `us_ein`, or `za_vat`. Note that some legacy tax IDs have type `unknown`
  """
  type: UpdateProfileResultType

  """Value of the tax ID."""
  value: String
  verification: Stripe_TaxIdVerificationInput
}

input CustomerWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  customer: Stripe_CustomerInput
}

input Stripe_CustomerInput {
  address: Stripe_AddressInput

  """
  Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized.
  """
  balance: Int

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes.
  """
  currency: String
  default_source: AlipayAccountBankAccountBitcoinReceiverCardSourceWrappedStringInputUnion

  """
  When the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed. When the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.
  
  If an invoice is marked uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't get reset to `false`.
  """
  delinquent: Boolean

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  discount: Stripe_DiscountInput

  """The customer's email address."""
  email: String

  """Unique identifier for the object."""
  id: String

  """The prefix for the customer used to generate unique invoice numbers."""
  invoice_prefix: String
  invoice_settings: Stripe_InvoiceSettingCustomerSettingInput

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """The customer's full name or business name."""
  name: String

  """The suffix of the customer's next invoice number, e.g., 0001."""
  next_invoice_sequence: Int

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject

  """The customer's phone number."""
  phone: String

  """The customer's preferred locales (languages), ordered by preference."""
  preferred_locales: [String]
  shipping: Stripe_ShippingInput

  """The customer's payment sources, if any."""
  sources: PropertiesCustomerPropertiesSourcesPropertyInput

  """The customer's current subscriptions, if any."""
  subscriptions: PropertiesCustomerPropertiesSubscriptionsPropertyInput
  tax: Stripe_CustomerTaxInput

  """
  Describes the customer's tax exemption status. One of `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the text **"Reverse charge"**.
  """
  tax_exempt: UpdateProfileResultTaxExempt

  """The customer's tax IDs."""
  tax_ids: PropertiesCustomerPropertiesTaxIdsPropertyInput
  test_clock: TestHelpersTestClockWrappedStringInputUnion
}

input Stripe_AddressInput {
  """City, district, suburb, town, or village."""
  city: String

  """
  Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  """
  country: String

  """Address line 1 (e.g., street, PO Box, or company name)."""
  line1: String

  """Address line 2 (e.g., apartment, suite, unit, or building)."""
  line2: String

  """ZIP or postal code."""
  postal_code: String

  """State, county, province, or region."""
  state: String
}

input AlipayAccountBankAccountBitcoinReceiverCardSourceWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  alipayAccount: Stripe_AlipayAccountInput
  bankAccount: Stripe_BankAccountInput
  bitcoinReceiver: Stripe_BitcoinReceiverInput
  card: Stripe_CardInput
  source: Stripe_SourceInput
}

input Stripe_AlipayAccountInput {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  customer: String

  """
  Uniquely identifies the account and will be the same across all Alipay account objects that are linked to the same Alipay account.
  """
  fingerprint: String

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject

  """
  If the Alipay account object is not reusable, the exact amount that you can create a charge for.
  """
  payment_amount: Int

  """
  If the Alipay account object is not reusable, the exact currency that you can create a charge for.
  """
  payment_currency: String

  """
  True if you can create multiple payments using this account. If the account is reusable, then you can freely choose the amount of each payment.
  """
  reusable: Boolean

  """Whether this Alipay account object has ever been used for a payment."""
  used: Boolean

  """The username for the Alipay account."""
  username: String
}

enum UpdateProfileResultObject {
  invoice
}

input Stripe_BankAccountInput {
  account: AccountWrappedStringInputUnion

  """The name of the person or business that owns the bank account."""
  account_holder_name: String

  """
  The type of entity that holds the account. This can be either `individual` or `company`.
  """
  account_holder_type: String

  """
  The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.
  """
  account_type: String

  """
  A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout.
  """
  available_payout_methods: [UpdateProfileResultAvailablePayoutMethods]

  """
  Name of the bank associated with the routing number (e.g., `WELLS FARGO`).
  """
  bank_name: String

  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String

  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
  """
  currency: String
  customer: String

  """
  Whether this bank account is the default external account for its currency.
  """
  default_for_currency: Boolean

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Unique identifier for the object."""
  id: String

  """The last four digits of the bank account number."""
  last4: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject

  """The routing transit number for the bank account."""
  routing_number: String

  """
  For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isnâ€™t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a transfer sent to this bank account fails, we'll set the status to `errored` and will not continue to send transfers until the bank details are updated.
  
  For external accounts, possible values are `new` and `errored`. Validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
  """
  status: String
}

input AccountWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  account: Stripe_AccountInput
}

input Stripe_AccountInput {
  business_profile: Stripe_AccountBusinessProfileInput

  """The business type."""
  business_type: UpdateProfileResultBusinessType
  capabilities: Stripe_AccountCapabilitiesInput

  """Whether the account can create live charges."""
  charges_enabled: Boolean
  company: Stripe_LegalEntityCompanyInput
  controller: Stripe_AccountUnificationAccountControllerInput

  """The account's country."""
  country: String

  """
  Time at which the account was connected. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts).
  """
  default_currency: String

  """
  Whether account details have been submitted. Standard accounts cannot receive payouts before this is true.
  """
  details_submitted: Boolean

  """
  An email address associated with the account. You can treat this as metadata: it is not used for authentication or messaging account holders.
  """
  email: String

  """
  External accounts (bank accounts and debit cards) currently attached to this account
  """
  external_accounts: PropertiesAccountPropertiesExternalAccountsPropertyInput
  future_requirements: Stripe_AccountFutureRequirementsInput

  """Unique identifier for the object."""
  id: String
  individual: Stripe_PersonInput

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject

  """Whether Stripe can send payouts to this account."""
  payouts_enabled: Boolean
  requirements: Stripe_AccountRequirementsInput
  settings: Stripe_AccountSettingsInput
  tos_acceptance: Stripe_AccountTosAcceptanceInput

  """The Stripe account type. Can be `standard`, `express`, or `custom`."""
  type: UpdateProfileResultType
}

input Stripe_AccountBusinessProfileInput {
  """
  [The merchant category code for the account](https://stripe.com/docs/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide.
  """
  mcc: String

  """The customer-facing business name."""
  name: String

  """
  Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes.
  """
  product_description: String
  support_address: Stripe_AddressInput

  """A publicly available email address for sending support issues to."""
  support_email: String

  """A publicly available phone number to call with support issues."""
  support_phone: String

  """A publicly available website for handling support issues."""
  support_url: String

  """The business's publicly available website."""
  url: String
}

enum UpdateProfileResultBusinessType {
  company
  government_entity
  individual
  non_profit
}

input Stripe_AccountCapabilitiesInput {
  """
  The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges.
  """
  acss_debit_payments: UpdateProfileResultAcssDebitPayments

  """
  The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges.
  """
  afterpay_clearpay_payments: UpdateProfileResultAfterpayClearpayPayments

  """
  The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.
  """
  au_becs_debit_payments: UpdateProfileResultAuBecsDebitPayments

  """
  The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges.
  """
  bacs_debit_payments: UpdateProfileResultBacsDebitPayments

  """
  The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges.
  """
  bancontact_payments: UpdateProfileResultBancontactPayments

  """
  The status of the customer_balance payments capability of the account, or whether the account can directly process customer_balance charges.
  """
  bank_transfer_payments: UpdateProfileResultBankTransferPayments

  """
  The status of the boleto payments capability of the account, or whether the account can directly process boleto charges.
  """
  boleto_payments: UpdateProfileResultBoletoPayments

  """
  The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
  """
  card_issuing: UpdateProfileResultCardIssuing

  """
  The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
  """
  card_payments: UpdateProfileResultCardPayments

  """
  The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency.
  """
  cartes_bancaires_payments: UpdateProfileResultCartesBancairesPayments

  """
  The status of the EPS payments capability of the account, or whether the account can directly process EPS charges.
  """
  eps_payments: UpdateProfileResultEpsPayments

  """
  The status of the FPX payments capability of the account, or whether the account can directly process FPX charges.
  """
  fpx_payments: UpdateProfileResultFpxPayments

  """
  The status of the giropay payments capability of the account, or whether the account can directly process giropay charges.
  """
  giropay_payments: UpdateProfileResultGiropayPayments

  """
  The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges.
  """
  grabpay_payments: UpdateProfileResultGrabpayPayments

  """
  The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges.
  """
  ideal_payments: UpdateProfileResultIdealPayments

  """
  The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.
  """
  jcb_payments: UpdateProfileResultJcbPayments

  """
  The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges.
  """
  klarna_payments: UpdateProfileResultKlarnaPayments

  """
  The status of the konbini payments capability of the account, or whether the account can directly process konbini charges.
  """
  konbini_payments: UpdateProfileResultKonbiniPayments

  """The status of the legacy payments capability of the account."""
  legacy_payments: UpdateProfileResultLegacyPayments

  """
  The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges.
  """
  oxxo_payments: UpdateProfileResultOxxoPayments

  """
  The status of the P24 payments capability of the account, or whether the account can directly process P24 charges.
  """
  p24_payments: UpdateProfileResultP24Payments

  """
  The status of the paynow payments capability of the account, or whether the account can directly process paynow charges.
  """
  paynow_payments: UpdateProfileResultPaynowPayments

  """
  The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges.
  """
  sepa_debit_payments: UpdateProfileResultSepaDebitPayments

  """
  The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges.
  """
  sofort_payments: UpdateProfileResultSofortPayments

  """The status of the tax reporting 1099-K (US) capability of the account."""
  tax_reporting_us_1099_k: UpdateProfileResultTaxReportingUs1099K

  """
  The status of the tax reporting 1099-MISC (US) capability of the account.
  """
  tax_reporting_us_1099_misc: UpdateProfileResultTaxReportingUs1099Misc

  """
  The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
  """
  transfers: UpdateProfileResultTransfers

  """
  The status of the US bank account ACH payments capability of the account, or whether the account can directly process US bank account charges.
  """
  us_bank_account_ach_payments: UpdateProfileResultUsBankAccountAchPayments
}

enum UpdateProfileResultAcssDebitPayments {
  active
  inactive
  pending
}

enum UpdateProfileResultAfterpayClearpayPayments {
  active
  inactive
  pending
}

enum UpdateProfileResultAuBecsDebitPayments {
  active
  inactive
  pending
}

enum UpdateProfileResultBacsDebitPayments {
  active
  inactive
  pending
}

enum UpdateProfileResultBancontactPayments {
  active
  inactive
  pending
}

enum UpdateProfileResultBankTransferPayments {
  active
  inactive
  pending
}

enum UpdateProfileResultBoletoPayments {
  active
  inactive
  pending
}

enum UpdateProfileResultCardIssuing {
  active
  inactive
  pending
}

enum UpdateProfileResultCardPayments {
  active
  inactive
  pending
}

enum UpdateProfileResultCartesBancairesPayments {
  active
  inactive
  pending
}

enum UpdateProfileResultEpsPayments {
  active
  inactive
  pending
}

enum UpdateProfileResultFpxPayments {
  active
  inactive
  pending
}

enum UpdateProfileResultGiropayPayments {
  active
  inactive
  pending
}

enum UpdateProfileResultGrabpayPayments {
  active
  inactive
  pending
}

enum UpdateProfileResultIdealPayments {
  active
  inactive
  pending
}

enum UpdateProfileResultJcbPayments {
  active
  inactive
  pending
}

enum UpdateProfileResultKlarnaPayments {
  active
  inactive
  pending
}

enum UpdateProfileResultKonbiniPayments {
  active
  inactive
  pending
}

enum UpdateProfileResultLegacyPayments {
  active
  inactive
  pending
}

enum UpdateProfileResultOxxoPayments {
  active
  inactive
  pending
}

enum UpdateProfileResultP24Payments {
  active
  inactive
  pending
}

enum UpdateProfileResultPaynowPayments {
  active
  inactive
  pending
}

enum UpdateProfileResultSepaDebitPayments {
  active
  inactive
  pending
}

enum UpdateProfileResultSofortPayments {
  active
  inactive
  pending
}

enum UpdateProfileResultTaxReportingUs1099K {
  active
  inactive
  pending
}

enum UpdateProfileResultTaxReportingUs1099Misc {
  active
  inactive
  pending
}

enum UpdateProfileResultTransfers {
  active
  inactive
  pending
}

enum UpdateProfileResultUsBankAccountAchPayments {
  active
  inactive
  pending
}

input Stripe_LegalEntityCompanyInput {
  address: Stripe_AddressInput
  address_kana: Stripe_LegalEntityJapanAddressInput
  address_kanji: Stripe_LegalEntityJapanAddressInput

  """
  Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided).
  """
  directors_provided: Boolean

  """
  Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided.
  """
  executives_provided: Boolean

  """The company's legal name."""
  name: String

  """The Kana variation of the company's legal name (Japan only)."""
  name_kana: String

  """The Kanji variation of the company's legal name (Japan only)."""
  name_kanji: String

  """
  Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together).
  """
  owners_provided: Boolean
  ownership_declaration: Stripe_LegalEntityUboDeclarationInput

  """The company's phone number (used for verification)."""
  phone: String

  """
  The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details.
  """
  structure: UpdateProfileResultStructure

  """Whether the company's business ID number was provided."""
  tax_id_provided: Boolean

  """
  The jurisdiction in which the `tax_id` is registered (Germany-based companies only).
  """
  tax_id_registrar: String

  """Whether the company's business VAT number was provided."""
  vat_id_provided: Boolean
  verification: Stripe_LegalEntityCompanyVerificationInput
}

input Stripe_LegalEntityJapanAddressInput {
  """City/Ward."""
  city: String

  """
  Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  """
  country: String

  """Block/Building number."""
  line1: String

  """Building details."""
  line2: String

  """ZIP or postal code."""
  postal_code: String

  """Prefecture."""
  state: String

  """Town/cho-me."""
  town: String
}

input Stripe_LegalEntityUboDeclarationInput {
  """
  The Unix timestamp marking when the beneficial owner attestation was made.
  """
  date: Int

  """The IP address from which the beneficial owner attestation was made."""
  ip: String

  """
  The user-agent string from the browser where the beneficial owner attestation was made.
  """
  user_agent: String
}

enum UpdateProfileResultStructure {
  free_zone_establishment
  free_zone_llc
  government_instrumentality
  governmental_unit
  incorporated_non_profit
  limited_liability_partnership
  llc
  multi_member_llc
  private_company
  private_corporation
  private_partnership
  public_company
  public_corporation
  public_partnership
  single_member_llc
  sole_establishment
  sole_proprietorship
  tax_exempt_government_instrumentality
  unincorporated_association
  unincorporated_non_profit
}

input Stripe_LegalEntityCompanyVerificationInput {
  document: Stripe_LegalEntityCompanyVerificationDocumentInput
}

input Stripe_LegalEntityCompanyVerificationDocumentInput {
  back: FileWrappedStringInputUnion

  """
  A user-displayable string describing the verification state of this document.
  """
  details: String

  """
  One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document.
  """
  details_code: String
  front: FileWrappedStringInputUnion
}

input FileWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  file: Stripe_FileInput
}

input Stripe_FileInput {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  The time at which the file expires and is no longer available in epoch seconds.
  """
  expires_at: Int

  """A filename for the file, suitable for saving to a filesystem."""
  filename: String

  """Unique identifier for the object."""
  id: String

  """
  A list of [file links](https://stripe.com/docs/api#file_links) that point at this file.
  """
  links: PropertiesFilePropertiesLinksPropertyInput

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject

  """
  The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.
  """
  purpose: UpdateProfileResultPurpose

  """The size in bytes of the file object."""
  size: Int

  """A user friendly title for the document."""
  title: String

  """The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`)."""
  type: String

  """
  The URL from which the file can be downloaded using your live secret API key.
  """
  url: String
}

"""
A list of [file links](https://stripe.com/docs/api#file_links) that point at this file.
"""
input PropertiesFilePropertiesLinksPropertyInput {
  """Details about each object."""
  data: [Stripe_FileLinkInput!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: UpdateProfileResultObject!

  """The URL where this list can be accessed."""
  url: String!
}

input Stripe_FileLinkInput {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """Whether this link is already expired."""
  expired: Boolean

  """Time at which the link expires."""
  expires_at: Int
  file: FileWrappedStringInputUnion

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject

  """The publicly accessible URL to download the file."""
  url: String
}

enum UpdateProfileResultPurpose {
  account_requirement
  additional_verification
  business_icon
  business_logo
  customer_signature
  dispute_evidence
  document_provider_identity_document
  finance_report_run
  identity_document
  identity_document_downloadable
  pci_document
  selfie
  sigma_scheduled_query
  tax_document_user_upload
}

input Stripe_AccountUnificationAccountControllerInput {
  """
  `true` if the Connect application retrieving the resource controls the account and can therefore exercise [platform controls](https://stripe.com/docs/connect/platform-controls-for-standard-accounts). Otherwise, this field is null.
  """
  is_controller: Boolean

  """
  The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself.
  """
  type: UpdateProfileResultType
}

enum UpdateProfileResultType {
  ae_trn
  au_abn
  au_arn
  bg_uic
  br_cnpj
  br_cpf
  ca_bn
  ca_gst_hst
  ca_pst_bc
  ca_pst_mb
  ca_pst_sk
  ca_qst
  ch_vat
  cl_tin
  es_cif
  eu_vat
  gb_vat
  ge_vat
  hk_br
  hu_tin
  id_npwp
  il_vat
  in_gst
  is_vat
  jp_cn
  jp_rn
  kr_brn
  li_uid
  mx_rfc
  my_frp
  my_itn
  my_sst
  no_vat
  nz_gst
  ru_inn
  ru_kpp
  sa_vat
  sg_gst
  sg_uen
  si_tin
  th_vat
  tw_vat
  ua_vat
  unknown
  us_ein
  za_vat
}

"""
External accounts (bank accounts and debit cards) currently attached to this account
"""
input PropertiesAccountPropertiesExternalAccountsPropertyInput {
  """
  The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards.
  """
  data: [BankAccountCardInputUnion!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: UpdateProfileResultObject!

  """The URL where this list can be accessed."""
  url: String!
}

input BankAccountCardInputUnion {
  bankAccount: Stripe_BankAccountInput
  card: Stripe_CardInput
}

input Stripe_CardInput {
  account: AccountWrappedStringInputUnion

  """City/District/Suburb/Town/Village."""
  address_city: String

  """Billing address country, if provided when creating card."""
  address_country: String

  """Address line 1 (Street address/PO Box/Company name)."""
  address_line1: String

  """
  If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_line1_check: String

  """Address line 2 (Apartment/Suite/Unit/Building)."""
  address_line2: String

  """State/County/Province/Region."""
  address_state: String

  """ZIP or postal code."""
  address_zip: String

  """
  If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_zip_check: String

  """
  A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout.
  """
  available_payout_methods: [UpdateProfileResultAvailablePayoutMethods]

  """
  Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.
  """
  brand: String

  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String

  """
  Three-letter [ISO code for currency](https://stripe.com/docs/payouts). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency.
  """
  currency: String
  customer: String

  """
  If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge).
  """
  cvc_check: String

  """Whether this card is the default external account for its currency."""
  default_for_currency: Boolean

  """
  (For tokenized numbers only.) The last four digits of the device account number.
  """
  dynamic_last4: String

  """Two-digit number representing the card's expiration month."""
  exp_month: Int

  """Four-digit number representing the card's expiration year."""
  exp_year: Int

  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  
  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
  """
  fingerprint: String

  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String

  """Unique identifier for the object."""
  id: String

  """The last four digits of the card."""
  last4: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """Cardholder name."""
  name: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  recipient: RecipientWrappedStringInputUnion

  """
  For external accounts, possible values are `new` and `errored`. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
  """
  status: String

  """
  If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null.
  """
  tokenization_method: String
}

enum UpdateProfileResultAvailablePayoutMethods {
  instant
  standard
}

input RecipientWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  recipient: Stripe_RecipientInput
}

input Stripe_RecipientInput {
  active_account: Stripe_BankAccountInput

  """"""
  cards: PropertiesRecipientPropertiesCardsPropertyInput

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  default_card: CardWrappedStringInputUnion

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  email: String

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject
  migrated_to: AccountWrappedStringInputUnion

  """Full, legal name of the recipient."""
  name: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  rolled_back_from: AccountWrappedStringInputUnion

  """Type of the recipient, one of `individual` or `corporation`."""
  type: String
}

""""""
input PropertiesRecipientPropertiesCardsPropertyInput {
  data: [Stripe_CardInput!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: UpdateProfileResultObject!

  """The URL where this list can be accessed."""
  url: String!
}

input CardWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  card: Stripe_CardInput
}

input Stripe_AccountFutureRequirementsInput {
  """
  Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
  """
  alternatives: [Stripe_AccountRequirementsAlternativeInput]

  """
  Date on which `future_requirements` merges with the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on its enablement state prior to transitioning.
  """
  current_deadline: Int

  """
  Fields that need to be collected to keep the account enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash.
  """
  currently_due: [String]

  """
  This is typed as a string for consistency with `requirements.disabled_reason`, but it safe to assume `future_requirements.disabled_reason` is empty because fields in `future_requirements` will never disable the account.
  """
  disabled_reason: String

  """
  Fields that are `currently_due` and need to be collected again because validation or verification failed.
  """
  errors: [Stripe_AccountRequirementsErrorInput]

  """
  Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well.
  """
  eventually_due: [String]

  """
  Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`.
  """
  past_due: [String]

  """
  Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`.
  """
  pending_verification: [String]
}

input Stripe_AccountRequirementsAlternativeInput {
  """
  Fields that can be provided to satisfy all fields in `original_fields_due`.
  """
  alternative_fields_due: [String]

  """
  Fields that are due and can be satisfied by providing all fields in `alternative_fields_due`.
  """
  original_fields_due: [String]
}

input Stripe_AccountRequirementsErrorInput {
  """The code for the type of error."""
  code: UpdateProfileResultCode

  """
  An informative message that indicates the error type and provides additional details about the error.
  """
  reason: String

  """
  The specific user onboarding requirement field (in the requirements hash) that needs to be resolved.
  """
  requirement: String
}

enum UpdateProfileResultCode {
  invalid_address_city_state_postal_code
  invalid_street_address
  invalid_value_other
  verification_document_address_mismatch
  verification_document_address_missing
  verification_document_corrupt
  verification_document_country_not_supported
  verification_document_dob_mismatch
  verification_document_duplicate_type
  verification_document_expired
  verification_document_failed_copy
  verification_document_failed_greyscale
  verification_document_failed_other
  verification_document_failed_test_mode
  verification_document_fraudulent
  verification_document_id_number_mismatch
  verification_document_id_number_missing
  verification_document_incomplete
  verification_document_invalid
  verification_document_issue_or_expiry_date_missing
  verification_document_manipulated
  verification_document_missing_back
  verification_document_missing_front
  verification_document_name_mismatch
  verification_document_name_missing
  verification_document_nationality_mismatch
  verification_document_not_readable
  verification_document_not_signed
  verification_document_not_uploaded
  verification_document_photo_mismatch
  verification_document_too_large
  verification_document_type_not_supported
  verification_failed_address_match
  verification_failed_business_iec_number
  verification_failed_document_match
  verification_failed_id_number_match
  verification_failed_keyed_identity
  verification_failed_keyed_match
  verification_failed_name_match
  verification_failed_other
  verification_failed_tax_id_match
  verification_failed_tax_id_not_issued
  verification_missing_executives
  verification_missing_owners
  verification_requires_additional_memorandum_of_associations
}

input Stripe_PersonInput {
  """The account the person is associated with."""
  account: String
  address: Stripe_AddressInput
  address_kana: Stripe_LegalEntityJapanAddressInput
  address_kanji: Stripe_LegalEntityJapanAddressInput

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  dob: Stripe_LegalEntityDobInput

  """The person's email address."""
  email: String

  """The person's first name."""
  first_name: String

  """The Kana variation of the person's first name (Japan only)."""
  first_name_kana: String

  """The Kanji variation of the person's first name (Japan only)."""
  first_name_kanji: String

  """A list of alternate names or aliases that the person is known by."""
  full_name_aliases: [String]
  future_requirements: Stripe_PersonFutureRequirementsInput

  """
  The person's gender (International regulations require either "male" or "female").
  """
  gender: String

  """Unique identifier for the object."""
  id: String

  """Whether the person's `id_number` was provided."""
  id_number_provided: Boolean

  """The person's last name."""
  last_name: String

  """The Kana variation of the person's last name (Japan only)."""
  last_name_kana: String

  """The Kanji variation of the person's last name (Japan only)."""
  last_name_kanji: String

  """The person's maiden name."""
  maiden_name: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """The country where the person is a national."""
  nationality: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject

  """The person's phone number."""
  phone: String

  """
  Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction.
  """
  political_exposure: UpdateProfileResultPoliticalExposure
  relationship: Stripe_PersonRelationshipInput
  requirements: Stripe_PersonRequirementsInput

  """
  Whether the last four digits of the person's Social Security number have been provided (U.S. only).
  """
  ssn_last_4_provided: Boolean
  verification: Stripe_LegalEntityPersonVerificationInput
}

input Stripe_LegalEntityDobInput {
  """The day of birth, between 1 and 31."""
  day: Int

  """The month of birth, between 1 and 12."""
  month: Int

  """The four-digit year of birth."""
  year: Int
}

input Stripe_PersonFutureRequirementsInput {
  """
  Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
  """
  alternatives: [Stripe_AccountRequirementsAlternativeInput]

  """
  Fields that need to be collected to keep the person's account enabled. If not collected by the account's `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash, and may immediately become `past_due`, but the account may also be given a grace period depending on the account's enablement state prior to transition.
  """
  currently_due: [String]

  """
  Fields that are `currently_due` and need to be collected again because validation or verification failed.
  """
  errors: [Stripe_AccountRequirementsErrorInput]

  """
  Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `future_requirements[current_deadline]` becomes set.
  """
  eventually_due: [String]

  """
  Fields that weren't collected by the account's `requirements.current_deadline`. These fields need to be collected to enable the person's account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`.
  """
  past_due: [String]

  """
  Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`.
  """
  pending_verification: [String]
}

enum UpdateProfileResultPoliticalExposure {
  existing
  none
}

input Stripe_PersonRelationshipInput {
  """
  Whether the person is a director of the account's legal entity. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations.
  """
  director: Boolean

  """
  Whether the person has significant responsibility to control, manage, or direct the organization.
  """
  executive: Boolean

  """Whether the person is an owner of the accountâ€™s legal entity."""
  owner: Boolean

  """The percent owned by the person of the account's legal entity."""
  percent_ownership: Float

  """
  Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account.
  """
  representative: Boolean

  """The person's title (e.g., CEO, Support Engineer)."""
  title: String
}

input Stripe_PersonRequirementsInput {
  """
  Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
  """
  alternatives: [Stripe_AccountRequirementsAlternativeInput]

  """
  Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
  """
  currently_due: [String]

  """
  Fields that are `currently_due` and need to be collected again because validation or verification failed.
  """
  errors: [Stripe_AccountRequirementsErrorInput]

  """
  Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `current_deadline` becomes set.
  """
  eventually_due: [String]

  """
  Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable the person's account.
  """
  past_due: [String]

  """
  Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`.
  """
  pending_verification: [String]
}

input Stripe_LegalEntityPersonVerificationInput {
  additional_document: Stripe_LegalEntityPersonVerificationDocumentInput

  """
  A user-displayable string describing the verification state for the person. For example, this may say "Provided identity information could not be verified".
  """
  details: String

  """
  One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person.
  """
  details_code: String
  document: Stripe_LegalEntityPersonVerificationDocumentInput

  """
  The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`.
  """
  status: String
}

input Stripe_LegalEntityPersonVerificationDocumentInput {
  back: FileWrappedStringInputUnion

  """
  A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read".
  """
  details: String

  """
  One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document.
  """
  details_code: String
  front: FileWrappedStringInputUnion
}

input Stripe_AccountRequirementsInput {
  """
  Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
  """
  alternatives: [Stripe_AccountRequirementsAlternativeInput]

  """
  Date by which the fields in `currently_due` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected.
  """
  current_deadline: Int

  """
  Fields that need to be collected to keep the account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
  """
  currently_due: [String]

  """
  If the account is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`.
  """
  disabled_reason: String

  """
  Fields that are `currently_due` and need to be collected again because validation or verification failed.
  """
  errors: [Stripe_AccountRequirementsErrorInput]

  """
  Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set.
  """
  eventually_due: [String]

  """
  Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the account.
  """
  past_due: [String]

  """
  Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`.
  """
  pending_verification: [String]
}

input Stripe_AccountSettingsInput {
  bacs_debit_payments: Stripe_AccountBacsDebitPaymentsSettingsInput
  branding: Stripe_AccountBrandingSettingsInput
  card_issuing: Stripe_AccountCardIssuingSettingsInput
  card_payments: Stripe_AccountCardPaymentsSettingsInput
  dashboard: Stripe_AccountDashboardSettingsInput
  payments: Stripe_AccountPaymentsSettingsInput
  payouts: Stripe_AccountPayoutSettingsInput
  sepa_debit_payments: Stripe_AccountSepaDebitPaymentsSettingsInput
}

input Stripe_AccountBacsDebitPaymentsSettingsInput {
  """
  The Bacs Direct Debit Display Name for this account. For payments made with Bacs Direct Debit, this will appear on the mandate, and as the statement descriptor.
  """
  display_name: String
}

input Stripe_AccountBrandingSettingsInput {
  icon: FileWrappedStringInputUnion
  logo: FileWrappedStringInputUnion

  """
  A CSS hex color value representing the primary branding color for this account
  """
  primary_color: String

  """
  A CSS hex color value representing the secondary branding color for this account
  """
  secondary_color: String
}

input Stripe_AccountCardIssuingSettingsInput {
  tos_acceptance: Stripe_CardIssuingAccountTermsOfServiceInput
}

input Stripe_CardIssuingAccountTermsOfServiceInput {
  """
  The Unix timestamp marking when the account representative accepted the service agreement.
  """
  date: Int

  """
  The IP address from which the account representative accepted the service agreement.
  """
  ip: String

  """
  The user agent of the browser from which the account representative accepted the service agreement.
  """
  user_agent: String
}

input Stripe_AccountCardPaymentsSettingsInput {
  decline_on: Stripe_AccountDeclineChargeOnInput

  """
  The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion.
  """
  statement_descriptor_prefix: String
}

input Stripe_AccountDeclineChargeOnInput {
  """
  Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification.
  """
  avs_failure: Boolean

  """
  Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification.
  """
  cvc_failure: Boolean
}

input Stripe_AccountDashboardSettingsInput {
  """
  The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts.
  """
  display_name: String

  """
  The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones).
  """
  timezone: String
}

input Stripe_AccountPaymentsSettingsInput {
  """
  The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge.
  """
  statement_descriptor: String

  """
  The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only)
  """
  statement_descriptor_kana: String

  """
  The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only)
  """
  statement_descriptor_kanji: String
}

input Stripe_AccountPayoutSettingsInput {
  """
  A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See our [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances) documentation for details. Default value is `false` for Custom accounts, otherwise `true`.
  """
  debit_negative_balances: Boolean
  schedule: Stripe_TransferScheduleInput

  """
  The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard.
  """
  statement_descriptor: String
}

input Stripe_TransferScheduleInput {
  """
  The number of days charges for the account will be held before being paid out.
  """
  delay_days: Int

  """
  How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`.
  """
  interval: String

  """
  The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months.
  """
  monthly_anchor: Int

  """
  The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly.
  """
  weekly_anchor: String
}

input Stripe_AccountSepaDebitPaymentsSettingsInput {
  """
  SEPA creditor identifier that identifies the company making the payment.
  """
  creditor_id: String
}

input Stripe_AccountTosAcceptanceInput {
  """
  The Unix timestamp marking when the account representative accepted their service agreement
  """
  date: Int

  """
  The IP address from which the account representative accepted their service agreement
  """
  ip: String

  """The user's service agreement type"""
  service_agreement: String

  """
  The user agent of the browser from which the account representative accepted their service agreement
  """
  user_agent: String
}

input Stripe_BitcoinReceiverInput {
  """
  True when this bitcoin receiver has received a non-zero amount of bitcoin.
  """
  active: Boolean

  """The amount of `currency` that you are collecting as payment."""
  amount: Int

  """
  The amount of `currency` to which `bitcoin_amount_received` has been converted.
  """
  amount_received: Int

  """
  The amount of bitcoin that the customer should send to fill the receiver. The `bitcoin_amount` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin.
  """
  bitcoin_amount: Int

  """
  The amount of bitcoin that has been sent by the customer to this receiver.
  """
  bitcoin_amount_received: Int

  """
  This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets).
  """
  bitcoin_uri: String

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which the bitcoin will be converted.
  """
  currency: String

  """The customer ID of the bitcoin receiver."""
  customer: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """
  The customer's email address, set by the API call that creates the receiver.
  """
  email: String

  """
  This flag is initially false and updates to true when the customer sends the `bitcoin_amount` to this receiver.
  """
  filled: Boolean

  """Unique identifier for the object."""
  id: String

  """
  A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver.
  """
  inbound_address: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject

  """
  The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key.
  """
  payment: String

  """The refund address of this bitcoin receiver."""
  refund_address: String

  """
  A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key.
  """
  transactions: PropertiesBitcoinReceiverPropertiesTransactionsPropertyInput

  """
  This receiver contains uncaptured funds that can be used for a payment or refunded.
  """
  uncaptured_funds: Boolean

  """Indicate if this source is used for payment."""
  used_for_payment: Boolean
}

"""
A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key.
"""
input PropertiesBitcoinReceiverPropertiesTransactionsPropertyInput {
  """Details about each object."""
  data: [Stripe_BitcoinTransactionInput!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: UpdateProfileResultObject!

  """The URL where this list can be accessed."""
  url: String!
}

input Stripe_BitcoinTransactionInput {
  """
  The amount of `currency` that the transaction was converted to in real-time.
  """
  amount: Int

  """The amount of bitcoin contained in the transaction."""
  bitcoin_amount: Int

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which this transaction was converted.
  """
  currency: String

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject

  """The receiver to which this transaction was sent."""
  receiver: String
}

input Stripe_SourceInput {
  ach_credit_transfer: Stripe_SourceTypeAchCreditTransferInput
  ach_debit: Stripe_SourceTypeAchDebitInput
  acss_debit: Stripe_SourceTypeAcssDebitInput
  alipay: Stripe_SourceTypeAlipayInput

  """
  A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
  """
  amount: Int
  au_becs_debit: Stripe_SourceTypeAuBecsDebitInput
  bancontact: Stripe_SourceTypeBancontactInput
  card: Stripe_SourceTypeCardInput
  card_present: Stripe_SourceTypeCardPresentInput

  """
  The client secret of the source. Used for client-side retrieval using a publishable key.
  """
  client_secret: String
  code_verification: Stripe_SourceCodeVerificationFlowInput

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.
  """
  currency: String

  """
  The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.
  """
  customer: String
  eps: Stripe_SourceTypeEpsInput

  """
  The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.
  """
  flow: String
  giropay: Stripe_SourceTypeGiropayInput

  """Unique identifier for the object."""
  id: String
  ideal: Stripe_SourceTypeIdealInput
  klarna: Stripe_SourceTypeKlarnaInput

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject
  multibanco: Stripe_SourceTypeMultibancoInput

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  owner: Stripe_SourceOwnerInput
  p24: Stripe_SourceTypeP24Input
  receiver: Stripe_SourceReceiverFlowInput
  redirect: Stripe_SourceRedirectFlowInput
  sepa_debit: Stripe_SourceTypeSepaDebitInput
  sofort: Stripe_SourceTypeSofortInput
  source_order: Stripe_SourceOrderInput

  """
  Extra information about a source. This will appear on your customer's statement every time you charge the source.
  """
  statement_descriptor: String

  """
  The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.
  """
  status: String
  three_d_secure: Stripe_SourceTypeThreeDSecureInput

  """
  The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.
  """
  type: UpdateProfileResultType

  """
  Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
  """
  usage: String
  wechat: Stripe_SourceTypeWechatInput
}

input Stripe_SourceTypeAchCreditTransferInput {
  account_number: String
  bank_name: String
  fingerprint: String
  refund_account_holder_name: String
  refund_account_holder_type: String
  refund_routing_number: String
  routing_number: String
  swift_code: String
}

input Stripe_SourceTypeAchDebitInput {
  bank_name: String
  country: String
  fingerprint: String
  last4: String
  routing_number: String
  type: String
}

input Stripe_SourceTypeAcssDebitInput {
  bank_address_city: String
  bank_address_line_1: String
  bank_address_line_2: String
  bank_address_postal_code: String
  bank_name: String
  category: String
  country: String
  fingerprint: String
  last4: String
  routing_number: String
}

input Stripe_SourceTypeAlipayInput {
  data_string: String
  native_url: String
  statement_descriptor: String
}

input Stripe_SourceTypeAuBecsDebitInput {
  bsb_number: String
  fingerprint: String
  last4: String
}

input Stripe_SourceTypeBancontactInput {
  bank_code: String
  bank_name: String
  bic: String
  iban_last4: String
  preferred_language: String
  statement_descriptor: String
}

input Stripe_SourceTypeCardInput {
  address_line1_check: String
  address_zip_check: String
  brand: String
  country: String
  cvc_check: String
  dynamic_last4: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  funding: String
  last4: String
  name: String
  three_d_secure: String
  tokenization_method: String
}

input Stripe_SourceTypeCardPresentInput {
  application_cryptogram: String
  application_preferred_name: String
  authorization_code: String
  authorization_response_code: String
  brand: String
  country: String
  cvm_type: String
  data_type: String
  dedicated_file_name: String
  emv_auth_data: String
  evidence_customer_signature: String
  evidence_transaction_certificate: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  funding: String
  last4: String
  pos_device_id: String
  pos_entry_mode: String
  read_method: String
  reader: String
  terminal_verification_results: String
  transaction_status_information: String
}

input Stripe_SourceCodeVerificationFlowInput {
  """
  The number of attempts remaining to authenticate the source object with a verification code.
  """
  attempts_remaining: Int

  """
  The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0).
  """
  status: String
}

input Stripe_SourceTypeEpsInput {
  reference: String
  statement_descriptor: String
}

input Stripe_SourceTypeGiropayInput {
  bank_code: String
  bank_name: String
  bic: String
  statement_descriptor: String
}

input Stripe_SourceTypeIdealInput {
  bank: String
  bic: String
  iban_last4: String
  statement_descriptor: String
}

input Stripe_SourceTypeKlarnaInput {
  background_image_url: String
  client_token: String
  first_name: String
  last_name: String
  locale: String
  logo_url: String
  page_title: String
  pay_later_asset_urls_descriptive: String
  pay_later_asset_urls_standard: String
  pay_later_name: String
  pay_later_redirect_url: String
  pay_now_asset_urls_descriptive: String
  pay_now_asset_urls_standard: String
  pay_now_name: String
  pay_now_redirect_url: String
  pay_over_time_asset_urls_descriptive: String
  pay_over_time_asset_urls_standard: String
  pay_over_time_name: String
  pay_over_time_redirect_url: String
  payment_method_categories: String
  purchase_country: String
  purchase_type: String
  redirect_url: String
  shipping_delay: Int
  shipping_first_name: String
  shipping_last_name: String
}

input Stripe_SourceTypeMultibancoInput {
  entity: String
  reference: String
  refund_account_holder_address_city: String
  refund_account_holder_address_country: String
  refund_account_holder_address_line1: String
  refund_account_holder_address_line2: String
  refund_account_holder_address_postal_code: String
  refund_account_holder_address_state: String
  refund_account_holder_name: String
  refund_iban: String
}

input Stripe_SourceOwnerInput {
  address: Stripe_AddressInput

  """Owner's email address."""
  email: String

  """Owner's full name."""
  name: String

  """Owner's phone number (including extension)."""
  phone: String
  verified_address: Stripe_AddressInput

  """
  Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_email: String

  """
  Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String

  """
  Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_phone: String
}

input Stripe_SourceTypeP24Input {
  reference: String
}

input Stripe_SourceReceiverFlowInput {
  """
  The address of the receiver source. This is the value that should be communicated to the customer to send their funds to.
  """
  address: String

  """
  The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency.
  """
  amount_charged: Int

  """
  The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency.
  """
  amount_received: Int

  """
  The total amount that was returned to the customer. The amount returned is expressed in the source's currency.
  """
  amount_returned: Int

  """Type of refund attribute method, one of `email`, `manual`, or `none`."""
  refund_attributes_method: String

  """
  Type of refund attribute status, one of `missing`, `requested`, or `available`.
  """
  refund_attributes_status: String
}

input Stripe_SourceRedirectFlowInput {
  """
  The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`.
  """
  failure_reason: String

  """
  The URL you provide to redirect the customer to after they authenticated their payment.
  """
  return_url: String

  """
  The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused).
  """
  status: String

  """
  The URL provided to you to redirect a customer to as part of a `redirect` authentication flow.
  """
  url: String
}

input Stripe_SourceTypeSepaDebitInput {
  bank_code: String
  branch_code: String
  country: String
  fingerprint: String
  last4: String
  mandate_reference: String
  mandate_url: String
}

input Stripe_SourceTypeSofortInput {
  bank_code: String
  bank_name: String
  bic: String
  country: String
  iban_last4: String
  preferred_language: String
  statement_descriptor: String
}

input Stripe_SourceOrderInput {
  """
  A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order.
  """
  amount: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """The email address of the customer placing the order."""
  email: String

  """List of items constituting the order."""
  items: [Stripe_SourceOrderItemInput]
  shipping: Stripe_ShippingInput
}

input Stripe_SourceOrderItemInput {
  """The amount (price) for this order item."""
  amount: Int

  """This currency of this order item. Required when `amount` is present."""
  currency: String

  """Human-readable description for this order item."""
  description: String

  """
  The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU).
  """
  parent: String

  """
  The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered.
  """
  quantity: Int

  """The type of this order item. Must be `sku`, `tax`, or `shipping`."""
  type: String
}

input Stripe_ShippingInput {
  address: Stripe_AddressInput

  """
  The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.
  """
  carrier: String

  """Recipient name."""
  name: String

  """Recipient phone (including extension)."""
  phone: String

  """
  The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
  """
  tracking_number: String
}

input Stripe_SourceTypeThreeDSecureInput {
  address_line1_check: String
  address_zip_check: String
  authenticated: Boolean
  brand: String
  card: String
  country: String
  customer: String
  cvc_check: String
  dynamic_last4: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  funding: String
  last4: String
  name: String
  three_d_secure: String
  tokenization_method: String
}

input Stripe_SourceTypeWechatInput {
  prepay_id: String
  qr_code_url: String
  statement_descriptor: String
}

input Stripe_DiscountInput {
  """
  The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode.
  """
  checkout_session: String
  coupon: Stripe_CouponInput
  customer: String

  """
  If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null.
  """
  end: Int

  """
  The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array.
  """
  id: String

  """
  The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice.
  """
  invoice: String

  """
  The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item.
  """
  invoice_item: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  promotion_code: PromotionCodeWrappedStringInputUnion

  """Date that the coupon was applied."""
  start: Int

  """
  The subscription that this coupon is applied to, if it is applied to a particular subscription.
  """
  subscription: String
}

input Stripe_CouponInput {
  """
  Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
  """
  amount_off: Int
  applies_to: Stripe_CouponAppliesToInput

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off.
  """
  currency: String

  """
  One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.
  """
  duration: UpdateProfileResultDuration

  """
  If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`.
  """
  duration_in_months: Int

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
  """
  max_redemptions: Int

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  Name of the coupon displayed to customers on for instance invoices or receipts.
  """
  name: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject

  """
  Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a %s100 invoice %s50 instead.
  """
  percent_off: Float

  """Date after which the coupon can no longer be redeemed."""
  redeem_by: Int

  """Number of times this coupon has been applied to a customer."""
  times_redeemed: Int

  """
  Taking account of the above properties, whether this coupon can still be applied to a customer.
  """
  valid: Boolean
}

input Stripe_CouponAppliesToInput {
  """A list of product IDs this coupon applies to"""
  products: [String]
}

enum UpdateProfileResultDuration {
  forever
  once
  repeating
}

input PromotionCodeWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  promotionCode: Stripe_PromotionCodeInput
}

input Stripe_PromotionCodeInput {
  """
  Whether the promotion code is currently active. A promotion code is only active if the coupon is also valid.
  """
  active: Boolean

  """
  The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer.
  """
  code: String
  coupon: Stripe_CouponInput

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  customer: CustomerDeletedCustomerWrappedStringInputUnion

  """Date at which the promotion code can no longer be redeemed."""
  expires_at: Int

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """Maximum number of times this promotion code can be redeemed."""
  max_redemptions: Int

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  restrictions: Stripe_PromotionCodesResourceRestrictionsInput

  """Number of times this promotion code has been used."""
  times_redeemed: Int
}

input CustomerDeletedCustomerWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  customer: Stripe_CustomerInput
  deletedCustomer: Stripe_DeletedCustomerInput
}

input Stripe_DeletedCustomerInput {
  """Always true for a deleted object"""
  deleted: Boolean

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
}

input Stripe_PromotionCodesResourceRestrictionsInput {
  """
  A Boolean indicating if the Promotion Code should only be redeemed for Customers without any successful payments or invoices
  """
  first_time_transaction: Boolean

  """
  Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work).
  """
  minimum_amount: Int

  """
  Three-letter [ISO code](https://stripe.com/docs/currencies) for minimum_amount
  """
  minimum_amount_currency: String
}

input Stripe_InvoiceSettingCustomerSettingInput {
  """Default custom fields to be displayed on invoices for this customer."""
  custom_fields: [Stripe_InvoiceSettingCustomFieldInput]
  default_payment_method: PaymentMethodWrappedStringInputUnion

  """Default footer to be displayed on invoices for this customer."""
  footer: String
}

input Stripe_InvoiceSettingCustomFieldInput {
  """The name of the custom field."""
  name: String

  """The value of the custom field."""
  value: String
}

input PaymentMethodWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  paymentMethod: Stripe_PaymentMethodInput
}

input Stripe_PaymentMethodInput {
  acss_debit: Stripe_PaymentMethodAcssDebitInput
  afterpay_clearpay: Stripe_PaymentMethodAfterpayClearpayInput
  alipay: Stripe_PaymentFlowsPrivatePaymentMethodsAlipayInput
  au_becs_debit: Stripe_PaymentMethodAuBecsDebitInput
  bacs_debit: Stripe_PaymentMethodBacsDebitInput
  bancontact: Stripe_PaymentMethodBancontactInput
  billing_details: Stripe_BillingDetailsInput
  boleto: Stripe_PaymentMethodBoletoInput
  card: Stripe_PaymentMethodCardInput
  card_present: Stripe_PaymentMethodCardPresentInput

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  customer: CustomerWrappedStringInputUnion
  customer_balance: Stripe_PaymentMethodCustomerBalanceInput
  eps: Stripe_PaymentMethodEpsInput
  fpx: Stripe_PaymentMethodFpxInput
  giropay: Stripe_PaymentMethodGiropayInput
  grabpay: Stripe_PaymentMethodGrabpayInput

  """Unique identifier for the object."""
  id: String
  ideal: Stripe_PaymentMethodIdealInput
  interac_present: Stripe_PaymentMethodInteracPresentInput
  klarna: Stripe_PaymentMethodKlarnaInput
  konbini: Stripe_PaymentMethodKonbiniInput

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  oxxo: Stripe_PaymentMethodOxxoInput
  p24: Stripe_PaymentMethodP24Input
  paynow: Stripe_PaymentMethodPaynowInput
  sepa_debit: Stripe_PaymentMethodSepaDebitInput
  sofort: Stripe_PaymentMethodSofortInput

  """
  The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
  """
  type: UpdateProfileResultType
  us_bank_account: Stripe_PaymentMethodUsBankAccountInput
  wechat_pay: Stripe_PaymentMethodWechatPayInput
}

input Stripe_PaymentMethodAcssDebitInput {
  """Name of the bank associated with the bank account."""
  bank_name: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Institution number of the bank account."""
  institution_number: String

  """Last four digits of the bank account number."""
  last4: String

  """Transit number of the bank account."""
  transit_number: String
}

input Stripe_PaymentMethodAfterpayClearpayInput {
  result: JSONObject
}

input Stripe_PaymentFlowsPrivatePaymentMethodsAlipayInput {
  result: JSONObject
}

input Stripe_PaymentMethodAuBecsDebitInput {
  """
  Six-digit number identifying bank and branch associated with this bank account.
  """
  bsb_number: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Last four digits of the bank account number."""
  last4: String
}

input Stripe_PaymentMethodBacsDebitInput {
  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Last four digits of the bank account number."""
  last4: String

  """Sort code of the bank account. (e.g., `10-20-30`)"""
  sort_code: String
}

input Stripe_PaymentMethodBancontactInput {
  result: JSONObject
}

input Stripe_BillingDetailsInput {
  address: Stripe_AddressInput

  """Email address."""
  email: String

  """Full name."""
  name: String

  """Billing phone number (including extension)."""
  phone: String
}

input Stripe_PaymentMethodBoletoInput {
  """Uniquely identifies the customer tax id (CNPJ or CPF)"""
  tax_id: String
}

input Stripe_PaymentMethodCardInput {
  """
  Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  brand: String
  checks: Stripe_PaymentMethodCardChecksInput

  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String

  """Two-digit number representing the card's expiration month."""
  exp_month: Int

  """Four-digit number representing the card's expiration year."""
  exp_year: Int

  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  
  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
  """
  fingerprint: String

  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String
  generated_from: Stripe_PaymentMethodCardGeneratedCardInput

  """The last four digits of the card."""
  last4: String
  networks: Stripe_NetworksInput
  three_d_secure_usage: Stripe_ThreeDSecureUsageInput
  wallet: Stripe_PaymentMethodCardWalletInput
}

input Stripe_PaymentMethodCardChecksInput {
  """
  If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_line1_check: String

  """
  If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_postal_code_check: String

  """
  If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  cvc_check: String
}

input Stripe_PaymentMethodCardGeneratedCardInput {
  """The charge that created this object."""
  charge: String
  payment_method_details: Stripe_CardGeneratedFromPaymentMethodDetailsInput
  setup_attempt: SetupAttemptWrappedStringInputUnion
}

input Stripe_CardGeneratedFromPaymentMethodDetailsInput {
  card_present: Stripe_PaymentMethodDetailsCardPresentInput

  """
  The type of payment method transaction-specific details from the transaction that generated this `card` payment method. Always `card_present`.
  """
  type: String
}

input Stripe_PaymentMethodDetailsCardPresentInput {
  """The authorized amount"""
  amount_authorized: Int

  """
  Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  brand: String

  """
  When using manual capture, a future timestamp after which the charge will be automatically refunded if uncaptured.
  """
  capture_before: Int

  """
  The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
  """
  cardholder_name: String

  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String

  """Authorization response cryptogram."""
  emv_auth_data: String

  """Two-digit number representing the card's expiration month."""
  exp_month: Int

  """Four-digit number representing the card's expiration year."""
  exp_year: Int

  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  
  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
  """
  fingerprint: String

  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String

  """
  ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
  """
  generated_card: String

  """
  Whether this [PaymentIntent](https://stripe.com/docs/api/payment_intents) is eligible for incremental authorizations. Request support using [request_incremental_authorization_support](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-payment_method_options-card_present-request_incremental_authorization_support).
  """
  incremental_authorization_supported: Boolean

  """The last four digits of the card."""
  last4: String

  """
  Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  network: String

  """Defines whether the authorized amount can be over-captured or not"""
  overcapture_supported: Boolean

  """How card details were read in this transaction."""
  read_method: UpdateProfileResultReadMethod
  receipt: Stripe_PaymentMethodDetailsCardPresentReceiptInput
}

enum UpdateProfileResultReadMethod {
  contact_emv
  contactless_emv
  contactless_magstripe_mode
  magnetic_stripe_fallback
  magnetic_stripe_track2
}

input Stripe_PaymentMethodDetailsCardPresentReceiptInput {
  """The type of account being debited or credited"""
  account_type: UpdateProfileResultAccountType

  """EMV tag 9F26, cryptogram generated by the integrated circuit chip."""
  application_cryptogram: String

  """Mnenomic of the Application Identifier."""
  application_preferred_name: String

  """Identifier for this transaction."""
  authorization_code: String

  """EMV tag 8A. A code returned by the card issuer."""
  authorization_response_code: String

  """How the cardholder verified ownership of the card."""
  cardholder_verification_method: String

  """
  EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.
  """
  dedicated_file_name: String

  """The outcome of a series of EMV functions performed by the card reader."""
  terminal_verification_results: String

  """
  An indication of various EMV functions performed during the transaction.
  """
  transaction_status_information: String
}

enum UpdateProfileResultAccountType {
  checking
  credit
  prepaid
  unknown
}

input SetupAttemptWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  setupAttempt: Stripe_SetupAttemptInput
}

input Stripe_SetupAttemptInput {
  application: ApplicationWrappedStringInputUnion

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  customer: CustomerDeletedCustomerWrappedStringInputUnion

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  on_behalf_of: AccountWrappedStringInputUnion
  payment_method: PaymentMethodWrappedStringInputUnion
  payment_method_details: Stripe_SetupAttemptPaymentMethodDetailsInput
  setup_error: Stripe_ApiErrorsInput
  setup_intent: SetupIntentWrappedStringInputUnion

  """
  Status of this SetupAttempt, one of `requires_confirmation`, `requires_action`, `processing`, `succeeded`, `failed`, or `abandoned`.
  """
  status: String

  """
  The value of [usage](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-usage) on the SetupIntent at the time of this confirmation, one of `off_session` or `on_session`.
  """
  usage: String
}

input ApplicationWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  application: Stripe_ApplicationInput
}

input Stripe_ApplicationInput {
  """Unique identifier for the object."""
  id: String

  """The name of the application."""
  name: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
}

input Stripe_SetupAttemptPaymentMethodDetailsInput {
  acss_debit: Stripe_SetupAttemptPaymentMethodDetailsAcssDebitInput
  au_becs_debit: Stripe_SetupAttemptPaymentMethodDetailsAuBecsDebitInput
  bacs_debit: Stripe_SetupAttemptPaymentMethodDetailsBacsDebitInput
  bancontact: Stripe_SetupAttemptPaymentMethodDetailsBancontactInput
  boleto: Stripe_SetupAttemptPaymentMethodDetailsBoletoInput
  card: Stripe_SetupAttemptPaymentMethodDetailsCardInput
  card_present: Stripe_SetupAttemptPaymentMethodDetailsCardPresentInput
  ideal: Stripe_SetupAttemptPaymentMethodDetailsIdealInput
  sepa_debit: Stripe_SetupAttemptPaymentMethodDetailsSepaDebitInput
  sofort: Stripe_SetupAttemptPaymentMethodDetailsSofortInput

  """
  The type of the payment method used in the SetupIntent (e.g., `card`). An additional hash is included on `payment_method_details` with a name matching this value. It contains confirmation-specific information for the payment method.
  """
  type: String
  us_bank_account: Stripe_SetupAttemptPaymentMethodDetailsUsBankAccountInput
}

input Stripe_SetupAttemptPaymentMethodDetailsAcssDebitInput {
  result: JSONObject
}

input Stripe_SetupAttemptPaymentMethodDetailsAuBecsDebitInput {
  result: JSONObject
}

input Stripe_SetupAttemptPaymentMethodDetailsBacsDebitInput {
  result: JSONObject
}

input Stripe_SetupAttemptPaymentMethodDetailsBancontactInput {
  """Bank code of bank associated with the bank account."""
  bank_code: String

  """Name of the bank associated with the bank account."""
  bank_name: String

  """Bank Identifier Code of the bank associated with the bank account."""
  bic: String
  generated_sepa_debit: PaymentMethodWrappedStringInputUnion
  generated_sepa_debit_mandate: MandateWrappedStringInputUnion

  """Last four characters of the IBAN."""
  iban_last4: String

  """
  Preferred language of the Bancontact authorization page that the customer is redirected to.
  Can be one of `en`, `de`, `fr`, or `nl`
  """
  preferred_language: UpdateProfileResultPreferredLanguage

  """
  Owner's verified full name. Values are verified or provided by Bancontact directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

input MandateWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  mandate: Stripe_MandateInput
}

input Stripe_MandateInput {
  customer_acceptance: Stripe_CustomerAcceptanceInput

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean
  multi_use: Stripe_MandateMultiUseInput

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  payment_method: PaymentMethodWrappedStringInputUnion
  payment_method_details: Stripe_MandatePaymentMethodDetailsInput
  single_use: Stripe_MandateSingleUseInput

  """
  The status of the mandate, which indicates whether it can be used to initiate a payment.
  """
  status: UpdateProfileResultStatus

  """The type of the mandate."""
  type: UpdateProfileResultType
}

input Stripe_CustomerAcceptanceInput {
  """The time at which the customer accepted the Mandate."""
  accepted_at: Int
  offline: Stripe_OfflineAcceptanceInput
  online: Stripe_OnlineAcceptanceInput

  """
  The type of customer acceptance information included with the Mandate. One of `online` or `offline`.
  """
  type: UpdateProfileResultType
}

input Stripe_OfflineAcceptanceInput {
  result: JSONObject
}

input Stripe_OnlineAcceptanceInput {
  """The IP address from which the Mandate was accepted by the customer."""
  ip_address: String

  """
  The user agent of the browser from which the Mandate was accepted by the customer.
  """
  user_agent: String
}

input Stripe_MandateMultiUseInput {
  result: JSONObject
}

input Stripe_MandatePaymentMethodDetailsInput {
  acss_debit: Stripe_MandateAcssDebitInput
  au_becs_debit: Stripe_MandateAuBecsDebitInput
  bacs_debit: Stripe_MandateBacsDebitInput
  card: Stripe_CardMandatePaymentMethodDetailsInput
  sepa_debit: Stripe_MandateSepaDebitInput

  """
  The type of the payment method associated with this mandate. An additional hash is included on `payment_method_details` with a name matching this value. It contains mandate information specific to the payment method.
  """
  type: String
  us_bank_account: Stripe_MandateUsBankAccountInput
}

input Stripe_MandateAcssDebitInput {
  """
  List of Stripe products where this mandate can be selected automatically.
  """
  default_for: [UpdateProfileResultDefaultFor]

  """
  Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
  """
  interval_description: String

  """Payment schedule for the mandate."""
  payment_schedule: UpdateProfileResultPaymentSchedule

  """Transaction type of the mandate."""
  transaction_type: UpdateProfileResultTransactionType
}

enum UpdateProfileResultDefaultFor {
  invoice
  subscription
}

enum UpdateProfileResultPaymentSchedule {
  combined
  interval
  sporadic
}

enum UpdateProfileResultTransactionType {
  business
  personal
}

input Stripe_MandateAuBecsDebitInput {
  """
  The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively.
  """
  url: String
}

input Stripe_MandateBacsDebitInput {
  """
  The status of the mandate on the Bacs network. Can be one of `pending`, `revoked`, `refused`, or `accepted`.
  """
  network_status: UpdateProfileResultNetworkStatus

  """The unique reference identifying the mandate on the Bacs network."""
  reference: String

  """The URL that will contain the mandate that the customer has signed."""
  url: String
}

enum UpdateProfileResultNetworkStatus {
  accepted
  pending
  refused
  revoked
}

input Stripe_CardMandatePaymentMethodDetailsInput {
  result: JSONObject
}

input Stripe_MandateSepaDebitInput {
  """The unique reference of the mandate."""
  reference: String

  """
  The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively.
  """
  url: String
}

input Stripe_MandateUsBankAccountInput {
  result: JSONObject
}

input Stripe_MandateSingleUseInput {
  """On a single use mandate, the amount of the payment."""
  amount: Int

  """On a single use mandate, the currency of the payment."""
  currency: String
}

enum UpdateProfileResultStatus {
  deleted
  draft
  open
  paid
  uncollectible
  void
}

enum UpdateProfileResultPreferredLanguage {
  de
  en
  fr
  nl
}

input Stripe_SetupAttemptPaymentMethodDetailsBoletoInput {
  result: JSONObject
}

input Stripe_SetupAttemptPaymentMethodDetailsCardInput {
  three_d_secure: Stripe_ThreeDSecureDetailsInput
}

input Stripe_ThreeDSecureDetailsInput {
  """
  For authenticated transactions: how the customer was authenticated by
  the issuing bank.
  """
  authentication_flow: UpdateProfileResultAuthenticationFlow

  """Indicates the outcome of 3D Secure authentication."""
  result: UpdateProfileResultResult

  """
  Additional information about why 3D Secure succeeded or failed based
  on the `result`.
  """
  result_reason: UpdateProfileResultResultReason

  """The version of 3D Secure that was used."""
  version: UpdateProfileResultVersion
}

enum UpdateProfileResultAuthenticationFlow {
  challenge
  frictionless
}

enum UpdateProfileResultResult {
  attempt_acknowledged
  authenticated
  failed
  not_supported
  processing_error
}

enum UpdateProfileResultResultReason {
  abandoned
  bypassed
  canceled
  card_not_enrolled
  network_not_supported
  protocol_error
  rejected
}

enum UpdateProfileResultVersion {
  ONEDOT0DOT2
  TWODOT1DOT0
  TWODOT2DOT0
}

input Stripe_SetupAttemptPaymentMethodDetailsCardPresentInput {
  generated_card: PaymentMethodWrappedStringInputUnion
}

input Stripe_SetupAttemptPaymentMethodDetailsIdealInput {
  """
  The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
  """
  bank: UpdateProfileResultBank

  """The Bank Identifier Code of the customer's bank."""
  bic: UpdateProfileResultBic
  generated_sepa_debit: PaymentMethodWrappedStringInputUnion
  generated_sepa_debit_mandate: MandateWrappedStringInputUnion

  """Last four characters of the IBAN."""
  iban_last4: String

  """
  Owner's verified full name. Values are verified or provided by iDEAL directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

enum UpdateProfileResultBank {
  abn_amro
  asn_bank
  bunq
  handelsbanken
  ing
  knab
  moneyou
  rabobank
  regiobank
  revolut
  sns_bank
  triodos_bank
  van_lanschot
}

enum UpdateProfileResultBic {
  ABNANL2A
  ASNBNL21
  BUNQNL2A
  FVLBNL22
  HANDNL2A
  INGBNL2A
  KNABNL2H
  MOYONL21
  RABONL2U
  RBRBNL21
  REVOLT21
  SNSBNL2A
  TRIONL2U
}

input Stripe_SetupAttemptPaymentMethodDetailsSepaDebitInput {
  result: JSONObject
}

input Stripe_SetupAttemptPaymentMethodDetailsSofortInput {
  """Bank code of bank associated with the bank account."""
  bank_code: String

  """Name of the bank associated with the bank account."""
  bank_name: String

  """Bank Identifier Code of the bank associated with the bank account."""
  bic: String
  generated_sepa_debit: PaymentMethodWrappedStringInputUnion
  generated_sepa_debit_mandate: MandateWrappedStringInputUnion

  """Last four characters of the IBAN."""
  iban_last4: String

  """
  Preferred language of the Sofort authorization page that the customer is redirected to.
  Can be one of `en`, `de`, `fr`, or `nl`
  """
  preferred_language: UpdateProfileResultPreferredLanguage

  """
  Owner's verified full name. Values are verified or provided by Sofort directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

input Stripe_SetupAttemptPaymentMethodDetailsUsBankAccountInput {
  result: JSONObject
}

input Stripe_ApiErrorsInput {
  """For card errors, the ID of the failed charge."""
  charge: String

  """
  For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported.
  """
  code: String

  """
  For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one.
  """
  decline_code: String

  """
  A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported.
  """
  doc_url: String

  """
  A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.
  """
  message: String

  """
  If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.
  """
  param: String
  payment_intent: Stripe_PaymentIntentInput
  payment_method: Stripe_PaymentMethodInput

  """
  If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors.
  """
  payment_method_type: String
  setup_intent: Stripe_SetupIntentInput
  source: BankAccountCardSourceInputUnion

  """
  The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`
  """
  type: UpdateProfileResultType
}

input Stripe_PaymentIntentInput {
  """
  Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  """
  amount: Int

  """Amount that can be captured from this PaymentIntent."""
  amount_capturable: Int
  amount_details: Stripe_PaymentFlowsAmountDetailsInput

  """Amount that was collected by this PaymentIntent."""
  amount_received: Int
  application: ApplicationWrappedStringInputUnion

  """
  The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  """
  application_fee_amount: Int
  automatic_payment_methods: Stripe_PaymentFlowsAutomaticPaymentMethodsPaymentIntentInput

  """
  Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.
  """
  canceled_at: Int

  """
  Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`).
  """
  cancellation_reason: UpdateProfileResultCancellationReason

  """Controls when the funds will be captured from the customer's account."""
  capture_method: UpdateProfileResultCaptureMethod

  """Charges that were created by this PaymentIntent, if any."""
  charges: UpdateProfilePropertiesPropertiesOrdersItemsPropertiesLastFinalizationErrorPropertiesPaymentIntentPropertiesChargesPropertyInput

  """
  The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key. 
  
  The client secret can be used to complete a payment from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
  
  Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?ui=elements) and learn about how `client_secret` should be handled.
  """
  client_secret: String
  confirmation_method: UpdateProfileResultConfirmationMethod

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  customer: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """Unique identifier for the object."""
  id: String
  invoice: InvoiceWrappedStringInputUnion
  last_payment_error: Stripe_ApiErrorsInput

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. For more information, see the [documentation](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata).
  """
  metadata: JSONObject
  next_action: Stripe_PaymentIntentNextActionInput

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  on_behalf_of: AccountWrappedStringInputUnion
  payment_method: PaymentMethodWrappedStringInputUnion
  payment_method_options: Stripe_PaymentIntentPaymentMethodOptionsInput

  """
  The list of payment method types (e.g. card) that this PaymentIntent is allowed to use.
  """
  payment_method_types: [String]
  processing: Stripe_PaymentIntentProcessingInput

  """
  Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
  """
  receipt_email: String
  review: ReviewWrappedStringInputUnion

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage
  shipping: Stripe_ShippingInput

  """
  For non-card charges, you can use this value as the complete description that appears on your customersâ€™ statements. Must contain at least one letter, maximum 22 characters.
  """
  statement_descriptor: String

  """
  Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor thatâ€™s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
  """
  statement_descriptor_suffix: String

  """
  Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  """
  status: UpdateProfileResultStatus
  transfer_data: Stripe_TransferDataInput

  """
  A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
  """
  transfer_group: String
  invoiceItems: [Stripe_InvoiceitemInput]

  """The Stripe checkout session associated with this payment."""
  sessionItems: [Stripe_ItemInput]
  _shapeId: String
  _id: ID
}

input Stripe_PaymentFlowsAmountDetailsInput {
  tip: Stripe_PaymentFlowsAmountDetailsResourceTipInput
}

input Stripe_PaymentFlowsAmountDetailsResourceTipInput {
  """Portion of the amount that corresponds to a tip."""
  amount: Int
}

input Stripe_PaymentFlowsAutomaticPaymentMethodsPaymentIntentInput {
  """Automatically calculates compatible payment methods"""
  enabled: Boolean
}

enum UpdateProfileResultCancellationReason {
  abandoned
  automatic
  duplicate
  failed_invoice
  fraudulent
  requested_by_customer
  void_invoice
}

enum UpdateProfileResultCaptureMethod {
  automatic
  manual
}

"""Charges that were created by this PaymentIntent, if any."""
input UpdateProfilePropertiesPropertiesOrdersItemsPropertiesLastFinalizationErrorPropertiesPaymentIntentPropertiesChargesPropertyInput {
  """
  This list only contains the latest charge, even if there were previously multiple unsuccessful charges. To view all previous charges for a PaymentIntent, you can filter the charges list using the `payment_intent` [parameter](https://stripe.com/docs/api/charges/list#list_charges-payment_intent).
  """
  data: [Stripe_ChargeInput!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: UpdateProfileResultObject!

  """The URL where this list can be accessed."""
  url: String!
}

input Stripe_ChargeInput {
  """
  Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  """
  amount: Int

  """
  Amount in %s captured (can be less than the amount attribute on the charge if a partial capture was made).
  """
  amount_captured: Int

  """
  Amount in %s refunded (can be less than the amount attribute on the charge if a partial refund was issued).
  """
  amount_refunded: Int
  application: ApplicationWrappedStringInputUnion
  application_fee: ApplicationFeeWrappedStringInputUnion

  """
  The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details.
  """
  application_fee_amount: Int
  balance_transaction: BalanceTransactionWrappedStringInputUnion
  billing_details: Stripe_BillingDetailsInput

  """
  The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined.
  """
  calculated_statement_descriptor: String

  """
  If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.
  """
  captured: Boolean

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  customer: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """Whether the charge has been disputed."""
  disputed: Boolean
  failure_balance_transaction: BalanceTransactionWrappedStringInputUnion

  """
  Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes).
  """
  failure_code: String

  """
  Message to user further explaining reason for charge failure if available.
  """
  failure_message: String
  fraud_details: Stripe_ChargeFraudDetailsInput

  """Unique identifier for the object."""
  id: String
  invoice: InvoiceWrappedStringInputUnion

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  on_behalf_of: AccountWrappedStringInputUnion
  order: OrderWrappedStringInputUnion
  outcome: Stripe_ChargeOutcomeInput

  """
  `true` if the charge succeeded, or was successfully authorized for later capture.
  """
  paid: Boolean
  payment_intent: PaymentIntentWrappedStringInputUnion

  """ID of the payment method used in this charge."""
  payment_method: String
  payment_method_details: Stripe_PaymentMethodDetailsInput

  """
  This is the email address that the receipt for this charge was sent to.
  """
  receipt_email: String

  """
  This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent.
  """
  receipt_number: String

  """
  This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt.
  """
  receipt_url: String

  """
  Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.
  """
  refunded: Boolean

  """A list of refunds that have been applied to the charge."""
  refunds: UpdateProfilePropertiesPropertiesOrdersItemsPropertiesLastFinalizationErrorPropertiesPaymentIntentPropertiesChargesPropertiesDataItemsPropertiesRefundsPropertyInput
  review: ReviewWrappedStringInputUnion
  shipping: Stripe_ShippingInput
  source_transfer: TransferWrappedStringInputUnion

  """
  For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customersâ€™ statements. Must contain at least one letter, maximum 22 characters.
  """
  statement_descriptor: String

  """
  Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor thatâ€™s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
  """
  statement_descriptor_suffix: String

  """
  The status of the payment is either `succeeded`, `pending`, or `failed`.
  """
  status: UpdateProfileResultStatus
  transfer: TransferWrappedStringInputUnion
  transfer_data: Stripe_ChargeTransferDataInput

  """
  A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details.
  """
  transfer_group: String
}

input ApplicationFeeWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  applicationFee: Stripe_ApplicationFeeInput
}

input Stripe_ApplicationFeeInput {
  account: AccountWrappedStringInputUnion

  """Amount earned, in %s."""
  amount: Int

  """
  Amount in %s refunded (can be less than the amount attribute on the fee if a partial refund was issued)
  """
  amount_refunded: Int
  application: ApplicationWrappedStringInputUnion
  balance_transaction: BalanceTransactionWrappedStringInputUnion
  charge: ChargeWrappedStringInputUnion

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  originating_transaction: ChargeWrappedStringInputUnion

  """
  Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false.
  """
  refunded: Boolean

  """A list of refunds that have been applied to the fee."""
  refunds: PropertiesApplicationFeePropertiesRefundsPropertyInput
}

input BalanceTransactionWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  balanceTransaction: Stripe_BalanceTransactionInput
}

input Stripe_BalanceTransactionInput {
  """Gross amount of the transaction, in %s."""
  amount: Int

  """
  The date the transaction's net funds will become available in the Stripe balance.
  """
  available_on: Int

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """
  The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the `amount` in currency A, times `exchange_rate`, would be the `amount` in currency B. For example, suppose you charged a customer 10.00 EUR. Then the PaymentIntent's `amount` would be `1000` and `currency` would be `eur`. Suppose this was converted into 12.34 USD in your Stripe account. Then the BalanceTransaction's `amount` would be `1234`, `currency` would be `usd`, and `exchange_rate` would be `1.234`.
  """
  exchange_rate: Float

  """Fees (in %s) paid for this transaction."""
  fee: Int

  """Detailed breakdown of fees (in %s) paid for this transaction."""
  fee_details: [Stripe_FeeInput]

  """Unique identifier for the object."""
  id: String

  """Net amount of the transaction, in %s."""
  net: Int

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject

  """
  [Learn more](https://stripe.com/docs/reports/reporting-categories) about how reporting categories can help you understand balance transactions from an accounting perspective.
  """
  reporting_category: String
  source: ApplicationFeeChargeConnectCollectionTransferDisputeFeeRefundIssuingAuthorizationIssuingDisputeIssuingTransactionPayoutPlatformTaxFeeRefundReserveTransactionTaxDeductedAtSourceTopupTransferTransferReversalWrappedStringInputUnion

  """
  If the transaction's net funds are available in the Stripe balance yet. Either `available` or `pending`.
  """
  status: String

  """
  Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. [Learn more](https://stripe.com/docs/reports/balance-transaction-types) about balance transaction types and what they represent. If you are looking to classify transactions for accounting purposes, you might want to consider `reporting_category` instead.
  """
  type: UpdateProfileResultType
}

input Stripe_FeeInput {
  """Amount of the fee, in cents."""
  amount: Int

  """ID of the Connect application that earned the fee."""
  application: String

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """Type of the fee, one of: `application_fee`, `stripe_fee` or `tax`."""
  type: String
}

input ApplicationFeeChargeConnectCollectionTransferDisputeFeeRefundIssuingAuthorizationIssuingDisputeIssuingTransactionPayoutPlatformTaxFeeRefundReserveTransactionTaxDeductedAtSourceTopupTransferTransferReversalWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  applicationFee: Stripe_ApplicationFeeInput
  charge: Stripe_ChargeInput
  connectCollectionTransfer: Stripe_ConnectCollectionTransferInput
  dispute: Stripe_DisputeInput
  feeRefund: Stripe_FeeRefundInput
  issuingAuthorization: Stripe_IssuingAuthorizationInput
  issuingDispute: Stripe_IssuingDisputeInput
  issuingTransaction: Stripe_IssuingTransactionInput
  payout: Stripe_PayoutInput
  platformTaxFee: Stripe_PlatformTaxFeeInput
  refund: Stripe_RefundInput
  reserveTransaction: Stripe_ReserveTransactionInput
  taxDeductedAtSource: Stripe_TaxDeductedAtSourceInput
  topup: Stripe_TopupInput
  transfer: Stripe_TransferInput
  transferReversal: Stripe_TransferReversalInput
}

input Stripe_ConnectCollectionTransferInput {
  """Amount transferred, in %s."""
  amount: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  destination: AccountWrappedStringInputUnion

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
}

input Stripe_DisputeInput {
  """
  Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed).
  """
  amount: Int

  """
  List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute.
  """
  balance_transactions: [Stripe_BalanceTransactionInput]
  charge: ChargeWrappedStringInputUnion

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  evidence: Stripe_DisputeEvidenceInput
  evidence_details: Stripe_DisputeEvidenceDetailsInput

  """Unique identifier for the object."""
  id: String

  """
  If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute.
  """
  is_charge_refundable: Boolean

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  payment_intent: PaymentIntentWrappedStringInputUnion

  """
  Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).
  """
  reason: String

  """
  Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `charge_refunded`, `won`, or `lost`.
  """
  status: UpdateProfileResultStatus
}

input ChargeWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  charge: Stripe_ChargeInput
}

input Stripe_DisputeEvidenceInput {
  """
  Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity.
  """
  access_activity_log: String

  """The billing address provided by the customer."""
  billing_address: String
  cancellation_policy: FileWrappedStringInputUnion

  """
  An explanation of how and when the customer was shown your refund policy prior to purchase.
  """
  cancellation_policy_disclosure: String

  """A justification for why the customer's subscription was not canceled."""
  cancellation_rebuttal: String
  customer_communication: FileWrappedStringInputUnion

  """The email address of the customer."""
  customer_email_address: String

  """The name of the customer."""
  customer_name: String

  """The IP address that the customer used when making the purchase."""
  customer_purchase_ip: String
  customer_signature: FileWrappedStringInputUnion
  duplicate_charge_documentation: FileWrappedStringInputUnion

  """
  An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate.
  """
  duplicate_charge_explanation: String

  """
  The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge.
  """
  duplicate_charge_id: String

  """A description of the product or service that was sold."""
  product_description: String
  receipt: FileWrappedStringInputUnion
  refund_policy: FileWrappedStringInputUnion

  """
  Documentation demonstrating that the customer was shown your refund policy prior to purchase.
  """
  refund_policy_disclosure: String

  """A justification for why the customer is not entitled to a refund."""
  refund_refusal_explanation: String

  """
  The date on which the customer received or began receiving the purchased service, in a clear human-readable format.
  """
  service_date: String
  service_documentation: FileWrappedStringInputUnion

  """
  The address to which a physical product was shipped. You should try to include as complete address information as possible.
  """
  shipping_address: String

  """
  The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas.
  """
  shipping_carrier: String

  """
  The date on which a physical product began its route to the shipping address, in a clear human-readable format.
  """
  shipping_date: String
  shipping_documentation: FileWrappedStringInputUnion

  """
  The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
  """
  shipping_tracking_number: String
  uncategorized_file: FileWrappedStringInputUnion

  """Any additional evidence or statements."""
  uncategorized_text: String
}

input Stripe_DisputeEvidenceDetailsInput {
  """
  Date by which evidence must be submitted in order to successfully challenge dispute. Will be null if the customer's bank or credit card company doesn't allow a response for this particular dispute.
  """
  due_by: Int

  """Whether evidence has been staged for this dispute."""
  has_evidence: Boolean

  """
  Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed.
  """
  past_due: Boolean

  """
  The number of times evidence has been submitted. Typically, you may only submit evidence once.
  """
  submission_count: Int
}

input PaymentIntentWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  paymentIntent: Stripe_PaymentIntentInput
}

input Stripe_FeeRefundInput {
  """Amount, in %s."""
  amount: Int
  balance_transaction: BalanceTransactionWrappedStringInputUnion

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  fee: ApplicationFeeWrappedStringInputUnion

  """Unique identifier for the object."""
  id: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
}

input Stripe_IssuingAuthorizationInput {
  """
  The total amount that was authorized or rejected. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount: Int
  amount_details: Stripe_IssuingAuthorizationAmountDetailsInput

  """Whether the authorization has been approved."""
  approved: Boolean

  """How the card details were provided."""
  authorization_method: UpdateProfileResultAuthorizationMethod

  """List of balance transactions associated with this authorization."""
  balance_transactions: [Stripe_BalanceTransactionInput]
  card: Stripe_IssuingCardInput
  cardholder: IssuingCardholderWrappedStringInputUnion

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  merchant_amount: Int

  """
  The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  merchant_currency: String
  merchant_data: Stripe_IssuingAuthorizationMerchantDataInput

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  pending_request: Stripe_IssuingAuthorizationPendingRequestInput

  """
  History of every time `pending_request` was approved/denied, either by you directly or by Stripe (e.g. based on your `spending_controls`). If the merchant changes the authorization by performing an [incremental authorization](https://stripe.com/docs/issuing/purchases/authorizations), you can look at this field to see the previous requests for the authorization.
  """
  request_history: [Stripe_IssuingAuthorizationRequestInput]

  """The current status of the authorization in its lifecycle."""
  status: UpdateProfileResultStatus

  """
  List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization.
  """
  transactions: [Stripe_IssuingTransactionInput]
  verification_data: Stripe_IssuingAuthorizationVerificationDataInput

  """
  The digital wallet used for this authorization. One of `apple_pay`, `google_pay`, or `samsung_pay`.
  """
  wallet: String
}

input Stripe_IssuingAuthorizationAmountDetailsInput {
  """The fee charged by the ATM for the cash withdrawal."""
  atm_fee: Int
}

enum UpdateProfileResultAuthorizationMethod {
  chip
  contactless
  keyed_in
  online
  swipe
}

input Stripe_IssuingCardInput {
  """The brand of the card."""
  brand: String

  """The reason why the card was canceled."""
  cancellation_reason: UpdateProfileResultCancellationReason
  cardholder: Stripe_IssuingCardholderInput

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  The card's CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint.
  """
  cvc: String

  """The expiration month of the card."""
  exp_month: Int

  """The expiration year of the card."""
  exp_year: Int

  """Unique identifier for the object."""
  id: String

  """The last 4 digits of the card number."""
  last4: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint.
  """
  number: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  replaced_by: IssuingCardWrappedStringInputUnion
  replacement_for: IssuingCardWrappedStringInputUnion

  """The reason why the previous card needed to be replaced."""
  replacement_reason: UpdateProfileResultReplacementReason
  shipping: Stripe_IssuingCardShippingInput
  spending_controls: Stripe_IssuingCardAuthorizationControlsInput

  """Whether authorizations can be approved on this card."""
  status: UpdateProfileResultStatus

  """The type of the card."""
  type: UpdateProfileResultType
  wallets: Stripe_IssuingCardWalletsInput
}

input Stripe_IssuingCardholderInput {
  billing: Stripe_IssuingCardholderAddressInput
  company: Stripe_IssuingCardholderCompanyInput

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """The cardholder's email address."""
  email: String

  """Unique identifier for the object."""
  id: String
  individual: Stripe_IssuingCardholderIndividualInput

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """The cardholder's name. This will be printed on cards issued to them."""
  name: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject

  """
  The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details.
  """
  phone_number: String
  requirements: Stripe_IssuingCardholderRequirementsInput
  spending_controls: Stripe_IssuingCardholderAuthorizationControlsInput

  """Specifies whether to permit authorizations on this cardholder's cards."""
  status: UpdateProfileResultStatus

  """One of `individual` or `company`."""
  type: UpdateProfileResultType
}

input Stripe_IssuingCardholderAddressInput {
  address: Stripe_AddressInput
}

input Stripe_IssuingCardholderCompanyInput {
  """Whether the company's business ID number was provided."""
  tax_id_provided: Boolean
}

input Stripe_IssuingCardholderIndividualInput {
  dob: Stripe_IssuingCardholderIndividualDobInput

  """The first name of this cardholder."""
  first_name: String

  """The last name of this cardholder."""
  last_name: String
  verification: Stripe_IssuingCardholderVerificationInput
}

input Stripe_IssuingCardholderIndividualDobInput {
  """The day of birth, between 1 and 31."""
  day: Int

  """The month of birth, between 1 and 12."""
  month: Int

  """The four-digit year of birth."""
  year: Int
}

input Stripe_IssuingCardholderVerificationInput {
  document: Stripe_IssuingCardholderIdDocumentInput
}

input Stripe_IssuingCardholderIdDocumentInput {
  back: FileWrappedStringInputUnion
  front: FileWrappedStringInputUnion
}

input Stripe_IssuingCardholderRequirementsInput {
  """
  If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason.
  """
  disabled_reason: UpdateProfileResultDisabledReason

  """
  Array of fields that need to be collected in order to verify and re-enable the cardholder.
  """
  past_due: [UpdateProfileResultPastDue]
}

enum UpdateProfileResultDisabledReason {
  listed
  rejectedDOTlisted
  under_review
}

enum UpdateProfileResultPastDue {
  companyDOTtax_id
  individualDOTdobDOTday
  individualDOTdobDOTmonth
  individualDOTdobDOTyear
  individualDOTfirst_name
  individualDOTlast_name
  individualDOTverificationDOTdocument
}

input Stripe_IssuingCardholderAuthorizationControlsInput {
  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`.
  """
  allowed_categories: [UpdateProfileResultAllowedCategories]

  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`.
  """
  blocked_categories: [UpdateProfileResultBlockedCategories]

  """
  Limit spending with amount-based rules that apply across this cardholder's cards.
  """
  spending_limits: [Stripe_IssuingCardholderSpendingLimitInput]

  """Currency of the amounts within `spending_limits`."""
  spending_limits_currency: String
}

enum UpdateProfileResultAllowedCategories {
  ac_refrigeration_repair
  accounting_bookkeeping_services
  advertising_services
  agricultural_cooperative
  airlines_air_carriers
  airports_flying_fields
  ambulance_services
  amusement_parks_carnivals
  antique_reproductions
  antique_shops
  aquariums
  architectural_surveying_services
  art_dealers_and_galleries
  artists_supply_and_craft_shops
  auto_and_home_supply_stores
  auto_body_repair_shops
  auto_paint_shops
  auto_service_shops
  automated_cash_disburse
  automated_fuel_dispensers
  automobile_associations
  automotive_parts_and_accessories_stores
  automotive_tire_stores
  bail_and_bond_payments
  bakeries
  bands_orchestras
  barber_and_beauty_shops
  betting_casino_gambling
  bicycle_shops
  billiard_pool_establishments
  boat_dealers
  boat_rentals_and_leases
  book_stores
  books_periodicals_and_newspapers
  bowling_alleys
  bus_lines
  business_secretarial_schools
  buying_shopping_services
  cable_satellite_and_other_pay_television_and_radio
  camera_and_photographic_supply_stores
  candy_nut_and_confectionery_stores
  car_and_truck_dealers_new_used
  car_and_truck_dealers_used_only
  car_rental_agencies
  car_washes
  carpentry_services
  carpet_upholstery_cleaning
  caterers
  charitable_and_social_service_organizations_fundraising
  chemicals_and_allied_products
  child_care_services
  childrens_and_infants_wear_stores
  chiropodists_podiatrists
  chiropractors
  cigar_stores_and_stands
  civic_social_fraternal_associations
  cleaning_and_maintenance
  clothing_rental
  colleges_universities
  commercial_equipment
  commercial_footwear
  commercial_photography_art_and_graphics
  commuter_transport_and_ferries
  computer_network_services
  computer_programming
  computer_repair
  computer_software_stores
  computers_peripherals_and_software
  concrete_work_services
  construction_materials
  consulting_public_relations
  correspondence_schools
  cosmetic_stores
  counseling_services
  country_clubs
  courier_services
  court_costs
  credit_reporting_agencies
  cruise_lines
  dairy_products_stores
  dance_hall_studios_schools
  dating_escort_services
  dentists_orthodontists
  department_stores
  detective_agencies
  digital_goods_applications
  digital_goods_games
  digital_goods_large_volume
  digital_goods_media
  direct_marketing_catalog_merchant
  direct_marketing_combination_catalog_and_retail_merchant
  direct_marketing_inbound_telemarketing
  direct_marketing_insurance_services
  direct_marketing_other
  direct_marketing_outbound_telemarketing
  direct_marketing_subscription
  direct_marketing_travel
  discount_stores
  doctors
  door_to_door_sales
  drapery_window_covering_and_upholstery_stores
  drinking_places
  drug_stores_and_pharmacies
  drugs_drug_proprietaries_and_druggist_sundries
  dry_cleaners
  durable_goods
  duty_free_stores
  eating_places_restaurants
  educational_services
  electric_razor_stores
  electrical_parts_and_equipment
  electrical_services
  electronics_repair_shops
  electronics_stores
  elementary_secondary_schools
  employment_temp_agencies
  equipment_rental
  exterminating_services
  family_clothing_stores
  fast_food_restaurants
  financial_institutions
  fines_government_administrative_entities
  fireplace_fireplace_screens_and_accessories_stores
  floor_covering_stores
  florists
  florists_supplies_nursery_stock_and_flowers
  freezer_and_locker_meat_provisioners
  fuel_dealers_non_automotive
  funeral_services_crematories
  furniture_home_furnishings_and_equipment_stores_except_appliances
  furniture_repair_refinishing
  furriers_and_fur_shops
  general_services
  gift_card_novelty_and_souvenir_shops
  glass_paint_and_wallpaper_stores
  glassware_crystal_stores
  golf_courses_public
  government_services
  grocery_stores_supermarkets
  hardware_equipment_and_supplies
  hardware_stores
  health_and_beauty_spas
  hearing_aids_sales_and_supplies
  heating_plumbing_a_c
  hobby_toy_and_game_shops
  home_supply_warehouse_stores
  hospitals
  hotels_motels_and_resorts
  household_appliance_stores
  industrial_supplies
  information_retrieval_services
  insurance_default
  insurance_underwriting_premiums
  intra_company_purchases
  jewelry_stores_watches_clocks_and_silverware_stores
  landscaping_services
  laundries
  laundry_cleaning_services
  legal_services_attorneys
  luggage_and_leather_goods_stores
  lumber_building_materials_stores
  manual_cash_disburse
  marinas_service_and_supplies
  masonry_stonework_and_plaster
  massage_parlors
  medical_and_dental_labs
  medical_dental_ophthalmic_and_hospital_equipment_and_supplies
  medical_services
  membership_organizations
  mens_and_boys_clothing_and_accessories_stores
  mens_womens_clothing_stores
  metal_service_centers
  miscellaneous
  miscellaneous_apparel_and_accessory_shops
  miscellaneous_auto_dealers
  miscellaneous_business_services
  miscellaneous_food_stores
  miscellaneous_general_merchandise
  miscellaneous_general_services
  miscellaneous_home_furnishing_specialty_stores
  miscellaneous_publishing_and_printing
  miscellaneous_recreation_services
  miscellaneous_repair_shops
  miscellaneous_specialty_retail
  mobile_home_dealers
  motion_picture_theaters
  motor_freight_carriers_and_trucking
  motor_homes_dealers
  motor_vehicle_supplies_and_new_parts
  motorcycle_shops_and_dealers
  motorcycle_shops_dealers
  music_stores_musical_instruments_pianos_and_sheet_music
  news_dealers_and_newsstands
  non_fi_money_orders
  non_fi_stored_value_card_purchase_load
  nondurable_goods
  nurseries_lawn_and_garden_supply_stores
  nursing_personal_care
  office_and_commercial_furniture
  opticians_eyeglasses
  optometrists_ophthalmologist
  orthopedic_goods_prosthetic_devices
  osteopaths
  package_stores_beer_wine_and_liquor
  paints_varnishes_and_supplies
  parking_lots_garages
  passenger_railways
  pawn_shops
  pet_shops_pet_food_and_supplies
  petroleum_and_petroleum_products
  photo_developing
  photographic_photocopy_microfilm_equipment_and_supplies
  photographic_studios
  picture_video_production
  piece_goods_notions_and_other_dry_goods
  plumbing_heating_equipment_and_supplies
  political_organizations
  postal_services_government_only
  precious_stones_and_metals_watches_and_jewelry
  professional_services
  public_warehousing_and_storage
  quick_copy_repro_and_blueprint
  railroads
  real_estate_agents_and_managers_rentals
  record_stores
  recreational_vehicle_rentals
  religious_goods_stores
  religious_organizations
  roofing_siding_sheet_metal
  secretarial_support_services
  security_brokers_dealers
  service_stations
  sewing_needlework_fabric_and_piece_goods_stores
  shoe_repair_hat_cleaning
  shoe_stores
  small_appliance_repair
  snowmobile_dealers
  special_trade_services
  specialty_cleaning
  sporting_goods_stores
  sporting_recreation_camps
  sports_and_riding_apparel_stores
  sports_clubs_fields
  stamp_and_coin_stores
  stationary_office_supplies_printing_and_writing_paper
  stationery_stores_office_and_school_supply_stores
  swimming_pools_sales
  t_ui_travel_germany
  tailors_alterations
  tax_payments_government_agencies
  tax_preparation_services
  taxicabs_limousines
  telecommunication_equipment_and_telephone_sales
  telecommunication_services
  telegraph_services
  tent_and_awning_shops
  testing_laboratories
  theatrical_ticket_agencies
  timeshares
  tire_retreading_and_repair
  tolls_bridge_fees
  tourist_attractions_and_exhibits
  towing_services
  trailer_parks_campgrounds
  transportation_services
  travel_agencies_tour_operators
  truck_stop_iteration
  truck_utility_trailer_rentals
  typesetting_plate_making_and_related_services
  typewriter_stores
  u_s_federal_government_agencies_or_departments
  uniforms_commercial_clothing
  used_merchandise_and_secondhand_stores
  utilities
  variety_stores
  veterinary_services
  video_amusement_game_supplies
  video_game_arcades
  video_tape_rental_stores
  vocational_trade_schools
  watch_jewelry_repair
  welding_repair
  wholesale_clubs
  wig_and_toupee_stores
  wires_money_orders
  womens_accessory_and_specialty_shops
  womens_ready_to_wear_stores
  wrecking_and_salvage_yards
}

enum UpdateProfileResultBlockedCategories {
  ac_refrigeration_repair
  accounting_bookkeeping_services
  advertising_services
  agricultural_cooperative
  airlines_air_carriers
  airports_flying_fields
  ambulance_services
  amusement_parks_carnivals
  antique_reproductions
  antique_shops
  aquariums
  architectural_surveying_services
  art_dealers_and_galleries
  artists_supply_and_craft_shops
  auto_and_home_supply_stores
  auto_body_repair_shops
  auto_paint_shops
  auto_service_shops
  automated_cash_disburse
  automated_fuel_dispensers
  automobile_associations
  automotive_parts_and_accessories_stores
  automotive_tire_stores
  bail_and_bond_payments
  bakeries
  bands_orchestras
  barber_and_beauty_shops
  betting_casino_gambling
  bicycle_shops
  billiard_pool_establishments
  boat_dealers
  boat_rentals_and_leases
  book_stores
  books_periodicals_and_newspapers
  bowling_alleys
  bus_lines
  business_secretarial_schools
  buying_shopping_services
  cable_satellite_and_other_pay_television_and_radio
  camera_and_photographic_supply_stores
  candy_nut_and_confectionery_stores
  car_and_truck_dealers_new_used
  car_and_truck_dealers_used_only
  car_rental_agencies
  car_washes
  carpentry_services
  carpet_upholstery_cleaning
  caterers
  charitable_and_social_service_organizations_fundraising
  chemicals_and_allied_products
  child_care_services
  childrens_and_infants_wear_stores
  chiropodists_podiatrists
  chiropractors
  cigar_stores_and_stands
  civic_social_fraternal_associations
  cleaning_and_maintenance
  clothing_rental
  colleges_universities
  commercial_equipment
  commercial_footwear
  commercial_photography_art_and_graphics
  commuter_transport_and_ferries
  computer_network_services
  computer_programming
  computer_repair
  computer_software_stores
  computers_peripherals_and_software
  concrete_work_services
  construction_materials
  consulting_public_relations
  correspondence_schools
  cosmetic_stores
  counseling_services
  country_clubs
  courier_services
  court_costs
  credit_reporting_agencies
  cruise_lines
  dairy_products_stores
  dance_hall_studios_schools
  dating_escort_services
  dentists_orthodontists
  department_stores
  detective_agencies
  digital_goods_applications
  digital_goods_games
  digital_goods_large_volume
  digital_goods_media
  direct_marketing_catalog_merchant
  direct_marketing_combination_catalog_and_retail_merchant
  direct_marketing_inbound_telemarketing
  direct_marketing_insurance_services
  direct_marketing_other
  direct_marketing_outbound_telemarketing
  direct_marketing_subscription
  direct_marketing_travel
  discount_stores
  doctors
  door_to_door_sales
  drapery_window_covering_and_upholstery_stores
  drinking_places
  drug_stores_and_pharmacies
  drugs_drug_proprietaries_and_druggist_sundries
  dry_cleaners
  durable_goods
  duty_free_stores
  eating_places_restaurants
  educational_services
  electric_razor_stores
  electrical_parts_and_equipment
  electrical_services
  electronics_repair_shops
  electronics_stores
  elementary_secondary_schools
  employment_temp_agencies
  equipment_rental
  exterminating_services
  family_clothing_stores
  fast_food_restaurants
  financial_institutions
  fines_government_administrative_entities
  fireplace_fireplace_screens_and_accessories_stores
  floor_covering_stores
  florists
  florists_supplies_nursery_stock_and_flowers
  freezer_and_locker_meat_provisioners
  fuel_dealers_non_automotive
  funeral_services_crematories
  furniture_home_furnishings_and_equipment_stores_except_appliances
  furniture_repair_refinishing
  furriers_and_fur_shops
  general_services
  gift_card_novelty_and_souvenir_shops
  glass_paint_and_wallpaper_stores
  glassware_crystal_stores
  golf_courses_public
  government_services
  grocery_stores_supermarkets
  hardware_equipment_and_supplies
  hardware_stores
  health_and_beauty_spas
  hearing_aids_sales_and_supplies
  heating_plumbing_a_c
  hobby_toy_and_game_shops
  home_supply_warehouse_stores
  hospitals
  hotels_motels_and_resorts
  household_appliance_stores
  industrial_supplies
  information_retrieval_services
  insurance_default
  insurance_underwriting_premiums
  intra_company_purchases
  jewelry_stores_watches_clocks_and_silverware_stores
  landscaping_services
  laundries
  laundry_cleaning_services
  legal_services_attorneys
  luggage_and_leather_goods_stores
  lumber_building_materials_stores
  manual_cash_disburse
  marinas_service_and_supplies
  masonry_stonework_and_plaster
  massage_parlors
  medical_and_dental_labs
  medical_dental_ophthalmic_and_hospital_equipment_and_supplies
  medical_services
  membership_organizations
  mens_and_boys_clothing_and_accessories_stores
  mens_womens_clothing_stores
  metal_service_centers
  miscellaneous
  miscellaneous_apparel_and_accessory_shops
  miscellaneous_auto_dealers
  miscellaneous_business_services
  miscellaneous_food_stores
  miscellaneous_general_merchandise
  miscellaneous_general_services
  miscellaneous_home_furnishing_specialty_stores
  miscellaneous_publishing_and_printing
  miscellaneous_recreation_services
  miscellaneous_repair_shops
  miscellaneous_specialty_retail
  mobile_home_dealers
  motion_picture_theaters
  motor_freight_carriers_and_trucking
  motor_homes_dealers
  motor_vehicle_supplies_and_new_parts
  motorcycle_shops_and_dealers
  motorcycle_shops_dealers
  music_stores_musical_instruments_pianos_and_sheet_music
  news_dealers_and_newsstands
  non_fi_money_orders
  non_fi_stored_value_card_purchase_load
  nondurable_goods
  nurseries_lawn_and_garden_supply_stores
  nursing_personal_care
  office_and_commercial_furniture
  opticians_eyeglasses
  optometrists_ophthalmologist
  orthopedic_goods_prosthetic_devices
  osteopaths
  package_stores_beer_wine_and_liquor
  paints_varnishes_and_supplies
  parking_lots_garages
  passenger_railways
  pawn_shops
  pet_shops_pet_food_and_supplies
  petroleum_and_petroleum_products
  photo_developing
  photographic_photocopy_microfilm_equipment_and_supplies
  photographic_studios
  picture_video_production
  piece_goods_notions_and_other_dry_goods
  plumbing_heating_equipment_and_supplies
  political_organizations
  postal_services_government_only
  precious_stones_and_metals_watches_and_jewelry
  professional_services
  public_warehousing_and_storage
  quick_copy_repro_and_blueprint
  railroads
  real_estate_agents_and_managers_rentals
  record_stores
  recreational_vehicle_rentals
  religious_goods_stores
  religious_organizations
  roofing_siding_sheet_metal
  secretarial_support_services
  security_brokers_dealers
  service_stations
  sewing_needlework_fabric_and_piece_goods_stores
  shoe_repair_hat_cleaning
  shoe_stores
  small_appliance_repair
  snowmobile_dealers
  special_trade_services
  specialty_cleaning
  sporting_goods_stores
  sporting_recreation_camps
  sports_and_riding_apparel_stores
  sports_clubs_fields
  stamp_and_coin_stores
  stationary_office_supplies_printing_and_writing_paper
  stationery_stores_office_and_school_supply_stores
  swimming_pools_sales
  t_ui_travel_germany
  tailors_alterations
  tax_payments_government_agencies
  tax_preparation_services
  taxicabs_limousines
  telecommunication_equipment_and_telephone_sales
  telecommunication_services
  telegraph_services
  tent_and_awning_shops
  testing_laboratories
  theatrical_ticket_agencies
  timeshares
  tire_retreading_and_repair
  tolls_bridge_fees
  tourist_attractions_and_exhibits
  towing_services
  trailer_parks_campgrounds
  transportation_services
  travel_agencies_tour_operators
  truck_stop_iteration
  truck_utility_trailer_rentals
  typesetting_plate_making_and_related_services
  typewriter_stores
  u_s_federal_government_agencies_or_departments
  uniforms_commercial_clothing
  used_merchandise_and_secondhand_stores
  utilities
  variety_stores
  veterinary_services
  video_amusement_game_supplies
  video_game_arcades
  video_tape_rental_stores
  vocational_trade_schools
  watch_jewelry_repair
  welding_repair
  wholesale_clubs
  wig_and_toupee_stores
  wires_money_orders
  womens_accessory_and_specialty_shops
  womens_ready_to_wear_stores
  wrecking_and_salvage_yards
}

input Stripe_IssuingCardholderSpendingLimitInput {
  """Maximum amount allowed to spend per interval."""
  amount: Int

  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories.
  """
  categories: [UpdateProfileResultCategories]

  """Interval (or event) to which the amount applies."""
  interval: UpdateProfileResultInterval
}

enum UpdateProfileResultCategories {
  ac_refrigeration_repair
  accounting_bookkeeping_services
  advertising_services
  agricultural_cooperative
  airlines_air_carriers
  airports_flying_fields
  ambulance_services
  amusement_parks_carnivals
  antique_reproductions
  antique_shops
  aquariums
  architectural_surveying_services
  art_dealers_and_galleries
  artists_supply_and_craft_shops
  auto_and_home_supply_stores
  auto_body_repair_shops
  auto_paint_shops
  auto_service_shops
  automated_cash_disburse
  automated_fuel_dispensers
  automobile_associations
  automotive_parts_and_accessories_stores
  automotive_tire_stores
  bail_and_bond_payments
  bakeries
  bands_orchestras
  barber_and_beauty_shops
  betting_casino_gambling
  bicycle_shops
  billiard_pool_establishments
  boat_dealers
  boat_rentals_and_leases
  book_stores
  books_periodicals_and_newspapers
  bowling_alleys
  bus_lines
  business_secretarial_schools
  buying_shopping_services
  cable_satellite_and_other_pay_television_and_radio
  camera_and_photographic_supply_stores
  candy_nut_and_confectionery_stores
  car_and_truck_dealers_new_used
  car_and_truck_dealers_used_only
  car_rental_agencies
  car_washes
  carpentry_services
  carpet_upholstery_cleaning
  caterers
  charitable_and_social_service_organizations_fundraising
  chemicals_and_allied_products
  child_care_services
  childrens_and_infants_wear_stores
  chiropodists_podiatrists
  chiropractors
  cigar_stores_and_stands
  civic_social_fraternal_associations
  cleaning_and_maintenance
  clothing_rental
  colleges_universities
  commercial_equipment
  commercial_footwear
  commercial_photography_art_and_graphics
  commuter_transport_and_ferries
  computer_network_services
  computer_programming
  computer_repair
  computer_software_stores
  computers_peripherals_and_software
  concrete_work_services
  construction_materials
  consulting_public_relations
  correspondence_schools
  cosmetic_stores
  counseling_services
  country_clubs
  courier_services
  court_costs
  credit_reporting_agencies
  cruise_lines
  dairy_products_stores
  dance_hall_studios_schools
  dating_escort_services
  dentists_orthodontists
  department_stores
  detective_agencies
  digital_goods_applications
  digital_goods_games
  digital_goods_large_volume
  digital_goods_media
  direct_marketing_catalog_merchant
  direct_marketing_combination_catalog_and_retail_merchant
  direct_marketing_inbound_telemarketing
  direct_marketing_insurance_services
  direct_marketing_other
  direct_marketing_outbound_telemarketing
  direct_marketing_subscription
  direct_marketing_travel
  discount_stores
  doctors
  door_to_door_sales
  drapery_window_covering_and_upholstery_stores
  drinking_places
  drug_stores_and_pharmacies
  drugs_drug_proprietaries_and_druggist_sundries
  dry_cleaners
  durable_goods
  duty_free_stores
  eating_places_restaurants
  educational_services
  electric_razor_stores
  electrical_parts_and_equipment
  electrical_services
  electronics_repair_shops
  electronics_stores
  elementary_secondary_schools
  employment_temp_agencies
  equipment_rental
  exterminating_services
  family_clothing_stores
  fast_food_restaurants
  financial_institutions
  fines_government_administrative_entities
  fireplace_fireplace_screens_and_accessories_stores
  floor_covering_stores
  florists
  florists_supplies_nursery_stock_and_flowers
  freezer_and_locker_meat_provisioners
  fuel_dealers_non_automotive
  funeral_services_crematories
  furniture_home_furnishings_and_equipment_stores_except_appliances
  furniture_repair_refinishing
  furriers_and_fur_shops
  general_services
  gift_card_novelty_and_souvenir_shops
  glass_paint_and_wallpaper_stores
  glassware_crystal_stores
  golf_courses_public
  government_services
  grocery_stores_supermarkets
  hardware_equipment_and_supplies
  hardware_stores
  health_and_beauty_spas
  hearing_aids_sales_and_supplies
  heating_plumbing_a_c
  hobby_toy_and_game_shops
  home_supply_warehouse_stores
  hospitals
  hotels_motels_and_resorts
  household_appliance_stores
  industrial_supplies
  information_retrieval_services
  insurance_default
  insurance_underwriting_premiums
  intra_company_purchases
  jewelry_stores_watches_clocks_and_silverware_stores
  landscaping_services
  laundries
  laundry_cleaning_services
  legal_services_attorneys
  luggage_and_leather_goods_stores
  lumber_building_materials_stores
  manual_cash_disburse
  marinas_service_and_supplies
  masonry_stonework_and_plaster
  massage_parlors
  medical_and_dental_labs
  medical_dental_ophthalmic_and_hospital_equipment_and_supplies
  medical_services
  membership_organizations
  mens_and_boys_clothing_and_accessories_stores
  mens_womens_clothing_stores
  metal_service_centers
  miscellaneous
  miscellaneous_apparel_and_accessory_shops
  miscellaneous_auto_dealers
  miscellaneous_business_services
  miscellaneous_food_stores
  miscellaneous_general_merchandise
  miscellaneous_general_services
  miscellaneous_home_furnishing_specialty_stores
  miscellaneous_publishing_and_printing
  miscellaneous_recreation_services
  miscellaneous_repair_shops
  miscellaneous_specialty_retail
  mobile_home_dealers
  motion_picture_theaters
  motor_freight_carriers_and_trucking
  motor_homes_dealers
  motor_vehicle_supplies_and_new_parts
  motorcycle_shops_and_dealers
  motorcycle_shops_dealers
  music_stores_musical_instruments_pianos_and_sheet_music
  news_dealers_and_newsstands
  non_fi_money_orders
  non_fi_stored_value_card_purchase_load
  nondurable_goods
  nurseries_lawn_and_garden_supply_stores
  nursing_personal_care
  office_and_commercial_furniture
  opticians_eyeglasses
  optometrists_ophthalmologist
  orthopedic_goods_prosthetic_devices
  osteopaths
  package_stores_beer_wine_and_liquor
  paints_varnishes_and_supplies
  parking_lots_garages
  passenger_railways
  pawn_shops
  pet_shops_pet_food_and_supplies
  petroleum_and_petroleum_products
  photo_developing
  photographic_photocopy_microfilm_equipment_and_supplies
  photographic_studios
  picture_video_production
  piece_goods_notions_and_other_dry_goods
  plumbing_heating_equipment_and_supplies
  political_organizations
  postal_services_government_only
  precious_stones_and_metals_watches_and_jewelry
  professional_services
  public_warehousing_and_storage
  quick_copy_repro_and_blueprint
  railroads
  real_estate_agents_and_managers_rentals
  record_stores
  recreational_vehicle_rentals
  religious_goods_stores
  religious_organizations
  roofing_siding_sheet_metal
  secretarial_support_services
  security_brokers_dealers
  service_stations
  sewing_needlework_fabric_and_piece_goods_stores
  shoe_repair_hat_cleaning
  shoe_stores
  small_appliance_repair
  snowmobile_dealers
  special_trade_services
  specialty_cleaning
  sporting_goods_stores
  sporting_recreation_camps
  sports_and_riding_apparel_stores
  sports_clubs_fields
  stamp_and_coin_stores
  stationary_office_supplies_printing_and_writing_paper
  stationery_stores_office_and_school_supply_stores
  swimming_pools_sales
  t_ui_travel_germany
  tailors_alterations
  tax_payments_government_agencies
  tax_preparation_services
  taxicabs_limousines
  telecommunication_equipment_and_telephone_sales
  telecommunication_services
  telegraph_services
  tent_and_awning_shops
  testing_laboratories
  theatrical_ticket_agencies
  timeshares
  tire_retreading_and_repair
  tolls_bridge_fees
  tourist_attractions_and_exhibits
  towing_services
  trailer_parks_campgrounds
  transportation_services
  travel_agencies_tour_operators
  truck_stop_iteration
  truck_utility_trailer_rentals
  typesetting_plate_making_and_related_services
  typewriter_stores
  u_s_federal_government_agencies_or_departments
  uniforms_commercial_clothing
  used_merchandise_and_secondhand_stores
  utilities
  variety_stores
  veterinary_services
  video_amusement_game_supplies
  video_game_arcades
  video_tape_rental_stores
  vocational_trade_schools
  watch_jewelry_repair
  welding_repair
  wholesale_clubs
  wig_and_toupee_stores
  wires_money_orders
  womens_accessory_and_specialty_shops
  womens_ready_to_wear_stores
  wrecking_and_salvage_yards
}

enum UpdateProfileResultInterval {
  all_time
  daily
  monthly
  per_authorization
  weekly
  yearly
}

input IssuingCardWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  issuingCard: Stripe_IssuingCardInput
}

enum UpdateProfileResultReplacementReason {
  damaged
  expired
  lost
  stolen
}

input Stripe_IssuingCardShippingInput {
  address: Stripe_AddressInput

  """The delivery company that shipped a card."""
  carrier: UpdateProfileResultCarrier

  """
  A unix timestamp representing a best estimate of when the card will be delivered.
  """
  eta: Int

  """Recipient name."""
  name: String

  """Shipment service, such as `standard` or `express`."""
  service: UpdateProfileResultService

  """The delivery status of the card."""
  status: UpdateProfileResultStatus

  """A tracking number for a card shipment."""
  tracking_number: String

  """
  A link to the shipping carrier's site where you can view detailed information about a card shipment.
  """
  tracking_url: String

  """Packaging options."""
  type: UpdateProfileResultType
}

enum UpdateProfileResultCarrier {
  dhl
  fedex
  royal_mail
  usps
}

enum UpdateProfileResultService {
  express
  priority
  standard
}

input Stripe_IssuingCardAuthorizationControlsInput {
  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`.
  """
  allowed_categories: [UpdateProfileResultAllowedCategories]

  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`.
  """
  blocked_categories: [UpdateProfileResultBlockedCategories]

  """
  Limit spending with amount-based rules that apply across any cards this card replaced (i.e., its `replacement_for` card and _that_ card's `replacement_for` card, up the chain).
  """
  spending_limits: [Stripe_IssuingCardSpendingLimitInput]

  """
  Currency of the amounts within `spending_limits`. Always the same as the currency of the card.
  """
  spending_limits_currency: String
}

input Stripe_IssuingCardSpendingLimitInput {
  """Maximum amount allowed to spend per interval."""
  amount: Int

  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories.
  """
  categories: [UpdateProfileResultCategories]

  """Interval (or event) to which the amount applies."""
  interval: UpdateProfileResultInterval
}

input Stripe_IssuingCardWalletsInput {
  apple_pay: Stripe_IssuingCardApplePayInput
  google_pay: Stripe_IssuingCardGooglePayInput

  """Unique identifier for a card used with digital wallets"""
  primary_account_identifier: String
}

input Stripe_IssuingCardApplePayInput {
  """Apple Pay Eligibility"""
  eligible: Boolean

  """Reason the card is ineligible for Apple Pay"""
  ineligible_reason: UpdateProfileResultIneligibleReason
}

enum UpdateProfileResultIneligibleReason {
  missing_agreement
  missing_cardholder_contact
  unsupported_region
}

input Stripe_IssuingCardGooglePayInput {
  """Google Pay Eligibility"""
  eligible: Boolean

  """Reason the card is ineligible for Google Pay"""
  ineligible_reason: UpdateProfileResultIneligibleReason
}

input IssuingCardholderWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  issuingCardholder: Stripe_IssuingCardholderInput
}

input Stripe_IssuingAuthorizationMerchantDataInput {
  """
  A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values.
  """
  category: String

  """The merchant category code for the sellerâ€™s business"""
  category_code: String

  """City where the seller is located"""
  city: String

  """Country where the seller is located"""
  country: String

  """Name of the seller"""
  name: String

  """Identifier assigned to the seller by the card brand"""
  network_id: String

  """Postal code where the seller is located"""
  postal_code: String

  """State where the seller is located"""
  state: String
}

input Stripe_IssuingAuthorizationPendingRequestInput {
  """
  The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount: Int
  amount_details: Stripe_IssuingAuthorizationAmountDetailsInput

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.
  """
  is_amount_controllable: Boolean

  """
  The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  merchant_amount: Int

  """The local currency the merchant is requesting to authorize."""
  merchant_currency: String
}

input Stripe_IssuingAuthorizationRequestInput {
  """
  The `pending_request.amount` at the time of the request, presented in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved.
  """
  amount: Int
  amount_details: Stripe_IssuingAuthorizationAmountDetailsInput

  """Whether this request was approved."""
  approved: Boolean

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  merchant_amount: Int

  """
  The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  merchant_currency: String

  """The reason for the approval or decline."""
  reason: UpdateProfileResultReason
}

enum UpdateProfileResultReason {
  account_disabled
  card_active
  card_inactive
  cardholder_inactive
  cardholder_verification_required
  insufficient_funds
  not_allowed
  spending_controls
  suspected_fraud
  verification_failed
  webhook_approved
  webhook_declined
  webhook_timeout
}

input Stripe_IssuingTransactionInput {
  """
  The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount: Int
  amount_details: Stripe_IssuingTransactionAmountDetailsInput
  authorization: IssuingAuthorizationWrappedStringInputUnion
  balance_transaction: BalanceTransactionWrappedStringInputUnion
  card: IssuingCardWrappedStringInputUnion
  cardholder: IssuingCardholderWrappedStringInputUnion

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  dispute: IssuingDisputeWrappedStringInputUnion

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency.
  """
  merchant_amount: Int

  """The currency with which the merchant is taking payment."""
  merchant_currency: String
  merchant_data: Stripe_IssuingAuthorizationMerchantDataInput

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  purchase_details: Stripe_IssuingTransactionPurchaseDetailsInput

  """The nature of the transaction."""
  type: UpdateProfileResultType

  """
  The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`.
  """
  wallet: UpdateProfileResultWallet
}

input Stripe_IssuingTransactionAmountDetailsInput {
  """The fee charged by the ATM for the cash withdrawal."""
  atm_fee: Int
}

input IssuingAuthorizationWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  issuingAuthorization: Stripe_IssuingAuthorizationInput
}

input IssuingDisputeWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  issuingDispute: Stripe_IssuingDisputeInput
}

input Stripe_IssuingDisputeInput {
  """
  Disputed amount. Usually the amount of the `transaction`, but can differ (usually because of currency fluctuation).
  """
  amount: Int

  """List of balance transactions associated with the dispute."""
  balance_transactions: [Stripe_BalanceTransactionInput]

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """The currency the `transaction` was made in."""
  currency: String
  evidence: Stripe_IssuingDisputeEvidenceInput

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject

  """Current status of the dispute."""
  status: UpdateProfileResultStatus
  transaction: IssuingTransactionWrappedStringInputUnion
}

input Stripe_IssuingDisputeEvidenceInput {
  canceled: Stripe_IssuingDisputeCanceledEvidenceInput
  duplicate: Stripe_IssuingDisputeDuplicateEvidenceInput
  fraudulent: Stripe_IssuingDisputeFraudulentEvidenceInput
  merchandise_not_as_described: Stripe_IssuingDisputeMerchandiseNotAsDescribedEvidenceInput
  not_received: Stripe_IssuingDisputeNotReceivedEvidenceInput
  other: Stripe_IssuingDisputeOtherEvidenceInput

  """
  The reason for filing the dispute. Its value will match the field containing the evidence.
  """
  reason: UpdateProfileResultReason
  service_not_as_described: Stripe_IssuingDisputeServiceNotAsDescribedEvidenceInput
}

input Stripe_IssuingDisputeCanceledEvidenceInput {
  additional_documentation: FileWrappedStringInputUnion

  """Date when order was canceled."""
  canceled_at: Int

  """Whether the cardholder was provided with a cancellation policy."""
  cancellation_policy_provided: Boolean

  """Reason for canceling the order."""
  cancellation_reason: String

  """Date when the cardholder expected to receive the product."""
  expected_at: Int

  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String

  """Description of the merchandise or service that was purchased."""
  product_description: String

  """Whether the product was a merchandise or service."""
  product_type: UpdateProfileResultProductType

  """Result of cardholder's attempt to return the product."""
  return_status: UpdateProfileResultReturnStatus

  """Date when the product was returned or attempted to be returned."""
  returned_at: Int
}

enum UpdateProfileResultProductType {
  merchandise
  service
}

enum UpdateProfileResultReturnStatus {
  merchant_rejected
  successful
}

input Stripe_IssuingDisputeDuplicateEvidenceInput {
  additional_documentation: FileWrappedStringInputUnion
  card_statement: FileWrappedStringInputUnion
  cash_receipt: FileWrappedStringInputUnion
  check_image: FileWrappedStringInputUnion

  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String

  """
  Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one.
  """
  original_transaction: String
}

input Stripe_IssuingDisputeFraudulentEvidenceInput {
  additional_documentation: FileWrappedStringInputUnion

  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String
}

input Stripe_IssuingDisputeMerchandiseNotAsDescribedEvidenceInput {
  additional_documentation: FileWrappedStringInputUnion

  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String

  """Date when the product was received."""
  received_at: Int

  """Description of the cardholder's attempt to return the product."""
  return_description: String

  """Result of cardholder's attempt to return the product."""
  return_status: UpdateProfileResultReturnStatus

  """Date when the product was returned or attempted to be returned."""
  returned_at: Int
}

input Stripe_IssuingDisputeNotReceivedEvidenceInput {
  additional_documentation: FileWrappedStringInputUnion

  """Date when the cardholder expected to receive the product."""
  expected_at: Int

  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String

  """Description of the merchandise or service that was purchased."""
  product_description: String

  """Whether the product was a merchandise or service."""
  product_type: UpdateProfileResultProductType
}

input Stripe_IssuingDisputeOtherEvidenceInput {
  additional_documentation: FileWrappedStringInputUnion

  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String

  """Description of the merchandise or service that was purchased."""
  product_description: String

  """Whether the product was a merchandise or service."""
  product_type: UpdateProfileResultProductType
}

input Stripe_IssuingDisputeServiceNotAsDescribedEvidenceInput {
  additional_documentation: FileWrappedStringInputUnion

  """Date when order was canceled."""
  canceled_at: Int

  """Reason for canceling the order."""
  cancellation_reason: String

  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String

  """Date when the product was received."""
  received_at: Int
}

input IssuingTransactionWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  issuingTransaction: Stripe_IssuingTransactionInput
}

input Stripe_IssuingTransactionPurchaseDetailsInput {
  flight: Stripe_IssuingTransactionFlightDataInput
  fuel: Stripe_IssuingTransactionFuelDataInput
  lodging: Stripe_IssuingTransactionLodgingDataInput

  """The line items in the purchase."""
  receipt: [Stripe_IssuingTransactionReceiptDataInput]

  """A merchant-specific order number."""
  reference: String
}

input Stripe_IssuingTransactionFlightDataInput {
  """The time that the flight departed."""
  departure_at: Int

  """The name of the passenger."""
  passenger_name: String

  """Whether the ticket is refundable."""
  refundable: Boolean

  """The legs of the trip."""
  segments: [Stripe_IssuingTransactionFlightDataLegInput]

  """The travel agency that issued the ticket."""
  travel_agency: String
}

input Stripe_IssuingTransactionFlightDataLegInput {
  """The three-letter IATA airport code of the flight's destination."""
  arrival_airport_code: String

  """The airline carrier code."""
  carrier: String

  """The three-letter IATA airport code that the flight departed from."""
  departure_airport_code: String

  """The flight number."""
  flight_number: String

  """The flight's service class."""
  service_class: String

  """Whether a stopover is allowed on this flight."""
  stopover_allowed: Boolean
}

input Stripe_IssuingTransactionFuelDataInput {
  """
  The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`.
  """
  type: String

  """The units for `volume_decimal`. One of `us_gallon` or `liter`."""
  unit: String

  """
  The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places.
  """
  unit_cost_decimal: String

  """
  The volume of the fuel that was pumped, represented as a decimal string with at most 12 decimal places.
  """
  volume_decimal: String
}

input Stripe_IssuingTransactionLodgingDataInput {
  """The time of checking into the lodging."""
  check_in_at: Int

  """The number of nights stayed at the lodging."""
  nights: Int
}

input Stripe_IssuingTransactionReceiptDataInput {
  """
  The description of the item. The maximum length of this field is 26 characters.
  """
  description: String

  """The quantity of the item."""
  quantity: Float

  """The total for this line item in cents."""
  total: Int

  """The unit cost of the item in cents."""
  unit_cost: Int
}

enum UpdateProfileResultWallet {
  apple_pay
  google_pay
  samsung_pay
}

input Stripe_IssuingAuthorizationVerificationDataInput {
  """
  Whether the cardholder provided an address first line and if it matched the cardholderâ€™s `billing.address.line1`.
  """
  address_line1_check: UpdateProfileResultAddressLine1Check

  """
  Whether the cardholder provided a postal code and if it matched the cardholderâ€™s `billing.address.postal_code`.
  """
  address_postal_code_check: UpdateProfileResultAddressPostalCodeCheck

  """
  Whether the cardholder provided a CVC and if it matched Stripeâ€™s record.
  """
  cvc_check: UpdateProfileResultCvcCheck

  """
  Whether the cardholder provided an expiry date and if it matched Stripeâ€™s record.
  """
  expiry_check: UpdateProfileResultExpiryCheck
}

enum UpdateProfileResultAddressLine1Check {
  match
  mismatch
  not_provided
}

enum UpdateProfileResultAddressPostalCodeCheck {
  match
  mismatch
  not_provided
}

enum UpdateProfileResultCvcCheck {
  match
  mismatch
  not_provided
}

enum UpdateProfileResultExpiryCheck {
  match
  mismatch
  not_provided
}

input Stripe_PayoutInput {
  """Amount (in %s) to be transferred to your bank account or debit card."""
  amount: Int

  """
  Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.
  """
  arrival_date: Int

  """
  Returns `true` if the payout was created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule), and `false` if it was [requested manually](https://stripe.com/docs/payouts#manual-payouts).
  """
  automatic: Boolean
  balance_transaction: BalanceTransactionWrappedStringInputUnion

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  destination: BankAccountCardDeletedBankAccountDeletedCardWrappedStringInputUnion
  failure_balance_transaction: BalanceTransactionWrappedStringInputUnion

  """
  Error code explaining reason for payout failure if available. See [Types of payout failures](https://stripe.com/docs/api#payout_failures) for a list of failure codes.
  """
  failure_code: String

  """
  Message to user further explaining reason for payout failure if available.
  """
  failure_message: String

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces](https://stripe.com/blog/instant-payouts-for-marketplaces) for more information.)
  """
  method: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  original_payout: PayoutWrappedStringInputUnion
  reversed_by: PayoutWrappedStringInputUnion

  """
  The source balance this payout came from. One of `card`, `fpx`, or `bank_account`.
  """
  source_type: String

  """
  Extra information about a payout to be displayed on the user's bank statement.
  """
  statement_descriptor: String

  """
  Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it is submitted to the bank, when it becomes `in_transit`. The status then changes to `paid` if the transaction goes through, or to `failed` or `canceled` (within 5 business days). Some failed payouts may initially show as `paid` but then change to `failed`.
  """
  status: String

  """Can be `bank_account` or `card`."""
  type: UpdateProfileResultType
}

input BankAccountCardDeletedBankAccountDeletedCardWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  bankAccount: Stripe_BankAccountInput
  card: Stripe_CardInput
  deletedBankAccount: Stripe_DeletedBankAccountInput
  deletedCard: Stripe_DeletedCardInput
}

input Stripe_DeletedBankAccountInput {
  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
  """
  currency: String

  """Always true for a deleted object"""
  deleted: Boolean

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
}

input Stripe_DeletedCardInput {
  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
  """
  currency: String

  """Always true for a deleted object"""
  deleted: Boolean

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
}

input PayoutWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  payout: Stripe_PayoutInput
}

input Stripe_PlatformTaxFeeInput {
  """The Connected account that incurred this charge."""
  account: String

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject

  """The payment object that caused this tax to be inflicted."""
  source_transaction: String

  """The type of tax (VAT)."""
  type: String
}

input Stripe_RefundInput {
  """Amount, in %s."""
  amount: Int
  balance_transaction: BalanceTransactionWrappedStringInputUnion
  charge: ChargeWrappedStringInputUnion

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)
  """
  description: String
  failure_balance_transaction: BalanceTransactionWrappedStringInputUnion

  """
  If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`.
  """
  failure_reason: String

  """Unique identifier for the object."""
  id: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject
  next_action: Stripe_RefundNextActionInput

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  payment_intent: PaymentIntentWrappedStringInputUnion

  """
  Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
  """
  reason: UpdateProfileResultReason

  """
  This is the transaction number that appears on email receipts sent for this refund.
  """
  receipt_number: String
  source_transfer_reversal: TransferReversalWrappedStringInputUnion

  """
  Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details.
  """
  status: String
  transfer_reversal: TransferReversalWrappedStringInputUnion
}

input Stripe_RefundNextActionInput {
  display_details: Stripe_RefundNextActionDisplayDetailsInput

  """Type of the next action to perform."""
  type: String
}

input Stripe_RefundNextActionDisplayDetailsInput {
  email_sent: Stripe_EmailSentInput

  """The expiry timestamp."""
  expires_at: Int
}

input Stripe_EmailSentInput {
  """The timestamp when the email was sent."""
  email_sent_at: Int

  """The recipient's email address."""
  email_sent_to: String
}

input TransferReversalWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  transferReversal: Stripe_TransferReversalInput
}

input Stripe_TransferReversalInput {
  """Amount, in %s."""
  amount: Int
  balance_transaction: BalanceTransactionWrappedStringInputUnion

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  destination_payment_refund: RefundWrappedStringInputUnion

  """Unique identifier for the object."""
  id: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  source_refund: RefundWrappedStringInputUnion
  transfer: TransferWrappedStringInputUnion
}

input RefundWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  refund: Stripe_RefundInput
}

input TransferWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  transfer: Stripe_TransferInput
}

input Stripe_TransferInput {
  """Amount in %s to be transferred."""
  amount: Int

  """
  Amount in %s reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).
  """
  amount_reversed: Int
  balance_transaction: BalanceTransactionWrappedStringInputUnion

  """Time that this record of the transfer was first created."""
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  destination: AccountWrappedStringInputUnion
  destination_payment: ChargeWrappedStringInputUnion

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject

  """A list of reversals that have been applied to the transfer."""
  reversals: PropertiesTransferPropertiesReversalsPropertyInput

  """
  Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.
  """
  reversed: Boolean
  source_transaction: ChargeWrappedStringInputUnion

  """
  The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`.
  """
  source_type: String

  """
  A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details.
  """
  transfer_group: String
}

"""A list of reversals that have been applied to the transfer."""
input PropertiesTransferPropertiesReversalsPropertyInput {
  """Details about each object."""
  data: [Stripe_TransferReversalInput!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: UpdateProfileResultObject!

  """The URL where this list can be accessed."""
  url: String!
}

input Stripe_ReserveTransactionInput {
  amount: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
}

input Stripe_TaxDeductedAtSourceInput {
  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject

  """
  The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
  """
  period_end: Int

  """
  The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
  """
  period_start: Int

  """The TAN that was supplied to Stripe when TDS was assessed"""
  tax_deduction_account_number: String
}

input Stripe_TopupInput {
  """Amount transferred."""
  amount: Int
  balance_transaction: BalanceTransactionWrappedStringInputUnion

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """
  Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up.
  """
  expected_availability_date: Int

  """
  Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes).
  """
  failure_code: String

  """
  Message to user further explaining reason for top-up failure if available.
  """
  failure_message: String

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  source: Stripe_SourceInput

  """
  Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter.
  """
  statement_descriptor: String

  """
  The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`.
  """
  status: UpdateProfileResultStatus

  """A string that identifies this top-up as part of a group."""
  transfer_group: String
}

"""A list of refunds that have been applied to the fee."""
input PropertiesApplicationFeePropertiesRefundsPropertyInput {
  """Details about each object."""
  data: [Stripe_FeeRefundInput!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: UpdateProfileResultObject!

  """The URL where this list can be accessed."""
  url: String!
}

input Stripe_ChargeFraudDetailsInput {
  """Assessments from Stripe. If set, the value is `fraudulent`."""
  stripe_report: String

  """
  Assessments reported by you. If set, possible values of are `safe` and `fraudulent`.
  """
  user_report: String
}

input InvoiceWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  invoice: Stripe_InvoiceInput
}

input OrderWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  order: Stripe_OrderInput
}

input Stripe_OrderInput {
  """
  A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order.
  """
  amount: Int

  """The total amount that was returned to the customer."""
  amount_returned: Int

  """ID of the Connect Application that created the order."""
  application: String

  """
  A fee in cents that will be applied to the order and transferred to the application ownerâ€™s Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees documentation.
  """
  application_fee: Int
  charge: ChargeWrappedStringInputUnion

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  customer: String

  """The email address of the customer placing the order."""
  email: String

  """External coupon code to load for this order."""
  external_coupon_code: String

  """Unique identifier for the object."""
  id: String

  """
  List of items constituting the order. An order can have up to 25 items.
  """
  items: [Stripe_OrderItemInput]

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject

  """A list of returns that have taken place for this order."""
  returns: PropertiesOrderPropertiesReturnsPropertyInput

  """
  The shipping method that is currently selected for this order, if any. If present, it is equal to one of the `id`s of shipping methods in the `shipping_methods` array. At order creation time, if there are multiple shipping methods, Stripe will automatically selected the first method.
  """
  selected_shipping_method: String
  shipping: Stripe_ShippingInput

  """
  A list of supported shipping methods for this order. The desired shipping method can be specified either by updating the order, or when paying it.
  """
  shipping_methods: [Stripe_ShippingMethodInput]

  """
  Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More details in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses).
  """
  status: String
  status_transitions: Stripe_StatusTransitionsInput

  """
  Time at which the object was last updated. Measured in seconds since the Unix epoch.
  """
  updated: Int

  """The user's order ID if it is different from the Stripe order ID."""
  upstream_id: String
}

input Stripe_OrderItemInput {
  """
  A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item.
  """
  amount: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  Description of the line item, meant to be displayable to the user (e.g., `"Express shipping"`).
  """
  description: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  parent: SkuWrappedStringInputUnion

  """
  A positive integer representing the number of instances of `parent` that are included in this order item. Applicable/present only if `type` is `sku`.
  """
  quantity: Int

  """The type of line item. One of `sku`, `tax`, `shipping`, or `discount`."""
  type: String
}

input SkuWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  sku: Stripe_SkuInput
}

input Stripe_SkuInput {
  """Whether the SKU is available for purchase."""
  active: Boolean

  """
  A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`.
  """
  attributes: JSONObject

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """Unique identifier for the object."""
  id: String

  """
  The URL of an image for this SKU, meant to be displayable to the customer.
  """
  image: String
  inventory: Stripe_SkuInventoryInput

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  package_dimensions: Stripe_PackageDimensionsInput

  """
  The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge Â¥100, Japanese Yen being a zero-decimal currency).
  """
  price: Int
  product: ProductWrappedStringInputUnion

  """
  Time at which the object was last updated. Measured in seconds since the Unix epoch.
  """
  updated: Int
}

input Stripe_SkuInventoryInput {
  """
  The count of inventory available. Will be present if and only if `type` is `finite`.
  """
  quantity: Int

  """
  Inventory type. Possible values are `finite`, `bucket` (not quantified), and `infinite`.
  """
  type: String

  """
  An indicator of the inventory available. Possible values are `in_stock`, `limited`, and `out_of_stock`. Will be present if and only if `type` is `bucket`.
  """
  value: String
}

input Stripe_PackageDimensionsInput {
  """Height, in inches."""
  height: Float

  """Length, in inches."""
  length: Float

  """Weight, in ounces."""
  weight: Float

  """Width, in inches."""
  width: Float
}

input ProductWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  product: Stripe_ProductInput
}

input Stripe_ProductInput {
  """Whether the product is currently available for purchase."""
  active: Boolean

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
  """
  description: String

  """Unique identifier for the object."""
  id: String

  """
  A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
  """
  images: [String]

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """The product's name, meant to be displayable to the customer."""
  name: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  package_dimensions: Stripe_PackageDimensionsInput

  """Whether this product is shipped (i.e., physical goods)."""
  shippable: Boolean

  """
  Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used.
  """
  statement_descriptor: String
  tax_code: TaxCodeWrappedStringInputUnion

  """
  A label that represents units of this product in Stripe and on customersâ€™ receipts and invoices. When set, this will be included in associated invoice line item descriptions.
  """
  unit_label: String

  """
  Time at which the object was last updated. Measured in seconds since the Unix epoch.
  """
  updated: Int

  """A URL of a publicly-accessible webpage for this product."""
  url: String
  prices: [Stripe_PriceInput]
  _shapeId: String
  _id: ID
}

input TaxCodeWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  taxCode: Stripe_TaxCodeInput
}

input Stripe_TaxCodeInput {
  """
  A detailed description of which types of products the tax code represents.
  """
  description: String

  """Unique identifier for the object."""
  id: String

  """A short name for the tax code."""
  name: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
}

input Stripe_PriceInput {
  """Whether the price can be used for new purchases."""
  active: Boolean

  """
  Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
  """
  billing_scheme: UpdateProfileResultBillingScheme

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.
  """
  lookup_key: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """A brief description of the price, hidden from customers."""
  nickname: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  recurring: Stripe_RecurringInput

  """
  Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
  """
  tax_behavior: UpdateProfileResultTaxBehavior

  """
  Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
  """
  tiers: [Stripe_PriceTierInput]

  """
  Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
  """
  tiers_mode: UpdateProfileResultTiersMode
  transform_quantity: Stripe_TransformQuantityInput

  """
  One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
  """
  type: UpdateProfileResultType

  """
  The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
  """
  unit_amount: Int

  """
  The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
  """
  unit_amount_decimal: String
}

enum UpdateProfileResultBillingScheme {
  per_unit
  tiered
}

input Stripe_RecurringInput {
  """
  Specifies a usage aggregation strategy for prices of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
  """
  aggregate_usage: UpdateProfileResultAggregateUsage

  """
  The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
  """
  interval: UpdateProfileResultInterval

  """
  The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
  """
  interval_count: Int

  """
  Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
  """
  usage_type: UpdateProfileResultUsageType
}

enum UpdateProfileResultAggregateUsage {
  last_during_period
  last_ever
  max
  sum
}

enum UpdateProfileResultUsageType {
  licensed
  metered
}

enum UpdateProfileResultTaxBehavior {
  exclusive
  inclusive
  unspecified
}

input Stripe_PriceTierInput {
  """Price for the entire tier."""
  flat_amount: Int

  """
  Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.
  """
  flat_amount_decimal: String

  """Per unit price for units relevant to the tier."""
  unit_amount: Int

  """
  Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
  """
  unit_amount_decimal: String

  """Up to and including to this quantity will be contained in the tier."""
  up_to: Int
}

enum UpdateProfileResultTiersMode {
  graduated
  volume
}

input Stripe_TransformQuantityInput {
  """Divide usage by this number."""
  divide_by: Int

  """After division, either round the result `up` or `down`."""
  round: UpdateProfileResultRound
}

enum UpdateProfileResultRound {
  down
  up
}

"""A list of returns that have taken place for this order."""
input PropertiesOrderPropertiesReturnsPropertyInput {
  """Details about each object."""
  data: [Stripe_OrderReturnInput!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: UpdateProfileResultObject!

  """The URL where this list can be accessed."""
  url: String!
}

input Stripe_OrderReturnInput {
  """
  A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the returned line item.
  """
  amount: Int

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """Unique identifier for the object."""
  id: String

  """The items included in this order return."""
  items: [Stripe_OrderItemInput]

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  order: OrderWrappedStringInputUnion
  refund: RefundWrappedStringInputUnion
}

input Stripe_ShippingMethodInput {
  """
  A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item.
  """
  amount: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  delivery_estimate: Stripe_DeliveryEstimateInput

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """Unique identifier for the object."""
  id: String
}

input Stripe_DeliveryEstimateInput {
  """
  If `type` is `"exact"`, `date` will be the expected delivery date in the format YYYY-MM-DD.
  """
  date: String

  """
  If `type` is `"range"`, `earliest` will be be the earliest delivery date in the format YYYY-MM-DD.
  """
  earliest: String

  """
  If `type` is `"range"`, `latest` will be the latest delivery date in the format YYYY-MM-DD.
  """
  latest: String

  """The type of estimate. Must be either `"range"` or `"exact"`."""
  type: String
}

input Stripe_StatusTransitionsInput {
  """The time that the order was canceled."""
  canceled: Int

  """The time that the order was fulfilled."""
  fulfiled: Int

  """The time that the order was paid."""
  paid: Int

  """The time that the order was returned."""
  returned: Int
}

input Stripe_ChargeOutcomeInput {
  """
  Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement.
  """
  network_status: String

  """
  An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details.
  """
  reason: String

  """
  Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. This field is only available with Radar.
  """
  risk_level: String

  """
  Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams.
  """
  risk_score: Int
  rule: RuleWrappedStringInputUnion

  """
  A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer.
  """
  seller_message: String

  """
  Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details.
  """
  type: String
}

input RuleWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  rule: Stripe_RuleInput
}

input Stripe_RuleInput {
  """The action taken on the payment."""
  action: String

  """Unique identifier for the object."""
  id: String

  """The predicate to evaluate the payment against."""
  predicate: String
}

input Stripe_PaymentMethodDetailsInput {
  ach_credit_transfer: Stripe_PaymentMethodDetailsAchCreditTransferInput
  ach_debit: Stripe_PaymentMethodDetailsAchDebitInput
  acss_debit: Stripe_PaymentMethodDetailsAcssDebitInput
  afterpay_clearpay: Stripe_PaymentMethodDetailsAfterpayClearpayInput
  alipay: Stripe_PaymentFlowsPrivatePaymentMethodsAlipayDetailsInput
  au_becs_debit: Stripe_PaymentMethodDetailsAuBecsDebitInput
  bacs_debit: Stripe_PaymentMethodDetailsBacsDebitInput
  bancontact: Stripe_PaymentMethodDetailsBancontactInput
  boleto: Stripe_PaymentMethodDetailsBoletoInput
  card: Stripe_PaymentMethodDetailsCardInput
  card_present: Stripe_PaymentMethodDetailsCardPresentInput
  customer_balance: Stripe_PaymentMethodDetailsCustomerBalanceInput
  eps: Stripe_PaymentMethodDetailsEpsInput
  fpx: Stripe_PaymentMethodDetailsFpxInput
  giropay: Stripe_PaymentMethodDetailsGiropayInput
  grabpay: Stripe_PaymentMethodDetailsGrabpayInput
  ideal: Stripe_PaymentMethodDetailsIdealInput
  interac_present: Stripe_PaymentMethodDetailsInteracPresentInput
  klarna: Stripe_PaymentMethodDetailsKlarnaInput
  konbini: Stripe_PaymentMethodDetailsKonbiniInput
  multibanco: Stripe_PaymentMethodDetailsMultibancoInput
  oxxo: Stripe_PaymentMethodDetailsOxxoInput
  p24: Stripe_PaymentMethodDetailsP24Input
  paynow: Stripe_PaymentMethodDetailsPaynowInput
  sepa_debit: Stripe_PaymentMethodDetailsSepaDebitInput
  sofort: Stripe_PaymentMethodDetailsSofortInput
  stripe_account: Stripe_PaymentMethodDetailsStripeAccountInput

  """
  The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `acss_debit`, `alipay`, `au_becs_debit`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`.
  An additional hash is included on `payment_method_details` with a name matching this value.
  It contains information specific to the payment method.
  """
  type: String
  us_bank_account: Stripe_PaymentMethodDetailsUsBankAccountInput
  wechat: Stripe_PaymentMethodDetailsWechatInput
  wechat_pay: Stripe_PaymentMethodDetailsWechatPayInput
}

input Stripe_PaymentMethodDetailsAchCreditTransferInput {
  """Account number to transfer funds to."""
  account_number: String

  """Name of the bank associated with the routing number."""
  bank_name: String

  """Routing transit number for the bank account to transfer funds to."""
  routing_number: String

  """SWIFT code of the bank associated with the routing number."""
  swift_code: String
}

input Stripe_PaymentMethodDetailsAchDebitInput {
  """
  Type of entity that holds the account. This can be either `individual` or `company`.
  """
  account_holder_type: UpdateProfileResultAccountHolderType

  """Name of the bank associated with the bank account."""
  bank_name: String

  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Last four digits of the bank account number."""
  last4: String

  """Routing transit number of the bank account."""
  routing_number: String
}

enum UpdateProfileResultAccountHolderType {
  company
  individual
}

input Stripe_PaymentMethodDetailsAcssDebitInput {
  """Name of the bank associated with the bank account."""
  bank_name: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Institution number of the bank account"""
  institution_number: String

  """Last four digits of the bank account number."""
  last4: String

  """ID of the mandate used to make this payment."""
  mandate: String

  """Transit number of the bank account."""
  transit_number: String
}

input Stripe_PaymentMethodDetailsAfterpayClearpayInput {
  """Order identifier shown to the merchant in Afterpayâ€™s online portal."""
  reference: String
}

input Stripe_PaymentFlowsPrivatePaymentMethodsAlipayDetailsInput {
  """
  Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same.
  """
  buyer_id: String

  """
  Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same.
  """
  fingerprint: String

  """Transaction ID of this particular Alipay transaction."""
  transaction_id: String
}

input Stripe_PaymentMethodDetailsAuBecsDebitInput {
  """Bank-State-Branch number of the bank account."""
  bsb_number: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Last four digits of the bank account number."""
  last4: String

  """ID of the mandate used to make this payment."""
  mandate: String
}

input Stripe_PaymentMethodDetailsBacsDebitInput {
  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Last four digits of the bank account number."""
  last4: String

  """ID of the mandate used to make this payment."""
  mandate: String

  """Sort code of the bank account. (e.g., `10-20-30`)"""
  sort_code: String
}

input Stripe_PaymentMethodDetailsBancontactInput {
  """Bank code of bank associated with the bank account."""
  bank_code: String

  """Name of the bank associated with the bank account."""
  bank_name: String

  """Bank Identifier Code of the bank associated with the bank account."""
  bic: String
  generated_sepa_debit: PaymentMethodWrappedStringInputUnion
  generated_sepa_debit_mandate: MandateWrappedStringInputUnion

  """Last four characters of the IBAN."""
  iban_last4: String

  """
  Preferred language of the Bancontact authorization page that the customer is redirected to.
  Can be one of `en`, `de`, `fr`, or `nl`
  """
  preferred_language: UpdateProfileResultPreferredLanguage

  """
  Owner's verified full name. Values are verified or provided by Bancontact directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

input Stripe_PaymentMethodDetailsBoletoInput {
  """
  The tax ID of the customer (CPF for individuals consumers or CNPJ for businesses consumers)
  """
  tax_id: String
}

input Stripe_PaymentMethodDetailsCardInput {
  """
  Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  brand: String
  checks: Stripe_PaymentMethodDetailsCardChecksInput

  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String

  """Two-digit number representing the card's expiration month."""
  exp_month: Int

  """Four-digit number representing the card's expiration year."""
  exp_year: Int

  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  
  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
  """
  fingerprint: String

  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String
  installments: Stripe_PaymentMethodDetailsCardInstallmentsInput

  """The last four digits of the card."""
  last4: String

  """ID of the mandate used to make this payment or created by it."""
  mandate: String

  """
  Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  network: String
  three_d_secure: Stripe_ThreeDSecureDetailsInput
  wallet: Stripe_PaymentMethodDetailsCardWalletInput
}

input Stripe_PaymentMethodDetailsCardChecksInput {
  """
  If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_line1_check: String

  """
  If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_postal_code_check: String

  """
  If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  cvc_check: String
}

input Stripe_PaymentMethodDetailsCardInstallmentsInput {
  plan: Stripe_PaymentMethodDetailsCardInstallmentsPlanInput
}

input Stripe_PaymentMethodDetailsCardInstallmentsPlanInput {
  """
  For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card.
  """
  count: Int

  """
  For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
  One of `month`.
  """
  interval: UpdateProfileResultInterval

  """Type of installment plan, one of `fixed_count`."""
  type: UpdateProfileResultType
}

input Stripe_PaymentMethodDetailsCardWalletInput {
  amex_express_checkout: Stripe_PaymentMethodDetailsCardWalletAmexExpressCheckoutInput
  apple_pay: Stripe_PaymentMethodDetailsCardWalletApplePayInput

  """
  (For tokenized numbers only.) The last four digits of the device account number.
  """
  dynamic_last4: String
  google_pay: Stripe_PaymentMethodDetailsCardWalletGooglePayInput
  masterpass: Stripe_PaymentMethodDetailsCardWalletMasterpassInput
  samsung_pay: Stripe_PaymentMethodDetailsCardWalletSamsungPayInput

  """
  The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
  """
  type: UpdateProfileResultType
  visa_checkout: Stripe_PaymentMethodDetailsCardWalletVisaCheckoutInput
}

input Stripe_PaymentMethodDetailsCardWalletAmexExpressCheckoutInput {
  result: JSONObject
}

input Stripe_PaymentMethodDetailsCardWalletApplePayInput {
  result: JSONObject
}

input Stripe_PaymentMethodDetailsCardWalletGooglePayInput {
  result: JSONObject
}

input Stripe_PaymentMethodDetailsCardWalletMasterpassInput {
  billing_address: Stripe_AddressInput

  """
  Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  email: String

  """
  Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  name: String
  shipping_address: Stripe_AddressInput
}

input Stripe_PaymentMethodDetailsCardWalletSamsungPayInput {
  result: JSONObject
}

input Stripe_PaymentMethodDetailsCardWalletVisaCheckoutInput {
  billing_address: Stripe_AddressInput

  """
  Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  email: String

  """
  Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  name: String
  shipping_address: Stripe_AddressInput
}

input Stripe_PaymentMethodDetailsCustomerBalanceInput {
  result: JSONObject
}

input Stripe_PaymentMethodDetailsEpsInput {
  """
  The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
  """
  bank: UpdateProfileResultBank

  """
  Owner's verified full name. Values are verified or provided by EPS directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  EPS rarely provides this information so the attribute is usually empty.
  """
  verified_name: String
}

input Stripe_PaymentMethodDetailsFpxInput {
  """
  The customer's bank. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`.
  """
  bank: UpdateProfileResultBank

  """
  Unique transaction id generated by FPX for every request from the merchant
  """
  transaction_id: String
}

input Stripe_PaymentMethodDetailsGiropayInput {
  """Bank code of bank associated with the bank account."""
  bank_code: String

  """Name of the bank associated with the bank account."""
  bank_name: String

  """Bank Identifier Code of the bank associated with the bank account."""
  bic: String

  """
  Owner's verified full name. Values are verified or provided by Giropay directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  Giropay rarely provides this information so the attribute is usually empty.
  """
  verified_name: String
}

input Stripe_PaymentMethodDetailsGrabpayInput {
  """Unique transaction id generated by GrabPay"""
  transaction_id: String
}

input Stripe_PaymentMethodDetailsIdealInput {
  """
  The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
  """
  bank: UpdateProfileResultBank

  """The Bank Identifier Code of the customer's bank."""
  bic: UpdateProfileResultBic
  generated_sepa_debit: PaymentMethodWrappedStringInputUnion
  generated_sepa_debit_mandate: MandateWrappedStringInputUnion

  """Last four characters of the IBAN."""
  iban_last4: String

  """
  Owner's verified full name. Values are verified or provided by iDEAL directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

input Stripe_PaymentMethodDetailsInteracPresentInput {
  """Card brand. Can be `interac`, `mastercard` or `visa`."""
  brand: String

  """
  The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
  """
  cardholder_name: String

  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String

  """Authorization response cryptogram."""
  emv_auth_data: String

  """Two-digit number representing the card's expiration month."""
  exp_month: Int

  """Four-digit number representing the card's expiration year."""
  exp_year: Int

  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  
  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
  """
  fingerprint: String

  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String

  """
  ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
  """
  generated_card: String

  """The last four digits of the card."""
  last4: String

  """
  Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  network: String

  """
  EMV tag 5F2D. Preferred languages specified by the integrated circuit chip.
  """
  preferred_locales: [String]

  """How card details were read in this transaction."""
  read_method: UpdateProfileResultReadMethod
  receipt: Stripe_PaymentMethodDetailsInteracPresentReceiptInput
}

input Stripe_PaymentMethodDetailsInteracPresentReceiptInput {
  """The type of account being debited or credited"""
  account_type: UpdateProfileResultAccountType

  """EMV tag 9F26, cryptogram generated by the integrated circuit chip."""
  application_cryptogram: String

  """Mnenomic of the Application Identifier."""
  application_preferred_name: String

  """Identifier for this transaction."""
  authorization_code: String

  """EMV tag 8A. A code returned by the card issuer."""
  authorization_response_code: String

  """How the cardholder verified ownership of the card."""
  cardholder_verification_method: String

  """
  EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.
  """
  dedicated_file_name: String

  """The outcome of a series of EMV functions performed by the card reader."""
  terminal_verification_results: String

  """
  An indication of various EMV functions performed during the transaction.
  """
  transaction_status_information: String
}

input Stripe_PaymentMethodDetailsKlarnaInput {
  """
  The Klarna payment method used for this transaction.
  Can be one of `pay_later`, `pay_now`, `pay_with_financing`, or `pay_in_installments`
  """
  payment_method_category: String

  """
  Preferred language of the Klarna authorization page that the customer is redirected to.
  Can be one of `de-AT`, `en-AT`, `nl-BE`, `fr-BE`, `en-BE`, `de-DE`, `en-DE`, `da-DK`, `en-DK`, `es-ES`, `en-ES`, `fi-FI`, `sv-FI`, `en-FI`, `en-GB`, `en-IE`, `it-IT`, `en-IT`, `nl-NL`, `en-NL`, `nb-NO`, `en-NO`, `sv-SE`, `en-SE`, `en-US`, `es-US`, `fr-FR`, or `en-FR`
  """
  preferred_locale: String
}

input Stripe_PaymentMethodDetailsKonbiniInput {
  store: Stripe_PaymentMethodDetailsKonbiniStoreInput
}

input Stripe_PaymentMethodDetailsKonbiniStoreInput {
  """
  The name of the convenience store chain where the payment was completed.
  """
  chain: UpdateProfileResultChain
}

enum UpdateProfileResultChain {
  familymart
  lawson
  ministop
  seicomart
}

input Stripe_PaymentMethodDetailsMultibancoInput {
  """Entity number associated with this Multibanco payment."""
  entity: String

  """Reference number associated with this Multibanco payment."""
  reference: String
}

input Stripe_PaymentMethodDetailsOxxoInput {
  """OXXO reference number"""
  number: String
}

input Stripe_PaymentMethodDetailsP24Input {
  """
  The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`.
  """
  bank: UpdateProfileResultBank

  """Unique reference for this Przelewy24 payment."""
  reference: String

  """
  Owner's verified full name. Values are verified or provided by Przelewy24 directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  Przelewy24 rarely provides this information so the attribute is usually empty.
  """
  verified_name: String
}

input Stripe_PaymentMethodDetailsPaynowInput {
  """Reference number associated with this PayNow payment"""
  reference: String
}

input Stripe_PaymentMethodDetailsSepaDebitInput {
  """Bank code of bank associated with the bank account."""
  bank_code: String

  """Branch code of bank associated with the bank account."""
  branch_code: String

  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Last four characters of the IBAN."""
  last4: String

  """ID of the mandate used to make this payment."""
  mandate: String
}

input Stripe_PaymentMethodDetailsSofortInput {
  """Bank code of bank associated with the bank account."""
  bank_code: String

  """Name of the bank associated with the bank account."""
  bank_name: String

  """Bank Identifier Code of the bank associated with the bank account."""
  bic: String

  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String
  generated_sepa_debit: PaymentMethodWrappedStringInputUnion
  generated_sepa_debit_mandate: MandateWrappedStringInputUnion

  """Last four characters of the IBAN."""
  iban_last4: String

  """
  Preferred language of the SOFORT authorization page that the customer is redirected to.
  Can be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`
  """
  preferred_language: UpdateProfileResultPreferredLanguage

  """
  Owner's verified full name. Values are verified or provided by SOFORT directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

input Stripe_PaymentMethodDetailsStripeAccountInput {
  result: JSONObject
}

input Stripe_PaymentMethodDetailsUsBankAccountInput {
  """Account holder type: individual or company."""
  account_holder_type: UpdateProfileResultAccountHolderType

  """Account type: checkings or savings. Defaults to checking if omitted."""
  account_type: UpdateProfileResultAccountType

  """Name of the bank associated with the bank account."""
  bank_name: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Last four digits of the bank account number."""
  last4: String

  """Routing number of the bank account."""
  routing_number: String
}

input Stripe_PaymentMethodDetailsWechatInput {
  result: JSONObject
}

input Stripe_PaymentMethodDetailsWechatPayInput {
  """
  Uniquely identifies this particular WeChat Pay account. You can use this attribute to check whether two WeChat accounts are the same.
  """
  fingerprint: String

  """Transaction ID of this particular WeChat Pay transaction."""
  transaction_id: String
}

"""A list of refunds that have been applied to the charge."""
input UpdateProfilePropertiesPropertiesOrdersItemsPropertiesLastFinalizationErrorPropertiesPaymentIntentPropertiesChargesPropertiesDataItemsPropertiesRefundsPropertyInput {
  """Details about each object."""
  data: [Stripe_RefundInput!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: UpdateProfileResultObject!

  """The URL where this list can be accessed."""
  url: String!
}

input ReviewWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  review: Stripe_ReviewInput
}

input Stripe_ReviewInput {
  """The ZIP or postal code of the card used, if applicable."""
  billing_zip: String
  charge: ChargeWrappedStringInputUnion

  """
  The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.
  """
  closed_reason: UpdateProfileResultClosedReason

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """Unique identifier for the object."""
  id: String

  """The IP address where the payment originated."""
  ip_address: String
  ip_address_location: Stripe_RadarReviewResourceLocationInput

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject

  """If `true`, the review needs action."""
  open: Boolean

  """The reason the review was opened. One of `rule` or `manual`."""
  opened_reason: UpdateProfileResultOpenedReason
  payment_intent: PaymentIntentWrappedStringInputUnion

  """
  The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.
  """
  reason: String
  session: Stripe_RadarReviewResourceSessionInput
}

enum UpdateProfileResultClosedReason {
  approved
  disputed
  redacted
  refunded
  refunded_as_fraud
}

input Stripe_RadarReviewResourceLocationInput {
  """The city where the payment originated."""
  city: String

  """
  Two-letter ISO code representing the country where the payment originated.
  """
  country: String

  """The geographic latitude where the payment originated."""
  latitude: Float

  """The geographic longitude where the payment originated."""
  longitude: Float

  """The state/county/province/region where the payment originated."""
  region: String
}

enum UpdateProfileResultOpenedReason {
  manual
  rule
}

input Stripe_RadarReviewResourceSessionInput {
  """The browser used in this browser session (e.g., `Chrome`)."""
  browser: String

  """
  Information about the device used for the browser session (e.g., `Samsung SM-G930T`).
  """
  device: String

  """The platform for the browser session (e.g., `Macintosh`)."""
  platform: String

  """The version for the browser session (e.g., `61.0.3163.100`)."""
  version: String
}

input Stripe_ChargeTransferDataInput {
  """
  The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account.
  """
  amount: Int
  destination: AccountWrappedStringInputUnion
}

enum UpdateProfileResultConfirmationMethod {
  automatic
  manual
}

input Stripe_PaymentIntentNextActionInput {
  alipay_handle_redirect: Stripe_PaymentIntentNextActionAlipayHandleRedirectInput
  boleto_display_details: Stripe_PaymentIntentNextActionBoletoInput
  card_await_notification: Stripe_PaymentIntentNextActionCardAwaitNotificationInput
  display_bank_transfer_instructions: Stripe_PaymentIntentNextActionDisplayBankTransferInstructionsInput
  konbini_display_details: Stripe_PaymentIntentNextActionKonbiniInput
  oxxo_display_details: Stripe_PaymentIntentNextActionDisplayOxxoDetailsInput
  paynow_display_qr_code: Stripe_PaymentIntentNextActionPaynowDisplayQrCodeInput
  redirect_to_url: Stripe_PaymentIntentNextActionRedirectToUrlInput

  """
  Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`.
  """
  type: String

  """
  When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.
  """
  use_stripe_sdk: JSONObject
  verify_with_microdeposits: Stripe_PaymentIntentNextActionVerifyWithMicrodepositsInput
  wechat_pay_display_qr_code: Stripe_PaymentIntentNextActionWechatPayDisplayQrCodeInput
  wechat_pay_redirect_to_android_app: Stripe_PaymentIntentNextActionWechatPayRedirectToAndroidAppInput
  wechat_pay_redirect_to_ios_app: Stripe_PaymentIntentNextActionWechatPayRedirectToIosAppInput
}

input Stripe_PaymentIntentNextActionAlipayHandleRedirectInput {
  """
  The native data to be used with Alipay SDK you must redirect your customer to in order to authenticate the payment in an Android App.
  """
  native_data: String

  """
  The native URL you must redirect your customer to in order to authenticate the payment in an iOS App.
  """
  native_url: String

  """
  If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
  """
  return_url: String

  """
  The URL you must redirect your customer to in order to authenticate the payment.
  """
  url: String
}

input Stripe_PaymentIntentNextActionBoletoInput {
  """The timestamp after which the boleto expires."""
  expires_at: Int

  """
  The URL to the hosted boleto voucher page, which allows customers to view the boleto voucher.
  """
  hosted_voucher_url: String

  """The boleto number."""
  number: String

  """The URL to the downloadable boleto voucher PDF."""
  pdf: String
}

input Stripe_PaymentIntentNextActionCardAwaitNotificationInput {
  """
  The time that payment will be attempted. If customer approval is required, they need to provide approval before this time.
  """
  charge_attempt_at: Int

  """
  For payments greater than INR 5000, the customer must provide explicit approval of the payment with their bank. For payments of lower amount, no customer action is required.
  """
  customer_approval_required: Boolean
}

input Stripe_PaymentIntentNextActionDisplayBankTransferInstructionsInput {
  """
  The remaining amount that needs to be transferred to complete the payment.
  """
  amount_remaining: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  A list of financial addresses that can be used to fund the customer balance
  """
  financial_addresses: [Stripe_FundingInstructionsBankTransferFinancialAddressInput]

  """
  A string identifying this payment. Instruct your customer to include this code in the reference or memo field of their bank transfer.
  """
  reference: String

  """Type of bank transfer"""
  type: UpdateProfileResultType
}

input Stripe_FundingInstructionsBankTransferFinancialAddressInput {
  """The payment networks supported by this FinancialAddress"""
  supported_networks: [UpdateProfileResultSupportedNetworks]

  """The type of financial address"""
  type: UpdateProfileResultType
  zengin: Stripe_FundingInstructionsBankTransferZenginRecordInput
}

enum UpdateProfileResultSupportedNetworks {
  sepa
  zengin
}

input Stripe_FundingInstructionsBankTransferZenginRecordInput {
  result: JSONObject
}

input Stripe_PaymentIntentNextActionKonbiniInput {
  """The timestamp at which the pending Konbini payment expires."""
  expires_at: Int

  """
  The URL for the Konbini payment instructions page, which allows customers to view and print a Konbini voucher.
  """
  hosted_voucher_url: String
  stores: Stripe_PaymentIntentNextActionKonbiniStoresInput
}

input Stripe_PaymentIntentNextActionKonbiniStoresInput {
  familymart: Stripe_PaymentIntentNextActionKonbiniFamilymartInput
  lawson: Stripe_PaymentIntentNextActionKonbiniLawsonInput
  ministop: Stripe_PaymentIntentNextActionKonbiniMinistopInput
  seicomart: Stripe_PaymentIntentNextActionKonbiniSeicomartInput
}

input Stripe_PaymentIntentNextActionKonbiniFamilymartInput {
  """The confirmation number."""
  confirmation_number: String

  """The payment code."""
  payment_code: String
}

input Stripe_PaymentIntentNextActionKonbiniLawsonInput {
  """The confirmation number."""
  confirmation_number: String

  """The payment code."""
  payment_code: String
}

input Stripe_PaymentIntentNextActionKonbiniMinistopInput {
  """The confirmation number."""
  confirmation_number: String

  """The payment code."""
  payment_code: String
}

input Stripe_PaymentIntentNextActionKonbiniSeicomartInput {
  """The confirmation number."""
  confirmation_number: String

  """The payment code."""
  payment_code: String
}

input Stripe_PaymentIntentNextActionDisplayOxxoDetailsInput {
  """The timestamp after which the OXXO voucher expires."""
  expires_after: Int

  """
  The URL for the hosted OXXO voucher page, which allows customers to view and print an OXXO voucher.
  """
  hosted_voucher_url: String

  """OXXO reference number."""
  number: String
}

input Stripe_PaymentIntentNextActionPaynowDisplayQrCodeInput {
  """
  The raw data string used to generate QR code, it should be used together with QR code library.
  """
  data: String

  """The image_url_png string used to render QR code"""
  image_url_png: String

  """The image_url_svg string used to render QR code"""
  image_url_svg: String
}

input Stripe_PaymentIntentNextActionRedirectToUrlInput {
  """
  If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
  """
  return_url: String

  """
  The URL you must redirect your customer to in order to authenticate the payment.
  """
  url: String
}

input Stripe_PaymentIntentNextActionVerifyWithMicrodepositsInput {
  """The timestamp when the microdeposits are expected to land."""
  arrival_date: Int

  """
  The URL for the hosted verification page, which allows customers to verify their bank account.
  """
  hosted_verification_url: String

  """
  The type of the microdeposit sent to the customer. Used to distinguish between different verification methods.
  """
  microdeposit_type: UpdateProfileResultMicrodepositType
}

enum UpdateProfileResultMicrodepositType {
  amounts
  descriptor_code
}

input Stripe_PaymentIntentNextActionWechatPayDisplayQrCodeInput {
  """The data being used to generate QR code"""
  data: String

  """The base64 image data for a pre-generated QR code"""
  image_data_url: String

  """The image_url_png string used to render QR code"""
  image_url_png: String

  """The image_url_svg string used to render QR code"""
  image_url_svg: String
}

input Stripe_PaymentIntentNextActionWechatPayRedirectToAndroidAppInput {
  """app_id is the APP ID registered on WeChat open platform"""
  app_id: String

  """nonce_str is a random string"""
  nonce_str: String

  """package is static value"""
  package: String

  """an unique merchant ID assigned by WeChat Pay"""
  partner_id: String

  """an unique trading ID assigned by WeChat Pay"""
  prepay_id: String

  """A signature"""
  sign: String

  """Specifies the current time in epoch format"""
  timestamp: String
}

input Stripe_PaymentIntentNextActionWechatPayRedirectToIosAppInput {
  """An universal link that redirect to WeChat Pay app"""
  native_url: String
}

input Stripe_PaymentIntentPaymentMethodOptionsInput {
  acss_debit: PaymentIntentPaymentMethodOptionsAcssDebitPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion
  afterpay_clearpay: PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsAfterpayClearpayInputUnion
  alipay: PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsAlipayInputUnion
  au_becs_debit: PaymentIntentPaymentMethodOptionsAuBecsDebitPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion
  bacs_debit: PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsBacsDebitInputUnion
  bancontact: PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsBancontactInputUnion
  boleto: PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsBoletoInputUnion
  card: PaymentIntentPaymentMethodOptionsCardPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion
  card_present: PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsCardPresentInputUnion
  customer_balance: PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsCustomerBalanceInputUnion
  eps: PaymentIntentPaymentMethodOptionsEpsPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion
  fpx: PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsFpxInputUnion
  giropay: PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsGiropayInputUnion
  grabpay: PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsGrabpayInputUnion
  ideal: PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsIdealInputUnion
  interac_present: PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsInteracPresentInputUnion
  klarna: PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsKlarnaInputUnion
  konbini: PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsKonbiniInputUnion
  oxxo: PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsOxxoInputUnion
  p24: PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsP24InputUnion
  paynow: PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsPaynowInputUnion
  sepa_debit: PaymentIntentPaymentMethodOptionsSepaDebitPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion
  sofort: PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsSofortInputUnion
  us_bank_account: PaymentIntentPaymentMethodOptionsUsBankAccountPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion
  wechat_pay: PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsWechatPayInputUnion
}

input PaymentIntentPaymentMethodOptionsAcssDebitPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion {
  paymentIntentPaymentMethodOptionsAcssDebit: Stripe_PaymentIntentPaymentMethodOptionsAcssDebitInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentIntentPaymentMethodOptionsAcssDebitInput {
  mandate_options: Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitInput

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage

  """Bank account verification method."""
  verification_method: UpdateProfileResultVerificationMethod
}

input Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitInput {
  """A URL for custom mandate text"""
  custom_mandate_url: String

  """
  Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
  """
  interval_description: String

  """Payment schedule for the mandate."""
  payment_schedule: UpdateProfileResultPaymentSchedule

  """Transaction type of the mandate."""
  transaction_type: UpdateProfileResultTransactionType
}

enum UpdateProfileResultSetupFutureUsage {
  off_session
  on_session
}

enum UpdateProfileResultVerificationMethod {
  automatic
  instant
  microdeposits
}

input Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput {
  """Controls when the funds will be captured from the customer's account."""
  capture_method: UpdateProfileResultCaptureMethod

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage

  """Bank account verification method."""
  verification_method: UpdateProfileResultVerificationMethod
}

input PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsAfterpayClearpayInputUnion {
  paymentMethodOptionsAfterpayClearpay: Stripe_PaymentMethodOptionsAfterpayClearpayInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentMethodOptionsAfterpayClearpayInput {
  """Controls when the funds will be captured from the customer's account."""
  capture_method: UpdateProfileResultCaptureMethod

  """
  Order identifier shown to the customer in Afterpayâ€™s online portal. We recommend using a value that helps you answer any questions a customer might have about
  the payment. The identifier is limited to 128 characters and may contain only letters, digits, underscores, backslashes and dashes.
  """
  reference: String

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage
}

input PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsAlipayInputUnion {
  paymentMethodOptionsAlipay: Stripe_PaymentMethodOptionsAlipayInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentMethodOptionsAlipayInput {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage
}

input PaymentIntentPaymentMethodOptionsAuBecsDebitPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion {
  paymentIntentPaymentMethodOptionsAuBecsDebit: Stripe_PaymentIntentPaymentMethodOptionsAuBecsDebitInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentIntentPaymentMethodOptionsAuBecsDebitInput {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage
}

input PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsBacsDebitInputUnion {
  paymentMethodOptionsBacsDebit: Stripe_PaymentMethodOptionsBacsDebitInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentMethodOptionsBacsDebitInput {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage
}

input PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsBancontactInputUnion {
  paymentMethodOptionsBancontact: Stripe_PaymentMethodOptionsBancontactInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentMethodOptionsBancontactInput {
  """
  Preferred language of the Bancontact authorization page that the customer is redirected to.
  """
  preferred_language: UpdateProfileResultPreferredLanguage

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage
}

input PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsBoletoInputUnion {
  paymentMethodOptionsBoleto: Stripe_PaymentMethodOptionsBoletoInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentMethodOptionsBoletoInput {
  """
  The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time.
  """
  expires_after_days: Int

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage
}

input PaymentIntentPaymentMethodOptionsCardPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion {
  paymentIntentPaymentMethodOptionsCard: Stripe_PaymentIntentPaymentMethodOptionsCardInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentIntentPaymentMethodOptionsCardInput {
  """Controls when the funds will be captured from the customer's account."""
  capture_method: UpdateProfileResultCaptureMethod
  installments: Stripe_PaymentMethodOptionsCardInstallmentsInput
  mandate_options: Stripe_PaymentMethodOptionsCardMandateOptionsInput

  """
  Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time.
  """
  network: UpdateProfileResultNetwork

  """
  We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
  """
  request_three_d_secure: UpdateProfileResultRequestThreeDSecure

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage
}

input Stripe_PaymentMethodOptionsCardInstallmentsInput {
  """Installment plans that may be selected for this PaymentIntent."""
  available_plans: [Stripe_PaymentMethodDetailsCardInstallmentsPlanInput]

  """Whether Installments are enabled for this PaymentIntent."""
  enabled: Boolean
  plan: Stripe_PaymentMethodDetailsCardInstallmentsPlanInput
}

input Stripe_PaymentMethodOptionsCardMandateOptionsInput {
  """Amount to be charged for future payments."""
  amount: Int

  """
  One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
  """
  amount_type: UpdateProfileResultAmountType

  """
  A description of the mandate or subscription that is meant to be displayed to the customer.
  """
  description: String

  """
  End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date.
  """
  end_date: Int

  """
  Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`.
  """
  interval: UpdateProfileResultInterval

  """
  The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`.
  """
  interval_count: Int

  """Unique identifier for the mandate or subscription."""
  reference: String

  """
  Start date of the mandate or subscription. Start date should not be lesser than yesterday.
  """
  start_date: Int

  """Specifies the type of mandates supported. Possible values are `india`."""
  supported_types: [UpdateProfileResultSupportedTypes]
}

enum UpdateProfileResultAmountType {
  fixed
  maximum
}

enum UpdateProfileResultSupportedTypes {
  india
}

enum UpdateProfileResultNetwork {
  amex
  cartes_bancaires
  diners
  discover
  interac
  jcb
  mastercard
  unionpay
  unknown
  visa
}

enum UpdateProfileResultRequestThreeDSecure {
  any
  automatic
  challenge_only
}

input PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsCardPresentInputUnion {
  paymentMethodOptionsCardPresent: Stripe_PaymentMethodOptionsCardPresentInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentMethodOptionsCardPresentInput {
  """
  Request ability to capture this payment beyond the standard [authorization validity window](https://stripe.com/docs/terminal/features/extended-authorizations#authorization-validity)
  """
  request_extended_authorization: Boolean

  """
  Request ability to [increment](https://stripe.com/docs/terminal/features/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https://stripe.com/docs/api/payment_intents/confirm) response to verify support.
  """
  request_incremental_authorization_support: Boolean
}

input PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsCustomerBalanceInputUnion {
  paymentMethodOptionsCustomerBalance: Stripe_PaymentMethodOptionsCustomerBalanceInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentMethodOptionsCustomerBalanceInput {
  bank_transfer: Stripe_PaymentMethodOptionsCustomerBalanceBankTransferInput

  """
  The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
  """
  funding_type: UpdateProfileResultFundingType

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage
}

input Stripe_PaymentMethodOptionsCustomerBalanceBankTransferInput {
  """
  List of address types that should be returned in the financial_addresses response. If not specified, all valid types will be returned.
  
  Permitted values include: `zengin`.
  """
  requested_address_types: [UpdateProfileResultRequestedAddressTypes]

  """
  The bank transfer type that this PaymentIntent is allowed to use for funding. Permitted values include: `us_bank_account`, `eu_bank_account`, `id_bank_account`, `gb_bank_account`, `jp_bank_account`, `mx_bank_account`, `eu_bank_transfer`, `gb_bank_transfer`, `id_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
  """
  type: UpdateProfileResultType
}

enum UpdateProfileResultRequestedAddressTypes {
  zengin
}

enum UpdateProfileResultFundingType {
  bank_transfer
}

input PaymentIntentPaymentMethodOptionsEpsPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion {
  paymentIntentPaymentMethodOptionsEps: Stripe_PaymentIntentPaymentMethodOptionsEpsInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentIntentPaymentMethodOptionsEpsInput {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage
}

input PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsFpxInputUnion {
  paymentMethodOptionsFpx: Stripe_PaymentMethodOptionsFpxInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentMethodOptionsFpxInput {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage
}

input PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsGiropayInputUnion {
  paymentMethodOptionsGiropay: Stripe_PaymentMethodOptionsGiropayInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentMethodOptionsGiropayInput {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage
}

input PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsGrabpayInputUnion {
  paymentMethodOptionsGrabpay: Stripe_PaymentMethodOptionsGrabpayInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentMethodOptionsGrabpayInput {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage
}

input PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsIdealInputUnion {
  paymentMethodOptionsIdeal: Stripe_PaymentMethodOptionsIdealInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentMethodOptionsIdealInput {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage
}

input PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsInteracPresentInputUnion {
  paymentMethodOptionsInteracPresent: Stripe_PaymentMethodOptionsInteracPresentInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentMethodOptionsInteracPresentInput {
  result: JSONObject
}

input PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsKlarnaInputUnion {
  paymentMethodOptionsKlarna: Stripe_PaymentMethodOptionsKlarnaInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentMethodOptionsKlarnaInput {
  """Controls when the funds will be captured from the customer's account."""
  capture_method: UpdateProfileResultCaptureMethod

  """
  Preferred locale of the Klarna checkout page that the customer is redirected to.
  """
  preferred_locale: String

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage
}

input PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsKonbiniInputUnion {
  paymentMethodOptionsKonbini: Stripe_PaymentMethodOptionsKonbiniInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentMethodOptionsKonbiniInput {
  """
  An optional 10 to 11 digit numeric-only string determining the confirmation code at applicable convenience stores.
  """
  confirmation_number: String

  """
  The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST.
  """
  expires_after_days: Int

  """
  The timestamp at which the Konbini payment instructions will expire. Only one of `expires_after_days` or `expires_at` may be set.
  """
  expires_at: Int

  """
  A product descriptor of up to 22 characters, which will appear to customers at the convenience store.
  """
  product_description: String

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage
}

input PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsOxxoInputUnion {
  paymentMethodOptionsOxxo: Stripe_PaymentMethodOptionsOxxoInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentMethodOptionsOxxoInput {
  """
  The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time.
  """
  expires_after_days: Int

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage
}

input PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsP24InputUnion {
  paymentMethodOptionsP24: Stripe_PaymentMethodOptionsP24Input
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentMethodOptionsP24Input {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage
}

input PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsPaynowInputUnion {
  paymentMethodOptionsPaynow: Stripe_PaymentMethodOptionsPaynowInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentMethodOptionsPaynowInput {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage
}

input PaymentIntentPaymentMethodOptionsSepaDebitPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion {
  paymentIntentPaymentMethodOptionsSepaDebit: Stripe_PaymentIntentPaymentMethodOptionsSepaDebitInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentIntentPaymentMethodOptionsSepaDebitInput {
  mandate_options: Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebitInput

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage
}

input Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebitInput {
  result: JSONObject
}

input PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsSofortInputUnion {
  paymentMethodOptionsSofort: Stripe_PaymentMethodOptionsSofortInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentMethodOptionsSofortInput {
  """
  Preferred language of the SOFORT authorization page that the customer is redirected to.
  """
  preferred_language: UpdateProfileResultPreferredLanguage

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage
}

input PaymentIntentPaymentMethodOptionsUsBankAccountPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion {
  paymentIntentPaymentMethodOptionsUsBankAccount: Stripe_PaymentIntentPaymentMethodOptionsUsBankAccountInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentIntentPaymentMethodOptionsUsBankAccountInput {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage

  """Bank account verification method."""
  verification_method: UpdateProfileResultVerificationMethod
}

input PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsWechatPayInputUnion {
  paymentMethodOptionsWechatPay: Stripe_PaymentMethodOptionsWechatPayInput
  paymentIntentTypeSpecificPaymentMethodOptionsClient: Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_PaymentMethodOptionsWechatPayInput {
  """
  The app ID registered with WeChat Pay. Only required when client is ios or android.
  """
  app_id: String

  """The client type that the end customer will pay from"""
  client: UpdateProfileResultClient

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: UpdateProfileResultSetupFutureUsage
}

enum UpdateProfileResultClient {
  android
  ios
  web
}

input Stripe_PaymentIntentProcessingInput {
  card: Stripe_PaymentIntentCardProcessingInput

  """
  Type of the payment method for which payment is in `processing` state, one of `card`.
  """
  type: UpdateProfileResultType
}

input Stripe_PaymentIntentCardProcessingInput {
  customer_notification: Stripe_PaymentIntentProcessingCustomerNotificationInput
}

input Stripe_PaymentIntentProcessingCustomerNotificationInput {
  """
  Whether customer approval has been requested for this payment. For payments greater than INR 5000 or mandate amount, the customer must provide explicit approval of the payment with their bank.
  """
  approval_requested: Boolean

  """
  If customer approval is required, they need to provide approval before this time.
  """
  completes_at: Int
}

input Stripe_TransferDataInput {
  """
  Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  """
  amount: Int
  destination: AccountWrappedStringInputUnion
}

input Stripe_InvoiceitemInput {
  """
  Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`.
  """
  amount: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  customer: String

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  date: Int

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """
  If true, discounts will apply to this invoice item. Always false for prorations.
  """
  discountable: Boolean

  """
  The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
  """
  discounts: [DiscountWrappedStringInputUnion]

  """Unique identifier for the object."""
  id: String
  invoice: InvoiceWrappedStringInputUnion

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  period: Stripe_InvoiceLineItemPeriodInput
  price: Stripe_PriceInput

  """
  Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.
  """
  proration: Boolean

  """
  Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for.
  """
  quantity: Int
  subscription: SubscriptionWrappedStringInputUnion

  """
  The subscription item that this invoice item has been created for, if any.
  """
  subscription_item: String

  """
  The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item.
  """
  tax_rates: [Stripe_TaxRateInput]
  test_clock: TestHelpersTestClockWrappedStringInputUnion

  """Unit amount (in the `currency` specified) of the invoice item."""
  unit_amount: Int

  """
  Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
  """
  unit_amount_decimal: String
}

input DiscountWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  discount: Stripe_DiscountInput
}

input Stripe_InvoiceLineItemPeriodInput {
  """
  The end of the period, which must be greater than or equal to the start.
  """
  end: Int

  """The start of the period."""
  start: Int
}

input SubscriptionWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  subscription: Stripe_SubscriptionInput
}

input Stripe_SubscriptionInput {
  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account.
  """
  application_fee_percent: Float
  automatic_tax: Stripe_SubscriptionAutomaticTaxInput

  """
  Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
  """
  billing_cycle_anchor: Int
  billing_thresholds: Stripe_SubscriptionBillingThresholdsInput

  """
  A date in the future at which the subscription will automatically get canceled
  """
  cancel_at: Int

  """
  If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.
  """
  cancel_at_period_end: Boolean

  """
  If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
  """
  canceled_at: Int

  """
  Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
  """
  collection_method: UpdateProfileResultCollectionMethod

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
  """
  current_period_end: Int

  """
  Start of the current period that the subscription has been invoiced for.
  """
  current_period_start: Int
  customer: String

  """
  Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`.
  """
  days_until_due: Int
  default_payment_method: PaymentMethodWrappedStringInputUnion
  default_source: AlipayAccountBankAccountBitcoinReceiverCardSourceWrappedStringInputUnion

  """
  The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription.
  """
  default_tax_rates: [Stripe_TaxRateInput]
  discount: Stripe_DiscountInput

  """If the subscription has ended, the date the subscription ended."""
  ended_at: Int

  """Unique identifier for the object."""
  id: String

  """List of subscription items, each with an attached price."""
  items: PropertiesSubscriptionPropertiesItemsPropertyInput
  latest_invoice: InvoiceWrappedStringInputUnion

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`.
  """
  next_pending_invoice_item_invoice: Int

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  pause_collection: Stripe_SubscriptionsResourcePauseCollectionInput
  payment_settings: Stripe_SubscriptionsResourcePaymentSettingsInput
  pending_invoice_item_interval: Stripe_SubscriptionPendingInvoiceItemIntervalInput
  pending_setup_intent: SetupIntentWrappedStringInputUnion
  pending_update: Stripe_SubscriptionsResourcePendingUpdateInput
  schedule: SubscriptionScheduleWrappedStringInputUnion

  """
  Date when the subscription was first created. The date might differ from the `created` date due to backdating.
  """
  start_date: Int

  """
  Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`. 
  
  For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated. 
  
  A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over. 
  
  If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts. 
  
  If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
  """
  status: UpdateProfileResultStatus
  test_clock: TestHelpersTestClockWrappedStringInputUnion
  transfer_data: Stripe_SubscriptionTransferDataInput

  """If the subscription has a trial, the end of that trial."""
  trial_end: Int

  """If the subscription has a trial, the beginning of that trial."""
  trial_start: Int
}

input Stripe_SubscriptionAutomaticTaxInput {
  """Whether Stripe automatically computes tax on this subscription."""
  enabled: Boolean
}

input Stripe_SubscriptionBillingThresholdsInput {
  """Monetary threshold that triggers the subscription to create an invoice"""
  amount_gte: Int

  """
  Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`.
  """
  reset_billing_cycle_anchor: Boolean
}

enum UpdateProfileResultCollectionMethod {
  charge_automatically
  send_invoice
}

input Stripe_TaxRateInput {
  """
  Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
  """
  active: Boolean

  """
  Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  """
  country: String

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
  """
  description: String

  """
  The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page.
  """
  display_name: String

  """Unique identifier for the object."""
  id: String

  """This specifies if the tax rate is inclusive or exclusive."""
  inclusive: Boolean

  """
  The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customerâ€™s invoice.
  """
  jurisdiction: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject

  """This represents the tax rate percent out of 100."""
  percentage: Float

  """
  [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States.
  """
  state: String

  """The high-level tax type, such as `vat` or `sales_tax`."""
  tax_type: UpdateProfileResultTaxType
}

enum UpdateProfileResultTaxType {
  gst
  hst
  jct
  pst
  qst
  rst
  sales_tax
  vat
}

"""List of subscription items, each with an attached price."""
input PropertiesSubscriptionPropertiesItemsPropertyInput {
  """Details about each object."""
  data: [Stripe_SubscriptionItemInput!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: UpdateProfileResultObject!

  """The URL where this list can be accessed."""
  url: String!
}

input Stripe_SubscriptionItemInput {
  billing_thresholds: Stripe_SubscriptionItemBillingThresholdsInput

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """Unique identifier for the object."""
  id: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  price: Stripe_PriceInput

  """
  The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed.
  """
  quantity: Int

  """The `subscription` this `subscription_item` belongs to."""
  subscription: String

  """
  The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`.
  """
  tax_rates: [Stripe_TaxRateInput]
}

input Stripe_SubscriptionItemBillingThresholdsInput {
  """Usage threshold that triggers the subscription to create an invoice"""
  usage_gte: Int
}

input Stripe_SubscriptionsResourcePauseCollectionInput {
  """
  The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`.
  """
  behavior: UpdateProfileResultBehavior

  """The time after which the subscription will resume collecting payments."""
  resumes_at: Int
}

enum UpdateProfileResultBehavior {
  keep_as_draft
  mark_uncollectible
  void
}

input Stripe_SubscriptionsResourcePaymentSettingsInput {
  payment_method_options: Stripe_SubscriptionsResourcePaymentMethodOptionsInput

  """
  The list of payment method types to provide to every invoice created by the subscription. If not set, Stripe attempts to automatically determine the types to use by looking at the invoiceâ€™s default payment method, the subscriptionâ€™s default payment method, the customerâ€™s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).
  """
  payment_method_types: [UpdateProfileResultPaymentMethodTypes]
}

input Stripe_SubscriptionsResourcePaymentMethodOptionsInput {
  acss_debit: Stripe_InvoicePaymentMethodOptionsAcssDebitInput
  bancontact: Stripe_InvoicePaymentMethodOptionsBancontactInput
  card: Stripe_SubscriptionPaymentMethodOptionsCardInput
  customer_balance: Stripe_InvoicePaymentMethodOptionsCustomerBalanceInput
  konbini: Stripe_InvoicePaymentMethodOptionsKonbiniInput
  us_bank_account: Stripe_InvoicePaymentMethodOptionsUsBankAccountInput
}

input Stripe_InvoicePaymentMethodOptionsAcssDebitInput {
  mandate_options: Stripe_InvoicePaymentMethodOptionsAcssDebitMandateOptionsInput

  """Bank account verification method."""
  verification_method: UpdateProfileResultVerificationMethod
}

input Stripe_InvoicePaymentMethodOptionsAcssDebitMandateOptionsInput {
  """Transaction type of the mandate."""
  transaction_type: UpdateProfileResultTransactionType
}

input Stripe_InvoicePaymentMethodOptionsBancontactInput {
  """
  Preferred language of the Bancontact authorization page that the customer is redirected to.
  """
  preferred_language: UpdateProfileResultPreferredLanguage
}

input Stripe_SubscriptionPaymentMethodOptionsCardInput {
  mandate_options: Stripe_InvoiceMandateOptionsCardInput

  """
  We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
  """
  request_three_d_secure: UpdateProfileResultRequestThreeDSecure
}

input Stripe_InvoiceMandateOptionsCardInput {
  """Amount to be charged for future payments."""
  amount: Int

  """
  One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
  """
  amount_type: UpdateProfileResultAmountType

  """
  A description of the mandate or subscription that is meant to be displayed to the customer.
  """
  description: String
}

input Stripe_InvoicePaymentMethodOptionsCustomerBalanceInput {
  bank_transfer: Stripe_InvoicePaymentMethodOptionsCustomerBalanceBankTransferInput

  """
  The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
  """
  funding_type: UpdateProfileResultFundingType
}

input Stripe_InvoicePaymentMethodOptionsCustomerBalanceBankTransferInput {
  """
  The bank transfer type that can be used for funding. Permitted values include: `us_bank_account`, `eu_bank_account`, `id_bank_account`, `gb_bank_account`, `jp_bank_account`, `mx_bank_account`, `eu_bank_transfer`, `gb_bank_transfer`, `id_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
  """
  type: String
}

input Stripe_InvoicePaymentMethodOptionsKonbiniInput {
  result: JSONObject
}

input Stripe_InvoicePaymentMethodOptionsUsBankAccountInput {
  """Bank account verification method."""
  verification_method: UpdateProfileResultVerificationMethod
}

enum UpdateProfileResultPaymentMethodTypes {
  ach_credit_transfer
  ach_debit
  acss_debit
  au_becs_debit
  bacs_debit
  bancontact
  boleto
  card
  customer_balance
  fpx
  giropay
  grabpay
  ideal
  konbini
  paynow
  sepa_debit
  sofort
  us_bank_account
  wechat_pay
}

input Stripe_SubscriptionPendingInvoiceItemIntervalInput {
  """
  Specifies invoicing frequency. Either `day`, `week`, `month` or `year`.
  """
  interval: UpdateProfileResultInterval

  """
  The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).
  """
  interval_count: Int
}

input SetupIntentWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  setupIntent: Stripe_SetupIntentInput
}

input Stripe_SetupIntentInput {
  application: ApplicationWrappedStringInputUnion

  """
  Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`.
  """
  cancellation_reason: UpdateProfileResultCancellationReason

  """
  The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.
  
  The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
  """
  client_secret: String

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  customer: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """Unique identifier for the object."""
  id: String
  last_setup_error: Stripe_ApiErrorsInput
  latest_attempt: SetupAttemptWrappedStringInputUnion

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean
  mandate: MandateWrappedStringInputUnion

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject
  next_action: Stripe_SetupIntentNextActionInput

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  on_behalf_of: AccountWrappedStringInputUnion
  payment_method: PaymentMethodWrappedStringInputUnion
  payment_method_options: Stripe_SetupIntentPaymentMethodOptionsInput

  """
  The list of payment method types (e.g. card) that this SetupIntent is allowed to set up.
  """
  payment_method_types: [String]
  single_use_mandate: MandateWrappedStringInputUnion

  """
  [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`.
  """
  status: UpdateProfileResultStatus

  """
  Indicates how the payment method is intended to be used in the future.
  
  Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.
  """
  usage: String
}

input Stripe_SetupIntentNextActionInput {
  redirect_to_url: Stripe_SetupIntentNextActionRedirectToUrlInput

  """
  Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`.
  """
  type: String

  """
  When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.
  """
  use_stripe_sdk: JSONObject
  verify_with_microdeposits: Stripe_SetupIntentNextActionVerifyWithMicrodepositsInput
}

input Stripe_SetupIntentNextActionRedirectToUrlInput {
  """
  If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
  """
  return_url: String

  """The URL you must redirect your customer to in order to authenticate."""
  url: String
}

input Stripe_SetupIntentNextActionVerifyWithMicrodepositsInput {
  """The timestamp when the microdeposits are expected to land."""
  arrival_date: Int

  """
  The URL for the hosted verification page, which allows customers to verify their bank account.
  """
  hosted_verification_url: String

  """
  The type of the microdeposit sent to the customer. Used to distinguish between different verification methods.
  """
  microdeposit_type: UpdateProfileResultMicrodepositType
}

input Stripe_SetupIntentPaymentMethodOptionsInput {
  acss_debit: SetupIntentPaymentMethodOptionsAcssDebitSetupIntentTypeSpecificPaymentMethodOptionsClientInputUnion
  card: Stripe_SetupIntentPaymentMethodOptionsCardInput
  sepa_debit: SetupIntentPaymentMethodOptionsSepaDebitSetupIntentTypeSpecificPaymentMethodOptionsClientInputUnion
  us_bank_account: SetupIntentPaymentMethodOptionsUsBankAccountSetupIntentTypeSpecificPaymentMethodOptionsClientInputUnion
}

input SetupIntentPaymentMethodOptionsAcssDebitSetupIntentTypeSpecificPaymentMethodOptionsClientInputUnion {
  setupIntentPaymentMethodOptionsAcssDebit: Stripe_SetupIntentPaymentMethodOptionsAcssDebitInput
  setupIntentTypeSpecificPaymentMethodOptionsClient: Stripe_SetupIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_SetupIntentPaymentMethodOptionsAcssDebitInput {
  """Currency supported by the bank account"""
  currency: UpdateProfileResultCurrency
  mandate_options: Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitInput

  """Bank account verification method."""
  verification_method: UpdateProfileResultVerificationMethod
}

enum UpdateProfileResultCurrency {
  cad
  usd
}

input Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitInput {
  """A URL for custom mandate text"""
  custom_mandate_url: String

  """
  List of Stripe products where this mandate can be selected automatically.
  """
  default_for: [UpdateProfileResultDefaultFor]

  """
  Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
  """
  interval_description: String

  """Payment schedule for the mandate."""
  payment_schedule: UpdateProfileResultPaymentSchedule

  """Transaction type of the mandate."""
  transaction_type: UpdateProfileResultTransactionType
}

input Stripe_SetupIntentTypeSpecificPaymentMethodOptionsClientInput {
  """Bank account verification method."""
  verification_method: UpdateProfileResultVerificationMethod
}

input Stripe_SetupIntentPaymentMethodOptionsCardInput {
  mandate_options: Stripe_SetupIntentPaymentMethodOptionsCardMandateOptionsInput

  """
  We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
  """
  request_three_d_secure: UpdateProfileResultRequestThreeDSecure
}

input Stripe_SetupIntentPaymentMethodOptionsCardMandateOptionsInput {
  """Amount to be charged for future payments."""
  amount: Int

  """
  One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
  """
  amount_type: UpdateProfileResultAmountType

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  A description of the mandate or subscription that is meant to be displayed to the customer.
  """
  description: String

  """
  End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date.
  """
  end_date: Int

  """
  Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`.
  """
  interval: UpdateProfileResultInterval

  """
  The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`.
  """
  interval_count: Int

  """Unique identifier for the mandate or subscription."""
  reference: String

  """
  Start date of the mandate or subscription. Start date should not be lesser than yesterday.
  """
  start_date: Int

  """Specifies the type of mandates supported. Possible values are `india`."""
  supported_types: [UpdateProfileResultSupportedTypes]
}

input SetupIntentPaymentMethodOptionsSepaDebitSetupIntentTypeSpecificPaymentMethodOptionsClientInputUnion {
  setupIntentPaymentMethodOptionsSepaDebit: Stripe_SetupIntentPaymentMethodOptionsSepaDebitInput
  setupIntentTypeSpecificPaymentMethodOptionsClient: Stripe_SetupIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_SetupIntentPaymentMethodOptionsSepaDebitInput {
  mandate_options: Stripe_SetupIntentPaymentMethodOptionsMandateOptionsSepaDebitInput
}

input Stripe_SetupIntentPaymentMethodOptionsMandateOptionsSepaDebitInput {
  result: JSONObject
}

input SetupIntentPaymentMethodOptionsUsBankAccountSetupIntentTypeSpecificPaymentMethodOptionsClientInputUnion {
  setupIntentPaymentMethodOptionsUsBankAccount: Stripe_SetupIntentPaymentMethodOptionsUsBankAccountInput
  setupIntentTypeSpecificPaymentMethodOptionsClient: Stripe_SetupIntentTypeSpecificPaymentMethodOptionsClientInput
}

input Stripe_SetupIntentPaymentMethodOptionsUsBankAccountInput {
  """Bank account verification method."""
  verification_method: UpdateProfileResultVerificationMethod
}

input Stripe_SubscriptionsResourcePendingUpdateInput {
  """
  If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
  """
  billing_cycle_anchor: Int

  """
  The point after which the changes reflected by this update will be discarded and no longer applied.
  """
  expires_at: Int

  """
  List of subscription items, each with an attached plan, that will be set if the update is applied.
  """
  subscription_items: [Stripe_SubscriptionItemInput]

  """
  Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied.
  """
  trial_end: Int

  """
  Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
  """
  trial_from_plan: Boolean
}

input SubscriptionScheduleWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  subscriptionSchedule: Stripe_SubscriptionScheduleInput
}

input Stripe_SubscriptionScheduleInput {
  """
  Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.
  """
  canceled_at: Int

  """
  Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.
  """
  completed_at: Int

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  current_phase: Stripe_SubscriptionScheduleCurrentPhaseInput
  customer: CustomerDeletedCustomerWrappedStringInputUnion
  default_settings: Stripe_SubscriptionSchedulesResourceDefaultSettingsInput

  """
  Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` and `cancel`.
  """
  end_behavior: UpdateProfileResultEndBehavior

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject

  """Configuration for the subscription schedule's phases."""
  phases: [Stripe_SubscriptionSchedulePhaseConfigurationInput]

  """
  Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.
  """
  released_at: Int

  """
  ID of the subscription once managed by the subscription schedule (if it is released).
  """
  released_subscription: String

  """
  The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
  """
  status: UpdateProfileResultStatus
  subscription: SubscriptionWrappedStringInputUnion
  test_clock: TestHelpersTestClockWrappedStringInputUnion
}

input Stripe_SubscriptionScheduleCurrentPhaseInput {
  """The end of this phase of the subscription schedule."""
  end_date: Int

  """The start of this phase of the subscription schedule."""
  start_date: Int
}

input Stripe_SubscriptionSchedulesResourceDefaultSettingsInput {
  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule.
  """
  application_fee_percent: Float
  automatic_tax: Stripe_SubscriptionSchedulesResourceDefaultSettingsAutomaticTaxInput

  """
  Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
  """
  billing_cycle_anchor: UpdateProfileResultBillingCycleAnchor
  billing_thresholds: Stripe_SubscriptionBillingThresholdsInput

  """
  Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
  """
  collection_method: UpdateProfileResultCollectionMethod
  default_payment_method: PaymentMethodWrappedStringInputUnion
  invoice_settings: Stripe_InvoiceSettingSubscriptionScheduleSettingInput
  transfer_data: Stripe_SubscriptionTransferDataInput
}

input Stripe_SubscriptionSchedulesResourceDefaultSettingsAutomaticTaxInput {
  """
  Whether Stripe automatically computes tax on invoices created during this phase.
  """
  enabled: Boolean
}

enum UpdateProfileResultBillingCycleAnchor {
  automatic
  phase_start
}

input Stripe_InvoiceSettingSubscriptionScheduleSettingInput {
  """
  Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.
  """
  days_until_due: Int
}

input Stripe_SubscriptionTransferDataInput {
  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
  """
  amount_percent: Float
  destination: AccountWrappedStringInputUnion
}

enum UpdateProfileResultEndBehavior {
  cancel
  none
  release
  renew
}

input Stripe_SubscriptionSchedulePhaseConfigurationInput {
  """
  A list of prices and quantities that will generate invoice items appended to the first invoice for this phase.
  """
  add_invoice_items: [Stripe_SubscriptionScheduleAddInvoiceItemInput]

  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule.
  """
  application_fee_percent: Float
  automatic_tax: Stripe_SchedulesPhaseAutomaticTaxInput

  """
  Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
  """
  billing_cycle_anchor: UpdateProfileResultBillingCycleAnchor
  billing_thresholds: Stripe_SubscriptionBillingThresholdsInput

  """
  Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
  """
  collection_method: UpdateProfileResultCollectionMethod
  coupon: CouponDeletedCouponWrappedStringInputUnion
  default_payment_method: PaymentMethodWrappedStringInputUnion

  """
  The default tax rates to apply to the subscription during this phase of the subscription schedule.
  """
  default_tax_rates: [Stripe_TaxRateInput]

  """The end of this phase of the subscription schedule."""
  end_date: Int
  invoice_settings: Stripe_InvoiceSettingSubscriptionScheduleSettingInput

  """
  Subscription items to configure the subscription to during this phase of the subscription schedule.
  """
  items: [Stripe_SubscriptionScheduleConfigurationItemInput]

  """
  If the subscription schedule will prorate when transitioning to this phase. Possible values are `create_prorations` and `none`.
  """
  proration_behavior: UpdateProfileResultProrationBehavior

  """The start of this phase of the subscription schedule."""
  start_date: Int
  transfer_data: Stripe_SubscriptionTransferDataInput

  """When the trial ends within the phase."""
  trial_end: Int
}

input Stripe_SubscriptionScheduleAddInvoiceItemInput {
  price: DeletedPricePriceWrappedStringInputUnion

  """The quantity of the invoice item."""
  quantity: Int

  """
  The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item.
  """
  tax_rates: [Stripe_TaxRateInput]
}

input DeletedPricePriceWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  price: Stripe_PriceInput
  deletedPrice: Stripe_DeletedPriceInput
}

input Stripe_DeletedPriceInput {
  """Always true for a deleted object"""
  deleted: Boolean

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
}

input Stripe_SchedulesPhaseAutomaticTaxInput {
  """
  Whether Stripe automatically computes tax on invoices created during this phase.
  """
  enabled: Boolean
}

input CouponDeletedCouponWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  coupon: Stripe_CouponInput
  deletedCoupon: Stripe_DeletedCouponInput
}

input Stripe_DeletedCouponInput {
  """Always true for a deleted object"""
  deleted: Boolean

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
}

input Stripe_SubscriptionScheduleConfigurationItemInput {
  billing_thresholds: Stripe_SubscriptionItemBillingThresholdsInput
  price: DeletedPricePriceWrappedStringInputUnion

  """Quantity of the plan to which the customer should be subscribed."""
  quantity: Int

  """
  The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`.
  """
  tax_rates: [Stripe_TaxRateInput]
}

enum UpdateProfileResultProrationBehavior {
  always_invoice
  create_prorations
  none
}

input TestHelpersTestClockWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  testHelpersTestClock: Stripe_TestHelpersTestClockInput
}

input Stripe_TestHelpersTestClockInput {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """Time at which this clock is scheduled to auto delete."""
  deletes_after: Int

  """Time at which all objects belonging to this clock are frozen."""
  frozen_time: Int

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """The custom name supplied at creation."""
  name: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject

  """The status of the Test Clock."""
  status: UpdateProfileResultStatus
}

input Stripe_ItemInput {
  """Total before any discounts or taxes are applied."""
  amount_subtotal: Int

  """Total after discounts and taxes."""
  amount_total: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name.
  """
  description: String

  """The discounts applied to the line item."""
  discounts: [Stripe_LineItemsDiscountAmountInput]

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  price: Stripe_PriceInput

  """The quantity of products being purchased."""
  quantity: Int

  """The taxes applied to the line item."""
  taxes: [Stripe_LineItemsTaxAmountInput]
}

input Stripe_LineItemsDiscountAmountInput {
  """The amount discounted."""
  amount: Int
  discount: Stripe_DiscountInput
}

input Stripe_LineItemsTaxAmountInput {
  """Amount of tax applied for this rate."""
  amount: Int
  rate: Stripe_TaxRateInput
}

input BankAccountCardSourceInputUnion {
  bankAccount: Stripe_BankAccountInput
  card: Stripe_CardInput
  source: Stripe_SourceInput
}

input Stripe_NetworksInput {
  """All available networks for the card."""
  available: [String]

  """The preferred network for the card."""
  preferred: String
}

input Stripe_ThreeDSecureUsageInput {
  """Whether 3D Secure is supported on this card."""
  supported: Boolean
}

input Stripe_PaymentMethodCardWalletInput {
  amex_express_checkout: Stripe_PaymentMethodCardWalletAmexExpressCheckoutInput
  apple_pay: Stripe_PaymentMethodCardWalletApplePayInput

  """
  (For tokenized numbers only.) The last four digits of the device account number.
  """
  dynamic_last4: String
  google_pay: Stripe_PaymentMethodCardWalletGooglePayInput
  masterpass: Stripe_PaymentMethodCardWalletMasterpassInput
  samsung_pay: Stripe_PaymentMethodCardWalletSamsungPayInput

  """
  The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
  """
  type: UpdateProfileResultType
  visa_checkout: Stripe_PaymentMethodCardWalletVisaCheckoutInput
}

input Stripe_PaymentMethodCardWalletAmexExpressCheckoutInput {
  result: JSONObject
}

input Stripe_PaymentMethodCardWalletApplePayInput {
  result: JSONObject
}

input Stripe_PaymentMethodCardWalletGooglePayInput {
  result: JSONObject
}

input Stripe_PaymentMethodCardWalletMasterpassInput {
  billing_address: Stripe_AddressInput

  """
  Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  email: String

  """
  Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  name: String
  shipping_address: Stripe_AddressInput
}

input Stripe_PaymentMethodCardWalletSamsungPayInput {
  result: JSONObject
}

input Stripe_PaymentMethodCardWalletVisaCheckoutInput {
  billing_address: Stripe_AddressInput

  """
  Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  email: String

  """
  Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  name: String
  shipping_address: Stripe_AddressInput
}

input Stripe_PaymentMethodCardPresentInput {
  result: JSONObject
}

input Stripe_PaymentMethodCustomerBalanceInput {
  result: JSONObject
}

input Stripe_PaymentMethodEpsInput {
  """
  The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
  """
  bank: UpdateProfileResultBank
}

input Stripe_PaymentMethodFpxInput {
  """
  The customer's bank, if provided. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`.
  """
  bank: UpdateProfileResultBank
}

input Stripe_PaymentMethodGiropayInput {
  result: JSONObject
}

input Stripe_PaymentMethodGrabpayInput {
  result: JSONObject
}

input Stripe_PaymentMethodIdealInput {
  """
  The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
  """
  bank: UpdateProfileResultBank

  """
  The Bank Identifier Code of the customer's bank, if the bank was provided.
  """
  bic: UpdateProfileResultBic
}

input Stripe_PaymentMethodInteracPresentInput {
  result: JSONObject
}

input Stripe_PaymentMethodKlarnaInput {
  dob: Stripe_PaymentFlowsPrivatePaymentMethodsKlarnaDobInput
}

input Stripe_PaymentFlowsPrivatePaymentMethodsKlarnaDobInput {
  """The day of birth, between 1 and 31."""
  day: Int

  """The month of birth, between 1 and 12."""
  month: Int

  """The four-digit year of birth."""
  year: Int
}

input Stripe_PaymentMethodKonbiniInput {
  result: JSONObject
}

input Stripe_PaymentMethodOxxoInput {
  result: JSONObject
}

input Stripe_PaymentMethodP24Input {
  """The customer's bank, if provided."""
  bank: UpdateProfileResultBank
}

input Stripe_PaymentMethodPaynowInput {
  result: JSONObject
}

input Stripe_PaymentMethodSepaDebitInput {
  """Bank code of bank associated with the bank account."""
  bank_code: String

  """Branch code of bank associated with the bank account."""
  branch_code: String

  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String
  generated_from: Stripe_SepaDebitGeneratedFromInput

  """Last four characters of the IBAN."""
  last4: String
}

input Stripe_SepaDebitGeneratedFromInput {
  charge: ChargeWrappedStringInputUnion
  setup_attempt: SetupAttemptWrappedStringInputUnion
}

input Stripe_PaymentMethodSofortInput {
  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String
}

input Stripe_PaymentMethodUsBankAccountInput {
  """Account holder type: individual or company."""
  account_holder_type: UpdateProfileResultAccountHolderType

  """Account type: checkings or savings. Defaults to checking if omitted."""
  account_type: UpdateProfileResultAccountType

  """The name of the bank."""
  bank_name: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Last four digits of the bank account number."""
  last4: String

  """Routing number of the bank account."""
  routing_number: String
}

input Stripe_PaymentMethodWechatPayInput {
  result: JSONObject
}

"""The customer's payment sources, if any."""
input PropertiesCustomerPropertiesSourcesPropertyInput {
  """Details about each object."""
  data: [AlipayAccountBankAccountBitcoinReceiverCardSourceInputUnion!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: UpdateProfileResultObject!

  """The URL where this list can be accessed."""
  url: String!
}

input AlipayAccountBankAccountBitcoinReceiverCardSourceInputUnion {
  alipayAccount: Stripe_AlipayAccountInput
  bankAccount: Stripe_BankAccountInput
  bitcoinReceiver: Stripe_BitcoinReceiverInput
  card: Stripe_CardInput
  source: Stripe_SourceInput
}

"""The customer's current subscriptions, if any."""
input PropertiesCustomerPropertiesSubscriptionsPropertyInput {
  """Details about each object."""
  data: [Stripe_SubscriptionInput!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: UpdateProfileResultObject!

  """The URL where this list can be accessed."""
  url: String!
}

input Stripe_CustomerTaxInput {
  """
  Surfaces if automatic tax computation is possible given the current customer location information.
  """
  automatic_tax: UpdateProfileResultAutomaticTax

  """
  A recent IP address of the customer used for tax reporting and tax location inference.
  """
  ip_address: String
  location: Stripe_CustomerTaxLocationInput
}

enum UpdateProfileResultAutomaticTax {
  failed
  not_collecting
  supported
  unrecognized_location
}

input Stripe_CustomerTaxLocationInput {
  """The customer's country as identified by Stripe Tax."""
  country: String

  """The data source used to infer the customer's location."""
  source: UpdateProfileResultSource

  """
  The customer's state, county, province, or region as identified by Stripe Tax.
  """
  state: String
}

enum UpdateProfileResultSource {
  billing_address
  ip_address
  payment_method
  shipping_destination
}

enum UpdateProfileResultTaxExempt {
  exempt
  none
  reverse
}

"""The customer's tax IDs."""
input PropertiesCustomerPropertiesTaxIdsPropertyInput {
  """Details about each object."""
  data: [Stripe_TaxIdInput!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: UpdateProfileResultObject!

  """The URL where this list can be accessed."""
  url: String!
}

input Stripe_TaxIdVerificationInput {
  """
  Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`.
  """
  status: UpdateProfileResultStatus

  """Verified address."""
  verified_address: String

  """Verified name."""
  verified_name: String
}

input Stripe_AutomaticTaxInput {
  """Whether Stripe automatically computes tax on this invoice."""
  enabled: Boolean

  """
  The status of the most recent automated tax calculation for this invoice.
  """
  status: UpdateProfileResultStatus
}

enum UpdateProfileResultBillingReason {
  automatic_pending_invoice_item_invoice
  manual
  quote_accept
  subscription
  subscription_create
  subscription_cycle
  subscription_threshold
  subscription_update
  upcoming
}

enum UpdateProfileResultCustomerTaxExempt {
  exempt
  none
  reverse
}

input Stripe_InvoicesResourceInvoiceTaxIdInput {
  """
  The type of the tax ID, one of `eu_vat`, `br_cnpj`, `br_cpf`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, or `unknown`
  """
  type: UpdateProfileResultType

  """The value of the tax ID."""
  value: String
}

"""
The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.
"""
input UpdateProfilePropertiesPropertiesOrdersItemsPropertiesLinesPropertyInput {
  """Details about each object."""
  data: [Stripe_LineItemInput!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: UpdateProfileResultObject!

  """The URL where this list can be accessed."""
  url: String!
}

input Stripe_LineItemInput {
  """The amount, in %s."""
  amount: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """The amount of discount calculated per discount for this line item."""
  discount_amounts: [Stripe_DiscountsResourceDiscountAmountInput]

  """
  If true, discounts will apply to this line item. Always false for prorations.
  """
  discountable: Boolean

  """
  The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
  """
  discounts: [DiscountWrappedStringInputUnion]

  """Unique identifier for the object."""
  id: String

  """
  The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any.
  """
  invoice_item: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription` this will reflect the metadata of the subscription that caused the line item to be created.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  period: Stripe_InvoiceLineItemPeriodInput
  price: Stripe_PriceInput

  """Whether this is a proration."""
  proration: Boolean
  proration_details: Stripe_InvoicesLineItemsProrationDetailsInput

  """
  The quantity of the subscription, if the line item is a subscription or a proration.
  """
  quantity: Int

  """The subscription that the invoice item pertains to, if any."""
  subscription: String

  """
  The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription.
  """
  subscription_item: String

  """The amount of tax calculated per tax rate for this line item"""
  tax_amounts: [Stripe_InvoiceTaxAmountInput]

  """The tax rates which apply to the line item."""
  tax_rates: [Stripe_TaxRateInput]

  """
  A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`.
  """
  type: UpdateProfileResultType
}

input Stripe_DiscountsResourceDiscountAmountInput {
  """The amount, in %s, of the discount."""
  amount: Int
  discount: DeletedDiscountDiscountWrappedStringInputUnion
}

input DeletedDiscountDiscountWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  discount: Stripe_DiscountInput
  deletedDiscount: Stripe_DeletedDiscountInput
}

input Stripe_DeletedDiscountInput {
  """
  The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode.
  """
  checkout_session: String
  coupon: Stripe_CouponInput
  customer: String

  """Always true for a deleted object"""
  deleted: Boolean

  """
  The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array.
  """
  id: String

  """
  The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice.
  """
  invoice: String

  """
  The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item.
  """
  invoice_item: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  promotion_code: PromotionCodeWrappedStringInputUnion

  """Date that the coupon was applied."""
  start: Int

  """
  The subscription that this coupon is applied to, if it is applied to a particular subscription.
  """
  subscription: String
}

input Stripe_InvoicesLineItemsProrationDetailsInput {
  credited_items: Stripe_InvoicesLineItemsCreditedItemsInput
}

input Stripe_InvoicesLineItemsCreditedItemsInput {
  """Invoice containing the credited invoice line items"""
  invoice: String

  """Credited invoice line items"""
  invoice_line_items: [String]
}

input Stripe_InvoiceTaxAmountInput {
  """The amount, in %s, of the tax."""
  amount: Int

  """Whether this tax amount is inclusive or exclusive."""
  inclusive: Boolean
  tax_rate: TaxRateWrappedStringInputUnion
}

input TaxRateWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  taxRate: Stripe_TaxRateInput
}

input Stripe_InvoicesPaymentSettingsInput {
  payment_method_options: Stripe_InvoicesPaymentMethodOptionsInput

  """
  The list of payment method types (e.g. card) to provide to the invoiceâ€™s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoiceâ€™s default payment method, the subscriptionâ€™s default payment method, the customerâ€™s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).
  """
  payment_method_types: [UpdateProfileResultPaymentMethodTypes]
}

input Stripe_InvoicesPaymentMethodOptionsInput {
  acss_debit: Stripe_InvoicePaymentMethodOptionsAcssDebitInput
  bancontact: Stripe_InvoicePaymentMethodOptionsBancontactInput
  card: Stripe_InvoicePaymentMethodOptionsCardInput
  customer_balance: Stripe_InvoicePaymentMethodOptionsCustomerBalanceInput
  konbini: Stripe_InvoicePaymentMethodOptionsKonbiniInput
  us_bank_account: Stripe_InvoicePaymentMethodOptionsUsBankAccountInput
}

input Stripe_InvoicePaymentMethodOptionsCardInput {
  """
  We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
  """
  request_three_d_secure: UpdateProfileResultRequestThreeDSecure
}

input QuoteWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  quote: Stripe_QuoteInput
}

input Stripe_QuoteInput {
  """Total before any discounts or taxes are applied."""
  amount_subtotal: Int

  """Total after discounts and taxes are applied."""
  amount_total: Int

  """
  The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Only applicable if there are no line items with recurring prices on the quote.
  """
  application_fee_amount: Int

  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. Only applicable if there are line items with recurring prices on the quote.
  """
  application_fee_percent: Float
  automatic_tax: Stripe_QuotesResourceAutomaticTaxInput

  """
  Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.
  """
  collection_method: UpdateProfileResultCollectionMethod
  computed: Stripe_QuotesResourceComputedInput

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  customer: String

  """The tax rates applied to this quote."""
  default_tax_rates: [TaxRateWrappedStringInputUnion]

  """A description that will be displayed on the quote PDF."""
  description: String

  """The discounts applied to this quote."""
  discounts: [DiscountWrappedStringInputUnion]

  """
  The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
  """
  expires_at: Int

  """A footer that will be displayed on the quote PDF."""
  footer: String
  from_quote: Stripe_QuotesResourceFromQuoteInput

  """A header that will be displayed on the quote PDF."""
  header: String

  """Unique identifier for the object."""
  id: String
  invoice: DeletedInvoiceInvoiceWrappedStringInputUnion
  invoice_settings: Stripe_InvoiceSettingQuoteSettingInput

  """A list of items the customer is being quoted for."""
  line_items: PropertiesQuotePropertiesLineItemsPropertyInput

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize).
  """
  number: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
  on_behalf_of: AccountWrappedStringInputUnion

  """The status of the quote."""
  status: UpdateProfileResultStatus
  status_transitions: Stripe_QuotesResourceStatusTransitionsInput
  subscription: SubscriptionWrappedStringInputUnion
  subscription_data: Stripe_QuotesResourceSubscriptionDataInput
  subscription_schedule: SubscriptionScheduleWrappedStringInputUnion
  test_clock: TestHelpersTestClockWrappedStringInputUnion
  total_details: Stripe_QuotesResourceTotalDetailsInput
  transfer_data: Stripe_QuotesResourceTransferDataInput
}

input Stripe_QuotesResourceAutomaticTaxInput {
  """Automatically calculate taxes"""
  enabled: Boolean

  """
  The status of the most recent automated tax calculation for this quote.
  """
  status: UpdateProfileResultStatus
}

input Stripe_QuotesResourceComputedInput {
  recurring: Stripe_QuotesResourceRecurringInput
  upfront: Stripe_QuotesResourceUpfrontInput
}

input Stripe_QuotesResourceRecurringInput {
  """Total before any discounts or taxes are applied."""
  amount_subtotal: Int

  """Total after discounts and taxes are applied."""
  amount_total: Int

  """
  The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
  """
  interval: UpdateProfileResultInterval

  """
  The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
  """
  interval_count: Int
  total_details: Stripe_QuotesResourceTotalDetailsInput
}

input Stripe_QuotesResourceTotalDetailsInput {
  """This is the sum of all the discounts."""
  amount_discount: Int

  """This is the sum of all the shipping amounts."""
  amount_shipping: Int

  """This is the sum of all the tax amounts."""
  amount_tax: Int
  breakdown: Stripe_QuotesResourceTotalDetailsResourceBreakdownInput
}

input Stripe_QuotesResourceTotalDetailsResourceBreakdownInput {
  """The aggregated discounts."""
  discounts: [Stripe_LineItemsDiscountAmountInput]

  """The aggregated tax amounts by rate."""
  taxes: [Stripe_LineItemsTaxAmountInput]
}

input Stripe_QuotesResourceUpfrontInput {
  """Total before any discounts or taxes are applied."""
  amount_subtotal: Int

  """Total after discounts and taxes are applied."""
  amount_total: Int

  """
  The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice.
  """
  line_items: PropertiesQuotePropertiesComputedPropertiesUpfrontPropertiesLineItemsPropertyInput
  total_details: Stripe_QuotesResourceTotalDetailsInput
}

"""
The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice.
"""
input PropertiesQuotePropertiesComputedPropertiesUpfrontPropertiesLineItemsPropertyInput {
  """Details about each object."""
  data: [Stripe_ItemInput!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: UpdateProfileResultObject!

  """The URL where this list can be accessed."""
  url: String!
}

input Stripe_QuotesResourceFromQuoteInput {
  """Whether this quote is a revision of a different quote."""
  is_revision: Boolean
  quote: QuoteWrappedStringInputUnion
}

input DeletedInvoiceInvoiceWrappedStringInputUnion {
  wrappedString: WrappedStringInput
  invoice: Stripe_InvoiceInput
  deletedInvoice: Stripe_DeletedInvoiceInput
}

input Stripe_DeletedInvoiceInput {
  """Always true for a deleted object"""
  deleted: Boolean

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: UpdateProfileResultObject
}

input Stripe_InvoiceSettingQuoteSettingInput {
  """
  Number of days within which a customer must pay invoices generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`.
  """
  days_until_due: Int
}

"""A list of items the customer is being quoted for."""
input PropertiesQuotePropertiesLineItemsPropertyInput {
  """Details about each object."""
  data: [Stripe_ItemInput!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: UpdateProfileResultObject!

  """The URL where this list can be accessed."""
  url: String!
}

input Stripe_QuotesResourceStatusTransitionsInput {
  """
  The time that the quote was accepted. Measured in seconds since Unix epoch.
  """
  accepted_at: Int

  """
  The time that the quote was canceled. Measured in seconds since Unix epoch.
  """
  canceled_at: Int

  """
  The time that the quote was finalized. Measured in seconds since Unix epoch.
  """
  finalized_at: Int
}

input Stripe_QuotesResourceSubscriptionDataInput {
  """
  When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. This date is ignored if it is in the past when the quote is accepted. Measured in seconds since the Unix epoch.
  """
  effective_date: Int

  """
  Integer representing the number of trial period days before the customer is charged for the first time.
  """
  trial_period_days: Int
}

input Stripe_QuotesResourceTransferDataInput {
  """
  The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination.
  """
  amount: Int

  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount will be transferred to the destination.
  """
  amount_percent: Float
  destination: AccountWrappedStringInputUnion
}

input Stripe_InvoicesStatusTransitionsInput {
  """The time that the invoice draft was finalized."""
  finalized_at: Int

  """The time that the invoice was marked uncollectible."""
  marked_uncollectible_at: Int

  """The time that the invoice was paid."""
  paid_at: Int

  """The time that the invoice was voided."""
  voided_at: Int
}

input Stripe_InvoiceThresholdReasonInput {
  """
  The total invoice amount threshold boundary if it triggered the threshold invoice.
  """
  amount_gte: Int

  """Indicates which line items triggered a threshold invoice."""
  item_reasons: [Stripe_InvoiceItemThresholdReasonInput]
}

input Stripe_InvoiceItemThresholdReasonInput {
  """The IDs of the line items that triggered the threshold invoice."""
  line_item_ids: [String]

  """The quantity threshold boundary that applied to the given line item."""
  usage_gte: Int
}

input Stripe_InvoiceTransferDataInput {
  """
  The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination.
  """
  amount: Int
  destination: AccountWrappedStringInputUnion
}

type CreateProfileResult {
  clientMutationId: String
  result: Profile
}

"""create Profile input"""
input CreateProfileInput {
  """"""
  id: String

  """"""
  name: String

  """"""
  email: String

  """"""
  bio: String
  avatar: TSRelationshipInput

  """"""
  shopifyCustomerId: String

  """"""
  stripeCustomerId: String

  """"""
  orders: [Stripe_InvoiceInput]
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type DuplicateProfileResult {
  clientMutationId: String
  result: Profile
}

"""duplicate Profile input"""
input DuplicateProfileInput {
  _id: ID!

  """"""
  id: String

  """"""
  name: String

  """"""
  email: String

  """"""
  bio: String
  avatar: TSRelationshipInput

  """"""
  shopifyCustomerId: String

  """"""
  stripeCustomerId: String

  """"""
  orders: [Stripe_InvoiceInput]
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type DeleteProfileResult {
  clientMutationId: String
  result: Boolean
}

"""delete Profile input"""
input DeleteProfileInput {
  _id: ID!
}

type Voucherify_Order {
  id: String
}

input Voucherify_OrderItemInput {
  name: String
  id: String
  quantity: Int
  price: Int
}

input AddListMembersInput {
  profiles: [Klaviyo_AddMembersPropertiesPropertiesProfilesItemsPropertyInput!]!
}

input Klaviyo_AddMembersPropertiesPropertiesProfilesItemsPropertyInput {
  email: String
}

"\nThe profiles that you would like to remove from the list. \n\nExample:\n\n{\n  \"emails\":[\"george.washington@klaviyo.com\",\"abraham.lincoln@klaviyo.com\"],\n  \"phone_numbers\":[\"+13239169023\"],\n  \"push_tokens\":[\"03df25c845d460bcdad7802d2vf6fc1dfde97283bf75cc993eb6dca835ea2e2r\"]\n}\n"
input Klaviyo_RemoveMembersPropertiesPropertyInput {
  emails: [String]
  phone_numbers: [String]
  push_tokens: [String]
}

type Stripe_ListCheckoutSessionsResponse {
  data: [Stripe_CheckoutSession]

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_ListCheckoutSessionsResponseObjectProperty

  """The URL where this list can be accessed."""
  url: String
}

enum Stripe_ListCheckoutSessionsResponseObjectProperty {
  list
}

type ReviewsIo_CreateInvitationResponse {
  """The status of a response"""
  status: ReviewsIo_CreateInvitationResponseStatusProperty
  message: [String]
}

enum ReviewsIo_CreateInvitationResponseStatusProperty {
  success
  error
}

input ReviewsIo_CreateInvitationPropertiesPropertyInput {
  name: String
  email: String
  order_id: String
  products: [ReviewsIo_InvitationProductInput]

  """Template identifier"""
  template_id: String
  date_send: String
  delay: String
  country_code: String
}

input ReviewsIo_InvitationProductInput {
  """Product unique ID"""
  sku: String

  """Product name"""
  name: String

  """Product description"""
  description: String

  """Product image URL"""
  image: String

  """Product MPN"""
  mpn: String

  """Product GTIN"""
  gtin: String

  """Product brand"""
  brand: String

  """Product category"""
  category: String

  """Product custom property"""
  custom: String

  """Product page url"""
  pageUrl: String
}

type UpdateNavigationDataResult {
  clientMutationId: String
  result: NavigationData
}

"""update NavigationData input"""
input UpdateNavigationDataInput {
  """"""
  message: String

  """"""
  links: NavigationDataLinksInput
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

input NavigationDataLinksInput {
  """"""
  categories: [NavigationDataLinksCategoriesInputUnion]

  """"""
  pages: [NavigationDataLinksPagesInputUnion]
}

input NavigationDataLinksCategoriesInputUnion {
  navigationDataLinksCategories: NavigationDataLinksCategoriesInput
}

input NavigationDataLinksCategoriesInput {
  """"""
  name: String

  """"""
  featured: [NavigationDataLinksCategoriesFeaturedInputUnion]

  """"""
  collection: [NavigationDataLinksCategoriesCollectionInputUnion]

  """"""
  categories: [NavigationDataLinksCategoriesCategoriesInputUnion]

  """"""
  brands: [NavigationDataLinksCategoriesBrandsInputUnion]
}

input NavigationDataLinksCategoriesFeaturedInputUnion {
  navigationDataLinksCategoriesFeatured: NavigationDataLinksCategoriesFeaturedInput
}

input NavigationDataLinksCategoriesFeaturedInput {
  """"""
  name: String

  """"""
  href: String
}

input NavigationDataLinksCategoriesCollectionInputUnion {
  navigationDataLinksCategoriesCollection: NavigationDataLinksCategoriesCollectionInput
}

input NavigationDataLinksCategoriesCollectionInput {
  """"""
  name: String

  """"""
  href: String
}

input NavigationDataLinksCategoriesCategoriesInputUnion {
  navigationDataLinksCategoriesCategories: NavigationDataLinksCategoriesCategoriesInput
}

input NavigationDataLinksCategoriesCategoriesInput {
  """"""
  name: String

  """"""
  href: String
}

input NavigationDataLinksCategoriesBrandsInputUnion {
  navigationDataLinksCategoriesBrands: NavigationDataLinksCategoriesBrandsInput
}

input NavigationDataLinksCategoriesBrandsInput {
  """"""
  name: String

  """"""
  href: String
}

input NavigationDataLinksPagesInputUnion {
  navigationDataLinksPages: NavigationDataLinksPagesInput
}

input NavigationDataLinksPagesInput {
  """"""
  name: String

  """"""
  href: String
}

type UpdateFooterResult {
  clientMutationId: String
  result: Footer
}

"""update Footer input"""
input UpdateFooterInput {
  """"""
  navigation: FooterNavigationInput

  """"""
  newsletter: FooterNewsletterInput
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

input FooterNavigationInput {
  """"""
  sections: [FooterNavigationSectionsInputUnion]
}

input FooterNavigationSectionsInputUnion {
  footerNavigationSections: FooterNavigationSectionsInput
}

input FooterNavigationSectionsInput {
  """"""
  name: String

  """"""
  items: [NavigationLinkInputUnion]
}

input NavigationLinkInputUnion {
  navigationLink: NavigationLinkInput
}

input NavigationLinkInput {
  name: String
  href: String
}

input FooterNewsletterInput {
  """"""
  text: TextInputUnion
}

""""""
input TextInputUnion {
  text: TextInput
}

input TextInput {
  primary: String
  secondary: String
  button: String
}

"""Return type for `cartCreate` mutation."""
type ShopifyStorefront_CartCreatePayload {
  """The new cart."""
  cart: ShopifyStorefront_Cart

  """The list of errors that occurred from executing the mutation."""
  userErrors: [ShopifyStorefront_CartUserError!]!
}

"""Represents an error that happens during execution of a cart mutation."""
type ShopifyStorefront_CartUserError {
  """The error code."""
  code: ShopifyStorefront_CartErrorCode

  """The path to the input field that caused the error."""
  field: [String]

  """The error message."""
  message: String!
}

enum ShopifyStorefront_CartErrorCode {
  INVALID
  LESS_THAN
  INVALID_MERCHANDISE_LINE
  MISSING_DISCOUNT_CODE
  MISSING_NOTE
}

"""Specifies the input fields to create a cart."""
input ShopifyStorefront_CartInput {
  """
  An array of key-value pairs that contains additional information about the cart.
  """
  attributes: [ShopifyStorefront_AttributeInput]

  """A list of merchandise lines to add to the cart."""
  lines: [ShopifyStorefront_CartLineInput]

  """
  The case-insensitive discount codes that the customer added at checkout.
  """
  discountCodes: [String]

  """
  A note that is associated with the cart. For example, the note can be a personalized message to the buyer.
  """
  note: String

  """
  The customer associated with the cart. Used to determine [international pricing](https://shopify.dev/api/examples/international-pricing#create-a-checkout). Buyer identity should match the customer's shipping address.
  """
  buyerIdentity: ShopifyStorefront_CartBuyerIdentityInput
}

"""Specifies the input fields required for an attribute."""
input ShopifyStorefront_AttributeInput {
  """Key or name of the attribute."""
  key: String!

  """Value of the attribute."""
  value: String!
}

"""Specifies the input fields to create a merchandise line on a cart."""
input ShopifyStorefront_CartLineInput {
  """
  An array of key-value pairs that contains additional information about the merchandise line.
  """
  attributes: [ShopifyStorefront_AttributeInput]

  """The quantity of the merchandise."""
  quantity: Int = 1

  """The identifier of the merchandise that the buyer intends to purchase."""
  merchandiseId: ID!

  """
  The identifier of the selling plan that the merchandise is being purchased with.
  """
  sellingPlanId: ID
}

"""
Specifies the input fields to update the buyer information associated with a cart.
Buyer identity is used to determine
[international pricing](https://shopify.dev/api/examples/international-pricing#create-a-checkout)
and should match the customer's shipping address.
"""
input ShopifyStorefront_CartBuyerIdentityInput {
  """The email address of the buyer that is interacting with the cart."""
  email: String

  """The phone number of the buyer that is interacting with the cart."""
  phone: String

  """The country where the buyer is located."""
  countryCode: ShopifyStorefront_CountryCode

  """
  The access token used to identify the customer associated with the cart.
  """
  customerAccessToken: String
}

"""Return type for `customerAccessTokenCreate` mutation."""
type ShopifyStorefront_CustomerAccessTokenCreatePayload {
  """The newly created customer access token object."""
  customerAccessToken: ShopifyStorefront_CustomerAccessToken

  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [ShopifyStorefront_CustomerUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [ShopifyStorefront_UserError!]! @deprecated(reason: "Use `customerUserErrors` instead")
}

"""
A CustomerAccessToken represents the unique token required to make modifications to the customer object.
"""
type ShopifyStorefront_CustomerAccessToken {
  """The customerâ€™s access token."""
  accessToken: String!

  """The date and time when the customer access token expires."""
  expiresAt: DateTime!
}

"""
Represents an error that happens during execution of a customer mutation.
"""
type ShopifyStorefront_CustomerUserError {
  """The error code."""
  code: ShopifyStorefront_CustomerErrorCode

  """The path to the input field that caused the error."""
  field: [String]

  """The error message."""
  message: String!
}

enum ShopifyStorefront_CustomerErrorCode {
  BLANK
  INVALID
  TAKEN
  TOO_LONG
  TOO_SHORT
  UNIDENTIFIED_CUSTOMER
  CUSTOMER_DISABLED
  PASSWORD_STARTS_OR_ENDS_WITH_WHITESPACE
  CONTAINS_HTML_TAGS
  CONTAINS_URL
  TOKEN_INVALID
  ALREADY_ENABLED
  NOT_FOUND
  BAD_DOMAIN
  INVALID_MULTIPASS_REQUEST
}

"""Represents an error in the input of a mutation."""
type ShopifyStorefront_UserError {
  """The path to the input field that caused the error."""
  field: [String]

  """The error message."""
  message: String!
}

"""Specifies the input fields required to create a customer access token."""
input ShopifyStorefront_CustomerAccessTokenCreateInput {
  """The email associated to the customer."""
  email: String!

  """The login password to be used by the customer."""
  password: String!
}

"""Return type for `customerCreate` mutation."""
type ShopifyStorefront_CustomerCreatePayload {
  """The created customer object."""
  customer: ShopifyStorefront_Customer

  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [ShopifyStorefront_CustomerUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [ShopifyStorefront_UserError!]! @deprecated(reason: "Use `customerUserErrors` instead")
}

"""The fields required to create a new customer."""
input ShopifyStorefront_CustomerCreateInput {
  """The customerâ€™s first name."""
  firstName: String

  """The customerâ€™s last name."""
  lastName: String

  """The customerâ€™s email."""
  email: String!

  """
  A unique phone number for the customer.
  
  Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String

  """The login password used by the customer."""
  password: String!

  """
  Indicates whether the customer has consented to be sent marketing material via email.
  """
  acceptsMarketing: Boolean
}

type CreateCustomerPayload {
  customer: CreateCustomerPayloadCustomerProperty
}

type CreateCustomerPayloadCustomerProperty {
  id: String
  email: String
  created_at: String
  updated_at: String
  state: String
  verified_email: Boolean
}

input CreateCustomerPropertiesPropertyInput {
  firstName: String
  lastName: String
  email: String!
  phone: String
  password: String!
  acceptsMarketing: Boolean
}

"""Return type for `customerRecover` mutation."""
type ShopifyStorefront_CustomerRecoverPayload {
  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [ShopifyStorefront_CustomerUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [ShopifyStorefront_UserError!]! @deprecated(reason: "Use `customerUserErrors` instead")
}

"""Return type for `customerUpdate` mutation."""
type ShopifyStorefront_CustomerUpdatePayload {
  """The updated customer object."""
  customer: ShopifyStorefront_Customer

  """
  The newly created customer access token. If the customer's password is updated, all previous access tokens
  (including the one used to perform this mutation) become invalid, and a new token is generated.
  """
  customerAccessToken: ShopifyStorefront_CustomerAccessToken

  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [ShopifyStorefront_CustomerUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [ShopifyStorefront_UserError!]! @deprecated(reason: "Use `customerUserErrors` instead")
}

"""Specifies the fields required to update the Customer information."""
input ShopifyStorefront_CustomerUpdateInput {
  """The customerâ€™s first name."""
  firstName: String

  """The customerâ€™s last name."""
  lastName: String

  """The customerâ€™s email."""
  email: String

  """
  A unique phone number for the customer.
  
  Formatted using E.164 standard. For example, _+16135551111_. To remove the phone number, specify `null`.
  """
  phone: String

  """The login password used by the customer."""
  password: String

  """
  Indicates whether the customer has consented to be sent marketing material via email.
  """
  acceptsMarketing: Boolean
}

"""Return type for `customerAddressUpdate` mutation."""
type ShopifyStorefront_CustomerAddressUpdatePayload {
  """The customerâ€™s updated mailing address."""
  customerAddress: ShopifyStorefront_MailingAddress

  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [ShopifyStorefront_CustomerUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [ShopifyStorefront_UserError!]! @deprecated(reason: "Use `customerUserErrors` instead")
}

"""Specifies the fields accepted to create or update a mailing address."""
input ShopifyStorefront_MailingAddressInput {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """The name of the city, district, village, or town."""
  city: String

  """The name of the customer's company or organization."""
  company: String

  """The name of the country."""
  country: String

  """The first name of the customer."""
  firstName: String

  """The last name of the customer."""
  lastName: String

  """
  A unique phone number for the customer.
  
  Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String

  """The region of the address, such as the province, state, or district."""
  province: String

  """The zip or postal code of the address."""
  zip: String
}

type Gorgias_CreateTicketResponse {
  id: Int!
}

type UpdateStorefrontResult {
  clientMutationId: String
  result: Storefront
}

"""update Storefront input"""
input UpdateStorefrontInput {
  components: [BackgroundImageComponentCollectionsComponentHeroComponentOffersComponentSaleComponentTestimonialsComponentInputUnion]
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

input BackgroundImageComponentCollectionsComponentHeroComponentOffersComponentSaleComponentTestimonialsComponentInputUnion {
  offersComponent: OffersComponentInput
  heroComponent: HeroComponentInput
  collectionsComponent: CollectionsComponentInput
  backgroundImageComponent: BackgroundImageComponentInput
  saleComponent: SaleComponentInput
  testimonialsComponent: TestimonialsComponentInput
}

input OffersComponentInput {
  offers: [OfferInputUnion!]!
}

input OfferInputUnion {
  offer: OfferInput
}

input OfferInput {
  href: String!
  name: String!
  description: String!
}

input HeroComponentInput {
  primaryText: String!
  secondaryText: String!
  buttonText: String!
  image: String!
}

input CollectionsComponentInput {
  collections: [CollectionInputUnion!]!
}

input CollectionInputUnion {
  collection: CollectionInput
}

input CollectionInput {
  name: String
  description: String
  imageSrc: String
  imageAlt: String
  href: String
}

input BackgroundImageComponentInput {
  image: String!
}

input SaleComponentInput {
  primaryText: String!
  secondaryText: String!
  buttonText: String!
}

input TestimonialsComponentInput {
  testimonials: [JSONObject!]!
}

type UpdateProductResult {
  clientMutationId: String
  result: Product
}

"""update ProductInterface input"""
input UpdateProductInterfaceInput {
  _id: ID!
  _version: Float
  _status: DefaultWorkflow

  """Initialized with title from shopify"""
  name: String
  shopifyProductId: String
  shopifyProduct: Shopify_ProductInput
}

"""Specifies the input fields required to create a product."""
input Shopify_ProductInput {
  """The description of the product, complete with HTML formatting."""
  descriptionHtml: String

  """
  A unique human-friendly string for the product. Automatically generated from the product's title.
  """
  handle: String

  """
  Whether a redirect is required after a new handle has been provided.
  If true, then the old handle is redirected to the new one automatically.
  """
  redirectNewHandle: Boolean = false

  """The SEO information associated with the product."""
  seo: Shopify_SEOInput

  """The product type specified by the merchant."""
  productType: String

  """The standardized product type in the Shopify product taxonomy."""
  standardizedProductType: Shopify_StandardizedProductTypeInput

  """The custom product type specified by the merchant."""
  customProductType: String

  """A comma separated list tags that have been added to the product."""
  tags: [String]

  """The theme template used when viewing the product in a store."""
  templateSuffix: String

  """Whether the product is a gift card."""
  giftCard: Boolean

  """The theme template used when viewing the gift card in a store."""
  giftCardTemplateSuffix: String

  """The title of the product."""
  title: String

  """The name of the product's vendor."""
  vendor: String

  """
  A description of the product. Supports HTML formatting. This argument is deprecated: Use `descriptionHtml` instead.
  """
  bodyHtml: String

  """The IDs of the collections that this product will be added to."""
  collectionsToJoin: [ID]

  """The IDs of collections that will no longer include the product."""
  collectionsToLeave: [ID]

  """
  Specifies the product to update in productUpdate or creates a new product if absent in productCreate.
  """
  id: ID

  """The images to associate with the product."""
  images: [Shopify_ImageInput]

  """The metafields to associate with this product."""
  metafields: [Shopify_MetafieldInput]

  """The private metafields to associate with this product."""
  privateMetafields: [Shopify_PrivateMetafieldInput]

  """List of custom product options (maximum of 3 per product)."""
  options: [String]

  """
  Only products with an active status can be published. This argument is deprecated: Use `PublishablePublish` instead.
  """
  publishDate: DateTime

  """
  Only products with an active status can be published. This argument is deprecated: Use `PublishablePublish` instead.
  """
  publishOn: DateTime

  """
  Only products with an active status can be published. This argument is deprecated: Use `PublishablePublish` instead.
  """
  published: Boolean

  """
  Only products with an active status can be published. This argument is deprecated: Use `PublishablePublish` instead.
  """
  publishedAt: DateTime

  """A list of variants associated with the product."""
  variants: [Shopify_ProductVariantInput]

  """The status of the product."""
  status: Shopify_ProductStatus

  """
  Whether the product can only be purchased with a selling plan (subscription). Products that are sold exclusively on subscription can only be created on online stores. If set to `true` on an already existing product, then the product will be marked unavailable on channels that don't support subscriptions.
  """
  requiresSellingPlan: Boolean
}

"""SEO information."""
input Shopify_SEOInput {
  """SEO title of the product."""
  title: String

  """SEO description of the product."""
  description: String
}

"""
Provides the fields and values to use when adding a standard product type to a product. The [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt) contains the full list of available values.
"""
input Shopify_StandardizedProductTypeInput {
  """
  The id of the node in the Shopify taxonomy that represents the product type.
  """
  productTaxonomyNodeId: ID!
}

"""Specifies the input fields for an image."""
input Shopify_ImageInput {
  """A globally-unique identifier."""
  id: ID

  """A word or phrase to share the nature or contents of an image."""
  altText: String

  """The URL of the image. May be a signed upload URL."""
  src: String
}

"""
The input fields to use to create or update a metafield through a mutation on the owning resource.
An alternative way to create or update a metafield is by using the
[metafieldsSet](https://shopify.dev/api/admin-graphql/latest/mutations/metafieldsSet) mutation.
"""
input Shopify_MetafieldInput {
  """The description of the metafield."""
  description: String

  """
  The unique ID of the metafield. You don't include an ID when you create a metafield because the metafield ID
  is created automatically. The ID is required when you update a metafield.
  """
  id: ID

  """
  The namespace for a metafield. The namespace is required when you create a metafield and is optional when you
  update a metafield.
  """
  namespace: String

  """
  The key name of the metafield. Required when creating but optional when updating.
  """
  key: String

  """The value of a metafield."""
  value: String

  """
  The metafield's [type](https://shopify.dev/apps/metafields/types). The metafield type is required
  when you create a metafield and is optional when you update a metafield.
  """
  type: String
}

"""The input fields for a private metafield."""
input Shopify_PrivateMetafieldInput {
  """
  The resource that owns the metafield. If the field is blank, then the `Shop` resource owns the metafield.
  """
  owner: ID

  """The namespace of the private metafield."""
  namespace: String!

  """The key of the private metafield."""
  key: String!

  """
  The `value` and `valueType` of the private metafield, wrapped in a `ValueInput` object.
  """
  valueInput: Shopify_PrivateMetafieldValueInput!
}

"""
The value input contains the value and value type of the private metafield.
"""
input Shopify_PrivateMetafieldValueInput {
  """The value of a private metafield."""
  value: String!

  """Represents the private metafield value type."""
  valueType: Shopify_PrivateMetafieldValueType!
}

"""Specifies a product variant to create or update."""
input Shopify_ProductVariantInput {
  """The value of the barcode associated with the product."""
  barcode: String

  """The compare-at price of the variant."""
  compareAtPrice: Money

  """The ID of the fulfillment service associated with the variant."""
  fulfillmentServiceId: ID

  """The Harmonized System Code (or HS Tariff Code) for the variant."""
  harmonizedSystemCode: String

  """
  Specifies the product variant to update or create a new variant if absent.
  """
  id: ID

  """The ID of the image that's associated with the variant."""
  imageId: ID

  """
  The URL of an image to associate with the variant.  This field can only be used through mutations that create product images and must match one of the URLs being created on the product.
  """
  imageSrc: String

  """
  The URL of the media to associate with the variant. This field can only be used in mutations that create media images and must match one of the URLs being created on the product. This field only accepts one value.
  """
  mediaSrc: [String]

  """
  The fulfillment service that tracks the number of items in stock for the product variant. If you track the inventory yourself using the admin, then set the value to `shopify`. Valid values: `shopify` or the handle of a fulfillment service that has inventory management enabled.
   This argument is deprecated: Use tracked attribute on `inventoryItem` instead.
  """
  inventoryManagement: Shopify_ProductVariantInventoryManagement

  """
  Whether customers are allowed to place an order for the product variant when it's out of stock.
  """
  inventoryPolicy: Shopify_ProductVariantInventoryPolicy

  """
  Create only field. The inventory quantities at each location where the variant is stocked.
  """
  inventoryQuantities: [Shopify_InventoryLevelInput]

  """Inventory Item associated with the variant, used for unit cost."""
  inventoryItem: Shopify_InventoryItemInput

  """Additional customizable information about the product variant."""
  metafields: [Shopify_MetafieldInput]

  """The private metafields to associated with this product."""
  privateMetafields: [Shopify_PrivateMetafieldInput]

  """
  The custom properties that a shop owner uses to define product variants.
  """
  options: [String]

  """
  The order of the product variant in the list of product variants. The first position in the list is 1.
  """
  position: Int

  """The price of the variant."""
  price: Money

  """
  Create only required field. Specifies the product on which to create the variant.
  """
  productId: ID

  """Whether the variant requires shipping."""
  requiresShipping: Boolean

  """The SKU for the variant."""
  sku: String

  """Whether the variant is taxable."""
  taxable: Boolean

  """
  This argument is deprecated: Variant title is not a writable field; it is generated from the selected variant options.
  """
  title: String

  """The tax code associated with the variant."""
  taxCode: String

  """The weight of the variant."""
  weight: Float

  """The unit of weight that's used to measure the variant."""
  weightUnit: Shopify_WeightUnit
}

"""Specifies the input fields for an inventory level."""
input Shopify_InventoryLevelInput {
  """The available quantity of an inventory item at a location."""
  availableQuantity: Int!

  """The ID of a location."""
  locationId: ID!
}

"""Specifies the input fields for an inventory item."""
input Shopify_InventoryItemInput {
  """
  Unit cost associated with the inventory item, the currency is the shop's default currency.
  """
  cost: Decimal

  """Whether the inventory item is tracked."""
  tracked: Boolean
}

type CreateProductResult {
  clientMutationId: String
  result: Product
}

"""create ProductInterface input"""
input CreateProductInterfaceInput {
  _id: ID
  _version: Float
  _status: DefaultWorkflow

  """Initialized with title from shopify"""
  name: String
  shopifyProductId: String
  shopifyProduct: Shopify_ProductInput
}

type DuplicateProductResult {
  clientMutationId: String
  result: Product
}

"""duplicate Product input"""
input DuplicateProductInput {
  _id: ID!

  """Initialized with title from shopify"""
  name: String
  shopifyProductId: String
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type DeleteProductResult {
  clientMutationId: String
  result: Boolean
}

"""delete Product input"""
input DeleteProductInput {
  _id: ID!
}