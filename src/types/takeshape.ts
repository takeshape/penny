export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: any;
  /** The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSONObject: any;
  DateTime: any;
  Money: any;
  Decimal: any;
  FormattedString: any;
  UnsignedInt64: any;
  Url: any;
  Html: any;
  StorefrontId: any;
  Json: any;
};

/** Root of the Schema */
export type Query = {
  __typename?: 'Query';
  taxonomySuggest?: Maybe<TsSuggestionPaginatedList>;
  /** List Versions for a piece of content */
  getContentVersion?: Maybe<TsVersionResponse>;
  /** List Versions for a piece of content */
  getContentVersionList?: Maybe<TsVersionsPaginatedList>;
  /** Get a Asset by ID */
  getAsset?: Maybe<Asset>;
  /** Returns a list Asset in natural order. */
  getAssetList?: Maybe<AssetPaginatedList>;
  /** Get a TsStaticSite by ID */
  getTsStaticSite?: Maybe<TsStaticSite>;
  /** Returns a list TsStaticSite in natural order. */
  getTsStaticSiteList?: Maybe<TsStaticSitePaginatedList>;
  ReviewsIo_listProductReviews?: Maybe<ReviewsIo_ListProductReviewsResponse>;
  /** Get Stripe products from the TakeShape API Index */
  getIndexedProductList?: Maybe<Stripe_ProductPaginatedList>;
  /** Get the signed in user's profile from ShapeDB */
  getMyProfile?: Maybe<Profile>;
  /** Get the signed in user's subscriptions from Stripe */
  getMySubscriptions?: Maybe<Array<Maybe<Stripe_Subscription>>>;
  /** Get the signed-in user's payments from Stripe */
  getMyPayments_UNINDEXED?: Maybe<Array<Maybe<Stripe_PaymentIntent>>>;
  /** Get the signed-in user's payments from Stripe */
  getMyPayments_INDEXED?: Maybe<Stripe_PaymentIntentPaginatedList>;
  /** Get the signed-in user's payments from Stripe */
  getMyPayments?: Maybe<Array<Maybe<Stripe_PaymentIntent>>>;
  /** Get the signed-in user's payments from Stripe */
  getMyPaymentsIndexed?: Maybe<Stripe_PaymentIntentPaginatedList>;
  /** Get a profile by ID */
  getProfile?: Maybe<Profile>;
  /** Returns a list of profiles in natural order. */
  getProfileList?: Maybe<ProfilePaginatedList>;
  /** <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p> */
  Stripe_listProducts?: Maybe<Stripe_ListProductsResponse>;
  /** <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p> */
  Stripe_getProduct?: Maybe<Stripe_Product>;
  /** Get a loyalty card from Voucherify */
  getMyLoyaltyCard?: Maybe<Voucherify_LoyaltyCard>;
  getMyNewsletterSubscriptions?: Maybe<Array<Maybe<ProfileNewsletterStatus>>>;
  /** <p>When retrieving an invoice, youâ€™ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
  Stripe_listInvoiceLines?: Maybe<Stripe_ListInvoiceLinesResponse>;
  /** <p>Returns a list of PaymentIntents.</p> */
  Stripe_listPaymentIntents?: Maybe<Stripe_ListPaymentIntentsResponse>;
  /** Get a NavigationData by ID */
  getNavigationData?: Maybe<NavigationData>;
  /** Get a Footer by ID */
  getFooter?: Maybe<Footer>;
  Shopify_productVariants?: Maybe<Shopify_ProductVariantConnection>;
  Shopify_products?: Maybe<Shopify_ProductConnection>;
  Shopify_product?: Maybe<Shopify_Product>;
  Shopify_customer?: Maybe<Shopify_Customer>;
  Shopify_customerPaymentMethod?: Maybe<Shopify_CustomerPaymentMethod>;
  ShopifyStorefront_customer?: Maybe<ShopifyStorefront_Customer>;
  getMyCustomer?: Maybe<ShopifyStorefront_Customer>;
  getMyAdminCustomer?: Maybe<Shopify_Customer>;
  /** Get a Storefront by ID */
  getStorefront?: Maybe<Storefront>;
  searchAssetIndex?: Maybe<AssetSearchResults>;
  searchTsStaticSiteIndex?: Maybe<TsStaticSiteSearchResults>;
  searchProfileIndex?: Maybe<ProfileSearchResults>;
  search?: Maybe<TsSearchableSearchResults>;
  withContext?: Maybe<WithContext>;
};


/** Root of the Schema */
export type QueryTaxonomySuggestArgs = {
  shapeNames?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  shapeIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  contentTypeNames?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  contentTypeIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  terms?: InputMaybe<Scalars['String']>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<Scalars['JSON']>;
  sort?: InputMaybe<Array<InputMaybe<TsSearchSort>>>;
};


/** Root of the Schema */
export type QueryGetContentVersionArgs = {
  id: Scalars['ID'];
  version: Scalars['Int'];
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};


/** Root of the Schema */
export type QueryGetContentVersionListArgs = {
  id: Scalars['ID'];
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
};


/** Root of the Schema */
export type QueryGetAssetArgs = {
  _id: Scalars['ID'];
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};


/** Root of the Schema */
export type QueryGetAssetListArgs = {
  terms?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<Scalars['JSONObject']>;
  sort?: InputMaybe<Array<InputMaybe<TsSearchSortInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
  onlyEnabled?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<TsWhereAssetInput>;
};


/** Root of the Schema */
export type QueryGetTsStaticSiteArgs = {
  _id: Scalars['ID'];
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};


/** Root of the Schema */
export type QueryGetTsStaticSiteListArgs = {
  terms?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<Scalars['JSONObject']>;
  sort?: InputMaybe<Array<InputMaybe<TsSearchSortInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
  onlyEnabled?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<TsWhereTsStaticSiteInput>;
};


/** Root of the Schema */
export type QueryReviewsIo_ListProductReviewsArgs = {
  sku?: InputMaybe<Scalars['String']>;
  mpn?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['String']>;
  per_page?: InputMaybe<Scalars['String']>;
  photos?: InputMaybe<Scalars['Int']>;
  verified_only?: InputMaybe<Scalars['Int']>;
  comments_only?: InputMaybe<Scalars['Int']>;
  minRating?: InputMaybe<Scalars['Int']>;
  include_unpublished_images?: InputMaybe<Scalars['Int']>;
  include_moderated?: InputMaybe<Scalars['Int']>;
  order_id?: InputMaybe<Scalars['String']>;
  min_date?: InputMaybe<Scalars['String']>;
  max_date?: InputMaybe<Scalars['String']>;
};


/** Root of the Schema */
export type QueryGetIndexedProductListArgs = {
  terms?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<Scalars['JSONObject']>;
  sort?: InputMaybe<Array<InputMaybe<TsSearchSortInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
  onlyEnabled?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<TsWhereStripeProductInput>;
};


/** Root of the Schema */
export type QueryGetMySubscriptionsArgs = {
  expand?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** Root of the Schema */
export type QueryGetMyPayments_UnindexedArgs = {
  expand?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  limit?: InputMaybe<Scalars['Float']>;
  created?: InputMaybe<Scalars['JSON']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
};


/** Root of the Schema */
export type QueryGetMyPayments_IndexedArgs = {
  terms?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<Scalars['JSONObject']>;
  sort?: InputMaybe<Array<InputMaybe<TsSearchSortInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
  onlyEnabled?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<TsWhereStripePaymentIntentInput>;
};


/** Root of the Schema */
export type QueryGetMyPaymentsArgs = {
  expand?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  limit?: InputMaybe<Scalars['Float']>;
  created?: InputMaybe<Scalars['JSON']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
};


/** Root of the Schema */
export type QueryGetMyPaymentsIndexedArgs = {
  terms?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<Scalars['JSONObject']>;
  sort?: InputMaybe<Array<InputMaybe<TsSearchSortInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
  onlyEnabled?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<TsWhereStripePaymentIntentInput>;
};


/** Root of the Schema */
export type QueryGetProfileArgs = {
  _id: Scalars['ID'];
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};


/** Root of the Schema */
export type QueryGetProfileListArgs = {
  terms?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<Scalars['JSONObject']>;
  sort?: InputMaybe<Array<InputMaybe<TsSearchSortInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
  onlyEnabled?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<TsWhereProfileInput>;
};


/** Root of the Schema */
export type QueryStripe_ListProductsArgs = {
  active?: InputMaybe<Scalars['Boolean']>;
  created?: InputMaybe<Scalars['JSON']>;
  ending_before?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  ids?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  limit?: InputMaybe<Scalars['Int']>;
  shippable?: InputMaybe<Scalars['Boolean']>;
  starting_after?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};


/** Root of the Schema */
export type QueryStripe_GetProductArgs = {
  expand?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id: Scalars['String'];
};


/** Root of the Schema */
export type QueryStripe_ListInvoiceLinesArgs = {
  ending_before?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  invoice: Scalars['String'];
  limit?: InputMaybe<Scalars['Int']>;
  starting_after?: InputMaybe<Scalars['String']>;
};


/** Root of the Schema */
export type QueryStripe_ListPaymentIntentsArgs = {
  created?: InputMaybe<Scalars['JSON']>;
  customer?: InputMaybe<Scalars['String']>;
  ending_before?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  limit?: InputMaybe<Scalars['Int']>;
  starting_after?: InputMaybe<Scalars['String']>;
};


/** Root of the Schema */
export type QueryGetNavigationDataArgs = {
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};


/** Root of the Schema */
export type QueryGetFooterArgs = {
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};


/** Root of the Schema */
export type QueryShopify_ProductVariantsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_ProductVariantSortKeys>;
  query?: InputMaybe<Scalars['String']>;
  savedSearchId?: InputMaybe<Scalars['ID']>;
};


/** Root of the Schema */
export type QueryShopify_ProductsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_ProductSortKeys>;
  query?: InputMaybe<Scalars['String']>;
  savedSearchId?: InputMaybe<Scalars['ID']>;
};


/** Root of the Schema */
export type QueryShopify_ProductArgs = {
  id: Scalars['ID'];
};


/** Root of the Schema */
export type QueryShopify_CustomerArgs = {
  id: Scalars['ID'];
};


/** Root of the Schema */
export type QueryShopify_CustomerPaymentMethodArgs = {
  id: Scalars['ID'];
  showRevoked?: InputMaybe<Scalars['Boolean']>;
};


/** Root of the Schema */
export type QueryShopifyStorefront_CustomerArgs = {
  customerAccessToken: Scalars['String'];
};


/** Root of the Schema */
export type QueryGetStorefrontArgs = {
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};


/** Root of the Schema */
export type QuerySearchAssetIndexArgs = {
  terms?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<Scalars['JSONObject']>;
  sort?: InputMaybe<Array<InputMaybe<TsSearchSortInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<TsWhereAssetInput>;
};


/** Root of the Schema */
export type QuerySearchTsStaticSiteIndexArgs = {
  terms?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<Scalars['JSONObject']>;
  sort?: InputMaybe<Array<InputMaybe<TsSearchSortInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<TsWhereTsStaticSiteInput>;
};


/** Root of the Schema */
export type QuerySearchProfileIndexArgs = {
  terms?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<Scalars['JSONObject']>;
  sort?: InputMaybe<Array<InputMaybe<TsSearchSortInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<TsWhereProfileInput>;
};


/** Root of the Schema */
export type QuerySearchArgs = {
  terms?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<Scalars['JSONObject']>;
  sort?: InputMaybe<Array<InputMaybe<TsSearchSortInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
  shapeNames?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  shapeIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  contentTypeNames?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  contentTypeIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  where?: InputMaybe<TsWhereInput>;
};


/** Root of the Schema */
export type QueryWithContextArgs = {
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};

export type TsSuggestionPaginatedList = {
  __typename?: 'TSSuggestionPaginatedList';
  items?: Maybe<Array<Maybe<TsSuggestion>>>;
  total?: Maybe<Scalars['Int']>;
};

export type TsSuggestion = {
  __typename?: 'TSSuggestion';
  _id?: Maybe<Scalars['ID']>;
  _shapeId?: Maybe<Scalars['ID']>;
  _shapeName?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  summary?: Maybe<Scalars['String']>;
};

export type TsSearchSort = {
  field: Scalars['String'];
  /** "asc" for ascending or "desc" for descending */
  order: Scalars['String'];
};

export type TsVersionResponse = {
  __typename?: 'TSVersionResponse';
  content?: Maybe<Scalars['JSONObject']>;
  schema?: Maybe<Scalars['JSONObject']>;
};

export type TsVersionsPaginatedList = {
  __typename?: 'TSVersionsPaginatedList';
  items?: Maybe<Array<Maybe<TsVersion>>>;
  total?: Maybe<Scalars['Int']>;
  from?: Maybe<Scalars['Int']>;
  size?: Maybe<Scalars['Int']>;
};

export type TsVersion = {
  __typename?: 'TSVersion';
  id?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  color?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<TsProjectMember>;
  item?: Maybe<TsVersionResponse>;
};


export type TsVersionItemArgs = {
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};

export type TsProjectMember = {
  __typename?: 'TSProjectMember';
  id?: Maybe<Scalars['ID']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['String']>;
  avatarPath?: Maybe<Scalars['String']>;
};

export type Asset = TsSearchable & {
  __typename?: 'Asset';
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  filename: Scalars['String'];
  caption?: Maybe<Scalars['JSON']>;
  captionHtml?: Maybe<Scalars['String']>;
  credit?: Maybe<Scalars['JSON']>;
  creditHtml?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  mimeType?: Maybe<Scalars['String']>;
  sourceUrl?: Maybe<Scalars['String']>;
  uploadStatus?: Maybe<Scalars['String']>;
  _shapeId?: Maybe<Scalars['String']>;
  _id?: Maybe<Scalars['ID']>;
  _version?: Maybe<Scalars['Int']>;
  _shapeName?: Maybe<Scalars['String']>;
  _createdAt?: Maybe<Scalars['String']>;
  _createdBy?: Maybe<TsUser>;
  _updatedAt?: Maybe<Scalars['String']>;
  _updatedBy?: Maybe<TsUser>;
  _schemaVersion?: Maybe<Scalars['Float']>;
  /** @deprecated Use _status instead */
  _enabled?: Maybe<Scalars['Boolean']>;
  /** @deprecated Use a custom date field instead */
  _enabledAt?: Maybe<Scalars['String']>;
  _status?: Maybe<DefaultWorkflow>;
  _contentTypeId?: Maybe<Scalars['String']>;
  _contentTypeName?: Maybe<Scalars['String']>;
  /** @deprecated Use path instead */
  s3Key?: Maybe<Scalars['String']>;
  searchSummary?: Maybe<Scalars['String']>;
};


export type AssetCaptionHtmlArgs = {
  imageConfig?: InputMaybe<Scalars['JSON']>;
  images?: InputMaybe<TsImagesConfig>;
  classPrefix?: InputMaybe<Scalars['String']>;
  headerIdPrefix?: InputMaybe<Scalars['String']>;
};


export type AssetCreditHtmlArgs = {
  imageConfig?: InputMaybe<Scalars['JSON']>;
  images?: InputMaybe<TsImagesConfig>;
  classPrefix?: InputMaybe<Scalars['String']>;
  headerIdPrefix?: InputMaybe<Scalars['String']>;
};

export type TsSearchable = {
  _id?: Maybe<Scalars['ID']>;
  _shapeId?: Maybe<Scalars['String']>;
  searchSummary?: Maybe<Scalars['String']>;
};

export type TsImagesConfig = {
  /** Default image parameters. See https://docs.imgix.com/apis/url  */
  default?: InputMaybe<Scalars['JSON']>;
  /** Small image parameters. See https://docs.imgix.com/apis/url  */
  small?: InputMaybe<Scalars['JSON']>;
  /** Medium image parameters. See https://docs.imgix.com/apis/url  */
  medium?: InputMaybe<Scalars['JSON']>;
  /** Large image parameters. See https://docs.imgix.com/apis/url  */
  large?: InputMaybe<Scalars['JSON']>;
};

export type TsUser = {
  __typename?: 'TSUser';
  id: Scalars['String'];
  email: Scalars['String'];
  fullName: Scalars['String'];
  avatarPath?: Maybe<Scalars['String']>;
};

export enum DefaultWorkflow {
  Disabled = 'disabled',
  Enabled = 'enabled'
}

export type AssetPaginatedList = {
  __typename?: 'AssetPaginatedList';
  items: Array<Asset>;
  total: Scalars['Int'];
};

export type TsSearchSortInput = {
  field: Scalars['String'];
  /** "asc" for ascending or "desc" for descending */
  order: Scalars['String'];
};

export type TsWhereAssetInput = {
  title?: InputMaybe<TsWhereStringInput>;
  description?: InputMaybe<TsWhereStringInput>;
  filename?: InputMaybe<TsWhereStringInput>;
  caption?: InputMaybe<TsWhereDraftjsInput>;
  credit?: InputMaybe<TsWhereDraftjsInput>;
  path?: InputMaybe<TsWhereStringInput>;
  mimeType?: InputMaybe<TsWhereStringInput>;
  sourceUrl?: InputMaybe<TsWhereStringInput>;
  uploadStatus?: InputMaybe<TsWhereStringInput>;
  _shapeId?: InputMaybe<TsWhereIdInput>;
  _id?: InputMaybe<TsWhereIdInput>;
  _version?: InputMaybe<TsWhereIntegerInput>;
  _shapeName?: InputMaybe<TsWhereStringInput>;
  _createdAt?: InputMaybe<TsWhereDateInput>;
  _updatedAt?: InputMaybe<TsWhereDateInput>;
  _schemaVersion?: InputMaybe<TsWhereNumberInput>;
  _status?: InputMaybe<TsWhereWorkflowInput>;
  _contentTypeId?: InputMaybe<TsWhereIdInput>;
  _contentTypeName?: InputMaybe<TsWhereStringInput>;
  s3Key?: InputMaybe<TsWhereStringInput>;
  AND?: InputMaybe<Array<InputMaybe<TsWhereAssetInput>>>;
  OR?: InputMaybe<Array<InputMaybe<TsWhereAssetInput>>>;
  NOT?: InputMaybe<TsWhereAssetInput>;
};

export type TsWhereStringInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['String']>;
  /** Array of possible exact match values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Full text searching with fuzzy matching. */
  match?: InputMaybe<Scalars['String']>;
  /** Regular expression string matching. Use of * wildcards could degrade performance. */
  regexp?: InputMaybe<Scalars['String']>;
};

export type TsWhereDraftjsInput = {
  /** Full text searching with fuzzy matching. */
  match?: InputMaybe<Scalars['String']>;
};

export type TsWhereIdInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['String']>;
  /** Array of possible exact match values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type TsWhereIntegerInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['Int']>;
  /** Less than */
  lt?: InputMaybe<Scalars['Int']>;
  /** Less than or equal */
  lte?: InputMaybe<Scalars['Int']>;
  /** Greater than */
  gt?: InputMaybe<Scalars['Int']>;
  /** Greater than or equal */
  gte?: InputMaybe<Scalars['Int']>;
  /** Array of possible exact match values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
};

export type TsWhereDateInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['String']>;
  /** Less than */
  lt?: InputMaybe<Scalars['String']>;
  /** Less than or equal */
  lte?: InputMaybe<Scalars['String']>;
  /** Greater than */
  gt?: InputMaybe<Scalars['String']>;
  /** Greater than or equal */
  gte?: InputMaybe<Scalars['String']>;
};

export type TsWhereNumberInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['Float']>;
  /** Less than */
  lt?: InputMaybe<Scalars['Float']>;
  /** Less than or equal */
  lte?: InputMaybe<Scalars['Float']>;
  /** Greater than */
  gt?: InputMaybe<Scalars['Float']>;
  /** Greater than or equal */
  gte?: InputMaybe<Scalars['Float']>;
  /** Array of possible exact match values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
};

export type TsWhereWorkflowInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['String']>;
  /** Less than */
  lt?: InputMaybe<Scalars['String']>;
  /** Less than or equal */
  lte?: InputMaybe<Scalars['String']>;
  /** Greater than */
  gt?: InputMaybe<Scalars['String']>;
  /** Greater than or equal */
  gte?: InputMaybe<Scalars['String']>;
  /** Array of possible exact match values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type TsStaticSite = TsSearchable & {
  __typename?: 'TsStaticSite';
  title: Scalars['String'];
  baseUrl?: Maybe<Scalars['String']>;
  provider: Scalars['String'];
  idKey?: Maybe<Scalars['String']>;
  secretKey?: Maybe<Scalars['String']>;
  destination: Scalars['String'];
  privateAcl?: Maybe<Scalars['Boolean']>;
  environmentVariables?: Maybe<Array<Maybe<TsStaticSiteEnvironmentVariables>>>;
  triggers?: Maybe<Array<Maybe<TsStaticSiteTriggers>>>;
  templateHash?: Maybe<Scalars['String']>;
  _shapeId?: Maybe<Scalars['String']>;
  _id?: Maybe<Scalars['ID']>;
  _version?: Maybe<Scalars['Int']>;
  _shapeName?: Maybe<Scalars['String']>;
  _createdAt?: Maybe<Scalars['String']>;
  _createdBy?: Maybe<TsUser>;
  _updatedAt?: Maybe<Scalars['String']>;
  _updatedBy?: Maybe<TsUser>;
  _schemaVersion?: Maybe<Scalars['Float']>;
  /** @deprecated Use _status instead */
  _enabled?: Maybe<Scalars['Boolean']>;
  /** @deprecated Use a custom date field instead */
  _enabledAt?: Maybe<Scalars['String']>;
  _status?: Maybe<DefaultWorkflow>;
  _contentTypeId?: Maybe<Scalars['String']>;
  _contentTypeName?: Maybe<Scalars['String']>;
  searchSummary?: Maybe<Scalars['String']>;
};

export type TsStaticSiteEnvironmentVariables = {
  __typename?: 'TsStaticSiteEnvironmentVariables';
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type TsStaticSiteTriggers = {
  __typename?: 'TsStaticSiteTriggers';
  contentTypeId?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

export type TsStaticSitePaginatedList = {
  __typename?: 'TsStaticSitePaginatedList';
  items: Array<TsStaticSite>;
  total: Scalars['Int'];
};

export type TsWhereTsStaticSiteInput = {
  title?: InputMaybe<TsWhereStringInput>;
  baseUrl?: InputMaybe<TsWhereStringInput>;
  provider?: InputMaybe<TsWhereStringInput>;
  idKey?: InputMaybe<TsWhereStringInput>;
  destination?: InputMaybe<TsWhereStringInput>;
  privateAcl?: InputMaybe<TsWhereBooleanInput>;
  environmentVariables?: InputMaybe<TsWhereTsStaticSiteEnvironmentVariablesInput>;
  triggers?: InputMaybe<TsWhereTsStaticSiteTriggersInput>;
  templateHash?: InputMaybe<TsWhereStringInput>;
  _shapeId?: InputMaybe<TsWhereIdInput>;
  _id?: InputMaybe<TsWhereIdInput>;
  _version?: InputMaybe<TsWhereIntegerInput>;
  _shapeName?: InputMaybe<TsWhereStringInput>;
  _createdAt?: InputMaybe<TsWhereDateInput>;
  _updatedAt?: InputMaybe<TsWhereDateInput>;
  _schemaVersion?: InputMaybe<TsWhereNumberInput>;
  _status?: InputMaybe<TsWhereWorkflowInput>;
  _contentTypeId?: InputMaybe<TsWhereIdInput>;
  _contentTypeName?: InputMaybe<TsWhereStringInput>;
  AND?: InputMaybe<Array<InputMaybe<TsWhereTsStaticSiteInput>>>;
  OR?: InputMaybe<Array<InputMaybe<TsWhereTsStaticSiteInput>>>;
  NOT?: InputMaybe<TsWhereTsStaticSiteInput>;
};

export type TsWhereBooleanInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['Boolean']>;
};

export type TsWhereTsStaticSiteEnvironmentVariablesInput = {
  name?: InputMaybe<TsWhereStringInput>;
  value?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereTsStaticSiteTriggersInput = {
  contentTypeId?: InputMaybe<TsWhereStringInput>;
  status?: InputMaybe<TsWhereStringInput>;
};

export type ReviewsIo_ListProductReviewsResponse = {
  __typename?: 'ReviewsIo_ListProductReviewsResponse';
  write_review_link?: Maybe<Scalars['String']>;
  word?: Maybe<Scalars['String']>;
  stats?: Maybe<ReviewsIo_ListProductReviewsResponseStatsProperty>;
  store?: Maybe<ReviewsIo_ListProductReviewsResponseStoreProperty>;
  reviews?: Maybe<ReviewsIo_ListProductReviewsResponseReviewsProperty>;
  products?: Maybe<Array<Maybe<ReviewsIo_ListProductReviewsResponseProductsProperty>>>;
  ratings?: Maybe<Array<Maybe<Scalars['JSONObject']>>>;
  settings?: Maybe<Array<Maybe<Scalars['JSONObject']>>>;
};

export type ReviewsIo_ListProductReviewsResponseStatsProperty = {
  __typename?: 'ReviewsIo_ListProductReviewsResponseStatsProperty';
  average?: Maybe<Scalars['Float']>;
  count?: Maybe<Scalars['Int']>;
};

export type ReviewsIo_ListProductReviewsResponseStoreProperty = {
  __typename?: 'ReviewsIo_ListProductReviewsResponseStoreProperty';
  name?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
};

export type ReviewsIo_ListProductReviewsResponseReviewsProperty = {
  __typename?: 'ReviewsIo_ListProductReviewsResponseReviewsProperty';
  total?: Maybe<Scalars['Int']>;
  per_page?: Maybe<Scalars['Int']>;
  current_page?: Maybe<Scalars['Int']>;
  last_page?: Maybe<Scalars['Int']>;
  from?: Maybe<Scalars['Int']>;
  to?: Maybe<Scalars['Int']>;
  data?: Maybe<Array<Maybe<ReviewsIo_ProductReview>>>;
};

export type ReviewsIo_ProductReview = {
  __typename?: 'ReviewsIo_ProductReview';
  product_review_id?: Maybe<Scalars['Int']>;
  product_make?: Maybe<Scalars['String']>;
  order_id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  sku?: Maybe<Scalars['String']>;
  review?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  rating?: Maybe<Scalars['Int']>;
  date_created?: Maybe<Scalars['String']>;
  votes?: Maybe<Scalars['String']>;
  flags?: Maybe<Scalars['String']>;
  timeago?: Maybe<Scalars['String']>;
  date_formatted?: Maybe<Scalars['String']>;
  product?: Maybe<ReviewsIo_Product>;
  ratings?: Maybe<Array<Maybe<ReviewsIo_ProductReviewRatingsProperty>>>;
  reviewer?: Maybe<ReviewsIo_Reviewer>;
  images?: Maybe<Array<Maybe<Scalars['JSONObject']>>>;
  replies?: Maybe<Array<Maybe<Scalars['JSONObject']>>>;
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  author?: Maybe<ReviewsIo_ProductReviewAuthorProperty>;
};

export type ReviewsIo_Product = {
  __typename?: 'ReviewsIo_Product';
  /** Product unique ID */
  sku?: Maybe<Scalars['String']>;
  /** Product name */
  name?: Maybe<Scalars['String']>;
  /** Product description */
  description?: Maybe<Scalars['String']>;
  /** Product image URL */
  image_url?: Maybe<Scalars['String']>;
  /** Product link URL */
  link?: Maybe<Scalars['String']>;
  /** Product MPN */
  mpn?: Maybe<Scalars['String']>;
  /** Product GTIN */
  gtin?: Maybe<Scalars['String']>;
  /** Product brand */
  brand?: Maybe<Scalars['String']>;
  /** Product category */
  category?: Maybe<Scalars['String']>;
  /** Product custom property */
  custom?: Maybe<Scalars['String']>;
  /** Product page url */
  pageUrl?: Maybe<Scalars['String']>;
};

export type ReviewsIo_ProductReviewRatingsProperty = {
  __typename?: 'ReviewsIo_ProductReviewRatingsProperty';
  name?: Maybe<Scalars['String']>;
  score?: Maybe<Scalars['String']>;
};

export type ReviewsIo_Reviewer = {
  __typename?: 'ReviewsIo_Reviewer';
  user_id?: Maybe<Scalars['Int']>;
  first_name?: Maybe<Scalars['String']>;
  last_name?: Maybe<Scalars['String']>;
  verified_buyer?: Maybe<ReviewsIo_ReviewerVerifiedBuyerProperty>;
  address?: Maybe<Scalars['String']>;
  profile_picture?: Maybe<Scalars['String']>;
  gravatar?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  name_formatted?: Maybe<Scalars['String']>;
};

export enum ReviewsIo_ReviewerVerifiedBuyerProperty {
  Yes = 'yes',
  No = 'no'
}

export type ReviewsIo_ProductReviewAuthorProperty = {
  __typename?: 'ReviewsIo_ProductReviewAuthorProperty';
  email?: Maybe<Scalars['String']>;
};

export type ReviewsIo_ListProductReviewsResponseProductsProperty = {
  __typename?: 'ReviewsIo_ListProductReviewsResponseProductsProperty';
  sku?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type Stripe_ProductPaginatedList = {
  __typename?: 'Stripe_ProductPaginatedList';
  items: Array<Stripe_Product>;
  total: Scalars['Int'];
};

export type Stripe_Product = TsSearchable & {
  __typename?: 'Stripe_Product';
  /** Whether the product is currently available for purchase. */
  active?: Maybe<Scalars['Boolean']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes. */
  description?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** A list of up to 8 URLs of images for this product, meant to be displayable to the customer. */
  images?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** The product's name, meant to be displayable to the customer. */
  name?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_ProductObjectProperty>;
  package_dimensions?: Maybe<Stripe_PackageDimensions>;
  /** Whether this product is shipped (i.e., physical goods). */
  shippable?: Maybe<Scalars['Boolean']>;
  /** Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used. */
  statement_descriptor?: Maybe<Scalars['String']>;
  tax_code?: Maybe<Stripe_ProductTaxCodeProperty>;
  /** A label that represents units of this product in Stripe and on customersâ€™ receipts and invoices. When set, this will be included in associated invoice line item descriptions. */
  unit_label?: Maybe<Scalars['String']>;
  /** Time at which the object was last updated. Measured in seconds since the Unix epoch. */
  updated?: Maybe<Scalars['Int']>;
  /** A URL of a publicly-accessible webpage for this product. */
  url?: Maybe<Scalars['String']>;
  prices?: Maybe<Array<Maybe<Stripe_Price>>>;
  reviews?: Maybe<ReviewsIo_ListProductReviewsResponse>;
  _shapeId?: Maybe<Scalars['String']>;
  _id?: Maybe<Scalars['ID']>;
  searchSummary?: Maybe<Scalars['String']>;
};

export enum Stripe_ProductObjectProperty {
  Product = 'product'
}

export type Stripe_PackageDimensions = {
  __typename?: 'Stripe_PackageDimensions';
  /** Height, in inches. */
  height?: Maybe<Scalars['Float']>;
  /** Length, in inches. */
  length?: Maybe<Scalars['Float']>;
  /** Weight, in ounces. */
  weight?: Maybe<Scalars['Float']>;
  /** Width, in inches. */
  width?: Maybe<Scalars['Float']>;
};

export type Stripe_ProductTaxCodeProperty = WrappedString | Stripe_TaxCode;

export type WrappedString = {
  __typename?: 'WrappedString';
  value: Scalars['String'];
};

export type Stripe_TaxCode = {
  __typename?: 'Stripe_TaxCode';
  /** A detailed description of which types of products the tax code represents. */
  description?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** A short name for the tax code. */
  name?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_TaxCodeObjectProperty>;
};

export enum Stripe_TaxCodeObjectProperty {
  TaxCode = 'tax_code'
}

export type Stripe_Price = {
  __typename?: 'Stripe_Price';
  /** Whether the price can be used for new purchases. */
  active?: Maybe<Scalars['Boolean']>;
  /** Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes. */
  billing_scheme?: Maybe<Stripe_PriceBillingSchemeProperty>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters. */
  lookup_key?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** A brief description of the price, hidden from customers. */
  nickname?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_PriceObjectProperty>;
  /** The Stripe product associated with this subscription. */
  product?: Maybe<Stripe_Product>;
  recurring?: Maybe<Stripe_Recurring>;
  /** Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed. */
  tax_behavior?: Maybe<Stripe_PriceTaxBehaviorProperty>;
  /** Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
  tiers?: Maybe<Array<Maybe<Stripe_PriceTier>>>;
  /** Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows. */
  tiers_mode?: Maybe<Stripe_PriceTiersModeProperty>;
  transform_quantity?: Maybe<Stripe_TransformQuantity>;
  /** One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase. */
  type?: Maybe<Stripe_PriceTypeProperty>;
  /** The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`. */
  unit_amount?: Maybe<Scalars['Int']>;
  /** The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`. */
  unit_amount_decimal?: Maybe<Scalars['String']>;
};

export enum Stripe_PriceBillingSchemeProperty {
  PerUnit = 'per_unit',
  Tiered = 'tiered'
}

export enum Stripe_PriceObjectProperty {
  Price = 'price'
}

export type Stripe_Recurring = {
  __typename?: 'Stripe_Recurring';
  /** Specifies a usage aggregation strategy for prices of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`. */
  aggregate_usage?: Maybe<Stripe_RecurringAggregateUsageProperty>;
  /** The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`. */
  interval?: Maybe<Stripe_RecurringIntervalProperty>;
  /** The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. */
  interval_count?: Maybe<Scalars['Int']>;
  /** Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`. */
  usage_type?: Maybe<Stripe_RecurringUsageTypeProperty>;
};

export enum Stripe_RecurringAggregateUsageProperty {
  LastDuringPeriod = 'last_during_period',
  LastEver = 'last_ever',
  Max = 'max',
  Sum = 'sum'
}

export enum Stripe_RecurringIntervalProperty {
  Day = 'day',
  Month = 'month',
  Week = 'week',
  Year = 'year'
}

export enum Stripe_RecurringUsageTypeProperty {
  Licensed = 'licensed',
  Metered = 'metered'
}

export enum Stripe_PriceTaxBehaviorProperty {
  Exclusive = 'exclusive',
  Inclusive = 'inclusive',
  Unspecified = 'unspecified'
}

export type Stripe_PriceTier = {
  __typename?: 'Stripe_PriceTier';
  /** Price for the entire tier. */
  flat_amount?: Maybe<Scalars['Int']>;
  /** Same as `flat_amount`, but contains a decimal value with at most 12 decimal places. */
  flat_amount_decimal?: Maybe<Scalars['String']>;
  /** Per unit price for units relevant to the tier. */
  unit_amount?: Maybe<Scalars['Int']>;
  /** Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. */
  unit_amount_decimal?: Maybe<Scalars['String']>;
  /** Up to and including to this quantity will be contained in the tier. */
  up_to?: Maybe<Scalars['Int']>;
};

export enum Stripe_PriceTiersModeProperty {
  Graduated = 'graduated',
  Volume = 'volume'
}

export type Stripe_TransformQuantity = {
  __typename?: 'Stripe_TransformQuantity';
  /** Divide usage by this number. */
  divide_by?: Maybe<Scalars['Int']>;
  /** After division, either round the result `up` or `down`. */
  round?: Maybe<Stripe_TransformQuantityRoundProperty>;
};

export enum Stripe_TransformQuantityRoundProperty {
  Down = 'down',
  Up = 'up'
}

export enum Stripe_PriceTypeProperty {
  OneTime = 'one_time',
  Recurring = 'recurring'
}

export type TsWhereStripeProductInput = {
  active?: InputMaybe<TsWhereBooleanInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  description?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  images?: InputMaybe<TsWhereStripe_ProductImagesInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  name?: InputMaybe<TsWhereStringInput>;
  object?: InputMaybe<TsWhereInput>;
  package_dimensions?: InputMaybe<TsWhereStripe_PackageDimensionsInput>;
  shippable?: InputMaybe<TsWhereBooleanInput>;
  statement_descriptor?: InputMaybe<TsWhereStringInput>;
  tax_code?: InputMaybe<TsWhereStripe_TaxCodeWrappedStringUnionInput>;
  unit_label?: InputMaybe<TsWhereStringInput>;
  updated?: InputMaybe<TsWhereIntegerInput>;
  url?: InputMaybe<TsWhereStringInput>;
  prices?: InputMaybe<TsWhereStripe_PriceInput>;
  reviews?: InputMaybe<TsWhereReviewsIo_ListProductReviewsResponseInput>;
  _shapeId?: InputMaybe<TsWhereIdInput>;
  _id?: InputMaybe<TsWhereIdInput>;
  AND?: InputMaybe<Array<InputMaybe<TsWhereStripeProductInput>>>;
  OR?: InputMaybe<Array<InputMaybe<TsWhereStripeProductInput>>>;
  NOT?: InputMaybe<TsWhereStripeProductInput>;
};

export type TsWhereStripe_ProductImagesInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['String']>;
  /** Array of possible exact match values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Full text searching with fuzzy matching. */
  match?: InputMaybe<Scalars['String']>;
  /** Regular expression string matching. Use of * wildcards could degrade performance. */
  regexp?: InputMaybe<Scalars['String']>;
};

export type TsWhereInput = {
  title?: InputMaybe<TsWhereStringInput>;
  description?: InputMaybe<TsWhereStringInput>;
  filename?: InputMaybe<TsWhereStringInput>;
  caption?: InputMaybe<TsWhereDraftjsInput>;
  credit?: InputMaybe<TsWhereDraftjsInput>;
  path?: InputMaybe<TsWhereStringInput>;
  mimeType?: InputMaybe<TsWhereStringInput>;
  sourceUrl?: InputMaybe<TsWhereStringInput>;
  uploadStatus?: InputMaybe<TsWhereStringInput>;
  _shapeId?: InputMaybe<TsWhereIdInput>;
  _id?: InputMaybe<TsWhereIdInput>;
  _version?: InputMaybe<TsWhereIntegerInput>;
  _shapeName?: InputMaybe<TsWhereStringInput>;
  _createdAt?: InputMaybe<TsWhereDateInput>;
  _updatedAt?: InputMaybe<TsWhereDateInput>;
  _schemaVersion?: InputMaybe<TsWhereNumberInput>;
  _status?: InputMaybe<TsWhereWorkflowInput>;
  _contentTypeId?: InputMaybe<TsWhereIdInput>;
  _contentTypeName?: InputMaybe<TsWhereStringInput>;
  s3Key?: InputMaybe<TsWhereStringInput>;
  baseUrl?: InputMaybe<TsWhereStringInput>;
  provider?: InputMaybe<TsWhereStringInput>;
  idKey?: InputMaybe<TsWhereStringInput>;
  destination?: InputMaybe<TsWhereStringInput>;
  privateAcl?: InputMaybe<TsWhereBooleanInput>;
  environmentVariables?: InputMaybe<TsWhereTsStaticSiteEnvironmentVariablesInput>;
  triggers?: InputMaybe<TsWhereTsStaticSiteTriggersInput>;
  templateHash?: InputMaybe<TsWhereStringInput>;
  amount?: InputMaybe<TsWhereIntegerInput>;
  amount_capturable?: InputMaybe<TsWhereIntegerInput>;
  amount_details?: InputMaybe<TsWhereStripe_PaymentFlowsAmountDetailsInput>;
  amount_received?: InputMaybe<TsWhereIntegerInput>;
  application?: InputMaybe<TsWhereStripe_ApplicationWrappedStringUnionInput>;
  application_fee_amount?: InputMaybe<TsWhereIntegerInput>;
  automatic_payment_methods?: InputMaybe<TsWhereStripe_PaymentFlowsAutomaticPaymentMethodsPaymentIntentInput>;
  canceled_at?: InputMaybe<TsWhereIntegerInput>;
  cancellation_reason?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
  charges?: InputMaybe<TsWhereStripe_PaymentIntentChargesInput>;
  client_secret?: InputMaybe<TsWhereStringInput>;
  confirmation_method?: InputMaybe<TsWhereInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  customer?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  invoice?: InputMaybe<TsWhereStripe_InvoiceWrappedStringUnionInput>;
  last_payment_error?: InputMaybe<TsWhereStripe_ApiErrorsInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  next_action?: InputMaybe<TsWhereStripe_PaymentIntentNextActionInput>;
  object?: InputMaybe<TsWhereInput>;
  on_behalf_of?: InputMaybe<TsWhereStripe_AccountWrappedStringUnionInput>;
  payment_method?: InputMaybe<TsWhereStripe_PaymentMethodWrappedStringUnionInput>;
  payment_method_options?: InputMaybe<TsWhereStripe_PaymentIntentPaymentMethodOptionsInput>;
  payment_method_types?: InputMaybe<TsWhereStripe_PaymentIntentPaymentMethodTypesInput>;
  processing?: InputMaybe<TsWhereStripe_PaymentIntentProcessingInput>;
  receipt_email?: InputMaybe<TsWhereStringInput>;
  review?: InputMaybe<TsWhereStripe_ReviewWrappedStringUnionInput>;
  setup_future_usage?: InputMaybe<TsWhereInput>;
  shipping?: InputMaybe<TsWhereStripe_ShippingInput>;
  statement_descriptor?: InputMaybe<TsWhereStringInput>;
  statement_descriptor_suffix?: InputMaybe<TsWhereStringInput>;
  status?: InputMaybe<TsWhereInput>;
  transfer_data?: InputMaybe<TsWhereStripe_TransferDataInput>;
  transfer_group?: InputMaybe<TsWhereStringInput>;
  invoiceItems?: InputMaybe<TsWhereStripe_InvoiceitemInput>;
  sessionItems?: InputMaybe<TsWhereStripe_ItemInput>;
  shipment?: InputMaybe<TsWhereShipEngine_LabelInput>;
  active?: InputMaybe<TsWhereBooleanInput>;
  images?: InputMaybe<TsWhereStripe_ProductImagesInput>;
  name?: InputMaybe<TsWhereStringInput>;
  package_dimensions?: InputMaybe<TsWhereStripe_PackageDimensionsInput>;
  shippable?: InputMaybe<TsWhereBooleanInput>;
  tax_code?: InputMaybe<TsWhereStripe_TaxCodeWrappedStringUnionInput>;
  unit_label?: InputMaybe<TsWhereStringInput>;
  updated?: InputMaybe<TsWhereIntegerInput>;
  url?: InputMaybe<TsWhereStringInput>;
  prices?: InputMaybe<TsWhereStripe_PriceInput>;
  reviews?: InputMaybe<TsWhereReviewsIo_ListProductReviewsResponseInput>;
  email?: InputMaybe<TsWhereStringInput>;
  bio?: InputMaybe<TsWhereStringInput>;
  avatar?: InputMaybe<TsWhereAssetRelationshipInput>;
  shopifyCustomerId?: InputMaybe<TsWhereStringInput>;
  stripeCustomerId?: InputMaybe<TsWhereStringInput>;
  message?: InputMaybe<TsWhereStringInput>;
  links?: InputMaybe<TsWhereNavigationDataLinksInput>;
  navigation?: InputMaybe<TsWhereFooterNavigationInput>;
  newsletter?: InputMaybe<TsWhereFooterNewsletterInput>;
  components?: InputMaybe<TsWhereStorefrontComponentsInput>;
  AND?: InputMaybe<Array<InputMaybe<TsWhereInput>>>;
  OR?: InputMaybe<Array<InputMaybe<TsWhereInput>>>;
  NOT?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_PaymentFlowsAmountDetailsInput = {
  tip?: InputMaybe<TsWhereStripe_PaymentFlowsAmountDetailsResourceTipInput>;
};

export type TsWhereStripe_PaymentFlowsAmountDetailsResourceTipInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
};

export type TsWhereStripe_ApplicationWrappedStringUnionInput = {
  value?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  name?: InputMaybe<TsWhereStringInput>;
  object?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_PaymentFlowsAutomaticPaymentMethodsPaymentIntentInput = {
  enabled?: InputMaybe<TsWhereBooleanInput>;
};

export type TsWhereStripe_PaymentIntentChargesInput = {
  data?: InputMaybe<TsWhereStripe_ChargeInput>;
  has_more?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_ChargeInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  amount_captured?: InputMaybe<TsWhereIntegerInput>;
  amount_refunded?: InputMaybe<TsWhereIntegerInput>;
  application?: InputMaybe<TsWhereStripe_ApplicationWrappedStringUnionInput>;
  application_fee?: InputMaybe<TsWhereStripe_ApplicationFeeWrappedStringUnionInput>;
  application_fee_amount?: InputMaybe<TsWhereIntegerInput>;
  balance_transaction?: InputMaybe<TsWhereStripe_BalanceTransactionWrappedStringUnionInput>;
  billing_details?: InputMaybe<TsWhereStripe_BillingDetailsInput>;
  calculated_statement_descriptor?: InputMaybe<TsWhereStringInput>;
  captured?: InputMaybe<TsWhereBooleanInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  customer?: InputMaybe<TsWhereStringInput>;
  description?: InputMaybe<TsWhereStringInput>;
  disputed?: InputMaybe<TsWhereBooleanInput>;
  failure_balance_transaction?: InputMaybe<TsWhereStripe_BalanceTransactionWrappedStringUnionInput>;
  failure_code?: InputMaybe<TsWhereStringInput>;
  failure_message?: InputMaybe<TsWhereStringInput>;
  fraud_details?: InputMaybe<TsWhereStripe_ChargeFraudDetailsInput>;
  id?: InputMaybe<TsWhereStringInput>;
  invoice?: InputMaybe<TsWhereStripe_InvoiceWrappedStringUnionInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  on_behalf_of?: InputMaybe<TsWhereStripe_AccountWrappedStringUnionInput>;
  order?: InputMaybe<TsWhereStripe_OrderWrappedStringUnionInput>;
  outcome?: InputMaybe<TsWhereStripe_ChargeOutcomeInput>;
  paid?: InputMaybe<TsWhereBooleanInput>;
  payment_intent?: InputMaybe<TsWhereStripe_PaymentIntentWrappedStringUnionInput>;
  payment_method?: InputMaybe<TsWhereStringInput>;
  payment_method_details?: InputMaybe<TsWhereStripe_PaymentMethodDetailsInput>;
  receipt_email?: InputMaybe<TsWhereStringInput>;
  receipt_number?: InputMaybe<TsWhereStringInput>;
  receipt_url?: InputMaybe<TsWhereStringInput>;
  refunded?: InputMaybe<TsWhereBooleanInput>;
  refunds?: InputMaybe<TsWhereStripe_PaymentIntentRefundsInput>;
  review?: InputMaybe<TsWhereStripe_ReviewWrappedStringUnionInput>;
  shipping?: InputMaybe<TsWhereStripe_ShippingInput>;
  source_transfer?: InputMaybe<TsWhereStripe_TransferWrappedStringUnionInput>;
  statement_descriptor?: InputMaybe<TsWhereStringInput>;
  statement_descriptor_suffix?: InputMaybe<TsWhereStringInput>;
  status?: InputMaybe<TsWhereInput>;
  transfer?: InputMaybe<TsWhereStripe_TransferWrappedStringUnionInput>;
  transfer_data?: InputMaybe<TsWhereStripe_ChargeTransferDataInput>;
  transfer_group?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_ApplicationFeeWrappedStringUnionInput = {
  value?: InputMaybe<TsWhereStringInput>;
  amount?: InputMaybe<TsWhereIntegerInput>;
  amount_refunded?: InputMaybe<TsWhereIntegerInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  refunded?: InputMaybe<TsWhereBooleanInput>;
  refunds?: InputMaybe<TsWhereStripe_ApplicationFeeRefundsInput>;
};

export type TsWhereStripe_ApplicationFeeRefundsInput = {
  data?: InputMaybe<TsWhereStripe_FeeRefundInput>;
  has_more?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_FeeRefundInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  object?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_BalanceTransactionWrappedStringUnionInput = {
  value?: InputMaybe<TsWhereStringInput>;
  amount?: InputMaybe<TsWhereIntegerInput>;
  available_on?: InputMaybe<TsWhereIntegerInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  description?: InputMaybe<TsWhereStringInput>;
  exchange_rate?: InputMaybe<TsWhereNumberInput>;
  fee?: InputMaybe<TsWhereIntegerInput>;
  fee_details?: InputMaybe<TsWhereStripe_FeeInput>;
  id?: InputMaybe<TsWhereStringInput>;
  net?: InputMaybe<TsWhereIntegerInput>;
  object?: InputMaybe<TsWhereInput>;
  reporting_category?: InputMaybe<TsWhereStringInput>;
  status?: InputMaybe<TsWhereStringInput>;
  type?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_FeeInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  application?: InputMaybe<TsWhereStringInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  description?: InputMaybe<TsWhereStringInput>;
  type?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_BillingDetailsInput = {
  address?: InputMaybe<TsWhereStripe_AddressInput>;
  email?: InputMaybe<TsWhereStringInput>;
  name?: InputMaybe<TsWhereStringInput>;
  phone?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_AddressInput = {
  city?: InputMaybe<TsWhereStringInput>;
  country?: InputMaybe<TsWhereStringInput>;
  line1?: InputMaybe<TsWhereStringInput>;
  line2?: InputMaybe<TsWhereStringInput>;
  postal_code?: InputMaybe<TsWhereStringInput>;
  state?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_ChargeFraudDetailsInput = {
  stripe_report?: InputMaybe<TsWhereStringInput>;
  user_report?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_InvoiceWrappedStringUnionInput = {
  value?: InputMaybe<TsWhereStringInput>;
  account_country?: InputMaybe<TsWhereStringInput>;
  account_name?: InputMaybe<TsWhereStringInput>;
  account_tax_ids?: InputMaybe<TsWhereStripe_InvoiceAccountTaxIdsInput>;
  amount_due?: InputMaybe<TsWhereIntegerInput>;
  amount_paid?: InputMaybe<TsWhereIntegerInput>;
  amount_remaining?: InputMaybe<TsWhereIntegerInput>;
  application_fee_amount?: InputMaybe<TsWhereIntegerInput>;
  attempt_count?: InputMaybe<TsWhereIntegerInput>;
  attempted?: InputMaybe<TsWhereBooleanInput>;
  auto_advance?: InputMaybe<TsWhereBooleanInput>;
  automatic_tax?: InputMaybe<TsWhereStripe_AutomaticTaxInput>;
  billing_reason?: InputMaybe<TsWhereInput>;
  collection_method?: InputMaybe<TsWhereInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  custom_fields?: InputMaybe<TsWhereStripe_InvoiceSettingCustomFieldInput>;
  customer?: InputMaybe<TsWhereStringInput>;
  customer_address?: InputMaybe<TsWhereStripe_AddressInput>;
  customer_email?: InputMaybe<TsWhereStringInput>;
  customer_name?: InputMaybe<TsWhereStringInput>;
  customer_phone?: InputMaybe<TsWhereStringInput>;
  customer_shipping?: InputMaybe<TsWhereStripe_ShippingInput>;
  customer_tax_exempt?: InputMaybe<TsWhereInput>;
  customer_tax_ids?: InputMaybe<TsWhereStripe_InvoicesResourceInvoiceTaxIdInput>;
  default_tax_rates?: InputMaybe<TsWhereStripe_TaxRateInput>;
  description?: InputMaybe<TsWhereStringInput>;
  discount?: InputMaybe<TsWhereStripe_DiscountInput>;
  discounts?: InputMaybe<TsWhereStripe_InvoiceDiscountsInput>;
  due_date?: InputMaybe<TsWhereIntegerInput>;
  ending_balance?: InputMaybe<TsWhereIntegerInput>;
  footer?: InputMaybe<TsWhereStringInput>;
  hosted_invoice_url?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  invoice_pdf?: InputMaybe<TsWhereStringInput>;
  last_finalization_error?: InputMaybe<TsWhereStripe_ApiErrorsInput>;
  lines?: InputMaybe<TsWhereStripe_InvoiceLinesInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  next_payment_attempt?: InputMaybe<TsWhereIntegerInput>;
  number?: InputMaybe<TsWhereStringInput>;
  object?: InputMaybe<TsWhereInput>;
  paid?: InputMaybe<TsWhereBooleanInput>;
  paid_out_of_band?: InputMaybe<TsWhereBooleanInput>;
  payment_settings?: InputMaybe<TsWhereStripe_InvoicesPaymentSettingsInput>;
  period_end?: InputMaybe<TsWhereIntegerInput>;
  period_start?: InputMaybe<TsWhereIntegerInput>;
  post_payment_credit_notes_amount?: InputMaybe<TsWhereIntegerInput>;
  pre_payment_credit_notes_amount?: InputMaybe<TsWhereIntegerInput>;
  receipt_number?: InputMaybe<TsWhereStringInput>;
  starting_balance?: InputMaybe<TsWhereIntegerInput>;
  statement_descriptor?: InputMaybe<TsWhereStringInput>;
  status?: InputMaybe<TsWhereInput>;
  status_transitions?: InputMaybe<TsWhereStripe_InvoicesStatusTransitionsInput>;
  subscription_proration_date?: InputMaybe<TsWhereIntegerInput>;
  subtotal?: InputMaybe<TsWhereIntegerInput>;
  tax?: InputMaybe<TsWhereIntegerInput>;
  threshold_reason?: InputMaybe<TsWhereStripe_InvoiceThresholdReasonInput>;
  total?: InputMaybe<TsWhereIntegerInput>;
  total_discount_amounts?: InputMaybe<TsWhereStripe_DiscountsResourceDiscountAmountInput>;
  total_tax_amounts?: InputMaybe<TsWhereStripe_InvoiceTaxAmountInput>;
  transfer_data?: InputMaybe<TsWhereStripe_InvoiceTransferDataInput>;
  webhooks_delivered_at?: InputMaybe<TsWhereIntegerInput>;
};

export type TsWhereStripe_InvoiceAccountTaxIdsInput = {
  value?: InputMaybe<TsWhereStringInput>;
  country?: InputMaybe<TsWhereStringInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  id?: InputMaybe<TsWhereStringInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  type?: InputMaybe<TsWhereInput>;
  verification?: InputMaybe<TsWhereStripe_TaxIdVerificationInput>;
};

export type TsWhereStripe_TaxIdVerificationInput = {
  status?: InputMaybe<TsWhereInput>;
  verified_address?: InputMaybe<TsWhereStringInput>;
  verified_name?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_AutomaticTaxInput = {
  enabled?: InputMaybe<TsWhereBooleanInput>;
  status?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_InvoiceSettingCustomFieldInput = {
  name?: InputMaybe<TsWhereStringInput>;
  value?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_ShippingInput = {
  address?: InputMaybe<TsWhereStripe_AddressInput>;
  carrier?: InputMaybe<TsWhereStringInput>;
  name?: InputMaybe<TsWhereStringInput>;
  phone?: InputMaybe<TsWhereStringInput>;
  tracking_number?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_InvoicesResourceInvoiceTaxIdInput = {
  type?: InputMaybe<TsWhereInput>;
  value?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_TaxRateInput = {
  active?: InputMaybe<TsWhereBooleanInput>;
  country?: InputMaybe<TsWhereStringInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  description?: InputMaybe<TsWhereStringInput>;
  display_name?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  inclusive?: InputMaybe<TsWhereBooleanInput>;
  jurisdiction?: InputMaybe<TsWhereStringInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  percentage?: InputMaybe<TsWhereNumberInput>;
  state?: InputMaybe<TsWhereStringInput>;
  tax_type?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_DiscountInput = {
  checkout_session?: InputMaybe<TsWhereStringInput>;
  coupon?: InputMaybe<TsWhereStripe_CouponInput>;
  customer?: InputMaybe<TsWhereStringInput>;
  end?: InputMaybe<TsWhereIntegerInput>;
  id?: InputMaybe<TsWhereStringInput>;
  invoice?: InputMaybe<TsWhereStringInput>;
  invoice_item?: InputMaybe<TsWhereStringInput>;
  object?: InputMaybe<TsWhereInput>;
  start?: InputMaybe<TsWhereIntegerInput>;
  subscription?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_CouponInput = {
  amount_off?: InputMaybe<TsWhereIntegerInput>;
  applies_to?: InputMaybe<TsWhereStripe_CouponAppliesToInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  duration?: InputMaybe<TsWhereInput>;
  duration_in_months?: InputMaybe<TsWhereIntegerInput>;
  id?: InputMaybe<TsWhereStringInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  max_redemptions?: InputMaybe<TsWhereIntegerInput>;
  name?: InputMaybe<TsWhereStringInput>;
  object?: InputMaybe<TsWhereInput>;
  percent_off?: InputMaybe<TsWhereNumberInput>;
  redeem_by?: InputMaybe<TsWhereIntegerInput>;
  times_redeemed?: InputMaybe<TsWhereIntegerInput>;
  valid?: InputMaybe<TsWhereBooleanInput>;
};

export type TsWhereStripe_CouponAppliesToInput = {
  products?: InputMaybe<TsWhereStripe_InvoiceProductsInput>;
};

export type TsWhereStripe_InvoiceProductsInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['String']>;
  /** Array of possible exact match values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Full text searching with fuzzy matching. */
  match?: InputMaybe<Scalars['String']>;
  /** Regular expression string matching. Use of * wildcards could degrade performance. */
  regexp?: InputMaybe<Scalars['String']>;
};

export type TsWhereStripe_InvoiceDiscountsInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['String']>;
  /** Array of possible exact match values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Full text searching with fuzzy matching. */
  match?: InputMaybe<Scalars['String']>;
  /** Regular expression string matching. Use of * wildcards could degrade performance. */
  regexp?: InputMaybe<Scalars['String']>;
};

export type TsWhereStripe_ApiErrorsInput = {
  charge?: InputMaybe<TsWhereStringInput>;
  code?: InputMaybe<TsWhereStringInput>;
  decline_code?: InputMaybe<TsWhereStringInput>;
  doc_url?: InputMaybe<TsWhereStringInput>;
  message?: InputMaybe<TsWhereStringInput>;
  param?: InputMaybe<TsWhereStringInput>;
  payment_intent?: InputMaybe<TsWhereStripe_PaymentIntentInput>;
  payment_method?: InputMaybe<TsWhereStripe_PaymentMethodInput>;
  payment_method_type?: InputMaybe<TsWhereStringInput>;
  setup_intent?: InputMaybe<TsWhereStripe_SetupIntentInput>;
  source?: InputMaybe<TsWhereStripe_BankAccountStripe_CardStripe_SourceUnionInput>;
  type?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_PaymentIntentInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  amount_capturable?: InputMaybe<TsWhereIntegerInput>;
  amount_details?: InputMaybe<TsWhereStripe_PaymentFlowsAmountDetailsInput>;
  amount_received?: InputMaybe<TsWhereIntegerInput>;
  application?: InputMaybe<TsWhereStripe_ApplicationWrappedStringUnionInput>;
  application_fee_amount?: InputMaybe<TsWhereIntegerInput>;
  automatic_payment_methods?: InputMaybe<TsWhereStripe_PaymentFlowsAutomaticPaymentMethodsPaymentIntentInput>;
  canceled_at?: InputMaybe<TsWhereIntegerInput>;
  cancellation_reason?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
  charges?: InputMaybe<TsWhereStripe_PaymentIntentChargesInput>;
  client_secret?: InputMaybe<TsWhereStringInput>;
  confirmation_method?: InputMaybe<TsWhereInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  customer?: InputMaybe<TsWhereStringInput>;
  description?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  invoice?: InputMaybe<TsWhereStripe_InvoiceWrappedStringUnionInput>;
  last_payment_error?: InputMaybe<TsWhereStripe_ApiErrorsInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  next_action?: InputMaybe<TsWhereStripe_PaymentIntentNextActionInput>;
  object?: InputMaybe<TsWhereInput>;
  on_behalf_of?: InputMaybe<TsWhereStripe_AccountWrappedStringUnionInput>;
  payment_method?: InputMaybe<TsWhereStripe_PaymentMethodWrappedStringUnionInput>;
  payment_method_options?: InputMaybe<TsWhereStripe_PaymentIntentPaymentMethodOptionsInput>;
  payment_method_types?: InputMaybe<TsWhereStripe_PaymentIntentPaymentMethodTypesInput>;
  processing?: InputMaybe<TsWhereStripe_PaymentIntentProcessingInput>;
  receipt_email?: InputMaybe<TsWhereStringInput>;
  review?: InputMaybe<TsWhereStripe_ReviewWrappedStringUnionInput>;
  setup_future_usage?: InputMaybe<TsWhereInput>;
  shipping?: InputMaybe<TsWhereStripe_ShippingInput>;
  statement_descriptor?: InputMaybe<TsWhereStringInput>;
  statement_descriptor_suffix?: InputMaybe<TsWhereStringInput>;
  status?: InputMaybe<TsWhereInput>;
  transfer_data?: InputMaybe<TsWhereStripe_TransferDataInput>;
  transfer_group?: InputMaybe<TsWhereStringInput>;
  invoiceItems?: InputMaybe<TsWhereStripe_InvoiceitemInput>;
  sessionItems?: InputMaybe<TsWhereStripe_ItemInput>;
  shipment?: InputMaybe<TsWhereShipEngine_LabelInput>;
  _shapeId?: InputMaybe<TsWhereIdInput>;
  _id?: InputMaybe<TsWhereIdInput>;
};

export type TsWhereStripe_PaymentIntentNextActionInput = {
  alipay_handle_redirect?: InputMaybe<TsWhereStripe_PaymentIntentNextActionAlipayHandleRedirectInput>;
  boleto_display_details?: InputMaybe<TsWhereStripe_PaymentIntentNextActionBoletoInput>;
  card_await_notification?: InputMaybe<TsWhereStripe_PaymentIntentNextActionCardAwaitNotificationInput>;
  display_bank_transfer_instructions?: InputMaybe<TsWhereStripe_PaymentIntentNextActionDisplayBankTransferInstructionsInput>;
  konbini_display_details?: InputMaybe<TsWhereStripe_PaymentIntentNextActionKonbiniInput>;
  oxxo_display_details?: InputMaybe<TsWhereStripe_PaymentIntentNextActionDisplayOxxoDetailsInput>;
  paynow_display_qr_code?: InputMaybe<TsWhereStripe_PaymentIntentNextActionPaynowDisplayQrCodeInput>;
  redirect_to_url?: InputMaybe<TsWhereStripe_PaymentIntentNextActionRedirectToUrlInput>;
  type?: InputMaybe<TsWhereStringInput>;
  verify_with_microdeposits?: InputMaybe<TsWhereStripe_PaymentIntentNextActionVerifyWithMicrodepositsInput>;
  wechat_pay_display_qr_code?: InputMaybe<TsWhereStripe_PaymentIntentNextActionWechatPayDisplayQrCodeInput>;
  wechat_pay_redirect_to_android_app?: InputMaybe<TsWhereStripe_PaymentIntentNextActionWechatPayRedirectToAndroidAppInput>;
  wechat_pay_redirect_to_ios_app?: InputMaybe<TsWhereStripe_PaymentIntentNextActionWechatPayRedirectToIosAppInput>;
};

export type TsWhereStripe_PaymentIntentNextActionAlipayHandleRedirectInput = {
  native_data?: InputMaybe<TsWhereStringInput>;
  native_url?: InputMaybe<TsWhereStringInput>;
  return_url?: InputMaybe<TsWhereStringInput>;
  url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentIntentNextActionBoletoInput = {
  expires_at?: InputMaybe<TsWhereIntegerInput>;
  hosted_voucher_url?: InputMaybe<TsWhereStringInput>;
  number?: InputMaybe<TsWhereStringInput>;
  pdf?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentIntentNextActionCardAwaitNotificationInput = {
  charge_attempt_at?: InputMaybe<TsWhereIntegerInput>;
  customer_approval_required?: InputMaybe<TsWhereBooleanInput>;
};

export type TsWhereStripe_PaymentIntentNextActionDisplayBankTransferInstructionsInput = {
  amount_remaining?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  financial_addresses?: InputMaybe<TsWhereStripe_FundingInstructionsBankTransferFinancialAddressInput>;
  reference?: InputMaybe<TsWhereStringInput>;
  type?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_FundingInstructionsBankTransferFinancialAddressInput = {
  type?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_PaymentIntentNextActionKonbiniInput = {
  expires_at?: InputMaybe<TsWhereIntegerInput>;
  hosted_voucher_url?: InputMaybe<TsWhereStringInput>;
  stores?: InputMaybe<TsWhereStripe_PaymentIntentNextActionKonbiniStoresInput>;
};

export type TsWhereStripe_PaymentIntentNextActionKonbiniStoresInput = {
  familymart?: InputMaybe<TsWhereStripe_PaymentIntentNextActionKonbiniFamilymartInput>;
  lawson?: InputMaybe<TsWhereStripe_PaymentIntentNextActionKonbiniLawsonInput>;
  ministop?: InputMaybe<TsWhereStripe_PaymentIntentNextActionKonbiniMinistopInput>;
  seicomart?: InputMaybe<TsWhereStripe_PaymentIntentNextActionKonbiniSeicomartInput>;
};

export type TsWhereStripe_PaymentIntentNextActionKonbiniFamilymartInput = {
  confirmation_number?: InputMaybe<TsWhereStringInput>;
  payment_code?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentIntentNextActionKonbiniLawsonInput = {
  confirmation_number?: InputMaybe<TsWhereStringInput>;
  payment_code?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentIntentNextActionKonbiniMinistopInput = {
  confirmation_number?: InputMaybe<TsWhereStringInput>;
  payment_code?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentIntentNextActionKonbiniSeicomartInput = {
  confirmation_number?: InputMaybe<TsWhereStringInput>;
  payment_code?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentIntentNextActionDisplayOxxoDetailsInput = {
  expires_after?: InputMaybe<TsWhereIntegerInput>;
  hosted_voucher_url?: InputMaybe<TsWhereStringInput>;
  number?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentIntentNextActionPaynowDisplayQrCodeInput = {
  data?: InputMaybe<TsWhereStringInput>;
  image_url_png?: InputMaybe<TsWhereStringInput>;
  image_url_svg?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentIntentNextActionRedirectToUrlInput = {
  return_url?: InputMaybe<TsWhereStringInput>;
  url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentIntentNextActionVerifyWithMicrodepositsInput = {
  arrival_date?: InputMaybe<TsWhereIntegerInput>;
  hosted_verification_url?: InputMaybe<TsWhereStringInput>;
  microdeposit_type?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_PaymentIntentNextActionWechatPayDisplayQrCodeInput = {
  data?: InputMaybe<TsWhereStringInput>;
  image_data_url?: InputMaybe<TsWhereStringInput>;
  image_url_png?: InputMaybe<TsWhereStringInput>;
  image_url_svg?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentIntentNextActionWechatPayRedirectToAndroidAppInput = {
  app_id?: InputMaybe<TsWhereStringInput>;
  nonce_str?: InputMaybe<TsWhereStringInput>;
  package?: InputMaybe<TsWhereStringInput>;
  partner_id?: InputMaybe<TsWhereStringInput>;
  prepay_id?: InputMaybe<TsWhereStringInput>;
  sign?: InputMaybe<TsWhereStringInput>;
  timestamp?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentIntentNextActionWechatPayRedirectToIosAppInput = {
  native_url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_AccountWrappedStringUnionInput = {
  value?: InputMaybe<TsWhereStringInput>;
  business_profile?: InputMaybe<TsWhereStripe_AccountBusinessProfileInput>;
  business_type?: InputMaybe<TsWhereInput>;
  capabilities?: InputMaybe<TsWhereStripe_AccountCapabilitiesInput>;
  charges_enabled?: InputMaybe<TsWhereBooleanInput>;
  company?: InputMaybe<TsWhereStripe_LegalEntityCompanyInput>;
  controller?: InputMaybe<TsWhereStripe_AccountUnificationAccountControllerInput>;
  country?: InputMaybe<TsWhereStringInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  default_currency?: InputMaybe<TsWhereStringInput>;
  details_submitted?: InputMaybe<TsWhereBooleanInput>;
  email?: InputMaybe<TsWhereStringInput>;
  external_accounts?: InputMaybe<TsWhereStripe_AccountExternalAccountsInput>;
  future_requirements?: InputMaybe<TsWhereStripe_AccountFutureRequirementsInput>;
  id?: InputMaybe<TsWhereStringInput>;
  individual?: InputMaybe<TsWhereStripe_PersonInput>;
  object?: InputMaybe<TsWhereInput>;
  payouts_enabled?: InputMaybe<TsWhereBooleanInput>;
  requirements?: InputMaybe<TsWhereStripe_AccountRequirementsInput>;
  settings?: InputMaybe<TsWhereStripe_AccountSettingsInput>;
  tos_acceptance?: InputMaybe<TsWhereStripe_AccountTosAcceptanceInput>;
  type?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_AccountBusinessProfileInput = {
  mcc?: InputMaybe<TsWhereStringInput>;
  name?: InputMaybe<TsWhereStringInput>;
  product_description?: InputMaybe<TsWhereStringInput>;
  support_address?: InputMaybe<TsWhereStripe_AddressInput>;
  support_email?: InputMaybe<TsWhereStringInput>;
  support_phone?: InputMaybe<TsWhereStringInput>;
  support_url?: InputMaybe<TsWhereStringInput>;
  url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_AccountCapabilitiesInput = {
  acss_debit_payments?: InputMaybe<TsWhereInput>;
  afterpay_clearpay_payments?: InputMaybe<TsWhereInput>;
  au_becs_debit_payments?: InputMaybe<TsWhereInput>;
  bacs_debit_payments?: InputMaybe<TsWhereInput>;
  bancontact_payments?: InputMaybe<TsWhereInput>;
  bank_transfer_payments?: InputMaybe<TsWhereInput>;
  boleto_payments?: InputMaybe<TsWhereInput>;
  card_issuing?: InputMaybe<TsWhereInput>;
  card_payments?: InputMaybe<TsWhereInput>;
  cartes_bancaires_payments?: InputMaybe<TsWhereInput>;
  eps_payments?: InputMaybe<TsWhereInput>;
  fpx_payments?: InputMaybe<TsWhereInput>;
  giropay_payments?: InputMaybe<TsWhereInput>;
  grabpay_payments?: InputMaybe<TsWhereInput>;
  ideal_payments?: InputMaybe<TsWhereInput>;
  jcb_payments?: InputMaybe<TsWhereInput>;
  klarna_payments?: InputMaybe<TsWhereInput>;
  konbini_payments?: InputMaybe<TsWhereInput>;
  legacy_payments?: InputMaybe<TsWhereInput>;
  oxxo_payments?: InputMaybe<TsWhereInput>;
  p24_payments?: InputMaybe<TsWhereInput>;
  paynow_payments?: InputMaybe<TsWhereInput>;
  sepa_debit_payments?: InputMaybe<TsWhereInput>;
  sofort_payments?: InputMaybe<TsWhereInput>;
  tax_reporting_us_1099_k?: InputMaybe<TsWhereInput>;
  tax_reporting_us_1099_misc?: InputMaybe<TsWhereInput>;
  transfers?: InputMaybe<TsWhereInput>;
  us_bank_account_ach_payments?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_LegalEntityCompanyInput = {
  address?: InputMaybe<TsWhereStripe_AddressInput>;
  address_kana?: InputMaybe<TsWhereStripe_LegalEntityJapanAddressInput>;
  address_kanji?: InputMaybe<TsWhereStripe_LegalEntityJapanAddressInput>;
  directors_provided?: InputMaybe<TsWhereBooleanInput>;
  executives_provided?: InputMaybe<TsWhereBooleanInput>;
  name?: InputMaybe<TsWhereStringInput>;
  name_kana?: InputMaybe<TsWhereStringInput>;
  name_kanji?: InputMaybe<TsWhereStringInput>;
  owners_provided?: InputMaybe<TsWhereBooleanInput>;
  ownership_declaration?: InputMaybe<TsWhereStripe_LegalEntityUboDeclarationInput>;
  phone?: InputMaybe<TsWhereStringInput>;
  structure?: InputMaybe<TsWhereInput>;
  tax_id_provided?: InputMaybe<TsWhereBooleanInput>;
  tax_id_registrar?: InputMaybe<TsWhereStringInput>;
  vat_id_provided?: InputMaybe<TsWhereBooleanInput>;
  verification?: InputMaybe<TsWhereStripe_LegalEntityCompanyVerificationInput>;
};

export type TsWhereStripe_LegalEntityJapanAddressInput = {
  city?: InputMaybe<TsWhereStringInput>;
  country?: InputMaybe<TsWhereStringInput>;
  line1?: InputMaybe<TsWhereStringInput>;
  line2?: InputMaybe<TsWhereStringInput>;
  postal_code?: InputMaybe<TsWhereStringInput>;
  state?: InputMaybe<TsWhereStringInput>;
  town?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_LegalEntityUboDeclarationInput = {
  date?: InputMaybe<TsWhereIntegerInput>;
  ip?: InputMaybe<TsWhereStringInput>;
  user_agent?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_LegalEntityCompanyVerificationInput = {
  document?: InputMaybe<TsWhereStripe_LegalEntityCompanyVerificationDocumentInput>;
};

export type TsWhereStripe_LegalEntityCompanyVerificationDocumentInput = {
  details?: InputMaybe<TsWhereStringInput>;
  details_code?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_AccountUnificationAccountControllerInput = {
  is_controller?: InputMaybe<TsWhereBooleanInput>;
  type?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_AccountExternalAccountsInput = {
  data?: InputMaybe<TsWhereStripe_AccountDataInput>;
  has_more?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_AccountDataInput = {
  account_holder_name?: InputMaybe<TsWhereStringInput>;
  account_holder_type?: InputMaybe<TsWhereStringInput>;
  account_type?: InputMaybe<TsWhereStringInput>;
  bank_name?: InputMaybe<TsWhereStringInput>;
  country?: InputMaybe<TsWhereStringInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  customer?: InputMaybe<TsWhereStringInput>;
  default_for_currency?: InputMaybe<TsWhereBooleanInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  last4?: InputMaybe<TsWhereStringInput>;
  object?: InputMaybe<TsWhereInput>;
  routing_number?: InputMaybe<TsWhereStringInput>;
  status?: InputMaybe<TsWhereStringInput>;
  address_city?: InputMaybe<TsWhereStringInput>;
  address_country?: InputMaybe<TsWhereStringInput>;
  address_line1?: InputMaybe<TsWhereStringInput>;
  address_line1_check?: InputMaybe<TsWhereStringInput>;
  address_line2?: InputMaybe<TsWhereStringInput>;
  address_state?: InputMaybe<TsWhereStringInput>;
  address_zip?: InputMaybe<TsWhereStringInput>;
  address_zip_check?: InputMaybe<TsWhereStringInput>;
  brand?: InputMaybe<TsWhereStringInput>;
  cvc_check?: InputMaybe<TsWhereStringInput>;
  dynamic_last4?: InputMaybe<TsWhereStringInput>;
  exp_month?: InputMaybe<TsWhereIntegerInput>;
  exp_year?: InputMaybe<TsWhereIntegerInput>;
  funding?: InputMaybe<TsWhereStringInput>;
  name?: InputMaybe<TsWhereStringInput>;
  tokenization_method?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_AccountFutureRequirementsInput = {
  alternatives?: InputMaybe<TsWhereStripe_AccountRequirementsAlternativeInput>;
  current_deadline?: InputMaybe<TsWhereIntegerInput>;
  currently_due?: InputMaybe<TsWhereStripe_AccountCurrentlyDueInput>;
  disabled_reason?: InputMaybe<TsWhereStringInput>;
  errors?: InputMaybe<TsWhereStripe_AccountRequirementsErrorInput>;
  eventually_due?: InputMaybe<TsWhereStripe_AccountEventuallyDueInput>;
  past_due?: InputMaybe<TsWhereStripe_AccountPastDueInput>;
  pending_verification?: InputMaybe<TsWhereStripe_AccountPendingVerificationInput>;
};

export type TsWhereStripe_AccountRequirementsAlternativeInput = {
  alternative_fields_due?: InputMaybe<TsWhereStripe_AccountAlternativeFieldsDueInput>;
  original_fields_due?: InputMaybe<TsWhereStripe_AccountOriginalFieldsDueInput>;
};

export type TsWhereStripe_AccountAlternativeFieldsDueInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['String']>;
  /** Array of possible exact match values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Full text searching with fuzzy matching. */
  match?: InputMaybe<Scalars['String']>;
  /** Regular expression string matching. Use of * wildcards could degrade performance. */
  regexp?: InputMaybe<Scalars['String']>;
};

export type TsWhereStripe_AccountOriginalFieldsDueInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['String']>;
  /** Array of possible exact match values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Full text searching with fuzzy matching. */
  match?: InputMaybe<Scalars['String']>;
  /** Regular expression string matching. Use of * wildcards could degrade performance. */
  regexp?: InputMaybe<Scalars['String']>;
};

export type TsWhereStripe_AccountCurrentlyDueInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['String']>;
  /** Array of possible exact match values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Full text searching with fuzzy matching. */
  match?: InputMaybe<Scalars['String']>;
  /** Regular expression string matching. Use of * wildcards could degrade performance. */
  regexp?: InputMaybe<Scalars['String']>;
};

export type TsWhereStripe_AccountRequirementsErrorInput = {
  code?: InputMaybe<TsWhereInput>;
  reason?: InputMaybe<TsWhereStringInput>;
  requirement?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_AccountEventuallyDueInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['String']>;
  /** Array of possible exact match values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Full text searching with fuzzy matching. */
  match?: InputMaybe<Scalars['String']>;
  /** Regular expression string matching. Use of * wildcards could degrade performance. */
  regexp?: InputMaybe<Scalars['String']>;
};

export type TsWhereStripe_AccountPastDueInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['String']>;
  /** Array of possible exact match values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Full text searching with fuzzy matching. */
  match?: InputMaybe<Scalars['String']>;
  /** Regular expression string matching. Use of * wildcards could degrade performance. */
  regexp?: InputMaybe<Scalars['String']>;
};

export type TsWhereStripe_AccountPendingVerificationInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['String']>;
  /** Array of possible exact match values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Full text searching with fuzzy matching. */
  match?: InputMaybe<Scalars['String']>;
  /** Regular expression string matching. Use of * wildcards could degrade performance. */
  regexp?: InputMaybe<Scalars['String']>;
};

export type TsWhereStripe_PersonInput = {
  account?: InputMaybe<TsWhereStringInput>;
  address?: InputMaybe<TsWhereStripe_AddressInput>;
  address_kana?: InputMaybe<TsWhereStripe_LegalEntityJapanAddressInput>;
  address_kanji?: InputMaybe<TsWhereStripe_LegalEntityJapanAddressInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  dob?: InputMaybe<TsWhereStripe_LegalEntityDobInput>;
  email?: InputMaybe<TsWhereStringInput>;
  first_name?: InputMaybe<TsWhereStringInput>;
  first_name_kana?: InputMaybe<TsWhereStringInput>;
  first_name_kanji?: InputMaybe<TsWhereStringInput>;
  full_name_aliases?: InputMaybe<TsWhereStripe_AccountFullNameAliasesInput>;
  future_requirements?: InputMaybe<TsWhereStripe_PersonFutureRequirementsInput>;
  gender?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  id_number_provided?: InputMaybe<TsWhereBooleanInput>;
  last_name?: InputMaybe<TsWhereStringInput>;
  last_name_kana?: InputMaybe<TsWhereStringInput>;
  last_name_kanji?: InputMaybe<TsWhereStringInput>;
  maiden_name?: InputMaybe<TsWhereStringInput>;
  nationality?: InputMaybe<TsWhereStringInput>;
  object?: InputMaybe<TsWhereInput>;
  phone?: InputMaybe<TsWhereStringInput>;
  political_exposure?: InputMaybe<TsWhereInput>;
  relationship?: InputMaybe<TsWhereStripe_PersonRelationshipInput>;
  requirements?: InputMaybe<TsWhereStripe_PersonRequirementsInput>;
  ssn_last_4_provided?: InputMaybe<TsWhereBooleanInput>;
  verification?: InputMaybe<TsWhereStripe_LegalEntityPersonVerificationInput>;
};

export type TsWhereStripe_LegalEntityDobInput = {
  day?: InputMaybe<TsWhereIntegerInput>;
  month?: InputMaybe<TsWhereIntegerInput>;
  year?: InputMaybe<TsWhereIntegerInput>;
};

export type TsWhereStripe_AccountFullNameAliasesInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['String']>;
  /** Array of possible exact match values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Full text searching with fuzzy matching. */
  match?: InputMaybe<Scalars['String']>;
  /** Regular expression string matching. Use of * wildcards could degrade performance. */
  regexp?: InputMaybe<Scalars['String']>;
};

export type TsWhereStripe_PersonFutureRequirementsInput = {
  alternatives?: InputMaybe<TsWhereStripe_AccountRequirementsAlternativeInput>;
  currently_due?: InputMaybe<TsWhereStripe_AccountCurrentlyDueInput>;
  errors?: InputMaybe<TsWhereStripe_AccountRequirementsErrorInput>;
  eventually_due?: InputMaybe<TsWhereStripe_AccountEventuallyDueInput>;
  past_due?: InputMaybe<TsWhereStripe_AccountPastDueInput>;
  pending_verification?: InputMaybe<TsWhereStripe_AccountPendingVerificationInput>;
};

export type TsWhereStripe_PersonRelationshipInput = {
  director?: InputMaybe<TsWhereBooleanInput>;
  executive?: InputMaybe<TsWhereBooleanInput>;
  owner?: InputMaybe<TsWhereBooleanInput>;
  percent_ownership?: InputMaybe<TsWhereNumberInput>;
  representative?: InputMaybe<TsWhereBooleanInput>;
  title?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PersonRequirementsInput = {
  alternatives?: InputMaybe<TsWhereStripe_AccountRequirementsAlternativeInput>;
  currently_due?: InputMaybe<TsWhereStripe_AccountCurrentlyDueInput>;
  errors?: InputMaybe<TsWhereStripe_AccountRequirementsErrorInput>;
  eventually_due?: InputMaybe<TsWhereStripe_AccountEventuallyDueInput>;
  past_due?: InputMaybe<TsWhereStripe_AccountPastDueInput>;
  pending_verification?: InputMaybe<TsWhereStripe_AccountPendingVerificationInput>;
};

export type TsWhereStripe_LegalEntityPersonVerificationInput = {
  additional_document?: InputMaybe<TsWhereStripe_LegalEntityPersonVerificationDocumentInput>;
  details?: InputMaybe<TsWhereStringInput>;
  details_code?: InputMaybe<TsWhereStringInput>;
  document?: InputMaybe<TsWhereStripe_LegalEntityPersonVerificationDocumentInput>;
  status?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_LegalEntityPersonVerificationDocumentInput = {
  details?: InputMaybe<TsWhereStringInput>;
  details_code?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_AccountRequirementsInput = {
  alternatives?: InputMaybe<TsWhereStripe_AccountRequirementsAlternativeInput>;
  current_deadline?: InputMaybe<TsWhereIntegerInput>;
  currently_due?: InputMaybe<TsWhereStripe_AccountCurrentlyDueInput>;
  disabled_reason?: InputMaybe<TsWhereStringInput>;
  errors?: InputMaybe<TsWhereStripe_AccountRequirementsErrorInput>;
  eventually_due?: InputMaybe<TsWhereStripe_AccountEventuallyDueInput>;
  past_due?: InputMaybe<TsWhereStripe_AccountPastDueInput>;
  pending_verification?: InputMaybe<TsWhereStripe_AccountPendingVerificationInput>;
};

export type TsWhereStripe_AccountSettingsInput = {
  bacs_debit_payments?: InputMaybe<TsWhereStripe_AccountBacsDebitPaymentsSettingsInput>;
  branding?: InputMaybe<TsWhereStripe_AccountBrandingSettingsInput>;
  card_issuing?: InputMaybe<TsWhereStripe_AccountCardIssuingSettingsInput>;
  card_payments?: InputMaybe<TsWhereStripe_AccountCardPaymentsSettingsInput>;
  dashboard?: InputMaybe<TsWhereStripe_AccountDashboardSettingsInput>;
  payments?: InputMaybe<TsWhereStripe_AccountPaymentsSettingsInput>;
  payouts?: InputMaybe<TsWhereStripe_AccountPayoutSettingsInput>;
  sepa_debit_payments?: InputMaybe<TsWhereStripe_AccountSepaDebitPaymentsSettingsInput>;
};

export type TsWhereStripe_AccountBacsDebitPaymentsSettingsInput = {
  display_name?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_AccountBrandingSettingsInput = {
  primary_color?: InputMaybe<TsWhereStringInput>;
  secondary_color?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_AccountCardIssuingSettingsInput = {
  tos_acceptance?: InputMaybe<TsWhereStripe_CardIssuingAccountTermsOfServiceInput>;
};

export type TsWhereStripe_CardIssuingAccountTermsOfServiceInput = {
  date?: InputMaybe<TsWhereIntegerInput>;
  ip?: InputMaybe<TsWhereStringInput>;
  user_agent?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_AccountCardPaymentsSettingsInput = {
  decline_on?: InputMaybe<TsWhereStripe_AccountDeclineChargeOnInput>;
  statement_descriptor_prefix?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_AccountDeclineChargeOnInput = {
  avs_failure?: InputMaybe<TsWhereBooleanInput>;
  cvc_failure?: InputMaybe<TsWhereBooleanInput>;
};

export type TsWhereStripe_AccountDashboardSettingsInput = {
  display_name?: InputMaybe<TsWhereStringInput>;
  timezone?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_AccountPaymentsSettingsInput = {
  statement_descriptor?: InputMaybe<TsWhereStringInput>;
  statement_descriptor_kana?: InputMaybe<TsWhereStringInput>;
  statement_descriptor_kanji?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_AccountPayoutSettingsInput = {
  debit_negative_balances?: InputMaybe<TsWhereBooleanInput>;
  schedule?: InputMaybe<TsWhereStripe_TransferScheduleInput>;
  statement_descriptor?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_TransferScheduleInput = {
  delay_days?: InputMaybe<TsWhereIntegerInput>;
  interval?: InputMaybe<TsWhereStringInput>;
  monthly_anchor?: InputMaybe<TsWhereIntegerInput>;
  weekly_anchor?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_AccountSepaDebitPaymentsSettingsInput = {
  creditor_id?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_AccountTosAcceptanceInput = {
  date?: InputMaybe<TsWhereIntegerInput>;
  ip?: InputMaybe<TsWhereStringInput>;
  service_agreement?: InputMaybe<TsWhereStringInput>;
  user_agent?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodWrappedStringUnionInput = {
  value?: InputMaybe<TsWhereStringInput>;
  acss_debit?: InputMaybe<TsWhereStripe_PaymentMethodAcssDebitInput>;
  au_becs_debit?: InputMaybe<TsWhereStripe_PaymentMethodAuBecsDebitInput>;
  bacs_debit?: InputMaybe<TsWhereStripe_PaymentMethodBacsDebitInput>;
  billing_details?: InputMaybe<TsWhereStripe_BillingDetailsInput>;
  boleto?: InputMaybe<TsWhereStripe_PaymentMethodBoletoInput>;
  card?: InputMaybe<TsWhereStripe_PaymentMethodCardInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  eps?: InputMaybe<TsWhereStripe_PaymentMethodEpsInput>;
  fpx?: InputMaybe<TsWhereStripe_PaymentMethodFpxInput>;
  id?: InputMaybe<TsWhereStringInput>;
  ideal?: InputMaybe<TsWhereStripe_PaymentMethodIdealInput>;
  klarna?: InputMaybe<TsWhereStripe_PaymentMethodKlarnaInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  p24?: InputMaybe<TsWhereStripe_PaymentMethodP24Input>;
  sepa_debit?: InputMaybe<TsWhereStripe_PaymentMethodSepaDebitInput>;
  sofort?: InputMaybe<TsWhereStripe_PaymentMethodSofortInput>;
  type?: InputMaybe<TsWhereInput>;
  us_bank_account?: InputMaybe<TsWhereStripe_PaymentMethodUsBankAccountInput>;
};

export type TsWhereStripe_PaymentMethodAcssDebitInput = {
  bank_name?: InputMaybe<TsWhereStringInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  institution_number?: InputMaybe<TsWhereStringInput>;
  last4?: InputMaybe<TsWhereStringInput>;
  transit_number?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodAuBecsDebitInput = {
  bsb_number?: InputMaybe<TsWhereStringInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  last4?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodBacsDebitInput = {
  fingerprint?: InputMaybe<TsWhereStringInput>;
  last4?: InputMaybe<TsWhereStringInput>;
  sort_code?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodBoletoInput = {
  tax_id?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodCardInput = {
  brand?: InputMaybe<TsWhereStringInput>;
  checks?: InputMaybe<TsWhereStripe_PaymentMethodCardChecksInput>;
  country?: InputMaybe<TsWhereStringInput>;
  exp_month?: InputMaybe<TsWhereIntegerInput>;
  exp_year?: InputMaybe<TsWhereIntegerInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  funding?: InputMaybe<TsWhereStringInput>;
  generated_from?: InputMaybe<TsWhereStripe_PaymentMethodCardGeneratedCardInput>;
  last4?: InputMaybe<TsWhereStringInput>;
  networks?: InputMaybe<TsWhereStripe_NetworksInput>;
  three_d_secure_usage?: InputMaybe<TsWhereStripe_ThreeDSecureUsageInput>;
  wallet?: InputMaybe<TsWhereStripe_PaymentMethodCardWalletInput>;
};

export type TsWhereStripe_PaymentMethodCardChecksInput = {
  address_line1_check?: InputMaybe<TsWhereStringInput>;
  address_postal_code_check?: InputMaybe<TsWhereStringInput>;
  cvc_check?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodCardGeneratedCardInput = {
  charge?: InputMaybe<TsWhereStringInput>;
  payment_method_details?: InputMaybe<TsWhereStripe_CardGeneratedFromPaymentMethodDetailsInput>;
};

export type TsWhereStripe_CardGeneratedFromPaymentMethodDetailsInput = {
  card_present?: InputMaybe<TsWhereStripe_PaymentMethodDetailsCardPresentInput>;
  type?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsCardPresentInput = {
  amount_authorized?: InputMaybe<TsWhereIntegerInput>;
  brand?: InputMaybe<TsWhereStringInput>;
  capture_before?: InputMaybe<TsWhereIntegerInput>;
  cardholder_name?: InputMaybe<TsWhereStringInput>;
  country?: InputMaybe<TsWhereStringInput>;
  emv_auth_data?: InputMaybe<TsWhereStringInput>;
  exp_month?: InputMaybe<TsWhereIntegerInput>;
  exp_year?: InputMaybe<TsWhereIntegerInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  funding?: InputMaybe<TsWhereStringInput>;
  generated_card?: InputMaybe<TsWhereStringInput>;
  incremental_authorization_supported?: InputMaybe<TsWhereBooleanInput>;
  last4?: InputMaybe<TsWhereStringInput>;
  network?: InputMaybe<TsWhereStringInput>;
  overcapture_supported?: InputMaybe<TsWhereBooleanInput>;
  read_method?: InputMaybe<TsWhereInput>;
  receipt?: InputMaybe<TsWhereStripe_PaymentMethodDetailsCardPresentReceiptInput>;
};

export type TsWhereStripe_PaymentMethodDetailsCardPresentReceiptInput = {
  account_type?: InputMaybe<TsWhereInput>;
  application_cryptogram?: InputMaybe<TsWhereStringInput>;
  application_preferred_name?: InputMaybe<TsWhereStringInput>;
  authorization_code?: InputMaybe<TsWhereStringInput>;
  authorization_response_code?: InputMaybe<TsWhereStringInput>;
  cardholder_verification_method?: InputMaybe<TsWhereStringInput>;
  dedicated_file_name?: InputMaybe<TsWhereStringInput>;
  terminal_verification_results?: InputMaybe<TsWhereStringInput>;
  transaction_status_information?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_NetworksInput = {
  available?: InputMaybe<TsWhereStripe_PaymentMethodAvailableInput>;
  preferred?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodAvailableInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['String']>;
  /** Array of possible exact match values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Full text searching with fuzzy matching. */
  match?: InputMaybe<Scalars['String']>;
  /** Regular expression string matching. Use of * wildcards could degrade performance. */
  regexp?: InputMaybe<Scalars['String']>;
};

export type TsWhereStripe_ThreeDSecureUsageInput = {
  supported?: InputMaybe<TsWhereBooleanInput>;
};

export type TsWhereStripe_PaymentMethodCardWalletInput = {
  dynamic_last4?: InputMaybe<TsWhereStringInput>;
  masterpass?: InputMaybe<TsWhereStripe_PaymentMethodCardWalletMasterpassInput>;
  type?: InputMaybe<TsWhereInput>;
  visa_checkout?: InputMaybe<TsWhereStripe_PaymentMethodCardWalletVisaCheckoutInput>;
};

export type TsWhereStripe_PaymentMethodCardWalletMasterpassInput = {
  billing_address?: InputMaybe<TsWhereStripe_AddressInput>;
  email?: InputMaybe<TsWhereStringInput>;
  name?: InputMaybe<TsWhereStringInput>;
  shipping_address?: InputMaybe<TsWhereStripe_AddressInput>;
};

export type TsWhereStripe_PaymentMethodCardWalletVisaCheckoutInput = {
  billing_address?: InputMaybe<TsWhereStripe_AddressInput>;
  email?: InputMaybe<TsWhereStringInput>;
  name?: InputMaybe<TsWhereStringInput>;
  shipping_address?: InputMaybe<TsWhereStripe_AddressInput>;
};

export type TsWhereStripe_PaymentMethodEpsInput = {
  bank?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_PaymentMethodFpxInput = {
  bank?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_PaymentMethodIdealInput = {
  bank?: InputMaybe<TsWhereInput>;
  bic?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_PaymentMethodKlarnaInput = {
  dob?: InputMaybe<TsWhereStripe_PaymentFlowsPrivatePaymentMethodsKlarnaDobInput>;
};

export type TsWhereStripe_PaymentFlowsPrivatePaymentMethodsKlarnaDobInput = {
  day?: InputMaybe<TsWhereIntegerInput>;
  month?: InputMaybe<TsWhereIntegerInput>;
  year?: InputMaybe<TsWhereIntegerInput>;
};

export type TsWhereStripe_PaymentMethodP24Input = {
  bank?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_PaymentMethodSepaDebitInput = {
  bank_code?: InputMaybe<TsWhereStringInput>;
  branch_code?: InputMaybe<TsWhereStringInput>;
  country?: InputMaybe<TsWhereStringInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  last4?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodSofortInput = {
  country?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodUsBankAccountInput = {
  account_holder_type?: InputMaybe<TsWhereInput>;
  account_type?: InputMaybe<TsWhereInput>;
  bank_name?: InputMaybe<TsWhereStringInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  last4?: InputMaybe<TsWhereStringInput>;
  routing_number?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentIntentPaymentMethodOptionsInput = {
  acss_debit?: InputMaybe<TsWhere4c5fc35133092d01c0a6f6273b32acefUnionInput>;
  afterpay_clearpay?: InputMaybe<TsWhere69c699ae4c023cdd5081fd0b275d2314UnionInput>;
  alipay?: InputMaybe<TsWhere0c15571704f92e4deef74bf2861e3048UnionInput>;
  au_becs_debit?: InputMaybe<TsWhered0f94d051a53ade5163af84b3fd6b0f7UnionInput>;
  bacs_debit?: InputMaybe<TsWhere55b3d4514248bce7ac082bbc0da1833aUnionInput>;
  bancontact?: InputMaybe<TsWhereac15fe59c1b71bd6db2d201a4acee09dUnionInput>;
  boleto?: InputMaybe<TsWhere076b30d85cca1aae72305dffd8194343UnionInput>;
  card?: InputMaybe<TsWhere6181441ba9fb7eee556dd3a4a9d229e4UnionInput>;
  card_present?: InputMaybe<TsWherea245e0776494a0d51fe046b0453d38afUnionInput>;
  customer_balance?: InputMaybe<TsWhere8b9cb37bcfc0b30034cf6ebd1e41fe69UnionInput>;
  eps?: InputMaybe<TsWheref973d307d812f0dfb771bc8122e5c599UnionInput>;
  fpx?: InputMaybe<TsWhereabae1b112405e8b3c0dbfa673a54aaadUnionInput>;
  giropay?: InputMaybe<TsWhere8cc56b75820487c13c502fada2896d16UnionInput>;
  grabpay?: InputMaybe<TsWhereeaab7727acdc782ba4b7fd55f1d34914UnionInput>;
  ideal?: InputMaybe<TsWherebc8c021d852b37c55e33cd17b5bc5c8eUnionInput>;
  interac_present?: InputMaybe<TsWhere0790e0b407fa40ec44faa0c0093547c0UnionInput>;
  klarna?: InputMaybe<TsWhere431e685e94c88a23966c5e39578fd407UnionInput>;
  konbini?: InputMaybe<TsWhere00ef7207d1f936d9dfffc7da2b87c7a0UnionInput>;
  oxxo?: InputMaybe<TsWhere3ec3443ea1c1a903147c0d61800da976UnionInput>;
  p24?: InputMaybe<TsWherea35be11d8b3a6f85cf29c066bd2baeecUnionInput>;
  paynow?: InputMaybe<TsWhere3755b88328836d5c8b19acd047bf83f5UnionInput>;
  sepa_debit?: InputMaybe<TsWhere1ef47aea767cbab0a37f27b4392256afUnionInput>;
  sofort?: InputMaybe<TsWhere29eab390824f828a021e12d845868bf5UnionInput>;
  us_bank_account?: InputMaybe<TsWheree8df26123b430c2df83da95f1b7d7d58UnionInput>;
  wechat_pay?: InputMaybe<TsWheref3a2f1202624d0cdb50285826cb85a9eUnionInput>;
};

export type TsWhere4c5fc35133092d01c0a6f6273b32acefUnionInput = {
  mandate_options?: InputMaybe<TsWhereStripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitInput>;
  setup_future_usage?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitInput = {
  custom_mandate_url?: InputMaybe<TsWhereStringInput>;
  interval_description?: InputMaybe<TsWhereStringInput>;
  payment_schedule?: InputMaybe<TsWhereInput>;
  transaction_type?: InputMaybe<TsWhereInput>;
};

export type TsWhere69c699ae4c023cdd5081fd0b275d2314UnionInput = {
  capture_method?: InputMaybe<TsWhereInput>;
  reference?: InputMaybe<TsWhereStringInput>;
  setup_future_usage?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhere0c15571704f92e4deef74bf2861e3048UnionInput = {
  setup_future_usage?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhered0f94d051a53ade5163af84b3fd6b0f7UnionInput = {
  setup_future_usage?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhere55b3d4514248bce7ac082bbc0da1833aUnionInput = {
  setup_future_usage?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhereac15fe59c1b71bd6db2d201a4acee09dUnionInput = {
  preferred_language?: InputMaybe<TsWhereInput>;
  setup_future_usage?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhere076b30d85cca1aae72305dffd8194343UnionInput = {
  expires_after_days?: InputMaybe<TsWhereIntegerInput>;
  setup_future_usage?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhere6181441ba9fb7eee556dd3a4a9d229e4UnionInput = {
  capture_method?: InputMaybe<TsWhereInput>;
  installments?: InputMaybe<TsWhereStripe_PaymentMethodOptionsCardInstallmentsInput>;
  mandate_options?: InputMaybe<TsWhereStripe_PaymentMethodOptionsCardMandateOptionsInput>;
  network?: InputMaybe<TsWhereInput>;
  request_three_d_secure?: InputMaybe<TsWhereInput>;
  setup_future_usage?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_PaymentMethodOptionsCardInstallmentsInput = {
  available_plans?: InputMaybe<TsWhereStripe_PaymentMethodDetailsCardInstallmentsPlanInput>;
  enabled?: InputMaybe<TsWhereBooleanInput>;
  plan?: InputMaybe<TsWhereStripe_PaymentMethodDetailsCardInstallmentsPlanInput>;
};

export type TsWhereStripe_PaymentMethodDetailsCardInstallmentsPlanInput = {
  count?: InputMaybe<TsWhereIntegerInput>;
  interval?: InputMaybe<TsWhereInput>;
  type?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_PaymentMethodOptionsCardMandateOptionsInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  amount_type?: InputMaybe<TsWhereInput>;
  description?: InputMaybe<TsWhereStringInput>;
  end_date?: InputMaybe<TsWhereIntegerInput>;
  interval?: InputMaybe<TsWhereInput>;
  interval_count?: InputMaybe<TsWhereIntegerInput>;
  reference?: InputMaybe<TsWhereStringInput>;
  start_date?: InputMaybe<TsWhereIntegerInput>;
};

export type TsWherea245e0776494a0d51fe046b0453d38afUnionInput = {
  request_extended_authorization?: InputMaybe<TsWhereBooleanInput>;
  request_incremental_authorization_support?: InputMaybe<TsWhereBooleanInput>;
  capture_method?: InputMaybe<TsWhereInput>;
  setup_future_usage?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhere8b9cb37bcfc0b30034cf6ebd1e41fe69UnionInput = {
  bank_transfer?: InputMaybe<TsWhereStripe_PaymentMethodOptionsCustomerBalanceBankTransferInput>;
  funding_type?: InputMaybe<TsWhereInput>;
  setup_future_usage?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_PaymentMethodOptionsCustomerBalanceBankTransferInput = {
  type?: InputMaybe<TsWhereInput>;
};

export type TsWheref973d307d812f0dfb771bc8122e5c599UnionInput = {
  setup_future_usage?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhereabae1b112405e8b3c0dbfa673a54aaadUnionInput = {
  setup_future_usage?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhere8cc56b75820487c13c502fada2896d16UnionInput = {
  setup_future_usage?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhereeaab7727acdc782ba4b7fd55f1d34914UnionInput = {
  setup_future_usage?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWherebc8c021d852b37c55e33cd17b5bc5c8eUnionInput = {
  setup_future_usage?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhere0790e0b407fa40ec44faa0c0093547c0UnionInput = {
  capture_method?: InputMaybe<TsWhereInput>;
  setup_future_usage?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhere431e685e94c88a23966c5e39578fd407UnionInput = {
  capture_method?: InputMaybe<TsWhereInput>;
  preferred_locale?: InputMaybe<TsWhereStringInput>;
  setup_future_usage?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhere00ef7207d1f936d9dfffc7da2b87c7a0UnionInput = {
  confirmation_number?: InputMaybe<TsWhereStringInput>;
  expires_after_days?: InputMaybe<TsWhereIntegerInput>;
  expires_at?: InputMaybe<TsWhereIntegerInput>;
  product_description?: InputMaybe<TsWhereStringInput>;
  setup_future_usage?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhere3ec3443ea1c1a903147c0d61800da976UnionInput = {
  expires_after_days?: InputMaybe<TsWhereIntegerInput>;
  setup_future_usage?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWherea35be11d8b3a6f85cf29c066bd2baeecUnionInput = {
  setup_future_usage?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhere3755b88328836d5c8b19acd047bf83f5UnionInput = {
  setup_future_usage?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhere1ef47aea767cbab0a37f27b4392256afUnionInput = {
  setup_future_usage?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhere29eab390824f828a021e12d845868bf5UnionInput = {
  preferred_language?: InputMaybe<TsWhereInput>;
  setup_future_usage?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWheree8df26123b430c2df83da95f1b7d7d58UnionInput = {
  setup_future_usage?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
};

export type TsWheref3a2f1202624d0cdb50285826cb85a9eUnionInput = {
  app_id?: InputMaybe<TsWhereStringInput>;
  client?: InputMaybe<TsWhereInput>;
  setup_future_usage?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_PaymentIntentPaymentMethodTypesInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['String']>;
  /** Array of possible exact match values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Full text searching with fuzzy matching. */
  match?: InputMaybe<Scalars['String']>;
  /** Regular expression string matching. Use of * wildcards could degrade performance. */
  regexp?: InputMaybe<Scalars['String']>;
};

export type TsWhereStripe_PaymentIntentProcessingInput = {
  card?: InputMaybe<TsWhereStripe_PaymentIntentCardProcessingInput>;
  type?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_PaymentIntentCardProcessingInput = {
  customer_notification?: InputMaybe<TsWhereStripe_PaymentIntentProcessingCustomerNotificationInput>;
};

export type TsWhereStripe_PaymentIntentProcessingCustomerNotificationInput = {
  approval_requested?: InputMaybe<TsWhereBooleanInput>;
  completes_at?: InputMaybe<TsWhereIntegerInput>;
};

export type TsWhereStripe_ReviewWrappedStringUnionInput = {
  value?: InputMaybe<TsWhereStringInput>;
  billing_zip?: InputMaybe<TsWhereStringInput>;
  closed_reason?: InputMaybe<TsWhereInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  id?: InputMaybe<TsWhereStringInput>;
  ip_address?: InputMaybe<TsWhereStringInput>;
  ip_address_location?: InputMaybe<TsWhereStripe_RadarReviewResourceLocationInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  open?: InputMaybe<TsWhereBooleanInput>;
  opened_reason?: InputMaybe<TsWhereInput>;
  reason?: InputMaybe<TsWhereStringInput>;
  session?: InputMaybe<TsWhereStripe_RadarReviewResourceSessionInput>;
};

export type TsWhereStripe_RadarReviewResourceLocationInput = {
  city?: InputMaybe<TsWhereStringInput>;
  country?: InputMaybe<TsWhereStringInput>;
  latitude?: InputMaybe<TsWhereNumberInput>;
  longitude?: InputMaybe<TsWhereNumberInput>;
  region?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_RadarReviewResourceSessionInput = {
  browser?: InputMaybe<TsWhereStringInput>;
  device?: InputMaybe<TsWhereStringInput>;
  platform?: InputMaybe<TsWhereStringInput>;
  version?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_TransferDataInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  destination?: InputMaybe<TsWhereStripe_AccountWrappedStringUnionInput>;
};

export type TsWhereStripe_InvoiceitemInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  customer?: InputMaybe<TsWhereStringInput>;
  date?: InputMaybe<TsWhereIntegerInput>;
  description?: InputMaybe<TsWhereStringInput>;
  discountable?: InputMaybe<TsWhereBooleanInput>;
  discounts?: InputMaybe<TsWhereStripe_PaymentIntentDiscountsInput>;
  id?: InputMaybe<TsWhereStringInput>;
  invoice?: InputMaybe<TsWhereStripe_InvoiceWrappedStringUnionInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  period?: InputMaybe<TsWhereStripe_InvoiceLineItemPeriodInput>;
  price?: InputMaybe<TsWhereStripe_PriceInput>;
  proration?: InputMaybe<TsWhereBooleanInput>;
  quantity?: InputMaybe<TsWhereIntegerInput>;
  subscription?: InputMaybe<TsWhereStripe_SubscriptionWrappedStringUnionInput>;
  subscription_item?: InputMaybe<TsWhereStringInput>;
  tax_rates?: InputMaybe<TsWhereStripe_TaxRateInput>;
  test_clock?: InputMaybe<TsWhereStripe_TestHelpersTestClockWrappedStringUnionInput>;
  unit_amount?: InputMaybe<TsWhereIntegerInput>;
  unit_amount_decimal?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentIntentDiscountsInput = {
  value?: InputMaybe<TsWhereStringInput>;
  checkout_session?: InputMaybe<TsWhereStringInput>;
  coupon?: InputMaybe<TsWhereStripe_CouponInput>;
  customer?: InputMaybe<TsWhereStringInput>;
  end?: InputMaybe<TsWhereIntegerInput>;
  id?: InputMaybe<TsWhereStringInput>;
  invoice?: InputMaybe<TsWhereStringInput>;
  invoice_item?: InputMaybe<TsWhereStringInput>;
  object?: InputMaybe<TsWhereInput>;
  start?: InputMaybe<TsWhereIntegerInput>;
  subscription?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_InvoiceLineItemPeriodInput = {
  end?: InputMaybe<TsWhereIntegerInput>;
  start?: InputMaybe<TsWhereIntegerInput>;
};

export type TsWhereStripe_PriceInput = {
  active?: InputMaybe<TsWhereBooleanInput>;
  billing_scheme?: InputMaybe<TsWhereInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  lookup_key?: InputMaybe<TsWhereStringInput>;
  nickname?: InputMaybe<TsWhereStringInput>;
  object?: InputMaybe<TsWhereInput>;
  product?: InputMaybe<TsWhereStripe_ProductInput>;
  recurring?: InputMaybe<TsWhereStripe_RecurringInput>;
  tax_behavior?: InputMaybe<TsWhereInput>;
  tiers?: InputMaybe<TsWhereStripe_PriceTierInput>;
  tiers_mode?: InputMaybe<TsWhereInput>;
  transform_quantity?: InputMaybe<TsWhereStripe_TransformQuantityInput>;
  type?: InputMaybe<TsWhereInput>;
  unit_amount?: InputMaybe<TsWhereIntegerInput>;
  unit_amount_decimal?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_ProductInput = {
  active?: InputMaybe<TsWhereBooleanInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  description?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  images?: InputMaybe<TsWhereStripe_ProductImagesInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  name?: InputMaybe<TsWhereStringInput>;
  object?: InputMaybe<TsWhereInput>;
  package_dimensions?: InputMaybe<TsWhereStripe_PackageDimensionsInput>;
  shippable?: InputMaybe<TsWhereBooleanInput>;
  statement_descriptor?: InputMaybe<TsWhereStringInput>;
  tax_code?: InputMaybe<TsWhereStripe_TaxCodeWrappedStringUnionInput>;
  unit_label?: InputMaybe<TsWhereStringInput>;
  updated?: InputMaybe<TsWhereIntegerInput>;
  url?: InputMaybe<TsWhereStringInput>;
  prices?: InputMaybe<TsWhereStripe_PriceInput>;
  reviews?: InputMaybe<TsWhereReviewsIo_ListProductReviewsResponseInput>;
  _shapeId?: InputMaybe<TsWhereIdInput>;
  _id?: InputMaybe<TsWhereIdInput>;
};

export type TsWhereStripe_PackageDimensionsInput = {
  height?: InputMaybe<TsWhereNumberInput>;
  length?: InputMaybe<TsWhereNumberInput>;
  weight?: InputMaybe<TsWhereNumberInput>;
  width?: InputMaybe<TsWhereNumberInput>;
};

export type TsWhereStripe_TaxCodeWrappedStringUnionInput = {
  value?: InputMaybe<TsWhereStringInput>;
  description?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  name?: InputMaybe<TsWhereStringInput>;
  object?: InputMaybe<TsWhereInput>;
};

export type TsWhereReviewsIo_ListProductReviewsResponseInput = {
  write_review_link?: InputMaybe<TsWhereStringInput>;
  word?: InputMaybe<TsWhereStringInput>;
  stats?: InputMaybe<TsWhereStripe_ProductStatsInput>;
  store?: InputMaybe<TsWhereStripe_ProductStoreInput>;
  reviews?: InputMaybe<TsWhereStripe_ProductReviewsInput>;
  products?: InputMaybe<TsWhereStripe_ProductProductsInput>;
};

export type TsWhereStripe_ProductStatsInput = {
  average?: InputMaybe<TsWhereNumberInput>;
  count?: InputMaybe<TsWhereIntegerInput>;
};

export type TsWhereStripe_ProductStoreInput = {
  name?: InputMaybe<TsWhereStringInput>;
  logo?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_ProductReviewsInput = {
  total?: InputMaybe<TsWhereIntegerInput>;
  per_page?: InputMaybe<TsWhereIntegerInput>;
  current_page?: InputMaybe<TsWhereIntegerInput>;
  last_page?: InputMaybe<TsWhereIntegerInput>;
  from?: InputMaybe<TsWhereIntegerInput>;
  to?: InputMaybe<TsWhereIntegerInput>;
  data?: InputMaybe<TsWhereReviewsIo_ProductReviewInput>;
};

export type TsWhereReviewsIo_ProductReviewInput = {
  product_review_id?: InputMaybe<TsWhereIntegerInput>;
  product_make?: InputMaybe<TsWhereStringInput>;
  order_id?: InputMaybe<TsWhereStringInput>;
  name?: InputMaybe<TsWhereStringInput>;
  sku?: InputMaybe<TsWhereStringInput>;
  review?: InputMaybe<TsWhereStringInput>;
  title?: InputMaybe<TsWhereStringInput>;
  rating?: InputMaybe<TsWhereIntegerInput>;
  date_created?: InputMaybe<TsWhereStringInput>;
  votes?: InputMaybe<TsWhereStringInput>;
  flags?: InputMaybe<TsWhereStringInput>;
  timeago?: InputMaybe<TsWhereStringInput>;
  date_formatted?: InputMaybe<TsWhereStringInput>;
  product?: InputMaybe<TsWhereReviewsIo_ProductInput>;
  reviewer?: InputMaybe<TsWhereReviewsIo_ReviewerInput>;
  images?: InputMaybe<TsWhereStripe_ProductImagesInput>;
  tags?: InputMaybe<TsWhereStripe_ProductTagsInput>;
  author?: InputMaybe<TsWhereStripe_ProductAuthorInput>;
};

export type TsWhereReviewsIo_ProductInput = {
  sku?: InputMaybe<TsWhereStringInput>;
  name?: InputMaybe<TsWhereStringInput>;
  description?: InputMaybe<TsWhereStringInput>;
  image_url?: InputMaybe<TsWhereStringInput>;
  link?: InputMaybe<TsWhereStringInput>;
  mpn?: InputMaybe<TsWhereStringInput>;
  gtin?: InputMaybe<TsWhereStringInput>;
  brand?: InputMaybe<TsWhereStringInput>;
  category?: InputMaybe<TsWhereStringInput>;
  custom?: InputMaybe<TsWhereStringInput>;
  pageUrl?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereReviewsIo_ReviewerInput = {
  user_id?: InputMaybe<TsWhereIntegerInput>;
  first_name?: InputMaybe<TsWhereStringInput>;
  last_name?: InputMaybe<TsWhereStringInput>;
  verified_buyer?: InputMaybe<TsWhereInput>;
  address?: InputMaybe<TsWhereStringInput>;
  profile_picture?: InputMaybe<TsWhereStringInput>;
  gravatar?: InputMaybe<TsWhereStringInput>;
  email?: InputMaybe<TsWhereStringInput>;
  name_formatted?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_ProductTagsInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['String']>;
  /** Array of possible exact match values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Full text searching with fuzzy matching. */
  match?: InputMaybe<Scalars['String']>;
  /** Regular expression string matching. Use of * wildcards could degrade performance. */
  regexp?: InputMaybe<Scalars['String']>;
};

export type TsWhereStripe_ProductAuthorInput = {
  email?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_ProductProductsInput = {
  sku?: InputMaybe<TsWhereStringInput>;
  name?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_RecurringInput = {
  aggregate_usage?: InputMaybe<TsWhereInput>;
  interval?: InputMaybe<TsWhereInput>;
  interval_count?: InputMaybe<TsWhereIntegerInput>;
  usage_type?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_PriceTierInput = {
  flat_amount?: InputMaybe<TsWhereIntegerInput>;
  flat_amount_decimal?: InputMaybe<TsWhereStringInput>;
  unit_amount?: InputMaybe<TsWhereIntegerInput>;
  unit_amount_decimal?: InputMaybe<TsWhereStringInput>;
  up_to?: InputMaybe<TsWhereIntegerInput>;
};

export type TsWhereStripe_TransformQuantityInput = {
  divide_by?: InputMaybe<TsWhereIntegerInput>;
  round?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_SubscriptionWrappedStringUnionInput = {
  value?: InputMaybe<TsWhereStringInput>;
  application_fee_percent?: InputMaybe<TsWhereNumberInput>;
  automatic_tax?: InputMaybe<TsWhereStripe_SubscriptionAutomaticTaxInput>;
  billing_cycle_anchor?: InputMaybe<TsWhereIntegerInput>;
  billing_thresholds?: InputMaybe<TsWhereStripe_SubscriptionBillingThresholdsInput>;
  cancel_at?: InputMaybe<TsWhereIntegerInput>;
  cancel_at_period_end?: InputMaybe<TsWhereBooleanInput>;
  canceled_at?: InputMaybe<TsWhereIntegerInput>;
  collection_method?: InputMaybe<TsWhereInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  current_period_end?: InputMaybe<TsWhereIntegerInput>;
  current_period_start?: InputMaybe<TsWhereIntegerInput>;
  customer?: InputMaybe<TsWhereStringInput>;
  days_until_due?: InputMaybe<TsWhereIntegerInput>;
  default_tax_rates?: InputMaybe<TsWhereStripe_TaxRateInput>;
  discount?: InputMaybe<TsWhereStripe_DiscountInput>;
  ended_at?: InputMaybe<TsWhereIntegerInput>;
  id?: InputMaybe<TsWhereStringInput>;
  items?: InputMaybe<TsWhereStripe_SubscriptionItemsInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  next_pending_invoice_item_invoice?: InputMaybe<TsWhereIntegerInput>;
  object?: InputMaybe<TsWhereInput>;
  pause_collection?: InputMaybe<TsWhereStripe_SubscriptionsResourcePauseCollectionInput>;
  payment_settings?: InputMaybe<TsWhereStripe_SubscriptionsResourcePaymentSettingsInput>;
  pending_invoice_item_interval?: InputMaybe<TsWhereStripe_SubscriptionPendingInvoiceItemIntervalInput>;
  pending_update?: InputMaybe<TsWhereStripe_SubscriptionsResourcePendingUpdateInput>;
  start_date?: InputMaybe<TsWhereIntegerInput>;
  status?: InputMaybe<TsWhereInput>;
  transfer_data?: InputMaybe<TsWhereStripe_SubscriptionTransferDataInput>;
  trial_end?: InputMaybe<TsWhereIntegerInput>;
  trial_start?: InputMaybe<TsWhereIntegerInput>;
};

export type TsWhereStripe_SubscriptionAutomaticTaxInput = {
  enabled?: InputMaybe<TsWhereBooleanInput>;
};

export type TsWhereStripe_SubscriptionBillingThresholdsInput = {
  amount_gte?: InputMaybe<TsWhereIntegerInput>;
  reset_billing_cycle_anchor?: InputMaybe<TsWhereBooleanInput>;
};

export type TsWhereStripe_SubscriptionItemsInput = {
  data?: InputMaybe<TsWhereStripe_SubscriptionItemInput>;
  has_more?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SubscriptionItemInput = {
  billing_thresholds?: InputMaybe<TsWhereStripe_SubscriptionItemBillingThresholdsInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  id?: InputMaybe<TsWhereStringInput>;
  object?: InputMaybe<TsWhereInput>;
  price?: InputMaybe<TsWhereStripe_PriceInput>;
  quantity?: InputMaybe<TsWhereIntegerInput>;
  subscription?: InputMaybe<TsWhereStringInput>;
  tax_rates?: InputMaybe<TsWhereStripe_TaxRateInput>;
};

export type TsWhereStripe_SubscriptionItemBillingThresholdsInput = {
  usage_gte?: InputMaybe<TsWhereIntegerInput>;
};

export type TsWhereStripe_SubscriptionsResourcePauseCollectionInput = {
  behavior?: InputMaybe<TsWhereInput>;
  resumes_at?: InputMaybe<TsWhereIntegerInput>;
};

export type TsWhereStripe_SubscriptionsResourcePaymentSettingsInput = {
  payment_method_options?: InputMaybe<TsWhereStripe_SubscriptionsResourcePaymentMethodOptionsInput>;
};

export type TsWhereStripe_SubscriptionsResourcePaymentMethodOptionsInput = {
  acss_debit?: InputMaybe<TsWhereStripe_InvoicePaymentMethodOptionsAcssDebitInput>;
  bancontact?: InputMaybe<TsWhereStripe_InvoicePaymentMethodOptionsBancontactInput>;
  card?: InputMaybe<TsWhereStripe_SubscriptionPaymentMethodOptionsCardInput>;
  customer_balance?: InputMaybe<TsWhereStripe_InvoicePaymentMethodOptionsCustomerBalanceInput>;
  us_bank_account?: InputMaybe<TsWhereStripe_InvoicePaymentMethodOptionsUsBankAccountInput>;
};

export type TsWhereStripe_InvoicePaymentMethodOptionsAcssDebitInput = {
  mandate_options?: InputMaybe<TsWhereStripe_InvoicePaymentMethodOptionsAcssDebitMandateOptionsInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_InvoicePaymentMethodOptionsAcssDebitMandateOptionsInput = {
  transaction_type?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_InvoicePaymentMethodOptionsBancontactInput = {
  preferred_language?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_SubscriptionPaymentMethodOptionsCardInput = {
  mandate_options?: InputMaybe<TsWhereStripe_InvoiceMandateOptionsCardInput>;
  request_three_d_secure?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_InvoiceMandateOptionsCardInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  amount_type?: InputMaybe<TsWhereInput>;
  description?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_InvoicePaymentMethodOptionsCustomerBalanceInput = {
  bank_transfer?: InputMaybe<TsWhereStripe_InvoicePaymentMethodOptionsCustomerBalanceBankTransferInput>;
  funding_type?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_InvoicePaymentMethodOptionsCustomerBalanceBankTransferInput = {
  type?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_InvoicePaymentMethodOptionsUsBankAccountInput = {
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_SubscriptionPendingInvoiceItemIntervalInput = {
  interval?: InputMaybe<TsWhereInput>;
  interval_count?: InputMaybe<TsWhereIntegerInput>;
};

export type TsWhereStripe_SubscriptionsResourcePendingUpdateInput = {
  billing_cycle_anchor?: InputMaybe<TsWhereIntegerInput>;
  expires_at?: InputMaybe<TsWhereIntegerInput>;
  subscription_items?: InputMaybe<TsWhereStripe_SubscriptionItemInput>;
  trial_end?: InputMaybe<TsWhereIntegerInput>;
  trial_from_plan?: InputMaybe<TsWhereBooleanInput>;
};

export type TsWhereStripe_SubscriptionTransferDataInput = {
  amount_percent?: InputMaybe<TsWhereNumberInput>;
};

export type TsWhereStripe_TestHelpersTestClockWrappedStringUnionInput = {
  value?: InputMaybe<TsWhereStringInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  deletes_after?: InputMaybe<TsWhereIntegerInput>;
  frozen_time?: InputMaybe<TsWhereIntegerInput>;
  id?: InputMaybe<TsWhereStringInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  name?: InputMaybe<TsWhereStringInput>;
  object?: InputMaybe<TsWhereInput>;
  status?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_ItemInput = {
  amount_subtotal?: InputMaybe<TsWhereIntegerInput>;
  amount_total?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  description?: InputMaybe<TsWhereStringInput>;
  discounts?: InputMaybe<TsWhereStripe_LineItemsDiscountAmountInput>;
  id?: InputMaybe<TsWhereStringInput>;
  object?: InputMaybe<TsWhereInput>;
  price?: InputMaybe<TsWhereStripe_PriceInput>;
  quantity?: InputMaybe<TsWhereIntegerInput>;
  taxes?: InputMaybe<TsWhereStripe_LineItemsTaxAmountInput>;
};

export type TsWhereStripe_LineItemsDiscountAmountInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  discount?: InputMaybe<TsWhereStripe_DiscountInput>;
};

export type TsWhereStripe_LineItemsTaxAmountInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  rate?: InputMaybe<TsWhereStripe_TaxRateInput>;
};

export type TsWhereShipEngine_LabelInput = {
  label_id?: InputMaybe<TsWhereStringInput>;
  status?: InputMaybe<TsWhereStringInput>;
  shipment_id?: InputMaybe<TsWhereStringInput>;
  ship_date?: InputMaybe<TsWhereStringInput>;
  created_at?: InputMaybe<TsWhereStringInput>;
  tracking_number?: InputMaybe<TsWhereStringInput>;
  batch_id?: InputMaybe<TsWhereStringInput>;
  carrier_id?: InputMaybe<TsWhereStringInput>;
  charge_event?: InputMaybe<TsWhereStringInput>;
  service_code?: InputMaybe<TsWhereStringInput>;
  package_code?: InputMaybe<TsWhereStringInput>;
  voided_at?: InputMaybe<TsWhereStringInput>;
  label_format?: InputMaybe<TsWhereStringInput>;
  display_scheme?: InputMaybe<TsWhereStringInput>;
  label_layout?: InputMaybe<TsWhereStringInput>;
  label_image_id?: InputMaybe<TsWhereStringInput>;
  carrier_code?: InputMaybe<TsWhereStringInput>;
  tracking_status?: InputMaybe<TsWhereStringInput>;
  label_download?: InputMaybe<TsWhereShipEngine_LabelDownloadInput>;
  trackable?: InputMaybe<TsWhereBooleanInput>;
  packages?: InputMaybe<TsWhereShipEngine_PackageInput>;
};

export type TsWhereShipEngine_LabelDownloadInput = {
  href?: InputMaybe<TsWhereStringInput>;
  pdf?: InputMaybe<TsWhereStringInput>;
  png?: InputMaybe<TsWhereStringInput>;
  zpl?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereShipEngine_PackageInput = {
  package_id?: InputMaybe<TsWhereIntegerInput>;
  description?: InputMaybe<TsWhereStringInput>;
  package_code?: InputMaybe<TsWhereStringInput>;
  tracking_number?: InputMaybe<TsWhereStringInput>;
  label_download?: InputMaybe<TsWhereShipEngine_LabelDownloadInput>;
  weight?: InputMaybe<TsWhereShipEngine_WeightInput>;
  dimensions?: InputMaybe<TsWhereShipEngine_DimensionsInput>;
};

export type TsWhereShipEngine_WeightInput = {
  value?: InputMaybe<TsWhereNumberInput>;
  unit?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereShipEngine_DimensionsInput = {
  length?: InputMaybe<TsWhereNumberInput>;
  width?: InputMaybe<TsWhereNumberInput>;
  height?: InputMaybe<TsWhereNumberInput>;
  unit?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodInput = {
  acss_debit?: InputMaybe<TsWhereStripe_PaymentMethodAcssDebitInput>;
  au_becs_debit?: InputMaybe<TsWhereStripe_PaymentMethodAuBecsDebitInput>;
  bacs_debit?: InputMaybe<TsWhereStripe_PaymentMethodBacsDebitInput>;
  billing_details?: InputMaybe<TsWhereStripe_BillingDetailsInput>;
  boleto?: InputMaybe<TsWhereStripe_PaymentMethodBoletoInput>;
  card?: InputMaybe<TsWhereStripe_PaymentMethodCardInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  customer?: InputMaybe<TsWhereStripe_CustomerWrappedStringUnionInput>;
  eps?: InputMaybe<TsWhereStripe_PaymentMethodEpsInput>;
  fpx?: InputMaybe<TsWhereStripe_PaymentMethodFpxInput>;
  id?: InputMaybe<TsWhereStringInput>;
  ideal?: InputMaybe<TsWhereStripe_PaymentMethodIdealInput>;
  klarna?: InputMaybe<TsWhereStripe_PaymentMethodKlarnaInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  p24?: InputMaybe<TsWhereStripe_PaymentMethodP24Input>;
  sepa_debit?: InputMaybe<TsWhereStripe_PaymentMethodSepaDebitInput>;
  sofort?: InputMaybe<TsWhereStripe_PaymentMethodSofortInput>;
  type?: InputMaybe<TsWhereInput>;
  us_bank_account?: InputMaybe<TsWhereStripe_PaymentMethodUsBankAccountInput>;
};

export type TsWhereStripe_CustomerWrappedStringUnionInput = {
  value?: InputMaybe<TsWhereStringInput>;
  address?: InputMaybe<TsWhereStripe_AddressInput>;
  balance?: InputMaybe<TsWhereIntegerInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  delinquent?: InputMaybe<TsWhereBooleanInput>;
  description?: InputMaybe<TsWhereStringInput>;
  discount?: InputMaybe<TsWhereStripe_DiscountInput>;
  email?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  invoice_prefix?: InputMaybe<TsWhereStringInput>;
  invoice_settings?: InputMaybe<TsWhereStripe_InvoiceSettingCustomerSettingInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  name?: InputMaybe<TsWhereStringInput>;
  next_invoice_sequence?: InputMaybe<TsWhereIntegerInput>;
  object?: InputMaybe<TsWhereInput>;
  phone?: InputMaybe<TsWhereStringInput>;
  preferred_locales?: InputMaybe<TsWhereStripe_CustomerPreferredLocalesInput>;
  shipping?: InputMaybe<TsWhereStripe_ShippingInput>;
  sources?: InputMaybe<TsWhereStripe_CustomerSourcesInput>;
  subscriptions?: InputMaybe<TsWhereStripe_CustomerSubscriptionsInput>;
  tax?: InputMaybe<TsWhereStripe_CustomerTaxInput>;
  tax_exempt?: InputMaybe<TsWhereInput>;
  tax_ids?: InputMaybe<TsWhereStripe_CustomerTaxIdsInput>;
};

export type TsWhereStripe_InvoiceSettingCustomerSettingInput = {
  custom_fields?: InputMaybe<TsWhereStripe_InvoiceSettingCustomFieldInput>;
  footer?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_CustomerPreferredLocalesInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['String']>;
  /** Array of possible exact match values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Full text searching with fuzzy matching. */
  match?: InputMaybe<Scalars['String']>;
  /** Regular expression string matching. Use of * wildcards could degrade performance. */
  regexp?: InputMaybe<Scalars['String']>;
};

export type TsWhereStripe_CustomerSourcesInput = {
  data?: InputMaybe<TsWhereStripe_CustomerDataInput>;
  has_more?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_CustomerDataInput = {
  created?: InputMaybe<TsWhereIntegerInput>;
  customer?: InputMaybe<TsWhereStringInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  payment_amount?: InputMaybe<TsWhereIntegerInput>;
  payment_currency?: InputMaybe<TsWhereStringInput>;
  reusable?: InputMaybe<TsWhereBooleanInput>;
  used?: InputMaybe<TsWhereBooleanInput>;
  username?: InputMaybe<TsWhereStringInput>;
  account_holder_name?: InputMaybe<TsWhereStringInput>;
  account_holder_type?: InputMaybe<TsWhereStringInput>;
  account_type?: InputMaybe<TsWhereStringInput>;
  bank_name?: InputMaybe<TsWhereStringInput>;
  country?: InputMaybe<TsWhereStringInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  default_for_currency?: InputMaybe<TsWhereBooleanInput>;
  last4?: InputMaybe<TsWhereStringInput>;
  routing_number?: InputMaybe<TsWhereStringInput>;
  status?: InputMaybe<TsWhereStringInput>;
  active?: InputMaybe<TsWhereBooleanInput>;
  amount?: InputMaybe<TsWhereIntegerInput>;
  amount_received?: InputMaybe<TsWhereIntegerInput>;
  bitcoin_amount?: InputMaybe<TsWhereIntegerInput>;
  bitcoin_amount_received?: InputMaybe<TsWhereIntegerInput>;
  bitcoin_uri?: InputMaybe<TsWhereStringInput>;
  description?: InputMaybe<TsWhereStringInput>;
  email?: InputMaybe<TsWhereStringInput>;
  filled?: InputMaybe<TsWhereBooleanInput>;
  inbound_address?: InputMaybe<TsWhereStringInput>;
  payment?: InputMaybe<TsWhereStringInput>;
  refund_address?: InputMaybe<TsWhereStringInput>;
  transactions?: InputMaybe<TsWhereStripe_BitcoinReceiverTransactionsInput>;
  uncaptured_funds?: InputMaybe<TsWhereBooleanInput>;
  used_for_payment?: InputMaybe<TsWhereBooleanInput>;
  address_city?: InputMaybe<TsWhereStringInput>;
  address_country?: InputMaybe<TsWhereStringInput>;
  address_line1?: InputMaybe<TsWhereStringInput>;
  address_line1_check?: InputMaybe<TsWhereStringInput>;
  address_line2?: InputMaybe<TsWhereStringInput>;
  address_state?: InputMaybe<TsWhereStringInput>;
  address_zip?: InputMaybe<TsWhereStringInput>;
  address_zip_check?: InputMaybe<TsWhereStringInput>;
  brand?: InputMaybe<TsWhereStringInput>;
  cvc_check?: InputMaybe<TsWhereStringInput>;
  dynamic_last4?: InputMaybe<TsWhereStringInput>;
  exp_month?: InputMaybe<TsWhereIntegerInput>;
  exp_year?: InputMaybe<TsWhereIntegerInput>;
  funding?: InputMaybe<TsWhereStringInput>;
  name?: InputMaybe<TsWhereStringInput>;
  tokenization_method?: InputMaybe<TsWhereStringInput>;
  ach_credit_transfer?: InputMaybe<TsWhereStripe_SourceTypeAchCreditTransferInput>;
  ach_debit?: InputMaybe<TsWhereStripe_SourceTypeAchDebitInput>;
  acss_debit?: InputMaybe<TsWhereStripe_SourceTypeAcssDebitInput>;
  alipay?: InputMaybe<TsWhereStripe_SourceTypeAlipayInput>;
  au_becs_debit?: InputMaybe<TsWhereStripe_SourceTypeAuBecsDebitInput>;
  bancontact?: InputMaybe<TsWhereStripe_SourceTypeBancontactInput>;
  card?: InputMaybe<TsWhereStripe_SourceTypeCardInput>;
  card_present?: InputMaybe<TsWhereStripe_SourceTypeCardPresentInput>;
  client_secret?: InputMaybe<TsWhereStringInput>;
  code_verification?: InputMaybe<TsWhereStripe_SourceCodeVerificationFlowInput>;
  eps?: InputMaybe<TsWhereStripe_SourceTypeEpsInput>;
  flow?: InputMaybe<TsWhereStringInput>;
  giropay?: InputMaybe<TsWhereStripe_SourceTypeGiropayInput>;
  ideal?: InputMaybe<TsWhereStripe_SourceTypeIdealInput>;
  klarna?: InputMaybe<TsWhereStripe_SourceTypeKlarnaInput>;
  multibanco?: InputMaybe<TsWhereStripe_SourceTypeMultibancoInput>;
  owner?: InputMaybe<TsWhereStripe_SourceOwnerInput>;
  p24?: InputMaybe<TsWhereStripe_SourceTypeP24Input>;
  receiver?: InputMaybe<TsWhereStripe_SourceReceiverFlowInput>;
  redirect?: InputMaybe<TsWhereStripe_SourceRedirectFlowInput>;
  sepa_debit?: InputMaybe<TsWhereStripe_SourceTypeSepaDebitInput>;
  sofort?: InputMaybe<TsWhereStripe_SourceTypeSofortInput>;
  source_order?: InputMaybe<TsWhereStripe_SourceOrderInput>;
  statement_descriptor?: InputMaybe<TsWhereStringInput>;
  three_d_secure?: InputMaybe<TsWhereStripe_SourceTypeThreeDSecureInput>;
  type?: InputMaybe<TsWhereInput>;
  usage?: InputMaybe<TsWhereStringInput>;
  wechat?: InputMaybe<TsWhereStripe_SourceTypeWechatInput>;
};

export type TsWhereStripe_BitcoinReceiverTransactionsInput = {
  data?: InputMaybe<TsWhereStripe_BitcoinTransactionInput>;
  has_more?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_BitcoinTransactionInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  bitcoin_amount?: InputMaybe<TsWhereIntegerInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  object?: InputMaybe<TsWhereInput>;
  receiver?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SourceTypeAchCreditTransferInput = {
  account_number?: InputMaybe<TsWhereStringInput>;
  bank_name?: InputMaybe<TsWhereStringInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  refund_account_holder_name?: InputMaybe<TsWhereStringInput>;
  refund_account_holder_type?: InputMaybe<TsWhereStringInput>;
  refund_routing_number?: InputMaybe<TsWhereStringInput>;
  routing_number?: InputMaybe<TsWhereStringInput>;
  swift_code?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SourceTypeAchDebitInput = {
  bank_name?: InputMaybe<TsWhereStringInput>;
  country?: InputMaybe<TsWhereStringInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  last4?: InputMaybe<TsWhereStringInput>;
  routing_number?: InputMaybe<TsWhereStringInput>;
  type?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SourceTypeAcssDebitInput = {
  bank_address_city?: InputMaybe<TsWhereStringInput>;
  bank_address_line_1?: InputMaybe<TsWhereStringInput>;
  bank_address_line_2?: InputMaybe<TsWhereStringInput>;
  bank_address_postal_code?: InputMaybe<TsWhereStringInput>;
  bank_name?: InputMaybe<TsWhereStringInput>;
  category?: InputMaybe<TsWhereStringInput>;
  country?: InputMaybe<TsWhereStringInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  last4?: InputMaybe<TsWhereStringInput>;
  routing_number?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SourceTypeAlipayInput = {
  data_string?: InputMaybe<TsWhereStringInput>;
  native_url?: InputMaybe<TsWhereStringInput>;
  statement_descriptor?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SourceTypeAuBecsDebitInput = {
  bsb_number?: InputMaybe<TsWhereStringInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  last4?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SourceTypeBancontactInput = {
  bank_code?: InputMaybe<TsWhereStringInput>;
  bank_name?: InputMaybe<TsWhereStringInput>;
  bic?: InputMaybe<TsWhereStringInput>;
  iban_last4?: InputMaybe<TsWhereStringInput>;
  preferred_language?: InputMaybe<TsWhereStringInput>;
  statement_descriptor?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SourceTypeCardInput = {
  address_line1_check?: InputMaybe<TsWhereStringInput>;
  address_zip_check?: InputMaybe<TsWhereStringInput>;
  brand?: InputMaybe<TsWhereStringInput>;
  country?: InputMaybe<TsWhereStringInput>;
  cvc_check?: InputMaybe<TsWhereStringInput>;
  dynamic_last4?: InputMaybe<TsWhereStringInput>;
  exp_month?: InputMaybe<TsWhereIntegerInput>;
  exp_year?: InputMaybe<TsWhereIntegerInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  funding?: InputMaybe<TsWhereStringInput>;
  last4?: InputMaybe<TsWhereStringInput>;
  name?: InputMaybe<TsWhereStringInput>;
  three_d_secure?: InputMaybe<TsWhereStringInput>;
  tokenization_method?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SourceTypeCardPresentInput = {
  application_cryptogram?: InputMaybe<TsWhereStringInput>;
  application_preferred_name?: InputMaybe<TsWhereStringInput>;
  authorization_code?: InputMaybe<TsWhereStringInput>;
  authorization_response_code?: InputMaybe<TsWhereStringInput>;
  brand?: InputMaybe<TsWhereStringInput>;
  country?: InputMaybe<TsWhereStringInput>;
  cvm_type?: InputMaybe<TsWhereStringInput>;
  data_type?: InputMaybe<TsWhereStringInput>;
  dedicated_file_name?: InputMaybe<TsWhereStringInput>;
  emv_auth_data?: InputMaybe<TsWhereStringInput>;
  evidence_customer_signature?: InputMaybe<TsWhereStringInput>;
  evidence_transaction_certificate?: InputMaybe<TsWhereStringInput>;
  exp_month?: InputMaybe<TsWhereIntegerInput>;
  exp_year?: InputMaybe<TsWhereIntegerInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  funding?: InputMaybe<TsWhereStringInput>;
  last4?: InputMaybe<TsWhereStringInput>;
  pos_device_id?: InputMaybe<TsWhereStringInput>;
  pos_entry_mode?: InputMaybe<TsWhereStringInput>;
  read_method?: InputMaybe<TsWhereStringInput>;
  reader?: InputMaybe<TsWhereStringInput>;
  terminal_verification_results?: InputMaybe<TsWhereStringInput>;
  transaction_status_information?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SourceCodeVerificationFlowInput = {
  attempts_remaining?: InputMaybe<TsWhereIntegerInput>;
  status?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SourceTypeEpsInput = {
  reference?: InputMaybe<TsWhereStringInput>;
  statement_descriptor?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SourceTypeGiropayInput = {
  bank_code?: InputMaybe<TsWhereStringInput>;
  bank_name?: InputMaybe<TsWhereStringInput>;
  bic?: InputMaybe<TsWhereStringInput>;
  statement_descriptor?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SourceTypeIdealInput = {
  bank?: InputMaybe<TsWhereStringInput>;
  bic?: InputMaybe<TsWhereStringInput>;
  iban_last4?: InputMaybe<TsWhereStringInput>;
  statement_descriptor?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SourceTypeKlarnaInput = {
  background_image_url?: InputMaybe<TsWhereStringInput>;
  client_token?: InputMaybe<TsWhereStringInput>;
  first_name?: InputMaybe<TsWhereStringInput>;
  last_name?: InputMaybe<TsWhereStringInput>;
  locale?: InputMaybe<TsWhereStringInput>;
  logo_url?: InputMaybe<TsWhereStringInput>;
  page_title?: InputMaybe<TsWhereStringInput>;
  pay_later_asset_urls_descriptive?: InputMaybe<TsWhereStringInput>;
  pay_later_asset_urls_standard?: InputMaybe<TsWhereStringInput>;
  pay_later_name?: InputMaybe<TsWhereStringInput>;
  pay_later_redirect_url?: InputMaybe<TsWhereStringInput>;
  pay_now_asset_urls_descriptive?: InputMaybe<TsWhereStringInput>;
  pay_now_asset_urls_standard?: InputMaybe<TsWhereStringInput>;
  pay_now_name?: InputMaybe<TsWhereStringInput>;
  pay_now_redirect_url?: InputMaybe<TsWhereStringInput>;
  pay_over_time_asset_urls_descriptive?: InputMaybe<TsWhereStringInput>;
  pay_over_time_asset_urls_standard?: InputMaybe<TsWhereStringInput>;
  pay_over_time_name?: InputMaybe<TsWhereStringInput>;
  pay_over_time_redirect_url?: InputMaybe<TsWhereStringInput>;
  payment_method_categories?: InputMaybe<TsWhereStringInput>;
  purchase_country?: InputMaybe<TsWhereStringInput>;
  purchase_type?: InputMaybe<TsWhereStringInput>;
  redirect_url?: InputMaybe<TsWhereStringInput>;
  shipping_delay?: InputMaybe<TsWhereIntegerInput>;
  shipping_first_name?: InputMaybe<TsWhereStringInput>;
  shipping_last_name?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SourceTypeMultibancoInput = {
  entity?: InputMaybe<TsWhereStringInput>;
  reference?: InputMaybe<TsWhereStringInput>;
  refund_account_holder_address_city?: InputMaybe<TsWhereStringInput>;
  refund_account_holder_address_country?: InputMaybe<TsWhereStringInput>;
  refund_account_holder_address_line1?: InputMaybe<TsWhereStringInput>;
  refund_account_holder_address_line2?: InputMaybe<TsWhereStringInput>;
  refund_account_holder_address_postal_code?: InputMaybe<TsWhereStringInput>;
  refund_account_holder_address_state?: InputMaybe<TsWhereStringInput>;
  refund_account_holder_name?: InputMaybe<TsWhereStringInput>;
  refund_iban?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SourceOwnerInput = {
  address?: InputMaybe<TsWhereStripe_AddressInput>;
  email?: InputMaybe<TsWhereStringInput>;
  name?: InputMaybe<TsWhereStringInput>;
  phone?: InputMaybe<TsWhereStringInput>;
  verified_address?: InputMaybe<TsWhereStripe_AddressInput>;
  verified_email?: InputMaybe<TsWhereStringInput>;
  verified_name?: InputMaybe<TsWhereStringInput>;
  verified_phone?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SourceTypeP24Input = {
  reference?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SourceReceiverFlowInput = {
  address?: InputMaybe<TsWhereStringInput>;
  amount_charged?: InputMaybe<TsWhereIntegerInput>;
  amount_received?: InputMaybe<TsWhereIntegerInput>;
  amount_returned?: InputMaybe<TsWhereIntegerInput>;
  refund_attributes_method?: InputMaybe<TsWhereStringInput>;
  refund_attributes_status?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SourceRedirectFlowInput = {
  failure_reason?: InputMaybe<TsWhereStringInput>;
  return_url?: InputMaybe<TsWhereStringInput>;
  status?: InputMaybe<TsWhereStringInput>;
  url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SourceTypeSepaDebitInput = {
  bank_code?: InputMaybe<TsWhereStringInput>;
  branch_code?: InputMaybe<TsWhereStringInput>;
  country?: InputMaybe<TsWhereStringInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  last4?: InputMaybe<TsWhereStringInput>;
  mandate_reference?: InputMaybe<TsWhereStringInput>;
  mandate_url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SourceTypeSofortInput = {
  bank_code?: InputMaybe<TsWhereStringInput>;
  bank_name?: InputMaybe<TsWhereStringInput>;
  bic?: InputMaybe<TsWhereStringInput>;
  country?: InputMaybe<TsWhereStringInput>;
  iban_last4?: InputMaybe<TsWhereStringInput>;
  preferred_language?: InputMaybe<TsWhereStringInput>;
  statement_descriptor?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SourceOrderInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  email?: InputMaybe<TsWhereStringInput>;
  items?: InputMaybe<TsWhereStripe_SourceOrderItemInput>;
  shipping?: InputMaybe<TsWhereStripe_ShippingInput>;
};

export type TsWhereStripe_SourceOrderItemInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  description?: InputMaybe<TsWhereStringInput>;
  parent?: InputMaybe<TsWhereStringInput>;
  quantity?: InputMaybe<TsWhereIntegerInput>;
  type?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SourceTypeThreeDSecureInput = {
  address_line1_check?: InputMaybe<TsWhereStringInput>;
  address_zip_check?: InputMaybe<TsWhereStringInput>;
  authenticated?: InputMaybe<TsWhereBooleanInput>;
  brand?: InputMaybe<TsWhereStringInput>;
  card?: InputMaybe<TsWhereStringInput>;
  country?: InputMaybe<TsWhereStringInput>;
  customer?: InputMaybe<TsWhereStringInput>;
  cvc_check?: InputMaybe<TsWhereStringInput>;
  dynamic_last4?: InputMaybe<TsWhereStringInput>;
  exp_month?: InputMaybe<TsWhereIntegerInput>;
  exp_year?: InputMaybe<TsWhereIntegerInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  funding?: InputMaybe<TsWhereStringInput>;
  last4?: InputMaybe<TsWhereStringInput>;
  name?: InputMaybe<TsWhereStringInput>;
  three_d_secure?: InputMaybe<TsWhereStringInput>;
  tokenization_method?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SourceTypeWechatInput = {
  prepay_id?: InputMaybe<TsWhereStringInput>;
  qr_code_url?: InputMaybe<TsWhereStringInput>;
  statement_descriptor?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_CustomerSubscriptionsInput = {
  data?: InputMaybe<TsWhereStripe_SubscriptionInput>;
  has_more?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SubscriptionInput = {
  application_fee_percent?: InputMaybe<TsWhereNumberInput>;
  automatic_tax?: InputMaybe<TsWhereStripe_SubscriptionAutomaticTaxInput>;
  billing_cycle_anchor?: InputMaybe<TsWhereIntegerInput>;
  billing_thresholds?: InputMaybe<TsWhereStripe_SubscriptionBillingThresholdsInput>;
  cancel_at?: InputMaybe<TsWhereIntegerInput>;
  cancel_at_period_end?: InputMaybe<TsWhereBooleanInput>;
  canceled_at?: InputMaybe<TsWhereIntegerInput>;
  collection_method?: InputMaybe<TsWhereInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  current_period_end?: InputMaybe<TsWhereIntegerInput>;
  current_period_start?: InputMaybe<TsWhereIntegerInput>;
  customer?: InputMaybe<TsWhereStringInput>;
  days_until_due?: InputMaybe<TsWhereIntegerInput>;
  default_tax_rates?: InputMaybe<TsWhereStripe_TaxRateInput>;
  discount?: InputMaybe<TsWhereStripe_DiscountInput>;
  ended_at?: InputMaybe<TsWhereIntegerInput>;
  id?: InputMaybe<TsWhereStringInput>;
  items?: InputMaybe<TsWhereStripe_CustomerItemsInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  next_pending_invoice_item_invoice?: InputMaybe<TsWhereIntegerInput>;
  object?: InputMaybe<TsWhereInput>;
  pause_collection?: InputMaybe<TsWhereStripe_SubscriptionsResourcePauseCollectionInput>;
  payment_settings?: InputMaybe<TsWhereStripe_SubscriptionsResourcePaymentSettingsInput>;
  pending_invoice_item_interval?: InputMaybe<TsWhereStripe_SubscriptionPendingInvoiceItemIntervalInput>;
  pending_update?: InputMaybe<TsWhereStripe_SubscriptionsResourcePendingUpdateInput>;
  start_date?: InputMaybe<TsWhereIntegerInput>;
  status?: InputMaybe<TsWhereInput>;
  transfer_data?: InputMaybe<TsWhereStripe_SubscriptionTransferDataInput>;
  trial_end?: InputMaybe<TsWhereIntegerInput>;
  trial_start?: InputMaybe<TsWhereIntegerInput>;
};

export type TsWhereStripe_CustomerItemsInput = {
  data?: InputMaybe<TsWhereStripe_SubscriptionItemInput>;
  has_more?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_CustomerTaxInput = {
  automatic_tax?: InputMaybe<TsWhereInput>;
  ip_address?: InputMaybe<TsWhereStringInput>;
  location?: InputMaybe<TsWhereStripe_CustomerTaxLocationInput>;
};

export type TsWhereStripe_CustomerTaxLocationInput = {
  country?: InputMaybe<TsWhereStringInput>;
  source?: InputMaybe<TsWhereInput>;
  state?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_CustomerTaxIdsInput = {
  data?: InputMaybe<TsWhereStripe_TaxIdInput>;
  has_more?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_TaxIdInput = {
  country?: InputMaybe<TsWhereStringInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  id?: InputMaybe<TsWhereStringInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  type?: InputMaybe<TsWhereInput>;
  value?: InputMaybe<TsWhereStringInput>;
  verification?: InputMaybe<TsWhereStripe_TaxIdVerificationInput>;
};

export type TsWhereStripe_SetupIntentInput = {
  application?: InputMaybe<TsWhereStripe_ApplicationWrappedStringUnionInput>;
  cancellation_reason?: InputMaybe<TsWhereInput>;
  client_secret?: InputMaybe<TsWhereStringInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  customer?: InputMaybe<TsWhereStringInput>;
  description?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  last_setup_error?: InputMaybe<TsWhereStripe_ApiErrorsInput>;
  latest_attempt?: InputMaybe<TsWhereStripe_SetupAttemptWrappedStringUnionInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  mandate?: InputMaybe<TsWhereStripe_MandateWrappedStringUnionInput>;
  next_action?: InputMaybe<TsWhereStripe_SetupIntentNextActionInput>;
  object?: InputMaybe<TsWhereInput>;
  on_behalf_of?: InputMaybe<TsWhereStripe_AccountWrappedStringUnionInput>;
  payment_method?: InputMaybe<TsWhereStripe_PaymentMethodWrappedStringUnionInput>;
  payment_method_options?: InputMaybe<TsWhereStripe_SetupIntentPaymentMethodOptionsInput>;
  payment_method_types?: InputMaybe<TsWhereStripe_PaymentIntentPaymentMethodTypesInput>;
  single_use_mandate?: InputMaybe<TsWhereStripe_MandateWrappedStringUnionInput>;
  status?: InputMaybe<TsWhereInput>;
  usage?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SetupAttemptWrappedStringUnionInput = {
  value?: InputMaybe<TsWhereStringInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  id?: InputMaybe<TsWhereStringInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  payment_method_details?: InputMaybe<TsWhereStripe_SetupAttemptPaymentMethodDetailsInput>;
  setup_error?: InputMaybe<TsWhereStripe_ApiErrorsInput>;
  status?: InputMaybe<TsWhereStringInput>;
  usage?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SetupAttemptPaymentMethodDetailsInput = {
  bancontact?: InputMaybe<TsWhereStripe_SetupAttemptPaymentMethodDetailsBancontactInput>;
  card?: InputMaybe<TsWhereStripe_SetupAttemptPaymentMethodDetailsCardInput>;
  ideal?: InputMaybe<TsWhereStripe_SetupAttemptPaymentMethodDetailsIdealInput>;
  sofort?: InputMaybe<TsWhereStripe_SetupAttemptPaymentMethodDetailsSofortInput>;
  type?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SetupAttemptPaymentMethodDetailsBancontactInput = {
  bank_code?: InputMaybe<TsWhereStringInput>;
  bank_name?: InputMaybe<TsWhereStringInput>;
  bic?: InputMaybe<TsWhereStringInput>;
  iban_last4?: InputMaybe<TsWhereStringInput>;
  preferred_language?: InputMaybe<TsWhereInput>;
  verified_name?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SetupAttemptPaymentMethodDetailsCardInput = {
  three_d_secure?: InputMaybe<TsWhereStripe_ThreeDSecureDetailsInput>;
};

export type TsWhereStripe_ThreeDSecureDetailsInput = {
  authentication_flow?: InputMaybe<TsWhereInput>;
  result?: InputMaybe<TsWhereInput>;
  result_reason?: InputMaybe<TsWhereInput>;
  version?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_SetupAttemptPaymentMethodDetailsIdealInput = {
  bank?: InputMaybe<TsWhereInput>;
  bic?: InputMaybe<TsWhereInput>;
  iban_last4?: InputMaybe<TsWhereStringInput>;
  verified_name?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SetupAttemptPaymentMethodDetailsSofortInput = {
  bank_code?: InputMaybe<TsWhereStringInput>;
  bank_name?: InputMaybe<TsWhereStringInput>;
  bic?: InputMaybe<TsWhereStringInput>;
  iban_last4?: InputMaybe<TsWhereStringInput>;
  preferred_language?: InputMaybe<TsWhereInput>;
  verified_name?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_MandateWrappedStringUnionInput = {
  value?: InputMaybe<TsWhereStringInput>;
  customer_acceptance?: InputMaybe<TsWhereStripe_CustomerAcceptanceInput>;
  id?: InputMaybe<TsWhereStringInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  payment_method_details?: InputMaybe<TsWhereStripe_MandatePaymentMethodDetailsInput>;
  single_use?: InputMaybe<TsWhereStripe_MandateSingleUseInput>;
  status?: InputMaybe<TsWhereInput>;
  type?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_CustomerAcceptanceInput = {
  accepted_at?: InputMaybe<TsWhereIntegerInput>;
  online?: InputMaybe<TsWhereStripe_OnlineAcceptanceInput>;
  type?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_OnlineAcceptanceInput = {
  ip_address?: InputMaybe<TsWhereStringInput>;
  user_agent?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_MandatePaymentMethodDetailsInput = {
  acss_debit?: InputMaybe<TsWhereStripe_MandateAcssDebitInput>;
  au_becs_debit?: InputMaybe<TsWhereStripe_MandateAuBecsDebitInput>;
  bacs_debit?: InputMaybe<TsWhereStripe_MandateBacsDebitInput>;
  sepa_debit?: InputMaybe<TsWhereStripe_MandateSepaDebitInput>;
  type?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_MandateAcssDebitInput = {
  interval_description?: InputMaybe<TsWhereStringInput>;
  payment_schedule?: InputMaybe<TsWhereInput>;
  transaction_type?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_MandateAuBecsDebitInput = {
  url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_MandateBacsDebitInput = {
  network_status?: InputMaybe<TsWhereInput>;
  reference?: InputMaybe<TsWhereStringInput>;
  url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_MandateSepaDebitInput = {
  reference?: InputMaybe<TsWhereStringInput>;
  url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_MandateSingleUseInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SetupIntentNextActionInput = {
  redirect_to_url?: InputMaybe<TsWhereStripe_SetupIntentNextActionRedirectToUrlInput>;
  type?: InputMaybe<TsWhereStringInput>;
  verify_with_microdeposits?: InputMaybe<TsWhereStripe_SetupIntentNextActionVerifyWithMicrodepositsInput>;
};

export type TsWhereStripe_SetupIntentNextActionRedirectToUrlInput = {
  return_url?: InputMaybe<TsWhereStringInput>;
  url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_SetupIntentNextActionVerifyWithMicrodepositsInput = {
  arrival_date?: InputMaybe<TsWhereIntegerInput>;
  hosted_verification_url?: InputMaybe<TsWhereStringInput>;
  microdeposit_type?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_SetupIntentPaymentMethodOptionsInput = {
  acss_debit?: InputMaybe<TsWhere6c955fa05d8df9184cc18d8841c3705dUnionInput>;
  card?: InputMaybe<TsWhereStripe_SetupIntentPaymentMethodOptionsCardInput>;
  sepa_debit?: InputMaybe<TsWhere256af04705b008a07ca5c137b490ba88UnionInput>;
  us_bank_account?: InputMaybe<TsWhere5e84458a02fb07e8c3d5d9b0bb3e5d99UnionInput>;
};

export type TsWhere6c955fa05d8df9184cc18d8841c3705dUnionInput = {
  currency?: InputMaybe<TsWhereInput>;
  mandate_options?: InputMaybe<TsWhereStripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitInput>;
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitInput = {
  custom_mandate_url?: InputMaybe<TsWhereStringInput>;
  interval_description?: InputMaybe<TsWhereStringInput>;
  payment_schedule?: InputMaybe<TsWhereInput>;
  transaction_type?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_SetupIntentPaymentMethodOptionsCardInput = {
  mandate_options?: InputMaybe<TsWhereStripe_SetupIntentPaymentMethodOptionsCardMandateOptionsInput>;
  request_three_d_secure?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_SetupIntentPaymentMethodOptionsCardMandateOptionsInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  amount_type?: InputMaybe<TsWhereInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  description?: InputMaybe<TsWhereStringInput>;
  end_date?: InputMaybe<TsWhereIntegerInput>;
  interval?: InputMaybe<TsWhereInput>;
  interval_count?: InputMaybe<TsWhereIntegerInput>;
  reference?: InputMaybe<TsWhereStringInput>;
  start_date?: InputMaybe<TsWhereIntegerInput>;
};

export type TsWhere256af04705b008a07ca5c137b490ba88UnionInput = {
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhere5e84458a02fb07e8c3d5d9b0bb3e5d99UnionInput = {
  verification_method?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_BankAccountStripe_CardStripe_SourceUnionInput = {
  account_holder_name?: InputMaybe<TsWhereStringInput>;
  account_holder_type?: InputMaybe<TsWhereStringInput>;
  account_type?: InputMaybe<TsWhereStringInput>;
  bank_name?: InputMaybe<TsWhereStringInput>;
  country?: InputMaybe<TsWhereStringInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  customer?: InputMaybe<TsWhereStringInput>;
  default_for_currency?: InputMaybe<TsWhereBooleanInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  last4?: InputMaybe<TsWhereStringInput>;
  object?: InputMaybe<TsWhereInput>;
  routing_number?: InputMaybe<TsWhereStringInput>;
  status?: InputMaybe<TsWhereStringInput>;
  address_city?: InputMaybe<TsWhereStringInput>;
  address_country?: InputMaybe<TsWhereStringInput>;
  address_line1?: InputMaybe<TsWhereStringInput>;
  address_line1_check?: InputMaybe<TsWhereStringInput>;
  address_line2?: InputMaybe<TsWhereStringInput>;
  address_state?: InputMaybe<TsWhereStringInput>;
  address_zip?: InputMaybe<TsWhereStringInput>;
  address_zip_check?: InputMaybe<TsWhereStringInput>;
  brand?: InputMaybe<TsWhereStringInput>;
  cvc_check?: InputMaybe<TsWhereStringInput>;
  dynamic_last4?: InputMaybe<TsWhereStringInput>;
  exp_month?: InputMaybe<TsWhereIntegerInput>;
  exp_year?: InputMaybe<TsWhereIntegerInput>;
  funding?: InputMaybe<TsWhereStringInput>;
  name?: InputMaybe<TsWhereStringInput>;
  tokenization_method?: InputMaybe<TsWhereStringInput>;
  ach_credit_transfer?: InputMaybe<TsWhereStripe_SourceTypeAchCreditTransferInput>;
  ach_debit?: InputMaybe<TsWhereStripe_SourceTypeAchDebitInput>;
  acss_debit?: InputMaybe<TsWhereStripe_SourceTypeAcssDebitInput>;
  alipay?: InputMaybe<TsWhereStripe_SourceTypeAlipayInput>;
  amount?: InputMaybe<TsWhereIntegerInput>;
  au_becs_debit?: InputMaybe<TsWhereStripe_SourceTypeAuBecsDebitInput>;
  bancontact?: InputMaybe<TsWhereStripe_SourceTypeBancontactInput>;
  card?: InputMaybe<TsWhereStripe_SourceTypeCardInput>;
  card_present?: InputMaybe<TsWhereStripe_SourceTypeCardPresentInput>;
  client_secret?: InputMaybe<TsWhereStringInput>;
  code_verification?: InputMaybe<TsWhereStripe_SourceCodeVerificationFlowInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  eps?: InputMaybe<TsWhereStripe_SourceTypeEpsInput>;
  flow?: InputMaybe<TsWhereStringInput>;
  giropay?: InputMaybe<TsWhereStripe_SourceTypeGiropayInput>;
  ideal?: InputMaybe<TsWhereStripe_SourceTypeIdealInput>;
  klarna?: InputMaybe<TsWhereStripe_SourceTypeKlarnaInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  multibanco?: InputMaybe<TsWhereStripe_SourceTypeMultibancoInput>;
  owner?: InputMaybe<TsWhereStripe_SourceOwnerInput>;
  p24?: InputMaybe<TsWhereStripe_SourceTypeP24Input>;
  receiver?: InputMaybe<TsWhereStripe_SourceReceiverFlowInput>;
  redirect?: InputMaybe<TsWhereStripe_SourceRedirectFlowInput>;
  sepa_debit?: InputMaybe<TsWhereStripe_SourceTypeSepaDebitInput>;
  sofort?: InputMaybe<TsWhereStripe_SourceTypeSofortInput>;
  source_order?: InputMaybe<TsWhereStripe_SourceOrderInput>;
  statement_descriptor?: InputMaybe<TsWhereStringInput>;
  three_d_secure?: InputMaybe<TsWhereStripe_SourceTypeThreeDSecureInput>;
  type?: InputMaybe<TsWhereInput>;
  usage?: InputMaybe<TsWhereStringInput>;
  wechat?: InputMaybe<TsWhereStripe_SourceTypeWechatInput>;
};

export type TsWhereStripe_InvoiceLinesInput = {
  data?: InputMaybe<TsWhereStripe_LineItemInput>;
  has_more?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_LineItemInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  description?: InputMaybe<TsWhereStringInput>;
  discount_amounts?: InputMaybe<TsWhereStripe_DiscountsResourceDiscountAmountInput>;
  discountable?: InputMaybe<TsWhereBooleanInput>;
  discounts?: InputMaybe<TsWhereStripe_InvoiceDiscountsInput>;
  id?: InputMaybe<TsWhereStringInput>;
  invoice_item?: InputMaybe<TsWhereStringInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  period?: InputMaybe<TsWhereStripe_InvoiceLineItemPeriodInput>;
  price?: InputMaybe<TsWhereStripe_PriceInput>;
  proration?: InputMaybe<TsWhereBooleanInput>;
  proration_details?: InputMaybe<TsWhereStripe_InvoicesLineItemsProrationDetailsInput>;
  quantity?: InputMaybe<TsWhereIntegerInput>;
  subscription?: InputMaybe<TsWhereStringInput>;
  subscription_item?: InputMaybe<TsWhereStringInput>;
  tax_amounts?: InputMaybe<TsWhereStripe_InvoiceTaxAmountInput>;
  tax_rates?: InputMaybe<TsWhereStripe_TaxRateInput>;
  type?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_DiscountsResourceDiscountAmountInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
};

export type TsWhereStripe_InvoicesLineItemsProrationDetailsInput = {
  credited_items?: InputMaybe<TsWhereStripe_InvoicesLineItemsCreditedItemsInput>;
};

export type TsWhereStripe_InvoicesLineItemsCreditedItemsInput = {
  invoice?: InputMaybe<TsWhereStringInput>;
  invoice_line_items?: InputMaybe<TsWhereStripe_InvoiceInvoiceLineItemsInput>;
};

export type TsWhereStripe_InvoiceInvoiceLineItemsInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['String']>;
  /** Array of possible exact match values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Full text searching with fuzzy matching. */
  match?: InputMaybe<Scalars['String']>;
  /** Regular expression string matching. Use of * wildcards could degrade performance. */
  regexp?: InputMaybe<Scalars['String']>;
};

export type TsWhereStripe_InvoiceTaxAmountInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  inclusive?: InputMaybe<TsWhereBooleanInput>;
};

export type TsWhereStripe_InvoicesPaymentSettingsInput = {
  payment_method_options?: InputMaybe<TsWhereStripe_InvoicesPaymentMethodOptionsInput>;
};

export type TsWhereStripe_InvoicesPaymentMethodOptionsInput = {
  acss_debit?: InputMaybe<TsWhereStripe_InvoicePaymentMethodOptionsAcssDebitInput>;
  bancontact?: InputMaybe<TsWhereStripe_InvoicePaymentMethodOptionsBancontactInput>;
  card?: InputMaybe<TsWhereStripe_InvoicePaymentMethodOptionsCardInput>;
  customer_balance?: InputMaybe<TsWhereStripe_InvoicePaymentMethodOptionsCustomerBalanceInput>;
  us_bank_account?: InputMaybe<TsWhereStripe_InvoicePaymentMethodOptionsUsBankAccountInput>;
};

export type TsWhereStripe_InvoicePaymentMethodOptionsCardInput = {
  request_three_d_secure?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_InvoicesStatusTransitionsInput = {
  finalized_at?: InputMaybe<TsWhereIntegerInput>;
  marked_uncollectible_at?: InputMaybe<TsWhereIntegerInput>;
  paid_at?: InputMaybe<TsWhereIntegerInput>;
  voided_at?: InputMaybe<TsWhereIntegerInput>;
};

export type TsWhereStripe_InvoiceThresholdReasonInput = {
  amount_gte?: InputMaybe<TsWhereIntegerInput>;
  item_reasons?: InputMaybe<TsWhereStripe_InvoiceItemThresholdReasonInput>;
};

export type TsWhereStripe_InvoiceItemThresholdReasonInput = {
  line_item_ids?: InputMaybe<TsWhereStripe_InvoiceLineItemIdsInput>;
  usage_gte?: InputMaybe<TsWhereIntegerInput>;
};

export type TsWhereStripe_InvoiceLineItemIdsInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['String']>;
  /** Array of possible exact match values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Full text searching with fuzzy matching. */
  match?: InputMaybe<Scalars['String']>;
  /** Regular expression string matching. Use of * wildcards could degrade performance. */
  regexp?: InputMaybe<Scalars['String']>;
};

export type TsWhereStripe_InvoiceTransferDataInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
};

export type TsWhereStripe_OrderWrappedStringUnionInput = {
  value?: InputMaybe<TsWhereStringInput>;
  amount?: InputMaybe<TsWhereIntegerInput>;
  amount_returned?: InputMaybe<TsWhereIntegerInput>;
  application?: InputMaybe<TsWhereStringInput>;
  application_fee?: InputMaybe<TsWhereIntegerInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  customer?: InputMaybe<TsWhereStringInput>;
  email?: InputMaybe<TsWhereStringInput>;
  external_coupon_code?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  items?: InputMaybe<TsWhereStripe_OrderItemInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  returns?: InputMaybe<TsWhereStripe_OrderReturnsInput>;
  selected_shipping_method?: InputMaybe<TsWhereStringInput>;
  shipping?: InputMaybe<TsWhereStripe_ShippingInput>;
  shipping_methods?: InputMaybe<TsWhereStripe_ShippingMethodInput>;
  status?: InputMaybe<TsWhereStringInput>;
  status_transitions?: InputMaybe<TsWhereStripe_StatusTransitionsInput>;
  updated?: InputMaybe<TsWhereIntegerInput>;
  upstream_id?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_OrderItemInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  description?: InputMaybe<TsWhereStringInput>;
  object?: InputMaybe<TsWhereInput>;
  quantity?: InputMaybe<TsWhereIntegerInput>;
  type?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_OrderReturnsInput = {
  data?: InputMaybe<TsWhereStripe_OrderReturnInput>;
  has_more?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_OrderReturnInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  items?: InputMaybe<TsWhereStripe_OrderItemInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_ShippingMethodInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  delivery_estimate?: InputMaybe<TsWhereStripe_DeliveryEstimateInput>;
  description?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_DeliveryEstimateInput = {
  date?: InputMaybe<TsWhereStringInput>;
  earliest?: InputMaybe<TsWhereStringInput>;
  latest?: InputMaybe<TsWhereStringInput>;
  type?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_StatusTransitionsInput = {
  canceled?: InputMaybe<TsWhereIntegerInput>;
  fulfiled?: InputMaybe<TsWhereIntegerInput>;
  paid?: InputMaybe<TsWhereIntegerInput>;
  returned?: InputMaybe<TsWhereIntegerInput>;
};

export type TsWhereStripe_ChargeOutcomeInput = {
  network_status?: InputMaybe<TsWhereStringInput>;
  reason?: InputMaybe<TsWhereStringInput>;
  risk_level?: InputMaybe<TsWhereStringInput>;
  risk_score?: InputMaybe<TsWhereIntegerInput>;
  rule?: InputMaybe<TsWhereStripe_RuleWrappedStringUnionInput>;
  seller_message?: InputMaybe<TsWhereStringInput>;
  type?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_RuleWrappedStringUnionInput = {
  value?: InputMaybe<TsWhereStringInput>;
  action?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  predicate?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentIntentWrappedStringUnionInput = {
  value?: InputMaybe<TsWhereStringInput>;
  amount?: InputMaybe<TsWhereIntegerInput>;
  amount_capturable?: InputMaybe<TsWhereIntegerInput>;
  amount_details?: InputMaybe<TsWhereStripe_PaymentFlowsAmountDetailsInput>;
  amount_received?: InputMaybe<TsWhereIntegerInput>;
  application?: InputMaybe<TsWhereStripe_ApplicationWrappedStringUnionInput>;
  application_fee_amount?: InputMaybe<TsWhereIntegerInput>;
  automatic_payment_methods?: InputMaybe<TsWhereStripe_PaymentFlowsAutomaticPaymentMethodsPaymentIntentInput>;
  canceled_at?: InputMaybe<TsWhereIntegerInput>;
  cancellation_reason?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
  charges?: InputMaybe<TsWhereStripe_PaymentIntentChargesInput>;
  client_secret?: InputMaybe<TsWhereStringInput>;
  confirmation_method?: InputMaybe<TsWhereInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  customer?: InputMaybe<TsWhereStringInput>;
  description?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  invoice?: InputMaybe<TsWhereStripe_InvoiceWrappedStringUnionInput>;
  last_payment_error?: InputMaybe<TsWhereStripe_ApiErrorsInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  next_action?: InputMaybe<TsWhereStripe_PaymentIntentNextActionInput>;
  object?: InputMaybe<TsWhereInput>;
  on_behalf_of?: InputMaybe<TsWhereStripe_AccountWrappedStringUnionInput>;
  payment_method?: InputMaybe<TsWhereStripe_PaymentMethodWrappedStringUnionInput>;
  payment_method_options?: InputMaybe<TsWhereStripe_PaymentIntentPaymentMethodOptionsInput>;
  payment_method_types?: InputMaybe<TsWhereStripe_PaymentIntentPaymentMethodTypesInput>;
  processing?: InputMaybe<TsWhereStripe_PaymentIntentProcessingInput>;
  receipt_email?: InputMaybe<TsWhereStringInput>;
  review?: InputMaybe<TsWhereStripe_ReviewWrappedStringUnionInput>;
  setup_future_usage?: InputMaybe<TsWhereInput>;
  shipping?: InputMaybe<TsWhereStripe_ShippingInput>;
  statement_descriptor?: InputMaybe<TsWhereStringInput>;
  statement_descriptor_suffix?: InputMaybe<TsWhereStringInput>;
  status?: InputMaybe<TsWhereInput>;
  transfer_data?: InputMaybe<TsWhereStripe_TransferDataInput>;
  transfer_group?: InputMaybe<TsWhereStringInput>;
  invoiceItems?: InputMaybe<TsWhereStripe_InvoiceitemInput>;
  sessionItems?: InputMaybe<TsWhereStripe_ItemInput>;
  shipment?: InputMaybe<TsWhereShipEngine_LabelInput>;
  _shapeId?: InputMaybe<TsWhereIdInput>;
  _id?: InputMaybe<TsWhereIdInput>;
};

export type TsWhereStripe_PaymentMethodDetailsInput = {
  ach_credit_transfer?: InputMaybe<TsWhereStripe_PaymentMethodDetailsAchCreditTransferInput>;
  ach_debit?: InputMaybe<TsWhereStripe_PaymentMethodDetailsAchDebitInput>;
  acss_debit?: InputMaybe<TsWhereStripe_PaymentMethodDetailsAcssDebitInput>;
  afterpay_clearpay?: InputMaybe<TsWhereStripe_PaymentMethodDetailsAfterpayClearpayInput>;
  alipay?: InputMaybe<TsWhereStripe_PaymentFlowsPrivatePaymentMethodsAlipayDetailsInput>;
  au_becs_debit?: InputMaybe<TsWhereStripe_PaymentMethodDetailsAuBecsDebitInput>;
  bacs_debit?: InputMaybe<TsWhereStripe_PaymentMethodDetailsBacsDebitInput>;
  bancontact?: InputMaybe<TsWhereStripe_PaymentMethodDetailsBancontactInput>;
  boleto?: InputMaybe<TsWhereStripe_PaymentMethodDetailsBoletoInput>;
  card?: InputMaybe<TsWhereStripe_PaymentMethodDetailsCardInput>;
  card_present?: InputMaybe<TsWhereStripe_PaymentMethodDetailsCardPresentInput>;
  eps?: InputMaybe<TsWhereStripe_PaymentMethodDetailsEpsInput>;
  fpx?: InputMaybe<TsWhereStripe_PaymentMethodDetailsFpxInput>;
  giropay?: InputMaybe<TsWhereStripe_PaymentMethodDetailsGiropayInput>;
  grabpay?: InputMaybe<TsWhereStripe_PaymentMethodDetailsGrabpayInput>;
  ideal?: InputMaybe<TsWhereStripe_PaymentMethodDetailsIdealInput>;
  interac_present?: InputMaybe<TsWhereStripe_PaymentMethodDetailsInteracPresentInput>;
  klarna?: InputMaybe<TsWhereStripe_PaymentMethodDetailsKlarnaInput>;
  konbini?: InputMaybe<TsWhereStripe_PaymentMethodDetailsKonbiniInput>;
  multibanco?: InputMaybe<TsWhereStripe_PaymentMethodDetailsMultibancoInput>;
  oxxo?: InputMaybe<TsWhereStripe_PaymentMethodDetailsOxxoInput>;
  p24?: InputMaybe<TsWhereStripe_PaymentMethodDetailsP24Input>;
  paynow?: InputMaybe<TsWhereStripe_PaymentMethodDetailsPaynowInput>;
  sepa_debit?: InputMaybe<TsWhereStripe_PaymentMethodDetailsSepaDebitInput>;
  sofort?: InputMaybe<TsWhereStripe_PaymentMethodDetailsSofortInput>;
  type?: InputMaybe<TsWhereStringInput>;
  us_bank_account?: InputMaybe<TsWhereStripe_PaymentMethodDetailsUsBankAccountInput>;
  wechat_pay?: InputMaybe<TsWhereStripe_PaymentMethodDetailsWechatPayInput>;
};

export type TsWhereStripe_PaymentMethodDetailsAchCreditTransferInput = {
  account_number?: InputMaybe<TsWhereStringInput>;
  bank_name?: InputMaybe<TsWhereStringInput>;
  routing_number?: InputMaybe<TsWhereStringInput>;
  swift_code?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsAchDebitInput = {
  account_holder_type?: InputMaybe<TsWhereInput>;
  bank_name?: InputMaybe<TsWhereStringInput>;
  country?: InputMaybe<TsWhereStringInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  last4?: InputMaybe<TsWhereStringInput>;
  routing_number?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsAcssDebitInput = {
  bank_name?: InputMaybe<TsWhereStringInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  institution_number?: InputMaybe<TsWhereStringInput>;
  last4?: InputMaybe<TsWhereStringInput>;
  mandate?: InputMaybe<TsWhereStringInput>;
  transit_number?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsAfterpayClearpayInput = {
  reference?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentFlowsPrivatePaymentMethodsAlipayDetailsInput = {
  buyer_id?: InputMaybe<TsWhereStringInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  transaction_id?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsAuBecsDebitInput = {
  bsb_number?: InputMaybe<TsWhereStringInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  last4?: InputMaybe<TsWhereStringInput>;
  mandate?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsBacsDebitInput = {
  fingerprint?: InputMaybe<TsWhereStringInput>;
  last4?: InputMaybe<TsWhereStringInput>;
  mandate?: InputMaybe<TsWhereStringInput>;
  sort_code?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsBancontactInput = {
  bank_code?: InputMaybe<TsWhereStringInput>;
  bank_name?: InputMaybe<TsWhereStringInput>;
  bic?: InputMaybe<TsWhereStringInput>;
  generated_sepa_debit?: InputMaybe<TsWhereStripe_PaymentMethodWrappedStringUnionInput>;
  generated_sepa_debit_mandate?: InputMaybe<TsWhereStripe_MandateWrappedStringUnionInput>;
  iban_last4?: InputMaybe<TsWhereStringInput>;
  preferred_language?: InputMaybe<TsWhereInput>;
  verified_name?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsBoletoInput = {
  tax_id?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsCardInput = {
  brand?: InputMaybe<TsWhereStringInput>;
  checks?: InputMaybe<TsWhereStripe_PaymentMethodDetailsCardChecksInput>;
  country?: InputMaybe<TsWhereStringInput>;
  exp_month?: InputMaybe<TsWhereIntegerInput>;
  exp_year?: InputMaybe<TsWhereIntegerInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  funding?: InputMaybe<TsWhereStringInput>;
  installments?: InputMaybe<TsWhereStripe_PaymentMethodDetailsCardInstallmentsInput>;
  last4?: InputMaybe<TsWhereStringInput>;
  mandate?: InputMaybe<TsWhereStringInput>;
  network?: InputMaybe<TsWhereStringInput>;
  three_d_secure?: InputMaybe<TsWhereStripe_ThreeDSecureDetailsInput>;
  wallet?: InputMaybe<TsWhereStripe_PaymentMethodDetailsCardWalletInput>;
};

export type TsWhereStripe_PaymentMethodDetailsCardChecksInput = {
  address_line1_check?: InputMaybe<TsWhereStringInput>;
  address_postal_code_check?: InputMaybe<TsWhereStringInput>;
  cvc_check?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsCardInstallmentsInput = {
  plan?: InputMaybe<TsWhereStripe_PaymentMethodDetailsCardInstallmentsPlanInput>;
};

export type TsWhereStripe_PaymentMethodDetailsCardWalletInput = {
  dynamic_last4?: InputMaybe<TsWhereStringInput>;
  masterpass?: InputMaybe<TsWhereStripe_PaymentMethodDetailsCardWalletMasterpassInput>;
  type?: InputMaybe<TsWhereInput>;
  visa_checkout?: InputMaybe<TsWhereStripe_PaymentMethodDetailsCardWalletVisaCheckoutInput>;
};

export type TsWhereStripe_PaymentMethodDetailsCardWalletMasterpassInput = {
  billing_address?: InputMaybe<TsWhereStripe_AddressInput>;
  email?: InputMaybe<TsWhereStringInput>;
  name?: InputMaybe<TsWhereStringInput>;
  shipping_address?: InputMaybe<TsWhereStripe_AddressInput>;
};

export type TsWhereStripe_PaymentMethodDetailsCardWalletVisaCheckoutInput = {
  billing_address?: InputMaybe<TsWhereStripe_AddressInput>;
  email?: InputMaybe<TsWhereStringInput>;
  name?: InputMaybe<TsWhereStringInput>;
  shipping_address?: InputMaybe<TsWhereStripe_AddressInput>;
};

export type TsWhereStripe_PaymentMethodDetailsEpsInput = {
  bank?: InputMaybe<TsWhereInput>;
  verified_name?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsFpxInput = {
  bank?: InputMaybe<TsWhereInput>;
  transaction_id?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsGiropayInput = {
  bank_code?: InputMaybe<TsWhereStringInput>;
  bank_name?: InputMaybe<TsWhereStringInput>;
  bic?: InputMaybe<TsWhereStringInput>;
  verified_name?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsGrabpayInput = {
  transaction_id?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsIdealInput = {
  bank?: InputMaybe<TsWhereInput>;
  bic?: InputMaybe<TsWhereInput>;
  generated_sepa_debit?: InputMaybe<TsWhereStripe_PaymentMethodWrappedStringUnionInput>;
  generated_sepa_debit_mandate?: InputMaybe<TsWhereStripe_MandateWrappedStringUnionInput>;
  iban_last4?: InputMaybe<TsWhereStringInput>;
  verified_name?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsInteracPresentInput = {
  brand?: InputMaybe<TsWhereStringInput>;
  cardholder_name?: InputMaybe<TsWhereStringInput>;
  country?: InputMaybe<TsWhereStringInput>;
  emv_auth_data?: InputMaybe<TsWhereStringInput>;
  exp_month?: InputMaybe<TsWhereIntegerInput>;
  exp_year?: InputMaybe<TsWhereIntegerInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  funding?: InputMaybe<TsWhereStringInput>;
  generated_card?: InputMaybe<TsWhereStringInput>;
  last4?: InputMaybe<TsWhereStringInput>;
  network?: InputMaybe<TsWhereStringInput>;
  preferred_locales?: InputMaybe<TsWhereStripe_PaymentIntentPreferredLocalesInput>;
  read_method?: InputMaybe<TsWhereInput>;
  receipt?: InputMaybe<TsWhereStripe_PaymentMethodDetailsInteracPresentReceiptInput>;
};

export type TsWhereStripe_PaymentIntentPreferredLocalesInput = {
  /** Exact match */
  eq?: InputMaybe<Scalars['String']>;
  /** Array of possible exact match values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Full text searching with fuzzy matching. */
  match?: InputMaybe<Scalars['String']>;
  /** Regular expression string matching. Use of * wildcards could degrade performance. */
  regexp?: InputMaybe<Scalars['String']>;
};

export type TsWhereStripe_PaymentMethodDetailsInteracPresentReceiptInput = {
  account_type?: InputMaybe<TsWhereInput>;
  application_cryptogram?: InputMaybe<TsWhereStringInput>;
  application_preferred_name?: InputMaybe<TsWhereStringInput>;
  authorization_code?: InputMaybe<TsWhereStringInput>;
  authorization_response_code?: InputMaybe<TsWhereStringInput>;
  cardholder_verification_method?: InputMaybe<TsWhereStringInput>;
  dedicated_file_name?: InputMaybe<TsWhereStringInput>;
  terminal_verification_results?: InputMaybe<TsWhereStringInput>;
  transaction_status_information?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsKlarnaInput = {
  payment_method_category?: InputMaybe<TsWhereStringInput>;
  preferred_locale?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsKonbiniInput = {
  store?: InputMaybe<TsWhereStripe_PaymentMethodDetailsKonbiniStoreInput>;
};

export type TsWhereStripe_PaymentMethodDetailsKonbiniStoreInput = {
  chain?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_PaymentMethodDetailsMultibancoInput = {
  entity?: InputMaybe<TsWhereStringInput>;
  reference?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsOxxoInput = {
  number?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsP24Input = {
  bank?: InputMaybe<TsWhereInput>;
  reference?: InputMaybe<TsWhereStringInput>;
  verified_name?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsPaynowInput = {
  reference?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsSepaDebitInput = {
  bank_code?: InputMaybe<TsWhereStringInput>;
  branch_code?: InputMaybe<TsWhereStringInput>;
  country?: InputMaybe<TsWhereStringInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  last4?: InputMaybe<TsWhereStringInput>;
  mandate?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsSofortInput = {
  bank_code?: InputMaybe<TsWhereStringInput>;
  bank_name?: InputMaybe<TsWhereStringInput>;
  bic?: InputMaybe<TsWhereStringInput>;
  country?: InputMaybe<TsWhereStringInput>;
  generated_sepa_debit?: InputMaybe<TsWhereStripe_PaymentMethodWrappedStringUnionInput>;
  generated_sepa_debit_mandate?: InputMaybe<TsWhereStripe_MandateWrappedStringUnionInput>;
  iban_last4?: InputMaybe<TsWhereStringInput>;
  preferred_language?: InputMaybe<TsWhereInput>;
  verified_name?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsUsBankAccountInput = {
  account_holder_type?: InputMaybe<TsWhereInput>;
  account_type?: InputMaybe<TsWhereInput>;
  bank_name?: InputMaybe<TsWhereStringInput>;
  fingerprint?: InputMaybe<TsWhereStringInput>;
  last4?: InputMaybe<TsWhereStringInput>;
  routing_number?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentMethodDetailsWechatPayInput = {
  fingerprint?: InputMaybe<TsWhereStringInput>;
  transaction_id?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_PaymentIntentRefundsInput = {
  data?: InputMaybe<TsWhereStripe_RefundInput>;
  has_more?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_RefundInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  balance_transaction?: InputMaybe<TsWhereStripe_BalanceTransactionWrappedStringUnionInput>;
  charge?: InputMaybe<TsWhereStripe_ChargeWrappedStringUnionInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  description?: InputMaybe<TsWhereStringInput>;
  failure_balance_transaction?: InputMaybe<TsWhereStripe_BalanceTransactionWrappedStringUnionInput>;
  failure_reason?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  next_action?: InputMaybe<TsWhereStripe_RefundNextActionInput>;
  object?: InputMaybe<TsWhereInput>;
  payment_intent?: InputMaybe<TsWhereStripe_PaymentIntentWrappedStringUnionInput>;
  reason?: InputMaybe<TsWhereInput>;
  receipt_number?: InputMaybe<TsWhereStringInput>;
  source_transfer_reversal?: InputMaybe<TsWhereStripe_TransferReversalWrappedStringUnionInput>;
  status?: InputMaybe<TsWhereStringInput>;
  transfer_reversal?: InputMaybe<TsWhereStripe_TransferReversalWrappedStringUnionInput>;
};

export type TsWhereStripe_ChargeWrappedStringUnionInput = {
  value?: InputMaybe<TsWhereStringInput>;
  amount?: InputMaybe<TsWhereIntegerInput>;
  amount_captured?: InputMaybe<TsWhereIntegerInput>;
  amount_refunded?: InputMaybe<TsWhereIntegerInput>;
  application_fee_amount?: InputMaybe<TsWhereIntegerInput>;
  billing_details?: InputMaybe<TsWhereStripe_BillingDetailsInput>;
  calculated_statement_descriptor?: InputMaybe<TsWhereStringInput>;
  captured?: InputMaybe<TsWhereBooleanInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  customer?: InputMaybe<TsWhereStringInput>;
  description?: InputMaybe<TsWhereStringInput>;
  disputed?: InputMaybe<TsWhereBooleanInput>;
  failure_code?: InputMaybe<TsWhereStringInput>;
  failure_message?: InputMaybe<TsWhereStringInput>;
  fraud_details?: InputMaybe<TsWhereStripe_ChargeFraudDetailsInput>;
  id?: InputMaybe<TsWhereStringInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  outcome?: InputMaybe<TsWhereStripe_ChargeOutcomeInput>;
  paid?: InputMaybe<TsWhereBooleanInput>;
  payment_method?: InputMaybe<TsWhereStringInput>;
  payment_method_details?: InputMaybe<TsWhereStripe_PaymentMethodDetailsInput>;
  receipt_email?: InputMaybe<TsWhereStringInput>;
  receipt_number?: InputMaybe<TsWhereStringInput>;
  receipt_url?: InputMaybe<TsWhereStringInput>;
  refunded?: InputMaybe<TsWhereBooleanInput>;
  refunds?: InputMaybe<TsWhereStripe_ChargeRefundsInput>;
  shipping?: InputMaybe<TsWhereStripe_ShippingInput>;
  statement_descriptor?: InputMaybe<TsWhereStringInput>;
  statement_descriptor_suffix?: InputMaybe<TsWhereStringInput>;
  status?: InputMaybe<TsWhereInput>;
  transfer_data?: InputMaybe<TsWhereStripe_ChargeTransferDataInput>;
  transfer_group?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_ChargeRefundsInput = {
  data?: InputMaybe<TsWhereStripe_RefundInput>;
  has_more?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_ChargeTransferDataInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  destination?: InputMaybe<TsWhereStripe_AccountWrappedStringUnionInput>;
};

export type TsWhereStripe_RefundNextActionInput = {
  display_details?: InputMaybe<TsWhereStripe_RefundNextActionDisplayDetailsInput>;
  type?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_RefundNextActionDisplayDetailsInput = {
  email_sent?: InputMaybe<TsWhereStripe_EmailSentInput>;
  expires_at?: InputMaybe<TsWhereIntegerInput>;
};

export type TsWhereStripe_EmailSentInput = {
  email_sent_at?: InputMaybe<TsWhereIntegerInput>;
  email_sent_to?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_TransferReversalWrappedStringUnionInput = {
  value?: InputMaybe<TsWhereStringInput>;
  amount?: InputMaybe<TsWhereIntegerInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  object?: InputMaybe<TsWhereInput>;
};

export type TsWhereStripe_TransferWrappedStringUnionInput = {
  value?: InputMaybe<TsWhereStringInput>;
  amount?: InputMaybe<TsWhereIntegerInput>;
  amount_reversed?: InputMaybe<TsWhereIntegerInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  description?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  reversals?: InputMaybe<TsWhereStripe_TransferReversalsInput>;
  reversed?: InputMaybe<TsWhereBooleanInput>;
  source_type?: InputMaybe<TsWhereStringInput>;
  transfer_group?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_TransferReversalsInput = {
  data?: InputMaybe<TsWhereStripe_TransferReversalInput>;
  has_more?: InputMaybe<TsWhereBooleanInput>;
  object?: InputMaybe<TsWhereInput>;
  url?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStripe_TransferReversalInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  object?: InputMaybe<TsWhereInput>;
};

export type TsWhereAssetRelationshipInput = {
  title?: InputMaybe<TsWhereStringInput>;
  description?: InputMaybe<TsWhereStringInput>;
  filename?: InputMaybe<TsWhereStringInput>;
  caption?: InputMaybe<TsWhereDraftjsInput>;
  credit?: InputMaybe<TsWhereDraftjsInput>;
  path?: InputMaybe<TsWhereStringInput>;
  mimeType?: InputMaybe<TsWhereStringInput>;
  sourceUrl?: InputMaybe<TsWhereStringInput>;
  uploadStatus?: InputMaybe<TsWhereStringInput>;
  _shapeId?: InputMaybe<TsWhereIdInput>;
  _id?: InputMaybe<TsWhereIdInput>;
  _version?: InputMaybe<TsWhereIntegerInput>;
  _shapeName?: InputMaybe<TsWhereStringInput>;
  _createdAt?: InputMaybe<TsWhereDateInput>;
  _updatedAt?: InputMaybe<TsWhereDateInput>;
  _schemaVersion?: InputMaybe<TsWhereNumberInput>;
  _status?: InputMaybe<TsWhereWorkflowInput>;
  _contentTypeId?: InputMaybe<TsWhereIdInput>;
  _contentTypeName?: InputMaybe<TsWhereStringInput>;
  s3Key?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereNavigationDataLinksInput = {
  categories?: InputMaybe<TsWhereNavigationDataCategoriesInput>;
  pages?: InputMaybe<TsWhereNavigationDataPagesInput>;
};

export type TsWhereNavigationDataCategoriesInput = {
  name?: InputMaybe<TsWhereStringInput>;
  featured?: InputMaybe<TsWhereNavigationDataLinksCategoriesFeaturedInput>;
  collection?: InputMaybe<TsWhereNavigationDataLinksCategoriesCollectionInput>;
  categories?: InputMaybe<TsWhereNavigationDataLinksCategoriesCategoriesInput>;
  brands?: InputMaybe<TsWhereNavigationDataLinksCategoriesBrandsInput>;
};

export type TsWhereNavigationDataLinksCategoriesFeaturedInput = {
  name?: InputMaybe<TsWhereStringInput>;
  href?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereNavigationDataLinksCategoriesCollectionInput = {
  name?: InputMaybe<TsWhereStringInput>;
  href?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereNavigationDataLinksCategoriesCategoriesInput = {
  name?: InputMaybe<TsWhereStringInput>;
  href?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereNavigationDataLinksCategoriesBrandsInput = {
  name?: InputMaybe<TsWhereStringInput>;
  href?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereNavigationDataPagesInput = {
  name?: InputMaybe<TsWhereStringInput>;
  href?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereFooterNavigationInput = {
  sections?: InputMaybe<TsWhereFooterSectionsInput>;
};

export type TsWhereFooterSectionsInput = {
  name?: InputMaybe<TsWhereStringInput>;
  items?: InputMaybe<TsWhereFooterNavigationSectionsItemsInput>;
};

export type TsWhereFooterNavigationSectionsItemsInput = {
  name?: InputMaybe<TsWhereStringInput>;
  href?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereFooterNewsletterInput = {
  text?: InputMaybe<TsWhereTextInput>;
};

export type TsWhereTextInput = {
  primary?: InputMaybe<TsWhereStringInput>;
  secondary?: InputMaybe<TsWhereStringInput>;
  button?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereStorefrontComponentsInput = {
  offers?: InputMaybe<TsWhereOffersComponentOffersInput>;
  primaryText?: InputMaybe<TsWhereStringInput>;
  secondaryText?: InputMaybe<TsWhereStringInput>;
  buttonText?: InputMaybe<TsWhereStringInput>;
  image?: InputMaybe<TsWhereStringInput>;
  collections?: InputMaybe<TsWhereCollectionsComponentCollectionsInput>;
};

export type TsWhereOffersComponentOffersInput = {
  href?: InputMaybe<TsWhereStringInput>;
  name?: InputMaybe<TsWhereStringInput>;
  description?: InputMaybe<TsWhereStringInput>;
};

export type TsWhereCollectionsComponentCollectionsInput = {
  name?: InputMaybe<TsWhereStringInput>;
  description?: InputMaybe<TsWhereStringInput>;
  imageSrc?: InputMaybe<TsWhereStringInput>;
  imageAlt?: InputMaybe<TsWhereStringInput>;
  href?: InputMaybe<TsWhereStringInput>;
};

export type Profile = TsSearchable & {
  __typename?: 'Profile';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  bio?: Maybe<Scalars['String']>;
  avatar?: Maybe<Asset>;
  shopifyCustomerId?: Maybe<Scalars['String']>;
  shopifyCustomer?: Maybe<Shopify_Customer>;
  stripeCustomerId?: Maybe<Scalars['String']>;
  stripeCustomer?: Maybe<Stripe_Customer>;
  loyaltyCard?: Maybe<Voucherify_LoyaltyCard>;
  orders?: Maybe<Array<Maybe<Stripe_Invoice>>>;
  _shapeId?: Maybe<Scalars['String']>;
  _id?: Maybe<Scalars['ID']>;
  _version?: Maybe<Scalars['Int']>;
  _shapeName?: Maybe<Scalars['String']>;
  _createdAt?: Maybe<Scalars['String']>;
  _createdBy?: Maybe<TsUser>;
  _updatedAt?: Maybe<Scalars['String']>;
  _updatedBy?: Maybe<TsUser>;
  _schemaVersion?: Maybe<Scalars['Float']>;
  /** @deprecated Use _status instead */
  _enabled?: Maybe<Scalars['Boolean']>;
  /** @deprecated Use a custom date field instead */
  _enabledAt?: Maybe<Scalars['String']>;
  _status?: Maybe<DefaultWorkflow>;
  _contentTypeId?: Maybe<Scalars['String']>;
  _contentTypeName?: Maybe<Scalars['String']>;
  searchSummary?: Maybe<Scalars['String']>;
};


export type ProfileAvatarArgs = {
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
  locale?: InputMaybe<Scalars['String']>;
};

/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_Customer = {
  __typename?: 'Shopify_Customer';
  /**
   * Whether the customer has agreed to receive marketing material.
   * @deprecated Use `emailMarketingConsent` instead
   */
  acceptsMarketing: Scalars['Boolean'];
  /**
   * The date and time when the customer consented or objected to receiving marketing material by email.
   * @deprecated Use `emailMarketingConsent` instead
   */
  acceptsMarketingUpdatedAt: Scalars['DateTime'];
  /** A list of addresses associated with the customer. */
  addresses: Array<Shopify_MailingAddress>;
  /**
   * The average amount that the customer spent per order.
   * @deprecated Use `averageOrderAmountV2` instead
   */
  averageOrderAmount?: Maybe<Scalars['Money']>;
  /** The average amount that the customer spent per order. */
  averageOrderAmountV2?: Maybe<Shopify_MoneyV2>;
  /**
   * Whether the merchant can delete the customer from their store.
   *
   * A customer can be deleted from a store only if they have not yet made an order. After a customer makes an
   * order, they can't be deleted from a store.
   */
  canDelete: Scalars['Boolean'];
  /** The date and time when the customer was added to the store. */
  createdAt: Scalars['DateTime'];
  /** The default address associated with the customer. */
  defaultAddress?: Maybe<Shopify_MailingAddress>;
  /**
   * The full name of the customer, based on the values for first_name and last_name. If the first_name and
   * last_name are not available, then this falls back to the customer's email address, and if that is not available, the customer's phone number.
   */
  displayName: Scalars['String'];
  /** The customer's email address. */
  email?: Maybe<Scalars['String']>;
  /** A list of events associated with the customer. */
  events: Shopify_EventConnection;
  /** The customer's first name. */
  firstName?: Maybe<Scalars['String']>;
  /**
   * Whether the customer has a note associated with them.
   * @deprecated Check for a value in the note field directly instead.
   */
  hasNote: Scalars['Boolean'];
  /**
   * Whether the merchant has added timeline comments about the customer on the customer's page.
   * @deprecated To query for comments on the timeline, use the events connection and a `query` argument containing `verb:comment`, or look for a `CommentEvent` in the `__typename` of events.
   */
  hasTimelineComment: Scalars['Boolean'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The image associated with the customer. */
  image: Shopify_Image;
  /** The customer's last name. */
  lastName?: Maybe<Scalars['String']>;
  /** The customer's last order. */
  lastOrder?: Maybe<Shopify_Order>;
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['UnsignedInt64'];
  /**
   * The amount of time since the customer was first added to the store.
   *
   * Example: 'about 12 years'.
   */
  lifetimeDuration: Scalars['String'];
  /** The customer's locale. */
  locale: Scalars['String'];
  /**
   * The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines, that the
   * customer gave when they consented to receive marketing material by email.
   *
   * If the customer does not accept email marketing, then this property is `null`.
   * @deprecated Use `emailMarketingConsent` instead
   */
  marketingOptInLevel?: Maybe<Shopify_CustomerMarketingOptInLevel>;
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafield definitions. */
  metafieldDefinitions: Shopify_MetafieldDefinitionConnection;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /** A unique identifier for the customer that's used with Multipass login. */
  multipassIdentifier?: Maybe<Scalars['String']>;
  /** A note about the customer. */
  note?: Maybe<Scalars['String']>;
  /** A list of the customer's orders. */
  orders: Shopify_OrderConnection;
  /**
   * The number of orders that the customer has made at the store in their lifetime.
   * @deprecated Use `numberOfOrders` instead
   */
  ordersCount: Scalars['UnsignedInt64'];
  /** A list of the customer's payment methods. */
  paymentMethods: Shopify_CustomerPaymentMethodConnection;
  /** The customer's phone number. */
  phone?: Maybe<Scalars['String']>;
  /** Returns a private metafield by namespace and key that belongs to the resource. */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /** List of private metafields that belong to the resource. */
  privateMetafields: Shopify_PrivateMetafieldConnection;
  /** Possible subscriber states of a customer defined by their subscription contracts. */
  productSubscriberStatus: Shopify_CustomerProductSubscriberStatus;
  /**
   * The current SMS marketing state for the customer's phone number.
   *
   * If the customer does not have a phone number, then this property is `null`.
   */
  smsMarketingConsent?: Maybe<Shopify_CustomerSmsMarketingConsentState>;
  /** The state of the customer's account with the shop. */
  state: Shopify_CustomerState;
  /** A list of the customer's subscription contracts. */
  subscriptionContracts: Shopify_SubscriptionContractConnection;
  /** A comma separated list of tags that have been added to the customer. */
  tags: Array<Scalars['String']>;
  /** Whether the customer is exempt from being charged taxes on their orders. */
  taxExempt: Scalars['Boolean'];
  /** The list of tax exemptions applied to the customer. */
  taxExemptions: Array<Shopify_TaxExemption>;
  /**
   * The total amount that the customer has spent on orders in their lifetime.
   * @deprecated Use `amountSpent` instead
   */
  totalSpent: Scalars['Money'];
  /**
   * The total amount that the customer has spent on orders in their lifetime.
   * @deprecated Use `amountSpent` instead
   */
  totalSpentV2: Shopify_MoneyV2;
  /** The date and time when the customer was last updated. */
  updatedAt: Scalars['DateTime'];
  /**
   * Whether the email address is formatted correctly. This does not
   * guarantee that the email address actually exists.
   */
  validEmailAddress: Scalars['Boolean'];
  /** Whether the customer has verified their email address. Defaults to `true` if the customer is created through the Shopify admin or API. */
  verifiedEmail: Scalars['Boolean'];
};


/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_CustomerAddressesArgs = {
  first?: InputMaybe<Scalars['Int']>;
};


/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_CustomerEventsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_EventSortKeys>;
  query?: InputMaybe<Scalars['String']>;
};


/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_CustomerImageArgs = {
  size?: InputMaybe<Scalars['Int']>;
};


/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_CustomerMetafieldArgs = {
  namespace: Scalars['String'];
  key: Scalars['String'];
};


/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_CustomerMetafieldDefinitionsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  pinnedStatus?: InputMaybe<Shopify_MetafieldDefinitionPinnedStatus>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_MetafieldDefinitionSortKeys>;
  query?: InputMaybe<Scalars['String']>;
};


/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_CustomerMetafieldsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_CustomerOrdersArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_OrderSortKeys>;
  query?: InputMaybe<Scalars['String']>;
};


/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_CustomerPaymentMethodsArgs = {
  showRevoked?: InputMaybe<Scalars['Boolean']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_CustomerPrivateMetafieldArgs = {
  namespace: Scalars['String'];
  key: Scalars['String'];
};


/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_CustomerPrivateMetafieldsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_CustomerSubscriptionContractsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/**
 * Represents a customer mailing address.
 *
 * For example, a customer's default address and an order's billing address are both mailling addresses.
 */
export type Shopify_MailingAddress = {
  __typename?: 'Shopify_MailingAddress';
  /** The first line of the address. Typically the street address or PO Box number. */
  address1?: Maybe<Scalars['String']>;
  /** The second line of the address. Typically the number of the apartment, suite, or unit. */
  address2?: Maybe<Scalars['String']>;
  /** The name of the city, district, village, or town. */
  city?: Maybe<Scalars['String']>;
  /** The name of the customer's company or organization. */
  company?: Maybe<Scalars['String']>;
  /** The name of the country. */
  country?: Maybe<Scalars['String']>;
  /**
   * The two-letter code for the country of the address.
   *
   * For example, US.
   * @deprecated Use `countryCodeV2` instead
   */
  countryCode?: Maybe<Scalars['String']>;
  /**
   * The two-letter code for the country of the address.
   *
   * For example, US.
   */
  countryCodeV2?: Maybe<Shopify_CountryCode>;
  /** The first name of the customer. */
  firstName?: Maybe<Scalars['String']>;
  /** A formatted version of the address, customized by the provided arguments. */
  formatted: Array<Scalars['String']>;
  /** A comma-separated list of the values for city, province, and country. */
  formattedArea?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The last name of the customer. */
  lastName?: Maybe<Scalars['String']>;
  /** The latitude coordinate of the customer address. */
  latitude?: Maybe<Scalars['Float']>;
  /** The longitude coordinate of the customer address. */
  longitude?: Maybe<Scalars['Float']>;
  /** The full name of the customer, based on firstName and lastName. */
  name?: Maybe<Scalars['String']>;
  /**
   * A unique phone number for the customer.
   *
   * Formatted using E.164 standard. For example, _+16135551111_.
   */
  phone?: Maybe<Scalars['String']>;
  /** The region of the address, such as the province, state, or district. */
  province?: Maybe<Scalars['String']>;
  /**
   * The two-letter code for the region.
   *
   * For example, ON.
   */
  provinceCode?: Maybe<Scalars['String']>;
  /** The zip or postal code of the address. */
  zip?: Maybe<Scalars['String']>;
};


/**
 * Represents a customer mailing address.
 *
 * For example, a customer's default address and an order's billing address are both mailling addresses.
 */
export type Shopify_MailingAddressFormattedArgs = {
  withName?: InputMaybe<Scalars['Boolean']>;
  withCompany?: InputMaybe<Scalars['Boolean']>;
};

export enum Shopify_CountryCode {
  Af = 'AF',
  Ax = 'AX',
  Al = 'AL',
  Dz = 'DZ',
  Ad = 'AD',
  Ao = 'AO',
  Ai = 'AI',
  Ag = 'AG',
  Ar = 'AR',
  Am = 'AM',
  Aw = 'AW',
  Ac = 'AC',
  Au = 'AU',
  At = 'AT',
  Az = 'AZ',
  Bs = 'BS',
  Bh = 'BH',
  Bd = 'BD',
  Bb = 'BB',
  By = 'BY',
  Be = 'BE',
  Bz = 'BZ',
  Bj = 'BJ',
  Bm = 'BM',
  Bt = 'BT',
  Bo = 'BO',
  Ba = 'BA',
  Bw = 'BW',
  Bv = 'BV',
  Br = 'BR',
  Io = 'IO',
  Bn = 'BN',
  Bg = 'BG',
  Bf = 'BF',
  Bi = 'BI',
  Kh = 'KH',
  Ca = 'CA',
  Cv = 'CV',
  Bq = 'BQ',
  Ky = 'KY',
  Cf = 'CF',
  Td = 'TD',
  Cl = 'CL',
  Cn = 'CN',
  Cx = 'CX',
  Cc = 'CC',
  Co = 'CO',
  Km = 'KM',
  Cg = 'CG',
  Cd = 'CD',
  Ck = 'CK',
  Cr = 'CR',
  Hr = 'HR',
  Cu = 'CU',
  Cw = 'CW',
  Cy = 'CY',
  Cz = 'CZ',
  Ci = 'CI',
  Dk = 'DK',
  Dj = 'DJ',
  Dm = 'DM',
  Do = 'DO',
  Ec = 'EC',
  Eg = 'EG',
  Sv = 'SV',
  Gq = 'GQ',
  Er = 'ER',
  Ee = 'EE',
  Sz = 'SZ',
  Et = 'ET',
  Fk = 'FK',
  Fo = 'FO',
  Fj = 'FJ',
  Fi = 'FI',
  Fr = 'FR',
  Gf = 'GF',
  Pf = 'PF',
  Tf = 'TF',
  Ga = 'GA',
  Gm = 'GM',
  Ge = 'GE',
  De = 'DE',
  Gh = 'GH',
  Gi = 'GI',
  Gr = 'GR',
  Gl = 'GL',
  Gd = 'GD',
  Gp = 'GP',
  Gt = 'GT',
  Gg = 'GG',
  Gn = 'GN',
  Gw = 'GW',
  Gy = 'GY',
  Ht = 'HT',
  Hm = 'HM',
  Va = 'VA',
  Hn = 'HN',
  Hk = 'HK',
  Hu = 'HU',
  Is = 'IS',
  In = 'IN',
  Id = 'ID',
  Ir = 'IR',
  Iq = 'IQ',
  Ie = 'IE',
  Im = 'IM',
  Il = 'IL',
  It = 'IT',
  Jm = 'JM',
  Jp = 'JP',
  Je = 'JE',
  Jo = 'JO',
  Kz = 'KZ',
  Ke = 'KE',
  Ki = 'KI',
  Kp = 'KP',
  Xk = 'XK',
  Kw = 'KW',
  Kg = 'KG',
  La = 'LA',
  Lv = 'LV',
  Lb = 'LB',
  Ls = 'LS',
  Lr = 'LR',
  Ly = 'LY',
  Li = 'LI',
  Lt = 'LT',
  Lu = 'LU',
  Mo = 'MO',
  Mg = 'MG',
  Mw = 'MW',
  My = 'MY',
  Mv = 'MV',
  Ml = 'ML',
  Mt = 'MT',
  Mq = 'MQ',
  Mr = 'MR',
  Mu = 'MU',
  Yt = 'YT',
  Mx = 'MX',
  Md = 'MD',
  Mc = 'MC',
  Mn = 'MN',
  Me = 'ME',
  Ms = 'MS',
  Ma = 'MA',
  Mz = 'MZ',
  Mm = 'MM',
  Na = 'NA',
  Nr = 'NR',
  Np = 'NP',
  Nl = 'NL',
  An = 'AN',
  Nc = 'NC',
  Nz = 'NZ',
  Ni = 'NI',
  Ne = 'NE',
  Ng = 'NG',
  Nu = 'NU',
  Nf = 'NF',
  Mk = 'MK',
  No = 'NO',
  Om = 'OM',
  Pk = 'PK',
  Ps = 'PS',
  Pa = 'PA',
  Pg = 'PG',
  Py = 'PY',
  Pe = 'PE',
  Ph = 'PH',
  Pn = 'PN',
  Pl = 'PL',
  Pt = 'PT',
  Qa = 'QA',
  Cm = 'CM',
  Re = 'RE',
  Ro = 'RO',
  Ru = 'RU',
  Rw = 'RW',
  Bl = 'BL',
  Sh = 'SH',
  Kn = 'KN',
  Lc = 'LC',
  Mf = 'MF',
  Pm = 'PM',
  Ws = 'WS',
  Sm = 'SM',
  St = 'ST',
  Sa = 'SA',
  Sn = 'SN',
  Rs = 'RS',
  Sc = 'SC',
  Sl = 'SL',
  Sg = 'SG',
  Sx = 'SX',
  Sk = 'SK',
  Si = 'SI',
  Sb = 'SB',
  So = 'SO',
  Za = 'ZA',
  Gs = 'GS',
  Kr = 'KR',
  Ss = 'SS',
  Es = 'ES',
  Lk = 'LK',
  Vc = 'VC',
  Sd = 'SD',
  Sr = 'SR',
  Sj = 'SJ',
  Se = 'SE',
  Ch = 'CH',
  Sy = 'SY',
  Tw = 'TW',
  Tj = 'TJ',
  Tz = 'TZ',
  Th = 'TH',
  Tl = 'TL',
  Tg = 'TG',
  Tk = 'TK',
  To = 'TO',
  Tt = 'TT',
  Ta = 'TA',
  Tn = 'TN',
  Tr = 'TR',
  Tm = 'TM',
  Tc = 'TC',
  Tv = 'TV',
  Ug = 'UG',
  Ua = 'UA',
  Ae = 'AE',
  Gb = 'GB',
  Us = 'US',
  Um = 'UM',
  Uy = 'UY',
  Uz = 'UZ',
  Vu = 'VU',
  Ve = 'VE',
  Vn = 'VN',
  Vg = 'VG',
  Wf = 'WF',
  Eh = 'EH',
  Ye = 'YE',
  Zm = 'ZM',
  Zw = 'ZW',
  Zz = 'ZZ'
}

/** A monetary value with currency. */
export type Shopify_MoneyV2 = {
  __typename?: 'Shopify_MoneyV2';
  /** Decimal money amount. */
  amount: Scalars['Decimal'];
  /** Currency of the money. */
  currencyCode: Shopify_CurrencyCode;
};

export enum Shopify_CurrencyCode {
  Usd = 'USD',
  Eur = 'EUR',
  Gbp = 'GBP',
  Cad = 'CAD',
  Afn = 'AFN',
  All = 'ALL',
  Dzd = 'DZD',
  Aoa = 'AOA',
  Ars = 'ARS',
  Amd = 'AMD',
  Awg = 'AWG',
  Aud = 'AUD',
  Bbd = 'BBD',
  Azn = 'AZN',
  Bdt = 'BDT',
  Bsd = 'BSD',
  Bhd = 'BHD',
  Bif = 'BIF',
  Bzd = 'BZD',
  Bmd = 'BMD',
  Btn = 'BTN',
  Bam = 'BAM',
  Brl = 'BRL',
  Bob = 'BOB',
  Bwp = 'BWP',
  Bnd = 'BND',
  Bgn = 'BGN',
  Mmk = 'MMK',
  Khr = 'KHR',
  Cve = 'CVE',
  Kyd = 'KYD',
  Xaf = 'XAF',
  Clp = 'CLP',
  Cny = 'CNY',
  Cop = 'COP',
  Kmf = 'KMF',
  Cdf = 'CDF',
  Crc = 'CRC',
  Hrk = 'HRK',
  Czk = 'CZK',
  Dkk = 'DKK',
  Dop = 'DOP',
  Xcd = 'XCD',
  Egp = 'EGP',
  Etb = 'ETB',
  Xpf = 'XPF',
  Fjd = 'FJD',
  Gmd = 'GMD',
  Ghs = 'GHS',
  Gtq = 'GTQ',
  Gyd = 'GYD',
  Gel = 'GEL',
  Htg = 'HTG',
  Hnl = 'HNL',
  Hkd = 'HKD',
  Huf = 'HUF',
  Isk = 'ISK',
  Inr = 'INR',
  Idr = 'IDR',
  Ils = 'ILS',
  Iqd = 'IQD',
  Jmd = 'JMD',
  Jpy = 'JPY',
  Jep = 'JEP',
  Jod = 'JOD',
  Kzt = 'KZT',
  Kes = 'KES',
  Kwd = 'KWD',
  Kgs = 'KGS',
  Lak = 'LAK',
  Lvl = 'LVL',
  Lbp = 'LBP',
  Lsl = 'LSL',
  Lrd = 'LRD',
  Ltl = 'LTL',
  Mga = 'MGA',
  Mkd = 'MKD',
  Mop = 'MOP',
  Mwk = 'MWK',
  Mvr = 'MVR',
  Mxn = 'MXN',
  Myr = 'MYR',
  Mur = 'MUR',
  Mdl = 'MDL',
  Mad = 'MAD',
  Mnt = 'MNT',
  Mzn = 'MZN',
  Nad = 'NAD',
  Npr = 'NPR',
  Ang = 'ANG',
  Nzd = 'NZD',
  Nio = 'NIO',
  Ngn = 'NGN',
  Nok = 'NOK',
  Omr = 'OMR',
  Pab = 'PAB',
  Pkr = 'PKR',
  Pgk = 'PGK',
  Pyg = 'PYG',
  Pen = 'PEN',
  Php = 'PHP',
  Pln = 'PLN',
  Qar = 'QAR',
  Ron = 'RON',
  Rub = 'RUB',
  Rwf = 'RWF',
  Wst = 'WST',
  Sar = 'SAR',
  Rsd = 'RSD',
  Scr = 'SCR',
  Sgd = 'SGD',
  Sdg = 'SDG',
  Syp = 'SYP',
  Zar = 'ZAR',
  Krw = 'KRW',
  Ssp = 'SSP',
  Sbd = 'SBD',
  Lkr = 'LKR',
  Srd = 'SRD',
  Szl = 'SZL',
  Sek = 'SEK',
  Chf = 'CHF',
  Twd = 'TWD',
  Thb = 'THB',
  Tzs = 'TZS',
  Ttd = 'TTD',
  Tnd = 'TND',
  Try = 'TRY',
  Tmt = 'TMT',
  Ugx = 'UGX',
  Uah = 'UAH',
  Aed = 'AED',
  Uyu = 'UYU',
  Uzs = 'UZS',
  Vuv = 'VUV',
  Vnd = 'VND',
  Xof = 'XOF',
  Yer = 'YER',
  Zmw = 'ZMW',
  Byn = 'BYN',
  Byr = 'BYR',
  Djf = 'DJF',
  Ern = 'ERN',
  Fkp = 'FKP',
  Gip = 'GIP',
  Gnf = 'GNF',
  Irr = 'IRR',
  Kid = 'KID',
  Lyd = 'LYD',
  Mru = 'MRU',
  Sll = 'SLL',
  Shp = 'SHP',
  Sos = 'SOS',
  Std = 'STD',
  Tjs = 'TJS',
  Top = 'TOP',
  Vef = 'VEF',
  Ves = 'VES',
  Xxx = 'XXX'
}

/** An auto-generated type for paginating through multiple Events. */
export type Shopify_EventConnection = {
  __typename?: 'Shopify_EventConnection';
  /** A list of edges. */
  edges: Array<Shopify_EventEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one Event and a cursor during pagination. */
export type Shopify_EventEdge = {
  __typename?: 'Shopify_EventEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of EventEdge. */
  node: Shopify_Event;
};

/**
 * Events chronicle resource activities such as the creation of an article, the fulfillment of an order, or the
 * addition of a product.
 */
export type Shopify_Event = {
  __typename?: 'Shopify_Event';
  /** The name of the app that created the event. */
  appTitle?: Maybe<Scalars['String']>;
  /** Whether the event was created by an app. */
  attributeToApp: Scalars['Boolean'];
  /** Whether the event was caused by an admin user. */
  attributeToUser: Scalars['Boolean'];
  /** The date and time when the event was created. */
  createdAt: Scalars['DateTime'];
  /** Whether the event is critical. */
  criticalAlert: Scalars['Boolean'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** Human readable text that describes the event. */
  message: Scalars['FormattedString'];
};

/**
 * Returns information about pagination in a connection, in accordance with the
 * [Relay specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).
 */
export type Shopify_PageInfo = {
  __typename?: 'Shopify_PageInfo';
  /** Whether there are more pages to fetch following the current page. */
  hasNextPage: Scalars['Boolean'];
  /** Whether there are any pages prior to the current page. */
  hasPreviousPage: Scalars['Boolean'];
};

export enum Shopify_EventSortKeys {
  CreatedAt = 'CREATED_AT',
  Id = 'ID',
  Relevance = 'RELEVANCE'
}

/** Represents an image resource. */
export type Shopify_Image = {
  __typename?: 'Shopify_Image';
  /** A word or phrase to share the nature or contents of an image. */
  altText?: Maybe<Scalars['String']>;
  /** The original height of the image in pixels. Returns `null` if the image is not hosted by Shopify. */
  height?: Maybe<Scalars['Int']>;
  /** A unique identifier for the image. */
  id?: Maybe<Scalars['ID']>;
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /**
   * The location of the original image as a URL.
   *
   * If there are any existing transformations in the original source URL, they will remain and not be stripped.
   * @deprecated Use `url` instead
   */
  originalSrc: Scalars['Url'];
  /** Returns a private metafield by namespace and key that belongs to the resource. */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /** List of private metafields that belong to the resource. */
  privateMetafields: Shopify_PrivateMetafieldConnection;
  /**
   * The location of the image as a URL.
   * @deprecated Use `url` instead
   */
  src: Scalars['Url'];
  /**
   * The location of the transformed image as a URL.
   *
   * All transformation arguments are considered "best-effort". If they can be applied to an image, they will be.
   * Otherwise any transformations which an image type does not support will be ignored.
   * @deprecated Use `url(transform:)` instead
   */
  transformedSrc: Scalars['Url'];
  /**
   * The location of the image as a URL.
   *
   * If no transform options are specified, then the original image will be preserved including any pre-applied transforms.
   *
   * All transformation options are considered "best-effort". Any transformation that the original image type doesn't support will be ignored.
   *
   * If you need multiple variations of the same image, then you can use [GraphQL aliases](https://graphql.org/learn/queries/#aliases).
   */
  url: Scalars['Url'];
  /** The original width of the image in pixels. Returns `null` if the image is not hosted by Shopify. */
  width?: Maybe<Scalars['Int']>;
};


/** Represents an image resource. */
export type Shopify_ImageMetafieldArgs = {
  namespace: Scalars['String'];
  key: Scalars['String'];
};


/** Represents an image resource. */
export type Shopify_ImageMetafieldsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** Represents an image resource. */
export type Shopify_ImagePrivateMetafieldArgs = {
  namespace: Scalars['String'];
  key: Scalars['String'];
};


/** Represents an image resource. */
export type Shopify_ImagePrivateMetafieldsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** Represents an image resource. */
export type Shopify_ImageTransformedSrcArgs = {
  maxWidth?: InputMaybe<Scalars['Int']>;
  maxHeight?: InputMaybe<Scalars['Int']>;
  crop?: InputMaybe<Shopify_CropRegion>;
  scale?: InputMaybe<Scalars['Int']>;
  preferredContentType?: InputMaybe<Shopify_ImageContentType>;
};


/** Represents an image resource. */
export type Shopify_ImageUrlArgs = {
  transform?: InputMaybe<Shopify_ImageTransformInput>;
};

/**
 * Metafields enable you to attach additional information to a Shopify resource, such as a [Product](https://shopify.dev/api/admin-graphql/latest/objects/product) or a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection).
 * For more information about where you can attach metafields refer to [HasMetafields](https://shopify.dev/api/admin/graphql/reference/common-objects/HasMetafields).
 * Some examples of the data that metafields enable you to store are specifications, size charts, downloadable documents, release dates, images, or part numbers.
 * Metafields are identified by an owner resource, namespace, and key. and store a value along with type information for that value.
 */
export type Shopify_Metafield = {
  __typename?: 'Shopify_Metafield';
  /** The date and time when the metafield was created. */
  createdAt: Scalars['DateTime'];
  /** The optional, associated metafield definition that maps to this metafield's namespace and key pair. */
  definition?: Maybe<Shopify_MetafieldDefinition>;
  /** The description of the metafield. */
  description?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The unique identifier for the metafield in its namespace. */
  key: Scalars['String'];
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['UnsignedInt64'];
  /**
   * A container for a group of metafields.
   * Grouping metafields within a namespace prevents your metafields from conflicting with other metafields that have the same key name.
   */
  namespace: Scalars['String'];
  /** The resource that the metafield is attached to. */
  owner: Shopify_HasMetafields;
  /** The resource that the metafield is attached to. */
  ownerType: Shopify_MetafieldOwnerType;
  /** Returns a reference object if the metafield definition's type is a resource reference. */
  reference?: Maybe<Shopify_MetafieldReference>;
  /**
   * The type of data that the metafield stores in the `value` field.
   * See the list of [supported types](https://shopify.dev/apps/metafields/types).
   */
  type: Scalars['String'];
  /** The date and time when the metafield was updated. */
  updatedAt: Scalars['DateTime'];
  /** The data to store in the metafield. The data is always stored as a string, regardless of the metafield's type. */
  value: Scalars['String'];
};

/**
 * Metafield definitions enable you to define additional validation constraints for metafields, and enable the
 * merchant to edit metafield values in context.
 */
export type Shopify_MetafieldDefinition = {
  __typename?: 'Shopify_MetafieldDefinition';
  /** The description of a metafield definition. */
  description?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The key name used to identify a metafield definition within a namespace. */
  key: Scalars['String'];
  /** The list of metafields associated with a metafield definition. */
  metafields: Shopify_MetafieldConnection;
  /** The count of metafields under a metafield definition. */
  metafieldsCount: Scalars['Int'];
  /** The human-readable name for the metafield definition. */
  name: Scalars['String'];
  /** The namespace of the metafield definition. You can use a namespace to group related metafields. */
  namespace: Scalars['String'];
  /** The resource type that the metafield definition is attached to. For example, `Product` or `Collection`. */
  ownerType: Shopify_MetafieldOwnerType;
  /** The position of the metafield definition in the pinned list. */
  pinnedPosition?: Maybe<Scalars['Int']>;
  /** The standard metafield definition template associated with a metafield definition. */
  standardTemplate?: Maybe<Shopify_StandardMetafieldDefinitionTemplate>;
  /** The type of data that the metafield will store. */
  type: Shopify_MetafieldDefinitionType;
  /** The validation status for the existing metafields within a metafield definition. */
  validationStatus: Shopify_MetafieldDefinitionValidationStatus;
  /**
   * A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
   * the metafield. For example, for a metafield with the type `date`, you can set a minimum date validation, so
   * that the metafield will only store dates after the specific minimum date.
   */
  validations: Array<Shopify_MetafieldDefinitionValidation>;
};


/**
 * Metafield definitions enable you to define additional validation constraints for metafields, and enable the
 * merchant to edit metafield values in context.
 */
export type Shopify_MetafieldDefinitionMetafieldsArgs = {
  validationStatus?: InputMaybe<Shopify_MetafieldValidationStatus>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * Metafield definitions enable you to define additional validation constraints for metafields, and enable the
 * merchant to edit metafield values in context.
 */
export type Shopify_MetafieldDefinitionMetafieldsCountArgs = {
  validationStatus?: InputMaybe<Shopify_MetafieldValidationStatus>;
};

/** An auto-generated type for paginating through multiple Metafields. */
export type Shopify_MetafieldConnection = {
  __typename?: 'Shopify_MetafieldConnection';
  /** A list of edges. */
  edges: Array<Shopify_MetafieldEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one Metafield and a cursor during pagination. */
export type Shopify_MetafieldEdge = {
  __typename?: 'Shopify_MetafieldEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of MetafieldEdge. */
  node: Shopify_Metafield;
};

export enum Shopify_MetafieldValidationStatus {
  Any = 'ANY',
  Valid = 'VALID',
  Invalid = 'INVALID'
}

export enum Shopify_MetafieldOwnerType {
  Article = 'ARTICLE',
  Blog = 'BLOG',
  Collection = 'COLLECTION',
  Customer = 'CUSTOMER',
  Draftorder = 'DRAFTORDER',
  Order = 'ORDER',
  Page = 'PAGE',
  Product = 'PRODUCT',
  Productimage = 'PRODUCTIMAGE',
  Productvariant = 'PRODUCTVARIANT',
  Shop = 'SHOP'
}

/**
 * Standard metafield definition templates provide preset configurations to create metafield definitions.
 * Each template has a specific namespace and key that we've reserved to have specific meanings for common use cases.
 *
 * Refer to the [list of standard metafield definitions](https://shopify.dev/apps/metafields/definitions/standard-definitions).
 */
export type Shopify_StandardMetafieldDefinitionTemplate = {
  __typename?: 'Shopify_StandardMetafieldDefinitionTemplate';
  /** The description of the standard metafield definition. */
  description?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The key owned by the definition after the definition has been activated. */
  key: Scalars['String'];
  /** The human-readable name for the standard metafield definition. */
  name: Scalars['String'];
  /** The namespace owned by the definition after the definition has been activated. */
  namespace: Scalars['String'];
  /** The list of resource types that the standard metafield definition can be applied to. */
  ownerTypes: Array<Shopify_MetafieldOwnerType>;
  /** The associated [metafield definition type](https://shopify.dev/apps/metafields/definitions/types) that the metafield stores. */
  type: Shopify_MetafieldDefinitionType;
  /** The configured validations for the standard metafield definition. */
  validations: Array<Shopify_MetafieldDefinitionValidation>;
};

/** A metafield definition type provides basic foundation and validation for a metafield. */
export type Shopify_MetafieldDefinitionType = {
  __typename?: 'Shopify_MetafieldDefinitionType';
  /** The category associated with the metafield definition type. */
  category: Scalars['String'];
  /**
   * The name of the type for the metafield definition.
   * See the list of [supported types](https://shopify.dev/apps/metafields/types).
   */
  name: Scalars['String'];
  /** The supported validations for a metafield definition type. */
  supportedValidations: Array<Shopify_MetafieldDefinitionSupportedValidation>;
  /** Whether metafields without a definition can be migrated to a definition of this type. */
  supportsDefinitionMigrations: Scalars['Boolean'];
  /**
   * The value type for a metafield created with this definition type.
   * @deprecated `valueType` is deprecated and `name` should be used for type information.
   */
  valueType: Shopify_MetafieldValueType;
};

/**
 * The type and name for the optional validation configuration of a metafield.
 *
 * For example, a supported validation might consist of a `max` name and a `number_integer` type.
 * This validation can then be used to enforce a maximum character length for a `single_line_text_field` metafield.
 */
export type Shopify_MetafieldDefinitionSupportedValidation = {
  __typename?: 'Shopify_MetafieldDefinitionSupportedValidation';
  /** The name of the metafield definition validation. */
  name: Scalars['String'];
  /** The type of input for the validation. */
  type: Scalars['String'];
};

export enum Shopify_MetafieldValueType {
  String = 'STRING',
  Integer = 'INTEGER',
  JsonString = 'JSON_STRING',
  Boolean = 'BOOLEAN'
}

/**
 * A configured metafield definition validation.
 *
 * For example, for a metafield definition of `number_integer` type, you can set a validation with the name `max`
 * and a value of `15`. This validation will ensure that the value of the metafield is a number less than or equal to 15.
 *
 * Refer to the [list of supported validations](https://shopify.dev/api/admin/graphql/reference/common-objects/metafieldDefinitionTypes#examples-Fetch_all_metafield_definition_types).
 */
export type Shopify_MetafieldDefinitionValidation = {
  __typename?: 'Shopify_MetafieldDefinitionValidation';
  /** The validation name. */
  name: Scalars['String'];
  /** The name for the metafield type of this validation. */
  type: Scalars['String'];
  /** The validation value. */
  value?: Maybe<Scalars['String']>;
};

export enum Shopify_MetafieldDefinitionValidationStatus {
  AllValid = 'ALL_VALID',
  InProgress = 'IN_PROGRESS',
  SomeInvalid = 'SOME_INVALID'
}

/** Represents information about the metafields associated to the specified resource. */
export type Shopify_HasMetafields = {
  __typename?: 'Shopify_HasMetafields';
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /** Returns a private metafield by namespace and key that belongs to the resource. */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /** List of private metafields that belong to the resource. */
  privateMetafields: Shopify_PrivateMetafieldConnection;
};


/** Represents information about the metafields associated to the specified resource. */
export type Shopify_HasMetafieldsMetafieldArgs = {
  namespace: Scalars['String'];
  key: Scalars['String'];
};


/** Represents information about the metafields associated to the specified resource. */
export type Shopify_HasMetafieldsMetafieldsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** Represents information about the metafields associated to the specified resource. */
export type Shopify_HasMetafieldsPrivateMetafieldArgs = {
  namespace: Scalars['String'];
  key: Scalars['String'];
};


/** Represents information about the metafields associated to the specified resource. */
export type Shopify_HasMetafieldsPrivateMetafieldsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/**
 * Private metafields represent custom metadata that is attached to a resource.
 * Private metafields are accessible only by the application that created them and only from the GraphQL Admin API.
 *
 * An application can create a maximum of 10 private metafields per shop resource.
 */
export type Shopify_PrivateMetafield = {
  __typename?: 'Shopify_PrivateMetafield';
  /** The date and time when the private metafield was created. */
  createdAt: Scalars['DateTime'];
  /** The id of the private metafield. */
  id: Scalars['ID'];
  /** The key name of the private metafield. */
  key: Scalars['String'];
  /** The namespace of the private metafield. */
  namespace: Scalars['String'];
  /** The date and time when the private metafield was updated. */
  updatedAt: Scalars['DateTime'];
  /** The value of a private metafield. */
  value: Scalars['String'];
  /** Represents the private metafield value type. */
  valueType: Shopify_PrivateMetafieldValueType;
};

export enum Shopify_PrivateMetafieldValueType {
  String = 'STRING',
  Integer = 'INTEGER',
  JsonString = 'JSON_STRING'
}

/** An auto-generated type for paginating through multiple PrivateMetafields. */
export type Shopify_PrivateMetafieldConnection = {
  __typename?: 'Shopify_PrivateMetafieldConnection';
  /** A list of edges. */
  edges: Array<Shopify_PrivateMetafieldEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one PrivateMetafield and a cursor during pagination. */
export type Shopify_PrivateMetafieldEdge = {
  __typename?: 'Shopify_PrivateMetafieldEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of PrivateMetafieldEdge. */
  node: Shopify_PrivateMetafield;
};

/** The resource referenced by the metafield value. */
export type Shopify_MetafieldReference = Shopify_GenericFile | Shopify_MediaImage | Shopify_OnlineStorePage | Shopify_Product | Shopify_ProductVariant;

/** A generic file. */
export type Shopify_GenericFile = {
  __typename?: 'Shopify_GenericFile';
  /** A word or phrase to describe the contents or the function of a file. */
  alt?: Maybe<Scalars['String']>;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was created. */
  createdAt: Scalars['DateTime'];
  /** Any errors that have occurred on the file. */
  fileErrors: Array<Shopify_FileError>;
  /** The status of the file. */
  fileStatus: Shopify_FileStatus;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The preview image for the media. */
  preview?: Maybe<Shopify_MediaPreviewImage>;
  /** The URL of the file. */
  url?: Maybe<Scalars['Url']>;
};

/** A file error. */
export type Shopify_FileError = {
  __typename?: 'Shopify_FileError';
  /** Code representing the type of error. */
  code: Shopify_FileErrorCode;
  /** Additional details regarding the error. */
  details?: Maybe<Scalars['String']>;
  /** Translated error message. */
  message: Scalars['String'];
};

export enum Shopify_FileErrorCode {
  Unknown = 'UNKNOWN',
  InvalidSignedUrl = 'INVALID_SIGNED_URL',
  ImageDownloadFailure = 'IMAGE_DOWNLOAD_FAILURE',
  ImageProcessingFailure = 'IMAGE_PROCESSING_FAILURE',
  MediaTimeoutError = 'MEDIA_TIMEOUT_ERROR',
  ExternalVideoNotFound = 'EXTERNAL_VIDEO_NOT_FOUND',
  ExternalVideoUnlisted = 'EXTERNAL_VIDEO_UNLISTED',
  ExternalVideoInvalidAspectRatio = 'EXTERNAL_VIDEO_INVALID_ASPECT_RATIO',
  ExternalVideoEmbedDisabled = 'EXTERNAL_VIDEO_EMBED_DISABLED',
  ExternalVideoEmbedNotFoundOrTranscoding = 'EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING',
  GenericFileDownloadFailure = 'GENERIC_FILE_DOWNLOAD_FAILURE',
  GenericFileInvalidSize = 'GENERIC_FILE_INVALID_SIZE',
  VideoMetadataReadError = 'VIDEO_METADATA_READ_ERROR',
  VideoInvalidFiletypeError = 'VIDEO_INVALID_FILETYPE_ERROR',
  VideoMinWidthError = 'VIDEO_MIN_WIDTH_ERROR',
  VideoMaxWidthError = 'VIDEO_MAX_WIDTH_ERROR',
  VideoMinHeightError = 'VIDEO_MIN_HEIGHT_ERROR',
  VideoMaxHeightError = 'VIDEO_MAX_HEIGHT_ERROR',
  VideoMinDurationError = 'VIDEO_MIN_DURATION_ERROR',
  VideoMaxDurationError = 'VIDEO_MAX_DURATION_ERROR',
  VideoValidationError = 'VIDEO_VALIDATION_ERROR',
  Model3DValidationError = 'MODEL3D_VALIDATION_ERROR',
  Model3DThumbnailGenerationError = 'MODEL3D_THUMBNAIL_GENERATION_ERROR',
  Model3DGlbToUsdzConversionError = 'MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR',
  Model3DGlbOutputCreationError = 'MODEL3D_GLB_OUTPUT_CREATION_ERROR',
  Model3DProcessingFailure = 'MODEL3D_PROCESSING_FAILURE',
  UnsupportedImageFileType = 'UNSUPPORTED_IMAGE_FILE_TYPE',
  InvalidImageFileSize = 'INVALID_IMAGE_FILE_SIZE',
  InvalidImageAspectRatio = 'INVALID_IMAGE_ASPECT_RATIO',
  InvalidImageResolution = 'INVALID_IMAGE_RESOLUTION',
  FileStorageLimitExceeded = 'FILE_STORAGE_LIMIT_EXCEEDED'
}

export enum Shopify_FileStatus {
  Uploaded = 'UPLOADED',
  Processing = 'PROCESSING',
  Ready = 'READY',
  Failed = 'FAILED'
}

/** Represents the preview image for a media. */
export type Shopify_MediaPreviewImage = {
  __typename?: 'Shopify_MediaPreviewImage';
  /** The preview image for the media. Returns `null` until `status` is `READY`. */
  image?: Maybe<Shopify_Image>;
  /** Current status of the preview image. */
  status: Shopify_MediaPreviewImageStatus;
};

export enum Shopify_MediaPreviewImageStatus {
  Uploaded = 'UPLOADED',
  Processing = 'PROCESSING',
  Ready = 'READY',
  Failed = 'FAILED'
}

/** An image hosted on Shopify. */
export type Shopify_MediaImage = {
  __typename?: 'Shopify_MediaImage';
  /** A word or phrase to share the nature or contents of a media. */
  alt?: Maybe<Scalars['String']>;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was created. */
  createdAt: Scalars['DateTime'];
  /** Any errors that have occurred on the file. */
  fileErrors: Array<Shopify_FileError>;
  /** The status of the file. */
  fileStatus: Shopify_FileStatus;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The image for the media. Returns `null` until `status` is `READY`. */
  image?: Maybe<Shopify_Image>;
  /** The media content type. */
  mediaContentType: Shopify_MediaContentType;
  /** Any errors which have occurred on the media. */
  mediaErrors: Array<Shopify_MediaError>;
  /** The warnings attached to the media. */
  mediaWarnings: Array<Shopify_MediaWarning>;
  /** The MIME type of the image. */
  mimeType?: Maybe<Scalars['String']>;
  /** The preview image for the media. */
  preview?: Maybe<Shopify_MediaPreviewImage>;
  /** Current status of the media. */
  status: Shopify_MediaStatus;
};

export enum Shopify_MediaContentType {
  Video = 'VIDEO',
  ExternalVideo = 'EXTERNAL_VIDEO',
  Model_3D = 'MODEL_3D',
  Image = 'IMAGE'
}

/** Represents a media error. */
export type Shopify_MediaError = {
  __typename?: 'Shopify_MediaError';
  /** Code representing the type of error. */
  code: Shopify_MediaErrorCode;
  /** Additional details regarding the error. */
  details?: Maybe<Scalars['String']>;
  /** Translated error message. */
  message: Scalars['String'];
};

export enum Shopify_MediaErrorCode {
  Unknown = 'UNKNOWN',
  InvalidSignedUrl = 'INVALID_SIGNED_URL',
  ImageDownloadFailure = 'IMAGE_DOWNLOAD_FAILURE',
  ImageProcessingFailure = 'IMAGE_PROCESSING_FAILURE',
  MediaTimeoutError = 'MEDIA_TIMEOUT_ERROR',
  ExternalVideoNotFound = 'EXTERNAL_VIDEO_NOT_FOUND',
  ExternalVideoUnlisted = 'EXTERNAL_VIDEO_UNLISTED',
  ExternalVideoInvalidAspectRatio = 'EXTERNAL_VIDEO_INVALID_ASPECT_RATIO',
  ExternalVideoEmbedDisabled = 'EXTERNAL_VIDEO_EMBED_DISABLED',
  ExternalVideoEmbedNotFoundOrTranscoding = 'EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING',
  GenericFileDownloadFailure = 'GENERIC_FILE_DOWNLOAD_FAILURE',
  GenericFileInvalidSize = 'GENERIC_FILE_INVALID_SIZE',
  VideoMetadataReadError = 'VIDEO_METADATA_READ_ERROR',
  VideoInvalidFiletypeError = 'VIDEO_INVALID_FILETYPE_ERROR',
  VideoMinWidthError = 'VIDEO_MIN_WIDTH_ERROR',
  VideoMaxWidthError = 'VIDEO_MAX_WIDTH_ERROR',
  VideoMinHeightError = 'VIDEO_MIN_HEIGHT_ERROR',
  VideoMaxHeightError = 'VIDEO_MAX_HEIGHT_ERROR',
  VideoMinDurationError = 'VIDEO_MIN_DURATION_ERROR',
  VideoMaxDurationError = 'VIDEO_MAX_DURATION_ERROR',
  VideoValidationError = 'VIDEO_VALIDATION_ERROR',
  Model3DValidationError = 'MODEL3D_VALIDATION_ERROR',
  Model3DThumbnailGenerationError = 'MODEL3D_THUMBNAIL_GENERATION_ERROR',
  Model3DGlbToUsdzConversionError = 'MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR',
  Model3DGlbOutputCreationError = 'MODEL3D_GLB_OUTPUT_CREATION_ERROR',
  Model3DProcessingFailure = 'MODEL3D_PROCESSING_FAILURE',
  UnsupportedImageFileType = 'UNSUPPORTED_IMAGE_FILE_TYPE',
  InvalidImageFileSize = 'INVALID_IMAGE_FILE_SIZE',
  InvalidImageAspectRatio = 'INVALID_IMAGE_ASPECT_RATIO',
  InvalidImageResolution = 'INVALID_IMAGE_RESOLUTION',
  FileStorageLimitExceeded = 'FILE_STORAGE_LIMIT_EXCEEDED'
}

/** Represents a media warning. */
export type Shopify_MediaWarning = {
  __typename?: 'Shopify_MediaWarning';
  /** The code representing the type of warning. */
  code: Shopify_MediaWarningCode;
  /** Translated warning message. */
  message?: Maybe<Scalars['String']>;
};

export enum Shopify_MediaWarningCode {
  ModelSmallPhysicalSize = 'MODEL_SMALL_PHYSICAL_SIZE',
  ModelLargePhysicalSize = 'MODEL_LARGE_PHYSICAL_SIZE'
}

export enum Shopify_MediaStatus {
  Uploaded = 'UPLOADED',
  Processing = 'PROCESSING',
  Ready = 'READY',
  Failed = 'FAILED'
}

/** A custom page on the Online Store. */
export type Shopify_OnlineStorePage = {
  __typename?: 'Shopify_OnlineStorePage';
  /** A default cursor that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars['String'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The translations associated with the resource. */
  translations: Array<Shopify_PublishedTranslation>;
};


/** A custom page on the Online Store. */
export type Shopify_OnlineStorePageTranslationsArgs = {
  locale: Scalars['String'];
};

/** Published translation of a field of a resource. */
export type Shopify_PublishedTranslation = {
  __typename?: 'Shopify_PublishedTranslation';
  /** The resource field that is being translated. */
  key: Scalars['String'];
  /** The locale of this translation. */
  locale: Scalars['String'];
  /** The translation value. */
  value?: Maybe<Scalars['String']>;
};

export type Shopify_Product = {
  __typename?: 'Shopify_Product';
  /**
   * The description of the product, complete with HTML formatting.
   * @deprecated Use `descriptionHtml` instead
   */
  bodyHtml?: Maybe<Scalars['String']>;
  /** A list of the collections that include the product. */
  collections: Shopify_CollectionConnection;
  /** The pricing that applies for a customer in a given context. */
  contextualPricing: Shopify_ProductContextualPricing;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was created. */
  createdAt: Scalars['DateTime'];
  /** The custom product type specified by the merchant. */
  customProductType?: Maybe<Scalars['String']>;
  /** A default cursor that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars['String'];
  /** A stripped description of the product, single line with HTML tags removed. */
  description: Scalars['String'];
  /** The description of the product, complete with HTML formatting. */
  descriptionHtml: Scalars['Html'];
  /**
   * Stripped description of the product, single line with HTML tags removed.
   * Truncated to 60 characters.
   * @deprecated Use `description` instead
   */
  descriptionPlainSummary: Scalars['String'];
  /** The featured image for the product. */
  featuredImage?: Maybe<Shopify_Image>;
  /** The featured media for the product. */
  featuredMedia?: Maybe<Shopify_Media>;
  /** Information about the product that's provided through resource feedback. */
  feedback?: Maybe<Shopify_ResourceFeedback>;
  /** The theme template used when viewing the gift card in a store. */
  giftCardTemplateSuffix?: Maybe<Scalars['String']>;
  /** A unique human-friendly string of the product's title. */
  handle: Scalars['String'];
  /** Whether the product has only a single variant with the default option and value. */
  hasOnlyDefaultVariant: Scalars['Boolean'];
  /** Whether the product has out of stock variants. */
  hasOutOfStockVariants: Scalars['Boolean'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The images associated with the product. */
  images: Shopify_ImageConnection;
  /** Whether the product is in a given collection. */
  inCollection: Scalars['Boolean'];
  /** Whether the product is a gift card. */
  isGiftCard: Scalars['Boolean'];
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['UnsignedInt64'];
  /** The media associated with the product. This can include images, 3D models, or videos. */
  media: Shopify_MediaConnection;
  /** Total count of media belonging to a product. */
  mediaCount: Scalars['Int'];
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafield definitions. */
  metafieldDefinitions: Shopify_MetafieldDefinitionConnection;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /** The online store preview URL. */
  onlineStorePreviewUrl?: Maybe<Scalars['Url']>;
  /**
   * The online store URL for the product.
   * A value of `null` indicates that the product is not published to the Online Store sales channel.
   */
  onlineStoreUrl?: Maybe<Scalars['Url']>;
  /** A list of product options. The limit is specified by Shop.resourceLimits.maxProductOptions. */
  options: Array<Shopify_ProductOption>;
  /**
   * The price range of the product.
   * @deprecated Deprecated in API version 2020-10. Use `priceRangeV2` instead.
   */
  priceRange: Shopify_ProductPriceRange;
  /** The price range of the product with prices formatted as decimals. */
  priceRangeV2: Shopify_ProductPriceRangeV2;
  /** Returns a private metafield by namespace and key that belongs to the resource. */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /** List of private metafields that belong to the resource. */
  privateMetafields: Shopify_PrivateMetafieldConnection;
  /** The product type specified by the merchant. */
  productType: Scalars['String'];
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was published to the Online Store. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /**
   * Check to see whether the resource is published to a given channel.
   * @deprecated Use `publishedOnPublication` instead
   */
  publishedOnChannel: Scalars['Boolean'];
  /** Check to see whether the resource is published to a given publication. */
  publishedOnPublication: Scalars['Boolean'];
  /** Whether the product can only be purchased with a selling plan (subscription). Products that are sold on subscription (`requiresSellingPlan: true`) can be updated only for online stores. If you update a product to be subscription only, then the product is unpublished from all channels except the online store. */
  requiresSellingPlan: Scalars['Boolean'];
  /** The resource that is either published or staged to be published to the calling app's publication. Requires the `read_product_listings` scope. */
  resourcePublicationOnCurrentPublication?: Maybe<Shopify_ResourcePublicationV2>;
  /** Count of selling plan groups associated with the product. */
  sellingPlanGroupCount: Scalars['Int'];
  /** A list of all selling plan groups defined in the current shop associated with the product either directly or through any of its variants. */
  sellingPlanGroups: Shopify_SellingPlanGroupConnection;
  /** SEO information of the product. */
  seo: Shopify_Seo;
  /** The standardized product type in the Shopify product taxonomy. */
  standardizedProductType?: Maybe<Shopify_StandardizedProductType>;
  /** The product status. This controls visibility across all channels. */
  status: Shopify_ProductStatus;
  /**
   * The Storefront GraphQL API ID of the `Product`.
   *
   * As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
   * @deprecated Use `id` instead
   */
  storefrontId: Scalars['StorefrontId'];
  /**
   * A comma separated list of tags associated with the product. Updating `tags` overwrites
   * any existing tags that were previously added to the product. To add new tags without overwriting
   * existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
   * mutation.
   */
  tags: Array<Scalars['String']>;
  /** The theme template used when viewing the product in a store. */
  templateSuffix?: Maybe<Scalars['String']>;
  /** The title of the product. */
  title: Scalars['String'];
  /** The quantity of inventory in stock. */
  totalInventory: Scalars['Int'];
  /** The number of variants that are associated with the product. */
  totalVariants: Scalars['Int'];
  /** Whether inventory tracking has been enabled for the product. */
  tracksInventory: Scalars['Boolean'];
  /** The translations associated with the resource. */
  translations: Array<Shopify_PublishedTranslation>;
  /**
   * The date and time when the product was last modified.
   * A product's `updatedAt` value can change for different reasons. For example, if an order
   * is placed for a product that has inventory tracking set up, then the inventory adjustment
   * is counted as an update.
   */
  updatedAt: Scalars['DateTime'];
  /** A list of variants associated with the product. */
  variants: Shopify_ProductVariantConnection;
  /** The name of the product's vendor. */
  vendor: Scalars['String'];
  reviews?: Maybe<ReviewsIo_ListProductReviewsResponse>;
  /** The Recharge subscription data associated with this product */
  recharge?: Maybe<Recharge_Product>;
};


export type Shopify_ProductCollectionsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_CollectionSortKeys>;
  query?: InputMaybe<Scalars['String']>;
};


export type Shopify_ProductContextualPricingArgs = {
  context: Shopify_ContextualPricingContextInput;
};


export type Shopify_ProductDescriptionArgs = {
  truncateAt?: InputMaybe<Scalars['Int']>;
};


export type Shopify_ProductImagesArgs = {
  maxWidth?: InputMaybe<Scalars['Int']>;
  maxHeight?: InputMaybe<Scalars['Int']>;
  crop?: InputMaybe<Shopify_CropRegion>;
  scale?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_ProductImageSortKeys>;
};


export type Shopify_ProductInCollectionArgs = {
  id: Scalars['ID'];
};


export type Shopify_ProductMediaArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_ProductMediaSortKeys>;
};


export type Shopify_ProductMetafieldArgs = {
  namespace: Scalars['String'];
  key: Scalars['String'];
};


export type Shopify_ProductMetafieldDefinitionsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  pinnedStatus?: InputMaybe<Shopify_MetafieldDefinitionPinnedStatus>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_MetafieldDefinitionSortKeys>;
  query?: InputMaybe<Scalars['String']>;
};


export type Shopify_ProductMetafieldsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


export type Shopify_ProductOptionsArgs = {
  first?: InputMaybe<Scalars['Int']>;
};


export type Shopify_ProductPrivateMetafieldArgs = {
  namespace: Scalars['String'];
  key: Scalars['String'];
};


export type Shopify_ProductPrivateMetafieldsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


export type Shopify_ProductPublishedOnChannelArgs = {
  channelId: Scalars['ID'];
};


export type Shopify_ProductPublishedOnPublicationArgs = {
  publicationId: Scalars['ID'];
};


export type Shopify_ProductSellingPlanGroupsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


export type Shopify_ProductTranslationsArgs = {
  locale: Scalars['String'];
};


export type Shopify_ProductVariantsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_ProductVariantSortKeys>;
};

/** An auto-generated type for paginating through multiple Collections. */
export type Shopify_CollectionConnection = {
  __typename?: 'Shopify_CollectionConnection';
  /** A list of edges. */
  edges: Array<Shopify_CollectionEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one Collection and a cursor during pagination. */
export type Shopify_CollectionEdge = {
  __typename?: 'Shopify_CollectionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of CollectionEdge. */
  node: Shopify_Collection;
};

/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_Collection = {
  __typename?: 'Shopify_Collection';
  /** A single-line, text-only description of the collection, stripped of any HTML tags and formatting that were included in the description. */
  description: Scalars['String'];
  /** The description of the collection, including any HTML tags and formatting. This content is typically displayed to customers, such as on an online store, depending on the theme. */
  descriptionHtml: Scalars['Html'];
  /** Information about the collection that's provided through resource feedback. */
  feedback?: Maybe<Shopify_ResourceFeedback>;
  /**
   * A unique string that identifies the collection. If a handle isn't specified when a collection is created, it's automatically generated from the collection's original title, and typically includes words from the title separated by hyphens. For example, a collection that was created with the title `Summer Catalog 2022` might have the handle `summer-catalog-2022`.
   *
   * If the title is changed, the handle doesn't automatically change.
   *
   * The handle can be used in themes by the Liquid templating language to refer to the collection, but using the ID is preferred because it never changes.
   */
  handle: Scalars['String'];
  /** Whether the collection includes the specified product. */
  hasProduct: Scalars['Boolean'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The image associated with the collection. */
  image?: Maybe<Shopify_Image>;
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['UnsignedInt64'];
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafield definitions. */
  metafieldDefinitions: Shopify_MetafieldDefinitionConnection;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /** Returns a private metafield by namespace and key that belongs to the resource. */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /** List of private metafields that belong to the resource. */
  privateMetafields: Shopify_PrivateMetafieldConnection;
  /** The products that are included in the collection. */
  products: Shopify_ProductConnection;
  /** The number of products in the collection. */
  productsCount: Scalars['Int'];
  /**
   * Check to see whether the resource is published to a given channel.
   * @deprecated Use `publishedOnPublication` instead
   */
  publishedOnChannel: Scalars['Boolean'];
  /** Check to see whether the resource is published to a given publication. */
  publishedOnPublication: Scalars['Boolean'];
  /** For a smart (automated) collection, specifies the rules that determine whether a product is included. */
  ruleSet?: Maybe<Shopify_CollectionRuleSet>;
  /** If the default SEO fields for page title and description have been modified, contains the modified information. */
  seo: Shopify_Seo;
  /** The order in which the products in the collection are displayed by default in the Shopify admin and in sales channels, such as an online store. */
  sortOrder: Shopify_CollectionSortOrder;
  /**
   * The Storefront GraphQL API ID of the `Collection`.
   *
   * As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
   * @deprecated Use `id` instead
   */
  storefrontId: Scalars['StorefrontId'];
  /** The suffix of the Liquid template being used to show the collection in an online store. For example, if the value is `custom`, then the collection is using the `collection.custom.liquid` template. If the value is `null`, then the collection is using the default `collection.liquid` template. */
  templateSuffix?: Maybe<Scalars['String']>;
  /** The name of the collection. It's displayed in the Shopify admin and is typically displayed in sales channels, such as an online store. */
  title: Scalars['String'];
  /** The translations associated with the resource. */
  translations: Array<Shopify_PublishedTranslation>;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the collection was last modified. */
  updatedAt: Scalars['DateTime'];
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionDescriptionArgs = {
  truncateAt?: InputMaybe<Scalars['Int']>;
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionHasProductArgs = {
  id: Scalars['ID'];
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionImageArgs = {
  maxWidth?: InputMaybe<Scalars['Int']>;
  maxHeight?: InputMaybe<Scalars['Int']>;
  crop?: InputMaybe<Shopify_CropRegion>;
  scale?: InputMaybe<Scalars['Int']>;
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionMetafieldArgs = {
  namespace: Scalars['String'];
  key: Scalars['String'];
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionMetafieldDefinitionsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  pinnedStatus?: InputMaybe<Shopify_MetafieldDefinitionPinnedStatus>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_MetafieldDefinitionSortKeys>;
  query?: InputMaybe<Scalars['String']>;
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionMetafieldsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionPrivateMetafieldArgs = {
  namespace: Scalars['String'];
  key: Scalars['String'];
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionPrivateMetafieldsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionProductsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_ProductCollectionSortKeys>;
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionPublishedOnChannelArgs = {
  channelId: Scalars['ID'];
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionPublishedOnPublicationArgs = {
  publicationId: Scalars['ID'];
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionTranslationsArgs = {
  locale: Scalars['String'];
};

/** Represents feedback from apps about a resource, and the steps required to set up the apps on the shop. */
export type Shopify_ResourceFeedback = {
  __typename?: 'Shopify_ResourceFeedback';
  /**
   * Feedback from an app about the steps a merchant needs to take to set up the app on their store.
   * @deprecated Use `details` instead
   */
  appFeedback: Array<Shopify_AppFeedback>;
  /** List of AppFeedback detailing issues regarding a resource. */
  details: Array<Shopify_AppFeedback>;
  /** Summary of resource feedback pertaining to the resource. */
  summary: Scalars['String'];
};

/**
 * Reports the status of shops and their resources and displays this information
 * within Shopify admin. AppFeedback is used to notify merchants about steps they need to take
 * to set up an app on their store.
 */
export type Shopify_AppFeedback = {
  __typename?: 'Shopify_AppFeedback';
  /** The application associated to the feedback. */
  app: Shopify_App;
  /** A link to where merchants can resolve errors. */
  link?: Maybe<Shopify_Link>;
  /** The feedback message presented to the merchant. */
  messages: Array<Shopify_UserError>;
};

/** A Shopify application. */
export type Shopify_App = {
  __typename?: 'Shopify_App';
  /** A unique application API identifier. */
  apiKey: Scalars['String'];
  /** App store page URL of the app. */
  appStoreAppUrl?: Maybe<Scalars['Url']>;
  /** App store page URL of the developer who created the app. */
  appStoreDeveloperUrl?: Maybe<Scalars['Url']>;
  /** Banner image for the app. */
  banner: Shopify_Image;
  /** Description of the app. */
  description?: Maybe<Scalars['String']>;
  /** The name of the app developer. */
  developerName?: Maybe<Scalars['String']>;
  /**
   * Website of the developer who created the app.
   * @deprecated Use `appStoreDeveloperUrl` instead
   */
  developerUrl: Scalars['Url'];
  /** Whether the app uses the Embedded App SDK. */
  embedded: Scalars['Boolean'];
  /** Requirements that must be met before the app can be installed. */
  failedRequirements: Array<Shopify_FailedRequirement>;
  /** A list of app features that are shown in the Shopify App Store listing. */
  features: Array<Scalars['String']>;
  /** Feedback from this app about the store. */
  feedback?: Maybe<Shopify_AppFeedback>;
  /** Handle of the app. */
  handle?: Maybe<Scalars['String']>;
  /** Icon that represents the app. */
  icon: Shopify_Image;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** Webpage where you can install the app. */
  installUrl?: Maybe<Scalars['Url']>;
  /**
   * Corresponding AppInstallation for this shop and App.
   * Returns null if the App is not installed.
   */
  installation?: Maybe<Shopify_AppInstallation>;
  /** Whether the app is the [post purchase](https://shopify.dev/apps/checkout/post-purchase) app in use. */
  isPostPurchaseAppInUse: Scalars['Boolean'];
  /**
   * Webpage that the app starts in.
   * @deprecated Use AppInstallation.launchUrl instead
   */
  launchUrl: Scalars['Url'];
  /**
   * Menu items for the app, which also appear as submenu items in left navigation sidebar in the Shopify admin.
   * @deprecated Use AppInstallation.navigationItems instead
   */
  navigationItems: Array<Shopify_NavigationItem>;
  /** Detailed information about the app pricing. */
  pricingDetails?: Maybe<Scalars['String']>;
  /** Summary of the app pricing details. */
  pricingDetailsSummary: Scalars['String'];
  /** Link to app privacy policy. */
  privacyPolicyUrl?: Maybe<Scalars['Url']>;
  /** Whether the app is published to the Shopify App Store. */
  published: Scalars['Boolean'];
  /** Screenshots of the app. */
  screenshots: Array<Shopify_Image>;
  /** Whether the app was developed by Shopify. */
  shopifyDeveloped: Scalars['Boolean'];
  /** Name of the app. */
  title: Scalars['String'];
  /**
   * Message that appears when the app is uninstalled. For example:
   * By removing this app, you will no longer be able to publish products to MySocialSite or view this app in your Shopify admin. You can re-enable this channel at any time.
   */
  uninstallMessage: Scalars['String'];
  /**
   * Webpage where you can uninstall the app.
   * @deprecated Use AppInstallation.uninstallUrl instead
   */
  uninstallUrl?: Maybe<Scalars['Url']>;
};

/** Requirements that must be met before an app can be installed. */
export type Shopify_FailedRequirement = {
  __typename?: 'Shopify_FailedRequirement';
  /** Action to be taken to resolve a failed requirement, including URL link. */
  action?: Maybe<Shopify_NavigationItem>;
  /**
   * A concise set of copy strings to be displayed to merchants, to guide them in resolving problems your app
   * encounters when trying to make use of their Shop and its resources.
   */
  message: Scalars['String'];
};

/** A navigation item, holding basic link attributes. */
export type Shopify_NavigationItem = {
  __typename?: 'Shopify_NavigationItem';
  /** The unique identifier of the navigation item. */
  id: Scalars['String'];
  /** The name of the navigation item. */
  title: Scalars['String'];
  /** The URL of the page that the navigation item links to. */
  url: Scalars['Url'];
};

/** Represents an installed application on a shop. */
export type Shopify_AppInstallation = {
  __typename?: 'Shopify_AppInstallation';
  /** The access scopes granted to the application by a merchant during installation. */
  accessScopes: Array<Shopify_AccessScope>;
  /** The active application subscriptions billed to the shop on a recurring basis. */
  activeSubscriptions: Array<Shopify_AppSubscription>;
  /** All subscriptions created for a shop. */
  allSubscriptions: Shopify_AppSubscriptionConnection;
  /** Application which is installed. */
  app: Shopify_App;
  /**
   * Channel associated with the installed application.
   * @deprecated Use `publication` instead
   */
  channel?: Maybe<Shopify_Channel>;
  /** Credits that can be used towards future app purchases. */
  credits: Shopify_AppCreditConnection;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The URL to launch the application. */
  launchUrl: Scalars['Url'];
  /** One-time purchases to a shop. */
  oneTimePurchases: Shopify_AppPurchaseOneTimeConnection;
  /** The publication associated with the installed application. */
  publication?: Maybe<Shopify_Publication>;
  /** The records that track the externally-captured revenue for the app. The records are used for revenue attribution purposes. */
  revenueAttributionRecords: Shopify_AppRevenueAttributionRecordConnection;
  /**
   * Subscriptions charge to a shop on a recurring basis.
   * @deprecated Use `activeSubscriptions` instead
   */
  subscriptions: Array<Shopify_AppSubscription>;
  /** The URL to uninstall the application. */
  uninstallUrl?: Maybe<Scalars['Url']>;
};


/** Represents an installed application on a shop. */
export type Shopify_AppInstallationAllSubscriptionsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_AppSubscriptionSortKeys>;
};


/** Represents an installed application on a shop. */
export type Shopify_AppInstallationCreditsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_AppTransactionSortKeys>;
};


/** Represents an installed application on a shop. */
export type Shopify_AppInstallationOneTimePurchasesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_AppTransactionSortKeys>;
};


/** Represents an installed application on a shop. */
export type Shopify_AppInstallationRevenueAttributionRecordsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_AppRevenueAttributionRecordSortKeys>;
};

/** The permission required to access a Shopify Admin API or Storefront API resource for a shop. Merchants grant access scopes that are requested by applications. */
export type Shopify_AccessScope = {
  __typename?: 'Shopify_AccessScope';
  /** A description of the actions that the access scope allows an app to perform. */
  description: Scalars['String'];
  /** A readable string that represents the access scope. The string usually follows the format `{action}_{resource}`. `{action}` is `read` or `write`, and `{resource}` is the resource that the action can be performed on. `{action}` and `{resource}` are separated by an underscore. For example, `read_orders` or `write_products`. */
  handle: Scalars['String'];
};

/** Provides users access to services and/or features for a duration of time. */
export type Shopify_AppSubscription = {
  __typename?: 'Shopify_AppSubscription';
  /** The date and time when the app subscription was created. */
  createdAt: Scalars['DateTime'];
  /** The date and time when the current app subscription period ends. */
  currentPeriodEnd?: Maybe<Scalars['DateTime']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The plans attached to the app subscription. */
  lineItems: Array<Shopify_AppSubscriptionLineItem>;
  /** The name of the app subscription. */
  name: Scalars['String'];
  /** The URL that the merchant is redirected to after approving the app subscription. */
  returnUrl: Scalars['Url'];
  /** The status of the app subscription. */
  status: Shopify_AppSubscriptionStatus;
  /** Specifies whether the app subscription is a test transaction. */
  test: Scalars['Boolean'];
  /** The number of free trial days, starting at the subscription's creation date, by which billing is delayed. */
  trialDays: Scalars['Int'];
};

/** The plan attached to an app subscription. */
export type Shopify_AppSubscriptionLineItem = {
  __typename?: 'Shopify_AppSubscriptionLineItem';
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The pricing model for the app subscription. */
  plan: Shopify_AppPlanV2;
  /** A list of the store's usage records for a usage pricing plan. */
  usageRecords: Shopify_AppUsageRecordConnection;
};


/** The plan attached to an app subscription. */
export type Shopify_AppSubscriptionLineItemUsageRecordsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_AppUsageRecordSortKeys>;
};

/** The app plan that the merchant is subscribed to. */
export type Shopify_AppPlanV2 = {
  __typename?: 'Shopify_AppPlanV2';
  /** The plan billed to a shop on a recurring basis. */
  pricingDetails: Shopify_AppPricingDetails;
};

/**
 * The information about the price that's charged to a shop every plan period.
 * The concrete type can be `AppRecurringPricing` for recurring billing or `AppUsagePricing` for usage-based billing.
 */
export type Shopify_AppPricingDetails = Shopify_AppRecurringPricing | Shopify_AppUsagePricing;

/**
 * The pricing information about a subscription app.
 * The object contains an interval (the frequency at which the shop is billed for an app subscription) and
 * a price (the amount to be charged to the subscribing shop at each interval).
 */
export type Shopify_AppRecurringPricing = {
  __typename?: 'Shopify_AppRecurringPricing';
  /** The frequency at which the subscribing shop is billed for an app subscription. */
  interval: Shopify_AppPricingInterval;
  /** The amount and currency to be charged to the subscribing shop every billing interval. */
  price: Shopify_MoneyV2;
};

export enum Shopify_AppPricingInterval {
  Annual = 'ANNUAL',
  Every_30Days = 'EVERY_30_DAYS'
}

/**
 * Defines a usage pricing model for the app subscription.
 * These charges are variable based on how much the merchant uses the app.
 */
export type Shopify_AppUsagePricing = {
  __typename?: 'Shopify_AppUsagePricing';
  /** The total usage records for interval. */
  balanceUsed: Shopify_MoneyV2;
  /**
   * The capped amount prevents the merchant from being charged for any usage over that amount during a billing period.
   * This prevents billing from exceeding a maximum threshold over the duration of the billing period.
   * For the merchant to continue using the app after exceeding a capped amount, they would need to agree to a new usage charge.
   */
  cappedAmount: Shopify_MoneyV2;
  /** The frequency with which the app usage records are billed. */
  interval: Shopify_AppPricingInterval;
  /**
   * The terms and conditions for app usage pricing.
   * Must be present in order to create usage charges.
   * The terms are presented to the merchant when they approve an app's usage charges.
   */
  terms: Scalars['String'];
};

/** An auto-generated type for paginating through multiple AppUsageRecords. */
export type Shopify_AppUsageRecordConnection = {
  __typename?: 'Shopify_AppUsageRecordConnection';
  /** A list of edges. */
  edges: Array<Shopify_AppUsageRecordEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one AppUsageRecord and a cursor during pagination. */
export type Shopify_AppUsageRecordEdge = {
  __typename?: 'Shopify_AppUsageRecordEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of AppUsageRecordEdge. */
  node: Shopify_AppUsageRecord;
};

/** Store usage for app subscriptions with usage pricing. */
export type Shopify_AppUsageRecord = {
  __typename?: 'Shopify_AppUsageRecord';
  /** The date and time when the usage record was created. */
  createdAt: Scalars['DateTime'];
  /** The description of the app usage record. */
  description: Scalars['String'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The price of the usage record. The only permitted currency code is USD. */
  price: Shopify_MoneyV2;
  /** Defines the usage pricing plan the merchant is subscribed to. */
  subscriptionLineItem: Shopify_AppSubscriptionLineItem;
};

export enum Shopify_AppUsageRecordSortKeys {
  CreatedAt = 'CREATED_AT',
  Id = 'ID',
  Relevance = 'RELEVANCE'
}

export enum Shopify_AppSubscriptionStatus {
  Pending = 'PENDING',
  Accepted = 'ACCEPTED',
  Active = 'ACTIVE',
  Declined = 'DECLINED',
  Expired = 'EXPIRED',
  Frozen = 'FROZEN',
  Cancelled = 'CANCELLED'
}

/** An auto-generated type for paginating through multiple AppSubscriptions. */
export type Shopify_AppSubscriptionConnection = {
  __typename?: 'Shopify_AppSubscriptionConnection';
  /** A list of edges. */
  edges: Array<Shopify_AppSubscriptionEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one AppSubscription and a cursor during pagination. */
export type Shopify_AppSubscriptionEdge = {
  __typename?: 'Shopify_AppSubscriptionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of AppSubscriptionEdge. */
  node: Shopify_AppSubscription;
};

export enum Shopify_AppSubscriptionSortKeys {
  CreatedAt = 'CREATED_AT',
  Id = 'ID',
  Relevance = 'RELEVANCE'
}

/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 */
export type Shopify_Channel = {
  __typename?: 'Shopify_Channel';
  /** Underlying app used by the channel. */
  app: Shopify_App;
  /** The collection publications for the list of collections published to the channel. */
  collectionPublicationsV3: Shopify_ResourcePublicationConnection;
  /** The list of collections published to the channel. */
  collections: Shopify_CollectionConnection;
  /**
   * Unique identifier for the channel.
   * @deprecated Use `id` instead
   */
  handle: Scalars['String'];
  /** Whether the collection is available to the channel. */
  hasCollection: Scalars['Boolean'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** Name of the channel. */
  name: Scalars['String'];
  /**
   * Menu items for the channel, which also appear as submenu items in left navigation sidebar in the Shopify admin.
   * @deprecated Use App.navigationItems instead
   */
  navigationItems: Array<Shopify_NavigationItem>;
  /**
   * Home page for the channel.
   * @deprecated Use App.launchUrl instead
   */
  overviewPath?: Maybe<Scalars['Url']>;
  /** The product publications for the list of products published to the channel. */
  productPublicationsV3: Shopify_ResourcePublicationConnection;
  /** The list of products published to the channel. */
  products: Shopify_ProductConnection;
  /** Whether or not this channel supports future publishing. */
  supportsFuturePublishing: Scalars['Boolean'];
};


/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 */
export type Shopify_ChannelCollectionPublicationsV3Args = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 */
export type Shopify_ChannelCollectionsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 */
export type Shopify_ChannelHasCollectionArgs = {
  id: Scalars['ID'];
};


/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 */
export type Shopify_ChannelProductPublicationsV3Args = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 */
export type Shopify_ChannelProductsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** An auto-generated type for paginating through multiple ResourcePublications. */
export type Shopify_ResourcePublicationConnection = {
  __typename?: 'Shopify_ResourcePublicationConnection';
  /** A list of edges. */
  edges: Array<Shopify_ResourcePublicationEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one ResourcePublication and a cursor during pagination. */
export type Shopify_ResourcePublicationEdge = {
  __typename?: 'Shopify_ResourcePublicationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of ResourcePublicationEdge. */
  node: Shopify_ResourcePublication;
};

/** A resource publication represents that a resource has been published to a publication. */
export type Shopify_ResourcePublication = {
  __typename?: 'Shopify_ResourcePublication';
  /**
   * The channel the resource publication is published to.
   * @deprecated Use `publication` instead
   */
  channel: Shopify_Channel;
  /**
   * Whether the resource publication is published. Also returns true if the resource publication is scheduled to be published.
   * If false, then the resource publication is neither published nor scheduled to be published.
   */
  isPublished: Scalars['Boolean'];
  /** The publication the resource publication is published to. */
  publication: Shopify_Publication;
  /** The date that the resource publication was or is going to be published to the publication. */
  publishDate: Scalars['DateTime'];
  /** The resource published to the publication. */
  publishable: Shopify_Publishable;
};

/** A publication is a group of products and collections that is published to an app. */
export type Shopify_Publication = {
  __typename?: 'Shopify_Publication';
  /** The app associated with the publication. */
  app: Shopify_App;
  /** The collection publications for the list of collections published to the publication. */
  collectionPublicationsV3: Shopify_ResourcePublicationConnection;
  /** The list of collections published to the publication. */
  collections: Shopify_CollectionConnection;
  /** Whether the collection is available to the publication. */
  hasCollection: Scalars['Boolean'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** Name of the publication. */
  name: Scalars['String'];
  /** The product publications for the list of products published to the publication. */
  productPublicationsV3: Shopify_ResourcePublicationConnection;
  /** The list of products published to the publication. */
  products: Shopify_ProductConnection;
  /** Whether or not this publication supports future publishing. */
  supportsFuturePublishing: Scalars['Boolean'];
};


/** A publication is a group of products and collections that is published to an app. */
export type Shopify_PublicationCollectionPublicationsV3Args = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** A publication is a group of products and collections that is published to an app. */
export type Shopify_PublicationCollectionsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** A publication is a group of products and collections that is published to an app. */
export type Shopify_PublicationHasCollectionArgs = {
  id: Scalars['ID'];
};


/** A publication is a group of products and collections that is published to an app. */
export type Shopify_PublicationProductPublicationsV3Args = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** A publication is a group of products and collections that is published to an app. */
export type Shopify_PublicationProductsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** An auto-generated type for paginating through multiple Products. */
export type Shopify_ProductConnection = {
  __typename?: 'Shopify_ProductConnection';
  /** A list of edges. */
  edges: Array<Shopify_ProductEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one Product and a cursor during pagination. */
export type Shopify_ProductEdge = {
  __typename?: 'Shopify_ProductEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of ProductEdge. */
  node: Shopify_Product;
};

/**
 * Represents a resource that can be published to a channel.
 * A publishable resource can be either a Product or Collection.
 */
export type Shopify_Publishable = {
  __typename?: 'Shopify_Publishable';
  /**
   * Check to see whether the resource is published to a given channel.
   * @deprecated Use `publishedOnPublication` instead
   */
  publishedOnChannel: Scalars['Boolean'];
  /** Check to see whether the resource is published to a given publication. */
  publishedOnPublication: Scalars['Boolean'];
};


/**
 * Represents a resource that can be published to a channel.
 * A publishable resource can be either a Product or Collection.
 */
export type Shopify_PublishablePublishedOnChannelArgs = {
  channelId: Scalars['ID'];
};


/**
 * Represents a resource that can be published to a channel.
 * A publishable resource can be either a Product or Collection.
 */
export type Shopify_PublishablePublishedOnPublicationArgs = {
  publicationId: Scalars['ID'];
};

/** An auto-generated type for paginating through multiple AppCredits. */
export type Shopify_AppCreditConnection = {
  __typename?: 'Shopify_AppCreditConnection';
  /** A list of edges. */
  edges: Array<Shopify_AppCreditEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one AppCredit and a cursor during pagination. */
export type Shopify_AppCreditEdge = {
  __typename?: 'Shopify_AppCreditEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of AppCreditEdge. */
  node: Shopify_AppCredit;
};

/** App credits can be applied by the merchant towards future app purchases, subscriptions, or usage records in Shopify. */
export type Shopify_AppCredit = {
  __typename?: 'Shopify_AppCredit';
  /** The amount that can be used towards future app purchases in Shopify. */
  amount: Shopify_MoneyV2;
  /** The date and time when the app credit was created. */
  createdAt: Scalars['DateTime'];
  /** The description of the app credit. */
  description: Scalars['String'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** Whether the app credit is a test transaction. */
  test: Scalars['Boolean'];
};

export enum Shopify_AppTransactionSortKeys {
  CreatedAt = 'CREATED_AT',
  Id = 'ID',
  Relevance = 'RELEVANCE'
}

/** An auto-generated type for paginating through multiple AppPurchaseOneTimes. */
export type Shopify_AppPurchaseOneTimeConnection = {
  __typename?: 'Shopify_AppPurchaseOneTimeConnection';
  /** A list of edges. */
  edges: Array<Shopify_AppPurchaseOneTimeEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one AppPurchaseOneTime and a cursor during pagination. */
export type Shopify_AppPurchaseOneTimeEdge = {
  __typename?: 'Shopify_AppPurchaseOneTimeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of AppPurchaseOneTimeEdge. */
  node: Shopify_AppPurchaseOneTime;
};

/** Services and features purchased once by a store. */
export type Shopify_AppPurchaseOneTime = {
  __typename?: 'Shopify_AppPurchaseOneTime';
  /** The date and time when the app purchase occurred. */
  createdAt: Scalars['DateTime'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The name of the app purchase. */
  name: Scalars['String'];
  /** The amount to be charged to the store for the app purchase. */
  price: Shopify_MoneyV2;
  /** The status of the app purchase. */
  status: Shopify_AppPurchaseStatus;
  /** Whether the app purchase is a test transaction. */
  test: Scalars['Boolean'];
};

export enum Shopify_AppPurchaseStatus {
  Accepted = 'ACCEPTED',
  Active = 'ACTIVE',
  Declined = 'DECLINED',
  Expired = 'EXPIRED',
  Pending = 'PENDING'
}

/** An auto-generated type for paginating through multiple AppRevenueAttributionRecords. */
export type Shopify_AppRevenueAttributionRecordConnection = {
  __typename?: 'Shopify_AppRevenueAttributionRecordConnection';
  /** A list of edges. */
  edges: Array<Shopify_AppRevenueAttributionRecordEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one AppRevenueAttributionRecord and a cursor during pagination. */
export type Shopify_AppRevenueAttributionRecordEdge = {
  __typename?: 'Shopify_AppRevenueAttributionRecordEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of AppRevenueAttributionRecordEdge. */
  node: Shopify_AppRevenueAttributionRecord;
};

/** Represents app revenue that was captured externally by the partner. */
export type Shopify_AppRevenueAttributionRecord = {
  __typename?: 'Shopify_AppRevenueAttributionRecord';
  /** The financial amount captured in this attribution. */
  amount: Shopify_MoneyV2;
  /** The timestamp when the financial amount was captured. */
  capturedAt: Scalars['DateTime'];
  /** The timestamp at which this revenue attribution was issued. */
  createdAt: Scalars['DateTime'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /**
   * The unique value submitted during the creation of the app revenue attribution record.
   * For more information, refer to
   * [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
   */
  idempotencyKey: Scalars['String'];
  /** Indicates whether this is a test submission. */
  test: Scalars['Boolean'];
  /** The type of revenue attribution. */
  type: Shopify_AppRevenueAttributionType;
};

export enum Shopify_AppRevenueAttributionType {
  ApplicationPurchase = 'APPLICATION_PURCHASE',
  ApplicationSubscription = 'APPLICATION_SUBSCRIPTION',
  ApplicationUsage = 'APPLICATION_USAGE',
  Other = 'OTHER'
}

export enum Shopify_AppRevenueAttributionRecordSortKeys {
  CreatedAt = 'CREATED_AT',
  Id = 'ID',
  Relevance = 'RELEVANCE'
}

/** A link to direct users to. */
export type Shopify_Link = {
  __typename?: 'Shopify_Link';
  /** A context-sensitive label for the link. */
  label: Scalars['String'];
  /** The translations associated with the resource. */
  translations: Array<Shopify_PublishedTranslation>;
  /** The URL that the link visits. */
  url: Scalars['Url'];
};


/** A link to direct users to. */
export type Shopify_LinkTranslationsArgs = {
  locale: Scalars['String'];
};

/** Represents an error in the input of a mutation. */
export type Shopify_UserError = {
  __typename?: 'Shopify_UserError';
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The error message. */
  message: Scalars['String'];
};

export enum Shopify_CropRegion {
  Center = 'CENTER',
  Top = 'TOP',
  Bottom = 'BOTTOM',
  Left = 'LEFT',
  Right = 'RIGHT'
}

/** An auto-generated type for paginating through multiple MetafieldDefinitions. */
export type Shopify_MetafieldDefinitionConnection = {
  __typename?: 'Shopify_MetafieldDefinitionConnection';
  /** A list of edges. */
  edges: Array<Shopify_MetafieldDefinitionEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one MetafieldDefinition and a cursor during pagination. */
export type Shopify_MetafieldDefinitionEdge = {
  __typename?: 'Shopify_MetafieldDefinitionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of MetafieldDefinitionEdge. */
  node: Shopify_MetafieldDefinition;
};

export enum Shopify_MetafieldDefinitionPinnedStatus {
  Any = 'ANY',
  Pinned = 'PINNED',
  Unpinned = 'UNPINNED'
}

export enum Shopify_MetafieldDefinitionSortKeys {
  Id = 'ID',
  Name = 'NAME',
  PinnedPosition = 'PINNED_POSITION',
  Relevance = 'RELEVANCE'
}

export enum Shopify_ProductCollectionSortKeys {
  Title = 'TITLE',
  Price = 'PRICE',
  BestSelling = 'BEST_SELLING',
  Created = 'CREATED',
  Id = 'ID',
  Manual = 'MANUAL',
  CollectionDefault = 'COLLECTION_DEFAULT',
  Relevance = 'RELEVANCE'
}

/** The set of rules that are used to determine which products are included in the collection. */
export type Shopify_CollectionRuleSet = {
  __typename?: 'Shopify_CollectionRuleSet';
  /**
   * Whether products must match any or all of the rules to be included in the collection.
   * If true, then products must match one or more of the rules to be included in the collection.
   * If false, then products must match all of the rules to be included in the collection.
   */
  appliedDisjunctively: Scalars['Boolean'];
  /** The rules used to assign products to the collection. */
  rules: Array<Shopify_CollectionRule>;
};

/** Represents at rule that's used to assign products to a collection. */
export type Shopify_CollectionRule = {
  __typename?: 'Shopify_CollectionRule';
  /** The attribute that the rule focuses on (for example, `title` or `product_type`). */
  column: Shopify_CollectionRuleColumn;
  /** The value that the operator is applied to (for example, `Hats`). */
  condition: Scalars['String'];
  /** The type of operator that the rule is based on (for example, `equals`, `contains`, or `not_equals`). */
  relation: Shopify_CollectionRuleRelation;
};

export enum Shopify_CollectionRuleColumn {
  Tag = 'TAG',
  Title = 'TITLE',
  Type = 'TYPE',
  Vendor = 'VENDOR',
  VariantPrice = 'VARIANT_PRICE',
  IsPriceReduced = 'IS_PRICE_REDUCED',
  VariantCompareAtPrice = 'VARIANT_COMPARE_AT_PRICE',
  VariantWeight = 'VARIANT_WEIGHT',
  VariantInventory = 'VARIANT_INVENTORY',
  VariantTitle = 'VARIANT_TITLE'
}

export enum Shopify_CollectionRuleRelation {
  Contains = 'CONTAINS',
  EndsWith = 'ENDS_WITH',
  Equals = 'EQUALS',
  GreaterThan = 'GREATER_THAN',
  IsNotSet = 'IS_NOT_SET',
  IsSet = 'IS_SET',
  LessThan = 'LESS_THAN',
  NotContains = 'NOT_CONTAINS',
  NotEquals = 'NOT_EQUALS',
  StartsWith = 'STARTS_WITH'
}

/** SEO information. */
export type Shopify_Seo = {
  __typename?: 'Shopify_SEO';
  /** SEO Description. */
  description?: Maybe<Scalars['String']>;
  /** SEO Title. */
  title?: Maybe<Scalars['String']>;
};

export enum Shopify_CollectionSortOrder {
  AlphaAsc = 'ALPHA_ASC',
  AlphaDesc = 'ALPHA_DESC',
  BestSelling = 'BEST_SELLING',
  Created = 'CREATED',
  CreatedDesc = 'CREATED_DESC',
  Manual = 'MANUAL',
  PriceAsc = 'PRICE_ASC',
  PriceDesc = 'PRICE_DESC'
}

export enum Shopify_CollectionSortKeys {
  Title = 'TITLE',
  UpdatedAt = 'UPDATED_AT',
  Id = 'ID',
  Relevance = 'RELEVANCE'
}

/**
 * The price of a product in a specific country.
 * Prices vary between countries.
 */
export type Shopify_ProductContextualPricing = {
  __typename?: 'Shopify_ProductContextualPricing';
  /** The pricing of the variant with the highest price in the given context. */
  maxVariantPricing?: Maybe<Shopify_ProductVariantContextualPricing>;
  /** The pricing of the variant with the lowest price in the given context. */
  minVariantPricing?: Maybe<Shopify_ProductVariantContextualPricing>;
  /** The price range of the product with prices formatted as decimals. */
  priceRange: Shopify_ProductPriceRangeV2;
};

/**
 * The price of a product variant in a specific country.
 * Prices vary between countries.
 */
export type Shopify_ProductVariantContextualPricing = {
  __typename?: 'Shopify_ProductVariantContextualPricing';
  /** The final compare-at price after all adjustments are applied. */
  compareAtPrice?: Maybe<Shopify_MoneyV2>;
  /** The final price after all adjustments are applied. */
  price: Shopify_MoneyV2;
};

/** The price range of the product. */
export type Shopify_ProductPriceRangeV2 = {
  __typename?: 'Shopify_ProductPriceRangeV2';
  /** The highest variant's price. */
  maxVariantPrice: Shopify_MoneyV2;
  /** The lowest variant's price. */
  minVariantPrice: Shopify_MoneyV2;
};

/** The context data that determines the pricing of a variant. */
export type Shopify_ContextualPricingContextInput = {
  /** The country code used to fetch country-specific prices. */
  country?: InputMaybe<Shopify_CountryCode>;
};

/** Represents a media interface. */
export type Shopify_Media = {
  __typename?: 'Shopify_Media';
  /** A word or phrase to share the nature or contents of a media. */
  alt?: Maybe<Scalars['String']>;
  /** The media content type. */
  mediaContentType: Shopify_MediaContentType;
  /** Any errors which have occurred on the media. */
  mediaErrors: Array<Shopify_MediaError>;
  /** The warnings attached to the media. */
  mediaWarnings: Array<Shopify_MediaWarning>;
  /** The preview image for the media. */
  preview?: Maybe<Shopify_MediaPreviewImage>;
  /** Current status of the media. */
  status: Shopify_MediaStatus;
};

/** An auto-generated type for paginating through multiple Images. */
export type Shopify_ImageConnection = {
  __typename?: 'Shopify_ImageConnection';
  /** A list of edges. */
  edges: Array<Shopify_ImageEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one Image and a cursor during pagination. */
export type Shopify_ImageEdge = {
  __typename?: 'Shopify_ImageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of ImageEdge. */
  node: Shopify_Image;
};

export enum Shopify_ProductImageSortKeys {
  CreatedAt = 'CREATED_AT',
  Position = 'POSITION',
  Id = 'ID',
  Relevance = 'RELEVANCE'
}

/** An auto-generated type for paginating through multiple Media. */
export type Shopify_MediaConnection = {
  __typename?: 'Shopify_MediaConnection';
  /** A list of edges. */
  edges: Array<Shopify_MediaEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one Media and a cursor during pagination. */
export type Shopify_MediaEdge = {
  __typename?: 'Shopify_MediaEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of MediaEdge. */
  node: Shopify_Media;
};

export enum Shopify_ProductMediaSortKeys {
  Position = 'POSITION',
  Id = 'ID',
  Relevance = 'RELEVANCE'
}

/**
 * Product property names like "Size", "Color", and "Material".
 * Variants are selected based on permutations of these options.
 * 255 characters limit each.
 */
export type Shopify_ProductOption = {
  __typename?: 'Shopify_ProductOption';
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The product optionâ€™s name. */
  name: Scalars['String'];
  /** The product option's position. */
  position: Scalars['Int'];
  /** The translations associated with the resource. */
  translations: Array<Shopify_PublishedTranslation>;
  /** The corresponding value to the product option name. */
  values: Array<Scalars['String']>;
};


/**
 * Product property names like "Size", "Color", and "Material".
 * Variants are selected based on permutations of these options.
 * 255 characters limit each.
 */
export type Shopify_ProductOptionTranslationsArgs = {
  locale: Scalars['String'];
};

/** The price range of the product. */
export type Shopify_ProductPriceRange = {
  __typename?: 'Shopify_ProductPriceRange';
  /** The highest variant's price. */
  maxVariantPrice: Shopify_MoneyV2;
  /** The lowest variant's price. */
  minVariantPrice: Shopify_MoneyV2;
};

/** A resource publication represents that a resource either has been published or will be published to a publication. */
export type Shopify_ResourcePublicationV2 = {
  __typename?: 'Shopify_ResourcePublicationV2';
  /**
   * Whether the resource publication is published. If true, then the resource publication is published to the publication.
   * If false, then the resource publication is staged to be published to the publication.
   */
  isPublished: Scalars['Boolean'];
  /** The publication the resource publication is published to. */
  publication: Shopify_Publication;
  /** The date that the resource publication was or is going to be published to the publication. */
  publishDate?: Maybe<Scalars['DateTime']>;
  /** The resource published to the publication. */
  publishable: Shopify_Publishable;
};

/** An auto-generated type for paginating through multiple SellingPlanGroups. */
export type Shopify_SellingPlanGroupConnection = {
  __typename?: 'Shopify_SellingPlanGroupConnection';
  /** A list of edges. */
  edges: Array<Shopify_SellingPlanGroupEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one SellingPlanGroup and a cursor during pagination. */
export type Shopify_SellingPlanGroupEdge = {
  __typename?: 'Shopify_SellingPlanGroupEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of SellingPlanGroupEdge. */
  node: Shopify_SellingPlanGroup;
};

/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export type Shopify_SellingPlanGroup = {
  __typename?: 'Shopify_SellingPlanGroup';
  /** The identifier for app, exposed in Liquid and product JSON. */
  appId?: Maybe<Scalars['String']>;
  /** Whether the given product is directly associated to the selling plan group. */
  appliesToProduct: Scalars['Boolean'];
  /** Whether the given product variant is directly associated to the selling plan group. */
  appliesToProductVariant: Scalars['Boolean'];
  /** Whether any of the product variants of the given product are associated to the selling plan group. */
  appliesToProductVariants: Scalars['Boolean'];
  /** The date and time when the selling plan group was created. */
  createdAt: Scalars['DateTime'];
  /** The merchant-facing description of the selling plan group. */
  description?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The merchant-facing label of the selling plan group. */
  merchantCode: Scalars['String'];
  /** The buyer-facing label of the selling plan group. */
  name: Scalars['String'];
  /** The values of all options available on the selling plan group. Selling plans are grouped together in Liquid when they are created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values. */
  options: Array<Scalars['String']>;
  /** The relative position of the selling plan group for display. */
  position?: Maybe<Scalars['Int']>;
  /** A count of products associated to the selling plan group. */
  productCount: Scalars['Int'];
  /** A count of product variants associated to the selling plan group. */
  productVariantCount: Scalars['Int'];
  /** Product variants associated to the selling plan group. */
  productVariants: Shopify_ProductVariantConnection;
  /** Products associated to the selling plan group. */
  products: Shopify_ProductConnection;
  /** Selling plans associated to the selling plan group. */
  sellingPlans: Shopify_SellingPlanConnection;
  /** A summary of the policies associated to the selling plan group. */
  summary?: Maybe<Scalars['String']>;
};


/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export type Shopify_SellingPlanGroupAppliesToProductArgs = {
  productId: Scalars['ID'];
};


/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export type Shopify_SellingPlanGroupAppliesToProductVariantArgs = {
  productVariantId: Scalars['ID'];
};


/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export type Shopify_SellingPlanGroupAppliesToProductVariantsArgs = {
  productId: Scalars['ID'];
};


/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export type Shopify_SellingPlanGroupProductVariantCountArgs = {
  productId?: InputMaybe<Scalars['ID']>;
};


/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export type Shopify_SellingPlanGroupProductVariantsArgs = {
  productId?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export type Shopify_SellingPlanGroupProductsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export type Shopify_SellingPlanGroupSellingPlansArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** An auto-generated type for paginating through multiple ProductVariants. */
export type Shopify_ProductVariantConnection = {
  __typename?: 'Shopify_ProductVariantConnection';
  /** A list of edges. */
  edges: Array<Shopify_ProductVariantEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one ProductVariant and a cursor during pagination. */
export type Shopify_ProductVariantEdge = {
  __typename?: 'Shopify_ProductVariantEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of ProductVariantEdge. */
  node: Shopify_ProductVariant;
};

/** Represents a product variant. */
export type Shopify_ProductVariant = {
  __typename?: 'Shopify_ProductVariant';
  /** Whether the product variant is available for sale. */
  availableForSale: Scalars['Boolean'];
  /** The value of the barcode associated with the product. */
  barcode?: Maybe<Scalars['String']>;
  /** The compare-at price of the variant in the default shop currency. */
  compareAtPrice?: Maybe<Scalars['Money']>;
  /** The pricing that applies for a customer in a given context. */
  contextualPricing: Shopify_ProductVariantContextualPricing;
  /** The date and time when the variant was created. */
  createdAt: Scalars['DateTime'];
  /** A default cursor that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars['String'];
  /** The delivery profile for the variant. */
  deliveryProfile?: Maybe<Shopify_DeliveryProfile>;
  /** Display name of the variant, based on product's title + variant's title. */
  displayName: Scalars['String'];
  /** The fulfillment service associated with the product. */
  fulfillmentService?: Maybe<Shopify_FulfillmentService>;
  /** Whether changes to the fulfillment service for the product variant are allowed. */
  fulfillmentServiceEditable: Shopify_EditableProperty;
  /**
   * The Harmonized System Code (or HS Tariff Code) for the variant.
   * @deprecated Use `InventoryItem.harmonizedSystemCode` instead.
   */
  harmonizedSystemCode?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The featured image for the variant. */
  image?: Maybe<Shopify_Image>;
  /** The inventory item, which is used to query for inventory information. */
  inventoryItem: Shopify_InventoryItem;
  /**
   * The fulfillment service that tracks the number of items in stock for the product variant.
   * @deprecated Use tracked attribute on `inventoryItem` instead.
   */
  inventoryManagement: Shopify_ProductVariantInventoryManagement;
  /** Whether customers are allowed to place an order for the product variant when it's out of stock. */
  inventoryPolicy: Shopify_ProductVariantInventoryPolicy;
  /** The total sellable quantity of the variant. */
  inventoryQuantity?: Maybe<Scalars['Int']>;
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['UnsignedInt64'];
  /** The media associated with the product variant. */
  media: Shopify_MediaConnection;
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafield definitions. */
  metafieldDefinitions: Shopify_MetafieldDefinitionConnection;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /** The order of the product variant in the list of product variants. The first position in the list is 1. */
  position: Scalars['Int'];
  /** List of prices and compare-at prices in the presentment currencies for this shop. */
  presentmentPrices: Shopify_ProductVariantPricePairConnection;
  /** The price of the product variant in the default shop currency. */
  price: Scalars['Money'];
  /** Returns a private metafield by namespace and key that belongs to the resource. */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /** List of private metafields that belong to the resource. */
  privateMetafields: Shopify_PrivateMetafieldConnection;
  /** The product that this variant belongs to. */
  product: Shopify_Product;
  /**
   * Whether a customer needs to provide a shipping address when placing an order for the product variant.
   * @deprecated Use `InventoryItem.requiresShipping` instead.
   */
  requiresShipping: Scalars['Boolean'];
  /** List of product options applied to the variant. */
  selectedOptions: Array<Shopify_SelectedOption>;
  /**
   * The total sellable quantity of the variant for online channels.
   * This doesn't represent the total available inventory or capture
   * [limitations based on customer location](https://help.shopify.com/manual/markets/inventory_and_fulfillment).
   */
  sellableOnlineQuantity: Scalars['Int'];
  /** Count of selling plan groups associated with the product variant. */
  sellingPlanGroupCount: Scalars['Int'];
  /** A list of all selling plan groups defined in the current shop associated with the product variant. */
  sellingPlanGroups: Shopify_SellingPlanGroupConnection;
  /** An identifier for the product variant in the shop. Required in order to connect to a fulfillment service. */
  sku?: Maybe<Scalars['String']>;
  /**
   * The Storefront GraphQL API ID of the `ProductVariant`.
   *
   * As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
   * @deprecated Use `id` instead
   */
  storefrontId: Scalars['StorefrontId'];
  /** The tax code for the product variant. */
  taxCode?: Maybe<Scalars['String']>;
  /** Whether a tax is charged when the product variant is sold. */
  taxable: Scalars['Boolean'];
  /** The title of the product variant. */
  title: Scalars['String'];
  /** The translations associated with the resource. */
  translations: Array<Shopify_PublishedTranslation>;
  /** The date and time (ISO 8601 format) when the product variant was last modified. */
  updatedAt: Scalars['DateTime'];
  /** The weight of the product variant in the unit system specified with weight_unit. */
  weight?: Maybe<Scalars['Float']>;
  /** The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: `g`, `kg`, `oz`, `lb`. */
  weightUnit: Shopify_WeightUnit;
};


/** Represents a product variant. */
export type Shopify_ProductVariantContextualPricingArgs = {
  context: Shopify_ContextualPricingContextInput;
};


/** Represents a product variant. */
export type Shopify_ProductVariantImageArgs = {
  maxWidth?: InputMaybe<Scalars['Int']>;
  maxHeight?: InputMaybe<Scalars['Int']>;
  crop?: InputMaybe<Shopify_CropRegion>;
  scale?: InputMaybe<Scalars['Int']>;
};


/** Represents a product variant. */
export type Shopify_ProductVariantMediaArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** Represents a product variant. */
export type Shopify_ProductVariantMetafieldArgs = {
  namespace: Scalars['String'];
  key: Scalars['String'];
};


/** Represents a product variant. */
export type Shopify_ProductVariantMetafieldDefinitionsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  pinnedStatus?: InputMaybe<Shopify_MetafieldDefinitionPinnedStatus>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_MetafieldDefinitionSortKeys>;
  query?: InputMaybe<Scalars['String']>;
};


/** Represents a product variant. */
export type Shopify_ProductVariantMetafieldsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** Represents a product variant. */
export type Shopify_ProductVariantPresentmentPricesArgs = {
  presentmentCurrencies?: InputMaybe<Array<InputMaybe<Shopify_CurrencyCode>>>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** Represents a product variant. */
export type Shopify_ProductVariantPrivateMetafieldArgs = {
  namespace: Scalars['String'];
  key: Scalars['String'];
};


/** Represents a product variant. */
export type Shopify_ProductVariantPrivateMetafieldsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** Represents a product variant. */
export type Shopify_ProductVariantSellingPlanGroupsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** Represents a product variant. */
export type Shopify_ProductVariantTranslationsArgs = {
  locale: Scalars['String'];
};

/** A shipping profile. In Shopify, a shipping profile is a set of shipping rates scoped to a set of products or variants that can be shipped from selected locations to zones. */
export type Shopify_DeliveryProfile = {
  __typename?: 'Shopify_DeliveryProfile';
  /** The number of active shipping rates for the profile. */
  activeMethodDefinitionsCount: Scalars['Int'];
  /** Whether this is the default profile. */
  default: Scalars['Boolean'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** Whether this shop has enabled legacy compatibility mode for delivery profiles. */
  legacyMode: Scalars['Boolean'];
  /** The number of locations without rates defined. */
  locationsWithoutRatesCount: Scalars['Int'];
  /** The name of the delivery profile. */
  name: Scalars['String'];
  /** The number of active origin locations for the profile. */
  originLocationCount: Scalars['Int'];
  /**
   * The number of product variants for this profile. The count for the default profile is not supported and will return -1.
   * @deprecated Use `productVariantsCountV2` instead
   */
  productVariantsCount: Scalars['Int'];
  /** How many product variants are in this profile. */
  productVariantsCountV2: Shopify_DeliveryProductVariantsCount;
  /** The products and variants associated with this profile. */
  profileItems: Shopify_DeliveryProfileItemConnection;
  /** The location groups and associated zones using this profile. */
  profileLocationGroups: Array<Shopify_DeliveryProfileLocationGroup>;
  /** Selling plan groups associated with the specified delivery profile. */
  sellingPlanGroups: Shopify_SellingPlanGroupConnection;
  /** List of locations that have not been assigned to a location group for this profile. */
  unassignedLocations: Array<Shopify_Location>;
  /** The number of countries with active rates to deliver to. */
  zoneCountryCount: Scalars['Int'];
};


/** A shipping profile. In Shopify, a shipping profile is a set of shipping rates scoped to a set of products or variants that can be shipped from selected locations to zones. */
export type Shopify_DeliveryProfileProfileItemsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_ProfileItemSortKeys>;
};


/** A shipping profile. In Shopify, a shipping profile is a set of shipping rates scoped to a set of products or variants that can be shipped from selected locations to zones. */
export type Shopify_DeliveryProfileSellingPlanGroupsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** How many product variants are in a profile. This count is capped at 500. */
export type Shopify_DeliveryProductVariantsCount = {
  __typename?: 'Shopify_DeliveryProductVariantsCount';
  /** Whether the count has reached the cap of 500. */
  capped: Scalars['Boolean'];
  /** The product variant count. */
  count: Scalars['Int'];
};

/** An auto-generated type for paginating through multiple DeliveryProfileItems. */
export type Shopify_DeliveryProfileItemConnection = {
  __typename?: 'Shopify_DeliveryProfileItemConnection';
  /** A list of edges. */
  edges: Array<Shopify_DeliveryProfileItemEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one DeliveryProfileItem and a cursor during pagination. */
export type Shopify_DeliveryProfileItemEdge = {
  __typename?: 'Shopify_DeliveryProfileItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of DeliveryProfileItemEdge. */
  node: Shopify_DeliveryProfileItem;
};

/** A product and the subset of associated variants that are part of this delivery profile. */
export type Shopify_DeliveryProfileItem = {
  __typename?: 'Shopify_DeliveryProfileItem';
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** A product associated with this profile. */
  product: Shopify_Product;
  /** The product variants associated with this delivery profile. */
  variants: Shopify_ProductVariantConnection;
};


/** A product and the subset of associated variants that are part of this delivery profile. */
export type Shopify_DeliveryProfileItemVariantsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_ProductVariantSortKeys>;
};

export enum Shopify_ProductVariantSortKeys {
  Title = 'TITLE',
  Name = 'NAME',
  Sku = 'SKU',
  InventoryQuantity = 'INVENTORY_QUANTITY',
  InventoryManagement = 'INVENTORY_MANAGEMENT',
  InventoryLevelsAvailable = 'INVENTORY_LEVELS_AVAILABLE',
  InventoryPolicy = 'INVENTORY_POLICY',
  FullTitle = 'FULL_TITLE',
  Popular = 'POPULAR',
  Position = 'POSITION',
  Id = 'ID',
  Relevance = 'RELEVANCE'
}

export enum Shopify_ProfileItemSortKeys {
  Title = 'TITLE',
  ProductType = 'PRODUCT_TYPE',
  Vendor = 'VENDOR',
  InventoryTotal = 'INVENTORY_TOTAL',
  UpdatedAt = 'UPDATED_AT',
  CreatedAt = 'CREATED_AT',
  PublishedAt = 'PUBLISHED_AT',
  Id = 'ID',
  Relevance = 'RELEVANCE'
}

/** Links a location group with zones. Both are associated to a delivery profile. */
export type Shopify_DeliveryProfileLocationGroup = {
  __typename?: 'Shopify_DeliveryProfileLocationGroup';
  /** The countries already selected in any zone for the specified location group. */
  countriesInAnyZone: Array<Shopify_DeliveryCountryAndZone>;
  /** The collection of locations that make up the specified location group. */
  locationGroup: Shopify_DeliveryLocationGroup;
  /** The applicable zones associated to the specified location group. */
  locationGroupZones: Shopify_DeliveryLocationGroupZoneConnection;
};


/** Links a location group with zones. Both are associated to a delivery profile. */
export type Shopify_DeliveryProfileLocationGroupLocationGroupZonesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** The country details and the associated shipping zone. */
export type Shopify_DeliveryCountryAndZone = {
  __typename?: 'Shopify_DeliveryCountryAndZone';
  /** The country details. */
  country: Shopify_DeliveryCountry;
  /** The name of the shipping zone. */
  zone: Scalars['String'];
};

/** A country that is used to define a shipping zone. */
export type Shopify_DeliveryCountry = {
  __typename?: 'Shopify_DeliveryCountry';
  /**
   * A two-letter country code in ISO 3166-1 alpha-2 standard.
   * It also includes a flag indicating whether the country should be
   * a part of the 'Rest Of World' shipping zone.
   */
  code: Shopify_DeliveryCountryCodeOrRestOfWorld;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The full name of the country. */
  name: Scalars['String'];
  /** The list of regions associated with this country. */
  provinces: Array<Shopify_DeliveryProvince>;
  /** The translated name of the country. The translation returned is based on the system's locale. */
  translatedName: Scalars['String'];
};

/** The country code and whether the country is a part of the 'Rest Of World' shipping zone. */
export type Shopify_DeliveryCountryCodeOrRestOfWorld = {
  __typename?: 'Shopify_DeliveryCountryCodeOrRestOfWorld';
  /** The country code in the ISO 3166-1 alpha-2 format. */
  countryCode?: Maybe<Shopify_CountryCode>;
  /** Whether the country is a part of the 'Rest of World' shipping zone. */
  restOfWorld: Scalars['Boolean'];
};

/** A region that is used to define a shipping zone. */
export type Shopify_DeliveryProvince = {
  __typename?: 'Shopify_DeliveryProvince';
  /** The code of the region. */
  code: Scalars['String'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The full name of the region. */
  name: Scalars['String'];
  /** The translated name of the region. The translation returned is based on the system's locale. */
  translatedName: Scalars['String'];
};

/**
 * A location group is a collection of active locations. They share zones and delivery methods across delivery
 * profiles.
 */
export type Shopify_DeliveryLocationGroup = {
  __typename?: 'Shopify_DeliveryLocationGroup';
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** A list of active locations that are part of this location group. */
  locations: Shopify_LocationConnection;
};


/**
 * A location group is a collection of active locations. They share zones and delivery methods across delivery
 * profiles.
 */
export type Shopify_DeliveryLocationGroupLocationsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_LocationSortKeys>;
  query?: InputMaybe<Scalars['String']>;
  includeLegacy?: InputMaybe<Scalars['Boolean']>;
  includeInactive?: InputMaybe<Scalars['Boolean']>;
};

/** An auto-generated type for paginating through multiple Locations. */
export type Shopify_LocationConnection = {
  __typename?: 'Shopify_LocationConnection';
  /** A list of edges. */
  edges: Array<Shopify_LocationEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one Location and a cursor during pagination. */
export type Shopify_LocationEdge = {
  __typename?: 'Shopify_LocationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of LocationEdge. */
  node: Shopify_Location;
};

/** Represents the location where the physical good resides. */
export type Shopify_Location = {
  __typename?: 'Shopify_Location';
  /** Whether this location can be reactivated. */
  activatable: Scalars['Boolean'];
  /** The address of this location. */
  address: Shopify_LocationAddress;
  /** Whether the location address has been verified. */
  addressVerified: Scalars['Boolean'];
  /** Whether this location can be deactivated. */
  deactivatable: Scalars['Boolean'];
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) that the location was deactivated at. For example, 3:30 pm on September 7, 2019 in the time zone of UTC (Universal Time Coordinated) is represented as `"2019-09-07T15:50:00Z`". */
  deactivatedAt?: Maybe<Scalars['String']>;
  /** Whether this location can be deleted. */
  deletable: Scalars['Boolean'];
  /** Name of the service provider that fulfills from this location. */
  fulfillmentService?: Maybe<Shopify_FulfillmentService>;
  /** Whether this location can fulfill online orders. */
  fulfillsOnlineOrders: Scalars['Boolean'];
  /** Whether this location has active inventory. */
  hasActiveInventory: Scalars['Boolean'];
  /** Whether this location has orders that need to be fulfilled. */
  hasUnfulfilledOrders: Scalars['Boolean'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The quantities of an inventory item at this location. */
  inventoryLevel?: Maybe<Shopify_InventoryLevel>;
  /** A list of the quantities of the inventory items that can be stocked at this location. */
  inventoryLevels: Shopify_InventoryLevelConnection;
  /** Whether the location is active. */
  isActive: Scalars['Boolean'];
  /**
   * Whether the location is your primary location for shipping inventory.
   * @deprecated The concept of a primary location is deprecated, shipsInventory can be used to get a fallback location
   */
  isPrimary: Scalars['Boolean'];
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['UnsignedInt64'];
  /** List of metafield definitions. */
  metafieldDefinitions: Shopify_MetafieldDefinitionConnection;
  /** The name of the location. */
  name: Scalars['String'];
  /** Whether this location is used for calculating shipping rates. In multi-origin shipping mode, this flag is ignored. */
  shipsInventory: Scalars['Boolean'];
  /** List of suggested addresses for this location (empty if none). */
  suggestedAddresses: Array<Shopify_LocationSuggestedAddress>;
};


/** Represents the location where the physical good resides. */
export type Shopify_LocationInventoryLevelArgs = {
  inventoryItemId: Scalars['ID'];
};


/** Represents the location where the physical good resides. */
export type Shopify_LocationInventoryLevelsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  query?: InputMaybe<Scalars['String']>;
};


/** Represents the location where the physical good resides. */
export type Shopify_LocationMetafieldDefinitionsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  pinnedStatus?: InputMaybe<Shopify_MetafieldDefinitionPinnedStatus>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_MetafieldDefinitionSortKeys>;
  query?: InputMaybe<Scalars['String']>;
};

/** Represents the address of a location. */
export type Shopify_LocationAddress = {
  __typename?: 'Shopify_LocationAddress';
  /** The first line of the address for the location. */
  address1?: Maybe<Scalars['String']>;
  /** The second line of the address for the location. */
  address2?: Maybe<Scalars['String']>;
  /** The city of the location. */
  city?: Maybe<Scalars['String']>;
  /** The country of the location. */
  country?: Maybe<Scalars['String']>;
  /** The country code of the location. */
  countryCode?: Maybe<Scalars['String']>;
  /** A formatted version of the address for the location. */
  formatted: Array<Scalars['String']>;
  /** The latitude coordinates of the location. */
  latitude?: Maybe<Scalars['Float']>;
  /** The longitude coordinates of the location. */
  longitude?: Maybe<Scalars['Float']>;
  /** The phone number of the location. */
  phone?: Maybe<Scalars['String']>;
  /** The province of the location. */
  province?: Maybe<Scalars['String']>;
  /** The code for the province, state, or district of the address of the location. */
  provinceCode?: Maybe<Scalars['String']>;
  /** The ZIP code of the location. */
  zip?: Maybe<Scalars['String']>;
};

/** Represents a fulfillment service. A fulfillment service is a third-party service that prepares and ships orders on behalf of the store owner. */
export type Shopify_FulfillmentService = {
  __typename?: 'Shopify_FulfillmentService';
  /** The callback URL the fulfillment service has registered for requests. */
  callbackUrl?: Maybe<Scalars['Url']>;
  /** Whether the fulfillment service has opted into fulfillment order based requests. */
  fulfillmentOrdersOptIn: Scalars['Boolean'];
  /** Human-readable unique identifier for this fulfillment service. */
  handle: Scalars['String'];
  /** The ID of the fulfillment service. */
  id: Scalars['ID'];
  /** Whether the fulfillment service tracks product inventory and provides updates to Shopify. */
  inventoryManagement: Scalars['Boolean'];
  /** Location associated with the fulfillment service. */
  location?: Maybe<Shopify_Location>;
  /** Whether the fulfillment service supports local deliveries. */
  productBased: Scalars['Boolean'];
  /** The name of the fulfillment service as seen by merchants. */
  serviceName: Scalars['String'];
  /** Shipping methods associated with the fulfillment service provider. */
  shippingMethods: Array<Shopify_ShippingMethod>;
  /** Type associated with the fulfillment service. */
  type: Shopify_FulfillmentServiceType;
};

/** The shipping method for the delivery. Customers will see applicable shipping methods in the shipping section of checkout. */
export type Shopify_ShippingMethod = {
  __typename?: 'Shopify_ShippingMethod';
  /** A unique code associated with the rate. For example: `expedited_mail` */
  code: Scalars['String'];
  /**
   * A description of the rate, which customers will see at checkout.
   * For example: `Local delivery`, `Free Express Worldwide`, `Includes tracking and insurance`.
   */
  label: Scalars['String'];
};

export enum Shopify_FulfillmentServiceType {
  GiftCard = 'GIFT_CARD',
  Manual = 'MANUAL',
  ThirdParty = 'THIRD_PARTY'
}

/** The quantities of an inventory item that are related to a specific location. */
export type Shopify_InventoryLevel = {
  __typename?: 'Shopify_InventoryLevel';
  /** The quantity of inventory items that are available at the inventory level's associated location. */
  available: Scalars['Int'];
  /** Whether the inventory items associated with the inventory level can be deactivated. */
  canDeactivate: Scalars['Boolean'];
  /** The date and time when the inventory level was created. */
  createdAt: Scalars['DateTime'];
  /** Describes either the impact of deactivating the inventory level, or why the inventory level can't be deactivated. */
  deactivationAlert?: Maybe<Scalars['String']>;
  /** Describes, in HTML with embedded URLs, either the impact of deactivating the inventory level or why the inventory level can't be deactivated. */
  deactivationAlertHtml?: Maybe<Scalars['FormattedString']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The quantity of inventory items that are going to the inventory level's associated location. */
  incoming: Scalars['Int'];
  /** Inventory item associated with the inventory level. */
  item: Shopify_InventoryItem;
  /** The location associated with the inventory level. */
  location: Shopify_Location;
  /** The date and time when the inventory level was updated. */
  updatedAt: Scalars['DateTime'];
};

/**
 * Represents the goods available to be shipped to a customer.
 * It holds essential information about the goods, including SKU and whether it is tracked.
 */
export type Shopify_InventoryItem = {
  __typename?: 'Shopify_InventoryItem';
  /** The ISO 3166-1 alpha-2 country code of where the item originated from. */
  countryCodeOfOrigin?: Maybe<Shopify_CountryCode>;
  /** A list of country specific harmonized system codes. */
  countryHarmonizedSystemCodes: Shopify_CountryHarmonizedSystemCodeConnection;
  /** The date and time when the inventory item was created. */
  createdAt: Scalars['DateTime'];
  /** The number of inventory items that share the same SKU with this item. */
  duplicateSkuCount: Scalars['Int'];
  /** The harmonized system code of the item. */
  harmonizedSystemCode?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The URL that points to the inventory history for the item. */
  inventoryHistoryUrl?: Maybe<Scalars['Url']>;
  /** The inventory item's quantities at the specified location. */
  inventoryLevel?: Maybe<Shopify_InventoryLevel>;
  /** A list of the inventory item's quantities for each location that the inventory item can be stocked at. */
  inventoryLevels: Shopify_InventoryLevelConnection;
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['UnsignedInt64'];
  /** The number of locations where this inventory item is stocked. */
  locationsCount: Scalars['Int'];
  /** The ISO 3166-2 alpha-2 province code of where the item originated from. */
  provinceCodeOfOrigin?: Maybe<Scalars['String']>;
  /** Whether the inventory item requires shipping. */
  requiresShipping: Scalars['Boolean'];
  /** Inventory item SKU. */
  sku?: Maybe<Scalars['String']>;
  /** Whether inventory levels are tracked for the item. */
  tracked: Scalars['Boolean'];
  /** Whether the value of the `tracked` field for the inventory item can be changed. */
  trackedEditable: Shopify_EditableProperty;
  /** Unit cost associated with the inventory item. */
  unitCost?: Maybe<Shopify_MoneyV2>;
  /** The date and time when the inventory item was updated. */
  updatedAt: Scalars['DateTime'];
  /** The variant that owns this inventory item. */
  variant: Shopify_ProductVariant;
};


/**
 * Represents the goods available to be shipped to a customer.
 * It holds essential information about the goods, including SKU and whether it is tracked.
 */
export type Shopify_InventoryItemCountryHarmonizedSystemCodesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * Represents the goods available to be shipped to a customer.
 * It holds essential information about the goods, including SKU and whether it is tracked.
 */
export type Shopify_InventoryItemInventoryLevelArgs = {
  locationId: Scalars['ID'];
};


/**
 * Represents the goods available to be shipped to a customer.
 * It holds essential information about the goods, including SKU and whether it is tracked.
 */
export type Shopify_InventoryItemInventoryLevelsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  query?: InputMaybe<Scalars['String']>;
};

/** An auto-generated type for paginating through multiple CountryHarmonizedSystemCodes. */
export type Shopify_CountryHarmonizedSystemCodeConnection = {
  __typename?: 'Shopify_CountryHarmonizedSystemCodeConnection';
  /** A list of edges. */
  edges: Array<Shopify_CountryHarmonizedSystemCodeEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one CountryHarmonizedSystemCode and a cursor during pagination. */
export type Shopify_CountryHarmonizedSystemCodeEdge = {
  __typename?: 'Shopify_CountryHarmonizedSystemCodeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of CountryHarmonizedSystemCodeEdge. */
  node: Shopify_CountryHarmonizedSystemCode;
};

/** The country-specific harmonized system code and ISO country code for an inventory item. */
export type Shopify_CountryHarmonizedSystemCode = {
  __typename?: 'Shopify_CountryHarmonizedSystemCode';
  /** The ISO 3166-1 alpha-2 country code for the country that issued the specified harmonized system code. */
  countryCode: Shopify_CountryCode;
  /** The country-specific harmonized system code. These are usually longer than 6 digits. */
  harmonizedSystemCode: Scalars['String'];
};

/** An auto-generated type for paginating through multiple InventoryLevels. */
export type Shopify_InventoryLevelConnection = {
  __typename?: 'Shopify_InventoryLevelConnection';
  /** A list of edges. */
  edges: Array<Shopify_InventoryLevelEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one InventoryLevel and a cursor during pagination. */
export type Shopify_InventoryLevelEdge = {
  __typename?: 'Shopify_InventoryLevelEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of InventoryLevelEdge. */
  node: Shopify_InventoryLevel;
};

/** The attribute editable information. */
export type Shopify_EditableProperty = {
  __typename?: 'Shopify_EditableProperty';
  /** Whether the attribute is locked for editing. */
  locked: Scalars['Boolean'];
  /** The reason the attribute is locked for editing. */
  reason?: Maybe<Scalars['FormattedString']>;
};

/** Represents a suggested address for a location. */
export type Shopify_LocationSuggestedAddress = {
  __typename?: 'Shopify_LocationSuggestedAddress';
  /** The first line of the suggested address. */
  address1?: Maybe<Scalars['String']>;
  /** The second line of the suggested address. */
  address2?: Maybe<Scalars['String']>;
  /** The city of the suggested address. */
  city?: Maybe<Scalars['String']>;
  /** The country of the suggested address. */
  country?: Maybe<Scalars['String']>;
  /** The country code of the suggested address. */
  countryCode?: Maybe<Shopify_CountryCode>;
  /** A formatted version of the suggested address. */
  formatted: Array<Scalars['String']>;
  /** The province of the suggested address. */
  province?: Maybe<Scalars['String']>;
  /** The code for the province, state, or district of the suggested address. */
  provinceCode?: Maybe<Scalars['String']>;
  /** The ZIP code of the suggested address. */
  zip?: Maybe<Scalars['String']>;
};

export enum Shopify_LocationSortKeys {
  Name = 'NAME',
  Id = 'ID',
  Relevance = 'RELEVANCE'
}

/** An auto-generated type for paginating through multiple DeliveryLocationGroupZones. */
export type Shopify_DeliveryLocationGroupZoneConnection = {
  __typename?: 'Shopify_DeliveryLocationGroupZoneConnection';
  /** A list of edges. */
  edges: Array<Shopify_DeliveryLocationGroupZoneEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one DeliveryLocationGroupZone and a cursor during pagination. */
export type Shopify_DeliveryLocationGroupZoneEdge = {
  __typename?: 'Shopify_DeliveryLocationGroupZoneEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of DeliveryLocationGroupZoneEdge. */
  node: Shopify_DeliveryLocationGroupZone;
};

/** Links a location group with a zone and the associated method definitions. */
export type Shopify_DeliveryLocationGroupZone = {
  __typename?: 'Shopify_DeliveryLocationGroupZone';
  /** The number of method definitions for the zone. */
  methodDefinitionCounts: Shopify_DeliveryMethodDefinitionCounts;
  /** The method definitions associated to a zone and location group. */
  methodDefinitions: Shopify_DeliveryMethodDefinitionConnection;
  /** The zone associated to a location group. */
  zone: Shopify_DeliveryZone;
};


/** Links a location group with a zone and the associated method definitions. */
export type Shopify_DeliveryLocationGroupZoneMethodDefinitionsArgs = {
  eligible?: InputMaybe<Scalars['Boolean']>;
  type?: InputMaybe<Shopify_DeliveryMethodDefinitionType>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_MethodDefinitionSortKeys>;
};

/** The number of method definitions for a zone, separated into merchant-owned and participant definitions. */
export type Shopify_DeliveryMethodDefinitionCounts = {
  __typename?: 'Shopify_DeliveryMethodDefinitionCounts';
  /** The number of participant method definitions for the specified zone. */
  participantDefinitionsCount: Scalars['Int'];
  /** The number of merchant-defined method definitions for the specified zone. */
  rateDefinitionsCount: Scalars['Int'];
};

/** An auto-generated type for paginating through multiple DeliveryMethodDefinitions. */
export type Shopify_DeliveryMethodDefinitionConnection = {
  __typename?: 'Shopify_DeliveryMethodDefinitionConnection';
  /** A list of edges. */
  edges: Array<Shopify_DeliveryMethodDefinitionEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one DeliveryMethodDefinition and a cursor during pagination. */
export type Shopify_DeliveryMethodDefinitionEdge = {
  __typename?: 'Shopify_DeliveryMethodDefinitionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of DeliveryMethodDefinitionEdge. */
  node: Shopify_DeliveryMethodDefinition;
};

/**
 * A method definition contains the delivery rate and the conditions that must be met for the method to be
 * applied.
 */
export type Shopify_DeliveryMethodDefinition = {
  __typename?: 'Shopify_DeliveryMethodDefinition';
  /** Whether this method definition is active. */
  active: Scalars['Boolean'];
  /** The description of the method definition. */
  description?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The method conditions that must pass for this method definition to be applied to an order. */
  methodConditions: Array<Shopify_DeliveryCondition>;
  /** The name of the method definition. */
  name: Scalars['String'];
  /** The provided rate for this method definition, from a rate definition or participant. */
  rateProvider: Shopify_DeliveryRateProvider;
};

/** A condition that must pass for a delivery method definition to be applied to an order. */
export type Shopify_DeliveryCondition = {
  __typename?: 'Shopify_DeliveryCondition';
  /** The value (weight or price) that the condition field is compared to. */
  conditionCriteria: Shopify_DeliveryConditionCriteria;
  /** The field to compare the criterion value against, using the operator. */
  field: Shopify_DeliveryConditionField;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The operator to compare the field and criterion value. */
  operator: Shopify_DeliveryConditionOperator;
};

/** The value (weight or price) that the condition field is compared to. */
export type Shopify_DeliveryConditionCriteria = Shopify_MoneyV2 | Shopify_Weight;

/** A weight, which includes a numeric value and a unit of measurement. */
export type Shopify_Weight = {
  __typename?: 'Shopify_Weight';
  /** The unit of measurement for `value`. */
  unit: Shopify_WeightUnit;
  /** The weight value using the unit system specified with `unit`. */
  value: Scalars['Float'];
};

export enum Shopify_WeightUnit {
  Kilograms = 'KILOGRAMS',
  Grams = 'GRAMS',
  Pounds = 'POUNDS',
  Ounces = 'OUNCES'
}

export enum Shopify_DeliveryConditionField {
  TotalWeight = 'TOTAL_WEIGHT',
  TotalPrice = 'TOTAL_PRICE'
}

export enum Shopify_DeliveryConditionOperator {
  GreaterThanOrEqualTo = 'GREATER_THAN_OR_EQUAL_TO',
  LessThanOrEqualTo = 'LESS_THAN_OR_EQUAL_TO'
}

/** A rate provided by a merchant-defined rate or a participant. */
export type Shopify_DeliveryRateProvider = Shopify_DeliveryParticipant | Shopify_DeliveryRateDefinition;

/**
 * A participant defines carrier-calculated rates for shipping services
 * with a possible merchant-defined fixed fee or a percentage-of-rate fee.
 */
export type Shopify_DeliveryParticipant = {
  __typename?: 'Shopify_DeliveryParticipant';
  /** Whether to display new shipping services automatically to the customer when the service becomes available. */
  adaptToNewServicesFlag: Scalars['Boolean'];
  /** The carrier used for this participant. */
  carrierService: Shopify_DeliveryCarrierService;
  /** The merchant-defined fixed fee for this participant. */
  fixedFee?: Maybe<Shopify_MoneyV2>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The carrier-specific services offered by the participant, and whether each service is active. */
  participantServices: Array<Shopify_DeliveryParticipantService>;
  /** The merchant-defined percentage-of-rate fee for this participant. */
  percentageOfRateFee: Scalars['Float'];
};

/** A shipping service provider or a carrier account. */
export type Shopify_DeliveryCarrierService = {
  __typename?: 'Shopify_DeliveryCarrierService';
  /** The list of services offered for given destinations. */
  availableServicesForCountries: Array<Shopify_DeliveryAvailableService>;
  /** The properly formatted name of the shipping service provider, ready to display. */
  formattedName?: Maybe<Scalars['String']>;
  /** The logo of the service provider. */
  icon: Shopify_Image;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The name of the shipping service provider. */
  name?: Maybe<Scalars['String']>;
};


/** A shipping service provider or a carrier account. */
export type Shopify_DeliveryCarrierServiceAvailableServicesForCountriesArgs = {
  origins?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  countryCodes?: InputMaybe<Array<InputMaybe<Shopify_CountryCode>>>;
  restOfWorld: Scalars['Boolean'];
};

/** A shipping service and a list of countries that the service is available for. */
export type Shopify_DeliveryAvailableService = {
  __typename?: 'Shopify_DeliveryAvailableService';
  /** The countries the service provider ships to. */
  countries: Shopify_DeliveryCountryCodesOrRestOfWorld;
  /** The name of the service. */
  name: Scalars['String'];
};

/**
 * The list of country codes and information whether the countries
 * are a part of the 'Rest Of World' shipping zone.
 */
export type Shopify_DeliveryCountryCodesOrRestOfWorld = {
  __typename?: 'Shopify_DeliveryCountryCodesOrRestOfWorld';
  /** List of applicable country codes in the ISO 3166-1 alpha-2 format. */
  countryCodes: Array<Shopify_CountryCode>;
  /** Whether the countries are a part of the 'Rest of World' shipping zone. */
  restOfWorld: Scalars['Boolean'];
};

/** A mail service provided by the participant. */
export type Shopify_DeliveryParticipantService = {
  __typename?: 'Shopify_DeliveryParticipantService';
  /** Whether the service is active. */
  active: Scalars['Boolean'];
  /** The name of the service. */
  name: Scalars['String'];
};

/** The merchant-defined rate of the [DeliveryMethodDefinition](https://shopify.dev/api/admin-graphql/latest/objects/DeliveryMethodDefinition). */
export type Shopify_DeliveryRateDefinition = {
  __typename?: 'Shopify_DeliveryRateDefinition';
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The price of this rate. */
  price: Shopify_MoneyV2;
};

export enum Shopify_DeliveryMethodDefinitionType {
  Merchant = 'MERCHANT',
  Participant = 'PARTICIPANT'
}

export enum Shopify_MethodDefinitionSortKeys {
  RateProviderType = 'RATE_PROVIDER_TYPE',
  Id = 'ID',
  Relevance = 'RELEVANCE'
}

/** A zone is a group of countries that have the same shipping rates. Customers can order products from a store only if they choose a shipping destination that's included in one of the store's zones. */
export type Shopify_DeliveryZone = {
  __typename?: 'Shopify_DeliveryZone';
  /** The list of countries within the zone. */
  countries: Array<Shopify_DeliveryCountry>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The name of the zone. */
  name: Scalars['String'];
};

export enum Shopify_ProductVariantInventoryManagement {
  Shopify = 'SHOPIFY',
  NotManaged = 'NOT_MANAGED',
  FulfillmentService = 'FULFILLMENT_SERVICE'
}

export enum Shopify_ProductVariantInventoryPolicy {
  Deny = 'DENY',
  Continue = 'CONTINUE'
}

/** An auto-generated type for paginating through multiple ProductVariantPricePairs. */
export type Shopify_ProductVariantPricePairConnection = {
  __typename?: 'Shopify_ProductVariantPricePairConnection';
  /** A list of edges. */
  edges: Array<Shopify_ProductVariantPricePairEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one ProductVariantPricePair and a cursor during pagination. */
export type Shopify_ProductVariantPricePairEdge = {
  __typename?: 'Shopify_ProductVariantPricePairEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of ProductVariantPricePairEdge. */
  node: Shopify_ProductVariantPricePair;
};

/** The compare-at price and price of a variant sharing a currency. */
export type Shopify_ProductVariantPricePair = {
  __typename?: 'Shopify_ProductVariantPricePair';
  /** The compare-at price of the variant with associated currency. */
  compareAtPrice?: Maybe<Shopify_MoneyV2>;
  /** The price of the variant with associated currency. */
  price: Shopify_MoneyV2;
};

/**
 * Properties used by customers to select a product variant.
 * Products can have multiple options, like different sizes or colors.
 */
export type Shopify_SelectedOption = {
  __typename?: 'Shopify_SelectedOption';
  /** The product optionâ€™s name. */
  name: Scalars['String'];
  /** The product optionâ€™s value. */
  value: Scalars['String'];
};

/** An auto-generated type for paginating through multiple SellingPlans. */
export type Shopify_SellingPlanConnection = {
  __typename?: 'Shopify_SellingPlanConnection';
  /** A list of edges. */
  edges: Array<Shopify_SellingPlanEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one SellingPlan and a cursor during pagination. */
export type Shopify_SellingPlanEdge = {
  __typename?: 'Shopify_SellingPlanEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of SellingPlanEdge. */
  node: Shopify_SellingPlan;
};

/**
 * Represents how a product can be sold and purchased. Selling plans and associated records (selling plan groups
 * and policies) are deleted 48 hours after a merchant uninstalls their subscriptions app. We recommend backing
 * up these records if you need to restore them later.
 *
 * For more information on selling plans, refer to
 * [*Creating and managing selling plans*](https://shopify.dev/apps/subscriptions/selling-plans).
 */
export type Shopify_SellingPlan = {
  __typename?: 'Shopify_SellingPlan';
  /** A selling plan policy which describes the recurring billing details. */
  billingPolicy: Shopify_SellingPlanBillingPolicy;
  /** The date and time when the selling plan was created. */
  createdAt: Scalars['DateTime'];
  /** A selling plan policy which describes the delivery details. */
  deliveryPolicy: Shopify_SellingPlanDeliveryPolicy;
  /** Buyer facing string which describes the selling plan commitment. */
  description?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /**
   * A customer-facing description of the selling plan.
   *
   * If your store supports multiple currencies, then don't include country-specific pricing content, such as "Buy monthly, get 10$ CAD off". This field won't be converted to reflect different currencies.
   */
  name: Scalars['String'];
  /** The values of all options available on the selling plan. Selling plans are grouped together in Liquid when they are created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values. */
  options: Array<Scalars['String']>;
  /** Relative position of the selling plan for display. A lower position will be displayed before a higher position. */
  position?: Maybe<Scalars['Int']>;
  /** Selling plan pricing details. */
  pricingPolicies: Array<Shopify_SellingPlanPricingPolicy>;
};

/**
 * Represents the billing frequency associated to the selling plan (for example, bill every week, or bill every
 * three months). The selling plan billing policy and associated records (selling plan groups, selling plans, pricing
 * policies, and delivery policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
 * We recommend backing up these records if you need to restore them later.
 */
export type Shopify_SellingPlanBillingPolicy = Shopify_SellingPlanRecurringBillingPolicy;

/** Represents a recurring selling plan billing policy. */
export type Shopify_SellingPlanRecurringBillingPolicy = {
  __typename?: 'Shopify_SellingPlanRecurringBillingPolicy';
  /** Specific anchor dates upon which the billing interval calculations should be made. */
  anchors: Array<Shopify_SellingPlanAnchor>;
  /** The date and time when the selling plan billing policy was created. */
  createdAt: Scalars['DateTime'];
  /** The billing frequency, it can be either: day, week, month or year. */
  interval: Shopify_SellingPlanInterval;
  /** The number of intervals between billings. */
  intervalCount: Scalars['Int'];
  /** Maximum number of billing iterations. */
  maxCycles?: Maybe<Scalars['Int']>;
  /** Minimum number of billing iterations. */
  minCycles?: Maybe<Scalars['Int']>;
};

/** Represents a selling plan policy anchor. */
export type Shopify_SellingPlanAnchor = {
  __typename?: 'Shopify_SellingPlanAnchor';
  /**
   * The day of the anchor.
   *
   * If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
   * the days of the week according to ISO 8601, where 1 is Monday.
   *
   * If `type` is not WEEKDAY, then the value must be between 1-31.
   */
  day: Scalars['Int'];
  /**
   * The month of the anchor. If type is different than YEARDAY, this field must be null, otherwise it must be
   * between 1-12.
   */
  month?: Maybe<Scalars['Int']>;
  /** Represents the anchor type, it can be one one of WEEKDAY, MONTHDAY, YEARDAY. */
  type: Shopify_SellingPlanAnchorType;
};

export enum Shopify_SellingPlanAnchorType {
  Weekday = 'WEEKDAY',
  Monthday = 'MONTHDAY',
  Yearday = 'YEARDAY'
}

export enum Shopify_SellingPlanInterval {
  Day = 'DAY',
  Week = 'WEEK',
  Month = 'MONTH',
  Year = 'YEAR'
}

/**
 * Represents the delivery frequency associated to the selling plan (for example, deliver every month, or deliver
 * every other week). The selling plan delivery policy and associated records (selling plan groups, selling plans,
 * pricing policies, and billing policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
 * We recommend backing up these records if you need to restore them later.
 */
export type Shopify_SellingPlanDeliveryPolicy = Shopify_SellingPlanRecurringDeliveryPolicy;

/** Represents a recurring selling plan delivery policy. */
export type Shopify_SellingPlanRecurringDeliveryPolicy = {
  __typename?: 'Shopify_SellingPlanRecurringDeliveryPolicy';
  /** Specific anchor dates upon which the delivery interval calculations should be made. */
  anchors: Array<Shopify_SellingPlanAnchor>;
  /** The date and time when the selling plan delivery policy was created. */
  createdAt: Scalars['DateTime'];
  /** A buffer period for orders to be included in a cycle. */
  cutoff?: Maybe<Scalars['Int']>;
  /**
   * Whether the delivery policy is merchant or buyer-centric.
   * Buyer-centric delivery policies state the time when the buyer will receive the goods.
   * Merchant-centric delivery policies state the time when the fulfillment should be started.
   * Currently, only merchant-centric delivery policies are supported.
   */
  intent: Shopify_SellingPlanRecurringDeliveryPolicyIntent;
  /** The delivery frequency, it can be either: day, week, month or year. */
  interval: Shopify_SellingPlanInterval;
  /** The number of intervals between deliveries. */
  intervalCount: Scalars['Int'];
  /** Fulfillment or delivery behavior of the first fulfillment when the order is placed before the anchor. The default value for this field is `ASAP`. */
  preAnchorBehavior: Shopify_SellingPlanRecurringDeliveryPolicyPreAnchorBehavior;
};

export enum Shopify_SellingPlanRecurringDeliveryPolicyIntent {
  FulfillmentBegin = 'FULFILLMENT_BEGIN'
}

export enum Shopify_SellingPlanRecurringDeliveryPolicyPreAnchorBehavior {
  Asap = 'ASAP',
  Next = 'NEXT'
}

/**
 * Represents the type of pricing associated to the selling plan (for example, a $10 or 20% discount that is set
 * for a limited period or that is fixed for the duration of the subscription). Selling plan pricing policies and
 * associated records (selling plan groups, selling plans, billing policy, and delivery policy) are deleted 48
 * hours after a merchant uninstalls their subscriptions app. We recommend backing up these records if you need
 * to restore them later.
 */
export type Shopify_SellingPlanPricingPolicy = Shopify_SellingPlanFixedPricingPolicy | Shopify_SellingPlanRecurringPricingPolicy;

/** Represents a fixed selling plan pricing policy. */
export type Shopify_SellingPlanFixedPricingPolicy = {
  __typename?: 'Shopify_SellingPlanFixedPricingPolicy';
  /** The price adjustment type. */
  adjustmentType: Shopify_SellingPlanPricingPolicyAdjustmentType;
  /** The price adjustment value. */
  adjustmentValue: Shopify_SellingPlanPricingPolicyAdjustmentValue;
  /** The date and time when the fixed selling plan pricing policy was created. */
  createdAt: Scalars['DateTime'];
};

export enum Shopify_SellingPlanPricingPolicyAdjustmentType {
  Percentage = 'PERCENTAGE',
  FixedAmount = 'FIXED_AMOUNT',
  Price = 'PRICE'
}

/** Represents a selling plan pricing policy adjustment value type. */
export type Shopify_SellingPlanPricingPolicyAdjustmentValue = Shopify_MoneyV2 | Shopify_SellingPlanPricingPolicyPercentageValue;

/** Represents the percentage value of a selling plan pricing policy percentage type. */
export type Shopify_SellingPlanPricingPolicyPercentageValue = {
  __typename?: 'Shopify_SellingPlanPricingPolicyPercentageValue';
  /** The percentage value. */
  percentage: Scalars['Float'];
};

/** Represents a recurring selling plan pricing policy. */
export type Shopify_SellingPlanRecurringPricingPolicy = {
  __typename?: 'Shopify_SellingPlanRecurringPricingPolicy';
  /** The price adjustment type. */
  adjustmentType: Shopify_SellingPlanPricingPolicyAdjustmentType;
  /** The price adjustment value. */
  adjustmentValue: Shopify_SellingPlanPricingPolicyAdjustmentValue;
  /** Cycle after which this pricing policy applies. */
  afterCycle?: Maybe<Scalars['Int']>;
  /** The date and time when the recurring selling plan pricing policy was created. */
  createdAt: Scalars['DateTime'];
};

/** Represents the details of a specific type of product within the [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt). */
export type Shopify_StandardizedProductType = {
  __typename?: 'Shopify_StandardizedProductType';
  /** The product taxonomy node associated with the standardized product type. */
  productTaxonomyNode?: Maybe<Shopify_ProductTaxonomyNode>;
};

/** Represents a [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt) node. */
export type Shopify_ProductTaxonomyNode = {
  __typename?: 'Shopify_ProductTaxonomyNode';
  /** The full name of the product taxonomy node. For example,  Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds. */
  fullName: Scalars['String'];
  /** The ID of the product taxonomy node. */
  id: Scalars['ID'];
  /** Whether the node is a leaf node. */
  isLeaf: Scalars['Boolean'];
  /** Whether the node is a root node. */
  isRoot: Scalars['Boolean'];
  /** The name of the product taxonomy node. For example, Dog Beds. */
  name: Scalars['String'];
};

export enum Shopify_ProductStatus {
  Active = 'ACTIVE',
  Archived = 'ARCHIVED',
  Draft = 'DRAFT'
}

export type Recharge_Product = {
  __typename?: 'Recharge_Product';
  id?: Maybe<Scalars['Float']>;
  product_id?: Maybe<Scalars['Float']>;
  shopify_product_id?: Maybe<Scalars['Float']>;
  discount_type?: Maybe<Scalars['String']>;
  discount_amount?: Maybe<Scalars['Float']>;
  subscription_defaults?: Maybe<Recharge_ProductSubscriptionDefaultsProperty>;
  external_product_id?: Maybe<Scalars['String']>;
  brand?: Maybe<Scalars['String']>;
  images?: Maybe<Recharge_ProductImagesProperty>;
  title?: Maybe<Scalars['String']>;
};

export type Recharge_ProductSubscriptionDefaultsProperty = {
  __typename?: 'Recharge_ProductSubscriptionDefaultsProperty';
  charge_interval_frequency?: Maybe<Scalars['Float']>;
  cutoff_day_of_month?: Maybe<Scalars['Float']>;
  cutoff_day_of_week?: Maybe<Scalars['Float']>;
  expire_after_specific_number_of_charges?: Maybe<Scalars['Float']>;
  order_day_of_month?: Maybe<Scalars['Float']>;
  order_day_of_week?: Maybe<Scalars['Float']>;
  order_interval_frequency?: Maybe<Scalars['Float']>;
  order_interval_unit?: Maybe<Scalars['String']>;
  storefront_purchase_options?: Maybe<Scalars['String']>;
  order_interval_frequency_options?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type Recharge_ProductImagesProperty = {
  __typename?: 'Recharge_ProductImagesProperty';
  large?: Maybe<Scalars['String']>;
  medium?: Maybe<Scalars['String']>;
  original?: Maybe<Scalars['String']>;
  small?: Maybe<Scalars['String']>;
};

export enum Shopify_ImageContentType {
  Png = 'PNG',
  Jpg = 'JPG',
  Webp = 'WEBP'
}

/**
 * The available options for transforming an image.
 *
 * All transformation options are considered "best-effort". Any transformation that the original image type doesn't support will be ignored.
 */
export type Shopify_ImageTransformInput = {
  /** Crop the image according to the specified region. */
  crop?: InputMaybe<Shopify_CropRegion>;
  /** Image width in pixels between 1 and 5760. */
  maxWidth?: InputMaybe<Scalars['Int']>;
  /** Image height in pixels between 1 and 5760. */
  maxHeight?: InputMaybe<Scalars['Int']>;
  /** Image size multiplier for high-resolution retina displays. Must be within 1..3. */
  scale?: InputMaybe<Scalars['Int']>;
  /**
   * Convert the source image into the preferred content type.
   * Supported conversions: `.svg` to `.png`, any file type to `.jpg`, and any file type to `.webp`.
   */
  preferredContentType?: InputMaybe<Shopify_ImageContentType>;
};

/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.
 * Learn more about [editing an existing order with the Admin API](https://shopify.dev/api/examples/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_Order = {
  __typename?: 'Shopify_Order';
  /** A list of sales agreements associated with the order. */
  agreements: Shopify_SalesAgreementConnection;
  /** A list of messages that appear on the order page in the Shopify admin. */
  alerts: Array<Shopify_ResourceAlert>;
  /** The application that created the order. */
  app?: Maybe<Shopify_OrderApp>;
  /** The billing address of the customer. */
  billingAddress?: Maybe<Shopify_MailingAddress>;
  /** Whether the billing address matches the shipping address. */
  billingAddressMatchesShippingAddress: Scalars['Boolean'];
  /** Whether the order can be manually marked as paid. */
  canMarkAsPaid: Scalars['Boolean'];
  /** Whether a customer email exists for the order. */
  canNotifyCustomer: Scalars['Boolean'];
  /**
   * The reason provided when the order was canceled.
   * Returns `null` if the order wasn't canceled.
   */
  cancelReason?: Maybe<Shopify_OrderCancelReason>;
  /**
   * The date and time when the order was canceled.
   * Returns `null` if the order wasn't canceled.
   */
  cancelledAt?: Maybe<Scalars['DateTime']>;
  /** Whether payment for the order can be captured. */
  capturable: Scalars['Boolean'];
  /**
   * The total order-level discount amount, before returns, in shop currency.
   * @deprecated Use `cartDiscountAmountSet` instead
   */
  cartDiscountAmount?: Maybe<Scalars['Money']>;
  /** The total order-level discount amount, before returns, in shop and presentment currencies. */
  cartDiscountAmountSet?: Maybe<Shopify_MoneyBag>;
  /**
   * The channel that created the order.
   * @deprecated Use `publication` instead
   */
  channel?: Maybe<Shopify_Channel>;
  /** The IP address of the API client that created the order. */
  clientIp?: Maybe<Scalars['String']>;
  /** Whether the order is closed. */
  closed: Scalars['Boolean'];
  /**
   * The date and time when the order was closed.
   * Returns `null` if the order is not closed.
   */
  closedAt?: Maybe<Scalars['DateTime']>;
  /** Whether inventory has been reserved for the order. */
  confirmed: Scalars['Boolean'];
  /** Date and time when the order was created in Shopify. */
  createdAt: Scalars['DateTime'];
  /** The shop currency when the order was placed. */
  currencyCode: Shopify_CurrencyCode;
  /** The current order-level discount amount after all order updates, in shop and presentment currencies. */
  currentCartDiscountAmountSet: Shopify_MoneyBag;
  /** The sum of the quantities for all line items that contribute to the order's current subtotal price. */
  currentSubtotalLineItemsQuantity: Scalars['Int'];
  /**
   * The sum of the prices for all line items after discounts and returns, in shop and presentment currencies.
   * If `taxesIncluded` is `true`, then the subtotal also includes tax.
   */
  currentSubtotalPriceSet: Shopify_MoneyBag;
  /**
   * A list of all tax lines applied to line items on the order, after returns.
   * Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
   */
  currentTaxLines: Array<Shopify_TaxLine>;
  /**
   * The total amount discounted on the order after returns, in shop and presentment currencies.
   * This includes both order and line level discounts.
   */
  currentTotalDiscountsSet: Shopify_MoneyBag;
  /**
   * The total amount of duties after returns, in shop and presentment currencies.
   * Returns `null` if duties aren't applicable.
   */
  currentTotalDutiesSet?: Maybe<Shopify_MoneyBag>;
  /**
   * The total price of the order, after returns, in shop and presentment currencies.
   * This includes taxes and discounts.
   */
  currentTotalPriceSet: Shopify_MoneyBag;
  /** The sum of the prices of all tax lines applied to line items on the order, after returns, in shop and presentment currencies. */
  currentTotalTaxSet: Shopify_MoneyBag;
  /** The total weight of the order after returns, in grams. */
  currentTotalWeight: Scalars['UnsignedInt64'];
  /** A list of the custom attributes added to the order. */
  customAttributes: Array<Shopify_Attribute>;
  /** The customer that placed the order. */
  customer?: Maybe<Shopify_Customer>;
  /** Whether the customer agreed to receive marketing materials. */
  customerAcceptsMarketing: Scalars['Boolean'];
  /**
   * The customer's visits and interactions with the online store before placing the order.
   * @deprecated Use `customerJourneySummary` instead
   */
  customerJourney?: Maybe<Shopify_CustomerJourney>;
  /** The customer's visits and interactions with the online store before placing the order. */
  customerJourneySummary?: Maybe<Shopify_CustomerJourneySummary>;
  /** A two-letter or three-letter language code, optionally followed by a region modifier. */
  customerLocale?: Maybe<Scalars['String']>;
  /** A list of discounts that are applied to the order. */
  discountApplications: Shopify_DiscountApplicationConnection;
  /** The discount code used for the order. */
  discountCode?: Maybe<Scalars['String']>;
  /**
   * The primary address of the customer.
   * Returns `null` if neither the shipping address nor the billing address was provided.
   */
  displayAddress?: Maybe<Shopify_MailingAddress>;
  /**
   * The financial status of the order that can be shown to the merchant.
   * This field does not capture all the details of an order's financial state. It should only be used for display summary purposes.
   */
  displayFinancialStatus?: Maybe<Shopify_OrderDisplayFinancialStatus>;
  /**
   * The fulfillment status for the order that can be shown to the merchant.
   * This field does not capture all the details of an order's fulfillment state. It should only be used for display summary purposes.
   * For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
   */
  displayFulfillmentStatus: Shopify_OrderDisplayFulfillmentStatus;
  /** A list of the disputes associated with the order. */
  disputes: Array<Shopify_OrderDisputeSummary>;
  /**
   * A list of draft fulfillments that can be created for the order, which includes line items that can be partially fulfilled.
   * @deprecated Use `fulfillmentOrders` instead
   */
  draftFulfillments: Array<Shopify_DraftFulfillment>;
  /** Whether the order has had any edits applied. */
  edited: Scalars['Boolean'];
  /** The email address associated with the customer. */
  email?: Maybe<Scalars['String']>;
  /**
   * Whether taxes on the order are estimated.
   * This field returns `false` when taxes on the order are finalized and aren't subject to any changes.
   */
  estimatedTaxes: Scalars['Boolean'];
  /** A list of events associated with the order. */
  events: Shopify_EventConnection;
  /**
   * Whether there are line items that can be fulfilled.
   * This field returns `false` when the order has no fulfillable line items.
   * For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
   */
  fulfillable: Scalars['Boolean'];
  /** A list of fulfillment orders for the order. */
  fulfillmentOrders: Shopify_FulfillmentOrderConnection;
  /** List of shipments for the order. */
  fulfillments: Array<Shopify_Fulfillment>;
  /** Whether the order has been paid in full. */
  fullyPaid: Scalars['Boolean'];
  /** Whether the merchant added a timeline comment to the order. */
  hasTimelineComment: Scalars['Boolean'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /**
   * The URL of the first page of the online store that the customer visited before they submitted the order.
   * @deprecated Use `customerJourneySummary.lastVisit.landingPageHtml` instead
   */
  landingPageDisplayText?: Maybe<Scalars['String']>;
  /**
   * The first page of the online store that the customer visited before they submitted the order.
   * @deprecated Use `customerJourneySummary.lastVisit.landingPage` instead
   */
  landingPageUrl?: Maybe<Scalars['Url']>;
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['UnsignedInt64'];
  /** A list of the order's line items. */
  lineItems: Shopify_LineItemConnection;
  /**
   * A list of the order's line items.
   * @deprecated Use `lineItems` instead
   */
  lineItemsMutable: Shopify_LineItemMutableConnection;
  /** List of localization extensions for the resource. */
  localizationExtensions: Shopify_LocalizationExtensionConnection;
  /**
   * The fulfillment location that was assigned when the order was created.
   * Use the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder) object for up-to-date fulfillment location information.
   * @deprecated Use `physicalLocation` instead
   */
  location?: Maybe<Scalars['String']>;
  /** Whether the order can be edited by the merchant. For example, canceled orders canâ€™t be edited. */
  merchantEditable: Scalars['Boolean'];
  /** A list of reasons why the order can't be edited. For example, "Canceled orders canâ€™t be edited". */
  merchantEditableErrors: Array<Scalars['String']>;
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafield definitions. */
  metafieldDefinitions: Shopify_MetafieldDefinitionConnection;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /**
   * The unique identifier for the order that appears on the order page in the Shopify admin and the order status page.
   * For example, "#1001", "EN1001", or "1001-A".
   * This value isn't unique across multiple stores.
   */
  name: Scalars['String'];
  /**
   * The net payment for the order, based on the total amount received minus the total amount refunded, in shop currency.
   * @deprecated Use `netPaymentSet` instead
   */
  netPayment: Scalars['Money'];
  /** The net payment for the order, based on the total amount received minus the total amount refunded, in shop and presentment currencies. */
  netPaymentSet: Shopify_MoneyBag;
  /**
   * A list of line items that can't be fulfilled.
   * For example, tips and fully refunded line items can't be fulfilled.
   * For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
   */
  nonFulfillableLineItems: Shopify_LineItemConnection;
  /** The contents of the note associated with the order. */
  note?: Maybe<Scalars['String']>;
  /**
   * The total amount of duties before returns, in shop and presentment currencies.
   * Returns `null` if duties aren't applicable.
   */
  originalTotalDutiesSet?: Maybe<Shopify_MoneyBag>;
  /** The total price of the order at the time of order creation, in shop and presentment currencies. */
  originalTotalPriceSet: Shopify_MoneyBag;
  /** The payment collection details for the order. */
  paymentCollectionDetails: Shopify_OrderPaymentCollectionDetails;
  /**
   * A list of the names of all payment gateways used for the order.
   * For example, "Shopify Payments" and "Cash on Delivery (COD)".
   */
  paymentGatewayNames: Array<Scalars['String']>;
  /** The payment terms associated with the order. */
  paymentTerms?: Maybe<Shopify_PaymentTerms>;
  /** The phone number associated with the customer. */
  phone?: Maybe<Scalars['String']>;
  /**
   * The fulfillment location that was assigned when the order was created.
   * Use the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder) object for up to date fulfillment location information.
   */
  physicalLocation?: Maybe<Shopify_Location>;
  /** The payment `CurrencyCode` of the customer for the order. */
  presentmentCurrencyCode: Shopify_CurrencyCode;
  /** Returns a private metafield by namespace and key that belongs to the resource. */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /** List of private metafields that belong to the resource. */
  privateMetafields: Shopify_PrivateMetafieldConnection;
  /**
   * The date and time when the order was processed.
   * This date and time might not match the date and time when the order was created.
   */
  processedAt: Scalars['DateTime'];
  /** The publication that the order was created from. */
  publication?: Maybe<Shopify_Publication>;
  /**
   * The marketing referral code from the link that the customer clicked to visit the store.
   * Supports the following URL attributes: "ref", "source", or "r".
   * For example, if the URL is `{shop}.myshopify.com/products/slide?ref=j2tj1tn2`, then this value is `j2tj1tn2`.
   * @deprecated Use `customerJourneySummary.lastVisit.referralCode` instead
   */
  referralCode?: Maybe<Scalars['String']>;
  /**
   * A web domain or short description of the source that sent the customer to your online store. For example, "shopify.com" or "email".
   * @deprecated Use `customerJourneySummary.lastVisit.referralInfoHtml` instead
   */
  referrerDisplayText?: Maybe<Scalars['String']>;
  /**
   * The URL of the webpage where the customer clicked a link that sent them to your online store.
   * @deprecated Use `customerJourneySummary.lastVisit.referrerUrl` instead
   */
  referrerUrl?: Maybe<Scalars['Url']>;
  /** The difference between the suggested and actual refund amount of all refunds that have been applied to the order. A positive value indicates a difference in the merchant's favor, and a negative value indicates a difference in the customer's favor. */
  refundDiscrepancySet: Shopify_MoneyBag;
  /** Whether the order can be refunded. */
  refundable: Scalars['Boolean'];
  /** A list of refunds that have been applied to the order. */
  refunds: Array<Shopify_Refund>;
  /** Whether the order has shipping lines or at least one line item on the order that requires shipping. */
  requiresShipping: Scalars['Boolean'];
  /** Whether any line item on the order can be restocked. */
  restockable: Scalars['Boolean'];
  /** The fraud risk level of the order. */
  riskLevel: Shopify_OrderRiskLevel;
  /** A list of risks associated with the order. */
  risks: Array<Shopify_OrderRisk>;
  /** The mailing address of the customer. */
  shippingAddress?: Maybe<Shopify_MailingAddress>;
  /** A summary of all shipping costs on the order. */
  shippingLine?: Maybe<Shopify_ShippingLine>;
  /** A list of the order's shipping lines. */
  shippingLines: Shopify_ShippingLineConnection;
  /** The sum of the quantities for all line items that contribute to the order's subtotal price. */
  subtotalLineItemsQuantity: Scalars['Int'];
  /**
   * The sum of the prices for all line items after discounts and before returns, in shop currency.
   * If `taxesIncluded` is `true`, then the subtotal also includes tax.
   * @deprecated Use `subtotalPriceSet` instead
   */
  subtotalPrice?: Maybe<Scalars['Money']>;
  /**
   * The sum of the prices for all line items after discounts and before returns, in shop and presentment currencies.
   * If `taxesIncluded` is `true`, then the subtotal also includes tax.
   */
  subtotalPriceSet?: Maybe<Shopify_MoneyBag>;
  /** A suggested refund for the order. */
  suggestedRefund?: Maybe<Shopify_SuggestedRefund>;
  /**
   * A comma separated list of tags associated with the order. Updating `tags` overwrites
   * any existing tags that were previously added to the order. To add new tags without overwriting
   * existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
   * mutation.
   */
  tags: Array<Scalars['String']>;
  /**
   * A list of all tax lines applied to line items on the order, before returns.
   * Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
   */
  taxLines: Array<Shopify_TaxLine>;
  /** Whether taxes are included in the subtotal price of the order. */
  taxesIncluded: Scalars['Boolean'];
  /**
   * Whether the order is a test.
   * Test orders are made using the Shopify Bogus Gateway or a payment provider with test mode enabled.
   * A test order cannot be converted into a real order and vice versa.
   */
  test: Scalars['Boolean'];
  /**
   * The authorized amount that is uncaptured or undercaptured, in shop currency.
   * This amount isn't adjusted for returns.
   * @deprecated Use `totalCapturableSet` instead
   */
  totalCapturable: Scalars['Money'];
  /**
   * The authorized amount that is uncaptured or undercaptured, in shop and presentment currencies.
   * This amount isn't adjusted for returns.
   */
  totalCapturableSet: Shopify_MoneyBag;
  /**
   * The total amount discounted on the order before returns, in shop currency.
   * This includes both order and line level discounts.
   * @deprecated Use `totalDiscountsSet` instead
   */
  totalDiscounts?: Maybe<Scalars['Money']>;
  /**
   * The total amount discounted on the order before returns, in shop and presentment currencies.
   * This includes both order and line level discounts.
   */
  totalDiscountsSet?: Maybe<Shopify_MoneyBag>;
  /**
   * The total amount not yet transacted for the order, in shop and presentment currencies.
   * A positive value indicates a difference in the merchant's favor (payment from customer to merchant) and a negative value indicates a difference in the customer's favor (refund from merchant to customer).
   */
  totalOutstandingSet: Shopify_MoneyBag;
  /**
   * The total price of the order, before returns, in shop currency.
   * This includes taxes and discounts.
   * @deprecated Use `totalPriceSet` instead
   */
  totalPrice: Scalars['Money'];
  /**
   * The total price of the order, before returns, in shop and presentment currencies.
   * This includes taxes and discounts.
   */
  totalPriceSet: Shopify_MoneyBag;
  /**
   * The total amount received from the customer before returns, in shop currency.
   * @deprecated Use `totalReceivedSet` instead
   */
  totalReceived: Scalars['Money'];
  /** The total amount received from the customer before returns, in shop and presentment currencies. */
  totalReceivedSet: Shopify_MoneyBag;
  /**
   * The total amount that was refunded, in shop currency.
   * @deprecated Use `totalRefundedSet` instead
   */
  totalRefunded: Scalars['Money'];
  /** The total amount that was refunded, in shop and presentment currencies. */
  totalRefundedSet: Shopify_MoneyBag;
  /** The total amount of shipping that was refunded, in shop and presentment currencies. */
  totalRefundedShippingSet: Shopify_MoneyBag;
  /**
   * The total shipping amount before discounts and returns, in shop currency.
   * @deprecated Use `totalShippingPriceSet` instead
   */
  totalShippingPrice: Scalars['Money'];
  /** The total shipping amount before discounts and returns, in shop and presentment currencies. */
  totalShippingPriceSet: Shopify_MoneyBag;
  /**
   * The total tax amount before returns, in shop currency.
   * @deprecated Use `totalTaxSet` instead
   */
  totalTax?: Maybe<Scalars['Money']>;
  /** The total tax amount before returns, in shop and presentment currencies. */
  totalTaxSet?: Maybe<Shopify_MoneyBag>;
  /**
   * The sum of all tip amounts for the order, in shop currency.
   * @deprecated Use `totalTipReceivedSet` instead
   */
  totalTipReceived: Shopify_MoneyV2;
  /** The sum of all tip amounts for the order, in shop and presentment currencies. */
  totalTipReceivedSet: Shopify_MoneyBag;
  /** The total weight of the order before returns, in grams. */
  totalWeight?: Maybe<Scalars['UnsignedInt64']>;
  /** A list of transactions associated with the order. */
  transactions: Array<Shopify_OrderTransaction>;
  /** Whether no payments have been made for the order. */
  unpaid: Scalars['Boolean'];
  /** The date and time when the order was modified last. */
  updatedAt: Scalars['DateTime'];
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.
 * Learn more about [editing an existing order with the Admin API](https://shopify.dev/api/examples/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderAgreementsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  query?: InputMaybe<Scalars['String']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.
 * Learn more about [editing an existing order with the Admin API](https://shopify.dev/api/examples/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderDiscountApplicationsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.
 * Learn more about [editing an existing order with the Admin API](https://shopify.dev/api/examples/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderEventsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_EventSortKeys>;
  query?: InputMaybe<Scalars['String']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.
 * Learn more about [editing an existing order with the Admin API](https://shopify.dev/api/examples/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderFulfillmentOrdersArgs = {
  displayable?: InputMaybe<Scalars['Boolean']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  query?: InputMaybe<Scalars['String']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.
 * Learn more about [editing an existing order with the Admin API](https://shopify.dev/api/examples/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderFulfillmentsArgs = {
  first?: InputMaybe<Scalars['Int']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.
 * Learn more about [editing an existing order with the Admin API](https://shopify.dev/api/examples/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderLineItemsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.
 * Learn more about [editing an existing order with the Admin API](https://shopify.dev/api/examples/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderLineItemsMutableArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.
 * Learn more about [editing an existing order with the Admin API](https://shopify.dev/api/examples/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderLocalizationExtensionsArgs = {
  countryCodes?: InputMaybe<Array<InputMaybe<Shopify_CountryCode>>>;
  purposes?: InputMaybe<Array<InputMaybe<Shopify_LocalizationExtensionPurpose>>>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.
 * Learn more about [editing an existing order with the Admin API](https://shopify.dev/api/examples/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderMetafieldArgs = {
  namespace: Scalars['String'];
  key: Scalars['String'];
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.
 * Learn more about [editing an existing order with the Admin API](https://shopify.dev/api/examples/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderMetafieldDefinitionsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  pinnedStatus?: InputMaybe<Shopify_MetafieldDefinitionPinnedStatus>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_MetafieldDefinitionSortKeys>;
  query?: InputMaybe<Scalars['String']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.
 * Learn more about [editing an existing order with the Admin API](https://shopify.dev/api/examples/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderMetafieldsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.
 * Learn more about [editing an existing order with the Admin API](https://shopify.dev/api/examples/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderNonFulfillableLineItemsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.
 * Learn more about [editing an existing order with the Admin API](https://shopify.dev/api/examples/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderPrivateMetafieldArgs = {
  namespace: Scalars['String'];
  key: Scalars['String'];
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.
 * Learn more about [editing an existing order with the Admin API](https://shopify.dev/api/examples/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderPrivateMetafieldsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.
 * Learn more about [editing an existing order with the Admin API](https://shopify.dev/api/examples/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderRefundsArgs = {
  first?: InputMaybe<Scalars['Int']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.
 * Learn more about [editing an existing order with the Admin API](https://shopify.dev/api/examples/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderRisksArgs = {
  first?: InputMaybe<Scalars['Int']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.
 * Learn more about [editing an existing order with the Admin API](https://shopify.dev/api/examples/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderShippingLinesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.
 * Learn more about [editing an existing order with the Admin API](https://shopify.dev/api/examples/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderSuggestedRefundArgs = {
  shippingAmount?: InputMaybe<Scalars['Money']>;
  refundShipping?: InputMaybe<Scalars['Boolean']>;
  refundLineItems?: InputMaybe<Array<InputMaybe<Shopify_RefundLineItemInput>>>;
  refundDuties?: InputMaybe<Array<InputMaybe<Shopify_RefundDutyInput>>>;
  suggestFullRefund?: InputMaybe<Scalars['Boolean']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.
 * Learn more about [editing an existing order with the Admin API](https://shopify.dev/api/examples/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderTransactionsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  capturable?: InputMaybe<Scalars['Boolean']>;
  manuallyResolvable?: InputMaybe<Scalars['Boolean']>;
};

/** An auto-generated type for paginating through multiple SalesAgreements. */
export type Shopify_SalesAgreementConnection = {
  __typename?: 'Shopify_SalesAgreementConnection';
  /** A list of edges. */
  edges: Array<Shopify_SalesAgreementEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one SalesAgreement and a cursor during pagination. */
export type Shopify_SalesAgreementEdge = {
  __typename?: 'Shopify_SalesAgreementEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of SalesAgreementEdge. */
  node: Shopify_SalesAgreement;
};

/** An addition, removal, modification, or other sale commitment associated with an order. */
export type Shopify_SalesAgreement = {
  __typename?: 'Shopify_SalesAgreement';
  /** The application that created the agreement. */
  app?: Maybe<Shopify_App>;
  /** The date and time at which the agreement occured. */
  happenedAt: Scalars['DateTime'];
  /** The unique identifier for the agreement. */
  id: Scalars['ID'];
  /** The reason the agremeent was created. */
  reason: Shopify_OrderActionType;
  /** The sales associated with the agreement. */
  sales: Shopify_SaleConnection;
};


/** An addition, removal, modification, or other sale commitment associated with an order. */
export type Shopify_SalesAgreementSalesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

export enum Shopify_OrderActionType {
  Order = 'ORDER',
  OrderEdit = 'ORDER_EDIT',
  Refund = 'REFUND',
  Unknown = 'UNKNOWN'
}

/** An auto-generated type for paginating through multiple Sales. */
export type Shopify_SaleConnection = {
  __typename?: 'Shopify_SaleConnection';
  /** A list of edges. */
  edges: Array<Shopify_SaleEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one Sale and a cursor during pagination. */
export type Shopify_SaleEdge = {
  __typename?: 'Shopify_SaleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of SaleEdge. */
  node: Shopify_Sale;
};

/** An individual sale record associated with a sales agreement. */
export type Shopify_Sale = {
  __typename?: 'Shopify_Sale';
  /** The type of order action that the sale represents. */
  actionType: Shopify_SaleActionType;
  /** The unique identifier for the sale. */
  id: Scalars['ID'];
  /** The line type assocated with the sale. */
  lineType: Shopify_SaleLineType;
  /** The number of units either ordered or intended to be returned. */
  quantity?: Maybe<Scalars['Int']>;
  /** All individual taxes associated with the sale. */
  taxes: Array<Shopify_SaleTax>;
  /** The total sale amount after taxes and discounts. */
  totalAmount: Shopify_MoneyBag;
  /** The total discounts allocated to the sale after taxes. */
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag;
  /** The total discounts allocated to the sale before taxes. */
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag;
  /** The total amount of taxes for the sale. */
  totalTaxAmount: Shopify_MoneyBag;
};

export enum Shopify_SaleActionType {
  Order = 'ORDER',
  Return = 'RETURN',
  Update = 'UPDATE',
  Unknown = 'UNKNOWN'
}

export enum Shopify_SaleLineType {
  Product = 'PRODUCT',
  Tip = 'TIP',
  GiftCard = 'GIFT_CARD',
  Shipping = 'SHIPPING',
  Duty = 'DUTY',
  Unknown = 'UNKNOWN',
  Adjustment = 'ADJUSTMENT'
}

/** The tax allocated to a sale from a single tax line. */
export type Shopify_SaleTax = {
  __typename?: 'Shopify_SaleTax';
  /** The portion of the total tax amount on the related sale that comes from the associated tax line. */
  amount: Shopify_MoneyBag;
  /** The unique identifier for the sale tax. */
  id: Scalars['ID'];
  /** The tax line associated with the sale. */
  taxLine: Shopify_TaxLine;
};

/**
 * A collection of monetary values in their respective currencies. Typically used in the context of multi-currency pricing and transactions,
 * when an amount in the shop's currency is converted to the customer's currency of choice (the presentment currency).
 */
export type Shopify_MoneyBag = {
  __typename?: 'Shopify_MoneyBag';
  /** Amount in presentment currency. */
  presentmentMoney: Shopify_MoneyV2;
  /** Amount in shop currency. */
  shopMoney: Shopify_MoneyV2;
};

/** Represents a single tax applied to the associated line item. */
export type Shopify_TaxLine = {
  __typename?: 'Shopify_TaxLine';
  /** Whether the channel that submitted the tax line is liable for remitting. A value of null indicates unknown liability for this tax line. */
  channelLiable?: Maybe<Scalars['Boolean']>;
  /**
   * The amount of tax, in shop currency, after discounts and before returns.
   * @deprecated Use `priceSet` instead
   */
  price: Scalars['Money'];
  /** The amount of tax, in shop and presentment currencies, after discounts and before returns. */
  priceSet: Shopify_MoneyBag;
  /** The proportion of the line item price that the tax represents as a decimal. */
  rate?: Maybe<Scalars['Float']>;
  /** The proportion of the line item price that the tax represents as a percentage. */
  ratePercentage?: Maybe<Scalars['Float']>;
  /** The name of the tax. */
  title: Scalars['String'];
};

/**
 * An alert message that appears in the Shopify admin about a problem with a store resource, with 1 or more actions to take. For example, you could use an alert to indicate that you're not charging taxes on some product variants.
 * They can optionally have a specific icon and be dismissed by merchants.
 */
export type Shopify_ResourceAlert = {
  __typename?: 'Shopify_ResourceAlert';
  /**
   * Buttons in the alert that link to related information.
   * For example, _Edit variants_.
   */
  actions: Array<Shopify_ResourceAlertAction>;
  /** The secondary text in the alert that includes further information or instructions about how to solve a problem. */
  content: Scalars['Html'];
  /**
   * Unique identifier that appears when an alert is manually closed by the merchant.
   * Most alerts cannot be manually closed.
   */
  dismissibleHandle?: Maybe<Scalars['String']>;
  /** An icon that is optionally displayed with the alert. */
  icon?: Maybe<Shopify_ResourceAlertIcon>;
  /** Indication of how important the alert is. */
  severity: Shopify_ResourceAlertSeverity;
  /** The primary text in the alert that includes information or describes the problem. */
  title: Scalars['String'];
};

/** An action associated to a resource alert, such as editing variants. */
export type Shopify_ResourceAlertAction = {
  __typename?: 'Shopify_ResourceAlertAction';
  /** Whether the action appears as a button or as a link. */
  primary: Scalars['Boolean'];
  /** Resource for the action to show. */
  show?: Maybe<Scalars['String']>;
  /** The text for the button in the alert. For example, _Edit variants_. */
  title: Scalars['String'];
  /** The target URL that the button links to. */
  url: Scalars['Url'];
};

export enum Shopify_ResourceAlertIcon {
  CheckmarkCircle = 'CHECKMARK_CIRCLE',
  InformationCircle = 'INFORMATION_CIRCLE'
}

export enum Shopify_ResourceAlertSeverity {
  Default = 'DEFAULT',
  Info = 'INFO',
  Warning = 'WARNING',
  Success = 'SUCCESS',
  Critical = 'CRITICAL',
  Error = 'ERROR'
}

/** The [application](https://shopify.dev/apps) that created the order. */
export type Shopify_OrderApp = {
  __typename?: 'Shopify_OrderApp';
  /** The application icon. */
  icon: Shopify_Image;
  /** The name of the application. */
  name: Scalars['String'];
};

export enum Shopify_OrderCancelReason {
  Customer = 'CUSTOMER',
  Fraud = 'FRAUD',
  Inventory = 'INVENTORY',
  Declined = 'DECLINED',
  Other = 'OTHER'
}

/** Represents a generic custom attribute. */
export type Shopify_Attribute = {
  __typename?: 'Shopify_Attribute';
  /** Key or name of the attribute. */
  key: Scalars['String'];
  /** Value of the attribute. */
  value?: Maybe<Scalars['String']>;
};

/** Represents a customer's visiting activities on a shop's online store. */
export type Shopify_CustomerJourney = {
  __typename?: 'Shopify_CustomerJourney';
  /** The position of the current order within the customer's order history. */
  customerOrderIndex: Scalars['Int'];
  /** The amount of days between first session and order creation date. First session represents first session since the last order, or first session within the 30 day attribution window, if more than 30 days has passed since the last order. */
  daysToConversion: Scalars['Int'];
  /** The customer's first session going into the shop. */
  firstVisit: Shopify_CustomerVisit;
  /** The last session before an order is made. */
  lastVisit?: Maybe<Shopify_CustomerVisit>;
  /** Events preceding a customer order, such as shop sessions. */
  moments: Array<Shopify_CustomerMoment>;
};

/** Represents a customer's session visiting a shop's online store, including information about the marketing activity attributed to starting the session. */
export type Shopify_CustomerVisit = {
  __typename?: 'Shopify_CustomerVisit';
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** URL of the first page the customer landed on for the session. */
  landingPage?: Maybe<Scalars['Url']>;
  /** Landing page information with URL linked in HTML. For example, the first page the customer visited was store.myshopify.com/products/1. */
  landingPageHtml?: Maybe<Scalars['Html']>;
  /**
   * Represent actions taken by an app, on behalf of a merchant,
   * to market Shopify resources such as products, collections, and discounts.
   */
  marketingEvent?: Maybe<Shopify_MarketingEvent>;
  /** The date and time when the customer's session occurred. */
  occurredAt: Scalars['DateTime'];
  /**
   * Marketing referral code from the link that the customer clicked to visit the store.
   * Supports the following URL attributes: _ref_, _source_, or _r_.
   * For example, if the URL is myshopifystore.com/products/slide?ref=j2tj1tn2, then this value is j2tj1tn2.
   */
  referralCode?: Maybe<Scalars['String']>;
  /** Referral information with URLs linked in HTML. */
  referralInfoHtml: Scalars['FormattedString'];
  /**
   * Webpage where the customer clicked a link that sent them to the online store.
   * For example, _https://randomblog.com/page1_ or _android-app://com.google.android.gm_.
   */
  referrerUrl?: Maybe<Scalars['Url']>;
  /**
   * Source from which the customer visited the store, such as a platform (Facebook, Google), email, direct,
   * a website domain, QR code, or unknown.
   */
  source: Scalars['String'];
  /** Describes the source explicitly for first or last session. */
  sourceDescription?: Maybe<Scalars['String']>;
  /** Type of marketing tactic. */
  sourceType?: Maybe<Shopify_MarketingTactic>;
  /** A set of UTM parameters gathered from the URL parameters of the referrer. */
  utmParameters?: Maybe<Shopify_UtmParameters>;
};

/** Represents actions that market a merchant's store or products. */
export type Shopify_MarketingEvent = {
  __typename?: 'Shopify_MarketingEvent';
  /** The app that the marketing event is attributed to. */
  app: Shopify_App;
  /** The marketing channel used by the marketing event. */
  channel?: Maybe<Shopify_MarketingChannel>;
  /** A human-readable description of the marketing event. */
  description?: Maybe<Scalars['String']>;
  /** The date and time when the marketing event ended. */
  endedAt?: Maybe<Scalars['DateTime']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['UnsignedInt64'];
  /** The URL where the marketing event can be managed. */
  manageUrl?: Maybe<Scalars['Url']>;
  /** The URL where the marketing event can be previewed. */
  previewUrl?: Maybe<Scalars['Url']>;
  /** An optional ID that helps Shopify validate engagement data. */
  remoteId?: Maybe<Scalars['String']>;
  /** The date and time when the marketing event is scheduled to end. */
  scheduledToEndAt?: Maybe<Scalars['DateTime']>;
  /**
   * Where the `MarketingEvent` occurred and what kind of content was used.
   * Because `utmSource` and `utmMedium` are often used interchangeably, this is
   * based on a combination of `marketingChannel`, `referringDomain`, and `type` to
   * provide a consistent representation for any given piece of marketing
   * regardless of the app that created it.
   */
  sourceAndMedium: Scalars['String'];
  /** The date and time when the marketing event started. */
  startedAt: Scalars['DateTime'];
  /**
   * The display text for the marketing event type.
   * @deprecated Use `sourceAndMedium` instead
   */
  targetTypeDisplayText: Scalars['String'];
  /** The marketing event type. */
  type: Shopify_MarketingTactic;
  /** The name of the marketing campaign. */
  utmCampaign?: Maybe<Scalars['String']>;
  /** The medium that the marketing campaign is using. Example values: `cpc`, `banner`. */
  utmMedium?: Maybe<Scalars['String']>;
  /** The referrer of the marketing event. Example values: `google`, `newsletter`. */
  utmSource?: Maybe<Scalars['String']>;
};

export enum Shopify_MarketingChannel {
  Search = 'SEARCH',
  Display = 'DISPLAY',
  Social = 'SOCIAL',
  Email = 'EMAIL',
  Referral = 'REFERRAL'
}

export enum Shopify_MarketingTactic {
  AbandonedCart = 'ABANDONED_CART',
  Ad = 'AD',
  Affiliate = 'AFFILIATE',
  Link = 'LINK',
  Loyalty = 'LOYALTY',
  Message = 'MESSAGE',
  Newsletter = 'NEWSLETTER',
  Notification = 'NOTIFICATION',
  Post = 'POST',
  Retargeting = 'RETARGETING',
  Transactional = 'TRANSACTIONAL',
  Seo = 'SEO',
  Direct = 'DIRECT',
  StorefrontApp = 'STOREFRONT_APP',
  Display = 'DISPLAY',
  Search = 'SEARCH',
  FollowUp = 'FOLLOW_UP',
  Receipt = 'RECEIPT'
}

/** Represents a set of UTM parameters. */
export type Shopify_UtmParameters = {
  __typename?: 'Shopify_UTMParameters';
  /** The name of a marketing campaign. */
  campaign?: Maybe<Scalars['String']>;
  /** Identifies specific content in a marketing campaign. Used to differentiate between similar content or links in a marketing campaign to determine which is the most effective. */
  content?: Maybe<Scalars['String']>;
  /** The medium of a marketing campaign, such as a banner or email newsletter. */
  medium?: Maybe<Scalars['String']>;
  /** The source of traffic to the merchant's store, such as Google or an email newsletter. */
  source?: Maybe<Scalars['String']>;
  /** Paid search terms used by a marketing campaign. */
  term?: Maybe<Scalars['String']>;
};

/** Represents a session preceding an order, often used for building a timeline of events leading to an order. */
export type Shopify_CustomerMoment = {
  __typename?: 'Shopify_CustomerMoment';
  /** The date and time when the customer's session occurred. */
  occurredAt: Scalars['DateTime'];
};

/** Represents a customer's visiting activities on a shop's online store. */
export type Shopify_CustomerJourneySummary = {
  __typename?: 'Shopify_CustomerJourneySummary';
  /** The position of the current order within the customer's order history. Test orders aren't included. */
  customerOrderIndex?: Maybe<Scalars['Int']>;
  /** The number of days between the first session and the order creation date. The first session represents the first session since the last order, or the first session within the 30 day attribution window, if more than 30 days have passed since the last order. */
  daysToConversion?: Maybe<Scalars['Int']>;
  /** The customer's first session going into the shop. */
  firstVisit?: Maybe<Shopify_CustomerVisit>;
  /** The last session before an order is made. */
  lastVisit?: Maybe<Shopify_CustomerVisit>;
  /** The events preceding a customer's order, such as shop sessions. */
  moments?: Maybe<Shopify_CustomerMomentConnection>;
  /** The total number of customer moments associated with this order. Returns null if the order is still in the process of being attributed. */
  momentsCount?: Maybe<Scalars['Int']>;
  /** Whether or not the attributed sessions for the order have been created yet. */
  ready: Scalars['Boolean'];
};


/** Represents a customer's visiting activities on a shop's online store. */
export type Shopify_CustomerJourneySummaryMomentsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** An auto-generated type for paginating through multiple CustomerMoments. */
export type Shopify_CustomerMomentConnection = {
  __typename?: 'Shopify_CustomerMomentConnection';
  /** A list of edges. */
  edges: Array<Shopify_CustomerMomentEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one CustomerMoment and a cursor during pagination. */
export type Shopify_CustomerMomentEdge = {
  __typename?: 'Shopify_CustomerMomentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of CustomerMomentEdge. */
  node: Shopify_CustomerMoment;
};

/** An auto-generated type for paginating through multiple DiscountApplications. */
export type Shopify_DiscountApplicationConnection = {
  __typename?: 'Shopify_DiscountApplicationConnection';
  /** A list of edges. */
  edges: Array<Shopify_DiscountApplicationEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one DiscountApplication and a cursor during pagination. */
export type Shopify_DiscountApplicationEdge = {
  __typename?: 'Shopify_DiscountApplicationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of DiscountApplicationEdge. */
  node: Shopify_DiscountApplication;
};

/**
 * Discount applications capture the intentions of a discount source at
 * the time of application on an order's line items or shipping lines.
 *
 * Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/2022-04/objects/discountallocation) object.
 */
export type Shopify_DiscountApplication = {
  __typename?: 'Shopify_DiscountApplication';
  /** The method by which the discount's value is applied to its entitled items. */
  allocationMethod: Shopify_DiscountApplicationAllocationMethod;
  /**
   * An ordered index that can be used to identify the discount application and indicate the precedence
   * of the discount application for calculations.
   */
  index: Scalars['Int'];
  /** How the discount amount is distributed on the discounted lines. */
  targetSelection: Shopify_DiscountApplicationTargetSelection;
  /** Whether the discount is applied on line items or shipping lines. */
  targetType: Shopify_DiscountApplicationTargetType;
  /** The value of the discount application. */
  value: Shopify_PricingValue;
};

export enum Shopify_DiscountApplicationAllocationMethod {
  Across = 'ACROSS',
  Each = 'EACH',
  One = 'ONE'
}

export enum Shopify_DiscountApplicationTargetSelection {
  All = 'ALL',
  Entitled = 'ENTITLED',
  Explicit = 'EXPLICIT'
}

export enum Shopify_DiscountApplicationTargetType {
  LineItem = 'LINE_ITEM',
  ShippingLine = 'SHIPPING_LINE'
}

/** The type of value given to a customer when a discount is applied to an order. For example, the application of the discount might give the customer a percentage off a specified item. Alternatively, the application of the discount might give the customer a monetary value in a given currency off an order. */
export type Shopify_PricingValue = Shopify_MoneyV2 | Shopify_PricingPercentageValue;

/** The value of the percentage pricing object. */
export type Shopify_PricingPercentageValue = {
  __typename?: 'Shopify_PricingPercentageValue';
  /** The percentage value of the object. */
  percentage: Scalars['Float'];
};

export enum Shopify_OrderDisplayFinancialStatus {
  Pending = 'PENDING',
  Authorized = 'AUTHORIZED',
  PartiallyPaid = 'PARTIALLY_PAID',
  PartiallyRefunded = 'PARTIALLY_REFUNDED',
  Voided = 'VOIDED',
  Paid = 'PAID',
  Refunded = 'REFUNDED',
  Expired = 'EXPIRED'
}

export enum Shopify_OrderDisplayFulfillmentStatus {
  Unfulfilled = 'UNFULFILLED',
  PartiallyFulfilled = 'PARTIALLY_FULFILLED',
  Fulfilled = 'FULFILLED',
  Restocked = 'RESTOCKED',
  PendingFulfillment = 'PENDING_FULFILLMENT',
  Open = 'OPEN',
  InProgress = 'IN_PROGRESS',
  OnHold = 'ON_HOLD',
  Scheduled = 'SCHEDULED'
}

/** A summary of the important details for a dispute on an order. */
export type Shopify_OrderDisputeSummary = {
  __typename?: 'Shopify_OrderDisputeSummary';
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The type that the dispute was initiated as. */
  initiatedAs: Shopify_DisputeType;
  /** The current status of the dispute. */
  status: Shopify_DisputeStatus;
};

export enum Shopify_DisputeType {
  Chargeback = 'CHARGEBACK',
  Inquiry = 'INQUIRY'
}

export enum Shopify_DisputeStatus {
  NeedsResponse = 'NEEDS_RESPONSE',
  UnderReview = 'UNDER_REVIEW',
  ChargeRefunded = 'CHARGE_REFUNDED',
  Accepted = 'ACCEPTED',
  Won = 'WON',
  Lost = 'LOST'
}

/** Returns unfulfilled line items grouped by their fulfillment service. Each draft fulfillment contains additional information, such as whether the fulfillment requires shipping and whether a shipping label can be printed for it. */
export type Shopify_DraftFulfillment = {
  __typename?: 'Shopify_DraftFulfillment';
  /** Whether a label can be purchased. */
  allowLabelPurchase: Scalars['Boolean'];
  /** The line items (which might correspond to a variant) that are part of this draft fulfillment. */
  lineItems: Array<Shopify_LineItem>;
  /** Whether a fulfillment requires shipping. */
  requiresShipping: Scalars['Boolean'];
  /** The service responsible for fulfilling the fulfillment. */
  service: Shopify_FulfillmentService;
};

/** Represents a single line item on an order. */
export type Shopify_LineItem = {
  __typename?: 'Shopify_LineItem';
  /**
   * Whether the line item can be restocked.
   * @deprecated Use `restockable` instead
   */
  canRestock: Scalars['Boolean'];
  /** The subscription contract associated with this line item. */
  contract?: Maybe<Shopify_SubscriptionContract>;
  /** The line item's quantity, minus the removed quantity. */
  currentQuantity: Scalars['Int'];
  /** A list of additional information about the line item. */
  customAttributes: Array<Shopify_Attribute>;
  /** The discounts that have been allocated onto the line item by discount applications. */
  discountAllocations: Array<Shopify_DiscountAllocation>;
  /**
   * The total line price after discounts are applied, in shop currency.
   * @deprecated Use `discountedTotalSet` instead
   */
  discountedTotal: Scalars['Money'];
  /** The total line price after discounts are applied, in shop and presentment currencies. */
  discountedTotalSet: Shopify_MoneyBag;
  /**
   * The approximate split price of a line item unit, in shop currency. This value doesn't include discounts applied to the entire order.
   * @deprecated Use `discountedUnitPriceSet` instead
   */
  discountedUnitPrice: Scalars['Money'];
  /** The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order. */
  discountedUnitPriceSet: Shopify_MoneyBag;
  /** The duties associated with the line item. */
  duties: Array<Shopify_Duty>;
  /**
   * The total number of units to fulfill.
   * @deprecated Use [FulfillmentOrderLineItem#remainingQuantity](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderLineItem#field-fulfillmentorderlineitem-remainingquantity) instead.
   */
  fulfillableQuantity: Scalars['Int'];
  /**
   * The service provider that fulfills the line item.
   *
   * Deleted fulfillment services will return null.
   * @deprecated Use [FulfillmentOrder#assignedLocation](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder#field-fulfillmentorder-assignedlocation) instead.
   */
  fulfillmentService?: Maybe<Shopify_FulfillmentService>;
  /**
   * The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
   * 'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
   * @deprecated Use [FulfillmentOrderLineItem#remainingQuantity](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderLineItem#field-fulfillmentorderlineitem-remainingquantity) instead
   */
  fulfillmentStatus: Scalars['String'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The image associated to the line item's variant. */
  image?: Maybe<Shopify_Image>;
  /** Whether the line item can be edited or not. */
  merchantEditable: Scalars['Boolean'];
  /** The name of the product. */
  name: Scalars['String'];
  /**
   * The total number of units that can't be fulfilled.
   *         For example, if items have been refunded, or the item is not something that can be fulfilled,
   *         like a tip.Please see the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object for more fulfillment details.
   */
  nonFulfillableQuantity: Scalars['Int'];
  /**
   * The total price without discounts applied, in shop currency.
   * This value is based on the unit price of the variant x quantity.
   * @deprecated Use `originalTotalSet` instead
   */
  originalTotal: Scalars['Money'];
  /** The total price in shop and presentment currencies, without discounts applied. This value is based on the unit price of the variant x quantity. */
  originalTotalSet: Shopify_MoneyBag;
  /**
   * The variant unit price without discounts applied, in shop currency.
   * @deprecated Use `originalUnitPriceSet` instead
   */
  originalUnitPrice: Scalars['Money'];
  /** The variant unit price without discounts applied, in shop and presentment currencies. */
  originalUnitPriceSet: Shopify_MoneyBag;
  /** The Product object associated with this line item's variant. */
  product?: Maybe<Shopify_Product>;
  /** The number of variant units ordered. */
  quantity: Scalars['Int'];
  /** The line item's quantity, minus the removed quantity. */
  refundableQuantity: Scalars['Int'];
  /** Whether physical shipping is required for the variant. */
  requiresShipping: Scalars['Boolean'];
  /** Whether the line item can be restocked. */
  restockable: Scalars['Boolean'];
  /** The selling plan details associated with the line item. */
  sellingPlan?: Maybe<Shopify_LineItemSellingPlan>;
  /** The variant SKU number. */
  sku?: Maybe<Scalars['String']>;
  /** The taxes charged for this line item. */
  taxLines: Array<Shopify_TaxLine>;
  /** Whether the variant is taxable. */
  taxable: Scalars['Boolean'];
  /** The title of the product. */
  title: Scalars['String'];
  /**
   * The sum of all AppliedDiscounts on this line item, in shop currency.
   * @deprecated Use `totalDiscountSet` instead
   */
  totalDiscount: Scalars['Money'];
  /** The sum of all AppliedDiscounts on this line item, in shop and presentment currencies. */
  totalDiscountSet: Shopify_MoneyBag;
  /**
   * The total discounted value of unfulfilled units, in shop currency.
   * @deprecated Use `unfulfilledDiscountedTotalSet` instead
   */
  unfulfilledDiscountedTotal: Scalars['Money'];
  /** The total discounted value of unfulfilled units, in shop and presentment currencies. */
  unfulfilledDiscountedTotalSet: Shopify_MoneyBag;
  /**
   * The total price, without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop currency.
   * @deprecated Use `unfulfilledOriginalTotalSet` instead
   */
  unfulfilledOriginalTotal: Scalars['Money'];
  /** The total price, without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop and presentment currencies. */
  unfulfilledOriginalTotalSet: Shopify_MoneyBag;
  /** The number of units not yet fulfilled. */
  unfulfilledQuantity: Scalars['Int'];
  /** The Variant object associated with this line item. */
  variant?: Maybe<Shopify_ProductVariant>;
  /** The name of the variant. */
  variantTitle?: Maybe<Scalars['String']>;
  /** The name of the vendor who made the variant. */
  vendor?: Maybe<Scalars['String']>;
};


/** Represents a single line item on an order. */
export type Shopify_LineItemImageArgs = {
  maxWidth?: InputMaybe<Scalars['Int']>;
  maxHeight?: InputMaybe<Scalars['Int']>;
  crop?: InputMaybe<Shopify_CropRegion>;
  scale?: InputMaybe<Scalars['Int']>;
};


/** Represents a single line item on an order. */
export type Shopify_LineItemTaxLinesArgs = {
  first?: InputMaybe<Scalars['Int']>;
};

/** Represents a Subscription Contract. */
export type Shopify_SubscriptionContract = {
  __typename?: 'Shopify_SubscriptionContract';
  /** The subscription app that this subscription contract is registered to. */
  app?: Maybe<Shopify_App>;
  /** URL of the subscription contract page on the subscription app. */
  appAdminUrl?: Maybe<Scalars['Url']>;
  /** The list of billing attempts associated with the subscription contract. */
  billingAttempts: Shopify_SubscriptionBillingAttemptConnection;
  /** The billing policy associated with the subscription contract. */
  billingPolicy: Shopify_SubscriptionBillingPolicy;
  /** The date and time when the subscription contract was created. */
  createdAt: Scalars['DateTime'];
  /** The currency used for the subscription contract. */
  currencyCode: Shopify_CurrencyCode;
  /** The customer to whom the subscription contract belongs. */
  customer?: Maybe<Shopify_Customer>;
  /** The customer payment method used for the subscription contract. */
  customerPaymentMethod?: Maybe<Shopify_CustomerPaymentMethod>;
  /** The delivery method for each billing of the subscription contract. */
  deliveryMethod?: Maybe<Shopify_SubscriptionDeliveryMethod>;
  /** The delivery policy associated with the subscription contract. */
  deliveryPolicy: Shopify_SubscriptionDeliveryPolicy;
  /** The delivery price for each billing of the subscription contract. */
  deliveryPrice: Shopify_MoneyV2;
  /** The list of subscription discounts associated with the subscription contract. */
  discounts: Shopify_SubscriptionManualDiscountConnection;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The current status of the last payment. */
  lastPaymentStatus?: Maybe<Shopify_SubscriptionContractLastPaymentStatus>;
  /** The number of lines associated with the subscription contract. */
  lineCount: Scalars['Int'];
  /** The list of subscription lines associated with the subscription contract. */
  lines: Shopify_SubscriptionLineConnection;
  /** The next billing date for the subscription contract. */
  nextBillingDate?: Maybe<Scalars['DateTime']>;
  /** The note field that will be applied to the generated orders. */
  note?: Maybe<Scalars['String']>;
  /** A list of the subscription contract's orders. */
  orders: Shopify_OrderConnection;
  /** The order from which this contract originated. */
  originOrder?: Maybe<Shopify_Order>;
  /** The current status of the subscription contract. */
  status: Shopify_SubscriptionContractSubscriptionStatus;
  /** The date and time when the subscription contract was updated. */
  updatedAt: Scalars['DateTime'];
};


/** Represents a Subscription Contract. */
export type Shopify_SubscriptionContractBillingAttemptsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** Represents a Subscription Contract. */
export type Shopify_SubscriptionContractCustomerPaymentMethodArgs = {
  showRevoked?: InputMaybe<Scalars['Boolean']>;
};


/** Represents a Subscription Contract. */
export type Shopify_SubscriptionContractDiscountsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** Represents a Subscription Contract. */
export type Shopify_SubscriptionContractLinesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** Represents a Subscription Contract. */
export type Shopify_SubscriptionContractOrdersArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** An auto-generated type for paginating through multiple SubscriptionBillingAttempts. */
export type Shopify_SubscriptionBillingAttemptConnection = {
  __typename?: 'Shopify_SubscriptionBillingAttemptConnection';
  /** A list of edges. */
  edges: Array<Shopify_SubscriptionBillingAttemptEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one SubscriptionBillingAttempt and a cursor during pagination. */
export type Shopify_SubscriptionBillingAttemptEdge = {
  __typename?: 'Shopify_SubscriptionBillingAttemptEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of SubscriptionBillingAttemptEdge. */
  node: Shopify_SubscriptionBillingAttempt;
};

/**
 * A record of an execution of the subscription billing process. Billing attempts use
 * idempotency keys to avoid duplicate order creation. A successful billing attempt
 * will create an order.
 */
export type Shopify_SubscriptionBillingAttempt = {
  __typename?: 'Shopify_SubscriptionBillingAttempt';
  /** The date and time when the billing attempt was completed. */
  completedAt?: Maybe<Scalars['DateTime']>;
  /** The date and time when the billing attempt was created. */
  createdAt: Scalars['DateTime'];
  /** A code corresponding to a payment error during processing. */
  errorCode?: Maybe<Shopify_SubscriptionBillingAttemptErrorCode>;
  /** A message describing a payment error during processing. */
  errorMessage?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** A unique key generated by the client to avoid duplicate payments. */
  idempotencyKey: Scalars['String'];
  /** The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow. */
  nextActionUrl?: Maybe<Scalars['Url']>;
  /** The result of this billing attempt if completed successfully. */
  order?: Maybe<Shopify_Order>;
  /** Whether or not the billing attempt is still processing. */
  ready: Scalars['Boolean'];
  /** The subscription contract. */
  subscriptionContract: Shopify_SubscriptionContract;
};

export enum Shopify_SubscriptionBillingAttemptErrorCode {
  PaymentMethodNotFound = 'PAYMENT_METHOD_NOT_FOUND',
  PaymentProviderIsNotEnabled = 'PAYMENT_PROVIDER_IS_NOT_ENABLED',
  InvalidPaymentMethod = 'INVALID_PAYMENT_METHOD',
  UnexpectedError = 'UNEXPECTED_ERROR',
  ExpiredPaymentMethod = 'EXPIRED_PAYMENT_METHOD',
  PaymentMethodDeclined = 'PAYMENT_METHOD_DECLINED',
  AuthenticationError = 'AUTHENTICATION_ERROR',
  TestMode = 'TEST_MODE',
  BuyerCanceledPaymentMethod = 'BUYER_CANCELED_PAYMENT_METHOD',
  CustomerNotFound = 'CUSTOMER_NOT_FOUND',
  CustomerInvalid = 'CUSTOMER_INVALID',
  InvalidShippingAddress = 'INVALID_SHIPPING_ADDRESS'
}

/** Represents a Subscription Billing Policy. */
export type Shopify_SubscriptionBillingPolicy = {
  __typename?: 'Shopify_SubscriptionBillingPolicy';
  /** Specific anchor dates upon which the billing interval calculations should be made. */
  anchors: Array<Shopify_SellingPlanAnchor>;
  /** The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc). */
  interval: Shopify_SellingPlanInterval;
  /** The number of billing intervals between invoices. */
  intervalCount: Scalars['Int'];
  /** Maximum amount of cycles after which the subscription ends. */
  maxCycles?: Maybe<Scalars['Int']>;
  /** Minimum amount of cycles required in the subscription. */
  minCycles?: Maybe<Scalars['Int']>;
};

/** A customer's payment method. */
export type Shopify_CustomerPaymentMethod = {
  __typename?: 'Shopify_CustomerPaymentMethod';
  /** The customer to whom the payment method belongs. */
  customer?: Maybe<Shopify_Customer>;
  /** The ID of this payment method. */
  id: Scalars['ID'];
  /** The instrument for this payment method. */
  instrument?: Maybe<Shopify_CustomerPaymentInstrument>;
  /** The time that the payment method was revoked. */
  revokedAt?: Maybe<Scalars['DateTime']>;
  /** The revocation reason for this payment method. */
  revokedReason?: Maybe<Shopify_CustomerPaymentMethodRevocationReason>;
  /** List Subscription Contracts. */
  subscriptionContracts: Shopify_SubscriptionContractConnection;
};


/** A customer's payment method. */
export type Shopify_CustomerPaymentMethodSubscriptionContractsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** All possible instruments for CustomerPaymentMethods. */
export type Shopify_CustomerPaymentInstrument = Shopify_CustomerCreditCard | Shopify_CustomerPaypalBillingAgreement | Shopify_CustomerShopPayAgreement;

/** Represents a card instrument for customer payment method. */
export type Shopify_CustomerCreditCard = {
  __typename?: 'Shopify_CustomerCreditCard';
  /** The billing address of the card. */
  billingAddress?: Maybe<Shopify_CustomerCreditCardBillingAddress>;
  /** The brand of the card. */
  brand: Scalars['String'];
  /** Whether the card is about to expire. */
  expiresSoon: Scalars['Boolean'];
  /** The expiry month of the card. */
  expiryMonth: Scalars['Int'];
  /** The expiry year of the card. */
  expiryYear: Scalars['Int'];
  /** The card's BIN number. */
  firstDigits?: Maybe<Scalars['String']>;
  /** The payment method can be revoked if there are no active subscription contracts. */
  isRevocable: Scalars['Boolean'];
  /** The last 4 digits of the card. */
  lastDigits: Scalars['String'];
  /** The masked card number with only the last 4 digits displayed. */
  maskedNumber: Scalars['String'];
  /** The name of the card holder. */
  name: Scalars['String'];
  /** The source of the card if coming from a wallet such as Apple Pay. */
  source?: Maybe<Scalars['String']>;
  /** The last 4 digits of the Device Account Number. */
  virtualLastDigits?: Maybe<Scalars['String']>;
};

/** The billing address of a credit card payment instrument. */
export type Shopify_CustomerCreditCardBillingAddress = {
  __typename?: 'Shopify_CustomerCreditCardBillingAddress';
  /** The first line of the address. Typically the street address or PO Box number. */
  address1?: Maybe<Scalars['String']>;
  /** The name of the city, district, village, or town. */
  city?: Maybe<Scalars['String']>;
  /** The name of the country. */
  country?: Maybe<Scalars['String']>;
  /**
   * The two-letter code for the country of the address.
   * For example, US.
   */
  countryCode?: Maybe<Shopify_CountryCode>;
  /** The region of the address, such as the province, state, or district. */
  province?: Maybe<Scalars['String']>;
  /**
   * The two-letter code for the region.
   * For example, ON.
   */
  provinceCode?: Maybe<Scalars['String']>;
  /** The zip or postal code of the address. */
  zip?: Maybe<Scalars['String']>;
};

/** Represents a PayPal instrument for customer payment method. */
export type Shopify_CustomerPaypalBillingAgreement = {
  __typename?: 'Shopify_CustomerPaypalBillingAgreement';
  /** The billing address of this payment method. */
  billingAddress?: Maybe<Shopify_CustomerPaymentInstrumentBillingAddress>;
  /** Whether the PayPal billing agreement is inactive. */
  inactive: Scalars['Boolean'];
  /** Whether the payment method can be revoked.The payment method can be revoked if there are no active subscription contracts. */
  isRevocable: Scalars['Boolean'];
  /** The customers's PayPal account email address. */
  paypalAccountEmail?: Maybe<Scalars['String']>;
};

/** The billing address of a payment instrument. */
export type Shopify_CustomerPaymentInstrumentBillingAddress = {
  __typename?: 'Shopify_CustomerPaymentInstrumentBillingAddress';
  /** The first line of the address. Typically the street address or PO Box number. */
  address1?: Maybe<Scalars['String']>;
  /** The name of the city, district, village, or town. */
  city?: Maybe<Scalars['String']>;
  /** The name of the country. */
  country?: Maybe<Scalars['String']>;
  /**
   * The two-letter code for the country of the address.
   * For example, US.
   */
  countryCode?: Maybe<Shopify_CountryCode>;
  /** The name of the buyer of the address. */
  name?: Maybe<Scalars['String']>;
  /** The region of the address, such as the province, state, or district. */
  province?: Maybe<Scalars['String']>;
  /**
   * The two-letter code for the region.
   * For example, ON.
   */
  provinceCode?: Maybe<Scalars['String']>;
  /** The zip or postal code of the address. */
  zip?: Maybe<Scalars['String']>;
};

/** Represents a Shop Pay card instrument for customer payment method. */
export type Shopify_CustomerShopPayAgreement = {
  __typename?: 'Shopify_CustomerShopPayAgreement';
  /** Whether the card is about to expire. */
  expiresSoon: Scalars['Boolean'];
  /** The expiry month of the card. */
  expiryMonth: Scalars['Int'];
  /** The expiry year of the card. */
  expiryYear: Scalars['Int'];
  /** Whether the Shop Pay billing agreement is inactive. */
  inactive: Scalars['Boolean'];
  /** The payment method can be revoked if there are no active subscription contracts. */
  isRevocable: Scalars['Boolean'];
  /** The last 4 digits of the card. */
  lastDigits: Scalars['String'];
  /** The masked card number with only the last 4 digits displayed. */
  maskedNumber: Scalars['String'];
  /** The name of the card holder. */
  name: Scalars['String'];
};

export enum Shopify_CustomerPaymentMethodRevocationReason {
  AuthorizeNetGatewayNotEnabled = 'AUTHORIZE_NET_GATEWAY_NOT_ENABLED',
  AuthorizeNetReturnedNoPaymentMethod = 'AUTHORIZE_NET_RETURNED_NO_PAYMENT_METHOD',
  FailedToUpdateCreditCard = 'FAILED_TO_UPDATE_CREDIT_CARD',
  ManuallyRevoked = 'MANUALLY_REVOKED',
  StripeApiAuthenticationError = 'STRIPE_API_AUTHENTICATION_ERROR',
  StripeApiInvalidRequestError = 'STRIPE_API_INVALID_REQUEST_ERROR',
  StripeGatewayNotEnabled = 'STRIPE_GATEWAY_NOT_ENABLED',
  StripeReturnedNoPaymentMethod = 'STRIPE_RETURNED_NO_PAYMENT_METHOD',
  StripePaymentMethodNotCard = 'STRIPE_PAYMENT_METHOD_NOT_CARD'
}

/** An auto-generated type for paginating through multiple SubscriptionContracts. */
export type Shopify_SubscriptionContractConnection = {
  __typename?: 'Shopify_SubscriptionContractConnection';
  /** A list of edges. */
  edges: Array<Shopify_SubscriptionContractEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one SubscriptionContract and a cursor during pagination. */
export type Shopify_SubscriptionContractEdge = {
  __typename?: 'Shopify_SubscriptionContractEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of SubscriptionContractEdge. */
  node: Shopify_SubscriptionContract;
};

/** Describes the delivery method to use to get the physical goods to the customer. */
export type Shopify_SubscriptionDeliveryMethod = Shopify_SubscriptionDeliveryMethodShipping;

/** Represents a shipping delivery method: a mailing address and a shipping option. */
export type Shopify_SubscriptionDeliveryMethodShipping = {
  __typename?: 'Shopify_SubscriptionDeliveryMethodShipping';
  /** The address to ship to. */
  address: Shopify_SubscriptionMailingAddress;
  /** The details of the shipping method to use. */
  shippingOption: Shopify_SubscriptionDeliveryMethodShippingOption;
};

/** Represents a Mailing Address on a Subscription. */
export type Shopify_SubscriptionMailingAddress = {
  __typename?: 'Shopify_SubscriptionMailingAddress';
  /** The first line of the address. Typically the street address or PO Box number. */
  address1?: Maybe<Scalars['String']>;
  /** The second line of the address. Typically the number of the apartment, suite, or unit. */
  address2?: Maybe<Scalars['String']>;
  /** The name of the city, district, village, or town. */
  city?: Maybe<Scalars['String']>;
  /** The name of the customer's company or organization. */
  company?: Maybe<Scalars['String']>;
  /** The name of the country. */
  country?: Maybe<Scalars['String']>;
  /**
   * The two-letter code for the country of the address.
   *
   * For example, US.
   */
  countryCode?: Maybe<Shopify_CountryCode>;
  /** The first name of the customer. */
  firstName?: Maybe<Scalars['String']>;
  /** The last name of the customer. */
  lastName?: Maybe<Scalars['String']>;
  /** The full name of the customer, based on firstName and lastName. */
  name?: Maybe<Scalars['String']>;
  /** A unique phone number for the customer. Formatted using E.164 standard. For example, _+16135551111_. */
  phone?: Maybe<Scalars['String']>;
  /** The region of the address, such as the province, state, or district. */
  province?: Maybe<Scalars['String']>;
  /**
   * The two-letter code for the region.
   *
   * For example, ON.
   */
  provinceCode?: Maybe<Scalars['String']>;
  /** The zip or postal code of the address. */
  zip?: Maybe<Scalars['String']>;
};

/** Represents the selected shipping option on a subscription contract. */
export type Shopify_SubscriptionDeliveryMethodShippingOption = {
  __typename?: 'Shopify_SubscriptionDeliveryMethodShippingOption';
  /** The carrier service of the shipping option. */
  carrierService?: Maybe<Shopify_DeliveryCarrierService>;
  /** The code of the shipping option. */
  code?: Maybe<Scalars['String']>;
  /** The description of the shipping option. */
  description?: Maybe<Scalars['String']>;
  /** The presentment title of the shipping option. */
  presentmentTitle?: Maybe<Scalars['String']>;
  /** The title of the shipping option. */
  title?: Maybe<Scalars['String']>;
};

/** Represents a Subscription Delivery Policy. */
export type Shopify_SubscriptionDeliveryPolicy = {
  __typename?: 'Shopify_SubscriptionDeliveryPolicy';
  /** Specific anchor dates upon which the delivery interval calculations should be made. */
  anchors: Array<Shopify_SellingPlanAnchor>;
  /** The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc). */
  interval: Shopify_SellingPlanInterval;
  /** The number of delivery intervals between deliveries. */
  intervalCount: Scalars['Int'];
};

/** An auto-generated type for paginating through multiple SubscriptionManualDiscounts. */
export type Shopify_SubscriptionManualDiscountConnection = {
  __typename?: 'Shopify_SubscriptionManualDiscountConnection';
  /** A list of edges. */
  edges: Array<Shopify_SubscriptionManualDiscountEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one SubscriptionManualDiscount and a cursor during pagination. */
export type Shopify_SubscriptionManualDiscountEdge = {
  __typename?: 'Shopify_SubscriptionManualDiscountEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of SubscriptionManualDiscountEdge. */
  node: Shopify_SubscriptionManualDiscount;
};

/** Custom subscription discount. */
export type Shopify_SubscriptionManualDiscount = {
  __typename?: 'Shopify_SubscriptionManualDiscount';
  /** Entitled line items used to apply the subscription discount on. */
  entitledLines: Shopify_SubscriptionDiscountEntitledLines;
  /** The unique identifier. */
  id: Scalars['ID'];
  /** The maximum number of times the subscription discount will be applied on orders. */
  recurringCycleLimit?: Maybe<Scalars['Int']>;
  /** The reason that the discount on the subscription draft is rejected. */
  rejectionReason?: Maybe<Shopify_SubscriptionDiscountRejectionReason>;
  /** Type of line the discount applies on. */
  targetType: Shopify_DiscountTargetType;
  /** The title associated with the subscription discount. */
  title?: Maybe<Scalars['String']>;
  /** The type of the subscription discount. */
  type: Shopify_DiscountType;
  /** The number of times the discount was applied. */
  usageCount: Scalars['Int'];
  /** The value of the subscription discount. */
  value: Shopify_SubscriptionDiscountValue;
};

/** Represents the subscription lines the discount applies on. */
export type Shopify_SubscriptionDiscountEntitledLines = {
  __typename?: 'Shopify_SubscriptionDiscountEntitledLines';
  /** Specify whether the subscription discount will apply on all subscription lines. */
  all: Scalars['Boolean'];
  /** The list of subscription lines associated with the subscription discount. */
  lines: Shopify_SubscriptionLineConnection;
};


/** Represents the subscription lines the discount applies on. */
export type Shopify_SubscriptionDiscountEntitledLinesLinesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** An auto-generated type for paginating through multiple SubscriptionLines. */
export type Shopify_SubscriptionLineConnection = {
  __typename?: 'Shopify_SubscriptionLineConnection';
  /** A list of edges. */
  edges: Array<Shopify_SubscriptionLineEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one SubscriptionLine and a cursor during pagination. */
export type Shopify_SubscriptionLineEdge = {
  __typename?: 'Shopify_SubscriptionLineEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of SubscriptionLineEdge. */
  node: Shopify_SubscriptionLine;
};

/** Represents a Subscription Line. */
export type Shopify_SubscriptionLine = {
  __typename?: 'Shopify_SubscriptionLine';
  /** The price per unit for the subscription line in the contract's currency. */
  currentPrice: Shopify_MoneyV2;
  /** List of custom attributes associated to the line item. */
  customAttributes: Array<Shopify_Attribute>;
  /** Discount allocations. */
  discountAllocations: Array<Shopify_SubscriptionDiscountAllocation>;
  /** The unique identifier. */
  id: Scalars['ID'];
  /** Total line price including all discounts. */
  lineDiscountedPrice: Shopify_MoneyV2;
  /** Describe the price changes of the line over time. */
  pricingPolicy?: Maybe<Shopify_SubscriptionPricingPolicy>;
  /** The product id associated with the subscription line. */
  productId?: Maybe<Scalars['ID']>;
  /** The quantity of the unit selected for the subscription line. */
  quantity: Scalars['Int'];
  /** Whether physical shipping is required for the variant. */
  requiresShipping: Scalars['Boolean'];
  /**
   * The selling plan ID associated to the line.
   *
   * Indicates which selling plan was used to create this
   * contract line initially. The selling plan ID is also used to
   * find the associated delivery profile.
   *
   * The subscription contract, subscription line, or selling plan might have
   * changed. As a result, the selling plan's attributes might not
   * match the information on the contract.
   */
  sellingPlanId?: Maybe<Scalars['ID']>;
  /**
   * The selling plan name associated to the line. This name describes
   * the order line items created from this subscription line
   * for both merchants and customers.
   *
   * The value can be different from the selling plan's name, because both
   * the selling plan's name and the subscription line's selling_plan_name
   * attribute can be updated independently.
   */
  sellingPlanName?: Maybe<Scalars['String']>;
  /** Variant SKU number of the item associated with the subscription line. */
  sku?: Maybe<Scalars['String']>;
  /** Whether the variant is taxable. */
  taxable: Scalars['Boolean'];
  /** Product title of the item associated with the subscription line. */
  title: Scalars['String'];
  /** The product variant id associated with the subscription line. */
  variantId?: Maybe<Scalars['ID']>;
  /** The image associated with the line item's variant or product. */
  variantImage?: Maybe<Shopify_Image>;
  /** Product variant title of the item associated with the subscription line. */
  variantTitle?: Maybe<Scalars['String']>;
};

/** Represents what a particular discount reduces from a line price. */
export type Shopify_SubscriptionDiscountAllocation = {
  __typename?: 'Shopify_SubscriptionDiscountAllocation';
  /** Allocation amount. */
  amount: Shopify_MoneyV2;
  /** Discount that created the allocation. */
  discount: Shopify_SubscriptionDiscount;
};

/** Subscription draft discount types. */
export type Shopify_SubscriptionDiscount = Shopify_SubscriptionAppliedCodeDiscount | Shopify_SubscriptionManualDiscount;

/** Represents an applied code discount. */
export type Shopify_SubscriptionAppliedCodeDiscount = {
  __typename?: 'Shopify_SubscriptionAppliedCodeDiscount';
  /** The unique identifier. */
  id: Scalars['ID'];
  /** The redeem code of the discount that applies on the subscription. */
  redeemCode: Scalars['String'];
  /** The reason that the discount on the subscription draft is rejected. */
  rejectionReason?: Maybe<Shopify_SubscriptionDiscountRejectionReason>;
};

export enum Shopify_SubscriptionDiscountRejectionReason {
  NotFound = 'NOT_FOUND',
  NoEntitledLineItems = 'NO_ENTITLED_LINE_ITEMS',
  QuantityNotInRange = 'QUANTITY_NOT_IN_RANGE',
  PurchaseNotInRange = 'PURCHASE_NOT_IN_RANGE',
  CustomerNotEligible = 'CUSTOMER_NOT_ELIGIBLE',
  UsageLimitReached = 'USAGE_LIMIT_REACHED',
  CustomerUsageLimitReached = 'CUSTOMER_USAGE_LIMIT_REACHED',
  CurrentlyInactive = 'CURRENTLY_INACTIVE',
  NoEntitledShippingLines = 'NO_ENTITLED_SHIPPING_LINES',
  IncompatiblePurchaseType = 'INCOMPATIBLE_PURCHASE_TYPE',
  InternalError = 'INTERNAL_ERROR'
}

/** Represents a Subscription Line Pricing Policy. */
export type Shopify_SubscriptionPricingPolicy = {
  __typename?: 'Shopify_SubscriptionPricingPolicy';
  /** The base price per unit for the subscription line in the contract's currency. */
  basePrice: Shopify_MoneyV2;
  /** The adjustments per cycle for the subscription line. */
  cycleDiscounts: Array<Shopify_SubscriptionCyclePriceAdjustment>;
};

/** Represents a Subscription Line Pricing Cycle Adjustment. */
export type Shopify_SubscriptionCyclePriceAdjustment = {
  __typename?: 'Shopify_SubscriptionCyclePriceAdjustment';
  /** Price adjustment type. */
  adjustmentType: Shopify_SellingPlanPricingPolicyAdjustmentType;
  /** Price adjustment value. */
  adjustmentValue: Shopify_SellingPlanPricingPolicyAdjustmentValue;
  /** The number of cycles required before this pricing policy applies. */
  afterCycle: Scalars['Int'];
  /** The computed price after the adjustments applied. */
  computedPrice: Shopify_MoneyV2;
};

export enum Shopify_DiscountTargetType {
  LineItem = 'LINE_ITEM',
  ShippingLine = 'SHIPPING_LINE'
}

export enum Shopify_DiscountType {
  Manual = 'MANUAL',
  CodeDiscount = 'CODE_DISCOUNT'
}

/** The value of the discount and how it will be applied. */
export type Shopify_SubscriptionDiscountValue = Shopify_SubscriptionDiscountFixedAmountValue | Shopify_SubscriptionDiscountPercentageValue;

/** The value of the discount and how it will be applied. */
export type Shopify_SubscriptionDiscountFixedAmountValue = {
  __typename?: 'Shopify_SubscriptionDiscountFixedAmountValue';
  /** The fixed amount value of the discount. */
  amount: Shopify_MoneyV2;
  /** Whether the amount is applied per item. */
  appliesOnEachItem: Scalars['Boolean'];
};

/** The percentage value of the discount. */
export type Shopify_SubscriptionDiscountPercentageValue = {
  __typename?: 'Shopify_SubscriptionDiscountPercentageValue';
  /** The percentage value of the discount. */
  percentage: Scalars['Int'];
};

export enum Shopify_SubscriptionContractLastPaymentStatus {
  Succeeded = 'SUCCEEDED',
  Failed = 'FAILED'
}

/** An auto-generated type for paginating through multiple Orders. */
export type Shopify_OrderConnection = {
  __typename?: 'Shopify_OrderConnection';
  /** A list of edges. */
  edges: Array<Shopify_OrderEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one Order and a cursor during pagination. */
export type Shopify_OrderEdge = {
  __typename?: 'Shopify_OrderEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of OrderEdge. */
  node: Shopify_Order;
};

export enum Shopify_SubscriptionContractSubscriptionStatus {
  Active = 'ACTIVE',
  Paused = 'PAUSED',
  Cancelled = 'CANCELLED',
  Expired = 'EXPIRED',
  Failed = 'FAILED'
}

/** An amount that's allocated to a line based on an associated discount application. */
export type Shopify_DiscountAllocation = {
  __typename?: 'Shopify_DiscountAllocation';
  /**
   * The money amount that's allocated to a line based on the associated discount application.
   * @deprecated Use `allocatedAmountSet` instead
   */
  allocatedAmount: Shopify_MoneyV2;
  /** The money amount that's allocated to a line based on the associated discount application in shop and presentment currencies. */
  allocatedAmountSet: Shopify_MoneyBag;
  /** The discount application that the allocated amount originated from. */
  discountApplication: Shopify_DiscountApplication;
};

/** The duty details for a line item. */
export type Shopify_Duty = {
  __typename?: 'Shopify_Duty';
  /** The ISO 3166-1 alpha-2 country code of the country of origin used in calculating the duty. */
  countryCodeOfOrigin?: Maybe<Shopify_CountryCode>;
  /** The harmonized system code of the item used in calculating the duty. */
  harmonizedSystemCode?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The amount of the duty. */
  price: Shopify_MoneyBag;
  /** A list of taxes charged on the duty. */
  taxLines: Array<Shopify_TaxLine>;
};

/** Represents the selling plan for a line item. */
export type Shopify_LineItemSellingPlan = {
  __typename?: 'Shopify_LineItemSellingPlan';
  /** The name of the selling plan for display purposes. */
  name: Scalars['String'];
};

/** An auto-generated type for paginating through multiple FulfillmentOrders. */
export type Shopify_FulfillmentOrderConnection = {
  __typename?: 'Shopify_FulfillmentOrderConnection';
  /** A list of edges. */
  edges: Array<Shopify_FulfillmentOrderEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one FulfillmentOrder and a cursor during pagination. */
export type Shopify_FulfillmentOrderEdge = {
  __typename?: 'Shopify_FulfillmentOrderEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of FulfillmentOrderEdge. */
  node: Shopify_FulfillmentOrder;
};

/**
 * Represents a fulfillment order. In Shopify, a fulfillment order represents a group of one or more items
 * in an order that are to be fulfilled from the same location. There can be more than one fulfillment order
 * for an order at a given location.
 */
export type Shopify_FulfillmentOrder = {
  __typename?: 'Shopify_FulfillmentOrder';
  /** The fulfillment order's assigned location. This is the location expected to perform fulfillment. */
  assignedLocation: Shopify_FulfillmentOrderAssignedLocation;
  /** Delivery method of this fulfillment order. */
  deliveryMethod?: Maybe<Shopify_DeliveryMethod>;
  /** The destination where the items should be sent. */
  destination?: Maybe<Shopify_FulfillmentOrderDestination>;
  /** The date and time at which the fulfillment order will be fulfillable. */
  fulfillAt?: Maybe<Scalars['DateTime']>;
  /** The fulfillment holds applied on the fulfillment order. */
  fulfillmentHolds: Array<Shopify_FulfillmentHold>;
  /** A list of fulfillments for the fulfillment order. */
  fulfillments: Shopify_FulfillmentConnection;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The duties delivery method of this fulfillment order. */
  internationalDuties?: Maybe<Shopify_FulfillmentOrderInternationalDuties>;
  /** A list of the fulfillment order's line items. */
  lineItems: Shopify_FulfillmentOrderLineItemConnection;
  /** A list of locations that the fulfillment order can potentially move to. */
  locationsForMove: Shopify_FulfillmentOrderLocationForMoveConnection;
  /** A list of requests sent by the merchant to the fulfillment service for this fulfillment order. */
  merchantRequests: Shopify_FulfillmentOrderMerchantRequestConnection;
  /** The order that's associated with the fulfillment order. */
  order: Shopify_Order;
  /** The request status of the fulfillment order. */
  requestStatus: Shopify_FulfillmentOrderRequestStatus;
  /** The status of the fulfillment order. */
  status: Shopify_FulfillmentOrderStatus;
  /** The actions that can be performed on this fulfillment order. */
  supportedActions: Array<Shopify_FulfillmentOrderSupportedAction>;
};


/**
 * Represents a fulfillment order. In Shopify, a fulfillment order represents a group of one or more items
 * in an order that are to be fulfilled from the same location. There can be more than one fulfillment order
 * for an order at a given location.
 */
export type Shopify_FulfillmentOrderFulfillmentsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * Represents a fulfillment order. In Shopify, a fulfillment order represents a group of one or more items
 * in an order that are to be fulfilled from the same location. There can be more than one fulfillment order
 * for an order at a given location.
 */
export type Shopify_FulfillmentOrderLineItemsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * Represents a fulfillment order. In Shopify, a fulfillment order represents a group of one or more items
 * in an order that are to be fulfilled from the same location. There can be more than one fulfillment order
 * for an order at a given location.
 */
export type Shopify_FulfillmentOrderLocationsForMoveArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * Represents a fulfillment order. In Shopify, a fulfillment order represents a group of one or more items
 * in an order that are to be fulfilled from the same location. There can be more than one fulfillment order
 * for an order at a given location.
 */
export type Shopify_FulfillmentOrderMerchantRequestsArgs = {
  kind?: InputMaybe<Shopify_FulfillmentOrderMerchantRequestKind>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/**
 * Represents the assigned location of a fulfillment order, which is a snapshot of the location
 * at which the fulfillment order was created. The assigned location is expected to perform fulfillment.
 */
export type Shopify_FulfillmentOrderAssignedLocation = {
  __typename?: 'Shopify_FulfillmentOrderAssignedLocation';
  /** The first line of the address for the location. */
  address1?: Maybe<Scalars['String']>;
  /** The second line of the address for the location. */
  address2?: Maybe<Scalars['String']>;
  /** The city of the location. */
  city?: Maybe<Scalars['String']>;
  /** The two-letter country code of the location. */
  countryCode: Shopify_CountryCode;
  /**
   * The location where the fulfillment order was created. This can differ from the
   * `FulfillmentOrderAssignedLocation` if the location was updated since the fulfillment order
   * was closed.
   */
  location?: Maybe<Shopify_Location>;
  /** The name of the location. */
  name: Scalars['String'];
  /** The phone number of the location. */
  phone?: Maybe<Scalars['String']>;
  /** The province of the location. */
  province?: Maybe<Scalars['String']>;
  /** The ZIP code of the location. */
  zip?: Maybe<Scalars['String']>;
};

/** The delivery method used by a fulfillment order. */
export type Shopify_DeliveryMethod = {
  __typename?: 'Shopify_DeliveryMethod';
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The type of the delivery method. */
  methodType: Shopify_DeliveryMethodType;
};

export enum Shopify_DeliveryMethodType {
  Shipping = 'SHIPPING',
  PickUp = 'PICK_UP',
  None = 'NONE',
  Retail = 'RETAIL',
  Local = 'LOCAL'
}

/** Represents the destination where the items should be sent upon fulfillment. */
export type Shopify_FulfillmentOrderDestination = {
  __typename?: 'Shopify_FulfillmentOrderDestination';
  /** The first line of the address of the destination. */
  address1?: Maybe<Scalars['String']>;
  /** The second line of the address of the destination. */
  address2?: Maybe<Scalars['String']>;
  /** The city of the destination. */
  city?: Maybe<Scalars['String']>;
  /** The company of the destination. */
  company?: Maybe<Scalars['String']>;
  /** The two-letter country code of the destination. */
  countryCode?: Maybe<Shopify_CountryCode>;
  /** The email of the customer at the destination. */
  email?: Maybe<Scalars['String']>;
  /** The first name of the customer at the destination. */
  firstName?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The last name of the customer at the destination. */
  lastName?: Maybe<Scalars['String']>;
  /** The phone number of the customer at the destination. */
  phone?: Maybe<Scalars['String']>;
  /** The province of the destination. */
  province?: Maybe<Scalars['String']>;
  /** The ZIP code of the destination. */
  zip?: Maybe<Scalars['String']>;
};

/** A fulfillment hold currently applied on a fulfillment order. */
export type Shopify_FulfillmentHold = {
  __typename?: 'Shopify_FulfillmentHold';
  /** The reason for the fulfillment hold. */
  reason: Shopify_FulfillmentHoldReason;
  /** Additional information about the fulfillment hold reason. */
  reasonNotes?: Maybe<Scalars['String']>;
};

export enum Shopify_FulfillmentHoldReason {
  AwaitingPayment = 'AWAITING_PAYMENT',
  HighRiskOfFraud = 'HIGH_RISK_OF_FRAUD',
  IncorrectAddress = 'INCORRECT_ADDRESS',
  InventoryOutOfStock = 'INVENTORY_OUT_OF_STOCK',
  Other = 'OTHER'
}

/** An auto-generated type for paginating through multiple Fulfillments. */
export type Shopify_FulfillmentConnection = {
  __typename?: 'Shopify_FulfillmentConnection';
  /** A list of edges. */
  edges: Array<Shopify_FulfillmentEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one Fulfillment and a cursor during pagination. */
export type Shopify_FulfillmentEdge = {
  __typename?: 'Shopify_FulfillmentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of FulfillmentEdge. */
  node: Shopify_Fulfillment;
};

/** Represents a fulfillment. In Shopify, a fulfillment represents a shipment of one or more items in an order. When an order has been completely fulfilled, it means that all the items that are included in the order have been sent to the customer. There can be more than one fulfillment for an order. */
export type Shopify_Fulfillment = {
  __typename?: 'Shopify_Fulfillment';
  /** The date and time when the fulfillment was created. */
  createdAt: Scalars['DateTime'];
  /** The date that this fulfillment was delivered. */
  deliveredAt?: Maybe<Scalars['DateTime']>;
  /** Human readable display status for this fulfillment. */
  displayStatus?: Maybe<Shopify_FulfillmentDisplayStatus>;
  /** The estimated date that this fulfillment will arrive. */
  estimatedDeliveryAt?: Maybe<Scalars['DateTime']>;
  /** The history of events associated with this fulfillment. */
  events: Shopify_FulfillmentEventConnection;
  /** List of the fulfillment's line items. */
  fulfillmentLineItems: Shopify_FulfillmentLineItemConnection;
  /** A paginated list of fulfillment orders for the fulfillment. */
  fulfillmentOrders: Shopify_FulfillmentOrderConnection;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The date and time when the fulfillment went into transit. */
  inTransitAt?: Maybe<Scalars['DateTime']>;
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['UnsignedInt64'];
  /** The location that the fulfillment was processed at. */
  location?: Maybe<Shopify_Location>;
  /** Human readable reference identifier for this fulfillment. */
  name: Scalars['String'];
  /** The order for which the fulfillment was created. */
  order: Shopify_Order;
  /** The address at which the fulfillment occurred. Typically this is the address of the warehouse or fulfillment center. */
  originAddress?: Maybe<Shopify_FulfillmentOriginAddress>;
  /** Whether any of the line items in the fulfillment require shipping. */
  requiresShipping: Scalars['Boolean'];
  /** Fulfillment service associated with the fulfillment. */
  service?: Maybe<Shopify_FulfillmentService>;
  /** The status of the fulfillment. */
  status: Shopify_FulfillmentStatus;
  /** Sum of all line item quantities for the fulfillment. */
  totalQuantity: Scalars['Int'];
  /**
   * Tracking information associated with the fulfillment,
   * such as the tracking company, tracking number, and tracking URL.
   */
  trackingInfo: Array<Shopify_FulfillmentTrackingInfo>;
  /** The date and time when the fulfillment was last modified. */
  updatedAt: Scalars['DateTime'];
};


/** Represents a fulfillment. In Shopify, a fulfillment represents a shipment of one or more items in an order. When an order has been completely fulfilled, it means that all the items that are included in the order have been sent to the customer. There can be more than one fulfillment for an order. */
export type Shopify_FulfillmentEventsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_FulfillmentEventSortKeys>;
};


/** Represents a fulfillment. In Shopify, a fulfillment represents a shipment of one or more items in an order. When an order has been completely fulfilled, it means that all the items that are included in the order have been sent to the customer. There can be more than one fulfillment for an order. */
export type Shopify_FulfillmentFulfillmentLineItemsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** Represents a fulfillment. In Shopify, a fulfillment represents a shipment of one or more items in an order. When an order has been completely fulfilled, it means that all the items that are included in the order have been sent to the customer. There can be more than one fulfillment for an order. */
export type Shopify_FulfillmentFulfillmentOrdersArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** Represents a fulfillment. In Shopify, a fulfillment represents a shipment of one or more items in an order. When an order has been completely fulfilled, it means that all the items that are included in the order have been sent to the customer. There can be more than one fulfillment for an order. */
export type Shopify_FulfillmentTrackingInfoArgs = {
  first?: InputMaybe<Scalars['Int']>;
};

export enum Shopify_FulfillmentDisplayStatus {
  AttemptedDelivery = 'ATTEMPTED_DELIVERY',
  Canceled = 'CANCELED',
  Confirmed = 'CONFIRMED',
  Delivered = 'DELIVERED',
  Failure = 'FAILURE',
  Fulfilled = 'FULFILLED',
  InTransit = 'IN_TRANSIT',
  LabelPrinted = 'LABEL_PRINTED',
  LabelPurchased = 'LABEL_PURCHASED',
  LabelVoided = 'LABEL_VOIDED',
  MarkedAsFulfilled = 'MARKED_AS_FULFILLED',
  NotDelivered = 'NOT_DELIVERED',
  OutForDelivery = 'OUT_FOR_DELIVERY',
  ReadyForPickup = 'READY_FOR_PICKUP',
  PickedUp = 'PICKED_UP',
  Submitted = 'SUBMITTED'
}

/** An auto-generated type for paginating through multiple FulfillmentEvents. */
export type Shopify_FulfillmentEventConnection = {
  __typename?: 'Shopify_FulfillmentEventConnection';
  /** A list of edges. */
  edges: Array<Shopify_FulfillmentEventEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one FulfillmentEvent and a cursor during pagination. */
export type Shopify_FulfillmentEventEdge = {
  __typename?: 'Shopify_FulfillmentEventEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of FulfillmentEventEdge. */
  node: Shopify_FulfillmentEvent;
};

/** The fulfillment event that describes the fulfilllment status at a particular time. */
export type Shopify_FulfillmentEvent = {
  __typename?: 'Shopify_FulfillmentEvent';
  /** The time at which this fulfillment event happened. */
  happenedAt: Scalars['DateTime'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The status of this fulfillment event. */
  status: Shopify_FulfillmentEventStatus;
};

export enum Shopify_FulfillmentEventStatus {
  LabelPurchased = 'LABEL_PURCHASED',
  LabelPrinted = 'LABEL_PRINTED',
  ReadyForPickup = 'READY_FOR_PICKUP',
  Confirmed = 'CONFIRMED',
  InTransit = 'IN_TRANSIT',
  OutForDelivery = 'OUT_FOR_DELIVERY',
  AttemptedDelivery = 'ATTEMPTED_DELIVERY',
  Delivered = 'DELIVERED',
  Failure = 'FAILURE'
}

export enum Shopify_FulfillmentEventSortKeys {
  HappenedAt = 'HAPPENED_AT',
  Id = 'ID',
  Relevance = 'RELEVANCE'
}

/** An auto-generated type for paginating through multiple FulfillmentLineItems. */
export type Shopify_FulfillmentLineItemConnection = {
  __typename?: 'Shopify_FulfillmentLineItemConnection';
  /** A list of edges. */
  edges: Array<Shopify_FulfillmentLineItemEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination. */
export type Shopify_FulfillmentLineItemEdge = {
  __typename?: 'Shopify_FulfillmentLineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of FulfillmentLineItemEdge. */
  node: Shopify_FulfillmentLineItem;
};

/** Represents a line item from an order that's included in a fulfillment. */
export type Shopify_FulfillmentLineItem = {
  __typename?: 'Shopify_FulfillmentLineItem';
  /**
   * The total price after discounts are applied.
   * @deprecated Use `discountedTotalSet` instead
   */
  discountedTotal: Scalars['Money'];
  /** The total price after discounts are applied in shop and presentment currencies. */
  discountedTotalSet: Shopify_MoneyBag;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The associated order's line item. */
  lineItem: Shopify_LineItem;
  /**
   * The total price before discounts are applied.
   * @deprecated Use `originalTotalSet` instead
   */
  originalTotal: Scalars['Money'];
  /** The total price before discounts are applied in shop and presentment currencies. */
  originalTotalSet: Shopify_MoneyBag;
  /** Number of line items in the fulfillment. */
  quantity?: Maybe<Scalars['Int']>;
};

/** The address at which the fulfillment occurred. Typically this is the address of the warehouse or fulfillment center. */
export type Shopify_FulfillmentOriginAddress = {
  __typename?: 'Shopify_FulfillmentOriginAddress';
  /** The street address of the fulfillment location. */
  address1?: Maybe<Scalars['String']>;
  /** The second line of the address. Typically the number of the apartment, suite, or unit. */
  address2?: Maybe<Scalars['String']>;
  /** The city in which the fulfillment location is located. */
  city?: Maybe<Scalars['String']>;
  /** The country code of the fulfillment location. */
  countryCode: Scalars['String'];
  /** The province code of the fulfillment location. */
  provinceCode?: Maybe<Scalars['String']>;
  /** The zip code of the fulfillment location. */
  zip?: Maybe<Scalars['String']>;
};

export enum Shopify_FulfillmentStatus {
  Pending = 'PENDING',
  Open = 'OPEN',
  Success = 'SUCCESS',
  Cancelled = 'CANCELLED',
  Error = 'ERROR',
  Failure = 'FAILURE'
}

/** Represents the tracking information for a fulfillment. */
export type Shopify_FulfillmentTrackingInfo = {
  __typename?: 'Shopify_FulfillmentTrackingInfo';
  /** The name of the tracking company. */
  company?: Maybe<Scalars['String']>;
  /** The tracking number of the fulfillment. */
  number?: Maybe<Scalars['String']>;
  /** The URLs to track the fulfillment. */
  url?: Maybe<Scalars['Url']>;
};

/** The international duties relevant to a fulfillment order. */
export type Shopify_FulfillmentOrderInternationalDuties = {
  __typename?: 'Shopify_FulfillmentOrderInternationalDuties';
  /** The method of duties payment. Example values: `DDP`, `DAP`. */
  incoterm: Scalars['String'];
};

/** An auto-generated type for paginating through multiple FulfillmentOrderLineItems. */
export type Shopify_FulfillmentOrderLineItemConnection = {
  __typename?: 'Shopify_FulfillmentOrderLineItemConnection';
  /** A list of edges. */
  edges: Array<Shopify_FulfillmentOrderLineItemEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one FulfillmentOrderLineItem and a cursor during pagination. */
export type Shopify_FulfillmentOrderLineItemEdge = {
  __typename?: 'Shopify_FulfillmentOrderLineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of FulfillmentOrderLineItemEdge. */
  node: Shopify_FulfillmentOrderLineItem;
};

/** Represents a line item belonging to a fulfillment order. */
export type Shopify_FulfillmentOrderLineItem = {
  __typename?: 'Shopify_FulfillmentOrderLineItem';
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The associated order line item. */
  lineItem: Shopify_LineItem;
  /** The number of units remaining to be fulfilled. */
  remainingQuantity: Scalars['Int'];
  /** The total number of units to be fulfilled. */
  totalQuantity: Scalars['Int'];
};

/** An auto-generated type for paginating through multiple FulfillmentOrderLocationForMoves. */
export type Shopify_FulfillmentOrderLocationForMoveConnection = {
  __typename?: 'Shopify_FulfillmentOrderLocationForMoveConnection';
  /** A list of edges. */
  edges: Array<Shopify_FulfillmentOrderLocationForMoveEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one FulfillmentOrderLocationForMove and a cursor during pagination. */
export type Shopify_FulfillmentOrderLocationForMoveEdge = {
  __typename?: 'Shopify_FulfillmentOrderLocationForMoveEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of FulfillmentOrderLocationForMoveEdge. */
  node: Shopify_FulfillmentOrderLocationForMove;
};

/** A location that a fulfillment order can potentially move to. */
export type Shopify_FulfillmentOrderLocationForMove = {
  __typename?: 'Shopify_FulfillmentOrderLocationForMove';
  /** The location being considered as the fulfillment order's new assigned location. */
  location: Shopify_Location;
  /**
   * A human-readable string with the reason why the fulfillment order, or some of its line items, can't be
   * moved to the location.
   */
  message?: Maybe<Scalars['String']>;
  /** Whether the fulfillment order can be moved to the location. */
  movable: Scalars['Boolean'];
};

/** An auto-generated type for paginating through multiple FulfillmentOrderMerchantRequests. */
export type Shopify_FulfillmentOrderMerchantRequestConnection = {
  __typename?: 'Shopify_FulfillmentOrderMerchantRequestConnection';
  /** A list of edges. */
  edges: Array<Shopify_FulfillmentOrderMerchantRequestEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one FulfillmentOrderMerchantRequest and a cursor during pagination. */
export type Shopify_FulfillmentOrderMerchantRequestEdge = {
  __typename?: 'Shopify_FulfillmentOrderMerchantRequestEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of FulfillmentOrderMerchantRequestEdge. */
  node: Shopify_FulfillmentOrderMerchantRequest;
};

/** Represents a request made by the merchant to a fulfillment service for a fulfillment order. */
export type Shopify_FulfillmentOrderMerchantRequest = {
  __typename?: 'Shopify_FulfillmentOrderMerchantRequest';
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The kind of request made. */
  kind: Shopify_FulfillmentOrderMerchantRequestKind;
  /** The optional message that the merchant included in the request. */
  message?: Maybe<Scalars['String']>;
  /**
   * Additional options requested by the merchant. These depend on the `kind` of the request.
   * For example, for a `FULFILLMENT_REQUEST`, one option is `notify_customer`, which indicates whether the
   * merchant intends to notify the customer upon fulfillment. The fulfillment service can then set
   * `notifyCustomer` when making calls to `FulfillmentCreateV2`.
   */
  requestOptions?: Maybe<Scalars['Json']>;
  /** The response from the fulfillment service. */
  responseData?: Maybe<Scalars['Json']>;
  /** The timestamp when the request was made. */
  sentAt: Scalars['DateTime'];
};

export enum Shopify_FulfillmentOrderMerchantRequestKind {
  FulfillmentRequest = 'FULFILLMENT_REQUEST',
  CancellationRequest = 'CANCELLATION_REQUEST'
}

export enum Shopify_FulfillmentOrderRequestStatus {
  Unsubmitted = 'UNSUBMITTED',
  Submitted = 'SUBMITTED',
  Accepted = 'ACCEPTED',
  Rejected = 'REJECTED',
  CancellationRequested = 'CANCELLATION_REQUESTED',
  CancellationAccepted = 'CANCELLATION_ACCEPTED',
  CancellationRejected = 'CANCELLATION_REJECTED',
  Closed = 'CLOSED'
}

export enum Shopify_FulfillmentOrderStatus {
  Open = 'OPEN',
  InProgress = 'IN_PROGRESS',
  Cancelled = 'CANCELLED',
  Incomplete = 'INCOMPLETE',
  Closed = 'CLOSED',
  Scheduled = 'SCHEDULED',
  OnHold = 'ON_HOLD'
}

/** One of the actions that the fulfillment order supports in its current state. */
export type Shopify_FulfillmentOrderSupportedAction = {
  __typename?: 'Shopify_FulfillmentOrderSupportedAction';
  /** The action value. */
  action: Shopify_FulfillmentOrderAction;
  /**
   * The external URL to be used to initiate the fulfillment process outside Shopify.
   * Applicable only when the `action` value is `EXTERNAL`.
   */
  externalUrl?: Maybe<Scalars['Url']>;
};

export enum Shopify_FulfillmentOrderAction {
  CreateFulfillment = 'CREATE_FULFILLMENT',
  RequestFulfillment = 'REQUEST_FULFILLMENT',
  CancelFulfillmentOrder = 'CANCEL_FULFILLMENT_ORDER',
  Move = 'MOVE',
  RequestCancellation = 'REQUEST_CANCELLATION',
  MarkAsOpen = 'MARK_AS_OPEN',
  ReleaseHold = 'RELEASE_HOLD',
  Hold = 'HOLD',
  External = 'EXTERNAL'
}

/** An auto-generated type for paginating through multiple LineItems. */
export type Shopify_LineItemConnection = {
  __typename?: 'Shopify_LineItemConnection';
  /** A list of edges. */
  edges: Array<Shopify_LineItemEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one LineItem and a cursor during pagination. */
export type Shopify_LineItemEdge = {
  __typename?: 'Shopify_LineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of LineItemEdge. */
  node: Shopify_LineItem;
};

/** An auto-generated type for paginating through multiple LineItemMutables. */
export type Shopify_LineItemMutableConnection = {
  __typename?: 'Shopify_LineItemMutableConnection';
  /** A list of edges. */
  edges: Array<Shopify_LineItemMutableEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one LineItemMutable and a cursor during pagination. */
export type Shopify_LineItemMutableEdge = {
  __typename?: 'Shopify_LineItemMutableEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of LineItemMutableEdge. */
  node: Shopify_LineItemMutable;
};

/** Represents a single line item on an order. */
export type Shopify_LineItemMutable = {
  __typename?: 'Shopify_LineItemMutable';
  /**
   * Whether the line item can be restocked.
   * @deprecated Use `restockable` instead
   */
  canRestock: Scalars['Boolean'];
  /** A list of additional information about the line item. */
  customAttributes: Array<Shopify_Attribute>;
  /** The discounts that have been allocated onto the line item by discount applications. */
  discountAllocations: Array<Shopify_DiscountAllocation>;
  /**
   * The total line price after discounts are applied, in shop currency.
   * @deprecated Use `discountedTotalSet` instead
   */
  discountedTotal: Scalars['Money'];
  /** The total line price after discounts are applied, in shop and presentment currencies. */
  discountedTotalSet: Shopify_MoneyBag;
  /**
   * The approximate split price of a line item unit, in shop currency. This value doesn't include discounts applied to the entire order.
   * @deprecated Use `discountedUnitPriceSet` instead
   */
  discountedUnitPrice: Scalars['Money'];
  /** The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order. */
  discountedUnitPriceSet: Shopify_MoneyBag;
  /** The total number of units to fulfill. */
  fulfillableQuantity: Scalars['Int'];
  /**
   * The service provider that fulfills the line item.
   *
   * Deleted fulfillment services will return null.
   */
  fulfillmentService?: Maybe<Shopify_FulfillmentService>;
  /**
   * The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
   * 'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
   */
  fulfillmentStatus: Scalars['String'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The image associated to the line item's variant. */
  image?: Maybe<Shopify_Image>;
  /** Whether the line item can be edited or not. */
  merchantEditable: Scalars['Boolean'];
  /** The name of the product. */
  name: Scalars['String'];
  /** The total number of units that can't be fulfilled. For example, if items have been refunded, or the item is not something that can be fulfilled, like a tip. */
  nonFulfillableQuantity: Scalars['Int'];
  /**
   * The total price without any discounts applied, in shop currency. ""This value is based on the unit price of the variant x quantity.
   * @deprecated Use `originalTotalSet` instead
   */
  originalTotal: Scalars['Money'];
  /** The total price in shop and presentment currencies, without discounts applied. This value is based on the unit price of the variant x quantity. */
  originalTotalSet: Shopify_MoneyBag;
  /**
   * The variant unit price without discounts applied, in shop currency.
   * @deprecated Use `originalUnitPriceSet` instead
   */
  originalUnitPrice: Scalars['Money'];
  /** The variant unit price without discounts applied, in shop and presentment currencies. */
  originalUnitPriceSet: Shopify_MoneyBag;
  /** The Product object associated with this line item's variant. */
  product?: Maybe<Shopify_Product>;
  /** The number of variant units ordered. */
  quantity: Scalars['Int'];
  /** The line item's quantity, minus the removed quantity. */
  refundableQuantity: Scalars['Int'];
  /** Whether physical shipping is required for the variant. */
  requiresShipping: Scalars['Boolean'];
  /** Whether the line item can be restocked. */
  restockable: Scalars['Boolean'];
  /** The variant SKU number. */
  sku?: Maybe<Scalars['String']>;
  /** The TaxLine object connected to this line item. */
  taxLines: Array<Shopify_TaxLine>;
  /** Whether the variant is taxable. */
  taxable: Scalars['Boolean'];
  /** The title of the product. */
  title: Scalars['String'];
  /**
   * The sum of all AppliedDiscounts on this line item, in shop currency.
   * @deprecated Use `totalDiscountSet` instead
   */
  totalDiscount: Scalars['Money'];
  /** The sum of all AppliedDiscounts on this line item in shop and presentment currencies. */
  totalDiscountSet: Shopify_MoneyBag;
  /**
   * The total discounted value of unfulfilled units, in shop currency.
   * @deprecated Use `unfulfilledDiscountedTotalSet` instead
   */
  unfulfilledDiscountedTotal: Scalars['Money'];
  /** The total discounted value of unfulfilled units, in shop and presentment currencies. */
  unfulfilledDiscountedTotalSet: Shopify_MoneyBag;
  /**
   * The total price without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop currency.
   * @deprecated Use `unfulfilledOriginalTotalSet` instead
   */
  unfulfilledOriginalTotal: Scalars['Money'];
  /** The total price without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop and presentment currencies. */
  unfulfilledOriginalTotalSet: Shopify_MoneyBag;
  /** The number of units not yet fulfilled. */
  unfulfilledQuantity: Scalars['Int'];
  /** The Variant object associated with this line item. */
  variant?: Maybe<Shopify_ProductVariant>;
  /** The name of the variant. */
  variantTitle?: Maybe<Scalars['String']>;
  /** The name of the vendor who made the variant. */
  vendor?: Maybe<Scalars['String']>;
};


/** Represents a single line item on an order. */
export type Shopify_LineItemMutableImageArgs = {
  maxWidth?: InputMaybe<Scalars['Int']>;
  maxHeight?: InputMaybe<Scalars['Int']>;
  crop?: InputMaybe<Shopify_CropRegion>;
  scale?: InputMaybe<Scalars['Int']>;
};


/** Represents a single line item on an order. */
export type Shopify_LineItemMutableTaxLinesArgs = {
  first?: InputMaybe<Scalars['Int']>;
};

/** An auto-generated type for paginating through multiple LocalizationExtensions. */
export type Shopify_LocalizationExtensionConnection = {
  __typename?: 'Shopify_LocalizationExtensionConnection';
  /** A list of edges. */
  edges: Array<Shopify_LocalizationExtensionEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one LocalizationExtension and a cursor during pagination. */
export type Shopify_LocalizationExtensionEdge = {
  __typename?: 'Shopify_LocalizationExtensionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of LocalizationExtensionEdge. */
  node: Shopify_LocalizationExtension;
};

/** Represents the value captured by a localization extension. Localization extensions are additional fields required by certain countries on international orders. For example, some countries require additional fields for customs information or tax identification numbers. */
export type Shopify_LocalizationExtension = {
  __typename?: 'Shopify_LocalizationExtension';
  /** Country ISO 3166-1 alpha-2 code. */
  countryCode: Shopify_CountryCode;
  /** The localized extension keys that are allowed. */
  key: Shopify_LocalizationExtensionKey;
  /** The purpose of this localization extension. */
  purpose: Shopify_LocalizationExtensionPurpose;
  /** The localized extension title. */
  title: Scalars['String'];
  /** The value of the field. */
  value: Scalars['String'];
};

export enum Shopify_LocalizationExtensionKey {
  TaxCredentialBr = 'TAX_CREDENTIAL_BR',
  ShippingCredentialBr = 'SHIPPING_CREDENTIAL_BR',
  ShippingCredentialCn = 'SHIPPING_CREDENTIAL_CN',
  TaxCredentialIt = 'TAX_CREDENTIAL_IT',
  TaxEmailIt = 'TAX_EMAIL_IT',
  ShippingCredentialKr = 'SHIPPING_CREDENTIAL_KR'
}

export enum Shopify_LocalizationExtensionPurpose {
  Shipping = 'SHIPPING',
  Tax = 'TAX'
}

/** The payment collection details for an order that requires additional payment following an edit to the order. */
export type Shopify_OrderPaymentCollectionDetails = {
  __typename?: 'Shopify_OrderPaymentCollectionDetails';
  /** The URL to use for collecting an additional payment on the order. */
  additionalPaymentCollectionUrl?: Maybe<Scalars['Url']>;
};

/** Represents the payment terms for an order or draft order. */
export type Shopify_PaymentTerms = {
  __typename?: 'Shopify_PaymentTerms';
  /** Duration of payment terms in days based on the payment terms template used to create the payment terms. */
  dueInDays?: Maybe<Scalars['Int']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** Whether the payment terms have overdue payment schedules. */
  overdue: Scalars['Boolean'];
  /** List of schedules for the payment terms. */
  paymentSchedules: Shopify_PaymentScheduleConnection;
  /** The name of the payment terms template used to create the payment terms. */
  paymentTermsName: Scalars['String'];
  /** The type of a payment terms template used to create the payment terms. */
  paymentTermsType: Shopify_PaymentTermsType;
  /** The translated payment terms name. */
  translatedName: Scalars['String'];
};


/** Represents the payment terms for an order or draft order. */
export type Shopify_PaymentTermsPaymentSchedulesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** An auto-generated type for paginating through multiple PaymentSchedules. */
export type Shopify_PaymentScheduleConnection = {
  __typename?: 'Shopify_PaymentScheduleConnection';
  /** A list of edges. */
  edges: Array<Shopify_PaymentScheduleEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one PaymentSchedule and a cursor during pagination. */
export type Shopify_PaymentScheduleEdge = {
  __typename?: 'Shopify_PaymentScheduleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of PaymentScheduleEdge. */
  node: Shopify_PaymentSchedule;
};

/** Represents the payment schedule for a single payment defined in the payment terms. */
export type Shopify_PaymentSchedule = {
  __typename?: 'Shopify_PaymentSchedule';
  /** Amount owed for this payment schedule. */
  amount: Shopify_MoneyV2;
  /** Date and time when the payment schedule is paid or fulfilled. */
  completedAt?: Maybe<Scalars['DateTime']>;
  /** Date and time when the payment schedule is due. */
  dueAt?: Maybe<Scalars['DateTime']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** Date and time when the invoice is sent. */
  issuedAt?: Maybe<Scalars['DateTime']>;
};

export enum Shopify_PaymentTermsType {
  Receipt = 'RECEIPT',
  Net = 'NET',
  Fixed = 'FIXED',
  Unknown = 'UNKNOWN'
}

/** The record of the line items and transactions that were refunded to a customer, along with restocking instructions for refunded line items. */
export type Shopify_Refund = {
  __typename?: 'Shopify_Refund';
  /** The date and time when the refund was created. */
  createdAt?: Maybe<Scalars['DateTime']>;
  /** A list of the refunded duties as part of this refund. */
  duties?: Maybe<Array<Maybe<Shopify_RefundDuty>>>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['UnsignedInt64'];
  /** The optional note associated with the refund. */
  note?: Maybe<Scalars['String']>;
  /** The order associated with the refund. */
  order: Shopify_Order;
  /** The `RefundLineItem` resources attached to the refund. */
  refundLineItems: Shopify_RefundLineItemConnection;
  /**
   * The total amount across all transactions for the refund.
   * @deprecated Use `totalRefundedSet` instead
   */
  totalRefunded: Shopify_MoneyV2;
  /** The total amount across all transactions for the refund, in shop and presentment currencies. */
  totalRefundedSet: Shopify_MoneyBag;
  /** The transactions associated with the refund. */
  transactions: Shopify_OrderTransactionConnection;
  /** The date and time when the refund was updated. */
  updatedAt: Scalars['DateTime'];
};


/** The record of the line items and transactions that were refunded to a customer, along with restocking instructions for refunded line items. */
export type Shopify_RefundRefundLineItemsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** The record of the line items and transactions that were refunded to a customer, along with restocking instructions for refunded line items. */
export type Shopify_RefundTransactionsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** Represents a refunded duty. */
export type Shopify_RefundDuty = {
  __typename?: 'Shopify_RefundDuty';
  /** The amount of a refunded duty in shop and presentment currencies. */
  amountSet: Shopify_MoneyBag;
  /** The duty associated with this refunded duty. */
  originalDuty?: Maybe<Shopify_Duty>;
};

/** An auto-generated type for paginating through multiple RefundLineItems. */
export type Shopify_RefundLineItemConnection = {
  __typename?: 'Shopify_RefundLineItemConnection';
  /** A list of edges. */
  edges: Array<Shopify_RefundLineItemEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one RefundLineItem and a cursor during pagination. */
export type Shopify_RefundLineItemEdge = {
  __typename?: 'Shopify_RefundLineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of RefundLineItemEdge. */
  node: Shopify_RefundLineItem;
};

/** A line item that's included in a refund. */
export type Shopify_RefundLineItem = {
  __typename?: 'Shopify_RefundLineItem';
  /** The `LineItem` resource associated to the refunded line item. */
  lineItem: Shopify_LineItem;
  /** The inventory restock location. */
  location?: Maybe<Shopify_Location>;
  /**
   * The price of a refunded line item.
   * @deprecated Use `priceSet` instead
   */
  price: Scalars['Money'];
  /** The price of a refunded line item in shop and presentment currencies. */
  priceSet: Shopify_MoneyBag;
  /** The quantity of a refunded line item. */
  quantity: Scalars['Int'];
  /** The type of restock for the refunded line item. */
  restockType: Shopify_RefundLineItemRestockType;
  /** Whether the refunded line item was restocked. Not applicable in the context of a SuggestedRefund. */
  restocked: Scalars['Boolean'];
  /**
   * The subtotal price of a refunded line item.
   * @deprecated Use `subtotalSet` instead
   */
  subtotal: Scalars['Money'];
  /** The subtotal price of a refunded line item in shop and presentment currencies. */
  subtotalSet: Shopify_MoneyBag;
  /**
   * The total tax charged on a refunded line item.
   * @deprecated Use `totalTaxSet` instead
   */
  totalTax: Scalars['Money'];
  /** The total tax charged on a refunded line item in shop and presentment currencies. */
  totalTaxSet: Shopify_MoneyBag;
};

export enum Shopify_RefundLineItemRestockType {
  Return = 'RETURN',
  Cancel = 'CANCEL',
  LegacyRestock = 'LEGACY_RESTOCK',
  NoRestock = 'NO_RESTOCK'
}

/** An auto-generated type for paginating through multiple OrderTransactions. */
export type Shopify_OrderTransactionConnection = {
  __typename?: 'Shopify_OrderTransactionConnection';
  /** A list of edges. */
  edges: Array<Shopify_OrderTransactionEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one OrderTransaction and a cursor during pagination. */
export type Shopify_OrderTransactionEdge = {
  __typename?: 'Shopify_OrderTransactionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of OrderTransactionEdge. */
  node: Shopify_OrderTransaction;
};

/** A payment transaction in the context of an order. */
export type Shopify_OrderTransaction = {
  __typename?: 'Shopify_OrderTransaction';
  /** The masked account number associated with the payment method. */
  accountNumber?: Maybe<Scalars['String']>;
  /**
   * The amount of money.
   * @deprecated Use `amountSet` instead
   */
  amount: Scalars['Money'];
  /** The amount and currency of the transaction in shop and presentment currencies. */
  amountSet: Shopify_MoneyBag;
  /**
   * The amount and currency of the transaction.
   * @deprecated Use `amountSet` instead
   */
  amountV2: Shopify_MoneyV2;
  /** Authorization code associated with the transaction. */
  authorizationCode?: Maybe<Scalars['String']>;
  /** The time when the authorization expires. This field is available only to stores on a Shopify Plus plan and is populated only for Shopify Payments authorizations. */
  authorizationExpiresAt?: Maybe<Scalars['DateTime']>;
  /** Date and time when the transaction was created. */
  createdAt: Scalars['DateTime'];
  /** A standardized error code, independent of the payment provider. */
  errorCode?: Maybe<Shopify_OrderTransactionErrorCode>;
  /** The transaction fees charged on the order transaction. Only present for Shopify Payments transactions. */
  fees: Array<Shopify_TransactionFee>;
  /** The human-readable payment gateway name used to process the transaction. */
  formattedGateway?: Maybe<Scalars['String']>;
  /** The payment gateway used to process the transaction. */
  gateway?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The kind of transaction. */
  kind: Shopify_OrderTransactionKind;
  /** Whether the transaction can be manually captured. */
  manuallyCapturable: Scalars['Boolean'];
  /**
   * Specifies the available amount to refund on the gateway.
   * This value is only available for transactions of type `SuggestedRefund`.
   * @deprecated Use `maximumRefundableV2` instead
   */
  maximumRefundable?: Maybe<Scalars['Money']>;
  /**
   * Specifies the available amount with currency to refund on the gateway.
   * This value is only available for transactions of type `SuggestedRefund`.
   */
  maximumRefundableV2?: Maybe<Shopify_MoneyV2>;
  /** The associated order. */
  order?: Maybe<Shopify_Order>;
  /** The associated parent transaction, for example the authorization of a capture. */
  parentTransaction?: Maybe<Shopify_OrderTransaction>;
  /** The payment icon to display for the transaction. */
  paymentIcon?: Maybe<Shopify_Image>;
  /**
   * The payment method used for the transaction. This value is `null` if the payment method is unknown.
   * @deprecated Use `paymentIcon` instead
   */
  paymentMethod?: Maybe<Shopify_PaymentMethods>;
  /** Date and time when the transaction was processed. */
  processedAt?: Maybe<Scalars['DateTime']>;
  /**
   * The transaction receipt that the payment gateway attaches to the transaction.
   * The value of this field depends on which payment gateway processed the transaction.
   * @deprecated Use `receiptJson` instead
   */
  receipt?: Maybe<Scalars['String']>;
  /** The settlement currency. */
  settlementCurrency?: Maybe<Shopify_CurrencyCode>;
  /** The rate used when converting the transaction amount to settlement currency. */
  settlementCurrencyRate?: Maybe<Scalars['Decimal']>;
  /** Contains all Shopify Payments information related to an order transaction. This field is available only to stores on a Shopify Plus plan. */
  shopifyPaymentsSet?: Maybe<Shopify_ShopifyPaymentsTransactionSet>;
  /** The status of this transaction. */
  status: Shopify_OrderTransactionStatus;
  /** Whether the transaction is a test transaction. */
  test: Scalars['Boolean'];
  /**
   * Specifies the available amount to capture on the gateway.
   * Only available when an amount is capturable or manually mark as paid.
   * @deprecated Use `totalUnsettledSet` instead
   */
  totalUnsettled?: Maybe<Scalars['Money']>;
  /**
   * Specifies the available amount with currency to capture on the gateway in shop and presentment currencies.
   * Only available when an amount is capturable or manually mark as paid.
   */
  totalUnsettledSet?: Maybe<Shopify_MoneyBag>;
  /**
   * Specifies the available amount with currency to capture on the gateway.
   * Only available when an amount is capturable or manually mark as paid.
   * @deprecated Use `totalUnsettledSet` instead
   */
  totalUnsettledV2?: Maybe<Shopify_MoneyV2>;
};


/** A payment transaction in the context of an order. */
export type Shopify_OrderTransactionPaymentIconArgs = {
  maxWidth?: InputMaybe<Scalars['Int']>;
  maxHeight?: InputMaybe<Scalars['Int']>;
  crop?: InputMaybe<Shopify_CropRegion>;
  scale?: InputMaybe<Scalars['Int']>;
};

export enum Shopify_OrderTransactionErrorCode {
  IncorrectNumber = 'INCORRECT_NUMBER',
  InvalidNumber = 'INVALID_NUMBER',
  InvalidExpiryDate = 'INVALID_EXPIRY_DATE',
  InvalidCvc = 'INVALID_CVC',
  ExpiredCard = 'EXPIRED_CARD',
  IncorrectCvc = 'INCORRECT_CVC',
  IncorrectZip = 'INCORRECT_ZIP',
  IncorrectAddress = 'INCORRECT_ADDRESS',
  IncorrectPin = 'INCORRECT_PIN',
  CardDeclined = 'CARD_DECLINED',
  ProcessingError = 'PROCESSING_ERROR',
  CallIssuer = 'CALL_ISSUER',
  PickUpCard = 'PICK_UP_CARD',
  ConfigError = 'CONFIG_ERROR',
  TestModeLiveCard = 'TEST_MODE_LIVE_CARD',
  UnsupportedFeature = 'UNSUPPORTED_FEATURE',
  GenericError = 'GENERIC_ERROR',
  InvalidCountry = 'INVALID_COUNTRY',
  InvalidAmount = 'INVALID_AMOUNT',
  PaymentMethodUnavailable = 'PAYMENT_METHOD_UNAVAILABLE',
  AmazonPaymentsInvalidPaymentMethod = 'AMAZON_PAYMENTS_INVALID_PAYMENT_METHOD',
  AmazonPaymentsMaxAmountCharged = 'AMAZON_PAYMENTS_MAX_AMOUNT_CHARGED',
  AmazonPaymentsMaxAmountRefunded = 'AMAZON_PAYMENTS_MAX_AMOUNT_REFUNDED',
  AmazonPaymentsMaxAuthorizationsCaptured = 'AMAZON_PAYMENTS_MAX_AUTHORIZATIONS_CAPTURED',
  AmazonPaymentsMaxRefundsProcessed = 'AMAZON_PAYMENTS_MAX_REFUNDS_PROCESSED',
  AmazonPaymentsOrderReferenceCanceled = 'AMAZON_PAYMENTS_ORDER_REFERENCE_CANCELED',
  AmazonPaymentsStale = 'AMAZON_PAYMENTS_STALE'
}

/** Transaction fee related to an order transaction. */
export type Shopify_TransactionFee = {
  __typename?: 'Shopify_TransactionFee';
  /** Amount of the fee. */
  amount: Shopify_MoneyV2;
  /** Flat rate charge for a transaction. */
  flatFee: Shopify_MoneyV2;
  /** Name of the credit card flat fee. */
  flatFeeName?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** Percentage charge. */
  rate: Scalars['Decimal'];
  /** Name of the credit card rate. */
  rateName?: Maybe<Scalars['String']>;
  /** Tax amount charged on the fee. */
  taxAmount: Shopify_MoneyV2;
  /** Name of the type of fee. */
  type: Scalars['String'];
};

export enum Shopify_OrderTransactionKind {
  Sale = 'SALE',
  Capture = 'CAPTURE',
  Authorization = 'AUTHORIZATION',
  Void = 'VOID',
  Refund = 'REFUND',
  Change = 'CHANGE',
  EmvAuthorization = 'EMV_AUTHORIZATION',
  SuggestedRefund = 'SUGGESTED_REFUND'
}

export enum Shopify_PaymentMethods {
  Visa = 'VISA',
  Mastercard = 'MASTERCARD',
  Discover = 'DISCOVER',
  AmericanExpress = 'AMERICAN_EXPRESS',
  DinersClub = 'DINERS_CLUB',
  Jcb = 'JCB',
  Unionpay = 'UNIONPAY',
  Elo = 'ELO',
  Dankort = 'DANKORT',
  Maestro = 'MAESTRO',
  Forbrugsforeningen = 'FORBRUGSFORENINGEN',
  Paypal = 'PAYPAL',
  Bogus = 'BOGUS',
  Bitcoin = 'BITCOIN',
  Litecoin = 'LITECOIN',
  Dogecoin = 'DOGECOIN',
  Interac = 'INTERAC'
}

/** Presents all Shopify Payments specific information related to an order transaction. */
export type Shopify_ShopifyPaymentsTransactionSet = {
  __typename?: 'Shopify_ShopifyPaymentsTransactionSet';
  /** Contains all fields related to an extended authorization. */
  extendedAuthorizationSet?: Maybe<Shopify_ShopifyPaymentsExtendedAuthorization>;
  /** Contains all fields related to a refund. */
  refundSet?: Maybe<Shopify_ShopifyPaymentsRefundSet>;
};

/** Presents all Shopify Payments information related to an extended authorization. */
export type Shopify_ShopifyPaymentsExtendedAuthorization = {
  __typename?: 'Shopify_ShopifyPaymentsExtendedAuthorization';
  /** The time after which the extended authorization expires. After the expiry, the merchant is unable to capture the payment. */
  extendedAuthorizationExpiresAt: Scalars['DateTime'];
  /** The time after which capture will incur an additional fee. */
  standardAuthorizationExpiresAt: Scalars['DateTime'];
};

/** Presents all Shopify Payments specific information related to an order refund. */
export type Shopify_ShopifyPaymentsRefundSet = {
  __typename?: 'Shopify_ShopifyPaymentsRefundSet';
  /** The acquirer reference number (ARN) code generated for Visa/Mastercard transactions. */
  acquirerReferenceNumber?: Maybe<Scalars['String']>;
};

export enum Shopify_OrderTransactionStatus {
  Success = 'SUCCESS',
  Failure = 'FAILURE',
  Pending = 'PENDING',
  Error = 'ERROR',
  AwaitingResponse = 'AWAITING_RESPONSE',
  Unknown = 'UNKNOWN'
}

export enum Shopify_OrderRiskLevel {
  Low = 'LOW',
  Medium = 'MEDIUM',
  High = 'HIGH'
}

/** Represents a fraud check on an order. */
export type Shopify_OrderRisk = {
  __typename?: 'Shopify_OrderRisk';
  /** Whether the risk level is shown in the Shopify admin. If false, then this order risk is ignored when Shopify determines the overall risk level for the order. */
  display: Scalars['Boolean'];
  /**
   * The likelihood that an order is fraudulent, based on this order risk.
   *
   * The level can be set by Shopify risk analysis or by an app.
   */
  level?: Maybe<Shopify_OrderRiskLevel>;
  /** The risk message that's shown to the merchant in the Shopify admin. */
  message?: Maybe<Scalars['String']>;
};

/** Represents the shipping details that the customer chose for their order. */
export type Shopify_ShippingLine = {
  __typename?: 'Shopify_ShippingLine';
  /**
   * A reference to the carrier service that provided the rate.
   * Present when the rate was computed by a third-party carrier service.
   */
  carrierIdentifier?: Maybe<Scalars['String']>;
  /** A reference to the shipping method. */
  code?: Maybe<Scalars['String']>;
  /** Whether the shipping line is custom or not. */
  custom: Scalars['Boolean'];
  /** The general classification of the delivery method. */
  deliveryCategory?: Maybe<Scalars['String']>;
  /** The discounts that have been allocated to the shipping line. */
  discountAllocations: Array<Shopify_DiscountAllocation>;
  /**
   * The pre-tax shipping price with discounts applied.
   * @deprecated Use `discountedPriceSet` instead
   */
  discountedPrice: Shopify_MoneyV2;
  /** The pre-tax shipping price with discounts applied. */
  discountedPriceSet: Shopify_MoneyBag;
  /** A globally-unique identifier. */
  id?: Maybe<Scalars['ID']>;
  /**
   * The pre-tax shipping price without any discounts applied.
   * @deprecated Use `originalPriceSet` instead
   */
  originalPrice: Shopify_MoneyV2;
  /** The pre-tax shipping price without any discounts applied. */
  originalPriceSet: Shopify_MoneyBag;
  /** The phone number at the shipping address. */
  phone?: Maybe<Scalars['String']>;
  /**
   * Returns the price of the shipping line.
   * @deprecated Use `originalPriceSet` instead
   */
  price: Scalars['Money'];
  /**
   * The fulfillment service requested for the shipping method.
   * Present if the shipping method requires processing by a third party fulfillment service.
   */
  requestedFulfillmentService?: Maybe<Shopify_FulfillmentService>;
  /** A unique identifier for the shipping rate. The format can change without notice and is not meant to be shown to users. */
  shippingRateHandle?: Maybe<Scalars['String']>;
  /** Returns the rate source for the shipping line. */
  source?: Maybe<Scalars['String']>;
  /** The TaxLine objects connected to this shipping line. */
  taxLines: Array<Shopify_TaxLine>;
  /** Returns the title of the shipping line. */
  title: Scalars['String'];
};

/** An auto-generated type for paginating through multiple ShippingLines. */
export type Shopify_ShippingLineConnection = {
  __typename?: 'Shopify_ShippingLineConnection';
  /** A list of edges. */
  edges: Array<Shopify_ShippingLineEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one ShippingLine and a cursor during pagination. */
export type Shopify_ShippingLineEdge = {
  __typename?: 'Shopify_ShippingLineEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of ShippingLineEdge. */
  node: Shopify_ShippingLine;
};

/** Represents a refund suggested by Shopify based on the items being reimbursed. You can then use the suggested refund object to generate an actual refund. */
export type Shopify_SuggestedRefund = {
  __typename?: 'Shopify_SuggestedRefund';
  /**
   * The total monetary value to be refunded.
   * @deprecated Use `amountSet` instead
   */
  amount: Scalars['Money'];
  /** The total monetary value to be refunded in shop and presentment currencies. */
  amountSet: Shopify_MoneyBag;
  /** The sum of all the discounted prices of the line items being refunded. */
  discountedSubtotalSet: Shopify_MoneyBag;
  /**
   * The total monetary value available to refund.
   * @deprecated Use `maximumRefundableSet` instead
   */
  maximumRefundable: Scalars['Money'];
  /** The total monetary value available to refund in shop and presentment currencies. */
  maximumRefundableSet: Shopify_MoneyBag;
  /** A list of duties to be refunded from the order. */
  refundDuties: Array<Shopify_RefundDuty>;
  /** A list of line items to be refunded, along with restock instructions. */
  refundLineItems: Array<Shopify_RefundLineItem>;
  /** The shipping costs to be refunded from the order. */
  shipping: Shopify_ShippingRefund;
  /**
   * The sum of all the prices of the line items being refunded.
   * @deprecated Use `subtotalSet` instead
   */
  subtotal: Scalars['Money'];
  /** The sum of all the prices of the line items being refunded in shop and presentment currencies. */
  subtotalSet: Shopify_MoneyBag;
  /** A list of suggested order transactions. */
  suggestedTransactions: Array<Shopify_SuggestedOrderTransaction>;
  /** The total cart discount amount that was applied to all line items in this refund. */
  totalCartDiscountAmountSet: Shopify_MoneyBag;
  /** The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive. */
  totalDutiesSet: Shopify_MoneyBag;
  /** The sum of the taxes being refunded from the order in shop and presentment currencies. The value must be positive. */
  totalTaxSet: Shopify_MoneyBag;
  /**
   * The sum of the taxes being refunded from the order. The value must be positive.
   * @deprecated Use `totalTaxSet` instead
   */
  totalTaxes: Scalars['Money'];
};

/** Represents the shipping costs refunded on the Refund. */
export type Shopify_ShippingRefund = {
  __typename?: 'Shopify_ShippingRefund';
  /**
   * The monetary value of the shipping fees to be refunded.
   * @deprecated Use `amountSet` instead
   */
  amount: Scalars['Money'];
  /** The monetary value of the shipping fees to be refunded in shop and presentment currencies. */
  amountSet: Shopify_MoneyBag;
  /**
   * The maximum amount of shipping fees currently refundable.
   * @deprecated Use `maximumRefundableSet` instead
   */
  maximumRefundable: Scalars['Money'];
  /** The maximum amount of shipping fees currently refundable in shop and presentment currencies. */
  maximumRefundableSet: Shopify_MoneyBag;
  /**
   * The monetary value of the tax allocated to shipping fees to be refunded.
   * @deprecated Use `taxSet` instead
   */
  tax: Scalars['Money'];
  /** The monetary value of the tax allocated to shipping fees to be refunded in shop and presentment currencies. */
  taxSet: Shopify_MoneyBag;
};

/**
 * A suggested transaction. Suggested transaction are usually used in the context of refunds
 * and exchanges.
 */
export type Shopify_SuggestedOrderTransaction = {
  __typename?: 'Shopify_SuggestedOrderTransaction';
  /** The masked account number associated with the payment method. */
  accountNumber?: Maybe<Scalars['String']>;
  /**
   * The amount of the transaction.
   * @deprecated Use `amountSet` instead
   */
  amount: Scalars['Money'];
  /** The amount and currency of the suggested order transaction in shop and presentment currencies. */
  amountSet: Shopify_MoneyBag;
  /** The human-readable payment gateway name suggested to process the transaction. */
  formattedGateway?: Maybe<Scalars['String']>;
  /** The suggested payment gateway used to process the transaction. */
  gateway?: Maybe<Scalars['String']>;
  /** Specifies the kind of the suggested order transaction. */
  kind: Shopify_SuggestedOrderTransactionKind;
  /**
   * Specifies the available amount to refund on the gateway. Only available within SuggestedRefund.
   * @deprecated Use `maximumRefundableSet` instead
   */
  maximumRefundable?: Maybe<Scalars['Money']>;
  /** Specifies the available amount to refund on the gateway in shop and presentment currencies. Only available within SuggestedRefund. */
  maximumRefundableSet?: Maybe<Shopify_MoneyBag>;
  /** The associated parent transaction, for example the authorization of a capture. */
  parentTransaction?: Maybe<Shopify_OrderTransaction>;
};

export enum Shopify_SuggestedOrderTransactionKind {
  SuggestedRefund = 'SUGGESTED_REFUND'
}

/** The fields required to reimburse line items on a refund. */
export type Shopify_RefundLineItemInput = {
  /** The ID of the line item in the refund. */
  lineItemId: Scalars['ID'];
  /** The quantity of the associated line item to be refunded. */
  quantity: Scalars['Int'];
  /** The type of restock for this line item. */
  restockType?: InputMaybe<Shopify_RefundLineItemRestockType>;
  /** The intended location for restocking. If the `restockType` is set to `NO_RESTOCK`, then this value is empty.` */
  locationId?: InputMaybe<Scalars['ID']>;
};

/** The fields required to reimburse duties on a refund. */
export type Shopify_RefundDutyInput = {
  /** The ID of the duty in the refund. */
  dutyId: Scalars['ID'];
  /** The type of refund for this duty. */
  refundType?: InputMaybe<Shopify_RefundDutyRefundType>;
};

export enum Shopify_RefundDutyRefundType {
  Proportional = 'PROPORTIONAL',
  Full = 'FULL'
}

export enum Shopify_CustomerMarketingOptInLevel {
  SingleOptIn = 'SINGLE_OPT_IN',
  ConfirmedOptIn = 'CONFIRMED_OPT_IN',
  Unknown = 'UNKNOWN'
}

export enum Shopify_OrderSortKeys {
  CreatedAt = 'CREATED_AT',
  CustomerName = 'CUSTOMER_NAME',
  FinancialStatus = 'FINANCIAL_STATUS',
  FulfillmentStatus = 'FULFILLMENT_STATUS',
  OrderNumber = 'ORDER_NUMBER',
  ProcessedAt = 'PROCESSED_AT',
  TotalPrice = 'TOTAL_PRICE',
  UpdatedAt = 'UPDATED_AT',
  Id = 'ID',
  Relevance = 'RELEVANCE'
}

/** An auto-generated type for paginating through multiple CustomerPaymentMethods. */
export type Shopify_CustomerPaymentMethodConnection = {
  __typename?: 'Shopify_CustomerPaymentMethodConnection';
  /** A list of edges. */
  edges: Array<Shopify_CustomerPaymentMethodEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one CustomerPaymentMethod and a cursor during pagination. */
export type Shopify_CustomerPaymentMethodEdge = {
  __typename?: 'Shopify_CustomerPaymentMethodEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of CustomerPaymentMethodEdge. */
  node: Shopify_CustomerPaymentMethod;
};

export enum Shopify_CustomerProductSubscriberStatus {
  Active = 'ACTIVE',
  Cancelled = 'CANCELLED',
  Expired = 'EXPIRED',
  Failed = 'FAILED',
  NeverSubscribed = 'NEVER_SUBSCRIBED',
  Paused = 'PAUSED'
}

/**
 * The record of when a customer consented to receive marketing material by SMS.
 *
 * The customer's consent state reflects the record with the most recent date when consent was updated.
 */
export type Shopify_CustomerSmsMarketingConsentState = {
  __typename?: 'Shopify_CustomerSmsMarketingConsentState';
  /** The source from which the SMS marketing information for the customer was collected. */
  consentCollectedFrom?: Maybe<Shopify_CustomerConsentCollectedFrom>;
  /**
   * The date and time when the customer consented to receive marketing material by SMS.
   * If no date is provided, then the date and time when the consent information was sent is used.
   */
  consentUpdatedAt?: Maybe<Scalars['DateTime']>;
  /** The marketing subscription opt-in level that was set when the customer consented to receive marketing information. */
  marketingOptInLevel: Shopify_CustomerMarketingOptInLevel;
  /** The current SMS marketing state for the customer. */
  marketingState: Shopify_CustomerSmsMarketingState;
};

export enum Shopify_CustomerConsentCollectedFrom {
  Shopify = 'SHOPIFY',
  Other = 'OTHER'
}

export enum Shopify_CustomerSmsMarketingState {
  NotSubscribed = 'NOT_SUBSCRIBED',
  Pending = 'PENDING',
  Subscribed = 'SUBSCRIBED',
  Unsubscribed = 'UNSUBSCRIBED',
  Redacted = 'REDACTED'
}

export enum Shopify_CustomerState {
  Declined = 'DECLINED',
  Disabled = 'DISABLED',
  Enabled = 'ENABLED',
  Invited = 'INVITED'
}

export enum Shopify_TaxExemption {
  CaStatusCardExemption = 'CA_STATUS_CARD_EXEMPTION',
  CaBcResellerExemption = 'CA_BC_RESELLER_EXEMPTION',
  CaMbResellerExemption = 'CA_MB_RESELLER_EXEMPTION',
  CaSkResellerExemption = 'CA_SK_RESELLER_EXEMPTION',
  CaDiplomatExemption = 'CA_DIPLOMAT_EXEMPTION',
  CaBcCommercialFisheryExemption = 'CA_BC_COMMERCIAL_FISHERY_EXEMPTION',
  CaMbCommercialFisheryExemption = 'CA_MB_COMMERCIAL_FISHERY_EXEMPTION',
  CaNsCommercialFisheryExemption = 'CA_NS_COMMERCIAL_FISHERY_EXEMPTION',
  CaPeCommercialFisheryExemption = 'CA_PE_COMMERCIAL_FISHERY_EXEMPTION',
  CaSkCommercialFisheryExemption = 'CA_SK_COMMERCIAL_FISHERY_EXEMPTION',
  CaBcProductionAndMachineryExemption = 'CA_BC_PRODUCTION_AND_MACHINERY_EXEMPTION',
  CaSkProductionAndMachineryExemption = 'CA_SK_PRODUCTION_AND_MACHINERY_EXEMPTION',
  CaBcSubContractorExemption = 'CA_BC_SUB_CONTRACTOR_EXEMPTION',
  CaSkSubContractorExemption = 'CA_SK_SUB_CONTRACTOR_EXEMPTION',
  CaBcContractorExemption = 'CA_BC_CONTRACTOR_EXEMPTION',
  CaSkContractorExemption = 'CA_SK_CONTRACTOR_EXEMPTION',
  CaOnPurchaseExemption = 'CA_ON_PURCHASE_EXEMPTION',
  CaMbFarmerExemption = 'CA_MB_FARMER_EXEMPTION',
  CaNsFarmerExemption = 'CA_NS_FARMER_EXEMPTION',
  CaSkFarmerExemption = 'CA_SK_FARMER_EXEMPTION'
}

export type Stripe_Customer = {
  __typename?: 'Stripe_Customer';
  address?: Maybe<Stripe_Address>;
  /** Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized. */
  balance?: Maybe<Scalars['Int']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes. */
  currency?: Maybe<Scalars['String']>;
  default_source?: Maybe<Stripe_CustomerDefaultSourceProperty>;
  /**
   * When the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed. When the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.
   *
   * If an invoice is marked uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't get reset to `false`.
   */
  delinquent?: Maybe<Scalars['Boolean']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  discount?: Maybe<Stripe_Discount>;
  /** The customer's email address. */
  email?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** The prefix for the customer used to generate unique invoice numbers. */
  invoice_prefix?: Maybe<Scalars['String']>;
  invoice_settings?: Maybe<Stripe_InvoiceSettingCustomerSetting>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** The customer's full name or business name. */
  name?: Maybe<Scalars['String']>;
  /** The suffix of the customer's next invoice number, e.g., 0001. */
  next_invoice_sequence?: Maybe<Scalars['Int']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_CustomerObjectProperty>;
  /** The customer's phone number. */
  phone?: Maybe<Scalars['String']>;
  /** The customer's preferred locales (languages), ordered by preference. */
  preferred_locales?: Maybe<Array<Maybe<Scalars['String']>>>;
  shipping?: Maybe<Stripe_Shipping>;
  /** The customer's payment sources, if any. */
  sources?: Maybe<Stripe_CustomerSourcesProperty>;
  /** The customer's current subscriptions, if any. */
  subscriptions?: Maybe<Stripe_CustomerSubscriptionsProperty>;
  tax?: Maybe<Stripe_CustomerTax>;
  /** Describes the customer's tax exemption status. One of `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the text **"Reverse charge"**. */
  tax_exempt?: Maybe<Stripe_CustomerTaxExemptProperty>;
  /** The customer's tax IDs. */
  tax_ids?: Maybe<Stripe_CustomerTaxIdsProperty>;
  test_clock?: Maybe<Stripe_CustomerTestClockProperty>;
};

export type Stripe_Address = {
  __typename?: 'Stripe_Address';
  /** City, district, suburb, town, or village. */
  city?: Maybe<Scalars['String']>;
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: Maybe<Scalars['String']>;
  /** Address line 1 (e.g., street, PO Box, or company name). */
  line1?: Maybe<Scalars['String']>;
  /** Address line 2 (e.g., apartment, suite, unit, or building). */
  line2?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  postal_code?: Maybe<Scalars['String']>;
  /** State, county, province, or region. */
  state?: Maybe<Scalars['String']>;
};

export type Stripe_CustomerDefaultSourceProperty = WrappedString | Stripe_AlipayAccount | Stripe_BankAccount | Stripe_BitcoinReceiver | Stripe_Card | Stripe_Source;

export type Stripe_AlipayAccount = {
  __typename?: 'Stripe_AlipayAccount';
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  customer?: Maybe<Scalars['String']>;
  /** Uniquely identifies the account and will be the same across all Alipay account objects that are linked to the same Alipay account. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_AlipayAccountObjectProperty>;
  /** If the Alipay account object is not reusable, the exact amount that you can create a charge for. */
  payment_amount?: Maybe<Scalars['Int']>;
  /** If the Alipay account object is not reusable, the exact currency that you can create a charge for. */
  payment_currency?: Maybe<Scalars['String']>;
  /** True if you can create multiple payments using this account. If the account is reusable, then you can freely choose the amount of each payment. */
  reusable?: Maybe<Scalars['Boolean']>;
  /** Whether this Alipay account object has ever been used for a payment. */
  used?: Maybe<Scalars['Boolean']>;
  /** The username for the Alipay account. */
  username?: Maybe<Scalars['String']>;
};

export enum Stripe_AlipayAccountObjectProperty {
  AlipayAccount = 'alipay_account'
}

export type Stripe_BankAccount = {
  __typename?: 'Stripe_BankAccount';
  account?: Maybe<Stripe_BankAccountAccountProperty>;
  /** The name of the person or business that owns the bank account. */
  account_holder_name?: Maybe<Scalars['String']>;
  /** The type of entity that holds the account. This can be either `individual` or `company`. */
  account_holder_type?: Maybe<Scalars['String']>;
  /** The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`. */
  account_type?: Maybe<Scalars['String']>;
  /** A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout. */
  available_payout_methods?: Maybe<Array<Maybe<Stripe_BankAccountAvailablePayoutMethodsProperty>>>;
  /** Name of the bank associated with the routing number (e.g., `WELLS FARGO`). */
  bank_name?: Maybe<Scalars['String']>;
  /** Two-letter ISO code representing the country the bank account is located in. */
  country?: Maybe<Scalars['String']>;
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
  currency?: Maybe<Scalars['String']>;
  customer?: Maybe<Scalars['String']>;
  /** Whether this bank account is the default external account for its currency. */
  default_for_currency?: Maybe<Scalars['Boolean']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** The last four digits of the bank account number. */
  last4?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_BankAccountObjectProperty>;
  /** The routing transit number for the bank account. */
  routing_number?: Maybe<Scalars['String']>;
  /**
   * For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isnâ€™t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a transfer sent to this bank account fails, we'll set the status to `errored` and will not continue to send transfers until the bank details are updated.
   *
   * For external accounts, possible values are `new` and `errored`. Validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
   */
  status?: Maybe<Scalars['String']>;
};

export type Stripe_BankAccountAccountProperty = WrappedString | Stripe_Account;

export type Stripe_Account = {
  __typename?: 'Stripe_Account';
  business_profile?: Maybe<Stripe_AccountBusinessProfile>;
  /** The business type. */
  business_type?: Maybe<Stripe_AccountBusinessTypeProperty>;
  capabilities?: Maybe<Stripe_AccountCapabilities>;
  /** Whether the account can create live charges. */
  charges_enabled?: Maybe<Scalars['Boolean']>;
  company?: Maybe<Stripe_LegalEntityCompany>;
  controller?: Maybe<Stripe_AccountUnificationAccountController>;
  /** The account's country. */
  country?: Maybe<Scalars['String']>;
  /** Time at which the account was connected. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). */
  default_currency?: Maybe<Scalars['String']>;
  /** Whether account details have been submitted. Standard accounts cannot receive payouts before this is true. */
  details_submitted?: Maybe<Scalars['Boolean']>;
  /** An email address associated with the account. You can treat this as metadata: it is not used for authentication or messaging account holders. */
  email?: Maybe<Scalars['String']>;
  /** External accounts (bank accounts and debit cards) currently attached to this account */
  external_accounts?: Maybe<Stripe_AccountExternalAccountsProperty>;
  future_requirements?: Maybe<Stripe_AccountFutureRequirements>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  individual?: Maybe<Stripe_Person>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_AccountObjectProperty>;
  /** Whether Stripe can send payouts to this account. */
  payouts_enabled?: Maybe<Scalars['Boolean']>;
  requirements?: Maybe<Stripe_AccountRequirements>;
  settings?: Maybe<Stripe_AccountSettings>;
  tos_acceptance?: Maybe<Stripe_AccountTosAcceptance>;
  /** The Stripe account type. Can be `standard`, `express`, or `custom`. */
  type?: Maybe<Stripe_AccountTypeProperty>;
};

export type Stripe_AccountBusinessProfile = {
  __typename?: 'Stripe_AccountBusinessProfile';
  /** [The merchant category code for the account](https://stripe.com/docs/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide. */
  mcc?: Maybe<Scalars['String']>;
  /** The customer-facing business name. */
  name?: Maybe<Scalars['String']>;
  /** Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes. */
  product_description?: Maybe<Scalars['String']>;
  support_address?: Maybe<Stripe_Address>;
  /** A publicly available email address for sending support issues to. */
  support_email?: Maybe<Scalars['String']>;
  /** A publicly available phone number to call with support issues. */
  support_phone?: Maybe<Scalars['String']>;
  /** A publicly available website for handling support issues. */
  support_url?: Maybe<Scalars['String']>;
  /** The business's publicly available website. */
  url?: Maybe<Scalars['String']>;
};

export enum Stripe_AccountBusinessTypeProperty {
  Company = 'company',
  GovernmentEntity = 'government_entity',
  Individual = 'individual',
  NonProfit = 'non_profit'
}

export type Stripe_AccountCapabilities = {
  __typename?: 'Stripe_AccountCapabilities';
  /** The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges. */
  acss_debit_payments?: Maybe<Stripe_AccountCapabilitiesAcssDebitPaymentsProperty>;
  /** The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges. */
  afterpay_clearpay_payments?: Maybe<Stripe_AccountCapabilitiesAfterpayClearpayPaymentsProperty>;
  /** The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges. */
  au_becs_debit_payments?: Maybe<Stripe_AccountCapabilitiesAuBecsDebitPaymentsProperty>;
  /** The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges. */
  bacs_debit_payments?: Maybe<Stripe_AccountCapabilitiesBacsDebitPaymentsProperty>;
  /** The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges. */
  bancontact_payments?: Maybe<Stripe_AccountCapabilitiesBancontactPaymentsProperty>;
  /** The status of the customer_balance payments capability of the account, or whether the account can directly process customer_balance charges. */
  bank_transfer_payments?: Maybe<Stripe_AccountCapabilitiesBankTransferPaymentsProperty>;
  /** The status of the boleto payments capability of the account, or whether the account can directly process boleto charges. */
  boleto_payments?: Maybe<Stripe_AccountCapabilitiesBoletoPaymentsProperty>;
  /** The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards */
  card_issuing?: Maybe<Stripe_AccountCapabilitiesCardIssuingProperty>;
  /** The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges. */
  card_payments?: Maybe<Stripe_AccountCapabilitiesCardPaymentsProperty>;
  /** The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency. */
  cartes_bancaires_payments?: Maybe<Stripe_AccountCapabilitiesCartesBancairesPaymentsProperty>;
  /** The status of the EPS payments capability of the account, or whether the account can directly process EPS charges. */
  eps_payments?: Maybe<Stripe_AccountCapabilitiesEpsPaymentsProperty>;
  /** The status of the FPX payments capability of the account, or whether the account can directly process FPX charges. */
  fpx_payments?: Maybe<Stripe_AccountCapabilitiesFpxPaymentsProperty>;
  /** The status of the giropay payments capability of the account, or whether the account can directly process giropay charges. */
  giropay_payments?: Maybe<Stripe_AccountCapabilitiesGiropayPaymentsProperty>;
  /** The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges. */
  grabpay_payments?: Maybe<Stripe_AccountCapabilitiesGrabpayPaymentsProperty>;
  /** The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges. */
  ideal_payments?: Maybe<Stripe_AccountCapabilitiesIdealPaymentsProperty>;
  /** The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency. */
  jcb_payments?: Maybe<Stripe_AccountCapabilitiesJcbPaymentsProperty>;
  /** The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges. */
  klarna_payments?: Maybe<Stripe_AccountCapabilitiesKlarnaPaymentsProperty>;
  /** The status of the konbini payments capability of the account, or whether the account can directly process konbini charges. */
  konbini_payments?: Maybe<Stripe_AccountCapabilitiesKonbiniPaymentsProperty>;
  /** The status of the legacy payments capability of the account. */
  legacy_payments?: Maybe<Stripe_AccountCapabilitiesLegacyPaymentsProperty>;
  /** The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges. */
  oxxo_payments?: Maybe<Stripe_AccountCapabilitiesOxxoPaymentsProperty>;
  /** The status of the P24 payments capability of the account, or whether the account can directly process P24 charges. */
  p24_payments?: Maybe<Stripe_AccountCapabilitiesP24PaymentsProperty>;
  /** The status of the paynow payments capability of the account, or whether the account can directly process paynow charges. */
  paynow_payments?: Maybe<Stripe_AccountCapabilitiesPaynowPaymentsProperty>;
  /** The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges. */
  sepa_debit_payments?: Maybe<Stripe_AccountCapabilitiesSepaDebitPaymentsProperty>;
  /** The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges. */
  sofort_payments?: Maybe<Stripe_AccountCapabilitiesSofortPaymentsProperty>;
  /** The status of the tax reporting 1099-K (US) capability of the account. */
  tax_reporting_us_1099_k?: Maybe<Stripe_AccountCapabilitiesTaxReportingUs1099KProperty>;
  /** The status of the tax reporting 1099-MISC (US) capability of the account. */
  tax_reporting_us_1099_misc?: Maybe<Stripe_AccountCapabilitiesTaxReportingUs1099MiscProperty>;
  /** The status of the transfers capability of the account, or whether your platform can transfer funds to the account. */
  transfers?: Maybe<Stripe_AccountCapabilitiesTransfersProperty>;
  /** The status of the US bank account ACH payments capability of the account, or whether the account can directly process US bank account charges. */
  us_bank_account_ach_payments?: Maybe<Stripe_AccountCapabilitiesUsBankAccountAchPaymentsProperty>;
};

export enum Stripe_AccountCapabilitiesAcssDebitPaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesAfterpayClearpayPaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesAuBecsDebitPaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesBacsDebitPaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesBancontactPaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesBankTransferPaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesBoletoPaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesCardIssuingProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesCardPaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesCartesBancairesPaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesEpsPaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesFpxPaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesGiropayPaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesGrabpayPaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesIdealPaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesJcbPaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesKlarnaPaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesKonbiniPaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesLegacyPaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesOxxoPaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesP24PaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesPaynowPaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesSepaDebitPaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesSofortPaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesTaxReportingUs1099KProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesTaxReportingUs1099MiscProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesTransfersProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_AccountCapabilitiesUsBankAccountAchPaymentsProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export type Stripe_LegalEntityCompany = {
  __typename?: 'Stripe_LegalEntityCompany';
  address?: Maybe<Stripe_Address>;
  address_kana?: Maybe<Stripe_LegalEntityJapanAddress>;
  address_kanji?: Maybe<Stripe_LegalEntityJapanAddress>;
  /** Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided). */
  directors_provided?: Maybe<Scalars['Boolean']>;
  /** Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided. */
  executives_provided?: Maybe<Scalars['Boolean']>;
  /** The company's legal name. */
  name?: Maybe<Scalars['String']>;
  /** The Kana variation of the company's legal name (Japan only). */
  name_kana?: Maybe<Scalars['String']>;
  /** The Kanji variation of the company's legal name (Japan only). */
  name_kanji?: Maybe<Scalars['String']>;
  /** Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together). */
  owners_provided?: Maybe<Scalars['Boolean']>;
  ownership_declaration?: Maybe<Stripe_LegalEntityUboDeclaration>;
  /** The company's phone number (used for verification). */
  phone?: Maybe<Scalars['String']>;
  /** The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details. */
  structure?: Maybe<Stripe_LegalEntityCompanyStructureProperty>;
  /** Whether the company's business ID number was provided. */
  tax_id_provided?: Maybe<Scalars['Boolean']>;
  /** The jurisdiction in which the `tax_id` is registered (Germany-based companies only). */
  tax_id_registrar?: Maybe<Scalars['String']>;
  /** Whether the company's business VAT number was provided. */
  vat_id_provided?: Maybe<Scalars['Boolean']>;
  verification?: Maybe<Stripe_LegalEntityCompanyVerification>;
};

export type Stripe_LegalEntityJapanAddress = {
  __typename?: 'Stripe_LegalEntityJapanAddress';
  /** City/Ward. */
  city?: Maybe<Scalars['String']>;
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: Maybe<Scalars['String']>;
  /** Block/Building number. */
  line1?: Maybe<Scalars['String']>;
  /** Building details. */
  line2?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  postal_code?: Maybe<Scalars['String']>;
  /** Prefecture. */
  state?: Maybe<Scalars['String']>;
  /** Town/cho-me. */
  town?: Maybe<Scalars['String']>;
};

export type Stripe_LegalEntityUboDeclaration = {
  __typename?: 'Stripe_LegalEntityUboDeclaration';
  /** The Unix timestamp marking when the beneficial owner attestation was made. */
  date?: Maybe<Scalars['Int']>;
  /** The IP address from which the beneficial owner attestation was made. */
  ip?: Maybe<Scalars['String']>;
  /** The user-agent string from the browser where the beneficial owner attestation was made. */
  user_agent?: Maybe<Scalars['String']>;
};

export enum Stripe_LegalEntityCompanyStructureProperty {
  FreeZoneEstablishment = 'free_zone_establishment',
  FreeZoneLlc = 'free_zone_llc',
  GovernmentInstrumentality = 'government_instrumentality',
  GovernmentalUnit = 'governmental_unit',
  IncorporatedNonProfit = 'incorporated_non_profit',
  LimitedLiabilityPartnership = 'limited_liability_partnership',
  Llc = 'llc',
  MultiMemberLlc = 'multi_member_llc',
  PrivateCompany = 'private_company',
  PrivateCorporation = 'private_corporation',
  PrivatePartnership = 'private_partnership',
  PublicCompany = 'public_company',
  PublicCorporation = 'public_corporation',
  PublicPartnership = 'public_partnership',
  SingleMemberLlc = 'single_member_llc',
  SoleEstablishment = 'sole_establishment',
  SoleProprietorship = 'sole_proprietorship',
  TaxExemptGovernmentInstrumentality = 'tax_exempt_government_instrumentality',
  UnincorporatedAssociation = 'unincorporated_association',
  UnincorporatedNonProfit = 'unincorporated_non_profit'
}

export type Stripe_LegalEntityCompanyVerification = {
  __typename?: 'Stripe_LegalEntityCompanyVerification';
  document?: Maybe<Stripe_LegalEntityCompanyVerificationDocument>;
};

export type Stripe_LegalEntityCompanyVerificationDocument = {
  __typename?: 'Stripe_LegalEntityCompanyVerificationDocument';
  back?: Maybe<Stripe_LegalEntityCompanyVerificationDocumentBackProperty>;
  /** A user-displayable string describing the verification state of this document. */
  details?: Maybe<Scalars['String']>;
  /** One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document. */
  details_code?: Maybe<Scalars['String']>;
  front?: Maybe<Stripe_LegalEntityCompanyVerificationDocumentFrontProperty>;
};

export type Stripe_LegalEntityCompanyVerificationDocumentBackProperty = WrappedString | Stripe_File;

export type Stripe_File = {
  __typename?: 'Stripe_File';
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** The time at which the file expires and is no longer available in epoch seconds. */
  expires_at?: Maybe<Scalars['Int']>;
  /** A filename for the file, suitable for saving to a filesystem. */
  filename?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** A list of [file links](https://stripe.com/docs/api#file_links) that point at this file. */
  links?: Maybe<Stripe_FileLinksProperty>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_FileObjectProperty>;
  /** The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file. */
  purpose?: Maybe<Stripe_FilePurposeProperty>;
  /** The size in bytes of the file object. */
  size?: Maybe<Scalars['Int']>;
  /** A user friendly title for the document. */
  title?: Maybe<Scalars['String']>;
  /** The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`). */
  type?: Maybe<Scalars['String']>;
  /** The URL from which the file can be downloaded using your live secret API key. */
  url?: Maybe<Scalars['String']>;
};

/** A list of [file links](https://stripe.com/docs/api#file_links) that point at this file. */
export type Stripe_FileLinksProperty = {
  __typename?: 'Stripe_FileLinksProperty';
  /** Details about each object. */
  data: Array<Stripe_FileLink>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Stripe_FileLinksObjectProperty;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Stripe_FileLink = {
  __typename?: 'Stripe_FileLink';
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Whether this link is already expired. */
  expired?: Maybe<Scalars['Boolean']>;
  /** Time at which the link expires. */
  expires_at?: Maybe<Scalars['Int']>;
  file?: Maybe<Stripe_FileLinkFileProperty>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_FileLinkObjectProperty>;
  /** The publicly accessible URL to download the file. */
  url?: Maybe<Scalars['String']>;
};

export type Stripe_FileLinkFileProperty = WrappedString | Stripe_File;

export enum Stripe_FileLinkObjectProperty {
  FileLink = 'file_link'
}

export enum Stripe_FileLinksObjectProperty {
  List = 'list'
}

export enum Stripe_FileObjectProperty {
  File = 'file'
}

export enum Stripe_FilePurposeProperty {
  AccountRequirement = 'account_requirement',
  AdditionalVerification = 'additional_verification',
  BusinessIcon = 'business_icon',
  BusinessLogo = 'business_logo',
  CustomerSignature = 'customer_signature',
  DisputeEvidence = 'dispute_evidence',
  DocumentProviderIdentityDocument = 'document_provider_identity_document',
  FinanceReportRun = 'finance_report_run',
  IdentityDocument = 'identity_document',
  IdentityDocumentDownloadable = 'identity_document_downloadable',
  PciDocument = 'pci_document',
  Selfie = 'selfie',
  SigmaScheduledQuery = 'sigma_scheduled_query',
  TaxDocumentUserUpload = 'tax_document_user_upload'
}

export type Stripe_LegalEntityCompanyVerificationDocumentFrontProperty = WrappedString | Stripe_File;

export type Stripe_AccountUnificationAccountController = {
  __typename?: 'Stripe_AccountUnificationAccountController';
  /** `true` if the Connect application retrieving the resource controls the account and can therefore exercise [platform controls](https://stripe.com/docs/connect/platform-controls-for-standard-accounts). Otherwise, this field is null. */
  is_controller?: Maybe<Scalars['Boolean']>;
  /** The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself. */
  type?: Maybe<Stripe_AccountUnificationAccountControllerTypeProperty>;
};

export enum Stripe_AccountUnificationAccountControllerTypeProperty {
  Account = 'account',
  Application = 'application'
}

/** External accounts (bank accounts and debit cards) currently attached to this account */
export type Stripe_AccountExternalAccountsProperty = {
  __typename?: 'Stripe_AccountExternalAccountsProperty';
  /** The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards. */
  data: Array<Stripe_AccountExternalAccountsDataProperty>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Stripe_AccountExternalAccountsObjectProperty;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Stripe_AccountExternalAccountsDataProperty = Stripe_BankAccount | Stripe_Card;

export type Stripe_Card = {
  __typename?: 'Stripe_Card';
  account?: Maybe<Stripe_CardAccountProperty>;
  /** City/District/Suburb/Town/Village. */
  address_city?: Maybe<Scalars['String']>;
  /** Billing address country, if provided when creating card. */
  address_country?: Maybe<Scalars['String']>;
  /** Address line 1 (Street address/PO Box/Company name). */
  address_line1?: Maybe<Scalars['String']>;
  /** If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  address_line1_check?: Maybe<Scalars['String']>;
  /** Address line 2 (Apartment/Suite/Unit/Building). */
  address_line2?: Maybe<Scalars['String']>;
  /** State/County/Province/Region. */
  address_state?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  address_zip?: Maybe<Scalars['String']>;
  /** If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  address_zip_check?: Maybe<Scalars['String']>;
  /** A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout. */
  available_payout_methods?: Maybe<Array<Maybe<Stripe_CardAvailablePayoutMethodsProperty>>>;
  /** Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`. */
  brand?: Maybe<Scalars['String']>;
  /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
  country?: Maybe<Scalars['String']>;
  /** Three-letter [ISO code for currency](https://stripe.com/docs/payouts). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency. */
  currency?: Maybe<Scalars['String']>;
  customer?: Maybe<Scalars['String']>;
  /** If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge). */
  cvc_check?: Maybe<Scalars['String']>;
  /** Whether this card is the default external account for its currency. */
  default_for_currency?: Maybe<Scalars['Boolean']>;
  /** (For tokenized numbers only.) The last four digits of the device account number. */
  dynamic_last4?: Maybe<Scalars['String']>;
  /** Two-digit number representing the card's expiration month. */
  exp_month?: Maybe<Scalars['Int']>;
  /** Four-digit number representing the card's expiration year. */
  exp_year?: Maybe<Scalars['Int']>;
  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   */
  fingerprint?: Maybe<Scalars['String']>;
  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** The last four digits of the card. */
  last4?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** Cardholder name. */
  name?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_CardObjectProperty>;
  recipient?: Maybe<Stripe_CardRecipientProperty>;
  /** For external accounts, possible values are `new` and `errored`. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated. */
  status?: Maybe<Scalars['String']>;
  /** If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null. */
  tokenization_method?: Maybe<Scalars['String']>;
};

export type Stripe_CardAccountProperty = WrappedString | Stripe_Account;

export enum Stripe_CardAvailablePayoutMethodsProperty {
  Instant = 'instant',
  Standard = 'standard'
}

export enum Stripe_CardObjectProperty {
  Card = 'card'
}

export type Stripe_CardRecipientProperty = WrappedString | Stripe_Recipient;

export type Stripe_Recipient = {
  __typename?: 'Stripe_Recipient';
  active_account?: Maybe<Stripe_BankAccount>;
  cards?: Maybe<Stripe_RecipientCardsProperty>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  default_card?: Maybe<Stripe_RecipientDefaultCardProperty>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  migrated_to?: Maybe<Stripe_RecipientMigratedToProperty>;
  /** Full, legal name of the recipient. */
  name?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_RecipientObjectProperty>;
  rolled_back_from?: Maybe<Stripe_RecipientRolledBackFromProperty>;
  /** Type of the recipient, one of `individual` or `corporation`. */
  type?: Maybe<Scalars['String']>;
};

export type Stripe_RecipientCardsProperty = {
  __typename?: 'Stripe_RecipientCardsProperty';
  data: Array<Stripe_Card>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Stripe_RecipientCardsObjectProperty;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export enum Stripe_RecipientCardsObjectProperty {
  List = 'list'
}

export type Stripe_RecipientDefaultCardProperty = WrappedString | Stripe_Card;

export type Stripe_RecipientMigratedToProperty = WrappedString | Stripe_Account;

export enum Stripe_RecipientObjectProperty {
  Recipient = 'recipient'
}

export type Stripe_RecipientRolledBackFromProperty = WrappedString | Stripe_Account;

export enum Stripe_AccountExternalAccountsObjectProperty {
  List = 'list'
}

export type Stripe_AccountFutureRequirements = {
  __typename?: 'Stripe_AccountFutureRequirements';
  /** Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
  alternatives?: Maybe<Array<Maybe<Stripe_AccountRequirementsAlternative>>>;
  /** Date on which `future_requirements` merges with the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on its enablement state prior to transitioning. */
  current_deadline?: Maybe<Scalars['Int']>;
  /** Fields that need to be collected to keep the account enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash. */
  currently_due?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** This is typed as a string for consistency with `requirements.disabled_reason`, but it safe to assume `future_requirements.disabled_reason` is empty because fields in `future_requirements` will never disable the account. */
  disabled_reason?: Maybe<Scalars['String']>;
  /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
  errors?: Maybe<Array<Maybe<Stripe_AccountRequirementsError>>>;
  /** Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well. */
  eventually_due?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`. */
  past_due?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. */
  pending_verification?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type Stripe_AccountRequirementsAlternative = {
  __typename?: 'Stripe_AccountRequirementsAlternative';
  /** Fields that can be provided to satisfy all fields in `original_fields_due`. */
  alternative_fields_due?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Fields that are due and can be satisfied by providing all fields in `alternative_fields_due`. */
  original_fields_due?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type Stripe_AccountRequirementsError = {
  __typename?: 'Stripe_AccountRequirementsError';
  /** The code for the type of error. */
  code?: Maybe<Stripe_AccountRequirementsErrorCodeProperty>;
  /** An informative message that indicates the error type and provides additional details about the error. */
  reason?: Maybe<Scalars['String']>;
  /** The specific user onboarding requirement field (in the requirements hash) that needs to be resolved. */
  requirement?: Maybe<Scalars['String']>;
};

export enum Stripe_AccountRequirementsErrorCodeProperty {
  InvalidAddressCityStatePostalCode = 'invalid_address_city_state_postal_code',
  InvalidStreetAddress = 'invalid_street_address',
  InvalidValueOther = 'invalid_value_other',
  VerificationDocumentAddressMismatch = 'verification_document_address_mismatch',
  VerificationDocumentAddressMissing = 'verification_document_address_missing',
  VerificationDocumentCorrupt = 'verification_document_corrupt',
  VerificationDocumentCountryNotSupported = 'verification_document_country_not_supported',
  VerificationDocumentDobMismatch = 'verification_document_dob_mismatch',
  VerificationDocumentDuplicateType = 'verification_document_duplicate_type',
  VerificationDocumentExpired = 'verification_document_expired',
  VerificationDocumentFailedCopy = 'verification_document_failed_copy',
  VerificationDocumentFailedGreyscale = 'verification_document_failed_greyscale',
  VerificationDocumentFailedOther = 'verification_document_failed_other',
  VerificationDocumentFailedTestMode = 'verification_document_failed_test_mode',
  VerificationDocumentFraudulent = 'verification_document_fraudulent',
  VerificationDocumentIdNumberMismatch = 'verification_document_id_number_mismatch',
  VerificationDocumentIdNumberMissing = 'verification_document_id_number_missing',
  VerificationDocumentIncomplete = 'verification_document_incomplete',
  VerificationDocumentInvalid = 'verification_document_invalid',
  VerificationDocumentIssueOrExpiryDateMissing = 'verification_document_issue_or_expiry_date_missing',
  VerificationDocumentManipulated = 'verification_document_manipulated',
  VerificationDocumentMissingBack = 'verification_document_missing_back',
  VerificationDocumentMissingFront = 'verification_document_missing_front',
  VerificationDocumentNameMismatch = 'verification_document_name_mismatch',
  VerificationDocumentNameMissing = 'verification_document_name_missing',
  VerificationDocumentNationalityMismatch = 'verification_document_nationality_mismatch',
  VerificationDocumentNotReadable = 'verification_document_not_readable',
  VerificationDocumentNotSigned = 'verification_document_not_signed',
  VerificationDocumentNotUploaded = 'verification_document_not_uploaded',
  VerificationDocumentPhotoMismatch = 'verification_document_photo_mismatch',
  VerificationDocumentTooLarge = 'verification_document_too_large',
  VerificationDocumentTypeNotSupported = 'verification_document_type_not_supported',
  VerificationFailedAddressMatch = 'verification_failed_address_match',
  VerificationFailedBusinessIecNumber = 'verification_failed_business_iec_number',
  VerificationFailedDocumentMatch = 'verification_failed_document_match',
  VerificationFailedIdNumberMatch = 'verification_failed_id_number_match',
  VerificationFailedKeyedIdentity = 'verification_failed_keyed_identity',
  VerificationFailedKeyedMatch = 'verification_failed_keyed_match',
  VerificationFailedNameMatch = 'verification_failed_name_match',
  VerificationFailedOther = 'verification_failed_other',
  VerificationFailedTaxIdMatch = 'verification_failed_tax_id_match',
  VerificationFailedTaxIdNotIssued = 'verification_failed_tax_id_not_issued',
  VerificationMissingExecutives = 'verification_missing_executives',
  VerificationMissingOwners = 'verification_missing_owners',
  VerificationRequiresAdditionalMemorandumOfAssociations = 'verification_requires_additional_memorandum_of_associations'
}

export type Stripe_Person = {
  __typename?: 'Stripe_Person';
  /** The account the person is associated with. */
  account?: Maybe<Scalars['String']>;
  address?: Maybe<Stripe_Address>;
  address_kana?: Maybe<Stripe_LegalEntityJapanAddress>;
  address_kanji?: Maybe<Stripe_LegalEntityJapanAddress>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  dob?: Maybe<Stripe_LegalEntityDob>;
  /** The person's email address. */
  email?: Maybe<Scalars['String']>;
  /** The person's first name. */
  first_name?: Maybe<Scalars['String']>;
  /** The Kana variation of the person's first name (Japan only). */
  first_name_kana?: Maybe<Scalars['String']>;
  /** The Kanji variation of the person's first name (Japan only). */
  first_name_kanji?: Maybe<Scalars['String']>;
  /** A list of alternate names or aliases that the person is known by. */
  full_name_aliases?: Maybe<Array<Maybe<Scalars['String']>>>;
  future_requirements?: Maybe<Stripe_PersonFutureRequirements>;
  /** The person's gender (International regulations require either "male" or "female"). */
  gender?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Whether the person's `id_number` was provided. */
  id_number_provided?: Maybe<Scalars['Boolean']>;
  /** The person's last name. */
  last_name?: Maybe<Scalars['String']>;
  /** The Kana variation of the person's last name (Japan only). */
  last_name_kana?: Maybe<Scalars['String']>;
  /** The Kanji variation of the person's last name (Japan only). */
  last_name_kanji?: Maybe<Scalars['String']>;
  /** The person's maiden name. */
  maiden_name?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** The country where the person is a national. */
  nationality?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_PersonObjectProperty>;
  /** The person's phone number. */
  phone?: Maybe<Scalars['String']>;
  /** Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
  political_exposure?: Maybe<Stripe_PersonPoliticalExposureProperty>;
  relationship?: Maybe<Stripe_PersonRelationship>;
  requirements?: Maybe<Stripe_PersonRequirements>;
  /** Whether the last four digits of the person's Social Security number have been provided (U.S. only). */
  ssn_last_4_provided?: Maybe<Scalars['Boolean']>;
  verification?: Maybe<Stripe_LegalEntityPersonVerification>;
};

export type Stripe_LegalEntityDob = {
  __typename?: 'Stripe_LegalEntityDob';
  /** The day of birth, between 1 and 31. */
  day?: Maybe<Scalars['Int']>;
  /** The month of birth, between 1 and 12. */
  month?: Maybe<Scalars['Int']>;
  /** The four-digit year of birth. */
  year?: Maybe<Scalars['Int']>;
};

export type Stripe_PersonFutureRequirements = {
  __typename?: 'Stripe_PersonFutureRequirements';
  /** Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
  alternatives?: Maybe<Array<Maybe<Stripe_AccountRequirementsAlternative>>>;
  /** Fields that need to be collected to keep the person's account enabled. If not collected by the account's `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash, and may immediately become `past_due`, but the account may also be given a grace period depending on the account's enablement state prior to transition. */
  currently_due?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
  errors?: Maybe<Array<Maybe<Stripe_AccountRequirementsError>>>;
  /** Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `future_requirements[current_deadline]` becomes set. */
  eventually_due?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Fields that weren't collected by the account's `requirements.current_deadline`. These fields need to be collected to enable the person's account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`. */
  past_due?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. */
  pending_verification?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export enum Stripe_PersonObjectProperty {
  Person = 'person'
}

export enum Stripe_PersonPoliticalExposureProperty {
  Existing = 'existing',
  None = 'none'
}

export type Stripe_PersonRelationship = {
  __typename?: 'Stripe_PersonRelationship';
  /** Whether the person is a director of the account's legal entity. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations. */
  director?: Maybe<Scalars['Boolean']>;
  /** Whether the person has significant responsibility to control, manage, or direct the organization. */
  executive?: Maybe<Scalars['Boolean']>;
  /** Whether the person is an owner of the accountâ€™s legal entity. */
  owner?: Maybe<Scalars['Boolean']>;
  /** The percent owned by the person of the account's legal entity. */
  percent_ownership?: Maybe<Scalars['Float']>;
  /** Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account. */
  representative?: Maybe<Scalars['Boolean']>;
  /** The person's title (e.g., CEO, Support Engineer). */
  title?: Maybe<Scalars['String']>;
};

export type Stripe_PersonRequirements = {
  __typename?: 'Stripe_PersonRequirements';
  /** Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
  alternatives?: Maybe<Array<Maybe<Stripe_AccountRequirementsAlternative>>>;
  /** Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
  currently_due?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
  errors?: Maybe<Array<Maybe<Stripe_AccountRequirementsError>>>;
  /** Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `current_deadline` becomes set. */
  eventually_due?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable the person's account. */
  past_due?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. */
  pending_verification?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type Stripe_LegalEntityPersonVerification = {
  __typename?: 'Stripe_LegalEntityPersonVerification';
  additional_document?: Maybe<Stripe_LegalEntityPersonVerificationDocument>;
  /** A user-displayable string describing the verification state for the person. For example, this may say "Provided identity information could not be verified". */
  details?: Maybe<Scalars['String']>;
  /** One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person. */
  details_code?: Maybe<Scalars['String']>;
  document?: Maybe<Stripe_LegalEntityPersonVerificationDocument>;
  /** The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`. */
  status?: Maybe<Scalars['String']>;
};

export type Stripe_LegalEntityPersonVerificationDocument = {
  __typename?: 'Stripe_LegalEntityPersonVerificationDocument';
  back?: Maybe<Stripe_LegalEntityPersonVerificationDocumentBackProperty>;
  /** A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read". */
  details?: Maybe<Scalars['String']>;
  /** One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document. */
  details_code?: Maybe<Scalars['String']>;
  front?: Maybe<Stripe_LegalEntityPersonVerificationDocumentFrontProperty>;
};

export type Stripe_LegalEntityPersonVerificationDocumentBackProperty = WrappedString | Stripe_File;

export type Stripe_LegalEntityPersonVerificationDocumentFrontProperty = WrappedString | Stripe_File;

export enum Stripe_AccountObjectProperty {
  Account = 'account'
}

export type Stripe_AccountRequirements = {
  __typename?: 'Stripe_AccountRequirements';
  /** Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
  alternatives?: Maybe<Array<Maybe<Stripe_AccountRequirementsAlternative>>>;
  /** Date by which the fields in `currently_due` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected. */
  current_deadline?: Maybe<Scalars['Int']>;
  /** Fields that need to be collected to keep the account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
  currently_due?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** If the account is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`. */
  disabled_reason?: Maybe<Scalars['String']>;
  /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
  errors?: Maybe<Array<Maybe<Stripe_AccountRequirementsError>>>;
  /** Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set. */
  eventually_due?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the account. */
  past_due?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. */
  pending_verification?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type Stripe_AccountSettings = {
  __typename?: 'Stripe_AccountSettings';
  bacs_debit_payments?: Maybe<Stripe_AccountBacsDebitPaymentsSettings>;
  branding?: Maybe<Stripe_AccountBrandingSettings>;
  card_issuing?: Maybe<Stripe_AccountCardIssuingSettings>;
  card_payments?: Maybe<Stripe_AccountCardPaymentsSettings>;
  dashboard?: Maybe<Stripe_AccountDashboardSettings>;
  payments?: Maybe<Stripe_AccountPaymentsSettings>;
  payouts?: Maybe<Stripe_AccountPayoutSettings>;
  sepa_debit_payments?: Maybe<Stripe_AccountSepaDebitPaymentsSettings>;
};

export type Stripe_AccountBacsDebitPaymentsSettings = {
  __typename?: 'Stripe_AccountBacsDebitPaymentsSettings';
  /** The Bacs Direct Debit Display Name for this account. For payments made with Bacs Direct Debit, this will appear on the mandate, and as the statement descriptor. */
  display_name?: Maybe<Scalars['String']>;
};

export type Stripe_AccountBrandingSettings = {
  __typename?: 'Stripe_AccountBrandingSettings';
  icon?: Maybe<Stripe_AccountBrandingSettingsIconProperty>;
  logo?: Maybe<Stripe_AccountBrandingSettingsLogoProperty>;
  /** A CSS hex color value representing the primary branding color for this account */
  primary_color?: Maybe<Scalars['String']>;
  /** A CSS hex color value representing the secondary branding color for this account */
  secondary_color?: Maybe<Scalars['String']>;
};

export type Stripe_AccountBrandingSettingsIconProperty = WrappedString | Stripe_File;

export type Stripe_AccountBrandingSettingsLogoProperty = WrappedString | Stripe_File;

export type Stripe_AccountCardIssuingSettings = {
  __typename?: 'Stripe_AccountCardIssuingSettings';
  tos_acceptance?: Maybe<Stripe_CardIssuingAccountTermsOfService>;
};

export type Stripe_CardIssuingAccountTermsOfService = {
  __typename?: 'Stripe_CardIssuingAccountTermsOfService';
  /** The Unix timestamp marking when the account representative accepted the service agreement. */
  date?: Maybe<Scalars['Int']>;
  /** The IP address from which the account representative accepted the service agreement. */
  ip?: Maybe<Scalars['String']>;
  /** The user agent of the browser from which the account representative accepted the service agreement. */
  user_agent?: Maybe<Scalars['String']>;
};

export type Stripe_AccountCardPaymentsSettings = {
  __typename?: 'Stripe_AccountCardPaymentsSettings';
  decline_on?: Maybe<Stripe_AccountDeclineChargeOn>;
  /** The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion. */
  statement_descriptor_prefix?: Maybe<Scalars['String']>;
};

export type Stripe_AccountDeclineChargeOn = {
  __typename?: 'Stripe_AccountDeclineChargeOn';
  /** Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification. */
  avs_failure?: Maybe<Scalars['Boolean']>;
  /** Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification. */
  cvc_failure?: Maybe<Scalars['Boolean']>;
};

export type Stripe_AccountDashboardSettings = {
  __typename?: 'Stripe_AccountDashboardSettings';
  /** The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts. */
  display_name?: Maybe<Scalars['String']>;
  /** The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). */
  timezone?: Maybe<Scalars['String']>;
};

export type Stripe_AccountPaymentsSettings = {
  __typename?: 'Stripe_AccountPaymentsSettings';
  /** The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. */
  statement_descriptor?: Maybe<Scalars['String']>;
  /** The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only) */
  statement_descriptor_kana?: Maybe<Scalars['String']>;
  /** The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only) */
  statement_descriptor_kanji?: Maybe<Scalars['String']>;
};

export type Stripe_AccountPayoutSettings = {
  __typename?: 'Stripe_AccountPayoutSettings';
  /** A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See our [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances) documentation for details. Default value is `false` for Custom accounts, otherwise `true`. */
  debit_negative_balances?: Maybe<Scalars['Boolean']>;
  schedule?: Maybe<Stripe_TransferSchedule>;
  /** The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard. */
  statement_descriptor?: Maybe<Scalars['String']>;
};

export type Stripe_TransferSchedule = {
  __typename?: 'Stripe_TransferSchedule';
  /** The number of days charges for the account will be held before being paid out. */
  delay_days?: Maybe<Scalars['Int']>;
  /** How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`. */
  interval?: Maybe<Scalars['String']>;
  /** The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months. */
  monthly_anchor?: Maybe<Scalars['Int']>;
  /** The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly. */
  weekly_anchor?: Maybe<Scalars['String']>;
};

export type Stripe_AccountSepaDebitPaymentsSettings = {
  __typename?: 'Stripe_AccountSepaDebitPaymentsSettings';
  /** SEPA creditor identifier that identifies the company making the payment. */
  creditor_id?: Maybe<Scalars['String']>;
};

export type Stripe_AccountTosAcceptance = {
  __typename?: 'Stripe_AccountTosAcceptance';
  /** The Unix timestamp marking when the account representative accepted their service agreement */
  date?: Maybe<Scalars['Int']>;
  /** The IP address from which the account representative accepted their service agreement */
  ip?: Maybe<Scalars['String']>;
  /** The user's service agreement type */
  service_agreement?: Maybe<Scalars['String']>;
  /** The user agent of the browser from which the account representative accepted their service agreement */
  user_agent?: Maybe<Scalars['String']>;
};

export enum Stripe_AccountTypeProperty {
  Custom = 'custom',
  Express = 'express',
  Standard = 'standard'
}

export enum Stripe_BankAccountAvailablePayoutMethodsProperty {
  Instant = 'instant',
  Standard = 'standard'
}

export enum Stripe_BankAccountObjectProperty {
  BankAccount = 'bank_account'
}

export type Stripe_BitcoinReceiver = {
  __typename?: 'Stripe_BitcoinReceiver';
  /** True when this bitcoin receiver has received a non-zero amount of bitcoin. */
  active?: Maybe<Scalars['Boolean']>;
  /** The amount of `currency` that you are collecting as payment. */
  amount?: Maybe<Scalars['Int']>;
  /** The amount of `currency` to which `bitcoin_amount_received` has been converted. */
  amount_received?: Maybe<Scalars['Int']>;
  /** The amount of bitcoin that the customer should send to fill the receiver. The `bitcoin_amount` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin. */
  bitcoin_amount?: Maybe<Scalars['Int']>;
  /** The amount of bitcoin that has been sent by the customer to this receiver. */
  bitcoin_amount_received?: Maybe<Scalars['Int']>;
  /** This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets). */
  bitcoin_uri?: Maybe<Scalars['String']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which the bitcoin will be converted. */
  currency?: Maybe<Scalars['String']>;
  /** The customer ID of the bitcoin receiver. */
  customer?: Maybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** The customer's email address, set by the API call that creates the receiver. */
  email?: Maybe<Scalars['String']>;
  /** This flag is initially false and updates to true when the customer sends the `bitcoin_amount` to this receiver. */
  filled?: Maybe<Scalars['Boolean']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver. */
  inbound_address?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_BitcoinReceiverObjectProperty>;
  /** The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key. */
  payment?: Maybe<Scalars['String']>;
  /** The refund address of this bitcoin receiver. */
  refund_address?: Maybe<Scalars['String']>;
  /** A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key. */
  transactions?: Maybe<Stripe_BitcoinReceiverTransactionsProperty>;
  /** This receiver contains uncaptured funds that can be used for a payment or refunded. */
  uncaptured_funds?: Maybe<Scalars['Boolean']>;
  /** Indicate if this source is used for payment. */
  used_for_payment?: Maybe<Scalars['Boolean']>;
};

export enum Stripe_BitcoinReceiverObjectProperty {
  BitcoinReceiver = 'bitcoin_receiver'
}

/** A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key. */
export type Stripe_BitcoinReceiverTransactionsProperty = {
  __typename?: 'Stripe_BitcoinReceiverTransactionsProperty';
  /** Details about each object. */
  data: Array<Stripe_BitcoinTransaction>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Stripe_BitcoinReceiverTransactionsObjectProperty;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Stripe_BitcoinTransaction = {
  __typename?: 'Stripe_BitcoinTransaction';
  /** The amount of `currency` that the transaction was converted to in real-time. */
  amount?: Maybe<Scalars['Int']>;
  /** The amount of bitcoin contained in the transaction. */
  bitcoin_amount?: Maybe<Scalars['Int']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which this transaction was converted. */
  currency?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_BitcoinTransactionObjectProperty>;
  /** The receiver to which this transaction was sent. */
  receiver?: Maybe<Scalars['String']>;
};

export enum Stripe_BitcoinTransactionObjectProperty {
  BitcoinTransaction = 'bitcoin_transaction'
}

export enum Stripe_BitcoinReceiverTransactionsObjectProperty {
  List = 'list'
}

export type Stripe_Source = {
  __typename?: 'Stripe_Source';
  ach_credit_transfer?: Maybe<Stripe_SourceTypeAchCreditTransfer>;
  ach_debit?: Maybe<Stripe_SourceTypeAchDebit>;
  acss_debit?: Maybe<Stripe_SourceTypeAcssDebit>;
  alipay?: Maybe<Stripe_SourceTypeAlipay>;
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. */
  amount?: Maybe<Scalars['Int']>;
  au_becs_debit?: Maybe<Stripe_SourceTypeAuBecsDebit>;
  bancontact?: Maybe<Stripe_SourceTypeBancontact>;
  card?: Maybe<Stripe_SourceTypeCard>;
  card_present?: Maybe<Stripe_SourceTypeCardPresent>;
  /** The client secret of the source. Used for client-side retrieval using a publishable key. */
  client_secret?: Maybe<Scalars['String']>;
  code_verification?: Maybe<Stripe_SourceCodeVerificationFlow>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources. */
  currency?: Maybe<Scalars['String']>;
  /** The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer. */
  customer?: Maybe<Scalars['String']>;
  eps?: Maybe<Stripe_SourceTypeEps>;
  /** The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. */
  flow?: Maybe<Scalars['String']>;
  giropay?: Maybe<Stripe_SourceTypeGiropay>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  ideal?: Maybe<Stripe_SourceTypeIdeal>;
  klarna?: Maybe<Stripe_SourceTypeKlarna>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  multibanco?: Maybe<Stripe_SourceTypeMultibanco>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_SourceObjectProperty>;
  owner?: Maybe<Stripe_SourceOwner>;
  p24?: Maybe<Stripe_SourceTypeP24>;
  receiver?: Maybe<Stripe_SourceReceiverFlow>;
  redirect?: Maybe<Stripe_SourceRedirectFlow>;
  sepa_debit?: Maybe<Stripe_SourceTypeSepaDebit>;
  sofort?: Maybe<Stripe_SourceTypeSofort>;
  source_order?: Maybe<Stripe_SourceOrder>;
  /** Extra information about a source. This will appear on your customer's statement every time you charge the source. */
  statement_descriptor?: Maybe<Scalars['String']>;
  /** The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge. */
  status?: Maybe<Scalars['String']>;
  three_d_secure?: Maybe<Stripe_SourceTypeThreeDSecure>;
  /** The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used. */
  type?: Maybe<Stripe_SourceTypeProperty>;
  /** Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned. */
  usage?: Maybe<Scalars['String']>;
  wechat?: Maybe<Stripe_SourceTypeWechat>;
};

export type Stripe_SourceTypeAchCreditTransfer = {
  __typename?: 'Stripe_SourceTypeAchCreditTransfer';
  account_number?: Maybe<Scalars['String']>;
  bank_name?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  refund_account_holder_name?: Maybe<Scalars['String']>;
  refund_account_holder_type?: Maybe<Scalars['String']>;
  refund_routing_number?: Maybe<Scalars['String']>;
  routing_number?: Maybe<Scalars['String']>;
  swift_code?: Maybe<Scalars['String']>;
};

export type Stripe_SourceTypeAchDebit = {
  __typename?: 'Stripe_SourceTypeAchDebit';
  bank_name?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  routing_number?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type Stripe_SourceTypeAcssDebit = {
  __typename?: 'Stripe_SourceTypeAcssDebit';
  bank_address_city?: Maybe<Scalars['String']>;
  bank_address_line_1?: Maybe<Scalars['String']>;
  bank_address_line_2?: Maybe<Scalars['String']>;
  bank_address_postal_code?: Maybe<Scalars['String']>;
  bank_name?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  routing_number?: Maybe<Scalars['String']>;
};

export type Stripe_SourceTypeAlipay = {
  __typename?: 'Stripe_SourceTypeAlipay';
  data_string?: Maybe<Scalars['String']>;
  native_url?: Maybe<Scalars['String']>;
  statement_descriptor?: Maybe<Scalars['String']>;
};

export type Stripe_SourceTypeAuBecsDebit = {
  __typename?: 'Stripe_SourceTypeAuBecsDebit';
  bsb_number?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
};

export type Stripe_SourceTypeBancontact = {
  __typename?: 'Stripe_SourceTypeBancontact';
  bank_code?: Maybe<Scalars['String']>;
  bank_name?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  iban_last4?: Maybe<Scalars['String']>;
  preferred_language?: Maybe<Scalars['String']>;
  statement_descriptor?: Maybe<Scalars['String']>;
};

export type Stripe_SourceTypeCard = {
  __typename?: 'Stripe_SourceTypeCard';
  address_line1_check?: Maybe<Scalars['String']>;
  address_zip_check?: Maybe<Scalars['String']>;
  brand?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  cvc_check?: Maybe<Scalars['String']>;
  dynamic_last4?: Maybe<Scalars['String']>;
  exp_month?: Maybe<Scalars['Int']>;
  exp_year?: Maybe<Scalars['Int']>;
  fingerprint?: Maybe<Scalars['String']>;
  funding?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  three_d_secure?: Maybe<Scalars['String']>;
  tokenization_method?: Maybe<Scalars['String']>;
};

export type Stripe_SourceTypeCardPresent = {
  __typename?: 'Stripe_SourceTypeCardPresent';
  application_cryptogram?: Maybe<Scalars['String']>;
  application_preferred_name?: Maybe<Scalars['String']>;
  authorization_code?: Maybe<Scalars['String']>;
  authorization_response_code?: Maybe<Scalars['String']>;
  brand?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  cvm_type?: Maybe<Scalars['String']>;
  data_type?: Maybe<Scalars['String']>;
  dedicated_file_name?: Maybe<Scalars['String']>;
  emv_auth_data?: Maybe<Scalars['String']>;
  evidence_customer_signature?: Maybe<Scalars['String']>;
  evidence_transaction_certificate?: Maybe<Scalars['String']>;
  exp_month?: Maybe<Scalars['Int']>;
  exp_year?: Maybe<Scalars['Int']>;
  fingerprint?: Maybe<Scalars['String']>;
  funding?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  pos_device_id?: Maybe<Scalars['String']>;
  pos_entry_mode?: Maybe<Scalars['String']>;
  read_method?: Maybe<Scalars['String']>;
  reader?: Maybe<Scalars['String']>;
  terminal_verification_results?: Maybe<Scalars['String']>;
  transaction_status_information?: Maybe<Scalars['String']>;
};

export type Stripe_SourceCodeVerificationFlow = {
  __typename?: 'Stripe_SourceCodeVerificationFlow';
  /** The number of attempts remaining to authenticate the source object with a verification code. */
  attempts_remaining?: Maybe<Scalars['Int']>;
  /** The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0). */
  status?: Maybe<Scalars['String']>;
};

export type Stripe_SourceTypeEps = {
  __typename?: 'Stripe_SourceTypeEps';
  reference?: Maybe<Scalars['String']>;
  statement_descriptor?: Maybe<Scalars['String']>;
};

export type Stripe_SourceTypeGiropay = {
  __typename?: 'Stripe_SourceTypeGiropay';
  bank_code?: Maybe<Scalars['String']>;
  bank_name?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  statement_descriptor?: Maybe<Scalars['String']>;
};

export type Stripe_SourceTypeIdeal = {
  __typename?: 'Stripe_SourceTypeIdeal';
  bank?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  iban_last4?: Maybe<Scalars['String']>;
  statement_descriptor?: Maybe<Scalars['String']>;
};

export type Stripe_SourceTypeKlarna = {
  __typename?: 'Stripe_SourceTypeKlarna';
  background_image_url?: Maybe<Scalars['String']>;
  client_token?: Maybe<Scalars['String']>;
  first_name?: Maybe<Scalars['String']>;
  last_name?: Maybe<Scalars['String']>;
  locale?: Maybe<Scalars['String']>;
  logo_url?: Maybe<Scalars['String']>;
  page_title?: Maybe<Scalars['String']>;
  pay_later_asset_urls_descriptive?: Maybe<Scalars['String']>;
  pay_later_asset_urls_standard?: Maybe<Scalars['String']>;
  pay_later_name?: Maybe<Scalars['String']>;
  pay_later_redirect_url?: Maybe<Scalars['String']>;
  pay_now_asset_urls_descriptive?: Maybe<Scalars['String']>;
  pay_now_asset_urls_standard?: Maybe<Scalars['String']>;
  pay_now_name?: Maybe<Scalars['String']>;
  pay_now_redirect_url?: Maybe<Scalars['String']>;
  pay_over_time_asset_urls_descriptive?: Maybe<Scalars['String']>;
  pay_over_time_asset_urls_standard?: Maybe<Scalars['String']>;
  pay_over_time_name?: Maybe<Scalars['String']>;
  pay_over_time_redirect_url?: Maybe<Scalars['String']>;
  payment_method_categories?: Maybe<Scalars['String']>;
  purchase_country?: Maybe<Scalars['String']>;
  purchase_type?: Maybe<Scalars['String']>;
  redirect_url?: Maybe<Scalars['String']>;
  shipping_delay?: Maybe<Scalars['Int']>;
  shipping_first_name?: Maybe<Scalars['String']>;
  shipping_last_name?: Maybe<Scalars['String']>;
};

export type Stripe_SourceTypeMultibanco = {
  __typename?: 'Stripe_SourceTypeMultibanco';
  entity?: Maybe<Scalars['String']>;
  reference?: Maybe<Scalars['String']>;
  refund_account_holder_address_city?: Maybe<Scalars['String']>;
  refund_account_holder_address_country?: Maybe<Scalars['String']>;
  refund_account_holder_address_line1?: Maybe<Scalars['String']>;
  refund_account_holder_address_line2?: Maybe<Scalars['String']>;
  refund_account_holder_address_postal_code?: Maybe<Scalars['String']>;
  refund_account_holder_address_state?: Maybe<Scalars['String']>;
  refund_account_holder_name?: Maybe<Scalars['String']>;
  refund_iban?: Maybe<Scalars['String']>;
};

export enum Stripe_SourceObjectProperty {
  Source = 'source'
}

export type Stripe_SourceOwner = {
  __typename?: 'Stripe_SourceOwner';
  address?: Maybe<Stripe_Address>;
  /** Owner's email address. */
  email?: Maybe<Scalars['String']>;
  /** Owner's full name. */
  name?: Maybe<Scalars['String']>;
  /** Owner's phone number (including extension). */
  phone?: Maybe<Scalars['String']>;
  verified_address?: Maybe<Stripe_Address>;
  /** Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  verified_email?: Maybe<Scalars['String']>;
  /** Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  verified_name?: Maybe<Scalars['String']>;
  /** Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  verified_phone?: Maybe<Scalars['String']>;
};

export type Stripe_SourceTypeP24 = {
  __typename?: 'Stripe_SourceTypeP24';
  reference?: Maybe<Scalars['String']>;
};

export type Stripe_SourceReceiverFlow = {
  __typename?: 'Stripe_SourceReceiverFlow';
  /** The address of the receiver source. This is the value that should be communicated to the customer to send their funds to. */
  address?: Maybe<Scalars['String']>;
  /** The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency. */
  amount_charged?: Maybe<Scalars['Int']>;
  /** The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency. */
  amount_received?: Maybe<Scalars['Int']>;
  /** The total amount that was returned to the customer. The amount returned is expressed in the source's currency. */
  amount_returned?: Maybe<Scalars['Int']>;
  /** Type of refund attribute method, one of `email`, `manual`, or `none`. */
  refund_attributes_method?: Maybe<Scalars['String']>;
  /** Type of refund attribute status, one of `missing`, `requested`, or `available`. */
  refund_attributes_status?: Maybe<Scalars['String']>;
};

export type Stripe_SourceRedirectFlow = {
  __typename?: 'Stripe_SourceRedirectFlow';
  /** The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`. */
  failure_reason?: Maybe<Scalars['String']>;
  /** The URL you provide to redirect the customer to after they authenticated their payment. */
  return_url?: Maybe<Scalars['String']>;
  /** The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused). */
  status?: Maybe<Scalars['String']>;
  /** The URL provided to you to redirect a customer to as part of a `redirect` authentication flow. */
  url?: Maybe<Scalars['String']>;
};

export type Stripe_SourceTypeSepaDebit = {
  __typename?: 'Stripe_SourceTypeSepaDebit';
  bank_code?: Maybe<Scalars['String']>;
  branch_code?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  mandate_reference?: Maybe<Scalars['String']>;
  mandate_url?: Maybe<Scalars['String']>;
};

export type Stripe_SourceTypeSofort = {
  __typename?: 'Stripe_SourceTypeSofort';
  bank_code?: Maybe<Scalars['String']>;
  bank_name?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  iban_last4?: Maybe<Scalars['String']>;
  preferred_language?: Maybe<Scalars['String']>;
  statement_descriptor?: Maybe<Scalars['String']>;
};

export type Stripe_SourceOrder = {
  __typename?: 'Stripe_SourceOrder';
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order. */
  amount?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** The email address of the customer placing the order. */
  email?: Maybe<Scalars['String']>;
  /** List of items constituting the order. */
  items?: Maybe<Array<Maybe<Stripe_SourceOrderItem>>>;
  shipping?: Maybe<Stripe_Shipping>;
};

export type Stripe_SourceOrderItem = {
  __typename?: 'Stripe_SourceOrderItem';
  /** The amount (price) for this order item. */
  amount?: Maybe<Scalars['Int']>;
  /** This currency of this order item. Required when `amount` is present. */
  currency?: Maybe<Scalars['String']>;
  /** Human-readable description for this order item. */
  description?: Maybe<Scalars['String']>;
  /** The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU). */
  parent?: Maybe<Scalars['String']>;
  /** The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered. */
  quantity?: Maybe<Scalars['Int']>;
  /** The type of this order item. Must be `sku`, `tax`, or `shipping`. */
  type?: Maybe<Scalars['String']>;
};

export type Stripe_Shipping = {
  __typename?: 'Stripe_Shipping';
  address?: Maybe<Stripe_Address>;
  /** The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. */
  carrier?: Maybe<Scalars['String']>;
  /** Recipient name. */
  name?: Maybe<Scalars['String']>;
  /** Recipient phone (including extension). */
  phone?: Maybe<Scalars['String']>;
  /** The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
  tracking_number?: Maybe<Scalars['String']>;
};

export type Stripe_SourceTypeThreeDSecure = {
  __typename?: 'Stripe_SourceTypeThreeDSecure';
  address_line1_check?: Maybe<Scalars['String']>;
  address_zip_check?: Maybe<Scalars['String']>;
  authenticated?: Maybe<Scalars['Boolean']>;
  brand?: Maybe<Scalars['String']>;
  card?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customer?: Maybe<Scalars['String']>;
  cvc_check?: Maybe<Scalars['String']>;
  dynamic_last4?: Maybe<Scalars['String']>;
  exp_month?: Maybe<Scalars['Int']>;
  exp_year?: Maybe<Scalars['Int']>;
  fingerprint?: Maybe<Scalars['String']>;
  funding?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  three_d_secure?: Maybe<Scalars['String']>;
  tokenization_method?: Maybe<Scalars['String']>;
};

export enum Stripe_SourceTypeProperty {
  AchCreditTransfer = 'ach_credit_transfer',
  AchDebit = 'ach_debit',
  AcssDebit = 'acss_debit',
  Alipay = 'alipay',
  AuBecsDebit = 'au_becs_debit',
  Bancontact = 'bancontact',
  Card = 'card',
  CardPresent = 'card_present',
  Eps = 'eps',
  Giropay = 'giropay',
  Ideal = 'ideal',
  Klarna = 'klarna',
  Multibanco = 'multibanco',
  P24 = 'p24',
  SepaDebit = 'sepa_debit',
  Sofort = 'sofort',
  ThreeDSecure = 'three_d_secure',
  Wechat = 'wechat'
}

export type Stripe_SourceTypeWechat = {
  __typename?: 'Stripe_SourceTypeWechat';
  prepay_id?: Maybe<Scalars['String']>;
  qr_code_url?: Maybe<Scalars['String']>;
  statement_descriptor?: Maybe<Scalars['String']>;
};

export type Stripe_Discount = {
  __typename?: 'Stripe_Discount';
  /** The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode. */
  checkout_session?: Maybe<Scalars['String']>;
  coupon?: Maybe<Stripe_Coupon>;
  customer?: Maybe<Scalars['String']>;
  /** If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null. */
  end?: Maybe<Scalars['Int']>;
  /** The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array. */
  id?: Maybe<Scalars['String']>;
  /** The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice. */
  invoice?: Maybe<Scalars['String']>;
  /** The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item. */
  invoice_item?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_DiscountObjectProperty>;
  promotion_code?: Maybe<Stripe_DiscountPromotionCodeProperty>;
  /** Date that the coupon was applied. */
  start?: Maybe<Scalars['Int']>;
  /** The subscription that this coupon is applied to, if it is applied to a particular subscription. */
  subscription?: Maybe<Scalars['String']>;
};

export type Stripe_Coupon = {
  __typename?: 'Stripe_Coupon';
  /** Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer. */
  amount_off?: Maybe<Scalars['Int']>;
  applies_to?: Maybe<Stripe_CouponAppliesTo>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off. */
  currency?: Maybe<Scalars['String']>;
  /** One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount. */
  duration?: Maybe<Stripe_CouponDurationProperty>;
  /** If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`. */
  duration_in_months?: Maybe<Scalars['Int']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid. */
  max_redemptions?: Maybe<Scalars['Int']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** Name of the coupon displayed to customers on for instance invoices or receipts. */
  name?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_CouponObjectProperty>;
  /** Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a %s100 invoice %s50 instead. */
  percent_off?: Maybe<Scalars['Float']>;
  /** Date after which the coupon can no longer be redeemed. */
  redeem_by?: Maybe<Scalars['Int']>;
  /** Number of times this coupon has been applied to a customer. */
  times_redeemed?: Maybe<Scalars['Int']>;
  /** Taking account of the above properties, whether this coupon can still be applied to a customer. */
  valid?: Maybe<Scalars['Boolean']>;
};

export type Stripe_CouponAppliesTo = {
  __typename?: 'Stripe_CouponAppliesTo';
  /** A list of product IDs this coupon applies to */
  products?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export enum Stripe_CouponDurationProperty {
  Forever = 'forever',
  Once = 'once',
  Repeating = 'repeating'
}

export enum Stripe_CouponObjectProperty {
  Coupon = 'coupon'
}

export enum Stripe_DiscountObjectProperty {
  Discount = 'discount'
}

export type Stripe_DiscountPromotionCodeProperty = WrappedString | Stripe_PromotionCode;

export type Stripe_PromotionCode = {
  __typename?: 'Stripe_PromotionCode';
  /** Whether the promotion code is currently active. A promotion code is only active if the coupon is also valid. */
  active?: Maybe<Scalars['Boolean']>;
  /** The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer. */
  code?: Maybe<Scalars['String']>;
  coupon?: Maybe<Stripe_Coupon>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  customer?: Maybe<Stripe_PromotionCodeCustomerProperty>;
  /** Date at which the promotion code can no longer be redeemed. */
  expires_at?: Maybe<Scalars['Int']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Maximum number of times this promotion code can be redeemed. */
  max_redemptions?: Maybe<Scalars['Int']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_PromotionCodeObjectProperty>;
  restrictions?: Maybe<Stripe_PromotionCodesResourceRestrictions>;
  /** Number of times this promotion code has been used. */
  times_redeemed?: Maybe<Scalars['Int']>;
};

export type Stripe_PromotionCodeCustomerProperty = WrappedString | Stripe_Customer | Stripe_DeletedCustomer;

export type Stripe_DeletedCustomer = {
  __typename?: 'Stripe_DeletedCustomer';
  /** Always true for a deleted object */
  deleted?: Maybe<Scalars['Boolean']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_DeletedCustomerObjectProperty>;
};

export enum Stripe_DeletedCustomerObjectProperty {
  Customer = 'customer'
}

export enum Stripe_PromotionCodeObjectProperty {
  PromotionCode = 'promotion_code'
}

export type Stripe_PromotionCodesResourceRestrictions = {
  __typename?: 'Stripe_PromotionCodesResourceRestrictions';
  /** A Boolean indicating if the Promotion Code should only be redeemed for Customers without any successful payments or invoices */
  first_time_transaction?: Maybe<Scalars['Boolean']>;
  /** Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work). */
  minimum_amount?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO code](https://stripe.com/docs/currencies) for minimum_amount */
  minimum_amount_currency?: Maybe<Scalars['String']>;
};

export type Stripe_InvoiceSettingCustomerSetting = {
  __typename?: 'Stripe_InvoiceSettingCustomerSetting';
  /** Default custom fields to be displayed on invoices for this customer. */
  custom_fields?: Maybe<Array<Maybe<Stripe_InvoiceSettingCustomField>>>;
  default_payment_method?: Maybe<Stripe_InvoiceSettingCustomerSettingDefaultPaymentMethodProperty>;
  /** Default footer to be displayed on invoices for this customer. */
  footer?: Maybe<Scalars['String']>;
};

export type Stripe_InvoiceSettingCustomField = {
  __typename?: 'Stripe_InvoiceSettingCustomField';
  /** The name of the custom field. */
  name?: Maybe<Scalars['String']>;
  /** The value of the custom field. */
  value?: Maybe<Scalars['String']>;
};

export type Stripe_InvoiceSettingCustomerSettingDefaultPaymentMethodProperty = WrappedString | Stripe_PaymentMethod;

export type Stripe_PaymentMethod = {
  __typename?: 'Stripe_PaymentMethod';
  acss_debit?: Maybe<Stripe_PaymentMethodAcssDebit>;
  afterpay_clearpay?: Maybe<Stripe_PaymentMethodAfterpayClearpay>;
  alipay?: Maybe<Stripe_PaymentFlowsPrivatePaymentMethodsAlipay>;
  au_becs_debit?: Maybe<Stripe_PaymentMethodAuBecsDebit>;
  bacs_debit?: Maybe<Stripe_PaymentMethodBacsDebit>;
  bancontact?: Maybe<Stripe_PaymentMethodBancontact>;
  billing_details?: Maybe<Stripe_BillingDetails>;
  boleto?: Maybe<Stripe_PaymentMethodBoleto>;
  card?: Maybe<Stripe_PaymentMethodCard>;
  card_present?: Maybe<Stripe_PaymentMethodCardPresent>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  customer?: Maybe<Stripe_PaymentMethodCustomerProperty>;
  customer_balance?: Maybe<Stripe_PaymentMethodCustomerBalance>;
  eps?: Maybe<Stripe_PaymentMethodEps>;
  fpx?: Maybe<Stripe_PaymentMethodFpx>;
  giropay?: Maybe<Stripe_PaymentMethodGiropay>;
  grabpay?: Maybe<Stripe_PaymentMethodGrabpay>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  ideal?: Maybe<Stripe_PaymentMethodIdeal>;
  interac_present?: Maybe<Stripe_PaymentMethodInteracPresent>;
  klarna?: Maybe<Stripe_PaymentMethodKlarna>;
  konbini?: Maybe<Stripe_PaymentMethodKonbini>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_PaymentMethodObjectProperty>;
  oxxo?: Maybe<Stripe_PaymentMethodOxxo>;
  p24?: Maybe<Stripe_PaymentMethodP24>;
  paynow?: Maybe<Stripe_PaymentMethodPaynow>;
  sepa_debit?: Maybe<Stripe_PaymentMethodSepaDebit>;
  sofort?: Maybe<Stripe_PaymentMethodSofort>;
  /** The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type. */
  type?: Maybe<Stripe_PaymentMethodTypeProperty>;
  us_bank_account?: Maybe<Stripe_PaymentMethodUsBankAccount>;
  wechat_pay?: Maybe<Stripe_PaymentMethodWechatPay>;
};

export type Stripe_PaymentMethodAcssDebit = {
  __typename?: 'Stripe_PaymentMethodAcssDebit';
  /** Name of the bank associated with the bank account. */
  bank_name?: Maybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Institution number of the bank account. */
  institution_number?: Maybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: Maybe<Scalars['String']>;
  /** Transit number of the bank account. */
  transit_number?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentMethodAfterpayClearpay = {
  __typename?: 'Stripe_PaymentMethodAfterpayClearpay';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentFlowsPrivatePaymentMethodsAlipay = {
  __typename?: 'Stripe_PaymentFlowsPrivatePaymentMethodsAlipay';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodAuBecsDebit = {
  __typename?: 'Stripe_PaymentMethodAuBecsDebit';
  /** Six-digit number identifying bank and branch associated with this bank account. */
  bsb_number?: Maybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentMethodBacsDebit = {
  __typename?: 'Stripe_PaymentMethodBacsDebit';
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: Maybe<Scalars['String']>;
  /** Sort code of the bank account. (e.g., `10-20-30`) */
  sort_code?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentMethodBancontact = {
  __typename?: 'Stripe_PaymentMethodBancontact';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_BillingDetails = {
  __typename?: 'Stripe_BillingDetails';
  address?: Maybe<Stripe_Address>;
  /** Email address. */
  email?: Maybe<Scalars['String']>;
  /** Full name. */
  name?: Maybe<Scalars['String']>;
  /** Billing phone number (including extension). */
  phone?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentMethodBoleto = {
  __typename?: 'Stripe_PaymentMethodBoleto';
  /** Uniquely identifies the customer tax id (CNPJ or CPF) */
  tax_id?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentMethodCard = {
  __typename?: 'Stripe_PaymentMethodCard';
  /** Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  brand?: Maybe<Scalars['String']>;
  checks?: Maybe<Stripe_PaymentMethodCardChecks>;
  /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
  country?: Maybe<Scalars['String']>;
  /** Two-digit number representing the card's expiration month. */
  exp_month?: Maybe<Scalars['Int']>;
  /** Four-digit number representing the card's expiration year. */
  exp_year?: Maybe<Scalars['Int']>;
  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   */
  fingerprint?: Maybe<Scalars['String']>;
  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: Maybe<Scalars['String']>;
  generated_from?: Maybe<Stripe_PaymentMethodCardGeneratedCard>;
  /** The last four digits of the card. */
  last4?: Maybe<Scalars['String']>;
  networks?: Maybe<Stripe_Networks>;
  three_d_secure_usage?: Maybe<Stripe_ThreeDSecureUsage>;
  wallet?: Maybe<Stripe_PaymentMethodCardWallet>;
};

export type Stripe_PaymentMethodCardChecks = {
  __typename?: 'Stripe_PaymentMethodCardChecks';
  /** If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  address_line1_check?: Maybe<Scalars['String']>;
  /** If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  address_postal_code_check?: Maybe<Scalars['String']>;
  /** If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  cvc_check?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentMethodCardGeneratedCard = {
  __typename?: 'Stripe_PaymentMethodCardGeneratedCard';
  /** The charge that created this object. */
  charge?: Maybe<Scalars['String']>;
  payment_method_details?: Maybe<Stripe_CardGeneratedFromPaymentMethodDetails>;
  setup_attempt?: Maybe<Stripe_PaymentMethodCardGeneratedCardSetupAttemptProperty>;
};

export type Stripe_CardGeneratedFromPaymentMethodDetails = {
  __typename?: 'Stripe_CardGeneratedFromPaymentMethodDetails';
  card_present?: Maybe<Stripe_PaymentMethodDetailsCardPresent>;
  /** The type of payment method transaction-specific details from the transaction that generated this `card` payment method. Always `card_present`. */
  type?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsCardPresent = {
  __typename?: 'Stripe_PaymentMethodDetailsCardPresent';
  /** The authorized amount */
  amount_authorized?: Maybe<Scalars['Int']>;
  /** Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  brand?: Maybe<Scalars['String']>;
  /** When using manual capture, a future timestamp after which the charge will be automatically refunded if uncaptured. */
  capture_before?: Maybe<Scalars['Int']>;
  /** The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay. */
  cardholder_name?: Maybe<Scalars['String']>;
  /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
  country?: Maybe<Scalars['String']>;
  /** Authorization response cryptogram. */
  emv_auth_data?: Maybe<Scalars['String']>;
  /** Two-digit number representing the card's expiration month. */
  exp_month?: Maybe<Scalars['Int']>;
  /** Four-digit number representing the card's expiration year. */
  exp_year?: Maybe<Scalars['Int']>;
  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   */
  fingerprint?: Maybe<Scalars['String']>;
  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: Maybe<Scalars['String']>;
  /** ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod. */
  generated_card?: Maybe<Scalars['String']>;
  /** Whether this [PaymentIntent](https://stripe.com/docs/api/payment_intents) is eligible for incremental authorizations. Request support using [request_incremental_authorization_support](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-payment_method_options-card_present-request_incremental_authorization_support). */
  incremental_authorization_supported?: Maybe<Scalars['Boolean']>;
  /** The last four digits of the card. */
  last4?: Maybe<Scalars['String']>;
  /** Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  network?: Maybe<Scalars['String']>;
  /** Defines whether the authorized amount can be over-captured or not */
  overcapture_supported?: Maybe<Scalars['Boolean']>;
  /** How card details were read in this transaction. */
  read_method?: Maybe<Stripe_PaymentMethodDetailsCardPresentReadMethodProperty>;
  receipt?: Maybe<Stripe_PaymentMethodDetailsCardPresentReceipt>;
};

export enum Stripe_PaymentMethodDetailsCardPresentReadMethodProperty {
  ContactEmv = 'contact_emv',
  ContactlessEmv = 'contactless_emv',
  ContactlessMagstripeMode = 'contactless_magstripe_mode',
  MagneticStripeFallback = 'magnetic_stripe_fallback',
  MagneticStripeTrack2 = 'magnetic_stripe_track2'
}

export type Stripe_PaymentMethodDetailsCardPresentReceipt = {
  __typename?: 'Stripe_PaymentMethodDetailsCardPresentReceipt';
  /** The type of account being debited or credited */
  account_type?: Maybe<Stripe_PaymentMethodDetailsCardPresentReceiptAccountTypeProperty>;
  /** EMV tag 9F26, cryptogram generated by the integrated circuit chip. */
  application_cryptogram?: Maybe<Scalars['String']>;
  /** Mnenomic of the Application Identifier. */
  application_preferred_name?: Maybe<Scalars['String']>;
  /** Identifier for this transaction. */
  authorization_code?: Maybe<Scalars['String']>;
  /** EMV tag 8A. A code returned by the card issuer. */
  authorization_response_code?: Maybe<Scalars['String']>;
  /** How the cardholder verified ownership of the card. */
  cardholder_verification_method?: Maybe<Scalars['String']>;
  /** EMV tag 84. Similar to the application identifier stored on the integrated circuit chip. */
  dedicated_file_name?: Maybe<Scalars['String']>;
  /** The outcome of a series of EMV functions performed by the card reader. */
  terminal_verification_results?: Maybe<Scalars['String']>;
  /** An indication of various EMV functions performed during the transaction. */
  transaction_status_information?: Maybe<Scalars['String']>;
};

export enum Stripe_PaymentMethodDetailsCardPresentReceiptAccountTypeProperty {
  Checking = 'checking',
  Credit = 'credit',
  Prepaid = 'prepaid',
  Unknown = 'unknown'
}

export type Stripe_PaymentMethodCardGeneratedCardSetupAttemptProperty = WrappedString | Stripe_SetupAttempt;

export type Stripe_SetupAttempt = {
  __typename?: 'Stripe_SetupAttempt';
  application?: Maybe<Stripe_SetupAttemptApplicationProperty>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  customer?: Maybe<Stripe_SetupAttemptCustomerProperty>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_SetupAttemptObjectProperty>;
  on_behalf_of?: Maybe<Stripe_SetupAttemptOnBehalfOfProperty>;
  payment_method?: Maybe<Stripe_SetupAttemptPaymentMethodProperty>;
  payment_method_details?: Maybe<Stripe_SetupAttemptPaymentMethodDetails>;
  setup_error?: Maybe<Stripe_ApiErrors>;
  setup_intent?: Maybe<Stripe_SetupAttemptSetupIntentProperty>;
  /** Status of this SetupAttempt, one of `requires_confirmation`, `requires_action`, `processing`, `succeeded`, `failed`, or `abandoned`. */
  status?: Maybe<Scalars['String']>;
  /** The value of [usage](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-usage) on the SetupIntent at the time of this confirmation, one of `off_session` or `on_session`. */
  usage?: Maybe<Scalars['String']>;
};

export type Stripe_SetupAttemptApplicationProperty = WrappedString | Stripe_Application;

export type Stripe_Application = {
  __typename?: 'Stripe_Application';
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** The name of the application. */
  name?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_ApplicationObjectProperty>;
};

export enum Stripe_ApplicationObjectProperty {
  Application = 'application'
}

export type Stripe_SetupAttemptCustomerProperty = WrappedString | Stripe_Customer | Stripe_DeletedCustomer;

export enum Stripe_SetupAttemptObjectProperty {
  SetupAttempt = 'setup_attempt'
}

export type Stripe_SetupAttemptOnBehalfOfProperty = WrappedString | Stripe_Account;

export type Stripe_SetupAttemptPaymentMethodProperty = WrappedString | Stripe_PaymentMethod;

export type Stripe_SetupAttemptPaymentMethodDetails = {
  __typename?: 'Stripe_SetupAttemptPaymentMethodDetails';
  acss_debit?: Maybe<Stripe_SetupAttemptPaymentMethodDetailsAcssDebit>;
  au_becs_debit?: Maybe<Stripe_SetupAttemptPaymentMethodDetailsAuBecsDebit>;
  bacs_debit?: Maybe<Stripe_SetupAttemptPaymentMethodDetailsBacsDebit>;
  bancontact?: Maybe<Stripe_SetupAttemptPaymentMethodDetailsBancontact>;
  boleto?: Maybe<Stripe_SetupAttemptPaymentMethodDetailsBoleto>;
  card?: Maybe<Stripe_SetupAttemptPaymentMethodDetailsCard>;
  card_present?: Maybe<Stripe_SetupAttemptPaymentMethodDetailsCardPresent>;
  ideal?: Maybe<Stripe_SetupAttemptPaymentMethodDetailsIdeal>;
  sepa_debit?: Maybe<Stripe_SetupAttemptPaymentMethodDetailsSepaDebit>;
  sofort?: Maybe<Stripe_SetupAttemptPaymentMethodDetailsSofort>;
  /** The type of the payment method used in the SetupIntent (e.g., `card`). An additional hash is included on `payment_method_details` with a name matching this value. It contains confirmation-specific information for the payment method. */
  type?: Maybe<Scalars['String']>;
  us_bank_account?: Maybe<Stripe_SetupAttemptPaymentMethodDetailsUsBankAccount>;
};

export type Stripe_SetupAttemptPaymentMethodDetailsAcssDebit = {
  __typename?: 'Stripe_SetupAttemptPaymentMethodDetailsAcssDebit';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_SetupAttemptPaymentMethodDetailsAuBecsDebit = {
  __typename?: 'Stripe_SetupAttemptPaymentMethodDetailsAuBecsDebit';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_SetupAttemptPaymentMethodDetailsBacsDebit = {
  __typename?: 'Stripe_SetupAttemptPaymentMethodDetailsBacsDebit';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_SetupAttemptPaymentMethodDetailsBancontact = {
  __typename?: 'Stripe_SetupAttemptPaymentMethodDetailsBancontact';
  /** Bank code of bank associated with the bank account. */
  bank_code?: Maybe<Scalars['String']>;
  /** Name of the bank associated with the bank account. */
  bank_name?: Maybe<Scalars['String']>;
  /** Bank Identifier Code of the bank associated with the bank account. */
  bic?: Maybe<Scalars['String']>;
  generated_sepa_debit?: Maybe<Stripe_SetupAttemptPaymentMethodDetailsBancontactGeneratedSepaDebitProperty>;
  generated_sepa_debit_mandate?: Maybe<Stripe_SetupAttemptPaymentMethodDetailsBancontactGeneratedSepaDebitMandateProperty>;
  /** Last four characters of the IBAN. */
  iban_last4?: Maybe<Scalars['String']>;
  /**
   * Preferred language of the Bancontact authorization page that the customer is redirected to.
   * Can be one of `en`, `de`, `fr`, or `nl`
   */
  preferred_language?: Maybe<Stripe_SetupAttemptPaymentMethodDetailsBancontactPreferredLanguageProperty>;
  /**
   * Owner's verified full name. Values are verified or provided by Bancontact directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: Maybe<Scalars['String']>;
};

export type Stripe_SetupAttemptPaymentMethodDetailsBancontactGeneratedSepaDebitProperty = WrappedString | Stripe_PaymentMethod;

export type Stripe_SetupAttemptPaymentMethodDetailsBancontactGeneratedSepaDebitMandateProperty = WrappedString | Stripe_Mandate;

export type Stripe_Mandate = {
  __typename?: 'Stripe_Mandate';
  customer_acceptance?: Maybe<Stripe_CustomerAcceptance>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  multi_use?: Maybe<Stripe_MandateMultiUse>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_MandateObjectProperty>;
  payment_method?: Maybe<Stripe_MandatePaymentMethodProperty>;
  payment_method_details?: Maybe<Stripe_MandatePaymentMethodDetails>;
  single_use?: Maybe<Stripe_MandateSingleUse>;
  /** The status of the mandate, which indicates whether it can be used to initiate a payment. */
  status?: Maybe<Stripe_MandateStatusProperty>;
  /** The type of the mandate. */
  type?: Maybe<Stripe_MandateTypeProperty>;
};

export type Stripe_CustomerAcceptance = {
  __typename?: 'Stripe_CustomerAcceptance';
  /** The time at which the customer accepted the Mandate. */
  accepted_at?: Maybe<Scalars['Int']>;
  offline?: Maybe<Stripe_OfflineAcceptance>;
  online?: Maybe<Stripe_OnlineAcceptance>;
  /** The type of customer acceptance information included with the Mandate. One of `online` or `offline`. */
  type?: Maybe<Stripe_CustomerAcceptanceTypeProperty>;
};

export type Stripe_OfflineAcceptance = {
  __typename?: 'Stripe_OfflineAcceptance';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_OnlineAcceptance = {
  __typename?: 'Stripe_OnlineAcceptance';
  /** The IP address from which the Mandate was accepted by the customer. */
  ip_address?: Maybe<Scalars['String']>;
  /** The user agent of the browser from which the Mandate was accepted by the customer. */
  user_agent?: Maybe<Scalars['String']>;
};

export enum Stripe_CustomerAcceptanceTypeProperty {
  Offline = 'offline',
  Online = 'online'
}

export type Stripe_MandateMultiUse = {
  __typename?: 'Stripe_MandateMultiUse';
  result?: Maybe<Scalars['JSONObject']>;
};

export enum Stripe_MandateObjectProperty {
  Mandate = 'mandate'
}

export type Stripe_MandatePaymentMethodProperty = WrappedString | Stripe_PaymentMethod;

export type Stripe_MandatePaymentMethodDetails = {
  __typename?: 'Stripe_MandatePaymentMethodDetails';
  acss_debit?: Maybe<Stripe_MandateAcssDebit>;
  au_becs_debit?: Maybe<Stripe_MandateAuBecsDebit>;
  bacs_debit?: Maybe<Stripe_MandateBacsDebit>;
  card?: Maybe<Stripe_CardMandatePaymentMethodDetails>;
  sepa_debit?: Maybe<Stripe_MandateSepaDebit>;
  /** The type of the payment method associated with this mandate. An additional hash is included on `payment_method_details` with a name matching this value. It contains mandate information specific to the payment method. */
  type?: Maybe<Scalars['String']>;
  us_bank_account?: Maybe<Stripe_MandateUsBankAccount>;
};

export type Stripe_MandateAcssDebit = {
  __typename?: 'Stripe_MandateAcssDebit';
  /** List of Stripe products where this mandate can be selected automatically. */
  default_for?: Maybe<Array<Maybe<Stripe_MandateAcssDebitDefaultForProperty>>>;
  /** Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
  interval_description?: Maybe<Scalars['String']>;
  /** Payment schedule for the mandate. */
  payment_schedule?: Maybe<Stripe_MandateAcssDebitPaymentScheduleProperty>;
  /** Transaction type of the mandate. */
  transaction_type?: Maybe<Stripe_MandateAcssDebitTransactionTypeProperty>;
};

export enum Stripe_MandateAcssDebitDefaultForProperty {
  Invoice = 'invoice',
  Subscription = 'subscription'
}

export enum Stripe_MandateAcssDebitPaymentScheduleProperty {
  Combined = 'combined',
  Interval = 'interval',
  Sporadic = 'sporadic'
}

export enum Stripe_MandateAcssDebitTransactionTypeProperty {
  Business = 'business',
  Personal = 'personal'
}

export type Stripe_MandateAuBecsDebit = {
  __typename?: 'Stripe_MandateAuBecsDebit';
  /** The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively. */
  url?: Maybe<Scalars['String']>;
};

export type Stripe_MandateBacsDebit = {
  __typename?: 'Stripe_MandateBacsDebit';
  /** The status of the mandate on the Bacs network. Can be one of `pending`, `revoked`, `refused`, or `accepted`. */
  network_status?: Maybe<Stripe_MandateBacsDebitNetworkStatusProperty>;
  /** The unique reference identifying the mandate on the Bacs network. */
  reference?: Maybe<Scalars['String']>;
  /** The URL that will contain the mandate that the customer has signed. */
  url?: Maybe<Scalars['String']>;
};

export enum Stripe_MandateBacsDebitNetworkStatusProperty {
  Accepted = 'accepted',
  Pending = 'pending',
  Refused = 'refused',
  Revoked = 'revoked'
}

export type Stripe_CardMandatePaymentMethodDetails = {
  __typename?: 'Stripe_CardMandatePaymentMethodDetails';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_MandateSepaDebit = {
  __typename?: 'Stripe_MandateSepaDebit';
  /** The unique reference of the mandate. */
  reference?: Maybe<Scalars['String']>;
  /** The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively. */
  url?: Maybe<Scalars['String']>;
};

export type Stripe_MandateUsBankAccount = {
  __typename?: 'Stripe_MandateUsBankAccount';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_MandateSingleUse = {
  __typename?: 'Stripe_MandateSingleUse';
  /** On a single use mandate, the amount of the payment. */
  amount?: Maybe<Scalars['Int']>;
  /** On a single use mandate, the currency of the payment. */
  currency?: Maybe<Scalars['String']>;
};

export enum Stripe_MandateStatusProperty {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum Stripe_MandateTypeProperty {
  MultiUse = 'multi_use',
  SingleUse = 'single_use'
}

export enum Stripe_SetupAttemptPaymentMethodDetailsBancontactPreferredLanguageProperty {
  De = 'de',
  En = 'en',
  Fr = 'fr',
  Nl = 'nl'
}

export type Stripe_SetupAttemptPaymentMethodDetailsBoleto = {
  __typename?: 'Stripe_SetupAttemptPaymentMethodDetailsBoleto';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_SetupAttemptPaymentMethodDetailsCard = {
  __typename?: 'Stripe_SetupAttemptPaymentMethodDetailsCard';
  three_d_secure?: Maybe<Stripe_ThreeDSecureDetails>;
};

export type Stripe_ThreeDSecureDetails = {
  __typename?: 'Stripe_ThreeDSecureDetails';
  /**
   * For authenticated transactions: how the customer was authenticated by
   * the issuing bank.
   */
  authentication_flow?: Maybe<Stripe_ThreeDSecureDetailsAuthenticationFlowProperty>;
  /** Indicates the outcome of 3D Secure authentication. */
  result?: Maybe<Stripe_ThreeDSecureDetailsResultProperty>;
  /**
   * Additional information about why 3D Secure succeeded or failed based
   * on the `result`.
   */
  result_reason?: Maybe<Stripe_ThreeDSecureDetailsResultReasonProperty>;
  /** The version of 3D Secure that was used. */
  version?: Maybe<Stripe_ThreeDSecureDetailsVersionProperty>;
};

export enum Stripe_ThreeDSecureDetailsAuthenticationFlowProperty {
  Challenge = 'challenge',
  Frictionless = 'frictionless'
}

export enum Stripe_ThreeDSecureDetailsResultProperty {
  AttemptAcknowledged = 'attempt_acknowledged',
  Authenticated = 'authenticated',
  Failed = 'failed',
  NotSupported = 'not_supported',
  ProcessingError = 'processing_error'
}

export enum Stripe_ThreeDSecureDetailsResultReasonProperty {
  Abandoned = 'abandoned',
  Bypassed = 'bypassed',
  Canceled = 'canceled',
  CardNotEnrolled = 'card_not_enrolled',
  NetworkNotSupported = 'network_not_supported',
  ProtocolError = 'protocol_error',
  Rejected = 'rejected'
}

export enum Stripe_ThreeDSecureDetailsVersionProperty {
  Onedot0Dot2 = 'ONEDOT0DOT2',
  Twodot1Dot0 = 'TWODOT1DOT0',
  Twodot2Dot0 = 'TWODOT2DOT0'
}

export type Stripe_SetupAttemptPaymentMethodDetailsCardPresent = {
  __typename?: 'Stripe_SetupAttemptPaymentMethodDetailsCardPresent';
  generated_card?: Maybe<Stripe_SetupAttemptPaymentMethodDetailsCardPresentGeneratedCardProperty>;
};

export type Stripe_SetupAttemptPaymentMethodDetailsCardPresentGeneratedCardProperty = WrappedString | Stripe_PaymentMethod;

export type Stripe_SetupAttemptPaymentMethodDetailsIdeal = {
  __typename?: 'Stripe_SetupAttemptPaymentMethodDetailsIdeal';
  /** The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`. */
  bank?: Maybe<Stripe_SetupAttemptPaymentMethodDetailsIdealBankProperty>;
  /** The Bank Identifier Code of the customer's bank. */
  bic?: Maybe<Stripe_SetupAttemptPaymentMethodDetailsIdealBicProperty>;
  generated_sepa_debit?: Maybe<Stripe_SetupAttemptPaymentMethodDetailsIdealGeneratedSepaDebitProperty>;
  generated_sepa_debit_mandate?: Maybe<Stripe_SetupAttemptPaymentMethodDetailsIdealGeneratedSepaDebitMandateProperty>;
  /** Last four characters of the IBAN. */
  iban_last4?: Maybe<Scalars['String']>;
  /**
   * Owner's verified full name. Values are verified or provided by iDEAL directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: Maybe<Scalars['String']>;
};

export enum Stripe_SetupAttemptPaymentMethodDetailsIdealBankProperty {
  AbnAmro = 'abn_amro',
  AsnBank = 'asn_bank',
  Bunq = 'bunq',
  Handelsbanken = 'handelsbanken',
  Ing = 'ing',
  Knab = 'knab',
  Moneyou = 'moneyou',
  Rabobank = 'rabobank',
  Regiobank = 'regiobank',
  Revolut = 'revolut',
  SnsBank = 'sns_bank',
  TriodosBank = 'triodos_bank',
  VanLanschot = 'van_lanschot'
}

export enum Stripe_SetupAttemptPaymentMethodDetailsIdealBicProperty {
  Abnanl2A = 'ABNANL2A',
  Asnbnl21 = 'ASNBNL21',
  Bunqnl2A = 'BUNQNL2A',
  Fvlbnl22 = 'FVLBNL22',
  Handnl2A = 'HANDNL2A',
  Ingbnl2A = 'INGBNL2A',
  Knabnl2H = 'KNABNL2H',
  Moyonl21 = 'MOYONL21',
  Rabonl2U = 'RABONL2U',
  Rbrbnl21 = 'RBRBNL21',
  Revolt21 = 'REVOLT21',
  Snsbnl2A = 'SNSBNL2A',
  Trionl2U = 'TRIONL2U'
}

export type Stripe_SetupAttemptPaymentMethodDetailsIdealGeneratedSepaDebitProperty = WrappedString | Stripe_PaymentMethod;

export type Stripe_SetupAttemptPaymentMethodDetailsIdealGeneratedSepaDebitMandateProperty = WrappedString | Stripe_Mandate;

export type Stripe_SetupAttemptPaymentMethodDetailsSepaDebit = {
  __typename?: 'Stripe_SetupAttemptPaymentMethodDetailsSepaDebit';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_SetupAttemptPaymentMethodDetailsSofort = {
  __typename?: 'Stripe_SetupAttemptPaymentMethodDetailsSofort';
  /** Bank code of bank associated with the bank account. */
  bank_code?: Maybe<Scalars['String']>;
  /** Name of the bank associated with the bank account. */
  bank_name?: Maybe<Scalars['String']>;
  /** Bank Identifier Code of the bank associated with the bank account. */
  bic?: Maybe<Scalars['String']>;
  generated_sepa_debit?: Maybe<Stripe_SetupAttemptPaymentMethodDetailsSofortGeneratedSepaDebitProperty>;
  generated_sepa_debit_mandate?: Maybe<Stripe_SetupAttemptPaymentMethodDetailsSofortGeneratedSepaDebitMandateProperty>;
  /** Last four characters of the IBAN. */
  iban_last4?: Maybe<Scalars['String']>;
  /**
   * Preferred language of the Sofort authorization page that the customer is redirected to.
   * Can be one of `en`, `de`, `fr`, or `nl`
   */
  preferred_language?: Maybe<Stripe_SetupAttemptPaymentMethodDetailsSofortPreferredLanguageProperty>;
  /**
   * Owner's verified full name. Values are verified or provided by Sofort directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: Maybe<Scalars['String']>;
};

export type Stripe_SetupAttemptPaymentMethodDetailsSofortGeneratedSepaDebitProperty = WrappedString | Stripe_PaymentMethod;

export type Stripe_SetupAttemptPaymentMethodDetailsSofortGeneratedSepaDebitMandateProperty = WrappedString | Stripe_Mandate;

export enum Stripe_SetupAttemptPaymentMethodDetailsSofortPreferredLanguageProperty {
  De = 'de',
  En = 'en',
  Fr = 'fr',
  Nl = 'nl'
}

export type Stripe_SetupAttemptPaymentMethodDetailsUsBankAccount = {
  __typename?: 'Stripe_SetupAttemptPaymentMethodDetailsUsBankAccount';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_ApiErrors = {
  __typename?: 'Stripe_ApiErrors';
  /** For card errors, the ID of the failed charge. */
  charge?: Maybe<Scalars['String']>;
  /** For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported. */
  code?: Maybe<Scalars['String']>;
  /** For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one. */
  decline_code?: Maybe<Scalars['String']>;
  /** A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported. */
  doc_url?: Maybe<Scalars['String']>;
  /** A human-readable message providing more details about the error. For card errors, these messages can be shown to your users. */
  message?: Maybe<Scalars['String']>;
  /** If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field. */
  param?: Maybe<Scalars['String']>;
  payment_intent?: Maybe<Stripe_PaymentIntent>;
  payment_method?: Maybe<Stripe_PaymentMethod>;
  /** If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors. */
  payment_method_type?: Maybe<Scalars['String']>;
  setup_intent?: Maybe<Stripe_SetupIntent>;
  source?: Maybe<Stripe_ApiErrorsSourceProperty>;
  /** The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error` */
  type?: Maybe<Stripe_ApiErrorsTypeProperty>;
};

export type Stripe_PaymentIntent = TsSearchable & {
  __typename?: 'Stripe_PaymentIntent';
  /** Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
  amount?: Maybe<Scalars['Int']>;
  /** Amount that can be captured from this PaymentIntent. */
  amount_capturable?: Maybe<Scalars['Int']>;
  amount_details?: Maybe<Stripe_PaymentFlowsAmountDetails>;
  /** Amount that was collected by this PaymentIntent. */
  amount_received?: Maybe<Scalars['Int']>;
  application?: Maybe<Stripe_PaymentIntentApplicationProperty>;
  /** The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
  application_fee_amount?: Maybe<Scalars['Int']>;
  automatic_payment_methods?: Maybe<Stripe_PaymentFlowsAutomaticPaymentMethodsPaymentIntent>;
  /** Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch. */
  canceled_at?: Maybe<Scalars['Int']>;
  /** Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`). */
  cancellation_reason?: Maybe<Stripe_PaymentIntentCancellationReasonProperty>;
  /** Controls when the funds will be captured from the customer's account. */
  capture_method?: Maybe<Stripe_PaymentIntentCaptureMethodProperty>;
  /** Charges that were created by this PaymentIntent, if any. */
  charges?: Maybe<Stripe_PaymentIntentChargesProperty>;
  /**
   * The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.
   *
   * The client secret can be used to complete a payment from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
   *
   * Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?ui=elements) and learn about how `client_secret` should be handled.
   */
  client_secret?: Maybe<Scalars['String']>;
  confirmation_method?: Maybe<Stripe_PaymentIntentConfirmationMethodProperty>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  customer?: Maybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  invoice?: Maybe<Stripe_PaymentIntentInvoiceProperty>;
  last_payment_error?: Maybe<Stripe_ApiErrors>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. For more information, see the [documentation](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata). */
  metadata?: Maybe<Scalars['JSONObject']>;
  next_action?: Maybe<Stripe_PaymentIntentNextAction>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_PaymentIntentObjectProperty>;
  on_behalf_of?: Maybe<Stripe_PaymentIntentOnBehalfOfProperty>;
  payment_method?: Maybe<Stripe_PaymentIntentPaymentMethodProperty>;
  payment_method_options?: Maybe<Stripe_PaymentIntentPaymentMethodOptions>;
  /** The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. */
  payment_method_types?: Maybe<Array<Maybe<Scalars['String']>>>;
  processing?: Maybe<Stripe_PaymentIntentProcessing>;
  /** Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails). */
  receipt_email?: Maybe<Scalars['String']>;
  review?: Maybe<Stripe_PaymentIntentReviewProperty>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentIntentSetupFutureUsageProperty>;
  shipping?: Maybe<Stripe_Shipping>;
  /** For non-card charges, you can use this value as the complete description that appears on your customersâ€™ statements. Must contain at least one letter, maximum 22 characters. */
  statement_descriptor?: Maybe<Scalars['String']>;
  /** Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor thatâ€™s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
  statement_descriptor_suffix?: Maybe<Scalars['String']>;
  /** Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses). */
  status?: Maybe<Stripe_PaymentIntentStatusProperty>;
  transfer_data?: Maybe<Stripe_TransferData>;
  /** A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
  transfer_group?: Maybe<Scalars['String']>;
  invoiceItems?: Maybe<Array<Maybe<Stripe_Invoiceitem>>>;
  /** The Stripe checkout session associated with this payment. */
  sessionItems?: Maybe<Array<Maybe<Stripe_Item>>>;
  /** The ShipEngine label associated with this payment. */
  shipment?: Maybe<ShipEngine_Label>;
  _shapeId?: Maybe<Scalars['String']>;
  _id?: Maybe<Scalars['ID']>;
  searchSummary?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentFlowsAmountDetails = {
  __typename?: 'Stripe_PaymentFlowsAmountDetails';
  tip?: Maybe<Stripe_PaymentFlowsAmountDetailsResourceTip>;
};

export type Stripe_PaymentFlowsAmountDetailsResourceTip = {
  __typename?: 'Stripe_PaymentFlowsAmountDetailsResourceTip';
  /** Portion of the amount that corresponds to a tip. */
  amount?: Maybe<Scalars['Int']>;
};

export type Stripe_PaymentIntentApplicationProperty = WrappedString | Stripe_Application;

export type Stripe_PaymentFlowsAutomaticPaymentMethodsPaymentIntent = {
  __typename?: 'Stripe_PaymentFlowsAutomaticPaymentMethodsPaymentIntent';
  /** Automatically calculates compatible payment methods */
  enabled?: Maybe<Scalars['Boolean']>;
};

export enum Stripe_PaymentIntentCancellationReasonProperty {
  Abandoned = 'abandoned',
  Automatic = 'automatic',
  Duplicate = 'duplicate',
  FailedInvoice = 'failed_invoice',
  Fraudulent = 'fraudulent',
  RequestedByCustomer = 'requested_by_customer',
  VoidInvoice = 'void_invoice'
}

export enum Stripe_PaymentIntentCaptureMethodProperty {
  Automatic = 'automatic',
  Manual = 'manual'
}

/** Charges that were created by this PaymentIntent, if any. */
export type Stripe_PaymentIntentChargesProperty = {
  __typename?: 'Stripe_PaymentIntentChargesProperty';
  /** This list only contains the latest charge, even if there were previously multiple unsuccessful charges. To view all previous charges for a PaymentIntent, you can filter the charges list using the `payment_intent` [parameter](https://stripe.com/docs/api/charges/list#list_charges-payment_intent). */
  data: Array<Stripe_Charge>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Stripe_PaymentIntentChargesObjectProperty;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Stripe_Charge = {
  __typename?: 'Stripe_Charge';
  /** Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
  amount?: Maybe<Scalars['Int']>;
  /** Amount in %s captured (can be less than the amount attribute on the charge if a partial capture was made). */
  amount_captured?: Maybe<Scalars['Int']>;
  /** Amount in %s refunded (can be less than the amount attribute on the charge if a partial refund was issued). */
  amount_refunded?: Maybe<Scalars['Int']>;
  application?: Maybe<Stripe_ChargeApplicationProperty>;
  application_fee?: Maybe<Stripe_ChargeApplicationFeeProperty>;
  /** The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details. */
  application_fee_amount?: Maybe<Scalars['Int']>;
  balance_transaction?: Maybe<Stripe_ChargeBalanceTransactionProperty>;
  billing_details?: Maybe<Stripe_BillingDetails>;
  /** The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined. */
  calculated_statement_descriptor?: Maybe<Scalars['String']>;
  /** If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured. */
  captured?: Maybe<Scalars['Boolean']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  customer?: Maybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Whether the charge has been disputed. */
  disputed?: Maybe<Scalars['Boolean']>;
  failure_balance_transaction?: Maybe<Stripe_ChargeFailureBalanceTransactionProperty>;
  /** Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes). */
  failure_code?: Maybe<Scalars['String']>;
  /** Message to user further explaining reason for charge failure if available. */
  failure_message?: Maybe<Scalars['String']>;
  fraud_details?: Maybe<Stripe_ChargeFraudDetails>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  invoice?: Maybe<Stripe_ChargeInvoiceProperty>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_ChargeObjectProperty>;
  on_behalf_of?: Maybe<Stripe_ChargeOnBehalfOfProperty>;
  order?: Maybe<Stripe_ChargeOrderProperty>;
  outcome?: Maybe<Stripe_ChargeOutcome>;
  /** `true` if the charge succeeded, or was successfully authorized for later capture. */
  paid?: Maybe<Scalars['Boolean']>;
  payment_intent?: Maybe<Stripe_ChargePaymentIntentProperty>;
  /** ID of the payment method used in this charge. */
  payment_method?: Maybe<Scalars['String']>;
  payment_method_details?: Maybe<Stripe_PaymentMethodDetails>;
  /** This is the email address that the receipt for this charge was sent to. */
  receipt_email?: Maybe<Scalars['String']>;
  /** This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent. */
  receipt_number?: Maybe<Scalars['String']>;
  /** This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt. */
  receipt_url?: Maybe<Scalars['String']>;
  /** Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false. */
  refunded?: Maybe<Scalars['Boolean']>;
  /** A list of refunds that have been applied to the charge. */
  refunds?: Maybe<Stripe_ChargeRefundsProperty>;
  review?: Maybe<Stripe_ChargeReviewProperty>;
  shipping?: Maybe<Stripe_Shipping>;
  source_transfer?: Maybe<Stripe_ChargeSourceTransferProperty>;
  /** For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customersâ€™ statements. Must contain at least one letter, maximum 22 characters. */
  statement_descriptor?: Maybe<Scalars['String']>;
  /** Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor thatâ€™s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
  statement_descriptor_suffix?: Maybe<Scalars['String']>;
  /** The status of the payment is either `succeeded`, `pending`, or `failed`. */
  status?: Maybe<Stripe_ChargeStatusProperty>;
  transfer?: Maybe<Stripe_ChargeTransferProperty>;
  transfer_data?: Maybe<Stripe_ChargeTransferData>;
  /** A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
  transfer_group?: Maybe<Scalars['String']>;
};

export type Stripe_ChargeApplicationProperty = WrappedString | Stripe_Application;

export type Stripe_ChargeApplicationFeeProperty = WrappedString | Stripe_ApplicationFee;

export type Stripe_ApplicationFee = {
  __typename?: 'Stripe_ApplicationFee';
  account?: Maybe<Stripe_ApplicationFeeAccountProperty>;
  /** Amount earned, in %s. */
  amount?: Maybe<Scalars['Int']>;
  /** Amount in %s refunded (can be less than the amount attribute on the fee if a partial refund was issued) */
  amount_refunded?: Maybe<Scalars['Int']>;
  application?: Maybe<Stripe_ApplicationFeeApplicationProperty>;
  balance_transaction?: Maybe<Stripe_ApplicationFeeBalanceTransactionProperty>;
  charge?: Maybe<Stripe_ApplicationFeeChargeProperty>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_ApplicationFeeObjectProperty>;
  originating_transaction?: Maybe<Stripe_ApplicationFeeOriginatingTransactionProperty>;
  /** Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false. */
  refunded?: Maybe<Scalars['Boolean']>;
  /** A list of refunds that have been applied to the fee. */
  refunds?: Maybe<Stripe_ApplicationFeeRefundsProperty>;
};

export type Stripe_ApplicationFeeAccountProperty = WrappedString | Stripe_Account;

export type Stripe_ApplicationFeeApplicationProperty = WrappedString | Stripe_Application;

export type Stripe_ApplicationFeeBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction;

export type Stripe_BalanceTransaction = {
  __typename?: 'Stripe_BalanceTransaction';
  /** Gross amount of the transaction, in %s. */
  amount?: Maybe<Scalars['Int']>;
  /** The date the transaction's net funds will become available in the Stripe balance. */
  available_on?: Maybe<Scalars['Int']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the `amount` in currency A, times `exchange_rate`, would be the `amount` in currency B. For example, suppose you charged a customer 10.00 EUR. Then the PaymentIntent's `amount` would be `1000` and `currency` would be `eur`. Suppose this was converted into 12.34 USD in your Stripe account. Then the BalanceTransaction's `amount` would be `1234`, `currency` would be `usd`, and `exchange_rate` would be `1.234`. */
  exchange_rate?: Maybe<Scalars['Float']>;
  /** Fees (in %s) paid for this transaction. */
  fee?: Maybe<Scalars['Int']>;
  /** Detailed breakdown of fees (in %s) paid for this transaction. */
  fee_details?: Maybe<Array<Maybe<Stripe_Fee>>>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Net amount of the transaction, in %s. */
  net?: Maybe<Scalars['Int']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_BalanceTransactionObjectProperty>;
  /** [Learn more](https://stripe.com/docs/reports/reporting-categories) about how reporting categories can help you understand balance transactions from an accounting perspective. */
  reporting_category?: Maybe<Scalars['String']>;
  source?: Maybe<Stripe_BalanceTransactionSourceProperty>;
  /** If the transaction's net funds are available in the Stripe balance yet. Either `available` or `pending`. */
  status?: Maybe<Scalars['String']>;
  /** Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. [Learn more](https://stripe.com/docs/reports/balance-transaction-types) about balance transaction types and what they represent. If you are looking to classify transactions for accounting purposes, you might want to consider `reporting_category` instead. */
  type?: Maybe<Stripe_BalanceTransactionTypeProperty>;
};

export type Stripe_Fee = {
  __typename?: 'Stripe_Fee';
  /** Amount of the fee, in cents. */
  amount?: Maybe<Scalars['Int']>;
  /** ID of the Connect application that earned the fee. */
  application?: Maybe<Scalars['String']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Type of the fee, one of: `application_fee`, `stripe_fee` or `tax`. */
  type?: Maybe<Scalars['String']>;
};

export enum Stripe_BalanceTransactionObjectProperty {
  BalanceTransaction = 'balance_transaction'
}

export type Stripe_BalanceTransactionSourceProperty = WrappedString | Stripe_ApplicationFee | Stripe_Charge | Stripe_ConnectCollectionTransfer | Stripe_Dispute | Stripe_FeeRefund | Stripe_IssuingAuthorization | Stripe_IssuingDispute | Stripe_IssuingTransaction | Stripe_Payout | Stripe_PlatformTaxFee | Stripe_Refund | Stripe_ReserveTransaction | Stripe_TaxDeductedAtSource | Stripe_Topup | Stripe_Transfer | Stripe_TransferReversal;

export type Stripe_ConnectCollectionTransfer = {
  __typename?: 'Stripe_ConnectCollectionTransfer';
  /** Amount transferred, in %s. */
  amount?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  destination?: Maybe<Stripe_ConnectCollectionTransferDestinationProperty>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_ConnectCollectionTransferObjectProperty>;
};

export type Stripe_ConnectCollectionTransferDestinationProperty = WrappedString | Stripe_Account;

export enum Stripe_ConnectCollectionTransferObjectProperty {
  ConnectCollectionTransfer = 'connect_collection_transfer'
}

export type Stripe_Dispute = {
  __typename?: 'Stripe_Dispute';
  /** Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed). */
  amount?: Maybe<Scalars['Int']>;
  /** List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute. */
  balance_transactions?: Maybe<Array<Maybe<Stripe_BalanceTransaction>>>;
  charge?: Maybe<Stripe_DisputeChargeProperty>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  evidence?: Maybe<Stripe_DisputeEvidence>;
  evidence_details?: Maybe<Stripe_DisputeEvidenceDetails>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute. */
  is_charge_refundable?: Maybe<Scalars['Boolean']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_DisputeObjectProperty>;
  payment_intent?: Maybe<Stripe_DisputePaymentIntentProperty>;
  /** Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories). */
  reason?: Maybe<Scalars['String']>;
  /** Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `charge_refunded`, `won`, or `lost`. */
  status?: Maybe<Stripe_DisputeStatusProperty>;
};

export type Stripe_DisputeChargeProperty = WrappedString | Stripe_Charge;

export type Stripe_DisputeEvidence = {
  __typename?: 'Stripe_DisputeEvidence';
  /** Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity. */
  access_activity_log?: Maybe<Scalars['String']>;
  /** The billing address provided by the customer. */
  billing_address?: Maybe<Scalars['String']>;
  cancellation_policy?: Maybe<Stripe_DisputeEvidenceCancellationPolicyProperty>;
  /** An explanation of how and when the customer was shown your refund policy prior to purchase. */
  cancellation_policy_disclosure?: Maybe<Scalars['String']>;
  /** A justification for why the customer's subscription was not canceled. */
  cancellation_rebuttal?: Maybe<Scalars['String']>;
  customer_communication?: Maybe<Stripe_DisputeEvidenceCustomerCommunicationProperty>;
  /** The email address of the customer. */
  customer_email_address?: Maybe<Scalars['String']>;
  /** The name of the customer. */
  customer_name?: Maybe<Scalars['String']>;
  /** The IP address that the customer used when making the purchase. */
  customer_purchase_ip?: Maybe<Scalars['String']>;
  customer_signature?: Maybe<Stripe_DisputeEvidenceCustomerSignatureProperty>;
  duplicate_charge_documentation?: Maybe<Stripe_DisputeEvidenceDuplicateChargeDocumentationProperty>;
  /** An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate. */
  duplicate_charge_explanation?: Maybe<Scalars['String']>;
  /** The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge. */
  duplicate_charge_id?: Maybe<Scalars['String']>;
  /** A description of the product or service that was sold. */
  product_description?: Maybe<Scalars['String']>;
  receipt?: Maybe<Stripe_DisputeEvidenceReceiptProperty>;
  refund_policy?: Maybe<Stripe_DisputeEvidenceRefundPolicyProperty>;
  /** Documentation demonstrating that the customer was shown your refund policy prior to purchase. */
  refund_policy_disclosure?: Maybe<Scalars['String']>;
  /** A justification for why the customer is not entitled to a refund. */
  refund_refusal_explanation?: Maybe<Scalars['String']>;
  /** The date on which the customer received or began receiving the purchased service, in a clear human-readable format. */
  service_date?: Maybe<Scalars['String']>;
  service_documentation?: Maybe<Stripe_DisputeEvidenceServiceDocumentationProperty>;
  /** The address to which a physical product was shipped. You should try to include as complete address information as possible. */
  shipping_address?: Maybe<Scalars['String']>;
  /** The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas. */
  shipping_carrier?: Maybe<Scalars['String']>;
  /** The date on which a physical product began its route to the shipping address, in a clear human-readable format. */
  shipping_date?: Maybe<Scalars['String']>;
  shipping_documentation?: Maybe<Stripe_DisputeEvidenceShippingDocumentationProperty>;
  /** The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
  shipping_tracking_number?: Maybe<Scalars['String']>;
  uncategorized_file?: Maybe<Stripe_DisputeEvidenceUncategorizedFileProperty>;
  /** Any additional evidence or statements. */
  uncategorized_text?: Maybe<Scalars['String']>;
};

export type Stripe_DisputeEvidenceCancellationPolicyProperty = WrappedString | Stripe_File;

export type Stripe_DisputeEvidenceCustomerCommunicationProperty = WrappedString | Stripe_File;

export type Stripe_DisputeEvidenceCustomerSignatureProperty = WrappedString | Stripe_File;

export type Stripe_DisputeEvidenceDuplicateChargeDocumentationProperty = WrappedString | Stripe_File;

export type Stripe_DisputeEvidenceReceiptProperty = WrappedString | Stripe_File;

export type Stripe_DisputeEvidenceRefundPolicyProperty = WrappedString | Stripe_File;

export type Stripe_DisputeEvidenceServiceDocumentationProperty = WrappedString | Stripe_File;

export type Stripe_DisputeEvidenceShippingDocumentationProperty = WrappedString | Stripe_File;

export type Stripe_DisputeEvidenceUncategorizedFileProperty = WrappedString | Stripe_File;

export type Stripe_DisputeEvidenceDetails = {
  __typename?: 'Stripe_DisputeEvidenceDetails';
  /** Date by which evidence must be submitted in order to successfully challenge dispute. Will be null if the customer's bank or credit card company doesn't allow a response for this particular dispute. */
  due_by?: Maybe<Scalars['Int']>;
  /** Whether evidence has been staged for this dispute. */
  has_evidence?: Maybe<Scalars['Boolean']>;
  /** Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed. */
  past_due?: Maybe<Scalars['Boolean']>;
  /** The number of times evidence has been submitted. Typically, you may only submit evidence once. */
  submission_count?: Maybe<Scalars['Int']>;
};

export enum Stripe_DisputeObjectProperty {
  Dispute = 'dispute'
}

export type Stripe_DisputePaymentIntentProperty = WrappedString | Stripe_PaymentIntent;

export enum Stripe_DisputeStatusProperty {
  ChargeRefunded = 'charge_refunded',
  Lost = 'lost',
  NeedsResponse = 'needs_response',
  UnderReview = 'under_review',
  WarningClosed = 'warning_closed',
  WarningNeedsResponse = 'warning_needs_response',
  WarningUnderReview = 'warning_under_review',
  Won = 'won'
}

export type Stripe_FeeRefund = {
  __typename?: 'Stripe_FeeRefund';
  /** Amount, in %s. */
  amount?: Maybe<Scalars['Int']>;
  balance_transaction?: Maybe<Stripe_FeeRefundBalanceTransactionProperty>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  fee?: Maybe<Stripe_FeeRefundFeeProperty>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_FeeRefundObjectProperty>;
};

export type Stripe_FeeRefundBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction;

export type Stripe_FeeRefundFeeProperty = WrappedString | Stripe_ApplicationFee;

export enum Stripe_FeeRefundObjectProperty {
  FeeRefund = 'fee_refund'
}

export type Stripe_IssuingAuthorization = {
  __typename?: 'Stripe_IssuingAuthorization';
  /** The total amount that was authorized or rejected. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  amount?: Maybe<Scalars['Int']>;
  amount_details?: Maybe<Stripe_IssuingAuthorizationAmountDetails>;
  /** Whether the authorization has been approved. */
  approved?: Maybe<Scalars['Boolean']>;
  /** How the card details were provided. */
  authorization_method?: Maybe<Stripe_IssuingAuthorizationAuthorizationMethodProperty>;
  /** List of balance transactions associated with this authorization. */
  balance_transactions?: Maybe<Array<Maybe<Stripe_BalanceTransaction>>>;
  card?: Maybe<Stripe_IssuingCard>;
  cardholder?: Maybe<Stripe_IssuingAuthorizationCardholderProperty>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  merchant_amount?: Maybe<Scalars['Int']>;
  /** The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  merchant_currency?: Maybe<Scalars['String']>;
  merchant_data?: Maybe<Stripe_IssuingAuthorizationMerchantData>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_IssuingAuthorizationObjectProperty>;
  pending_request?: Maybe<Stripe_IssuingAuthorizationPendingRequest>;
  /** History of every time `pending_request` was approved/denied, either by you directly or by Stripe (e.g. based on your `spending_controls`). If the merchant changes the authorization by performing an [incremental authorization](https://stripe.com/docs/issuing/purchases/authorizations), you can look at this field to see the previous requests for the authorization. */
  request_history?: Maybe<Array<Maybe<Stripe_IssuingAuthorizationRequest>>>;
  /** The current status of the authorization in its lifecycle. */
  status?: Maybe<Stripe_IssuingAuthorizationStatusProperty>;
  /** List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization. */
  transactions?: Maybe<Array<Maybe<Stripe_IssuingTransaction>>>;
  verification_data?: Maybe<Stripe_IssuingAuthorizationVerificationData>;
  /** The digital wallet used for this authorization. One of `apple_pay`, `google_pay`, or `samsung_pay`. */
  wallet?: Maybe<Scalars['String']>;
};

export type Stripe_IssuingAuthorizationAmountDetails = {
  __typename?: 'Stripe_IssuingAuthorizationAmountDetails';
  /** The fee charged by the ATM for the cash withdrawal. */
  atm_fee?: Maybe<Scalars['Int']>;
};

export enum Stripe_IssuingAuthorizationAuthorizationMethodProperty {
  Chip = 'chip',
  Contactless = 'contactless',
  KeyedIn = 'keyed_in',
  Online = 'online',
  Swipe = 'swipe'
}

export type Stripe_IssuingCard = {
  __typename?: 'Stripe_IssuingCard';
  /** The brand of the card. */
  brand?: Maybe<Scalars['String']>;
  /** The reason why the card was canceled. */
  cancellation_reason?: Maybe<Stripe_IssuingCardCancellationReasonProperty>;
  cardholder?: Maybe<Stripe_IssuingCardholder>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** The card's CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint. */
  cvc?: Maybe<Scalars['String']>;
  /** The expiration month of the card. */
  exp_month?: Maybe<Scalars['Int']>;
  /** The expiration year of the card. */
  exp_year?: Maybe<Scalars['Int']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** The last 4 digits of the card number. */
  last4?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint. */
  number?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_IssuingCardObjectProperty>;
  replaced_by?: Maybe<Stripe_IssuingCardReplacedByProperty>;
  replacement_for?: Maybe<Stripe_IssuingCardReplacementForProperty>;
  /** The reason why the previous card needed to be replaced. */
  replacement_reason?: Maybe<Stripe_IssuingCardReplacementReasonProperty>;
  shipping?: Maybe<Stripe_IssuingCardShipping>;
  spending_controls?: Maybe<Stripe_IssuingCardAuthorizationControls>;
  /** Whether authorizations can be approved on this card. */
  status?: Maybe<Stripe_IssuingCardStatusProperty>;
  /** The type of the card. */
  type?: Maybe<Stripe_IssuingCardTypeProperty>;
  wallets?: Maybe<Stripe_IssuingCardWallets>;
};

export enum Stripe_IssuingCardCancellationReasonProperty {
  Lost = 'lost',
  Stolen = 'stolen'
}

export type Stripe_IssuingCardholder = {
  __typename?: 'Stripe_IssuingCardholder';
  billing?: Maybe<Stripe_IssuingCardholderAddress>;
  company?: Maybe<Stripe_IssuingCardholderCompany>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** The cardholder's email address. */
  email?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  individual?: Maybe<Stripe_IssuingCardholderIndividual>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** The cardholder's name. This will be printed on cards issued to them. */
  name?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_IssuingCardholderObjectProperty>;
  /** The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details. */
  phone_number?: Maybe<Scalars['String']>;
  requirements?: Maybe<Stripe_IssuingCardholderRequirements>;
  spending_controls?: Maybe<Stripe_IssuingCardholderAuthorizationControls>;
  /** Specifies whether to permit authorizations on this cardholder's cards. */
  status?: Maybe<Stripe_IssuingCardholderStatusProperty>;
  /** One of `individual` or `company`. */
  type?: Maybe<Stripe_IssuingCardholderTypeProperty>;
};

export type Stripe_IssuingCardholderAddress = {
  __typename?: 'Stripe_IssuingCardholderAddress';
  address?: Maybe<Stripe_Address>;
};

export type Stripe_IssuingCardholderCompany = {
  __typename?: 'Stripe_IssuingCardholderCompany';
  /** Whether the company's business ID number was provided. */
  tax_id_provided?: Maybe<Scalars['Boolean']>;
};

export type Stripe_IssuingCardholderIndividual = {
  __typename?: 'Stripe_IssuingCardholderIndividual';
  dob?: Maybe<Stripe_IssuingCardholderIndividualDob>;
  /** The first name of this cardholder. */
  first_name?: Maybe<Scalars['String']>;
  /** The last name of this cardholder. */
  last_name?: Maybe<Scalars['String']>;
  verification?: Maybe<Stripe_IssuingCardholderVerification>;
};

export type Stripe_IssuingCardholderIndividualDob = {
  __typename?: 'Stripe_IssuingCardholderIndividualDob';
  /** The day of birth, between 1 and 31. */
  day?: Maybe<Scalars['Int']>;
  /** The month of birth, between 1 and 12. */
  month?: Maybe<Scalars['Int']>;
  /** The four-digit year of birth. */
  year?: Maybe<Scalars['Int']>;
};

export type Stripe_IssuingCardholderVerification = {
  __typename?: 'Stripe_IssuingCardholderVerification';
  document?: Maybe<Stripe_IssuingCardholderIdDocument>;
};

export type Stripe_IssuingCardholderIdDocument = {
  __typename?: 'Stripe_IssuingCardholderIdDocument';
  back?: Maybe<Stripe_IssuingCardholderIdDocumentBackProperty>;
  front?: Maybe<Stripe_IssuingCardholderIdDocumentFrontProperty>;
};

export type Stripe_IssuingCardholderIdDocumentBackProperty = WrappedString | Stripe_File;

export type Stripe_IssuingCardholderIdDocumentFrontProperty = WrappedString | Stripe_File;

export enum Stripe_IssuingCardholderObjectProperty {
  IssuingDoTcardholder = 'issuingDOTcardholder'
}

export type Stripe_IssuingCardholderRequirements = {
  __typename?: 'Stripe_IssuingCardholderRequirements';
  /** If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason. */
  disabled_reason?: Maybe<Stripe_IssuingCardholderRequirementsDisabledReasonProperty>;
  /** Array of fields that need to be collected in order to verify and re-enable the cardholder. */
  past_due?: Maybe<Array<Maybe<Stripe_IssuingCardholderRequirementsPastDueProperty>>>;
};

export enum Stripe_IssuingCardholderRequirementsDisabledReasonProperty {
  Listed = 'listed',
  RejectedDoTlisted = 'rejectedDOTlisted',
  UnderReview = 'under_review'
}

export enum Stripe_IssuingCardholderRequirementsPastDueProperty {
  CompanyDoTtaxId = 'companyDOTtax_id',
  IndividualDoTdobDoTday = 'individualDOTdobDOTday',
  IndividualDoTdobDoTmonth = 'individualDOTdobDOTmonth',
  IndividualDoTdobDoTyear = 'individualDOTdobDOTyear',
  IndividualDoTfirstName = 'individualDOTfirst_name',
  IndividualDoTlastName = 'individualDOTlast_name',
  IndividualDoTverificationDoTdocument = 'individualDOTverificationDOTdocument'
}

export type Stripe_IssuingCardholderAuthorizationControls = {
  __typename?: 'Stripe_IssuingCardholderAuthorizationControls';
  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`. */
  allowed_categories?: Maybe<Array<Maybe<Stripe_IssuingCardholderAuthorizationControlsAllowedCategoriesProperty>>>;
  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`. */
  blocked_categories?: Maybe<Array<Maybe<Stripe_IssuingCardholderAuthorizationControlsBlockedCategoriesProperty>>>;
  /** Limit spending with amount-based rules that apply across this cardholder's cards. */
  spending_limits?: Maybe<Array<Maybe<Stripe_IssuingCardholderSpendingLimit>>>;
  /** Currency of the amounts within `spending_limits`. */
  spending_limits_currency?: Maybe<Scalars['String']>;
};

export enum Stripe_IssuingCardholderAuthorizationControlsAllowedCategoriesProperty {
  AcRefrigerationRepair = 'ac_refrigeration_repair',
  AccountingBookkeepingServices = 'accounting_bookkeeping_services',
  AdvertisingServices = 'advertising_services',
  AgriculturalCooperative = 'agricultural_cooperative',
  AirlinesAirCarriers = 'airlines_air_carriers',
  AirportsFlyingFields = 'airports_flying_fields',
  AmbulanceServices = 'ambulance_services',
  AmusementParksCarnivals = 'amusement_parks_carnivals',
  AntiqueReproductions = 'antique_reproductions',
  AntiqueShops = 'antique_shops',
  Aquariums = 'aquariums',
  ArchitecturalSurveyingServices = 'architectural_surveying_services',
  ArtDealersAndGalleries = 'art_dealers_and_galleries',
  ArtistsSupplyAndCraftShops = 'artists_supply_and_craft_shops',
  AutoAndHomeSupplyStores = 'auto_and_home_supply_stores',
  AutoBodyRepairShops = 'auto_body_repair_shops',
  AutoPaintShops = 'auto_paint_shops',
  AutoServiceShops = 'auto_service_shops',
  AutomatedCashDisburse = 'automated_cash_disburse',
  AutomatedFuelDispensers = 'automated_fuel_dispensers',
  AutomobileAssociations = 'automobile_associations',
  AutomotivePartsAndAccessoriesStores = 'automotive_parts_and_accessories_stores',
  AutomotiveTireStores = 'automotive_tire_stores',
  BailAndBondPayments = 'bail_and_bond_payments',
  Bakeries = 'bakeries',
  BandsOrchestras = 'bands_orchestras',
  BarberAndBeautyShops = 'barber_and_beauty_shops',
  BettingCasinoGambling = 'betting_casino_gambling',
  BicycleShops = 'bicycle_shops',
  BilliardPoolEstablishments = 'billiard_pool_establishments',
  BoatDealers = 'boat_dealers',
  BoatRentalsAndLeases = 'boat_rentals_and_leases',
  BookStores = 'book_stores',
  BooksPeriodicalsAndNewspapers = 'books_periodicals_and_newspapers',
  BowlingAlleys = 'bowling_alleys',
  BusLines = 'bus_lines',
  BusinessSecretarialSchools = 'business_secretarial_schools',
  BuyingShoppingServices = 'buying_shopping_services',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'cable_satellite_and_other_pay_television_and_radio',
  CameraAndPhotographicSupplyStores = 'camera_and_photographic_supply_stores',
  CandyNutAndConfectioneryStores = 'candy_nut_and_confectionery_stores',
  CarAndTruckDealersNewUsed = 'car_and_truck_dealers_new_used',
  CarAndTruckDealersUsedOnly = 'car_and_truck_dealers_used_only',
  CarRentalAgencies = 'car_rental_agencies',
  CarWashes = 'car_washes',
  CarpentryServices = 'carpentry_services',
  CarpetUpholsteryCleaning = 'carpet_upholstery_cleaning',
  Caterers = 'caterers',
  CharitableAndSocialServiceOrganizationsFundraising = 'charitable_and_social_service_organizations_fundraising',
  ChemicalsAndAlliedProducts = 'chemicals_and_allied_products',
  ChildCareServices = 'child_care_services',
  ChildrensAndInfantsWearStores = 'childrens_and_infants_wear_stores',
  ChiropodistsPodiatrists = 'chiropodists_podiatrists',
  Chiropractors = 'chiropractors',
  CigarStoresAndStands = 'cigar_stores_and_stands',
  CivicSocialFraternalAssociations = 'civic_social_fraternal_associations',
  CleaningAndMaintenance = 'cleaning_and_maintenance',
  ClothingRental = 'clothing_rental',
  CollegesUniversities = 'colleges_universities',
  CommercialEquipment = 'commercial_equipment',
  CommercialFootwear = 'commercial_footwear',
  CommercialPhotographyArtAndGraphics = 'commercial_photography_art_and_graphics',
  CommuterTransportAndFerries = 'commuter_transport_and_ferries',
  ComputerNetworkServices = 'computer_network_services',
  ComputerProgramming = 'computer_programming',
  ComputerRepair = 'computer_repair',
  ComputerSoftwareStores = 'computer_software_stores',
  ComputersPeripheralsAndSoftware = 'computers_peripherals_and_software',
  ConcreteWorkServices = 'concrete_work_services',
  ConstructionMaterials = 'construction_materials',
  ConsultingPublicRelations = 'consulting_public_relations',
  CorrespondenceSchools = 'correspondence_schools',
  CosmeticStores = 'cosmetic_stores',
  CounselingServices = 'counseling_services',
  CountryClubs = 'country_clubs',
  CourierServices = 'courier_services',
  CourtCosts = 'court_costs',
  CreditReportingAgencies = 'credit_reporting_agencies',
  CruiseLines = 'cruise_lines',
  DairyProductsStores = 'dairy_products_stores',
  DanceHallStudiosSchools = 'dance_hall_studios_schools',
  DatingEscortServices = 'dating_escort_services',
  DentistsOrthodontists = 'dentists_orthodontists',
  DepartmentStores = 'department_stores',
  DetectiveAgencies = 'detective_agencies',
  DigitalGoodsApplications = 'digital_goods_applications',
  DigitalGoodsGames = 'digital_goods_games',
  DigitalGoodsLargeVolume = 'digital_goods_large_volume',
  DigitalGoodsMedia = 'digital_goods_media',
  DirectMarketingCatalogMerchant = 'direct_marketing_catalog_merchant',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'direct_marketing_combination_catalog_and_retail_merchant',
  DirectMarketingInboundTelemarketing = 'direct_marketing_inbound_telemarketing',
  DirectMarketingInsuranceServices = 'direct_marketing_insurance_services',
  DirectMarketingOther = 'direct_marketing_other',
  DirectMarketingOutboundTelemarketing = 'direct_marketing_outbound_telemarketing',
  DirectMarketingSubscription = 'direct_marketing_subscription',
  DirectMarketingTravel = 'direct_marketing_travel',
  DiscountStores = 'discount_stores',
  Doctors = 'doctors',
  DoorToDoorSales = 'door_to_door_sales',
  DraperyWindowCoveringAndUpholsteryStores = 'drapery_window_covering_and_upholstery_stores',
  DrinkingPlaces = 'drinking_places',
  DrugStoresAndPharmacies = 'drug_stores_and_pharmacies',
  DrugsDrugProprietariesAndDruggistSundries = 'drugs_drug_proprietaries_and_druggist_sundries',
  DryCleaners = 'dry_cleaners',
  DurableGoods = 'durable_goods',
  DutyFreeStores = 'duty_free_stores',
  EatingPlacesRestaurants = 'eating_places_restaurants',
  EducationalServices = 'educational_services',
  ElectricRazorStores = 'electric_razor_stores',
  ElectricalPartsAndEquipment = 'electrical_parts_and_equipment',
  ElectricalServices = 'electrical_services',
  ElectronicsRepairShops = 'electronics_repair_shops',
  ElectronicsStores = 'electronics_stores',
  ElementarySecondarySchools = 'elementary_secondary_schools',
  EmploymentTempAgencies = 'employment_temp_agencies',
  EquipmentRental = 'equipment_rental',
  ExterminatingServices = 'exterminating_services',
  FamilyClothingStores = 'family_clothing_stores',
  FastFoodRestaurants = 'fast_food_restaurants',
  FinancialInstitutions = 'financial_institutions',
  FinesGovernmentAdministrativeEntities = 'fines_government_administrative_entities',
  FireplaceFireplaceScreensAndAccessoriesStores = 'fireplace_fireplace_screens_and_accessories_stores',
  FloorCoveringStores = 'floor_covering_stores',
  Florists = 'florists',
  FloristsSuppliesNurseryStockAndFlowers = 'florists_supplies_nursery_stock_and_flowers',
  FreezerAndLockerMeatProvisioners = 'freezer_and_locker_meat_provisioners',
  FuelDealersNonAutomotive = 'fuel_dealers_non_automotive',
  FuneralServicesCrematories = 'funeral_services_crematories',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'furniture_home_furnishings_and_equipment_stores_except_appliances',
  FurnitureRepairRefinishing = 'furniture_repair_refinishing',
  FurriersAndFurShops = 'furriers_and_fur_shops',
  GeneralServices = 'general_services',
  GiftCardNoveltyAndSouvenirShops = 'gift_card_novelty_and_souvenir_shops',
  GlassPaintAndWallpaperStores = 'glass_paint_and_wallpaper_stores',
  GlasswareCrystalStores = 'glassware_crystal_stores',
  GolfCoursesPublic = 'golf_courses_public',
  GovernmentServices = 'government_services',
  GroceryStoresSupermarkets = 'grocery_stores_supermarkets',
  HardwareEquipmentAndSupplies = 'hardware_equipment_and_supplies',
  HardwareStores = 'hardware_stores',
  HealthAndBeautySpas = 'health_and_beauty_spas',
  HearingAidsSalesAndSupplies = 'hearing_aids_sales_and_supplies',
  HeatingPlumbingAC = 'heating_plumbing_a_c',
  HobbyToyAndGameShops = 'hobby_toy_and_game_shops',
  HomeSupplyWarehouseStores = 'home_supply_warehouse_stores',
  Hospitals = 'hospitals',
  HotelsMotelsAndResorts = 'hotels_motels_and_resorts',
  HouseholdApplianceStores = 'household_appliance_stores',
  IndustrialSupplies = 'industrial_supplies',
  InformationRetrievalServices = 'information_retrieval_services',
  InsuranceDefault = 'insurance_default',
  InsuranceUnderwritingPremiums = 'insurance_underwriting_premiums',
  IntraCompanyPurchases = 'intra_company_purchases',
  JewelryStoresWatchesClocksAndSilverwareStores = 'jewelry_stores_watches_clocks_and_silverware_stores',
  LandscapingServices = 'landscaping_services',
  Laundries = 'laundries',
  LaundryCleaningServices = 'laundry_cleaning_services',
  LegalServicesAttorneys = 'legal_services_attorneys',
  LuggageAndLeatherGoodsStores = 'luggage_and_leather_goods_stores',
  LumberBuildingMaterialsStores = 'lumber_building_materials_stores',
  ManualCashDisburse = 'manual_cash_disburse',
  MarinasServiceAndSupplies = 'marinas_service_and_supplies',
  MasonryStoneworkAndPlaster = 'masonry_stonework_and_plaster',
  MassageParlors = 'massage_parlors',
  MedicalAndDentalLabs = 'medical_and_dental_labs',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies',
  MedicalServices = 'medical_services',
  MembershipOrganizations = 'membership_organizations',
  MensAndBoysClothingAndAccessoriesStores = 'mens_and_boys_clothing_and_accessories_stores',
  MensWomensClothingStores = 'mens_womens_clothing_stores',
  MetalServiceCenters = 'metal_service_centers',
  Miscellaneous = 'miscellaneous',
  MiscellaneousApparelAndAccessoryShops = 'miscellaneous_apparel_and_accessory_shops',
  MiscellaneousAutoDealers = 'miscellaneous_auto_dealers',
  MiscellaneousBusinessServices = 'miscellaneous_business_services',
  MiscellaneousFoodStores = 'miscellaneous_food_stores',
  MiscellaneousGeneralMerchandise = 'miscellaneous_general_merchandise',
  MiscellaneousGeneralServices = 'miscellaneous_general_services',
  MiscellaneousHomeFurnishingSpecialtyStores = 'miscellaneous_home_furnishing_specialty_stores',
  MiscellaneousPublishingAndPrinting = 'miscellaneous_publishing_and_printing',
  MiscellaneousRecreationServices = 'miscellaneous_recreation_services',
  MiscellaneousRepairShops = 'miscellaneous_repair_shops',
  MiscellaneousSpecialtyRetail = 'miscellaneous_specialty_retail',
  MobileHomeDealers = 'mobile_home_dealers',
  MotionPictureTheaters = 'motion_picture_theaters',
  MotorFreightCarriersAndTrucking = 'motor_freight_carriers_and_trucking',
  MotorHomesDealers = 'motor_homes_dealers',
  MotorVehicleSuppliesAndNewParts = 'motor_vehicle_supplies_and_new_parts',
  MotorcycleShopsAndDealers = 'motorcycle_shops_and_dealers',
  MotorcycleShopsDealers = 'motorcycle_shops_dealers',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'music_stores_musical_instruments_pianos_and_sheet_music',
  NewsDealersAndNewsstands = 'news_dealers_and_newsstands',
  NonFiMoneyOrders = 'non_fi_money_orders',
  NonFiStoredValueCardPurchaseLoad = 'non_fi_stored_value_card_purchase_load',
  NondurableGoods = 'nondurable_goods',
  NurseriesLawnAndGardenSupplyStores = 'nurseries_lawn_and_garden_supply_stores',
  NursingPersonalCare = 'nursing_personal_care',
  OfficeAndCommercialFurniture = 'office_and_commercial_furniture',
  OpticiansEyeglasses = 'opticians_eyeglasses',
  OptometristsOphthalmologist = 'optometrists_ophthalmologist',
  OrthopedicGoodsProstheticDevices = 'orthopedic_goods_prosthetic_devices',
  Osteopaths = 'osteopaths',
  PackageStoresBeerWineAndLiquor = 'package_stores_beer_wine_and_liquor',
  PaintsVarnishesAndSupplies = 'paints_varnishes_and_supplies',
  ParkingLotsGarages = 'parking_lots_garages',
  PassengerRailways = 'passenger_railways',
  PawnShops = 'pawn_shops',
  PetShopsPetFoodAndSupplies = 'pet_shops_pet_food_and_supplies',
  PetroleumAndPetroleumProducts = 'petroleum_and_petroleum_products',
  PhotoDeveloping = 'photo_developing',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'photographic_photocopy_microfilm_equipment_and_supplies',
  PhotographicStudios = 'photographic_studios',
  PictureVideoProduction = 'picture_video_production',
  PieceGoodsNotionsAndOtherDryGoods = 'piece_goods_notions_and_other_dry_goods',
  PlumbingHeatingEquipmentAndSupplies = 'plumbing_heating_equipment_and_supplies',
  PoliticalOrganizations = 'political_organizations',
  PostalServicesGovernmentOnly = 'postal_services_government_only',
  PreciousStonesAndMetalsWatchesAndJewelry = 'precious_stones_and_metals_watches_and_jewelry',
  ProfessionalServices = 'professional_services',
  PublicWarehousingAndStorage = 'public_warehousing_and_storage',
  QuickCopyReproAndBlueprint = 'quick_copy_repro_and_blueprint',
  Railroads = 'railroads',
  RealEstateAgentsAndManagersRentals = 'real_estate_agents_and_managers_rentals',
  RecordStores = 'record_stores',
  RecreationalVehicleRentals = 'recreational_vehicle_rentals',
  ReligiousGoodsStores = 'religious_goods_stores',
  ReligiousOrganizations = 'religious_organizations',
  RoofingSidingSheetMetal = 'roofing_siding_sheet_metal',
  SecretarialSupportServices = 'secretarial_support_services',
  SecurityBrokersDealers = 'security_brokers_dealers',
  ServiceStations = 'service_stations',
  SewingNeedleworkFabricAndPieceGoodsStores = 'sewing_needlework_fabric_and_piece_goods_stores',
  ShoeRepairHatCleaning = 'shoe_repair_hat_cleaning',
  ShoeStores = 'shoe_stores',
  SmallApplianceRepair = 'small_appliance_repair',
  SnowmobileDealers = 'snowmobile_dealers',
  SpecialTradeServices = 'special_trade_services',
  SpecialtyCleaning = 'specialty_cleaning',
  SportingGoodsStores = 'sporting_goods_stores',
  SportingRecreationCamps = 'sporting_recreation_camps',
  SportsAndRidingApparelStores = 'sports_and_riding_apparel_stores',
  SportsClubsFields = 'sports_clubs_fields',
  StampAndCoinStores = 'stamp_and_coin_stores',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'stationary_office_supplies_printing_and_writing_paper',
  StationeryStoresOfficeAndSchoolSupplyStores = 'stationery_stores_office_and_school_supply_stores',
  SwimmingPoolsSales = 'swimming_pools_sales',
  TUiTravelGermany = 't_ui_travel_germany',
  TailorsAlterations = 'tailors_alterations',
  TaxPaymentsGovernmentAgencies = 'tax_payments_government_agencies',
  TaxPreparationServices = 'tax_preparation_services',
  TaxicabsLimousines = 'taxicabs_limousines',
  TelecommunicationEquipmentAndTelephoneSales = 'telecommunication_equipment_and_telephone_sales',
  TelecommunicationServices = 'telecommunication_services',
  TelegraphServices = 'telegraph_services',
  TentAndAwningShops = 'tent_and_awning_shops',
  TestingLaboratories = 'testing_laboratories',
  TheatricalTicketAgencies = 'theatrical_ticket_agencies',
  Timeshares = 'timeshares',
  TireRetreadingAndRepair = 'tire_retreading_and_repair',
  TollsBridgeFees = 'tolls_bridge_fees',
  TouristAttractionsAndExhibits = 'tourist_attractions_and_exhibits',
  TowingServices = 'towing_services',
  TrailerParksCampgrounds = 'trailer_parks_campgrounds',
  TransportationServices = 'transportation_services',
  TravelAgenciesTourOperators = 'travel_agencies_tour_operators',
  TruckStopIteration = 'truck_stop_iteration',
  TruckUtilityTrailerRentals = 'truck_utility_trailer_rentals',
  TypesettingPlateMakingAndRelatedServices = 'typesetting_plate_making_and_related_services',
  TypewriterStores = 'typewriter_stores',
  USFederalGovernmentAgenciesOrDepartments = 'u_s_federal_government_agencies_or_departments',
  UniformsCommercialClothing = 'uniforms_commercial_clothing',
  UsedMerchandiseAndSecondhandStores = 'used_merchandise_and_secondhand_stores',
  Utilities = 'utilities',
  VarietyStores = 'variety_stores',
  VeterinaryServices = 'veterinary_services',
  VideoAmusementGameSupplies = 'video_amusement_game_supplies',
  VideoGameArcades = 'video_game_arcades',
  VideoTapeRentalStores = 'video_tape_rental_stores',
  VocationalTradeSchools = 'vocational_trade_schools',
  WatchJewelryRepair = 'watch_jewelry_repair',
  WeldingRepair = 'welding_repair',
  WholesaleClubs = 'wholesale_clubs',
  WigAndToupeeStores = 'wig_and_toupee_stores',
  WiresMoneyOrders = 'wires_money_orders',
  WomensAccessoryAndSpecialtyShops = 'womens_accessory_and_specialty_shops',
  WomensReadyToWearStores = 'womens_ready_to_wear_stores',
  WreckingAndSalvageYards = 'wrecking_and_salvage_yards'
}

export enum Stripe_IssuingCardholderAuthorizationControlsBlockedCategoriesProperty {
  AcRefrigerationRepair = 'ac_refrigeration_repair',
  AccountingBookkeepingServices = 'accounting_bookkeeping_services',
  AdvertisingServices = 'advertising_services',
  AgriculturalCooperative = 'agricultural_cooperative',
  AirlinesAirCarriers = 'airlines_air_carriers',
  AirportsFlyingFields = 'airports_flying_fields',
  AmbulanceServices = 'ambulance_services',
  AmusementParksCarnivals = 'amusement_parks_carnivals',
  AntiqueReproductions = 'antique_reproductions',
  AntiqueShops = 'antique_shops',
  Aquariums = 'aquariums',
  ArchitecturalSurveyingServices = 'architectural_surveying_services',
  ArtDealersAndGalleries = 'art_dealers_and_galleries',
  ArtistsSupplyAndCraftShops = 'artists_supply_and_craft_shops',
  AutoAndHomeSupplyStores = 'auto_and_home_supply_stores',
  AutoBodyRepairShops = 'auto_body_repair_shops',
  AutoPaintShops = 'auto_paint_shops',
  AutoServiceShops = 'auto_service_shops',
  AutomatedCashDisburse = 'automated_cash_disburse',
  AutomatedFuelDispensers = 'automated_fuel_dispensers',
  AutomobileAssociations = 'automobile_associations',
  AutomotivePartsAndAccessoriesStores = 'automotive_parts_and_accessories_stores',
  AutomotiveTireStores = 'automotive_tire_stores',
  BailAndBondPayments = 'bail_and_bond_payments',
  Bakeries = 'bakeries',
  BandsOrchestras = 'bands_orchestras',
  BarberAndBeautyShops = 'barber_and_beauty_shops',
  BettingCasinoGambling = 'betting_casino_gambling',
  BicycleShops = 'bicycle_shops',
  BilliardPoolEstablishments = 'billiard_pool_establishments',
  BoatDealers = 'boat_dealers',
  BoatRentalsAndLeases = 'boat_rentals_and_leases',
  BookStores = 'book_stores',
  BooksPeriodicalsAndNewspapers = 'books_periodicals_and_newspapers',
  BowlingAlleys = 'bowling_alleys',
  BusLines = 'bus_lines',
  BusinessSecretarialSchools = 'business_secretarial_schools',
  BuyingShoppingServices = 'buying_shopping_services',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'cable_satellite_and_other_pay_television_and_radio',
  CameraAndPhotographicSupplyStores = 'camera_and_photographic_supply_stores',
  CandyNutAndConfectioneryStores = 'candy_nut_and_confectionery_stores',
  CarAndTruckDealersNewUsed = 'car_and_truck_dealers_new_used',
  CarAndTruckDealersUsedOnly = 'car_and_truck_dealers_used_only',
  CarRentalAgencies = 'car_rental_agencies',
  CarWashes = 'car_washes',
  CarpentryServices = 'carpentry_services',
  CarpetUpholsteryCleaning = 'carpet_upholstery_cleaning',
  Caterers = 'caterers',
  CharitableAndSocialServiceOrganizationsFundraising = 'charitable_and_social_service_organizations_fundraising',
  ChemicalsAndAlliedProducts = 'chemicals_and_allied_products',
  ChildCareServices = 'child_care_services',
  ChildrensAndInfantsWearStores = 'childrens_and_infants_wear_stores',
  ChiropodistsPodiatrists = 'chiropodists_podiatrists',
  Chiropractors = 'chiropractors',
  CigarStoresAndStands = 'cigar_stores_and_stands',
  CivicSocialFraternalAssociations = 'civic_social_fraternal_associations',
  CleaningAndMaintenance = 'cleaning_and_maintenance',
  ClothingRental = 'clothing_rental',
  CollegesUniversities = 'colleges_universities',
  CommercialEquipment = 'commercial_equipment',
  CommercialFootwear = 'commercial_footwear',
  CommercialPhotographyArtAndGraphics = 'commercial_photography_art_and_graphics',
  CommuterTransportAndFerries = 'commuter_transport_and_ferries',
  ComputerNetworkServices = 'computer_network_services',
  ComputerProgramming = 'computer_programming',
  ComputerRepair = 'computer_repair',
  ComputerSoftwareStores = 'computer_software_stores',
  ComputersPeripheralsAndSoftware = 'computers_peripherals_and_software',
  ConcreteWorkServices = 'concrete_work_services',
  ConstructionMaterials = 'construction_materials',
  ConsultingPublicRelations = 'consulting_public_relations',
  CorrespondenceSchools = 'correspondence_schools',
  CosmeticStores = 'cosmetic_stores',
  CounselingServices = 'counseling_services',
  CountryClubs = 'country_clubs',
  CourierServices = 'courier_services',
  CourtCosts = 'court_costs',
  CreditReportingAgencies = 'credit_reporting_agencies',
  CruiseLines = 'cruise_lines',
  DairyProductsStores = 'dairy_products_stores',
  DanceHallStudiosSchools = 'dance_hall_studios_schools',
  DatingEscortServices = 'dating_escort_services',
  DentistsOrthodontists = 'dentists_orthodontists',
  DepartmentStores = 'department_stores',
  DetectiveAgencies = 'detective_agencies',
  DigitalGoodsApplications = 'digital_goods_applications',
  DigitalGoodsGames = 'digital_goods_games',
  DigitalGoodsLargeVolume = 'digital_goods_large_volume',
  DigitalGoodsMedia = 'digital_goods_media',
  DirectMarketingCatalogMerchant = 'direct_marketing_catalog_merchant',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'direct_marketing_combination_catalog_and_retail_merchant',
  DirectMarketingInboundTelemarketing = 'direct_marketing_inbound_telemarketing',
  DirectMarketingInsuranceServices = 'direct_marketing_insurance_services',
  DirectMarketingOther = 'direct_marketing_other',
  DirectMarketingOutboundTelemarketing = 'direct_marketing_outbound_telemarketing',
  DirectMarketingSubscription = 'direct_marketing_subscription',
  DirectMarketingTravel = 'direct_marketing_travel',
  DiscountStores = 'discount_stores',
  Doctors = 'doctors',
  DoorToDoorSales = 'door_to_door_sales',
  DraperyWindowCoveringAndUpholsteryStores = 'drapery_window_covering_and_upholstery_stores',
  DrinkingPlaces = 'drinking_places',
  DrugStoresAndPharmacies = 'drug_stores_and_pharmacies',
  DrugsDrugProprietariesAndDruggistSundries = 'drugs_drug_proprietaries_and_druggist_sundries',
  DryCleaners = 'dry_cleaners',
  DurableGoods = 'durable_goods',
  DutyFreeStores = 'duty_free_stores',
  EatingPlacesRestaurants = 'eating_places_restaurants',
  EducationalServices = 'educational_services',
  ElectricRazorStores = 'electric_razor_stores',
  ElectricalPartsAndEquipment = 'electrical_parts_and_equipment',
  ElectricalServices = 'electrical_services',
  ElectronicsRepairShops = 'electronics_repair_shops',
  ElectronicsStores = 'electronics_stores',
  ElementarySecondarySchools = 'elementary_secondary_schools',
  EmploymentTempAgencies = 'employment_temp_agencies',
  EquipmentRental = 'equipment_rental',
  ExterminatingServices = 'exterminating_services',
  FamilyClothingStores = 'family_clothing_stores',
  FastFoodRestaurants = 'fast_food_restaurants',
  FinancialInstitutions = 'financial_institutions',
  FinesGovernmentAdministrativeEntities = 'fines_government_administrative_entities',
  FireplaceFireplaceScreensAndAccessoriesStores = 'fireplace_fireplace_screens_and_accessories_stores',
  FloorCoveringStores = 'floor_covering_stores',
  Florists = 'florists',
  FloristsSuppliesNurseryStockAndFlowers = 'florists_supplies_nursery_stock_and_flowers',
  FreezerAndLockerMeatProvisioners = 'freezer_and_locker_meat_provisioners',
  FuelDealersNonAutomotive = 'fuel_dealers_non_automotive',
  FuneralServicesCrematories = 'funeral_services_crematories',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'furniture_home_furnishings_and_equipment_stores_except_appliances',
  FurnitureRepairRefinishing = 'furniture_repair_refinishing',
  FurriersAndFurShops = 'furriers_and_fur_shops',
  GeneralServices = 'general_services',
  GiftCardNoveltyAndSouvenirShops = 'gift_card_novelty_and_souvenir_shops',
  GlassPaintAndWallpaperStores = 'glass_paint_and_wallpaper_stores',
  GlasswareCrystalStores = 'glassware_crystal_stores',
  GolfCoursesPublic = 'golf_courses_public',
  GovernmentServices = 'government_services',
  GroceryStoresSupermarkets = 'grocery_stores_supermarkets',
  HardwareEquipmentAndSupplies = 'hardware_equipment_and_supplies',
  HardwareStores = 'hardware_stores',
  HealthAndBeautySpas = 'health_and_beauty_spas',
  HearingAidsSalesAndSupplies = 'hearing_aids_sales_and_supplies',
  HeatingPlumbingAC = 'heating_plumbing_a_c',
  HobbyToyAndGameShops = 'hobby_toy_and_game_shops',
  HomeSupplyWarehouseStores = 'home_supply_warehouse_stores',
  Hospitals = 'hospitals',
  HotelsMotelsAndResorts = 'hotels_motels_and_resorts',
  HouseholdApplianceStores = 'household_appliance_stores',
  IndustrialSupplies = 'industrial_supplies',
  InformationRetrievalServices = 'information_retrieval_services',
  InsuranceDefault = 'insurance_default',
  InsuranceUnderwritingPremiums = 'insurance_underwriting_premiums',
  IntraCompanyPurchases = 'intra_company_purchases',
  JewelryStoresWatchesClocksAndSilverwareStores = 'jewelry_stores_watches_clocks_and_silverware_stores',
  LandscapingServices = 'landscaping_services',
  Laundries = 'laundries',
  LaundryCleaningServices = 'laundry_cleaning_services',
  LegalServicesAttorneys = 'legal_services_attorneys',
  LuggageAndLeatherGoodsStores = 'luggage_and_leather_goods_stores',
  LumberBuildingMaterialsStores = 'lumber_building_materials_stores',
  ManualCashDisburse = 'manual_cash_disburse',
  MarinasServiceAndSupplies = 'marinas_service_and_supplies',
  MasonryStoneworkAndPlaster = 'masonry_stonework_and_plaster',
  MassageParlors = 'massage_parlors',
  MedicalAndDentalLabs = 'medical_and_dental_labs',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies',
  MedicalServices = 'medical_services',
  MembershipOrganizations = 'membership_organizations',
  MensAndBoysClothingAndAccessoriesStores = 'mens_and_boys_clothing_and_accessories_stores',
  MensWomensClothingStores = 'mens_womens_clothing_stores',
  MetalServiceCenters = 'metal_service_centers',
  Miscellaneous = 'miscellaneous',
  MiscellaneousApparelAndAccessoryShops = 'miscellaneous_apparel_and_accessory_shops',
  MiscellaneousAutoDealers = 'miscellaneous_auto_dealers',
  MiscellaneousBusinessServices = 'miscellaneous_business_services',
  MiscellaneousFoodStores = 'miscellaneous_food_stores',
  MiscellaneousGeneralMerchandise = 'miscellaneous_general_merchandise',
  MiscellaneousGeneralServices = 'miscellaneous_general_services',
  MiscellaneousHomeFurnishingSpecialtyStores = 'miscellaneous_home_furnishing_specialty_stores',
  MiscellaneousPublishingAndPrinting = 'miscellaneous_publishing_and_printing',
  MiscellaneousRecreationServices = 'miscellaneous_recreation_services',
  MiscellaneousRepairShops = 'miscellaneous_repair_shops',
  MiscellaneousSpecialtyRetail = 'miscellaneous_specialty_retail',
  MobileHomeDealers = 'mobile_home_dealers',
  MotionPictureTheaters = 'motion_picture_theaters',
  MotorFreightCarriersAndTrucking = 'motor_freight_carriers_and_trucking',
  MotorHomesDealers = 'motor_homes_dealers',
  MotorVehicleSuppliesAndNewParts = 'motor_vehicle_supplies_and_new_parts',
  MotorcycleShopsAndDealers = 'motorcycle_shops_and_dealers',
  MotorcycleShopsDealers = 'motorcycle_shops_dealers',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'music_stores_musical_instruments_pianos_and_sheet_music',
  NewsDealersAndNewsstands = 'news_dealers_and_newsstands',
  NonFiMoneyOrders = 'non_fi_money_orders',
  NonFiStoredValueCardPurchaseLoad = 'non_fi_stored_value_card_purchase_load',
  NondurableGoods = 'nondurable_goods',
  NurseriesLawnAndGardenSupplyStores = 'nurseries_lawn_and_garden_supply_stores',
  NursingPersonalCare = 'nursing_personal_care',
  OfficeAndCommercialFurniture = 'office_and_commercial_furniture',
  OpticiansEyeglasses = 'opticians_eyeglasses',
  OptometristsOphthalmologist = 'optometrists_ophthalmologist',
  OrthopedicGoodsProstheticDevices = 'orthopedic_goods_prosthetic_devices',
  Osteopaths = 'osteopaths',
  PackageStoresBeerWineAndLiquor = 'package_stores_beer_wine_and_liquor',
  PaintsVarnishesAndSupplies = 'paints_varnishes_and_supplies',
  ParkingLotsGarages = 'parking_lots_garages',
  PassengerRailways = 'passenger_railways',
  PawnShops = 'pawn_shops',
  PetShopsPetFoodAndSupplies = 'pet_shops_pet_food_and_supplies',
  PetroleumAndPetroleumProducts = 'petroleum_and_petroleum_products',
  PhotoDeveloping = 'photo_developing',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'photographic_photocopy_microfilm_equipment_and_supplies',
  PhotographicStudios = 'photographic_studios',
  PictureVideoProduction = 'picture_video_production',
  PieceGoodsNotionsAndOtherDryGoods = 'piece_goods_notions_and_other_dry_goods',
  PlumbingHeatingEquipmentAndSupplies = 'plumbing_heating_equipment_and_supplies',
  PoliticalOrganizations = 'political_organizations',
  PostalServicesGovernmentOnly = 'postal_services_government_only',
  PreciousStonesAndMetalsWatchesAndJewelry = 'precious_stones_and_metals_watches_and_jewelry',
  ProfessionalServices = 'professional_services',
  PublicWarehousingAndStorage = 'public_warehousing_and_storage',
  QuickCopyReproAndBlueprint = 'quick_copy_repro_and_blueprint',
  Railroads = 'railroads',
  RealEstateAgentsAndManagersRentals = 'real_estate_agents_and_managers_rentals',
  RecordStores = 'record_stores',
  RecreationalVehicleRentals = 'recreational_vehicle_rentals',
  ReligiousGoodsStores = 'religious_goods_stores',
  ReligiousOrganizations = 'religious_organizations',
  RoofingSidingSheetMetal = 'roofing_siding_sheet_metal',
  SecretarialSupportServices = 'secretarial_support_services',
  SecurityBrokersDealers = 'security_brokers_dealers',
  ServiceStations = 'service_stations',
  SewingNeedleworkFabricAndPieceGoodsStores = 'sewing_needlework_fabric_and_piece_goods_stores',
  ShoeRepairHatCleaning = 'shoe_repair_hat_cleaning',
  ShoeStores = 'shoe_stores',
  SmallApplianceRepair = 'small_appliance_repair',
  SnowmobileDealers = 'snowmobile_dealers',
  SpecialTradeServices = 'special_trade_services',
  SpecialtyCleaning = 'specialty_cleaning',
  SportingGoodsStores = 'sporting_goods_stores',
  SportingRecreationCamps = 'sporting_recreation_camps',
  SportsAndRidingApparelStores = 'sports_and_riding_apparel_stores',
  SportsClubsFields = 'sports_clubs_fields',
  StampAndCoinStores = 'stamp_and_coin_stores',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'stationary_office_supplies_printing_and_writing_paper',
  StationeryStoresOfficeAndSchoolSupplyStores = 'stationery_stores_office_and_school_supply_stores',
  SwimmingPoolsSales = 'swimming_pools_sales',
  TUiTravelGermany = 't_ui_travel_germany',
  TailorsAlterations = 'tailors_alterations',
  TaxPaymentsGovernmentAgencies = 'tax_payments_government_agencies',
  TaxPreparationServices = 'tax_preparation_services',
  TaxicabsLimousines = 'taxicabs_limousines',
  TelecommunicationEquipmentAndTelephoneSales = 'telecommunication_equipment_and_telephone_sales',
  TelecommunicationServices = 'telecommunication_services',
  TelegraphServices = 'telegraph_services',
  TentAndAwningShops = 'tent_and_awning_shops',
  TestingLaboratories = 'testing_laboratories',
  TheatricalTicketAgencies = 'theatrical_ticket_agencies',
  Timeshares = 'timeshares',
  TireRetreadingAndRepair = 'tire_retreading_and_repair',
  TollsBridgeFees = 'tolls_bridge_fees',
  TouristAttractionsAndExhibits = 'tourist_attractions_and_exhibits',
  TowingServices = 'towing_services',
  TrailerParksCampgrounds = 'trailer_parks_campgrounds',
  TransportationServices = 'transportation_services',
  TravelAgenciesTourOperators = 'travel_agencies_tour_operators',
  TruckStopIteration = 'truck_stop_iteration',
  TruckUtilityTrailerRentals = 'truck_utility_trailer_rentals',
  TypesettingPlateMakingAndRelatedServices = 'typesetting_plate_making_and_related_services',
  TypewriterStores = 'typewriter_stores',
  USFederalGovernmentAgenciesOrDepartments = 'u_s_federal_government_agencies_or_departments',
  UniformsCommercialClothing = 'uniforms_commercial_clothing',
  UsedMerchandiseAndSecondhandStores = 'used_merchandise_and_secondhand_stores',
  Utilities = 'utilities',
  VarietyStores = 'variety_stores',
  VeterinaryServices = 'veterinary_services',
  VideoAmusementGameSupplies = 'video_amusement_game_supplies',
  VideoGameArcades = 'video_game_arcades',
  VideoTapeRentalStores = 'video_tape_rental_stores',
  VocationalTradeSchools = 'vocational_trade_schools',
  WatchJewelryRepair = 'watch_jewelry_repair',
  WeldingRepair = 'welding_repair',
  WholesaleClubs = 'wholesale_clubs',
  WigAndToupeeStores = 'wig_and_toupee_stores',
  WiresMoneyOrders = 'wires_money_orders',
  WomensAccessoryAndSpecialtyShops = 'womens_accessory_and_specialty_shops',
  WomensReadyToWearStores = 'womens_ready_to_wear_stores',
  WreckingAndSalvageYards = 'wrecking_and_salvage_yards'
}

export type Stripe_IssuingCardholderSpendingLimit = {
  __typename?: 'Stripe_IssuingCardholderSpendingLimit';
  /** Maximum amount allowed to spend per interval. */
  amount?: Maybe<Scalars['Int']>;
  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories. */
  categories?: Maybe<Array<Maybe<Stripe_IssuingCardholderSpendingLimitCategoriesProperty>>>;
  /** Interval (or event) to which the amount applies. */
  interval?: Maybe<Stripe_IssuingCardholderSpendingLimitIntervalProperty>;
};

export enum Stripe_IssuingCardholderSpendingLimitCategoriesProperty {
  AcRefrigerationRepair = 'ac_refrigeration_repair',
  AccountingBookkeepingServices = 'accounting_bookkeeping_services',
  AdvertisingServices = 'advertising_services',
  AgriculturalCooperative = 'agricultural_cooperative',
  AirlinesAirCarriers = 'airlines_air_carriers',
  AirportsFlyingFields = 'airports_flying_fields',
  AmbulanceServices = 'ambulance_services',
  AmusementParksCarnivals = 'amusement_parks_carnivals',
  AntiqueReproductions = 'antique_reproductions',
  AntiqueShops = 'antique_shops',
  Aquariums = 'aquariums',
  ArchitecturalSurveyingServices = 'architectural_surveying_services',
  ArtDealersAndGalleries = 'art_dealers_and_galleries',
  ArtistsSupplyAndCraftShops = 'artists_supply_and_craft_shops',
  AutoAndHomeSupplyStores = 'auto_and_home_supply_stores',
  AutoBodyRepairShops = 'auto_body_repair_shops',
  AutoPaintShops = 'auto_paint_shops',
  AutoServiceShops = 'auto_service_shops',
  AutomatedCashDisburse = 'automated_cash_disburse',
  AutomatedFuelDispensers = 'automated_fuel_dispensers',
  AutomobileAssociations = 'automobile_associations',
  AutomotivePartsAndAccessoriesStores = 'automotive_parts_and_accessories_stores',
  AutomotiveTireStores = 'automotive_tire_stores',
  BailAndBondPayments = 'bail_and_bond_payments',
  Bakeries = 'bakeries',
  BandsOrchestras = 'bands_orchestras',
  BarberAndBeautyShops = 'barber_and_beauty_shops',
  BettingCasinoGambling = 'betting_casino_gambling',
  BicycleShops = 'bicycle_shops',
  BilliardPoolEstablishments = 'billiard_pool_establishments',
  BoatDealers = 'boat_dealers',
  BoatRentalsAndLeases = 'boat_rentals_and_leases',
  BookStores = 'book_stores',
  BooksPeriodicalsAndNewspapers = 'books_periodicals_and_newspapers',
  BowlingAlleys = 'bowling_alleys',
  BusLines = 'bus_lines',
  BusinessSecretarialSchools = 'business_secretarial_schools',
  BuyingShoppingServices = 'buying_shopping_services',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'cable_satellite_and_other_pay_television_and_radio',
  CameraAndPhotographicSupplyStores = 'camera_and_photographic_supply_stores',
  CandyNutAndConfectioneryStores = 'candy_nut_and_confectionery_stores',
  CarAndTruckDealersNewUsed = 'car_and_truck_dealers_new_used',
  CarAndTruckDealersUsedOnly = 'car_and_truck_dealers_used_only',
  CarRentalAgencies = 'car_rental_agencies',
  CarWashes = 'car_washes',
  CarpentryServices = 'carpentry_services',
  CarpetUpholsteryCleaning = 'carpet_upholstery_cleaning',
  Caterers = 'caterers',
  CharitableAndSocialServiceOrganizationsFundraising = 'charitable_and_social_service_organizations_fundraising',
  ChemicalsAndAlliedProducts = 'chemicals_and_allied_products',
  ChildCareServices = 'child_care_services',
  ChildrensAndInfantsWearStores = 'childrens_and_infants_wear_stores',
  ChiropodistsPodiatrists = 'chiropodists_podiatrists',
  Chiropractors = 'chiropractors',
  CigarStoresAndStands = 'cigar_stores_and_stands',
  CivicSocialFraternalAssociations = 'civic_social_fraternal_associations',
  CleaningAndMaintenance = 'cleaning_and_maintenance',
  ClothingRental = 'clothing_rental',
  CollegesUniversities = 'colleges_universities',
  CommercialEquipment = 'commercial_equipment',
  CommercialFootwear = 'commercial_footwear',
  CommercialPhotographyArtAndGraphics = 'commercial_photography_art_and_graphics',
  CommuterTransportAndFerries = 'commuter_transport_and_ferries',
  ComputerNetworkServices = 'computer_network_services',
  ComputerProgramming = 'computer_programming',
  ComputerRepair = 'computer_repair',
  ComputerSoftwareStores = 'computer_software_stores',
  ComputersPeripheralsAndSoftware = 'computers_peripherals_and_software',
  ConcreteWorkServices = 'concrete_work_services',
  ConstructionMaterials = 'construction_materials',
  ConsultingPublicRelations = 'consulting_public_relations',
  CorrespondenceSchools = 'correspondence_schools',
  CosmeticStores = 'cosmetic_stores',
  CounselingServices = 'counseling_services',
  CountryClubs = 'country_clubs',
  CourierServices = 'courier_services',
  CourtCosts = 'court_costs',
  CreditReportingAgencies = 'credit_reporting_agencies',
  CruiseLines = 'cruise_lines',
  DairyProductsStores = 'dairy_products_stores',
  DanceHallStudiosSchools = 'dance_hall_studios_schools',
  DatingEscortServices = 'dating_escort_services',
  DentistsOrthodontists = 'dentists_orthodontists',
  DepartmentStores = 'department_stores',
  DetectiveAgencies = 'detective_agencies',
  DigitalGoodsApplications = 'digital_goods_applications',
  DigitalGoodsGames = 'digital_goods_games',
  DigitalGoodsLargeVolume = 'digital_goods_large_volume',
  DigitalGoodsMedia = 'digital_goods_media',
  DirectMarketingCatalogMerchant = 'direct_marketing_catalog_merchant',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'direct_marketing_combination_catalog_and_retail_merchant',
  DirectMarketingInboundTelemarketing = 'direct_marketing_inbound_telemarketing',
  DirectMarketingInsuranceServices = 'direct_marketing_insurance_services',
  DirectMarketingOther = 'direct_marketing_other',
  DirectMarketingOutboundTelemarketing = 'direct_marketing_outbound_telemarketing',
  DirectMarketingSubscription = 'direct_marketing_subscription',
  DirectMarketingTravel = 'direct_marketing_travel',
  DiscountStores = 'discount_stores',
  Doctors = 'doctors',
  DoorToDoorSales = 'door_to_door_sales',
  DraperyWindowCoveringAndUpholsteryStores = 'drapery_window_covering_and_upholstery_stores',
  DrinkingPlaces = 'drinking_places',
  DrugStoresAndPharmacies = 'drug_stores_and_pharmacies',
  DrugsDrugProprietariesAndDruggistSundries = 'drugs_drug_proprietaries_and_druggist_sundries',
  DryCleaners = 'dry_cleaners',
  DurableGoods = 'durable_goods',
  DutyFreeStores = 'duty_free_stores',
  EatingPlacesRestaurants = 'eating_places_restaurants',
  EducationalServices = 'educational_services',
  ElectricRazorStores = 'electric_razor_stores',
  ElectricalPartsAndEquipment = 'electrical_parts_and_equipment',
  ElectricalServices = 'electrical_services',
  ElectronicsRepairShops = 'electronics_repair_shops',
  ElectronicsStores = 'electronics_stores',
  ElementarySecondarySchools = 'elementary_secondary_schools',
  EmploymentTempAgencies = 'employment_temp_agencies',
  EquipmentRental = 'equipment_rental',
  ExterminatingServices = 'exterminating_services',
  FamilyClothingStores = 'family_clothing_stores',
  FastFoodRestaurants = 'fast_food_restaurants',
  FinancialInstitutions = 'financial_institutions',
  FinesGovernmentAdministrativeEntities = 'fines_government_administrative_entities',
  FireplaceFireplaceScreensAndAccessoriesStores = 'fireplace_fireplace_screens_and_accessories_stores',
  FloorCoveringStores = 'floor_covering_stores',
  Florists = 'florists',
  FloristsSuppliesNurseryStockAndFlowers = 'florists_supplies_nursery_stock_and_flowers',
  FreezerAndLockerMeatProvisioners = 'freezer_and_locker_meat_provisioners',
  FuelDealersNonAutomotive = 'fuel_dealers_non_automotive',
  FuneralServicesCrematories = 'funeral_services_crematories',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'furniture_home_furnishings_and_equipment_stores_except_appliances',
  FurnitureRepairRefinishing = 'furniture_repair_refinishing',
  FurriersAndFurShops = 'furriers_and_fur_shops',
  GeneralServices = 'general_services',
  GiftCardNoveltyAndSouvenirShops = 'gift_card_novelty_and_souvenir_shops',
  GlassPaintAndWallpaperStores = 'glass_paint_and_wallpaper_stores',
  GlasswareCrystalStores = 'glassware_crystal_stores',
  GolfCoursesPublic = 'golf_courses_public',
  GovernmentServices = 'government_services',
  GroceryStoresSupermarkets = 'grocery_stores_supermarkets',
  HardwareEquipmentAndSupplies = 'hardware_equipment_and_supplies',
  HardwareStores = 'hardware_stores',
  HealthAndBeautySpas = 'health_and_beauty_spas',
  HearingAidsSalesAndSupplies = 'hearing_aids_sales_and_supplies',
  HeatingPlumbingAC = 'heating_plumbing_a_c',
  HobbyToyAndGameShops = 'hobby_toy_and_game_shops',
  HomeSupplyWarehouseStores = 'home_supply_warehouse_stores',
  Hospitals = 'hospitals',
  HotelsMotelsAndResorts = 'hotels_motels_and_resorts',
  HouseholdApplianceStores = 'household_appliance_stores',
  IndustrialSupplies = 'industrial_supplies',
  InformationRetrievalServices = 'information_retrieval_services',
  InsuranceDefault = 'insurance_default',
  InsuranceUnderwritingPremiums = 'insurance_underwriting_premiums',
  IntraCompanyPurchases = 'intra_company_purchases',
  JewelryStoresWatchesClocksAndSilverwareStores = 'jewelry_stores_watches_clocks_and_silverware_stores',
  LandscapingServices = 'landscaping_services',
  Laundries = 'laundries',
  LaundryCleaningServices = 'laundry_cleaning_services',
  LegalServicesAttorneys = 'legal_services_attorneys',
  LuggageAndLeatherGoodsStores = 'luggage_and_leather_goods_stores',
  LumberBuildingMaterialsStores = 'lumber_building_materials_stores',
  ManualCashDisburse = 'manual_cash_disburse',
  MarinasServiceAndSupplies = 'marinas_service_and_supplies',
  MasonryStoneworkAndPlaster = 'masonry_stonework_and_plaster',
  MassageParlors = 'massage_parlors',
  MedicalAndDentalLabs = 'medical_and_dental_labs',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies',
  MedicalServices = 'medical_services',
  MembershipOrganizations = 'membership_organizations',
  MensAndBoysClothingAndAccessoriesStores = 'mens_and_boys_clothing_and_accessories_stores',
  MensWomensClothingStores = 'mens_womens_clothing_stores',
  MetalServiceCenters = 'metal_service_centers',
  Miscellaneous = 'miscellaneous',
  MiscellaneousApparelAndAccessoryShops = 'miscellaneous_apparel_and_accessory_shops',
  MiscellaneousAutoDealers = 'miscellaneous_auto_dealers',
  MiscellaneousBusinessServices = 'miscellaneous_business_services',
  MiscellaneousFoodStores = 'miscellaneous_food_stores',
  MiscellaneousGeneralMerchandise = 'miscellaneous_general_merchandise',
  MiscellaneousGeneralServices = 'miscellaneous_general_services',
  MiscellaneousHomeFurnishingSpecialtyStores = 'miscellaneous_home_furnishing_specialty_stores',
  MiscellaneousPublishingAndPrinting = 'miscellaneous_publishing_and_printing',
  MiscellaneousRecreationServices = 'miscellaneous_recreation_services',
  MiscellaneousRepairShops = 'miscellaneous_repair_shops',
  MiscellaneousSpecialtyRetail = 'miscellaneous_specialty_retail',
  MobileHomeDealers = 'mobile_home_dealers',
  MotionPictureTheaters = 'motion_picture_theaters',
  MotorFreightCarriersAndTrucking = 'motor_freight_carriers_and_trucking',
  MotorHomesDealers = 'motor_homes_dealers',
  MotorVehicleSuppliesAndNewParts = 'motor_vehicle_supplies_and_new_parts',
  MotorcycleShopsAndDealers = 'motorcycle_shops_and_dealers',
  MotorcycleShopsDealers = 'motorcycle_shops_dealers',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'music_stores_musical_instruments_pianos_and_sheet_music',
  NewsDealersAndNewsstands = 'news_dealers_and_newsstands',
  NonFiMoneyOrders = 'non_fi_money_orders',
  NonFiStoredValueCardPurchaseLoad = 'non_fi_stored_value_card_purchase_load',
  NondurableGoods = 'nondurable_goods',
  NurseriesLawnAndGardenSupplyStores = 'nurseries_lawn_and_garden_supply_stores',
  NursingPersonalCare = 'nursing_personal_care',
  OfficeAndCommercialFurniture = 'office_and_commercial_furniture',
  OpticiansEyeglasses = 'opticians_eyeglasses',
  OptometristsOphthalmologist = 'optometrists_ophthalmologist',
  OrthopedicGoodsProstheticDevices = 'orthopedic_goods_prosthetic_devices',
  Osteopaths = 'osteopaths',
  PackageStoresBeerWineAndLiquor = 'package_stores_beer_wine_and_liquor',
  PaintsVarnishesAndSupplies = 'paints_varnishes_and_supplies',
  ParkingLotsGarages = 'parking_lots_garages',
  PassengerRailways = 'passenger_railways',
  PawnShops = 'pawn_shops',
  PetShopsPetFoodAndSupplies = 'pet_shops_pet_food_and_supplies',
  PetroleumAndPetroleumProducts = 'petroleum_and_petroleum_products',
  PhotoDeveloping = 'photo_developing',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'photographic_photocopy_microfilm_equipment_and_supplies',
  PhotographicStudios = 'photographic_studios',
  PictureVideoProduction = 'picture_video_production',
  PieceGoodsNotionsAndOtherDryGoods = 'piece_goods_notions_and_other_dry_goods',
  PlumbingHeatingEquipmentAndSupplies = 'plumbing_heating_equipment_and_supplies',
  PoliticalOrganizations = 'political_organizations',
  PostalServicesGovernmentOnly = 'postal_services_government_only',
  PreciousStonesAndMetalsWatchesAndJewelry = 'precious_stones_and_metals_watches_and_jewelry',
  ProfessionalServices = 'professional_services',
  PublicWarehousingAndStorage = 'public_warehousing_and_storage',
  QuickCopyReproAndBlueprint = 'quick_copy_repro_and_blueprint',
  Railroads = 'railroads',
  RealEstateAgentsAndManagersRentals = 'real_estate_agents_and_managers_rentals',
  RecordStores = 'record_stores',
  RecreationalVehicleRentals = 'recreational_vehicle_rentals',
  ReligiousGoodsStores = 'religious_goods_stores',
  ReligiousOrganizations = 'religious_organizations',
  RoofingSidingSheetMetal = 'roofing_siding_sheet_metal',
  SecretarialSupportServices = 'secretarial_support_services',
  SecurityBrokersDealers = 'security_brokers_dealers',
  ServiceStations = 'service_stations',
  SewingNeedleworkFabricAndPieceGoodsStores = 'sewing_needlework_fabric_and_piece_goods_stores',
  ShoeRepairHatCleaning = 'shoe_repair_hat_cleaning',
  ShoeStores = 'shoe_stores',
  SmallApplianceRepair = 'small_appliance_repair',
  SnowmobileDealers = 'snowmobile_dealers',
  SpecialTradeServices = 'special_trade_services',
  SpecialtyCleaning = 'specialty_cleaning',
  SportingGoodsStores = 'sporting_goods_stores',
  SportingRecreationCamps = 'sporting_recreation_camps',
  SportsAndRidingApparelStores = 'sports_and_riding_apparel_stores',
  SportsClubsFields = 'sports_clubs_fields',
  StampAndCoinStores = 'stamp_and_coin_stores',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'stationary_office_supplies_printing_and_writing_paper',
  StationeryStoresOfficeAndSchoolSupplyStores = 'stationery_stores_office_and_school_supply_stores',
  SwimmingPoolsSales = 'swimming_pools_sales',
  TUiTravelGermany = 't_ui_travel_germany',
  TailorsAlterations = 'tailors_alterations',
  TaxPaymentsGovernmentAgencies = 'tax_payments_government_agencies',
  TaxPreparationServices = 'tax_preparation_services',
  TaxicabsLimousines = 'taxicabs_limousines',
  TelecommunicationEquipmentAndTelephoneSales = 'telecommunication_equipment_and_telephone_sales',
  TelecommunicationServices = 'telecommunication_services',
  TelegraphServices = 'telegraph_services',
  TentAndAwningShops = 'tent_and_awning_shops',
  TestingLaboratories = 'testing_laboratories',
  TheatricalTicketAgencies = 'theatrical_ticket_agencies',
  Timeshares = 'timeshares',
  TireRetreadingAndRepair = 'tire_retreading_and_repair',
  TollsBridgeFees = 'tolls_bridge_fees',
  TouristAttractionsAndExhibits = 'tourist_attractions_and_exhibits',
  TowingServices = 'towing_services',
  TrailerParksCampgrounds = 'trailer_parks_campgrounds',
  TransportationServices = 'transportation_services',
  TravelAgenciesTourOperators = 'travel_agencies_tour_operators',
  TruckStopIteration = 'truck_stop_iteration',
  TruckUtilityTrailerRentals = 'truck_utility_trailer_rentals',
  TypesettingPlateMakingAndRelatedServices = 'typesetting_plate_making_and_related_services',
  TypewriterStores = 'typewriter_stores',
  USFederalGovernmentAgenciesOrDepartments = 'u_s_federal_government_agencies_or_departments',
  UniformsCommercialClothing = 'uniforms_commercial_clothing',
  UsedMerchandiseAndSecondhandStores = 'used_merchandise_and_secondhand_stores',
  Utilities = 'utilities',
  VarietyStores = 'variety_stores',
  VeterinaryServices = 'veterinary_services',
  VideoAmusementGameSupplies = 'video_amusement_game_supplies',
  VideoGameArcades = 'video_game_arcades',
  VideoTapeRentalStores = 'video_tape_rental_stores',
  VocationalTradeSchools = 'vocational_trade_schools',
  WatchJewelryRepair = 'watch_jewelry_repair',
  WeldingRepair = 'welding_repair',
  WholesaleClubs = 'wholesale_clubs',
  WigAndToupeeStores = 'wig_and_toupee_stores',
  WiresMoneyOrders = 'wires_money_orders',
  WomensAccessoryAndSpecialtyShops = 'womens_accessory_and_specialty_shops',
  WomensReadyToWearStores = 'womens_ready_to_wear_stores',
  WreckingAndSalvageYards = 'wrecking_and_salvage_yards'
}

export enum Stripe_IssuingCardholderSpendingLimitIntervalProperty {
  AllTime = 'all_time',
  Daily = 'daily',
  Monthly = 'monthly',
  PerAuthorization = 'per_authorization',
  Weekly = 'weekly',
  Yearly = 'yearly'
}

export enum Stripe_IssuingCardholderStatusProperty {
  Active = 'active',
  Blocked = 'blocked',
  Inactive = 'inactive'
}

export enum Stripe_IssuingCardholderTypeProperty {
  Company = 'company',
  Individual = 'individual'
}

export enum Stripe_IssuingCardObjectProperty {
  IssuingDoTcard = 'issuingDOTcard'
}

export type Stripe_IssuingCardReplacedByProperty = WrappedString | Stripe_IssuingCard;

export type Stripe_IssuingCardReplacementForProperty = WrappedString | Stripe_IssuingCard;

export enum Stripe_IssuingCardReplacementReasonProperty {
  Damaged = 'damaged',
  Expired = 'expired',
  Lost = 'lost',
  Stolen = 'stolen'
}

export type Stripe_IssuingCardShipping = {
  __typename?: 'Stripe_IssuingCardShipping';
  address?: Maybe<Stripe_Address>;
  /** The delivery company that shipped a card. */
  carrier?: Maybe<Stripe_IssuingCardShippingCarrierProperty>;
  /** A unix timestamp representing a best estimate of when the card will be delivered. */
  eta?: Maybe<Scalars['Int']>;
  /** Recipient name. */
  name?: Maybe<Scalars['String']>;
  /** Shipment service, such as `standard` or `express`. */
  service?: Maybe<Stripe_IssuingCardShippingServiceProperty>;
  /** The delivery status of the card. */
  status?: Maybe<Stripe_IssuingCardShippingStatusProperty>;
  /** A tracking number for a card shipment. */
  tracking_number?: Maybe<Scalars['String']>;
  /** A link to the shipping carrier's site where you can view detailed information about a card shipment. */
  tracking_url?: Maybe<Scalars['String']>;
  /** Packaging options. */
  type?: Maybe<Stripe_IssuingCardShippingTypeProperty>;
};

export enum Stripe_IssuingCardShippingCarrierProperty {
  Dhl = 'dhl',
  Fedex = 'fedex',
  RoyalMail = 'royal_mail',
  Usps = 'usps'
}

export enum Stripe_IssuingCardShippingServiceProperty {
  Express = 'express',
  Priority = 'priority',
  Standard = 'standard'
}

export enum Stripe_IssuingCardShippingStatusProperty {
  Canceled = 'canceled',
  Delivered = 'delivered',
  Failure = 'failure',
  Pending = 'pending',
  Returned = 'returned',
  Shipped = 'shipped'
}

export enum Stripe_IssuingCardShippingTypeProperty {
  Bulk = 'bulk',
  Individual = 'individual'
}

export type Stripe_IssuingCardAuthorizationControls = {
  __typename?: 'Stripe_IssuingCardAuthorizationControls';
  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`. */
  allowed_categories?: Maybe<Array<Maybe<Stripe_IssuingCardAuthorizationControlsAllowedCategoriesProperty>>>;
  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`. */
  blocked_categories?: Maybe<Array<Maybe<Stripe_IssuingCardAuthorizationControlsBlockedCategoriesProperty>>>;
  /** Limit spending with amount-based rules that apply across any cards this card replaced (i.e., its `replacement_for` card and _that_ card's `replacement_for` card, up the chain). */
  spending_limits?: Maybe<Array<Maybe<Stripe_IssuingCardSpendingLimit>>>;
  /** Currency of the amounts within `spending_limits`. Always the same as the currency of the card. */
  spending_limits_currency?: Maybe<Scalars['String']>;
};

export enum Stripe_IssuingCardAuthorizationControlsAllowedCategoriesProperty {
  AcRefrigerationRepair = 'ac_refrigeration_repair',
  AccountingBookkeepingServices = 'accounting_bookkeeping_services',
  AdvertisingServices = 'advertising_services',
  AgriculturalCooperative = 'agricultural_cooperative',
  AirlinesAirCarriers = 'airlines_air_carriers',
  AirportsFlyingFields = 'airports_flying_fields',
  AmbulanceServices = 'ambulance_services',
  AmusementParksCarnivals = 'amusement_parks_carnivals',
  AntiqueReproductions = 'antique_reproductions',
  AntiqueShops = 'antique_shops',
  Aquariums = 'aquariums',
  ArchitecturalSurveyingServices = 'architectural_surveying_services',
  ArtDealersAndGalleries = 'art_dealers_and_galleries',
  ArtistsSupplyAndCraftShops = 'artists_supply_and_craft_shops',
  AutoAndHomeSupplyStores = 'auto_and_home_supply_stores',
  AutoBodyRepairShops = 'auto_body_repair_shops',
  AutoPaintShops = 'auto_paint_shops',
  AutoServiceShops = 'auto_service_shops',
  AutomatedCashDisburse = 'automated_cash_disburse',
  AutomatedFuelDispensers = 'automated_fuel_dispensers',
  AutomobileAssociations = 'automobile_associations',
  AutomotivePartsAndAccessoriesStores = 'automotive_parts_and_accessories_stores',
  AutomotiveTireStores = 'automotive_tire_stores',
  BailAndBondPayments = 'bail_and_bond_payments',
  Bakeries = 'bakeries',
  BandsOrchestras = 'bands_orchestras',
  BarberAndBeautyShops = 'barber_and_beauty_shops',
  BettingCasinoGambling = 'betting_casino_gambling',
  BicycleShops = 'bicycle_shops',
  BilliardPoolEstablishments = 'billiard_pool_establishments',
  BoatDealers = 'boat_dealers',
  BoatRentalsAndLeases = 'boat_rentals_and_leases',
  BookStores = 'book_stores',
  BooksPeriodicalsAndNewspapers = 'books_periodicals_and_newspapers',
  BowlingAlleys = 'bowling_alleys',
  BusLines = 'bus_lines',
  BusinessSecretarialSchools = 'business_secretarial_schools',
  BuyingShoppingServices = 'buying_shopping_services',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'cable_satellite_and_other_pay_television_and_radio',
  CameraAndPhotographicSupplyStores = 'camera_and_photographic_supply_stores',
  CandyNutAndConfectioneryStores = 'candy_nut_and_confectionery_stores',
  CarAndTruckDealersNewUsed = 'car_and_truck_dealers_new_used',
  CarAndTruckDealersUsedOnly = 'car_and_truck_dealers_used_only',
  CarRentalAgencies = 'car_rental_agencies',
  CarWashes = 'car_washes',
  CarpentryServices = 'carpentry_services',
  CarpetUpholsteryCleaning = 'carpet_upholstery_cleaning',
  Caterers = 'caterers',
  CharitableAndSocialServiceOrganizationsFundraising = 'charitable_and_social_service_organizations_fundraising',
  ChemicalsAndAlliedProducts = 'chemicals_and_allied_products',
  ChildCareServices = 'child_care_services',
  ChildrensAndInfantsWearStores = 'childrens_and_infants_wear_stores',
  ChiropodistsPodiatrists = 'chiropodists_podiatrists',
  Chiropractors = 'chiropractors',
  CigarStoresAndStands = 'cigar_stores_and_stands',
  CivicSocialFraternalAssociations = 'civic_social_fraternal_associations',
  CleaningAndMaintenance = 'cleaning_and_maintenance',
  ClothingRental = 'clothing_rental',
  CollegesUniversities = 'colleges_universities',
  CommercialEquipment = 'commercial_equipment',
  CommercialFootwear = 'commercial_footwear',
  CommercialPhotographyArtAndGraphics = 'commercial_photography_art_and_graphics',
  CommuterTransportAndFerries = 'commuter_transport_and_ferries',
  ComputerNetworkServices = 'computer_network_services',
  ComputerProgramming = 'computer_programming',
  ComputerRepair = 'computer_repair',
  ComputerSoftwareStores = 'computer_software_stores',
  ComputersPeripheralsAndSoftware = 'computers_peripherals_and_software',
  ConcreteWorkServices = 'concrete_work_services',
  ConstructionMaterials = 'construction_materials',
  ConsultingPublicRelations = 'consulting_public_relations',
  CorrespondenceSchools = 'correspondence_schools',
  CosmeticStores = 'cosmetic_stores',
  CounselingServices = 'counseling_services',
  CountryClubs = 'country_clubs',
  CourierServices = 'courier_services',
  CourtCosts = 'court_costs',
  CreditReportingAgencies = 'credit_reporting_agencies',
  CruiseLines = 'cruise_lines',
  DairyProductsStores = 'dairy_products_stores',
  DanceHallStudiosSchools = 'dance_hall_studios_schools',
  DatingEscortServices = 'dating_escort_services',
  DentistsOrthodontists = 'dentists_orthodontists',
  DepartmentStores = 'department_stores',
  DetectiveAgencies = 'detective_agencies',
  DigitalGoodsApplications = 'digital_goods_applications',
  DigitalGoodsGames = 'digital_goods_games',
  DigitalGoodsLargeVolume = 'digital_goods_large_volume',
  DigitalGoodsMedia = 'digital_goods_media',
  DirectMarketingCatalogMerchant = 'direct_marketing_catalog_merchant',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'direct_marketing_combination_catalog_and_retail_merchant',
  DirectMarketingInboundTelemarketing = 'direct_marketing_inbound_telemarketing',
  DirectMarketingInsuranceServices = 'direct_marketing_insurance_services',
  DirectMarketingOther = 'direct_marketing_other',
  DirectMarketingOutboundTelemarketing = 'direct_marketing_outbound_telemarketing',
  DirectMarketingSubscription = 'direct_marketing_subscription',
  DirectMarketingTravel = 'direct_marketing_travel',
  DiscountStores = 'discount_stores',
  Doctors = 'doctors',
  DoorToDoorSales = 'door_to_door_sales',
  DraperyWindowCoveringAndUpholsteryStores = 'drapery_window_covering_and_upholstery_stores',
  DrinkingPlaces = 'drinking_places',
  DrugStoresAndPharmacies = 'drug_stores_and_pharmacies',
  DrugsDrugProprietariesAndDruggistSundries = 'drugs_drug_proprietaries_and_druggist_sundries',
  DryCleaners = 'dry_cleaners',
  DurableGoods = 'durable_goods',
  DutyFreeStores = 'duty_free_stores',
  EatingPlacesRestaurants = 'eating_places_restaurants',
  EducationalServices = 'educational_services',
  ElectricRazorStores = 'electric_razor_stores',
  ElectricalPartsAndEquipment = 'electrical_parts_and_equipment',
  ElectricalServices = 'electrical_services',
  ElectronicsRepairShops = 'electronics_repair_shops',
  ElectronicsStores = 'electronics_stores',
  ElementarySecondarySchools = 'elementary_secondary_schools',
  EmploymentTempAgencies = 'employment_temp_agencies',
  EquipmentRental = 'equipment_rental',
  ExterminatingServices = 'exterminating_services',
  FamilyClothingStores = 'family_clothing_stores',
  FastFoodRestaurants = 'fast_food_restaurants',
  FinancialInstitutions = 'financial_institutions',
  FinesGovernmentAdministrativeEntities = 'fines_government_administrative_entities',
  FireplaceFireplaceScreensAndAccessoriesStores = 'fireplace_fireplace_screens_and_accessories_stores',
  FloorCoveringStores = 'floor_covering_stores',
  Florists = 'florists',
  FloristsSuppliesNurseryStockAndFlowers = 'florists_supplies_nursery_stock_and_flowers',
  FreezerAndLockerMeatProvisioners = 'freezer_and_locker_meat_provisioners',
  FuelDealersNonAutomotive = 'fuel_dealers_non_automotive',
  FuneralServicesCrematories = 'funeral_services_crematories',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'furniture_home_furnishings_and_equipment_stores_except_appliances',
  FurnitureRepairRefinishing = 'furniture_repair_refinishing',
  FurriersAndFurShops = 'furriers_and_fur_shops',
  GeneralServices = 'general_services',
  GiftCardNoveltyAndSouvenirShops = 'gift_card_novelty_and_souvenir_shops',
  GlassPaintAndWallpaperStores = 'glass_paint_and_wallpaper_stores',
  GlasswareCrystalStores = 'glassware_crystal_stores',
  GolfCoursesPublic = 'golf_courses_public',
  GovernmentServices = 'government_services',
  GroceryStoresSupermarkets = 'grocery_stores_supermarkets',
  HardwareEquipmentAndSupplies = 'hardware_equipment_and_supplies',
  HardwareStores = 'hardware_stores',
  HealthAndBeautySpas = 'health_and_beauty_spas',
  HearingAidsSalesAndSupplies = 'hearing_aids_sales_and_supplies',
  HeatingPlumbingAC = 'heating_plumbing_a_c',
  HobbyToyAndGameShops = 'hobby_toy_and_game_shops',
  HomeSupplyWarehouseStores = 'home_supply_warehouse_stores',
  Hospitals = 'hospitals',
  HotelsMotelsAndResorts = 'hotels_motels_and_resorts',
  HouseholdApplianceStores = 'household_appliance_stores',
  IndustrialSupplies = 'industrial_supplies',
  InformationRetrievalServices = 'information_retrieval_services',
  InsuranceDefault = 'insurance_default',
  InsuranceUnderwritingPremiums = 'insurance_underwriting_premiums',
  IntraCompanyPurchases = 'intra_company_purchases',
  JewelryStoresWatchesClocksAndSilverwareStores = 'jewelry_stores_watches_clocks_and_silverware_stores',
  LandscapingServices = 'landscaping_services',
  Laundries = 'laundries',
  LaundryCleaningServices = 'laundry_cleaning_services',
  LegalServicesAttorneys = 'legal_services_attorneys',
  LuggageAndLeatherGoodsStores = 'luggage_and_leather_goods_stores',
  LumberBuildingMaterialsStores = 'lumber_building_materials_stores',
  ManualCashDisburse = 'manual_cash_disburse',
  MarinasServiceAndSupplies = 'marinas_service_and_supplies',
  MasonryStoneworkAndPlaster = 'masonry_stonework_and_plaster',
  MassageParlors = 'massage_parlors',
  MedicalAndDentalLabs = 'medical_and_dental_labs',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies',
  MedicalServices = 'medical_services',
  MembershipOrganizations = 'membership_organizations',
  MensAndBoysClothingAndAccessoriesStores = 'mens_and_boys_clothing_and_accessories_stores',
  MensWomensClothingStores = 'mens_womens_clothing_stores',
  MetalServiceCenters = 'metal_service_centers',
  Miscellaneous = 'miscellaneous',
  MiscellaneousApparelAndAccessoryShops = 'miscellaneous_apparel_and_accessory_shops',
  MiscellaneousAutoDealers = 'miscellaneous_auto_dealers',
  MiscellaneousBusinessServices = 'miscellaneous_business_services',
  MiscellaneousFoodStores = 'miscellaneous_food_stores',
  MiscellaneousGeneralMerchandise = 'miscellaneous_general_merchandise',
  MiscellaneousGeneralServices = 'miscellaneous_general_services',
  MiscellaneousHomeFurnishingSpecialtyStores = 'miscellaneous_home_furnishing_specialty_stores',
  MiscellaneousPublishingAndPrinting = 'miscellaneous_publishing_and_printing',
  MiscellaneousRecreationServices = 'miscellaneous_recreation_services',
  MiscellaneousRepairShops = 'miscellaneous_repair_shops',
  MiscellaneousSpecialtyRetail = 'miscellaneous_specialty_retail',
  MobileHomeDealers = 'mobile_home_dealers',
  MotionPictureTheaters = 'motion_picture_theaters',
  MotorFreightCarriersAndTrucking = 'motor_freight_carriers_and_trucking',
  MotorHomesDealers = 'motor_homes_dealers',
  MotorVehicleSuppliesAndNewParts = 'motor_vehicle_supplies_and_new_parts',
  MotorcycleShopsAndDealers = 'motorcycle_shops_and_dealers',
  MotorcycleShopsDealers = 'motorcycle_shops_dealers',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'music_stores_musical_instruments_pianos_and_sheet_music',
  NewsDealersAndNewsstands = 'news_dealers_and_newsstands',
  NonFiMoneyOrders = 'non_fi_money_orders',
  NonFiStoredValueCardPurchaseLoad = 'non_fi_stored_value_card_purchase_load',
  NondurableGoods = 'nondurable_goods',
  NurseriesLawnAndGardenSupplyStores = 'nurseries_lawn_and_garden_supply_stores',
  NursingPersonalCare = 'nursing_personal_care',
  OfficeAndCommercialFurniture = 'office_and_commercial_furniture',
  OpticiansEyeglasses = 'opticians_eyeglasses',
  OptometristsOphthalmologist = 'optometrists_ophthalmologist',
  OrthopedicGoodsProstheticDevices = 'orthopedic_goods_prosthetic_devices',
  Osteopaths = 'osteopaths',
  PackageStoresBeerWineAndLiquor = 'package_stores_beer_wine_and_liquor',
  PaintsVarnishesAndSupplies = 'paints_varnishes_and_supplies',
  ParkingLotsGarages = 'parking_lots_garages',
  PassengerRailways = 'passenger_railways',
  PawnShops = 'pawn_shops',
  PetShopsPetFoodAndSupplies = 'pet_shops_pet_food_and_supplies',
  PetroleumAndPetroleumProducts = 'petroleum_and_petroleum_products',
  PhotoDeveloping = 'photo_developing',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'photographic_photocopy_microfilm_equipment_and_supplies',
  PhotographicStudios = 'photographic_studios',
  PictureVideoProduction = 'picture_video_production',
  PieceGoodsNotionsAndOtherDryGoods = 'piece_goods_notions_and_other_dry_goods',
  PlumbingHeatingEquipmentAndSupplies = 'plumbing_heating_equipment_and_supplies',
  PoliticalOrganizations = 'political_organizations',
  PostalServicesGovernmentOnly = 'postal_services_government_only',
  PreciousStonesAndMetalsWatchesAndJewelry = 'precious_stones_and_metals_watches_and_jewelry',
  ProfessionalServices = 'professional_services',
  PublicWarehousingAndStorage = 'public_warehousing_and_storage',
  QuickCopyReproAndBlueprint = 'quick_copy_repro_and_blueprint',
  Railroads = 'railroads',
  RealEstateAgentsAndManagersRentals = 'real_estate_agents_and_managers_rentals',
  RecordStores = 'record_stores',
  RecreationalVehicleRentals = 'recreational_vehicle_rentals',
  ReligiousGoodsStores = 'religious_goods_stores',
  ReligiousOrganizations = 'religious_organizations',
  RoofingSidingSheetMetal = 'roofing_siding_sheet_metal',
  SecretarialSupportServices = 'secretarial_support_services',
  SecurityBrokersDealers = 'security_brokers_dealers',
  ServiceStations = 'service_stations',
  SewingNeedleworkFabricAndPieceGoodsStores = 'sewing_needlework_fabric_and_piece_goods_stores',
  ShoeRepairHatCleaning = 'shoe_repair_hat_cleaning',
  ShoeStores = 'shoe_stores',
  SmallApplianceRepair = 'small_appliance_repair',
  SnowmobileDealers = 'snowmobile_dealers',
  SpecialTradeServices = 'special_trade_services',
  SpecialtyCleaning = 'specialty_cleaning',
  SportingGoodsStores = 'sporting_goods_stores',
  SportingRecreationCamps = 'sporting_recreation_camps',
  SportsAndRidingApparelStores = 'sports_and_riding_apparel_stores',
  SportsClubsFields = 'sports_clubs_fields',
  StampAndCoinStores = 'stamp_and_coin_stores',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'stationary_office_supplies_printing_and_writing_paper',
  StationeryStoresOfficeAndSchoolSupplyStores = 'stationery_stores_office_and_school_supply_stores',
  SwimmingPoolsSales = 'swimming_pools_sales',
  TUiTravelGermany = 't_ui_travel_germany',
  TailorsAlterations = 'tailors_alterations',
  TaxPaymentsGovernmentAgencies = 'tax_payments_government_agencies',
  TaxPreparationServices = 'tax_preparation_services',
  TaxicabsLimousines = 'taxicabs_limousines',
  TelecommunicationEquipmentAndTelephoneSales = 'telecommunication_equipment_and_telephone_sales',
  TelecommunicationServices = 'telecommunication_services',
  TelegraphServices = 'telegraph_services',
  TentAndAwningShops = 'tent_and_awning_shops',
  TestingLaboratories = 'testing_laboratories',
  TheatricalTicketAgencies = 'theatrical_ticket_agencies',
  Timeshares = 'timeshares',
  TireRetreadingAndRepair = 'tire_retreading_and_repair',
  TollsBridgeFees = 'tolls_bridge_fees',
  TouristAttractionsAndExhibits = 'tourist_attractions_and_exhibits',
  TowingServices = 'towing_services',
  TrailerParksCampgrounds = 'trailer_parks_campgrounds',
  TransportationServices = 'transportation_services',
  TravelAgenciesTourOperators = 'travel_agencies_tour_operators',
  TruckStopIteration = 'truck_stop_iteration',
  TruckUtilityTrailerRentals = 'truck_utility_trailer_rentals',
  TypesettingPlateMakingAndRelatedServices = 'typesetting_plate_making_and_related_services',
  TypewriterStores = 'typewriter_stores',
  USFederalGovernmentAgenciesOrDepartments = 'u_s_federal_government_agencies_or_departments',
  UniformsCommercialClothing = 'uniforms_commercial_clothing',
  UsedMerchandiseAndSecondhandStores = 'used_merchandise_and_secondhand_stores',
  Utilities = 'utilities',
  VarietyStores = 'variety_stores',
  VeterinaryServices = 'veterinary_services',
  VideoAmusementGameSupplies = 'video_amusement_game_supplies',
  VideoGameArcades = 'video_game_arcades',
  VideoTapeRentalStores = 'video_tape_rental_stores',
  VocationalTradeSchools = 'vocational_trade_schools',
  WatchJewelryRepair = 'watch_jewelry_repair',
  WeldingRepair = 'welding_repair',
  WholesaleClubs = 'wholesale_clubs',
  WigAndToupeeStores = 'wig_and_toupee_stores',
  WiresMoneyOrders = 'wires_money_orders',
  WomensAccessoryAndSpecialtyShops = 'womens_accessory_and_specialty_shops',
  WomensReadyToWearStores = 'womens_ready_to_wear_stores',
  WreckingAndSalvageYards = 'wrecking_and_salvage_yards'
}

export enum Stripe_IssuingCardAuthorizationControlsBlockedCategoriesProperty {
  AcRefrigerationRepair = 'ac_refrigeration_repair',
  AccountingBookkeepingServices = 'accounting_bookkeeping_services',
  AdvertisingServices = 'advertising_services',
  AgriculturalCooperative = 'agricultural_cooperative',
  AirlinesAirCarriers = 'airlines_air_carriers',
  AirportsFlyingFields = 'airports_flying_fields',
  AmbulanceServices = 'ambulance_services',
  AmusementParksCarnivals = 'amusement_parks_carnivals',
  AntiqueReproductions = 'antique_reproductions',
  AntiqueShops = 'antique_shops',
  Aquariums = 'aquariums',
  ArchitecturalSurveyingServices = 'architectural_surveying_services',
  ArtDealersAndGalleries = 'art_dealers_and_galleries',
  ArtistsSupplyAndCraftShops = 'artists_supply_and_craft_shops',
  AutoAndHomeSupplyStores = 'auto_and_home_supply_stores',
  AutoBodyRepairShops = 'auto_body_repair_shops',
  AutoPaintShops = 'auto_paint_shops',
  AutoServiceShops = 'auto_service_shops',
  AutomatedCashDisburse = 'automated_cash_disburse',
  AutomatedFuelDispensers = 'automated_fuel_dispensers',
  AutomobileAssociations = 'automobile_associations',
  AutomotivePartsAndAccessoriesStores = 'automotive_parts_and_accessories_stores',
  AutomotiveTireStores = 'automotive_tire_stores',
  BailAndBondPayments = 'bail_and_bond_payments',
  Bakeries = 'bakeries',
  BandsOrchestras = 'bands_orchestras',
  BarberAndBeautyShops = 'barber_and_beauty_shops',
  BettingCasinoGambling = 'betting_casino_gambling',
  BicycleShops = 'bicycle_shops',
  BilliardPoolEstablishments = 'billiard_pool_establishments',
  BoatDealers = 'boat_dealers',
  BoatRentalsAndLeases = 'boat_rentals_and_leases',
  BookStores = 'book_stores',
  BooksPeriodicalsAndNewspapers = 'books_periodicals_and_newspapers',
  BowlingAlleys = 'bowling_alleys',
  BusLines = 'bus_lines',
  BusinessSecretarialSchools = 'business_secretarial_schools',
  BuyingShoppingServices = 'buying_shopping_services',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'cable_satellite_and_other_pay_television_and_radio',
  CameraAndPhotographicSupplyStores = 'camera_and_photographic_supply_stores',
  CandyNutAndConfectioneryStores = 'candy_nut_and_confectionery_stores',
  CarAndTruckDealersNewUsed = 'car_and_truck_dealers_new_used',
  CarAndTruckDealersUsedOnly = 'car_and_truck_dealers_used_only',
  CarRentalAgencies = 'car_rental_agencies',
  CarWashes = 'car_washes',
  CarpentryServices = 'carpentry_services',
  CarpetUpholsteryCleaning = 'carpet_upholstery_cleaning',
  Caterers = 'caterers',
  CharitableAndSocialServiceOrganizationsFundraising = 'charitable_and_social_service_organizations_fundraising',
  ChemicalsAndAlliedProducts = 'chemicals_and_allied_products',
  ChildCareServices = 'child_care_services',
  ChildrensAndInfantsWearStores = 'childrens_and_infants_wear_stores',
  ChiropodistsPodiatrists = 'chiropodists_podiatrists',
  Chiropractors = 'chiropractors',
  CigarStoresAndStands = 'cigar_stores_and_stands',
  CivicSocialFraternalAssociations = 'civic_social_fraternal_associations',
  CleaningAndMaintenance = 'cleaning_and_maintenance',
  ClothingRental = 'clothing_rental',
  CollegesUniversities = 'colleges_universities',
  CommercialEquipment = 'commercial_equipment',
  CommercialFootwear = 'commercial_footwear',
  CommercialPhotographyArtAndGraphics = 'commercial_photography_art_and_graphics',
  CommuterTransportAndFerries = 'commuter_transport_and_ferries',
  ComputerNetworkServices = 'computer_network_services',
  ComputerProgramming = 'computer_programming',
  ComputerRepair = 'computer_repair',
  ComputerSoftwareStores = 'computer_software_stores',
  ComputersPeripheralsAndSoftware = 'computers_peripherals_and_software',
  ConcreteWorkServices = 'concrete_work_services',
  ConstructionMaterials = 'construction_materials',
  ConsultingPublicRelations = 'consulting_public_relations',
  CorrespondenceSchools = 'correspondence_schools',
  CosmeticStores = 'cosmetic_stores',
  CounselingServices = 'counseling_services',
  CountryClubs = 'country_clubs',
  CourierServices = 'courier_services',
  CourtCosts = 'court_costs',
  CreditReportingAgencies = 'credit_reporting_agencies',
  CruiseLines = 'cruise_lines',
  DairyProductsStores = 'dairy_products_stores',
  DanceHallStudiosSchools = 'dance_hall_studios_schools',
  DatingEscortServices = 'dating_escort_services',
  DentistsOrthodontists = 'dentists_orthodontists',
  DepartmentStores = 'department_stores',
  DetectiveAgencies = 'detective_agencies',
  DigitalGoodsApplications = 'digital_goods_applications',
  DigitalGoodsGames = 'digital_goods_games',
  DigitalGoodsLargeVolume = 'digital_goods_large_volume',
  DigitalGoodsMedia = 'digital_goods_media',
  DirectMarketingCatalogMerchant = 'direct_marketing_catalog_merchant',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'direct_marketing_combination_catalog_and_retail_merchant',
  DirectMarketingInboundTelemarketing = 'direct_marketing_inbound_telemarketing',
  DirectMarketingInsuranceServices = 'direct_marketing_insurance_services',
  DirectMarketingOther = 'direct_marketing_other',
  DirectMarketingOutboundTelemarketing = 'direct_marketing_outbound_telemarketing',
  DirectMarketingSubscription = 'direct_marketing_subscription',
  DirectMarketingTravel = 'direct_marketing_travel',
  DiscountStores = 'discount_stores',
  Doctors = 'doctors',
  DoorToDoorSales = 'door_to_door_sales',
  DraperyWindowCoveringAndUpholsteryStores = 'drapery_window_covering_and_upholstery_stores',
  DrinkingPlaces = 'drinking_places',
  DrugStoresAndPharmacies = 'drug_stores_and_pharmacies',
  DrugsDrugProprietariesAndDruggistSundries = 'drugs_drug_proprietaries_and_druggist_sundries',
  DryCleaners = 'dry_cleaners',
  DurableGoods = 'durable_goods',
  DutyFreeStores = 'duty_free_stores',
  EatingPlacesRestaurants = 'eating_places_restaurants',
  EducationalServices = 'educational_services',
  ElectricRazorStores = 'electric_razor_stores',
  ElectricalPartsAndEquipment = 'electrical_parts_and_equipment',
  ElectricalServices = 'electrical_services',
  ElectronicsRepairShops = 'electronics_repair_shops',
  ElectronicsStores = 'electronics_stores',
  ElementarySecondarySchools = 'elementary_secondary_schools',
  EmploymentTempAgencies = 'employment_temp_agencies',
  EquipmentRental = 'equipment_rental',
  ExterminatingServices = 'exterminating_services',
  FamilyClothingStores = 'family_clothing_stores',
  FastFoodRestaurants = 'fast_food_restaurants',
  FinancialInstitutions = 'financial_institutions',
  FinesGovernmentAdministrativeEntities = 'fines_government_administrative_entities',
  FireplaceFireplaceScreensAndAccessoriesStores = 'fireplace_fireplace_screens_and_accessories_stores',
  FloorCoveringStores = 'floor_covering_stores',
  Florists = 'florists',
  FloristsSuppliesNurseryStockAndFlowers = 'florists_supplies_nursery_stock_and_flowers',
  FreezerAndLockerMeatProvisioners = 'freezer_and_locker_meat_provisioners',
  FuelDealersNonAutomotive = 'fuel_dealers_non_automotive',
  FuneralServicesCrematories = 'funeral_services_crematories',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'furniture_home_furnishings_and_equipment_stores_except_appliances',
  FurnitureRepairRefinishing = 'furniture_repair_refinishing',
  FurriersAndFurShops = 'furriers_and_fur_shops',
  GeneralServices = 'general_services',
  GiftCardNoveltyAndSouvenirShops = 'gift_card_novelty_and_souvenir_shops',
  GlassPaintAndWallpaperStores = 'glass_paint_and_wallpaper_stores',
  GlasswareCrystalStores = 'glassware_crystal_stores',
  GolfCoursesPublic = 'golf_courses_public',
  GovernmentServices = 'government_services',
  GroceryStoresSupermarkets = 'grocery_stores_supermarkets',
  HardwareEquipmentAndSupplies = 'hardware_equipment_and_supplies',
  HardwareStores = 'hardware_stores',
  HealthAndBeautySpas = 'health_and_beauty_spas',
  HearingAidsSalesAndSupplies = 'hearing_aids_sales_and_supplies',
  HeatingPlumbingAC = 'heating_plumbing_a_c',
  HobbyToyAndGameShops = 'hobby_toy_and_game_shops',
  HomeSupplyWarehouseStores = 'home_supply_warehouse_stores',
  Hospitals = 'hospitals',
  HotelsMotelsAndResorts = 'hotels_motels_and_resorts',
  HouseholdApplianceStores = 'household_appliance_stores',
  IndustrialSupplies = 'industrial_supplies',
  InformationRetrievalServices = 'information_retrieval_services',
  InsuranceDefault = 'insurance_default',
  InsuranceUnderwritingPremiums = 'insurance_underwriting_premiums',
  IntraCompanyPurchases = 'intra_company_purchases',
  JewelryStoresWatchesClocksAndSilverwareStores = 'jewelry_stores_watches_clocks_and_silverware_stores',
  LandscapingServices = 'landscaping_services',
  Laundries = 'laundries',
  LaundryCleaningServices = 'laundry_cleaning_services',
  LegalServicesAttorneys = 'legal_services_attorneys',
  LuggageAndLeatherGoodsStores = 'luggage_and_leather_goods_stores',
  LumberBuildingMaterialsStores = 'lumber_building_materials_stores',
  ManualCashDisburse = 'manual_cash_disburse',
  MarinasServiceAndSupplies = 'marinas_service_and_supplies',
  MasonryStoneworkAndPlaster = 'masonry_stonework_and_plaster',
  MassageParlors = 'massage_parlors',
  MedicalAndDentalLabs = 'medical_and_dental_labs',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies',
  MedicalServices = 'medical_services',
  MembershipOrganizations = 'membership_organizations',
  MensAndBoysClothingAndAccessoriesStores = 'mens_and_boys_clothing_and_accessories_stores',
  MensWomensClothingStores = 'mens_womens_clothing_stores',
  MetalServiceCenters = 'metal_service_centers',
  Miscellaneous = 'miscellaneous',
  MiscellaneousApparelAndAccessoryShops = 'miscellaneous_apparel_and_accessory_shops',
  MiscellaneousAutoDealers = 'miscellaneous_auto_dealers',
  MiscellaneousBusinessServices = 'miscellaneous_business_services',
  MiscellaneousFoodStores = 'miscellaneous_food_stores',
  MiscellaneousGeneralMerchandise = 'miscellaneous_general_merchandise',
  MiscellaneousGeneralServices = 'miscellaneous_general_services',
  MiscellaneousHomeFurnishingSpecialtyStores = 'miscellaneous_home_furnishing_specialty_stores',
  MiscellaneousPublishingAndPrinting = 'miscellaneous_publishing_and_printing',
  MiscellaneousRecreationServices = 'miscellaneous_recreation_services',
  MiscellaneousRepairShops = 'miscellaneous_repair_shops',
  MiscellaneousSpecialtyRetail = 'miscellaneous_specialty_retail',
  MobileHomeDealers = 'mobile_home_dealers',
  MotionPictureTheaters = 'motion_picture_theaters',
  MotorFreightCarriersAndTrucking = 'motor_freight_carriers_and_trucking',
  MotorHomesDealers = 'motor_homes_dealers',
  MotorVehicleSuppliesAndNewParts = 'motor_vehicle_supplies_and_new_parts',
  MotorcycleShopsAndDealers = 'motorcycle_shops_and_dealers',
  MotorcycleShopsDealers = 'motorcycle_shops_dealers',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'music_stores_musical_instruments_pianos_and_sheet_music',
  NewsDealersAndNewsstands = 'news_dealers_and_newsstands',
  NonFiMoneyOrders = 'non_fi_money_orders',
  NonFiStoredValueCardPurchaseLoad = 'non_fi_stored_value_card_purchase_load',
  NondurableGoods = 'nondurable_goods',
  NurseriesLawnAndGardenSupplyStores = 'nurseries_lawn_and_garden_supply_stores',
  NursingPersonalCare = 'nursing_personal_care',
  OfficeAndCommercialFurniture = 'office_and_commercial_furniture',
  OpticiansEyeglasses = 'opticians_eyeglasses',
  OptometristsOphthalmologist = 'optometrists_ophthalmologist',
  OrthopedicGoodsProstheticDevices = 'orthopedic_goods_prosthetic_devices',
  Osteopaths = 'osteopaths',
  PackageStoresBeerWineAndLiquor = 'package_stores_beer_wine_and_liquor',
  PaintsVarnishesAndSupplies = 'paints_varnishes_and_supplies',
  ParkingLotsGarages = 'parking_lots_garages',
  PassengerRailways = 'passenger_railways',
  PawnShops = 'pawn_shops',
  PetShopsPetFoodAndSupplies = 'pet_shops_pet_food_and_supplies',
  PetroleumAndPetroleumProducts = 'petroleum_and_petroleum_products',
  PhotoDeveloping = 'photo_developing',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'photographic_photocopy_microfilm_equipment_and_supplies',
  PhotographicStudios = 'photographic_studios',
  PictureVideoProduction = 'picture_video_production',
  PieceGoodsNotionsAndOtherDryGoods = 'piece_goods_notions_and_other_dry_goods',
  PlumbingHeatingEquipmentAndSupplies = 'plumbing_heating_equipment_and_supplies',
  PoliticalOrganizations = 'political_organizations',
  PostalServicesGovernmentOnly = 'postal_services_government_only',
  PreciousStonesAndMetalsWatchesAndJewelry = 'precious_stones_and_metals_watches_and_jewelry',
  ProfessionalServices = 'professional_services',
  PublicWarehousingAndStorage = 'public_warehousing_and_storage',
  QuickCopyReproAndBlueprint = 'quick_copy_repro_and_blueprint',
  Railroads = 'railroads',
  RealEstateAgentsAndManagersRentals = 'real_estate_agents_and_managers_rentals',
  RecordStores = 'record_stores',
  RecreationalVehicleRentals = 'recreational_vehicle_rentals',
  ReligiousGoodsStores = 'religious_goods_stores',
  ReligiousOrganizations = 'religious_organizations',
  RoofingSidingSheetMetal = 'roofing_siding_sheet_metal',
  SecretarialSupportServices = 'secretarial_support_services',
  SecurityBrokersDealers = 'security_brokers_dealers',
  ServiceStations = 'service_stations',
  SewingNeedleworkFabricAndPieceGoodsStores = 'sewing_needlework_fabric_and_piece_goods_stores',
  ShoeRepairHatCleaning = 'shoe_repair_hat_cleaning',
  ShoeStores = 'shoe_stores',
  SmallApplianceRepair = 'small_appliance_repair',
  SnowmobileDealers = 'snowmobile_dealers',
  SpecialTradeServices = 'special_trade_services',
  SpecialtyCleaning = 'specialty_cleaning',
  SportingGoodsStores = 'sporting_goods_stores',
  SportingRecreationCamps = 'sporting_recreation_camps',
  SportsAndRidingApparelStores = 'sports_and_riding_apparel_stores',
  SportsClubsFields = 'sports_clubs_fields',
  StampAndCoinStores = 'stamp_and_coin_stores',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'stationary_office_supplies_printing_and_writing_paper',
  StationeryStoresOfficeAndSchoolSupplyStores = 'stationery_stores_office_and_school_supply_stores',
  SwimmingPoolsSales = 'swimming_pools_sales',
  TUiTravelGermany = 't_ui_travel_germany',
  TailorsAlterations = 'tailors_alterations',
  TaxPaymentsGovernmentAgencies = 'tax_payments_government_agencies',
  TaxPreparationServices = 'tax_preparation_services',
  TaxicabsLimousines = 'taxicabs_limousines',
  TelecommunicationEquipmentAndTelephoneSales = 'telecommunication_equipment_and_telephone_sales',
  TelecommunicationServices = 'telecommunication_services',
  TelegraphServices = 'telegraph_services',
  TentAndAwningShops = 'tent_and_awning_shops',
  TestingLaboratories = 'testing_laboratories',
  TheatricalTicketAgencies = 'theatrical_ticket_agencies',
  Timeshares = 'timeshares',
  TireRetreadingAndRepair = 'tire_retreading_and_repair',
  TollsBridgeFees = 'tolls_bridge_fees',
  TouristAttractionsAndExhibits = 'tourist_attractions_and_exhibits',
  TowingServices = 'towing_services',
  TrailerParksCampgrounds = 'trailer_parks_campgrounds',
  TransportationServices = 'transportation_services',
  TravelAgenciesTourOperators = 'travel_agencies_tour_operators',
  TruckStopIteration = 'truck_stop_iteration',
  TruckUtilityTrailerRentals = 'truck_utility_trailer_rentals',
  TypesettingPlateMakingAndRelatedServices = 'typesetting_plate_making_and_related_services',
  TypewriterStores = 'typewriter_stores',
  USFederalGovernmentAgenciesOrDepartments = 'u_s_federal_government_agencies_or_departments',
  UniformsCommercialClothing = 'uniforms_commercial_clothing',
  UsedMerchandiseAndSecondhandStores = 'used_merchandise_and_secondhand_stores',
  Utilities = 'utilities',
  VarietyStores = 'variety_stores',
  VeterinaryServices = 'veterinary_services',
  VideoAmusementGameSupplies = 'video_amusement_game_supplies',
  VideoGameArcades = 'video_game_arcades',
  VideoTapeRentalStores = 'video_tape_rental_stores',
  VocationalTradeSchools = 'vocational_trade_schools',
  WatchJewelryRepair = 'watch_jewelry_repair',
  WeldingRepair = 'welding_repair',
  WholesaleClubs = 'wholesale_clubs',
  WigAndToupeeStores = 'wig_and_toupee_stores',
  WiresMoneyOrders = 'wires_money_orders',
  WomensAccessoryAndSpecialtyShops = 'womens_accessory_and_specialty_shops',
  WomensReadyToWearStores = 'womens_ready_to_wear_stores',
  WreckingAndSalvageYards = 'wrecking_and_salvage_yards'
}

export type Stripe_IssuingCardSpendingLimit = {
  __typename?: 'Stripe_IssuingCardSpendingLimit';
  /** Maximum amount allowed to spend per interval. */
  amount?: Maybe<Scalars['Int']>;
  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories. */
  categories?: Maybe<Array<Maybe<Stripe_IssuingCardSpendingLimitCategoriesProperty>>>;
  /** Interval (or event) to which the amount applies. */
  interval?: Maybe<Stripe_IssuingCardSpendingLimitIntervalProperty>;
};

export enum Stripe_IssuingCardSpendingLimitCategoriesProperty {
  AcRefrigerationRepair = 'ac_refrigeration_repair',
  AccountingBookkeepingServices = 'accounting_bookkeeping_services',
  AdvertisingServices = 'advertising_services',
  AgriculturalCooperative = 'agricultural_cooperative',
  AirlinesAirCarriers = 'airlines_air_carriers',
  AirportsFlyingFields = 'airports_flying_fields',
  AmbulanceServices = 'ambulance_services',
  AmusementParksCarnivals = 'amusement_parks_carnivals',
  AntiqueReproductions = 'antique_reproductions',
  AntiqueShops = 'antique_shops',
  Aquariums = 'aquariums',
  ArchitecturalSurveyingServices = 'architectural_surveying_services',
  ArtDealersAndGalleries = 'art_dealers_and_galleries',
  ArtistsSupplyAndCraftShops = 'artists_supply_and_craft_shops',
  AutoAndHomeSupplyStores = 'auto_and_home_supply_stores',
  AutoBodyRepairShops = 'auto_body_repair_shops',
  AutoPaintShops = 'auto_paint_shops',
  AutoServiceShops = 'auto_service_shops',
  AutomatedCashDisburse = 'automated_cash_disburse',
  AutomatedFuelDispensers = 'automated_fuel_dispensers',
  AutomobileAssociations = 'automobile_associations',
  AutomotivePartsAndAccessoriesStores = 'automotive_parts_and_accessories_stores',
  AutomotiveTireStores = 'automotive_tire_stores',
  BailAndBondPayments = 'bail_and_bond_payments',
  Bakeries = 'bakeries',
  BandsOrchestras = 'bands_orchestras',
  BarberAndBeautyShops = 'barber_and_beauty_shops',
  BettingCasinoGambling = 'betting_casino_gambling',
  BicycleShops = 'bicycle_shops',
  BilliardPoolEstablishments = 'billiard_pool_establishments',
  BoatDealers = 'boat_dealers',
  BoatRentalsAndLeases = 'boat_rentals_and_leases',
  BookStores = 'book_stores',
  BooksPeriodicalsAndNewspapers = 'books_periodicals_and_newspapers',
  BowlingAlleys = 'bowling_alleys',
  BusLines = 'bus_lines',
  BusinessSecretarialSchools = 'business_secretarial_schools',
  BuyingShoppingServices = 'buying_shopping_services',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'cable_satellite_and_other_pay_television_and_radio',
  CameraAndPhotographicSupplyStores = 'camera_and_photographic_supply_stores',
  CandyNutAndConfectioneryStores = 'candy_nut_and_confectionery_stores',
  CarAndTruckDealersNewUsed = 'car_and_truck_dealers_new_used',
  CarAndTruckDealersUsedOnly = 'car_and_truck_dealers_used_only',
  CarRentalAgencies = 'car_rental_agencies',
  CarWashes = 'car_washes',
  CarpentryServices = 'carpentry_services',
  CarpetUpholsteryCleaning = 'carpet_upholstery_cleaning',
  Caterers = 'caterers',
  CharitableAndSocialServiceOrganizationsFundraising = 'charitable_and_social_service_organizations_fundraising',
  ChemicalsAndAlliedProducts = 'chemicals_and_allied_products',
  ChildCareServices = 'child_care_services',
  ChildrensAndInfantsWearStores = 'childrens_and_infants_wear_stores',
  ChiropodistsPodiatrists = 'chiropodists_podiatrists',
  Chiropractors = 'chiropractors',
  CigarStoresAndStands = 'cigar_stores_and_stands',
  CivicSocialFraternalAssociations = 'civic_social_fraternal_associations',
  CleaningAndMaintenance = 'cleaning_and_maintenance',
  ClothingRental = 'clothing_rental',
  CollegesUniversities = 'colleges_universities',
  CommercialEquipment = 'commercial_equipment',
  CommercialFootwear = 'commercial_footwear',
  CommercialPhotographyArtAndGraphics = 'commercial_photography_art_and_graphics',
  CommuterTransportAndFerries = 'commuter_transport_and_ferries',
  ComputerNetworkServices = 'computer_network_services',
  ComputerProgramming = 'computer_programming',
  ComputerRepair = 'computer_repair',
  ComputerSoftwareStores = 'computer_software_stores',
  ComputersPeripheralsAndSoftware = 'computers_peripherals_and_software',
  ConcreteWorkServices = 'concrete_work_services',
  ConstructionMaterials = 'construction_materials',
  ConsultingPublicRelations = 'consulting_public_relations',
  CorrespondenceSchools = 'correspondence_schools',
  CosmeticStores = 'cosmetic_stores',
  CounselingServices = 'counseling_services',
  CountryClubs = 'country_clubs',
  CourierServices = 'courier_services',
  CourtCosts = 'court_costs',
  CreditReportingAgencies = 'credit_reporting_agencies',
  CruiseLines = 'cruise_lines',
  DairyProductsStores = 'dairy_products_stores',
  DanceHallStudiosSchools = 'dance_hall_studios_schools',
  DatingEscortServices = 'dating_escort_services',
  DentistsOrthodontists = 'dentists_orthodontists',
  DepartmentStores = 'department_stores',
  DetectiveAgencies = 'detective_agencies',
  DigitalGoodsApplications = 'digital_goods_applications',
  DigitalGoodsGames = 'digital_goods_games',
  DigitalGoodsLargeVolume = 'digital_goods_large_volume',
  DigitalGoodsMedia = 'digital_goods_media',
  DirectMarketingCatalogMerchant = 'direct_marketing_catalog_merchant',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'direct_marketing_combination_catalog_and_retail_merchant',
  DirectMarketingInboundTelemarketing = 'direct_marketing_inbound_telemarketing',
  DirectMarketingInsuranceServices = 'direct_marketing_insurance_services',
  DirectMarketingOther = 'direct_marketing_other',
  DirectMarketingOutboundTelemarketing = 'direct_marketing_outbound_telemarketing',
  DirectMarketingSubscription = 'direct_marketing_subscription',
  DirectMarketingTravel = 'direct_marketing_travel',
  DiscountStores = 'discount_stores',
  Doctors = 'doctors',
  DoorToDoorSales = 'door_to_door_sales',
  DraperyWindowCoveringAndUpholsteryStores = 'drapery_window_covering_and_upholstery_stores',
  DrinkingPlaces = 'drinking_places',
  DrugStoresAndPharmacies = 'drug_stores_and_pharmacies',
  DrugsDrugProprietariesAndDruggistSundries = 'drugs_drug_proprietaries_and_druggist_sundries',
  DryCleaners = 'dry_cleaners',
  DurableGoods = 'durable_goods',
  DutyFreeStores = 'duty_free_stores',
  EatingPlacesRestaurants = 'eating_places_restaurants',
  EducationalServices = 'educational_services',
  ElectricRazorStores = 'electric_razor_stores',
  ElectricalPartsAndEquipment = 'electrical_parts_and_equipment',
  ElectricalServices = 'electrical_services',
  ElectronicsRepairShops = 'electronics_repair_shops',
  ElectronicsStores = 'electronics_stores',
  ElementarySecondarySchools = 'elementary_secondary_schools',
  EmploymentTempAgencies = 'employment_temp_agencies',
  EquipmentRental = 'equipment_rental',
  ExterminatingServices = 'exterminating_services',
  FamilyClothingStores = 'family_clothing_stores',
  FastFoodRestaurants = 'fast_food_restaurants',
  FinancialInstitutions = 'financial_institutions',
  FinesGovernmentAdministrativeEntities = 'fines_government_administrative_entities',
  FireplaceFireplaceScreensAndAccessoriesStores = 'fireplace_fireplace_screens_and_accessories_stores',
  FloorCoveringStores = 'floor_covering_stores',
  Florists = 'florists',
  FloristsSuppliesNurseryStockAndFlowers = 'florists_supplies_nursery_stock_and_flowers',
  FreezerAndLockerMeatProvisioners = 'freezer_and_locker_meat_provisioners',
  FuelDealersNonAutomotive = 'fuel_dealers_non_automotive',
  FuneralServicesCrematories = 'funeral_services_crematories',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'furniture_home_furnishings_and_equipment_stores_except_appliances',
  FurnitureRepairRefinishing = 'furniture_repair_refinishing',
  FurriersAndFurShops = 'furriers_and_fur_shops',
  GeneralServices = 'general_services',
  GiftCardNoveltyAndSouvenirShops = 'gift_card_novelty_and_souvenir_shops',
  GlassPaintAndWallpaperStores = 'glass_paint_and_wallpaper_stores',
  GlasswareCrystalStores = 'glassware_crystal_stores',
  GolfCoursesPublic = 'golf_courses_public',
  GovernmentServices = 'government_services',
  GroceryStoresSupermarkets = 'grocery_stores_supermarkets',
  HardwareEquipmentAndSupplies = 'hardware_equipment_and_supplies',
  HardwareStores = 'hardware_stores',
  HealthAndBeautySpas = 'health_and_beauty_spas',
  HearingAidsSalesAndSupplies = 'hearing_aids_sales_and_supplies',
  HeatingPlumbingAC = 'heating_plumbing_a_c',
  HobbyToyAndGameShops = 'hobby_toy_and_game_shops',
  HomeSupplyWarehouseStores = 'home_supply_warehouse_stores',
  Hospitals = 'hospitals',
  HotelsMotelsAndResorts = 'hotels_motels_and_resorts',
  HouseholdApplianceStores = 'household_appliance_stores',
  IndustrialSupplies = 'industrial_supplies',
  InformationRetrievalServices = 'information_retrieval_services',
  InsuranceDefault = 'insurance_default',
  InsuranceUnderwritingPremiums = 'insurance_underwriting_premiums',
  IntraCompanyPurchases = 'intra_company_purchases',
  JewelryStoresWatchesClocksAndSilverwareStores = 'jewelry_stores_watches_clocks_and_silverware_stores',
  LandscapingServices = 'landscaping_services',
  Laundries = 'laundries',
  LaundryCleaningServices = 'laundry_cleaning_services',
  LegalServicesAttorneys = 'legal_services_attorneys',
  LuggageAndLeatherGoodsStores = 'luggage_and_leather_goods_stores',
  LumberBuildingMaterialsStores = 'lumber_building_materials_stores',
  ManualCashDisburse = 'manual_cash_disburse',
  MarinasServiceAndSupplies = 'marinas_service_and_supplies',
  MasonryStoneworkAndPlaster = 'masonry_stonework_and_plaster',
  MassageParlors = 'massage_parlors',
  MedicalAndDentalLabs = 'medical_and_dental_labs',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies',
  MedicalServices = 'medical_services',
  MembershipOrganizations = 'membership_organizations',
  MensAndBoysClothingAndAccessoriesStores = 'mens_and_boys_clothing_and_accessories_stores',
  MensWomensClothingStores = 'mens_womens_clothing_stores',
  MetalServiceCenters = 'metal_service_centers',
  Miscellaneous = 'miscellaneous',
  MiscellaneousApparelAndAccessoryShops = 'miscellaneous_apparel_and_accessory_shops',
  MiscellaneousAutoDealers = 'miscellaneous_auto_dealers',
  MiscellaneousBusinessServices = 'miscellaneous_business_services',
  MiscellaneousFoodStores = 'miscellaneous_food_stores',
  MiscellaneousGeneralMerchandise = 'miscellaneous_general_merchandise',
  MiscellaneousGeneralServices = 'miscellaneous_general_services',
  MiscellaneousHomeFurnishingSpecialtyStores = 'miscellaneous_home_furnishing_specialty_stores',
  MiscellaneousPublishingAndPrinting = 'miscellaneous_publishing_and_printing',
  MiscellaneousRecreationServices = 'miscellaneous_recreation_services',
  MiscellaneousRepairShops = 'miscellaneous_repair_shops',
  MiscellaneousSpecialtyRetail = 'miscellaneous_specialty_retail',
  MobileHomeDealers = 'mobile_home_dealers',
  MotionPictureTheaters = 'motion_picture_theaters',
  MotorFreightCarriersAndTrucking = 'motor_freight_carriers_and_trucking',
  MotorHomesDealers = 'motor_homes_dealers',
  MotorVehicleSuppliesAndNewParts = 'motor_vehicle_supplies_and_new_parts',
  MotorcycleShopsAndDealers = 'motorcycle_shops_and_dealers',
  MotorcycleShopsDealers = 'motorcycle_shops_dealers',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'music_stores_musical_instruments_pianos_and_sheet_music',
  NewsDealersAndNewsstands = 'news_dealers_and_newsstands',
  NonFiMoneyOrders = 'non_fi_money_orders',
  NonFiStoredValueCardPurchaseLoad = 'non_fi_stored_value_card_purchase_load',
  NondurableGoods = 'nondurable_goods',
  NurseriesLawnAndGardenSupplyStores = 'nurseries_lawn_and_garden_supply_stores',
  NursingPersonalCare = 'nursing_personal_care',
  OfficeAndCommercialFurniture = 'office_and_commercial_furniture',
  OpticiansEyeglasses = 'opticians_eyeglasses',
  OptometristsOphthalmologist = 'optometrists_ophthalmologist',
  OrthopedicGoodsProstheticDevices = 'orthopedic_goods_prosthetic_devices',
  Osteopaths = 'osteopaths',
  PackageStoresBeerWineAndLiquor = 'package_stores_beer_wine_and_liquor',
  PaintsVarnishesAndSupplies = 'paints_varnishes_and_supplies',
  ParkingLotsGarages = 'parking_lots_garages',
  PassengerRailways = 'passenger_railways',
  PawnShops = 'pawn_shops',
  PetShopsPetFoodAndSupplies = 'pet_shops_pet_food_and_supplies',
  PetroleumAndPetroleumProducts = 'petroleum_and_petroleum_products',
  PhotoDeveloping = 'photo_developing',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'photographic_photocopy_microfilm_equipment_and_supplies',
  PhotographicStudios = 'photographic_studios',
  PictureVideoProduction = 'picture_video_production',
  PieceGoodsNotionsAndOtherDryGoods = 'piece_goods_notions_and_other_dry_goods',
  PlumbingHeatingEquipmentAndSupplies = 'plumbing_heating_equipment_and_supplies',
  PoliticalOrganizations = 'political_organizations',
  PostalServicesGovernmentOnly = 'postal_services_government_only',
  PreciousStonesAndMetalsWatchesAndJewelry = 'precious_stones_and_metals_watches_and_jewelry',
  ProfessionalServices = 'professional_services',
  PublicWarehousingAndStorage = 'public_warehousing_and_storage',
  QuickCopyReproAndBlueprint = 'quick_copy_repro_and_blueprint',
  Railroads = 'railroads',
  RealEstateAgentsAndManagersRentals = 'real_estate_agents_and_managers_rentals',
  RecordStores = 'record_stores',
  RecreationalVehicleRentals = 'recreational_vehicle_rentals',
  ReligiousGoodsStores = 'religious_goods_stores',
  ReligiousOrganizations = 'religious_organizations',
  RoofingSidingSheetMetal = 'roofing_siding_sheet_metal',
  SecretarialSupportServices = 'secretarial_support_services',
  SecurityBrokersDealers = 'security_brokers_dealers',
  ServiceStations = 'service_stations',
  SewingNeedleworkFabricAndPieceGoodsStores = 'sewing_needlework_fabric_and_piece_goods_stores',
  ShoeRepairHatCleaning = 'shoe_repair_hat_cleaning',
  ShoeStores = 'shoe_stores',
  SmallApplianceRepair = 'small_appliance_repair',
  SnowmobileDealers = 'snowmobile_dealers',
  SpecialTradeServices = 'special_trade_services',
  SpecialtyCleaning = 'specialty_cleaning',
  SportingGoodsStores = 'sporting_goods_stores',
  SportingRecreationCamps = 'sporting_recreation_camps',
  SportsAndRidingApparelStores = 'sports_and_riding_apparel_stores',
  SportsClubsFields = 'sports_clubs_fields',
  StampAndCoinStores = 'stamp_and_coin_stores',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'stationary_office_supplies_printing_and_writing_paper',
  StationeryStoresOfficeAndSchoolSupplyStores = 'stationery_stores_office_and_school_supply_stores',
  SwimmingPoolsSales = 'swimming_pools_sales',
  TUiTravelGermany = 't_ui_travel_germany',
  TailorsAlterations = 'tailors_alterations',
  TaxPaymentsGovernmentAgencies = 'tax_payments_government_agencies',
  TaxPreparationServices = 'tax_preparation_services',
  TaxicabsLimousines = 'taxicabs_limousines',
  TelecommunicationEquipmentAndTelephoneSales = 'telecommunication_equipment_and_telephone_sales',
  TelecommunicationServices = 'telecommunication_services',
  TelegraphServices = 'telegraph_services',
  TentAndAwningShops = 'tent_and_awning_shops',
  TestingLaboratories = 'testing_laboratories',
  TheatricalTicketAgencies = 'theatrical_ticket_agencies',
  Timeshares = 'timeshares',
  TireRetreadingAndRepair = 'tire_retreading_and_repair',
  TollsBridgeFees = 'tolls_bridge_fees',
  TouristAttractionsAndExhibits = 'tourist_attractions_and_exhibits',
  TowingServices = 'towing_services',
  TrailerParksCampgrounds = 'trailer_parks_campgrounds',
  TransportationServices = 'transportation_services',
  TravelAgenciesTourOperators = 'travel_agencies_tour_operators',
  TruckStopIteration = 'truck_stop_iteration',
  TruckUtilityTrailerRentals = 'truck_utility_trailer_rentals',
  TypesettingPlateMakingAndRelatedServices = 'typesetting_plate_making_and_related_services',
  TypewriterStores = 'typewriter_stores',
  USFederalGovernmentAgenciesOrDepartments = 'u_s_federal_government_agencies_or_departments',
  UniformsCommercialClothing = 'uniforms_commercial_clothing',
  UsedMerchandiseAndSecondhandStores = 'used_merchandise_and_secondhand_stores',
  Utilities = 'utilities',
  VarietyStores = 'variety_stores',
  VeterinaryServices = 'veterinary_services',
  VideoAmusementGameSupplies = 'video_amusement_game_supplies',
  VideoGameArcades = 'video_game_arcades',
  VideoTapeRentalStores = 'video_tape_rental_stores',
  VocationalTradeSchools = 'vocational_trade_schools',
  WatchJewelryRepair = 'watch_jewelry_repair',
  WeldingRepair = 'welding_repair',
  WholesaleClubs = 'wholesale_clubs',
  WigAndToupeeStores = 'wig_and_toupee_stores',
  WiresMoneyOrders = 'wires_money_orders',
  WomensAccessoryAndSpecialtyShops = 'womens_accessory_and_specialty_shops',
  WomensReadyToWearStores = 'womens_ready_to_wear_stores',
  WreckingAndSalvageYards = 'wrecking_and_salvage_yards'
}

export enum Stripe_IssuingCardSpendingLimitIntervalProperty {
  AllTime = 'all_time',
  Daily = 'daily',
  Monthly = 'monthly',
  PerAuthorization = 'per_authorization',
  Weekly = 'weekly',
  Yearly = 'yearly'
}

export enum Stripe_IssuingCardStatusProperty {
  Active = 'active',
  Canceled = 'canceled',
  Inactive = 'inactive'
}

export enum Stripe_IssuingCardTypeProperty {
  Physical = 'physical',
  Virtual = 'virtual'
}

export type Stripe_IssuingCardWallets = {
  __typename?: 'Stripe_IssuingCardWallets';
  apple_pay?: Maybe<Stripe_IssuingCardApplePay>;
  google_pay?: Maybe<Stripe_IssuingCardGooglePay>;
  /** Unique identifier for a card used with digital wallets */
  primary_account_identifier?: Maybe<Scalars['String']>;
};

export type Stripe_IssuingCardApplePay = {
  __typename?: 'Stripe_IssuingCardApplePay';
  /** Apple Pay Eligibility */
  eligible?: Maybe<Scalars['Boolean']>;
  /** Reason the card is ineligible for Apple Pay */
  ineligible_reason?: Maybe<Stripe_IssuingCardApplePayIneligibleReasonProperty>;
};

export enum Stripe_IssuingCardApplePayIneligibleReasonProperty {
  MissingAgreement = 'missing_agreement',
  MissingCardholderContact = 'missing_cardholder_contact',
  UnsupportedRegion = 'unsupported_region'
}

export type Stripe_IssuingCardGooglePay = {
  __typename?: 'Stripe_IssuingCardGooglePay';
  /** Google Pay Eligibility */
  eligible?: Maybe<Scalars['Boolean']>;
  /** Reason the card is ineligible for Google Pay */
  ineligible_reason?: Maybe<Stripe_IssuingCardGooglePayIneligibleReasonProperty>;
};

export enum Stripe_IssuingCardGooglePayIneligibleReasonProperty {
  MissingAgreement = 'missing_agreement',
  MissingCardholderContact = 'missing_cardholder_contact',
  UnsupportedRegion = 'unsupported_region'
}

export type Stripe_IssuingAuthorizationCardholderProperty = WrappedString | Stripe_IssuingCardholder;

export type Stripe_IssuingAuthorizationMerchantData = {
  __typename?: 'Stripe_IssuingAuthorizationMerchantData';
  /** A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values. */
  category?: Maybe<Scalars['String']>;
  /** The merchant category code for the sellerâ€™s business */
  category_code?: Maybe<Scalars['String']>;
  /** City where the seller is located */
  city?: Maybe<Scalars['String']>;
  /** Country where the seller is located */
  country?: Maybe<Scalars['String']>;
  /** Name of the seller */
  name?: Maybe<Scalars['String']>;
  /** Identifier assigned to the seller by the card brand */
  network_id?: Maybe<Scalars['String']>;
  /** Postal code where the seller is located */
  postal_code?: Maybe<Scalars['String']>;
  /** State where the seller is located */
  state?: Maybe<Scalars['String']>;
};

export enum Stripe_IssuingAuthorizationObjectProperty {
  IssuingDoTauthorization = 'issuingDOTauthorization'
}

export type Stripe_IssuingAuthorizationPendingRequest = {
  __typename?: 'Stripe_IssuingAuthorizationPendingRequest';
  /** The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  amount?: Maybe<Scalars['Int']>;
  amount_details?: Maybe<Stripe_IssuingAuthorizationAmountDetails>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization. */
  is_amount_controllable?: Maybe<Scalars['Boolean']>;
  /** The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  merchant_amount?: Maybe<Scalars['Int']>;
  /** The local currency the merchant is requesting to authorize. */
  merchant_currency?: Maybe<Scalars['String']>;
};

export type Stripe_IssuingAuthorizationRequest = {
  __typename?: 'Stripe_IssuingAuthorizationRequest';
  /** The `pending_request.amount` at the time of the request, presented in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved. */
  amount?: Maybe<Scalars['Int']>;
  amount_details?: Maybe<Stripe_IssuingAuthorizationAmountDetails>;
  /** Whether this request was approved. */
  approved?: Maybe<Scalars['Boolean']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  merchant_amount?: Maybe<Scalars['Int']>;
  /** The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  merchant_currency?: Maybe<Scalars['String']>;
  /** The reason for the approval or decline. */
  reason?: Maybe<Stripe_IssuingAuthorizationRequestReasonProperty>;
};

export enum Stripe_IssuingAuthorizationRequestReasonProperty {
  AccountDisabled = 'account_disabled',
  CardActive = 'card_active',
  CardInactive = 'card_inactive',
  CardholderInactive = 'cardholder_inactive',
  CardholderVerificationRequired = 'cardholder_verification_required',
  InsufficientFunds = 'insufficient_funds',
  NotAllowed = 'not_allowed',
  SpendingControls = 'spending_controls',
  SuspectedFraud = 'suspected_fraud',
  VerificationFailed = 'verification_failed',
  WebhookApproved = 'webhook_approved',
  WebhookDeclined = 'webhook_declined',
  WebhookTimeout = 'webhook_timeout'
}

export enum Stripe_IssuingAuthorizationStatusProperty {
  Closed = 'closed',
  Pending = 'pending',
  Reversed = 'reversed'
}

export type Stripe_IssuingTransaction = {
  __typename?: 'Stripe_IssuingTransaction';
  /** The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  amount?: Maybe<Scalars['Int']>;
  amount_details?: Maybe<Stripe_IssuingTransactionAmountDetails>;
  authorization?: Maybe<Stripe_IssuingTransactionAuthorizationProperty>;
  balance_transaction?: Maybe<Stripe_IssuingTransactionBalanceTransactionProperty>;
  card?: Maybe<Stripe_IssuingTransactionCardProperty>;
  cardholder?: Maybe<Stripe_IssuingTransactionCardholderProperty>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  dispute?: Maybe<Stripe_IssuingTransactionDisputeProperty>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency. */
  merchant_amount?: Maybe<Scalars['Int']>;
  /** The currency with which the merchant is taking payment. */
  merchant_currency?: Maybe<Scalars['String']>;
  merchant_data?: Maybe<Stripe_IssuingAuthorizationMerchantData>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_IssuingTransactionObjectProperty>;
  purchase_details?: Maybe<Stripe_IssuingTransactionPurchaseDetails>;
  /** The nature of the transaction. */
  type?: Maybe<Stripe_IssuingTransactionTypeProperty>;
  /** The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. */
  wallet?: Maybe<Stripe_IssuingTransactionWalletProperty>;
};

export type Stripe_IssuingTransactionAmountDetails = {
  __typename?: 'Stripe_IssuingTransactionAmountDetails';
  /** The fee charged by the ATM for the cash withdrawal. */
  atm_fee?: Maybe<Scalars['Int']>;
};

export type Stripe_IssuingTransactionAuthorizationProperty = WrappedString | Stripe_IssuingAuthorization;

export type Stripe_IssuingTransactionBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction;

export type Stripe_IssuingTransactionCardProperty = WrappedString | Stripe_IssuingCard;

export type Stripe_IssuingTransactionCardholderProperty = WrappedString | Stripe_IssuingCardholder;

export type Stripe_IssuingTransactionDisputeProperty = WrappedString | Stripe_IssuingDispute;

export type Stripe_IssuingDispute = {
  __typename?: 'Stripe_IssuingDispute';
  /** Disputed amount. Usually the amount of the `transaction`, but can differ (usually because of currency fluctuation). */
  amount?: Maybe<Scalars['Int']>;
  /** List of balance transactions associated with the dispute. */
  balance_transactions?: Maybe<Array<Maybe<Stripe_BalanceTransaction>>>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** The currency the `transaction` was made in. */
  currency?: Maybe<Scalars['String']>;
  evidence?: Maybe<Stripe_IssuingDisputeEvidence>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_IssuingDisputeObjectProperty>;
  /** Current status of the dispute. */
  status?: Maybe<Stripe_IssuingDisputeStatusProperty>;
  transaction?: Maybe<Stripe_IssuingDisputeTransactionProperty>;
};

export type Stripe_IssuingDisputeEvidence = {
  __typename?: 'Stripe_IssuingDisputeEvidence';
  canceled?: Maybe<Stripe_IssuingDisputeCanceledEvidence>;
  duplicate?: Maybe<Stripe_IssuingDisputeDuplicateEvidence>;
  fraudulent?: Maybe<Stripe_IssuingDisputeFraudulentEvidence>;
  merchandise_not_as_described?: Maybe<Stripe_IssuingDisputeMerchandiseNotAsDescribedEvidence>;
  not_received?: Maybe<Stripe_IssuingDisputeNotReceivedEvidence>;
  other?: Maybe<Stripe_IssuingDisputeOtherEvidence>;
  /** The reason for filing the dispute. Its value will match the field containing the evidence. */
  reason?: Maybe<Stripe_IssuingDisputeEvidenceReasonProperty>;
  service_not_as_described?: Maybe<Stripe_IssuingDisputeServiceNotAsDescribedEvidence>;
};

export type Stripe_IssuingDisputeCanceledEvidence = {
  __typename?: 'Stripe_IssuingDisputeCanceledEvidence';
  additional_documentation?: Maybe<Stripe_IssuingDisputeCanceledEvidenceAdditionalDocumentationProperty>;
  /** Date when order was canceled. */
  canceled_at?: Maybe<Scalars['Int']>;
  /** Whether the cardholder was provided with a cancellation policy. */
  cancellation_policy_provided?: Maybe<Scalars['Boolean']>;
  /** Reason for canceling the order. */
  cancellation_reason?: Maybe<Scalars['String']>;
  /** Date when the cardholder expected to receive the product. */
  expected_at?: Maybe<Scalars['Int']>;
  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: Maybe<Scalars['String']>;
  /** Description of the merchandise or service that was purchased. */
  product_description?: Maybe<Scalars['String']>;
  /** Whether the product was a merchandise or service. */
  product_type?: Maybe<Stripe_IssuingDisputeCanceledEvidenceProductTypeProperty>;
  /** Result of cardholder's attempt to return the product. */
  return_status?: Maybe<Stripe_IssuingDisputeCanceledEvidenceReturnStatusProperty>;
  /** Date when the product was returned or attempted to be returned. */
  returned_at?: Maybe<Scalars['Int']>;
};

export type Stripe_IssuingDisputeCanceledEvidenceAdditionalDocumentationProperty = WrappedString | Stripe_File;

export enum Stripe_IssuingDisputeCanceledEvidenceProductTypeProperty {
  Merchandise = 'merchandise',
  Service = 'service'
}

export enum Stripe_IssuingDisputeCanceledEvidenceReturnStatusProperty {
  MerchantRejected = 'merchant_rejected',
  Successful = 'successful'
}

export type Stripe_IssuingDisputeDuplicateEvidence = {
  __typename?: 'Stripe_IssuingDisputeDuplicateEvidence';
  additional_documentation?: Maybe<Stripe_IssuingDisputeDuplicateEvidenceAdditionalDocumentationProperty>;
  card_statement?: Maybe<Stripe_IssuingDisputeDuplicateEvidenceCardStatementProperty>;
  cash_receipt?: Maybe<Stripe_IssuingDisputeDuplicateEvidenceCashReceiptProperty>;
  check_image?: Maybe<Stripe_IssuingDisputeDuplicateEvidenceCheckImageProperty>;
  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: Maybe<Scalars['String']>;
  /** Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one. */
  original_transaction?: Maybe<Scalars['String']>;
};

export type Stripe_IssuingDisputeDuplicateEvidenceAdditionalDocumentationProperty = WrappedString | Stripe_File;

export type Stripe_IssuingDisputeDuplicateEvidenceCardStatementProperty = WrappedString | Stripe_File;

export type Stripe_IssuingDisputeDuplicateEvidenceCashReceiptProperty = WrappedString | Stripe_File;

export type Stripe_IssuingDisputeDuplicateEvidenceCheckImageProperty = WrappedString | Stripe_File;

export type Stripe_IssuingDisputeFraudulentEvidence = {
  __typename?: 'Stripe_IssuingDisputeFraudulentEvidence';
  additional_documentation?: Maybe<Stripe_IssuingDisputeFraudulentEvidenceAdditionalDocumentationProperty>;
  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: Maybe<Scalars['String']>;
};

export type Stripe_IssuingDisputeFraudulentEvidenceAdditionalDocumentationProperty = WrappedString | Stripe_File;

export type Stripe_IssuingDisputeMerchandiseNotAsDescribedEvidence = {
  __typename?: 'Stripe_IssuingDisputeMerchandiseNotAsDescribedEvidence';
  additional_documentation?: Maybe<Stripe_IssuingDisputeMerchandiseNotAsDescribedEvidenceAdditionalDocumentationProperty>;
  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: Maybe<Scalars['String']>;
  /** Date when the product was received. */
  received_at?: Maybe<Scalars['Int']>;
  /** Description of the cardholder's attempt to return the product. */
  return_description?: Maybe<Scalars['String']>;
  /** Result of cardholder's attempt to return the product. */
  return_status?: Maybe<Stripe_IssuingDisputeMerchandiseNotAsDescribedEvidenceReturnStatusProperty>;
  /** Date when the product was returned or attempted to be returned. */
  returned_at?: Maybe<Scalars['Int']>;
};

export type Stripe_IssuingDisputeMerchandiseNotAsDescribedEvidenceAdditionalDocumentationProperty = WrappedString | Stripe_File;

export enum Stripe_IssuingDisputeMerchandiseNotAsDescribedEvidenceReturnStatusProperty {
  MerchantRejected = 'merchant_rejected',
  Successful = 'successful'
}

export type Stripe_IssuingDisputeNotReceivedEvidence = {
  __typename?: 'Stripe_IssuingDisputeNotReceivedEvidence';
  additional_documentation?: Maybe<Stripe_IssuingDisputeNotReceivedEvidenceAdditionalDocumentationProperty>;
  /** Date when the cardholder expected to receive the product. */
  expected_at?: Maybe<Scalars['Int']>;
  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: Maybe<Scalars['String']>;
  /** Description of the merchandise or service that was purchased. */
  product_description?: Maybe<Scalars['String']>;
  /** Whether the product was a merchandise or service. */
  product_type?: Maybe<Stripe_IssuingDisputeNotReceivedEvidenceProductTypeProperty>;
};

export type Stripe_IssuingDisputeNotReceivedEvidenceAdditionalDocumentationProperty = WrappedString | Stripe_File;

export enum Stripe_IssuingDisputeNotReceivedEvidenceProductTypeProperty {
  Merchandise = 'merchandise',
  Service = 'service'
}

export type Stripe_IssuingDisputeOtherEvidence = {
  __typename?: 'Stripe_IssuingDisputeOtherEvidence';
  additional_documentation?: Maybe<Stripe_IssuingDisputeOtherEvidenceAdditionalDocumentationProperty>;
  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: Maybe<Scalars['String']>;
  /** Description of the merchandise or service that was purchased. */
  product_description?: Maybe<Scalars['String']>;
  /** Whether the product was a merchandise or service. */
  product_type?: Maybe<Stripe_IssuingDisputeOtherEvidenceProductTypeProperty>;
};

export type Stripe_IssuingDisputeOtherEvidenceAdditionalDocumentationProperty = WrappedString | Stripe_File;

export enum Stripe_IssuingDisputeOtherEvidenceProductTypeProperty {
  Merchandise = 'merchandise',
  Service = 'service'
}

export enum Stripe_IssuingDisputeEvidenceReasonProperty {
  Canceled = 'canceled',
  Duplicate = 'duplicate',
  Fraudulent = 'fraudulent',
  MerchandiseNotAsDescribed = 'merchandise_not_as_described',
  NotReceived = 'not_received',
  Other = 'other',
  ServiceNotAsDescribed = 'service_not_as_described'
}

export type Stripe_IssuingDisputeServiceNotAsDescribedEvidence = {
  __typename?: 'Stripe_IssuingDisputeServiceNotAsDescribedEvidence';
  additional_documentation?: Maybe<Stripe_IssuingDisputeServiceNotAsDescribedEvidenceAdditionalDocumentationProperty>;
  /** Date when order was canceled. */
  canceled_at?: Maybe<Scalars['Int']>;
  /** Reason for canceling the order. */
  cancellation_reason?: Maybe<Scalars['String']>;
  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: Maybe<Scalars['String']>;
  /** Date when the product was received. */
  received_at?: Maybe<Scalars['Int']>;
};

export type Stripe_IssuingDisputeServiceNotAsDescribedEvidenceAdditionalDocumentationProperty = WrappedString | Stripe_File;

export enum Stripe_IssuingDisputeObjectProperty {
  IssuingDoTdispute = 'issuingDOTdispute'
}

export enum Stripe_IssuingDisputeStatusProperty {
  Expired = 'expired',
  Lost = 'lost',
  Submitted = 'submitted',
  Unsubmitted = 'unsubmitted',
  Won = 'won'
}

export type Stripe_IssuingDisputeTransactionProperty = WrappedString | Stripe_IssuingTransaction;

export enum Stripe_IssuingTransactionObjectProperty {
  IssuingDoTtransaction = 'issuingDOTtransaction'
}

export type Stripe_IssuingTransactionPurchaseDetails = {
  __typename?: 'Stripe_IssuingTransactionPurchaseDetails';
  flight?: Maybe<Stripe_IssuingTransactionFlightData>;
  fuel?: Maybe<Stripe_IssuingTransactionFuelData>;
  lodging?: Maybe<Stripe_IssuingTransactionLodgingData>;
  /** The line items in the purchase. */
  receipt?: Maybe<Array<Maybe<Stripe_IssuingTransactionReceiptData>>>;
  /** A merchant-specific order number. */
  reference?: Maybe<Scalars['String']>;
};

export type Stripe_IssuingTransactionFlightData = {
  __typename?: 'Stripe_IssuingTransactionFlightData';
  /** The time that the flight departed. */
  departure_at?: Maybe<Scalars['Int']>;
  /** The name of the passenger. */
  passenger_name?: Maybe<Scalars['String']>;
  /** Whether the ticket is refundable. */
  refundable?: Maybe<Scalars['Boolean']>;
  /** The legs of the trip. */
  segments?: Maybe<Array<Maybe<Stripe_IssuingTransactionFlightDataLeg>>>;
  /** The travel agency that issued the ticket. */
  travel_agency?: Maybe<Scalars['String']>;
};

export type Stripe_IssuingTransactionFlightDataLeg = {
  __typename?: 'Stripe_IssuingTransactionFlightDataLeg';
  /** The three-letter IATA airport code of the flight's destination. */
  arrival_airport_code?: Maybe<Scalars['String']>;
  /** The airline carrier code. */
  carrier?: Maybe<Scalars['String']>;
  /** The three-letter IATA airport code that the flight departed from. */
  departure_airport_code?: Maybe<Scalars['String']>;
  /** The flight number. */
  flight_number?: Maybe<Scalars['String']>;
  /** The flight's service class. */
  service_class?: Maybe<Scalars['String']>;
  /** Whether a stopover is allowed on this flight. */
  stopover_allowed?: Maybe<Scalars['Boolean']>;
};

export type Stripe_IssuingTransactionFuelData = {
  __typename?: 'Stripe_IssuingTransactionFuelData';
  /** The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`. */
  type?: Maybe<Scalars['String']>;
  /** The units for `volume_decimal`. One of `us_gallon` or `liter`. */
  unit?: Maybe<Scalars['String']>;
  /** The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places. */
  unit_cost_decimal?: Maybe<Scalars['String']>;
  /** The volume of the fuel that was pumped, represented as a decimal string with at most 12 decimal places. */
  volume_decimal?: Maybe<Scalars['String']>;
};

export type Stripe_IssuingTransactionLodgingData = {
  __typename?: 'Stripe_IssuingTransactionLodgingData';
  /** The time of checking into the lodging. */
  check_in_at?: Maybe<Scalars['Int']>;
  /** The number of nights stayed at the lodging. */
  nights?: Maybe<Scalars['Int']>;
};

export type Stripe_IssuingTransactionReceiptData = {
  __typename?: 'Stripe_IssuingTransactionReceiptData';
  /** The description of the item. The maximum length of this field is 26 characters. */
  description?: Maybe<Scalars['String']>;
  /** The quantity of the item. */
  quantity?: Maybe<Scalars['Float']>;
  /** The total for this line item in cents. */
  total?: Maybe<Scalars['Int']>;
  /** The unit cost of the item in cents. */
  unit_cost?: Maybe<Scalars['Int']>;
};

export enum Stripe_IssuingTransactionTypeProperty {
  Capture = 'capture',
  Refund = 'refund'
}

export enum Stripe_IssuingTransactionWalletProperty {
  ApplePay = 'apple_pay',
  GooglePay = 'google_pay',
  SamsungPay = 'samsung_pay'
}

export type Stripe_IssuingAuthorizationVerificationData = {
  __typename?: 'Stripe_IssuingAuthorizationVerificationData';
  /** Whether the cardholder provided an address first line and if it matched the cardholderâ€™s `billing.address.line1`. */
  address_line1_check?: Maybe<Stripe_IssuingAuthorizationVerificationDataAddressLine1CheckProperty>;
  /** Whether the cardholder provided a postal code and if it matched the cardholderâ€™s `billing.address.postal_code`. */
  address_postal_code_check?: Maybe<Stripe_IssuingAuthorizationVerificationDataAddressPostalCodeCheckProperty>;
  /** Whether the cardholder provided a CVC and if it matched Stripeâ€™s record. */
  cvc_check?: Maybe<Stripe_IssuingAuthorizationVerificationDataCvcCheckProperty>;
  /** Whether the cardholder provided an expiry date and if it matched Stripeâ€™s record. */
  expiry_check?: Maybe<Stripe_IssuingAuthorizationVerificationDataExpiryCheckProperty>;
};

export enum Stripe_IssuingAuthorizationVerificationDataAddressLine1CheckProperty {
  Match = 'match',
  Mismatch = 'mismatch',
  NotProvided = 'not_provided'
}

export enum Stripe_IssuingAuthorizationVerificationDataAddressPostalCodeCheckProperty {
  Match = 'match',
  Mismatch = 'mismatch',
  NotProvided = 'not_provided'
}

export enum Stripe_IssuingAuthorizationVerificationDataCvcCheckProperty {
  Match = 'match',
  Mismatch = 'mismatch',
  NotProvided = 'not_provided'
}

export enum Stripe_IssuingAuthorizationVerificationDataExpiryCheckProperty {
  Match = 'match',
  Mismatch = 'mismatch',
  NotProvided = 'not_provided'
}

export type Stripe_Payout = {
  __typename?: 'Stripe_Payout';
  /** Amount (in %s) to be transferred to your bank account or debit card. */
  amount?: Maybe<Scalars['Int']>;
  /** Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays. */
  arrival_date?: Maybe<Scalars['Int']>;
  /** Returns `true` if the payout was created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule), and `false` if it was [requested manually](https://stripe.com/docs/payouts#manual-payouts). */
  automatic?: Maybe<Scalars['Boolean']>;
  balance_transaction?: Maybe<Stripe_PayoutBalanceTransactionProperty>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  destination?: Maybe<Stripe_PayoutDestinationProperty>;
  failure_balance_transaction?: Maybe<Stripe_PayoutFailureBalanceTransactionProperty>;
  /** Error code explaining reason for payout failure if available. See [Types of payout failures](https://stripe.com/docs/api#payout_failures) for a list of failure codes. */
  failure_code?: Maybe<Scalars['String']>;
  /** Message to user further explaining reason for payout failure if available. */
  failure_message?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces](https://stripe.com/blog/instant-payouts-for-marketplaces) for more information.) */
  method?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_PayoutObjectProperty>;
  original_payout?: Maybe<Stripe_PayoutOriginalPayoutProperty>;
  reversed_by?: Maybe<Stripe_PayoutReversedByProperty>;
  /** The source balance this payout came from. One of `card`, `fpx`, or `bank_account`. */
  source_type?: Maybe<Scalars['String']>;
  /** Extra information about a payout to be displayed on the user's bank statement. */
  statement_descriptor?: Maybe<Scalars['String']>;
  /** Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it is submitted to the bank, when it becomes `in_transit`. The status then changes to `paid` if the transaction goes through, or to `failed` or `canceled` (within 5 business days). Some failed payouts may initially show as `paid` but then change to `failed`. */
  status?: Maybe<Scalars['String']>;
  /** Can be `bank_account` or `card`. */
  type?: Maybe<Stripe_PayoutTypeProperty>;
};

export type Stripe_PayoutBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction;

export type Stripe_PayoutDestinationProperty = WrappedString | Stripe_BankAccount | Stripe_Card | Stripe_DeletedBankAccount | Stripe_DeletedCard;

export type Stripe_DeletedBankAccount = {
  __typename?: 'Stripe_DeletedBankAccount';
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
  currency?: Maybe<Scalars['String']>;
  /** Always true for a deleted object */
  deleted?: Maybe<Scalars['Boolean']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_DeletedBankAccountObjectProperty>;
};

export enum Stripe_DeletedBankAccountObjectProperty {
  BankAccount = 'bank_account'
}

export type Stripe_DeletedCard = {
  __typename?: 'Stripe_DeletedCard';
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
  currency?: Maybe<Scalars['String']>;
  /** Always true for a deleted object */
  deleted?: Maybe<Scalars['Boolean']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_DeletedCardObjectProperty>;
};

export enum Stripe_DeletedCardObjectProperty {
  Card = 'card'
}

export type Stripe_PayoutFailureBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction;

export enum Stripe_PayoutObjectProperty {
  Payout = 'payout'
}

export type Stripe_PayoutOriginalPayoutProperty = WrappedString | Stripe_Payout;

export type Stripe_PayoutReversedByProperty = WrappedString | Stripe_Payout;

export enum Stripe_PayoutTypeProperty {
  BankAccount = 'bank_account',
  Card = 'card'
}

export type Stripe_PlatformTaxFee = {
  __typename?: 'Stripe_PlatformTaxFee';
  /** The Connected account that incurred this charge. */
  account?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_PlatformTaxFeeObjectProperty>;
  /** The payment object that caused this tax to be inflicted. */
  source_transaction?: Maybe<Scalars['String']>;
  /** The type of tax (VAT). */
  type?: Maybe<Scalars['String']>;
};

export enum Stripe_PlatformTaxFeeObjectProperty {
  PlatformTaxFee = 'platform_tax_fee'
}

export type Stripe_Refund = {
  __typename?: 'Stripe_Refund';
  /** Amount, in %s. */
  amount?: Maybe<Scalars['Int']>;
  balance_transaction?: Maybe<Stripe_RefundBalanceTransactionProperty>;
  charge?: Maybe<Stripe_RefundChargeProperty>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only) */
  description?: Maybe<Scalars['String']>;
  failure_balance_transaction?: Maybe<Stripe_RefundFailureBalanceTransactionProperty>;
  /** If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`. */
  failure_reason?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  next_action?: Maybe<Stripe_RefundNextAction>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_RefundObjectProperty>;
  payment_intent?: Maybe<Stripe_RefundPaymentIntentProperty>;
  /** Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`). */
  reason?: Maybe<Stripe_RefundReasonProperty>;
  /** This is the transaction number that appears on email receipts sent for this refund. */
  receipt_number?: Maybe<Scalars['String']>;
  source_transfer_reversal?: Maybe<Stripe_RefundSourceTransferReversalProperty>;
  /** Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details. */
  status?: Maybe<Scalars['String']>;
  transfer_reversal?: Maybe<Stripe_RefundTransferReversalProperty>;
};

export type Stripe_RefundBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction;

export type Stripe_RefundChargeProperty = WrappedString | Stripe_Charge;

export type Stripe_RefundFailureBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction;

export type Stripe_RefundNextAction = {
  __typename?: 'Stripe_RefundNextAction';
  display_details?: Maybe<Stripe_RefundNextActionDisplayDetails>;
  /** Type of the next action to perform. */
  type?: Maybe<Scalars['String']>;
};

export type Stripe_RefundNextActionDisplayDetails = {
  __typename?: 'Stripe_RefundNextActionDisplayDetails';
  email_sent?: Maybe<Stripe_EmailSent>;
  /** The expiry timestamp. */
  expires_at?: Maybe<Scalars['Int']>;
};

export type Stripe_EmailSent = {
  __typename?: 'Stripe_EmailSent';
  /** The timestamp when the email was sent. */
  email_sent_at?: Maybe<Scalars['Int']>;
  /** The recipient's email address. */
  email_sent_to?: Maybe<Scalars['String']>;
};

export enum Stripe_RefundObjectProperty {
  Refund = 'refund'
}

export type Stripe_RefundPaymentIntentProperty = WrappedString | Stripe_PaymentIntent;

export enum Stripe_RefundReasonProperty {
  Duplicate = 'duplicate',
  ExpiredUncapturedCharge = 'expired_uncaptured_charge',
  Fraudulent = 'fraudulent',
  RequestedByCustomer = 'requested_by_customer'
}

export type Stripe_RefundSourceTransferReversalProperty = WrappedString | Stripe_TransferReversal;

export type Stripe_TransferReversal = {
  __typename?: 'Stripe_TransferReversal';
  /** Amount, in %s. */
  amount?: Maybe<Scalars['Int']>;
  balance_transaction?: Maybe<Stripe_TransferReversalBalanceTransactionProperty>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  destination_payment_refund?: Maybe<Stripe_TransferReversalDestinationPaymentRefundProperty>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_TransferReversalObjectProperty>;
  source_refund?: Maybe<Stripe_TransferReversalSourceRefundProperty>;
  transfer?: Maybe<Stripe_TransferReversalTransferProperty>;
};

export type Stripe_TransferReversalBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction;

export type Stripe_TransferReversalDestinationPaymentRefundProperty = WrappedString | Stripe_Refund;

export enum Stripe_TransferReversalObjectProperty {
  TransferReversal = 'transfer_reversal'
}

export type Stripe_TransferReversalSourceRefundProperty = WrappedString | Stripe_Refund;

export type Stripe_TransferReversalTransferProperty = WrappedString | Stripe_Transfer;

export type Stripe_Transfer = {
  __typename?: 'Stripe_Transfer';
  /** Amount in %s to be transferred. */
  amount?: Maybe<Scalars['Int']>;
  /** Amount in %s reversed (can be less than the amount attribute on the transfer if a partial reversal was issued). */
  amount_reversed?: Maybe<Scalars['Int']>;
  balance_transaction?: Maybe<Stripe_TransferBalanceTransactionProperty>;
  /** Time that this record of the transfer was first created. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  destination?: Maybe<Stripe_TransferDestinationProperty>;
  destination_payment?: Maybe<Stripe_TransferDestinationPaymentProperty>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_TransferObjectProperty>;
  /** A list of reversals that have been applied to the transfer. */
  reversals?: Maybe<Stripe_TransferReversalsProperty>;
  /** Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false. */
  reversed?: Maybe<Scalars['Boolean']>;
  source_transaction?: Maybe<Stripe_TransferSourceTransactionProperty>;
  /** The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`. */
  source_type?: Maybe<Scalars['String']>;
  /** A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
  transfer_group?: Maybe<Scalars['String']>;
};

export type Stripe_TransferBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction;

export type Stripe_TransferDestinationProperty = WrappedString | Stripe_Account;

export type Stripe_TransferDestinationPaymentProperty = WrappedString | Stripe_Charge;

export enum Stripe_TransferObjectProperty {
  Transfer = 'transfer'
}

/** A list of reversals that have been applied to the transfer. */
export type Stripe_TransferReversalsProperty = {
  __typename?: 'Stripe_TransferReversalsProperty';
  /** Details about each object. */
  data: Array<Stripe_TransferReversal>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Stripe_TransferReversalsObjectProperty;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export enum Stripe_TransferReversalsObjectProperty {
  List = 'list'
}

export type Stripe_TransferSourceTransactionProperty = WrappedString | Stripe_Charge;

export type Stripe_RefundTransferReversalProperty = WrappedString | Stripe_TransferReversal;

export type Stripe_ReserveTransaction = {
  __typename?: 'Stripe_ReserveTransaction';
  amount?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_ReserveTransactionObjectProperty>;
};

export enum Stripe_ReserveTransactionObjectProperty {
  ReserveTransaction = 'reserve_transaction'
}

export type Stripe_TaxDeductedAtSource = {
  __typename?: 'Stripe_TaxDeductedAtSource';
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_TaxDeductedAtSourceObjectProperty>;
  /** The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period. */
  period_end?: Maybe<Scalars['Int']>;
  /** The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period. */
  period_start?: Maybe<Scalars['Int']>;
  /** The TAN that was supplied to Stripe when TDS was assessed */
  tax_deduction_account_number?: Maybe<Scalars['String']>;
};

export enum Stripe_TaxDeductedAtSourceObjectProperty {
  TaxDeductedAtSource = 'tax_deducted_at_source'
}

export type Stripe_Topup = {
  __typename?: 'Stripe_Topup';
  /** Amount transferred. */
  amount?: Maybe<Scalars['Int']>;
  balance_transaction?: Maybe<Stripe_TopupBalanceTransactionProperty>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up. */
  expected_availability_date?: Maybe<Scalars['Int']>;
  /** Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes). */
  failure_code?: Maybe<Scalars['String']>;
  /** Message to user further explaining reason for top-up failure if available. */
  failure_message?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_TopupObjectProperty>;
  source?: Maybe<Stripe_Source>;
  /** Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter. */
  statement_descriptor?: Maybe<Scalars['String']>;
  /** The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`. */
  status?: Maybe<Stripe_TopupStatusProperty>;
  /** A string that identifies this top-up as part of a group. */
  transfer_group?: Maybe<Scalars['String']>;
};

export type Stripe_TopupBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction;

export enum Stripe_TopupObjectProperty {
  Topup = 'topup'
}

export enum Stripe_TopupStatusProperty {
  Canceled = 'canceled',
  Failed = 'failed',
  Pending = 'pending',
  Reversed = 'reversed',
  Succeeded = 'succeeded'
}

export enum Stripe_BalanceTransactionTypeProperty {
  Adjustment = 'adjustment',
  Advance = 'advance',
  AdvanceFunding = 'advance_funding',
  AnticipationRepayment = 'anticipation_repayment',
  ApplicationFee = 'application_fee',
  ApplicationFeeRefund = 'application_fee_refund',
  Charge = 'charge',
  ConnectCollectionTransfer = 'connect_collection_transfer',
  Contribution = 'contribution',
  IssuingAuthorizationHold = 'issuing_authorization_hold',
  IssuingAuthorizationRelease = 'issuing_authorization_release',
  IssuingDispute = 'issuing_dispute',
  IssuingTransaction = 'issuing_transaction',
  Payment = 'payment',
  PaymentFailureRefund = 'payment_failure_refund',
  PaymentRefund = 'payment_refund',
  Payout = 'payout',
  PayoutCancel = 'payout_cancel',
  PayoutFailure = 'payout_failure',
  Refund = 'refund',
  RefundFailure = 'refund_failure',
  ReserveTransaction = 'reserve_transaction',
  ReservedFunds = 'reserved_funds',
  StripeFee = 'stripe_fee',
  StripeFxFee = 'stripe_fx_fee',
  TaxFee = 'tax_fee',
  Topup = 'topup',
  TopupReversal = 'topup_reversal',
  Transfer = 'transfer',
  TransferCancel = 'transfer_cancel',
  TransferFailure = 'transfer_failure',
  TransferRefund = 'transfer_refund'
}

export type Stripe_ApplicationFeeChargeProperty = WrappedString | Stripe_Charge;

export enum Stripe_ApplicationFeeObjectProperty {
  ApplicationFee = 'application_fee'
}

export type Stripe_ApplicationFeeOriginatingTransactionProperty = WrappedString | Stripe_Charge;

/** A list of refunds that have been applied to the fee. */
export type Stripe_ApplicationFeeRefundsProperty = {
  __typename?: 'Stripe_ApplicationFeeRefundsProperty';
  /** Details about each object. */
  data: Array<Stripe_FeeRefund>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Stripe_ApplicationFeeRefundsObjectProperty;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export enum Stripe_ApplicationFeeRefundsObjectProperty {
  List = 'list'
}

export type Stripe_ChargeBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction;

export type Stripe_ChargeFailureBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction;

export type Stripe_ChargeFraudDetails = {
  __typename?: 'Stripe_ChargeFraudDetails';
  /** Assessments from Stripe. If set, the value is `fraudulent`. */
  stripe_report?: Maybe<Scalars['String']>;
  /** Assessments reported by you. If set, possible values of are `safe` and `fraudulent`. */
  user_report?: Maybe<Scalars['String']>;
};

export type Stripe_ChargeInvoiceProperty = WrappedString | Stripe_Invoice;

export type Stripe_Invoice = {
  __typename?: 'Stripe_Invoice';
  /** The country of the business associated with this invoice, most often the business creating the invoice. */
  account_country?: Maybe<Scalars['String']>;
  /** The public name of the business associated with this invoice, most often the business creating the invoice. */
  account_name?: Maybe<Scalars['String']>;
  /** The account tax IDs associated with the invoice. Only editable when the invoice is a draft. */
  account_tax_ids?: Maybe<Array<Maybe<Stripe_InvoiceAccountTaxIdsProperty>>>;
  /** Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`. */
  amount_due?: Maybe<Scalars['Int']>;
  /** The amount, in %s, that was paid. */
  amount_paid?: Maybe<Scalars['Int']>;
  /** The amount remaining, in %s, that is due. */
  amount_remaining?: Maybe<Scalars['Int']>;
  /** The fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid. */
  application_fee_amount?: Maybe<Scalars['Int']>;
  /** Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule. */
  attempt_count?: Maybe<Scalars['Int']>;
  /** Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users. */
  attempted?: Maybe<Scalars['Boolean']>;
  /** Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action. */
  auto_advance?: Maybe<Scalars['Boolean']>;
  automatic_tax?: Maybe<Stripe_AutomaticTax>;
  /** Indicates the reason why the invoice was created. `subscription_cycle` indicates an invoice created by a subscription advancing into a new period. `subscription_create` indicates an invoice created due to creating a subscription. `subscription_update` indicates an invoice created due to updating a subscription. `subscription` is set for all old invoices to indicate either a change to a subscription or a period advancement. `manual` is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The `upcoming` value is reserved for simulated invoices per the upcoming invoice endpoint. `subscription_threshold` indicates an invoice created due to a billing threshold being reached. */
  billing_reason?: Maybe<Stripe_InvoiceBillingReasonProperty>;
  charge?: Maybe<Stripe_InvoiceChargeProperty>;
  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. */
  collection_method?: Maybe<Stripe_InvoiceCollectionMethodProperty>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** Custom fields displayed on the invoice. */
  custom_fields?: Maybe<Array<Maybe<Stripe_InvoiceSettingCustomField>>>;
  customer?: Maybe<Scalars['String']>;
  customer_address?: Maybe<Stripe_Address>;
  /** The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated. */
  customer_email?: Maybe<Scalars['String']>;
  /** The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated. */
  customer_name?: Maybe<Scalars['String']>;
  /** The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated. */
  customer_phone?: Maybe<Scalars['String']>;
  customer_shipping?: Maybe<Stripe_Shipping>;
  /** The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated. */
  customer_tax_exempt?: Maybe<Stripe_InvoiceCustomerTaxExemptProperty>;
  /** The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated. */
  customer_tax_ids?: Maybe<Array<Maybe<Stripe_InvoicesResourceInvoiceTaxId>>>;
  default_payment_method?: Maybe<Stripe_InvoiceDefaultPaymentMethodProperty>;
  default_source?: Maybe<Stripe_InvoiceDefaultSourceProperty>;
  /** The tax rates applied to this invoice, if any. */
  default_tax_rates?: Maybe<Array<Maybe<Stripe_TaxRate>>>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard. */
  description?: Maybe<Scalars['String']>;
  discount?: Maybe<Stripe_Discount>;
  discounts?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`. */
  due_date?: Maybe<Scalars['Int']>;
  /** Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null. */
  ending_balance?: Maybe<Scalars['Int']>;
  /** Footer displayed on the invoice. */
  footer?: Maybe<Scalars['String']>;
  /** The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null. */
  hosted_invoice_url?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null. */
  invoice_pdf?: Maybe<Scalars['String']>;
  last_finalization_error?: Maybe<Stripe_ApiErrors>;
  /** The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any. */
  lines?: Maybe<Stripe_InvoiceLinesProperty>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`. */
  next_payment_attempt?: Maybe<Scalars['Int']>;
  /** A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified. */
  number?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_InvoiceObjectProperty>;
  on_behalf_of?: Maybe<Stripe_InvoiceOnBehalfOfProperty>;
  /** Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance. */
  paid?: Maybe<Scalars['Boolean']>;
  /** Returns true if the invoice was manually marked paid, returns false if the invoice hasn't been paid yet or was paid on Stripe. */
  paid_out_of_band?: Maybe<Scalars['Boolean']>;
  payment_intent?: Maybe<Stripe_InvoicePaymentIntentProperty>;
  payment_settings?: Maybe<Stripe_InvoicesPaymentSettings>;
  /** End of the usage period during which invoice items were added to this invoice. */
  period_end?: Maybe<Scalars['Int']>;
  /** Start of the usage period during which invoice items were added to this invoice. */
  period_start?: Maybe<Scalars['Int']>;
  /** Total amount of all post-payment credit notes issued for this invoice. */
  post_payment_credit_notes_amount?: Maybe<Scalars['Int']>;
  /** Total amount of all pre-payment credit notes issued for this invoice. */
  pre_payment_credit_notes_amount?: Maybe<Scalars['Int']>;
  quote?: Maybe<Stripe_InvoiceQuoteProperty>;
  /** This is the transaction number that appears on email receipts sent for this invoice. */
  receipt_number?: Maybe<Scalars['String']>;
  /** Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance. */
  starting_balance?: Maybe<Scalars['Int']>;
  /** Extra information about an invoice for the customer's credit card statement. */
  statement_descriptor?: Maybe<Scalars['String']>;
  /** The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview) */
  status?: Maybe<Stripe_InvoiceStatusProperty>;
  status_transitions?: Maybe<Stripe_InvoicesStatusTransitions>;
  subscription?: Maybe<Stripe_InvoiceSubscriptionProperty>;
  /** Only set for upcoming invoices that preview prorations. The time used to calculate prorations. */
  subscription_proration_date?: Maybe<Scalars['Int']>;
  /** Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated */
  subtotal?: Maybe<Scalars['Int']>;
  /** The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice. */
  tax?: Maybe<Scalars['Int']>;
  test_clock?: Maybe<Stripe_InvoiceTestClockProperty>;
  threshold_reason?: Maybe<Stripe_InvoiceThresholdReason>;
  /** Total after discounts and taxes. */
  total?: Maybe<Scalars['Int']>;
  /** The aggregate amounts calculated per discount across all line items. */
  total_discount_amounts?: Maybe<Array<Maybe<Stripe_DiscountsResourceDiscountAmount>>>;
  /** The aggregate amounts calculated per tax rate for all line items. */
  total_tax_amounts?: Maybe<Array<Maybe<Stripe_InvoiceTaxAmount>>>;
  transfer_data?: Maybe<Stripe_InvoiceTransferData>;
  /** Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created. */
  webhooks_delivered_at?: Maybe<Scalars['Int']>;
};

export type Stripe_InvoiceAccountTaxIdsProperty = WrappedString | Stripe_TaxId;

export type Stripe_TaxId = {
  __typename?: 'Stripe_TaxId';
  /** Two-letter ISO code representing the country of the tax ID. */
  country?: Maybe<Scalars['String']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  customer?: Maybe<Stripe_TaxIdCustomerProperty>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_TaxIdObjectProperty>;
  /** Type of the tax ID, one of `ae_trn`, `au_abn`, `au_arn`, `bg_uic`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `es_cif`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `th_vat`, `tw_vat`, `ua_vat`, `us_ein`, or `za_vat`. Note that some legacy tax IDs have type `unknown` */
  type?: Maybe<Stripe_TaxIdTypeProperty>;
  /** Value of the tax ID. */
  value?: Maybe<Scalars['String']>;
  verification?: Maybe<Stripe_TaxIdVerification>;
};

export type Stripe_TaxIdCustomerProperty = WrappedString | Stripe_Customer;

export enum Stripe_TaxIdObjectProperty {
  TaxId = 'tax_id'
}

export enum Stripe_TaxIdTypeProperty {
  AeTrn = 'ae_trn',
  AuAbn = 'au_abn',
  AuArn = 'au_arn',
  BgUic = 'bg_uic',
  BrCnpj = 'br_cnpj',
  BrCpf = 'br_cpf',
  CaBn = 'ca_bn',
  CaGstHst = 'ca_gst_hst',
  CaPstBc = 'ca_pst_bc',
  CaPstMb = 'ca_pst_mb',
  CaPstSk = 'ca_pst_sk',
  CaQst = 'ca_qst',
  ChVat = 'ch_vat',
  ClTin = 'cl_tin',
  EsCif = 'es_cif',
  EuVat = 'eu_vat',
  GbVat = 'gb_vat',
  GeVat = 'ge_vat',
  HkBr = 'hk_br',
  HuTin = 'hu_tin',
  IdNpwp = 'id_npwp',
  IlVat = 'il_vat',
  InGst = 'in_gst',
  IsVat = 'is_vat',
  JpCn = 'jp_cn',
  JpRn = 'jp_rn',
  KrBrn = 'kr_brn',
  LiUid = 'li_uid',
  MxRfc = 'mx_rfc',
  MyFrp = 'my_frp',
  MyItn = 'my_itn',
  MySst = 'my_sst',
  NoVat = 'no_vat',
  NzGst = 'nz_gst',
  RuInn = 'ru_inn',
  RuKpp = 'ru_kpp',
  SaVat = 'sa_vat',
  SgGst = 'sg_gst',
  SgUen = 'sg_uen',
  SiTin = 'si_tin',
  ThVat = 'th_vat',
  TwVat = 'tw_vat',
  UaVat = 'ua_vat',
  Unknown = 'unknown',
  UsEin = 'us_ein',
  ZaVat = 'za_vat'
}

export type Stripe_TaxIdVerification = {
  __typename?: 'Stripe_TaxIdVerification';
  /** Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`. */
  status?: Maybe<Stripe_TaxIdVerificationStatusProperty>;
  /** Verified address. */
  verified_address?: Maybe<Scalars['String']>;
  /** Verified name. */
  verified_name?: Maybe<Scalars['String']>;
};

export enum Stripe_TaxIdVerificationStatusProperty {
  Pending = 'pending',
  Unavailable = 'unavailable',
  Unverified = 'unverified',
  Verified = 'verified'
}

export type Stripe_AutomaticTax = {
  __typename?: 'Stripe_AutomaticTax';
  /** Whether Stripe automatically computes tax on this invoice. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** The status of the most recent automated tax calculation for this invoice. */
  status?: Maybe<Stripe_AutomaticTaxStatusProperty>;
};

export enum Stripe_AutomaticTaxStatusProperty {
  Complete = 'complete',
  Failed = 'failed',
  RequiresLocationInputs = 'requires_location_inputs'
}

export enum Stripe_InvoiceBillingReasonProperty {
  AutomaticPendingInvoiceItemInvoice = 'automatic_pending_invoice_item_invoice',
  Manual = 'manual',
  QuoteAccept = 'quote_accept',
  Subscription = 'subscription',
  SubscriptionCreate = 'subscription_create',
  SubscriptionCycle = 'subscription_cycle',
  SubscriptionThreshold = 'subscription_threshold',
  SubscriptionUpdate = 'subscription_update',
  Upcoming = 'upcoming'
}

export type Stripe_InvoiceChargeProperty = WrappedString | Stripe_Charge;

export enum Stripe_InvoiceCollectionMethodProperty {
  ChargeAutomatically = 'charge_automatically',
  SendInvoice = 'send_invoice'
}

export enum Stripe_InvoiceCustomerTaxExemptProperty {
  Exempt = 'exempt',
  None = 'none',
  Reverse = 'reverse'
}

export type Stripe_InvoicesResourceInvoiceTaxId = {
  __typename?: 'Stripe_InvoicesResourceInvoiceTaxId';
  /** The type of the tax ID, one of `eu_vat`, `br_cnpj`, `br_cpf`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, or `unknown` */
  type?: Maybe<Stripe_InvoicesResourceInvoiceTaxIdTypeProperty>;
  /** The value of the tax ID. */
  value?: Maybe<Scalars['String']>;
};

export enum Stripe_InvoicesResourceInvoiceTaxIdTypeProperty {
  AeTrn = 'ae_trn',
  AuAbn = 'au_abn',
  AuArn = 'au_arn',
  BgUic = 'bg_uic',
  BrCnpj = 'br_cnpj',
  BrCpf = 'br_cpf',
  CaBn = 'ca_bn',
  CaGstHst = 'ca_gst_hst',
  CaPstBc = 'ca_pst_bc',
  CaPstMb = 'ca_pst_mb',
  CaPstSk = 'ca_pst_sk',
  CaQst = 'ca_qst',
  ChVat = 'ch_vat',
  ClTin = 'cl_tin',
  EsCif = 'es_cif',
  EuVat = 'eu_vat',
  GbVat = 'gb_vat',
  GeVat = 'ge_vat',
  HkBr = 'hk_br',
  HuTin = 'hu_tin',
  IdNpwp = 'id_npwp',
  IlVat = 'il_vat',
  InGst = 'in_gst',
  IsVat = 'is_vat',
  JpCn = 'jp_cn',
  JpRn = 'jp_rn',
  KrBrn = 'kr_brn',
  LiUid = 'li_uid',
  MxRfc = 'mx_rfc',
  MyFrp = 'my_frp',
  MyItn = 'my_itn',
  MySst = 'my_sst',
  NoVat = 'no_vat',
  NzGst = 'nz_gst',
  RuInn = 'ru_inn',
  RuKpp = 'ru_kpp',
  SaVat = 'sa_vat',
  SgGst = 'sg_gst',
  SgUen = 'sg_uen',
  SiTin = 'si_tin',
  ThVat = 'th_vat',
  TwVat = 'tw_vat',
  UaVat = 'ua_vat',
  Unknown = 'unknown',
  UsEin = 'us_ein',
  ZaVat = 'za_vat'
}

export type Stripe_InvoiceDefaultPaymentMethodProperty = WrappedString | Stripe_PaymentMethod;

export type Stripe_InvoiceDefaultSourceProperty = WrappedString | Stripe_AlipayAccount | Stripe_BankAccount | Stripe_BitcoinReceiver | Stripe_Card | Stripe_Source;

export type Stripe_TaxRate = {
  __typename?: 'Stripe_TaxRate';
  /** Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set. */
  active?: Maybe<Scalars['Boolean']>;
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: Maybe<Scalars['String']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers. */
  description?: Maybe<Scalars['String']>;
  /** The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page. */
  display_name?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** This specifies if the tax rate is inclusive or exclusive. */
  inclusive?: Maybe<Scalars['Boolean']>;
  /** The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customerâ€™s invoice. */
  jurisdiction?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_TaxRateObjectProperty>;
  /** This represents the tax rate percent out of 100. */
  percentage?: Maybe<Scalars['Float']>;
  /** [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States. */
  state?: Maybe<Scalars['String']>;
  /** The high-level tax type, such as `vat` or `sales_tax`. */
  tax_type?: Maybe<Stripe_TaxRateTaxTypeProperty>;
};

export enum Stripe_TaxRateObjectProperty {
  TaxRate = 'tax_rate'
}

export enum Stripe_TaxRateTaxTypeProperty {
  Gst = 'gst',
  Hst = 'hst',
  Jct = 'jct',
  Pst = 'pst',
  Qst = 'qst',
  Rst = 'rst',
  SalesTax = 'sales_tax',
  Vat = 'vat'
}

/** The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any. */
export type Stripe_InvoiceLinesProperty = {
  __typename?: 'Stripe_InvoiceLinesProperty';
  /** Details about each object. */
  data: Array<Stripe_LineItem>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Stripe_InvoiceLinesObjectProperty;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Stripe_LineItem = {
  __typename?: 'Stripe_LineItem';
  /** The amount, in %s. */
  amount?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** The amount of discount calculated per discount for this line item. */
  discount_amounts?: Maybe<Array<Maybe<Stripe_DiscountsResourceDiscountAmount>>>;
  /** If true, discounts will apply to this line item. Always false for prorations. */
  discountable?: Maybe<Scalars['Boolean']>;
  /** The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. */
  discounts?: Maybe<Array<Maybe<Stripe_LineItemDiscountsProperty>>>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any. */
  invoice_item?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription` this will reflect the metadata of the subscription that caused the line item to be created. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_LineItemObjectProperty>;
  period?: Maybe<Stripe_InvoiceLineItemPeriod>;
  price?: Maybe<Stripe_Price>;
  /** Whether this is a proration. */
  proration?: Maybe<Scalars['Boolean']>;
  proration_details?: Maybe<Stripe_InvoicesLineItemsProrationDetails>;
  /** The quantity of the subscription, if the line item is a subscription or a proration. */
  quantity?: Maybe<Scalars['Int']>;
  /** The subscription that the invoice item pertains to, if any. */
  subscription?: Maybe<Scalars['String']>;
  /** The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription. */
  subscription_item?: Maybe<Scalars['String']>;
  /** The amount of tax calculated per tax rate for this line item */
  tax_amounts?: Maybe<Array<Maybe<Stripe_InvoiceTaxAmount>>>;
  /** The tax rates which apply to the line item. */
  tax_rates?: Maybe<Array<Maybe<Stripe_TaxRate>>>;
  /** A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`. */
  type?: Maybe<Stripe_LineItemTypeProperty>;
};

export type Stripe_DiscountsResourceDiscountAmount = {
  __typename?: 'Stripe_DiscountsResourceDiscountAmount';
  /** The amount, in %s, of the discount. */
  amount?: Maybe<Scalars['Int']>;
  discount?: Maybe<Stripe_DiscountsResourceDiscountAmountDiscountProperty>;
};

export type Stripe_DiscountsResourceDiscountAmountDiscountProperty = WrappedString | Stripe_Discount | Stripe_DeletedDiscount;

export type Stripe_DeletedDiscount = {
  __typename?: 'Stripe_DeletedDiscount';
  /** The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode. */
  checkout_session?: Maybe<Scalars['String']>;
  coupon?: Maybe<Stripe_Coupon>;
  customer?: Maybe<Scalars['String']>;
  /** Always true for a deleted object */
  deleted?: Maybe<Scalars['Boolean']>;
  /** The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array. */
  id?: Maybe<Scalars['String']>;
  /** The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice. */
  invoice?: Maybe<Scalars['String']>;
  /** The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item. */
  invoice_item?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_DeletedDiscountObjectProperty>;
  promotion_code?: Maybe<Stripe_DeletedDiscountPromotionCodeProperty>;
  /** Date that the coupon was applied. */
  start?: Maybe<Scalars['Int']>;
  /** The subscription that this coupon is applied to, if it is applied to a particular subscription. */
  subscription?: Maybe<Scalars['String']>;
};

export enum Stripe_DeletedDiscountObjectProperty {
  Discount = 'discount'
}

export type Stripe_DeletedDiscountPromotionCodeProperty = WrappedString | Stripe_PromotionCode;

export type Stripe_LineItemDiscountsProperty = WrappedString | Stripe_Discount;

export enum Stripe_LineItemObjectProperty {
  LineItem = 'line_item'
}

export type Stripe_InvoiceLineItemPeriod = {
  __typename?: 'Stripe_InvoiceLineItemPeriod';
  /** The end of the period, which must be greater than or equal to the start. */
  end?: Maybe<Scalars['Int']>;
  /** The start of the period. */
  start?: Maybe<Scalars['Int']>;
};

export type Stripe_InvoicesLineItemsProrationDetails = {
  __typename?: 'Stripe_InvoicesLineItemsProrationDetails';
  credited_items?: Maybe<Stripe_InvoicesLineItemsCreditedItems>;
};

export type Stripe_InvoicesLineItemsCreditedItems = {
  __typename?: 'Stripe_InvoicesLineItemsCreditedItems';
  /** Invoice containing the credited invoice line items */
  invoice?: Maybe<Scalars['String']>;
  /** Credited invoice line items */
  invoice_line_items?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type Stripe_InvoiceTaxAmount = {
  __typename?: 'Stripe_InvoiceTaxAmount';
  /** The amount, in %s, of the tax. */
  amount?: Maybe<Scalars['Int']>;
  /** Whether this tax amount is inclusive or exclusive. */
  inclusive?: Maybe<Scalars['Boolean']>;
  tax_rate?: Maybe<Stripe_InvoiceTaxAmountTaxRateProperty>;
};

export type Stripe_InvoiceTaxAmountTaxRateProperty = WrappedString | Stripe_TaxRate;

export enum Stripe_LineItemTypeProperty {
  Invoiceitem = 'invoiceitem',
  Subscription = 'subscription'
}

export enum Stripe_InvoiceLinesObjectProperty {
  List = 'list'
}

export enum Stripe_InvoiceObjectProperty {
  Invoice = 'invoice'
}

export type Stripe_InvoiceOnBehalfOfProperty = WrappedString | Stripe_Account;

export type Stripe_InvoicePaymentIntentProperty = WrappedString | Stripe_PaymentIntent;

export type Stripe_InvoicesPaymentSettings = {
  __typename?: 'Stripe_InvoicesPaymentSettings';
  payment_method_options?: Maybe<Stripe_InvoicesPaymentMethodOptions>;
  /** The list of payment method types (e.g. card) to provide to the invoiceâ€™s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoiceâ€™s default payment method, the subscriptionâ€™s default payment method, the customerâ€™s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice). */
  payment_method_types?: Maybe<Array<Maybe<Stripe_InvoicesPaymentSettingsPaymentMethodTypesProperty>>>;
};

export type Stripe_InvoicesPaymentMethodOptions = {
  __typename?: 'Stripe_InvoicesPaymentMethodOptions';
  acss_debit?: Maybe<Stripe_InvoicePaymentMethodOptionsAcssDebit>;
  bancontact?: Maybe<Stripe_InvoicePaymentMethodOptionsBancontact>;
  card?: Maybe<Stripe_InvoicePaymentMethodOptionsCard>;
  customer_balance?: Maybe<Stripe_InvoicePaymentMethodOptionsCustomerBalance>;
  konbini?: Maybe<Stripe_InvoicePaymentMethodOptionsKonbini>;
  us_bank_account?: Maybe<Stripe_InvoicePaymentMethodOptionsUsBankAccount>;
};

export type Stripe_InvoicePaymentMethodOptionsAcssDebit = {
  __typename?: 'Stripe_InvoicePaymentMethodOptionsAcssDebit';
  mandate_options?: Maybe<Stripe_InvoicePaymentMethodOptionsAcssDebitMandateOptions>;
  /** Bank account verification method. */
  verification_method?: Maybe<Stripe_InvoicePaymentMethodOptionsAcssDebitVerificationMethodProperty>;
};

export type Stripe_InvoicePaymentMethodOptionsAcssDebitMandateOptions = {
  __typename?: 'Stripe_InvoicePaymentMethodOptionsAcssDebitMandateOptions';
  /** Transaction type of the mandate. */
  transaction_type?: Maybe<Stripe_InvoicePaymentMethodOptionsAcssDebitMandateOptionsTransactionTypeProperty>;
};

export enum Stripe_InvoicePaymentMethodOptionsAcssDebitMandateOptionsTransactionTypeProperty {
  Business = 'business',
  Personal = 'personal'
}

export enum Stripe_InvoicePaymentMethodOptionsAcssDebitVerificationMethodProperty {
  Automatic = 'automatic',
  Instant = 'instant',
  Microdeposits = 'microdeposits'
}

export type Stripe_InvoicePaymentMethodOptionsBancontact = {
  __typename?: 'Stripe_InvoicePaymentMethodOptionsBancontact';
  /** Preferred language of the Bancontact authorization page that the customer is redirected to. */
  preferred_language?: Maybe<Stripe_InvoicePaymentMethodOptionsBancontactPreferredLanguageProperty>;
};

export enum Stripe_InvoicePaymentMethodOptionsBancontactPreferredLanguageProperty {
  De = 'de',
  En = 'en',
  Fr = 'fr',
  Nl = 'nl'
}

export type Stripe_InvoicePaymentMethodOptionsCard = {
  __typename?: 'Stripe_InvoicePaymentMethodOptionsCard';
  /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
  request_three_d_secure?: Maybe<Stripe_InvoicePaymentMethodOptionsCardRequestThreeDSecureProperty>;
};

export enum Stripe_InvoicePaymentMethodOptionsCardRequestThreeDSecureProperty {
  Any = 'any',
  Automatic = 'automatic'
}

export type Stripe_InvoicePaymentMethodOptionsCustomerBalance = {
  __typename?: 'Stripe_InvoicePaymentMethodOptionsCustomerBalance';
  bank_transfer?: Maybe<Stripe_InvoicePaymentMethodOptionsCustomerBalanceBankTransfer>;
  /** The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`. */
  funding_type?: Maybe<Stripe_InvoicePaymentMethodOptionsCustomerBalanceFundingTypeProperty>;
};

export type Stripe_InvoicePaymentMethodOptionsCustomerBalanceBankTransfer = {
  __typename?: 'Stripe_InvoicePaymentMethodOptionsCustomerBalanceBankTransfer';
  /** The bank transfer type that can be used for funding. Permitted values include: `us_bank_account`, `eu_bank_account`, `id_bank_account`, `gb_bank_account`, `jp_bank_account`, `mx_bank_account`, `eu_bank_transfer`, `gb_bank_transfer`, `id_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`. */
  type?: Maybe<Scalars['String']>;
};

export enum Stripe_InvoicePaymentMethodOptionsCustomerBalanceFundingTypeProperty {
  BankTransfer = 'bank_transfer'
}

export type Stripe_InvoicePaymentMethodOptionsKonbini = {
  __typename?: 'Stripe_InvoicePaymentMethodOptionsKonbini';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_InvoicePaymentMethodOptionsUsBankAccount = {
  __typename?: 'Stripe_InvoicePaymentMethodOptionsUsBankAccount';
  /** Bank account verification method. */
  verification_method?: Maybe<Stripe_InvoicePaymentMethodOptionsUsBankAccountVerificationMethodProperty>;
};

export enum Stripe_InvoicePaymentMethodOptionsUsBankAccountVerificationMethodProperty {
  Automatic = 'automatic',
  Instant = 'instant',
  Microdeposits = 'microdeposits'
}

export enum Stripe_InvoicesPaymentSettingsPaymentMethodTypesProperty {
  AchCreditTransfer = 'ach_credit_transfer',
  AchDebit = 'ach_debit',
  AcssDebit = 'acss_debit',
  AuBecsDebit = 'au_becs_debit',
  BacsDebit = 'bacs_debit',
  Bancontact = 'bancontact',
  Boleto = 'boleto',
  Card = 'card',
  CustomerBalance = 'customer_balance',
  Fpx = 'fpx',
  Giropay = 'giropay',
  Grabpay = 'grabpay',
  Ideal = 'ideal',
  Konbini = 'konbini',
  Paynow = 'paynow',
  SepaDebit = 'sepa_debit',
  Sofort = 'sofort',
  UsBankAccount = 'us_bank_account',
  WechatPay = 'wechat_pay'
}

export type Stripe_InvoiceQuoteProperty = WrappedString | Stripe_Quote;

export type Stripe_Quote = {
  __typename?: 'Stripe_Quote';
  /** Total before any discounts or taxes are applied. */
  amount_subtotal?: Maybe<Scalars['Int']>;
  /** Total after discounts and taxes are applied. */
  amount_total?: Maybe<Scalars['Int']>;
  /** The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Only applicable if there are no line items with recurring prices on the quote. */
  application_fee_amount?: Maybe<Scalars['Int']>;
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. Only applicable if there are line items with recurring prices on the quote. */
  application_fee_percent?: Maybe<Scalars['Float']>;
  automatic_tax?: Maybe<Stripe_QuotesResourceAutomaticTax>;
  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`. */
  collection_method?: Maybe<Stripe_QuoteCollectionMethodProperty>;
  computed?: Maybe<Stripe_QuotesResourceComputed>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  customer?: Maybe<Scalars['String']>;
  /** The tax rates applied to this quote. */
  default_tax_rates?: Maybe<Array<Maybe<Stripe_QuoteDefaultTaxRatesProperty>>>;
  /** A description that will be displayed on the quote PDF. */
  description?: Maybe<Scalars['String']>;
  /** The discounts applied to this quote. */
  discounts?: Maybe<Array<Maybe<Stripe_QuoteDiscountsProperty>>>;
  /** The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch. */
  expires_at?: Maybe<Scalars['Int']>;
  /** A footer that will be displayed on the quote PDF. */
  footer?: Maybe<Scalars['String']>;
  from_quote?: Maybe<Stripe_QuotesResourceFromQuote>;
  /** A header that will be displayed on the quote PDF. */
  header?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  invoice?: Maybe<Stripe_QuoteInvoiceProperty>;
  invoice_settings?: Maybe<Stripe_InvoiceSettingQuoteSetting>;
  /** A list of items the customer is being quoted for. */
  line_items?: Maybe<Stripe_QuoteLineItemsProperty>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize). */
  number?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_QuoteObjectProperty>;
  on_behalf_of?: Maybe<Stripe_QuoteOnBehalfOfProperty>;
  /** The status of the quote. */
  status?: Maybe<Stripe_QuoteStatusProperty>;
  status_transitions?: Maybe<Stripe_QuotesResourceStatusTransitions>;
  subscription?: Maybe<Stripe_QuoteSubscriptionProperty>;
  subscription_data?: Maybe<Stripe_QuotesResourceSubscriptionData>;
  subscription_schedule?: Maybe<Stripe_QuoteSubscriptionScheduleProperty>;
  test_clock?: Maybe<Stripe_QuoteTestClockProperty>;
  total_details?: Maybe<Stripe_QuotesResourceTotalDetails>;
  transfer_data?: Maybe<Stripe_QuotesResourceTransferData>;
};

export type Stripe_QuotesResourceAutomaticTax = {
  __typename?: 'Stripe_QuotesResourceAutomaticTax';
  /** Automatically calculate taxes */
  enabled?: Maybe<Scalars['Boolean']>;
  /** The status of the most recent automated tax calculation for this quote. */
  status?: Maybe<Stripe_QuotesResourceAutomaticTaxStatusProperty>;
};

export enum Stripe_QuotesResourceAutomaticTaxStatusProperty {
  Complete = 'complete',
  Failed = 'failed',
  RequiresLocationInputs = 'requires_location_inputs'
}

export enum Stripe_QuoteCollectionMethodProperty {
  ChargeAutomatically = 'charge_automatically',
  SendInvoice = 'send_invoice'
}

export type Stripe_QuotesResourceComputed = {
  __typename?: 'Stripe_QuotesResourceComputed';
  recurring?: Maybe<Stripe_QuotesResourceRecurring>;
  upfront?: Maybe<Stripe_QuotesResourceUpfront>;
};

export type Stripe_QuotesResourceRecurring = {
  __typename?: 'Stripe_QuotesResourceRecurring';
  /** Total before any discounts or taxes are applied. */
  amount_subtotal?: Maybe<Scalars['Int']>;
  /** Total after discounts and taxes are applied. */
  amount_total?: Maybe<Scalars['Int']>;
  /** The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`. */
  interval?: Maybe<Stripe_QuotesResourceRecurringIntervalProperty>;
  /** The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. */
  interval_count?: Maybe<Scalars['Int']>;
  total_details?: Maybe<Stripe_QuotesResourceTotalDetails>;
};

export enum Stripe_QuotesResourceRecurringIntervalProperty {
  Day = 'day',
  Month = 'month',
  Week = 'week',
  Year = 'year'
}

export type Stripe_QuotesResourceTotalDetails = {
  __typename?: 'Stripe_QuotesResourceTotalDetails';
  /** This is the sum of all the discounts. */
  amount_discount?: Maybe<Scalars['Int']>;
  /** This is the sum of all the shipping amounts. */
  amount_shipping?: Maybe<Scalars['Int']>;
  /** This is the sum of all the tax amounts. */
  amount_tax?: Maybe<Scalars['Int']>;
  breakdown?: Maybe<Stripe_QuotesResourceTotalDetailsResourceBreakdown>;
};

export type Stripe_QuotesResourceTotalDetailsResourceBreakdown = {
  __typename?: 'Stripe_QuotesResourceTotalDetailsResourceBreakdown';
  /** The aggregated discounts. */
  discounts?: Maybe<Array<Maybe<Stripe_LineItemsDiscountAmount>>>;
  /** The aggregated tax amounts by rate. */
  taxes?: Maybe<Array<Maybe<Stripe_LineItemsTaxAmount>>>;
};

export type Stripe_LineItemsDiscountAmount = {
  __typename?: 'Stripe_LineItemsDiscountAmount';
  /** The amount discounted. */
  amount?: Maybe<Scalars['Int']>;
  discount?: Maybe<Stripe_Discount>;
};

export type Stripe_LineItemsTaxAmount = {
  __typename?: 'Stripe_LineItemsTaxAmount';
  /** Amount of tax applied for this rate. */
  amount?: Maybe<Scalars['Int']>;
  rate?: Maybe<Stripe_TaxRate>;
};

export type Stripe_QuotesResourceUpfront = {
  __typename?: 'Stripe_QuotesResourceUpfront';
  /** Total before any discounts or taxes are applied. */
  amount_subtotal?: Maybe<Scalars['Int']>;
  /** Total after discounts and taxes are applied. */
  amount_total?: Maybe<Scalars['Int']>;
  /** The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice. */
  line_items?: Maybe<Stripe_QuotesResourceUpfrontLineItemsProperty>;
  total_details?: Maybe<Stripe_QuotesResourceTotalDetails>;
};

/** The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice. */
export type Stripe_QuotesResourceUpfrontLineItemsProperty = {
  __typename?: 'Stripe_QuotesResourceUpfrontLineItemsProperty';
  /** Details about each object. */
  data: Array<Stripe_Item>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Stripe_QuotesResourceUpfrontLineItemsObjectProperty;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Stripe_Item = {
  __typename?: 'Stripe_Item';
  /** Total before any discounts or taxes are applied. */
  amount_subtotal?: Maybe<Scalars['Int']>;
  /** Total after discounts and taxes. */
  amount_total?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name. */
  description?: Maybe<Scalars['String']>;
  /** The discounts applied to the line item. */
  discounts?: Maybe<Array<Maybe<Stripe_LineItemsDiscountAmount>>>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_ItemObjectProperty>;
  price?: Maybe<Stripe_Price>;
  /** The quantity of products being purchased. */
  quantity?: Maybe<Scalars['Int']>;
  /** The taxes applied to the line item. */
  taxes?: Maybe<Array<Maybe<Stripe_LineItemsTaxAmount>>>;
};

export enum Stripe_ItemObjectProperty {
  Item = 'item'
}

export enum Stripe_QuotesResourceUpfrontLineItemsObjectProperty {
  List = 'list'
}

export type Stripe_QuoteDefaultTaxRatesProperty = WrappedString | Stripe_TaxRate;

export type Stripe_QuoteDiscountsProperty = WrappedString | Stripe_Discount;

export type Stripe_QuotesResourceFromQuote = {
  __typename?: 'Stripe_QuotesResourceFromQuote';
  /** Whether this quote is a revision of a different quote. */
  is_revision?: Maybe<Scalars['Boolean']>;
  quote?: Maybe<Stripe_QuotesResourceFromQuoteQuoteProperty>;
};

export type Stripe_QuotesResourceFromQuoteQuoteProperty = WrappedString | Stripe_Quote;

export type Stripe_QuoteInvoiceProperty = WrappedString | Stripe_Invoice | Stripe_DeletedInvoice;

export type Stripe_DeletedInvoice = {
  __typename?: 'Stripe_DeletedInvoice';
  /** Always true for a deleted object */
  deleted?: Maybe<Scalars['Boolean']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_DeletedInvoiceObjectProperty>;
};

export enum Stripe_DeletedInvoiceObjectProperty {
  Invoice = 'invoice'
}

export type Stripe_InvoiceSettingQuoteSetting = {
  __typename?: 'Stripe_InvoiceSettingQuoteSetting';
  /** Number of days within which a customer must pay invoices generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`. */
  days_until_due?: Maybe<Scalars['Int']>;
};

/** A list of items the customer is being quoted for. */
export type Stripe_QuoteLineItemsProperty = {
  __typename?: 'Stripe_QuoteLineItemsProperty';
  /** Details about each object. */
  data: Array<Stripe_Item>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Stripe_QuoteLineItemsObjectProperty;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export enum Stripe_QuoteLineItemsObjectProperty {
  List = 'list'
}

export enum Stripe_QuoteObjectProperty {
  Quote = 'quote'
}

export type Stripe_QuoteOnBehalfOfProperty = WrappedString | Stripe_Account;

export enum Stripe_QuoteStatusProperty {
  Accepted = 'accepted',
  Canceled = 'canceled',
  Draft = 'draft',
  Open = 'open'
}

export type Stripe_QuotesResourceStatusTransitions = {
  __typename?: 'Stripe_QuotesResourceStatusTransitions';
  /** The time that the quote was accepted. Measured in seconds since Unix epoch. */
  accepted_at?: Maybe<Scalars['Int']>;
  /** The time that the quote was canceled. Measured in seconds since Unix epoch. */
  canceled_at?: Maybe<Scalars['Int']>;
  /** The time that the quote was finalized. Measured in seconds since Unix epoch. */
  finalized_at?: Maybe<Scalars['Int']>;
};

export type Stripe_QuoteSubscriptionProperty = WrappedString | Stripe_Subscription;

export type Stripe_Subscription = {
  __typename?: 'Stripe_Subscription';
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. */
  application_fee_percent?: Maybe<Scalars['Float']>;
  automatic_tax?: Maybe<Stripe_SubscriptionAutomaticTax>;
  /** Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. */
  billing_cycle_anchor?: Maybe<Scalars['Int']>;
  billing_thresholds?: Maybe<Stripe_SubscriptionBillingThresholds>;
  /** A date in the future at which the subscription will automatically get canceled */
  cancel_at?: Maybe<Scalars['Int']>;
  /** If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period. */
  cancel_at_period_end?: Maybe<Scalars['Boolean']>;
  /** If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state. */
  canceled_at?: Maybe<Scalars['Int']>;
  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. */
  collection_method?: Maybe<Stripe_SubscriptionCollectionMethodProperty>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created. */
  current_period_end?: Maybe<Scalars['Int']>;
  /** Start of the current period that the subscription has been invoiced for. */
  current_period_start?: Maybe<Scalars['Int']>;
  customer?: Maybe<Scalars['String']>;
  /** Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`. */
  days_until_due?: Maybe<Scalars['Int']>;
  default_payment_method?: Maybe<Stripe_SubscriptionDefaultPaymentMethodProperty>;
  default_source?: Maybe<Stripe_SubscriptionDefaultSourceProperty>;
  /** The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. */
  default_tax_rates?: Maybe<Array<Maybe<Stripe_TaxRate>>>;
  discount?: Maybe<Stripe_Discount>;
  /** If the subscription has ended, the date the subscription ended. */
  ended_at?: Maybe<Scalars['Int']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** List of subscription items, each with an attached price. */
  items?: Maybe<Stripe_SubscriptionItemsProperty>;
  latest_invoice?: Maybe<Stripe_SubscriptionLatestInvoiceProperty>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`. */
  next_pending_invoice_item_invoice?: Maybe<Scalars['Int']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_SubscriptionObjectProperty>;
  pause_collection?: Maybe<Stripe_SubscriptionsResourcePauseCollection>;
  payment_settings?: Maybe<Stripe_SubscriptionsResourcePaymentSettings>;
  pending_invoice_item_interval?: Maybe<Stripe_SubscriptionPendingInvoiceItemInterval>;
  pending_setup_intent?: Maybe<Stripe_SubscriptionPendingSetupIntentProperty>;
  pending_update?: Maybe<Stripe_SubscriptionsResourcePendingUpdate>;
  schedule?: Maybe<Stripe_SubscriptionScheduleProperty>;
  /** Date when the subscription was first created. The date might differ from the `created` date due to backdating. */
  start_date?: Maybe<Scalars['Int']>;
  /**
   * Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`.
   *
   * For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated.
   *
   * A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.
   *
   * If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.
   *
   * If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
   */
  status?: Maybe<Stripe_SubscriptionStatusProperty>;
  test_clock?: Maybe<Stripe_SubscriptionTestClockProperty>;
  transfer_data?: Maybe<Stripe_SubscriptionTransferData>;
  /** If the subscription has a trial, the end of that trial. */
  trial_end?: Maybe<Scalars['Int']>;
  /** If the subscription has a trial, the beginning of that trial. */
  trial_start?: Maybe<Scalars['Int']>;
};

export type Stripe_SubscriptionAutomaticTax = {
  __typename?: 'Stripe_SubscriptionAutomaticTax';
  /** Whether Stripe automatically computes tax on this subscription. */
  enabled?: Maybe<Scalars['Boolean']>;
};

export type Stripe_SubscriptionBillingThresholds = {
  __typename?: 'Stripe_SubscriptionBillingThresholds';
  /** Monetary threshold that triggers the subscription to create an invoice */
  amount_gte?: Maybe<Scalars['Int']>;
  /** Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`. */
  reset_billing_cycle_anchor?: Maybe<Scalars['Boolean']>;
};

export enum Stripe_SubscriptionCollectionMethodProperty {
  ChargeAutomatically = 'charge_automatically',
  SendInvoice = 'send_invoice'
}

export type Stripe_SubscriptionDefaultPaymentMethodProperty = WrappedString | Stripe_PaymentMethod;

export type Stripe_SubscriptionDefaultSourceProperty = WrappedString | Stripe_AlipayAccount | Stripe_BankAccount | Stripe_BitcoinReceiver | Stripe_Card | Stripe_Source;

/** List of subscription items, each with an attached price. */
export type Stripe_SubscriptionItemsProperty = {
  __typename?: 'Stripe_SubscriptionItemsProperty';
  /** Details about each object. */
  data: Array<Stripe_SubscriptionItem>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Stripe_SubscriptionItemsObjectProperty;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Stripe_SubscriptionItem = {
  __typename?: 'Stripe_SubscriptionItem';
  billing_thresholds?: Maybe<Stripe_SubscriptionItemBillingThresholds>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_SubscriptionItemObjectProperty>;
  price?: Maybe<Stripe_Price>;
  /** The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed. */
  quantity?: Maybe<Scalars['Int']>;
  /** The `subscription` this `subscription_item` belongs to. */
  subscription?: Maybe<Scalars['String']>;
  /** The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`. */
  tax_rates?: Maybe<Array<Maybe<Stripe_TaxRate>>>;
};

export type Stripe_SubscriptionItemBillingThresholds = {
  __typename?: 'Stripe_SubscriptionItemBillingThresholds';
  /** Usage threshold that triggers the subscription to create an invoice */
  usage_gte?: Maybe<Scalars['Int']>;
};

export enum Stripe_SubscriptionItemObjectProperty {
  SubscriptionItem = 'subscription_item'
}

export enum Stripe_SubscriptionItemsObjectProperty {
  List = 'list'
}

export type Stripe_SubscriptionLatestInvoiceProperty = WrappedString | Stripe_Invoice;

export enum Stripe_SubscriptionObjectProperty {
  Subscription = 'subscription'
}

export type Stripe_SubscriptionsResourcePauseCollection = {
  __typename?: 'Stripe_SubscriptionsResourcePauseCollection';
  /** The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`. */
  behavior?: Maybe<Stripe_SubscriptionsResourcePauseCollectionBehaviorProperty>;
  /** The time after which the subscription will resume collecting payments. */
  resumes_at?: Maybe<Scalars['Int']>;
};

export enum Stripe_SubscriptionsResourcePauseCollectionBehaviorProperty {
  KeepAsDraft = 'keep_as_draft',
  MarkUncollectible = 'mark_uncollectible',
  Void = 'void'
}

export type Stripe_SubscriptionsResourcePaymentSettings = {
  __typename?: 'Stripe_SubscriptionsResourcePaymentSettings';
  payment_method_options?: Maybe<Stripe_SubscriptionsResourcePaymentMethodOptions>;
  /** The list of payment method types to provide to every invoice created by the subscription. If not set, Stripe attempts to automatically determine the types to use by looking at the invoiceâ€™s default payment method, the subscriptionâ€™s default payment method, the customerâ€™s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice). */
  payment_method_types?: Maybe<Array<Maybe<Stripe_SubscriptionsResourcePaymentSettingsPaymentMethodTypesProperty>>>;
};

export type Stripe_SubscriptionsResourcePaymentMethodOptions = {
  __typename?: 'Stripe_SubscriptionsResourcePaymentMethodOptions';
  acss_debit?: Maybe<Stripe_InvoicePaymentMethodOptionsAcssDebit>;
  bancontact?: Maybe<Stripe_InvoicePaymentMethodOptionsBancontact>;
  card?: Maybe<Stripe_SubscriptionPaymentMethodOptionsCard>;
  customer_balance?: Maybe<Stripe_InvoicePaymentMethodOptionsCustomerBalance>;
  konbini?: Maybe<Stripe_InvoicePaymentMethodOptionsKonbini>;
  us_bank_account?: Maybe<Stripe_InvoicePaymentMethodOptionsUsBankAccount>;
};

export type Stripe_SubscriptionPaymentMethodOptionsCard = {
  __typename?: 'Stripe_SubscriptionPaymentMethodOptionsCard';
  mandate_options?: Maybe<Stripe_InvoiceMandateOptionsCard>;
  /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
  request_three_d_secure?: Maybe<Stripe_SubscriptionPaymentMethodOptionsCardRequestThreeDSecureProperty>;
};

export type Stripe_InvoiceMandateOptionsCard = {
  __typename?: 'Stripe_InvoiceMandateOptionsCard';
  /** Amount to be charged for future payments. */
  amount?: Maybe<Scalars['Int']>;
  /** One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param. */
  amount_type?: Maybe<Stripe_InvoiceMandateOptionsCardAmountTypeProperty>;
  /** A description of the mandate or subscription that is meant to be displayed to the customer. */
  description?: Maybe<Scalars['String']>;
};

export enum Stripe_InvoiceMandateOptionsCardAmountTypeProperty {
  Fixed = 'fixed',
  Maximum = 'maximum'
}

export enum Stripe_SubscriptionPaymentMethodOptionsCardRequestThreeDSecureProperty {
  Any = 'any',
  Automatic = 'automatic'
}

export enum Stripe_SubscriptionsResourcePaymentSettingsPaymentMethodTypesProperty {
  AchCreditTransfer = 'ach_credit_transfer',
  AchDebit = 'ach_debit',
  AcssDebit = 'acss_debit',
  AuBecsDebit = 'au_becs_debit',
  BacsDebit = 'bacs_debit',
  Bancontact = 'bancontact',
  Boleto = 'boleto',
  Card = 'card',
  CustomerBalance = 'customer_balance',
  Fpx = 'fpx',
  Giropay = 'giropay',
  Grabpay = 'grabpay',
  Ideal = 'ideal',
  Konbini = 'konbini',
  Paynow = 'paynow',
  SepaDebit = 'sepa_debit',
  Sofort = 'sofort',
  UsBankAccount = 'us_bank_account',
  WechatPay = 'wechat_pay'
}

export type Stripe_SubscriptionPendingInvoiceItemInterval = {
  __typename?: 'Stripe_SubscriptionPendingInvoiceItemInterval';
  /** Specifies invoicing frequency. Either `day`, `week`, `month` or `year`. */
  interval?: Maybe<Stripe_SubscriptionPendingInvoiceItemIntervalIntervalProperty>;
  /** The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). */
  interval_count?: Maybe<Scalars['Int']>;
};

export enum Stripe_SubscriptionPendingInvoiceItemIntervalIntervalProperty {
  Day = 'day',
  Month = 'month',
  Week = 'week',
  Year = 'year'
}

export type Stripe_SubscriptionPendingSetupIntentProperty = WrappedString | Stripe_SetupIntent;

export type Stripe_SetupIntent = {
  __typename?: 'Stripe_SetupIntent';
  application?: Maybe<Stripe_SetupIntentApplicationProperty>;
  /** Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`. */
  cancellation_reason?: Maybe<Stripe_SetupIntentCancellationReasonProperty>;
  /**
   * The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.
   *
   * The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
   */
  client_secret?: Maybe<Scalars['String']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  customer?: Maybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  last_setup_error?: Maybe<Stripe_ApiErrors>;
  latest_attempt?: Maybe<Stripe_SetupIntentLatestAttemptProperty>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  mandate?: Maybe<Stripe_SetupIntentMandateProperty>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  next_action?: Maybe<Stripe_SetupIntentNextAction>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_SetupIntentObjectProperty>;
  on_behalf_of?: Maybe<Stripe_SetupIntentOnBehalfOfProperty>;
  payment_method?: Maybe<Stripe_SetupIntentPaymentMethodProperty>;
  payment_method_options?: Maybe<Stripe_SetupIntentPaymentMethodOptions>;
  /** The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. */
  payment_method_types?: Maybe<Array<Maybe<Scalars['String']>>>;
  single_use_mandate?: Maybe<Stripe_SetupIntentSingleUseMandateProperty>;
  /** [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`. */
  status?: Maybe<Stripe_SetupIntentStatusProperty>;
  /**
   * Indicates how the payment method is intended to be used in the future.
   *
   * Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.
   */
  usage?: Maybe<Scalars['String']>;
};

export type Stripe_SetupIntentApplicationProperty = WrappedString | Stripe_Application;

export enum Stripe_SetupIntentCancellationReasonProperty {
  Abandoned = 'abandoned',
  Duplicate = 'duplicate',
  RequestedByCustomer = 'requested_by_customer'
}

export type Stripe_SetupIntentLatestAttemptProperty = WrappedString | Stripe_SetupAttempt;

export type Stripe_SetupIntentMandateProperty = WrappedString | Stripe_Mandate;

export type Stripe_SetupIntentNextAction = {
  __typename?: 'Stripe_SetupIntentNextAction';
  redirect_to_url?: Maybe<Stripe_SetupIntentNextActionRedirectToUrl>;
  /** Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`. */
  type?: Maybe<Scalars['String']>;
  /** When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js. */
  use_stripe_sdk?: Maybe<Scalars['JSONObject']>;
  verify_with_microdeposits?: Maybe<Stripe_SetupIntentNextActionVerifyWithMicrodeposits>;
};

export type Stripe_SetupIntentNextActionRedirectToUrl = {
  __typename?: 'Stripe_SetupIntentNextActionRedirectToUrl';
  /** If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
  return_url?: Maybe<Scalars['String']>;
  /** The URL you must redirect your customer to in order to authenticate. */
  url?: Maybe<Scalars['String']>;
};

export type Stripe_SetupIntentNextActionVerifyWithMicrodeposits = {
  __typename?: 'Stripe_SetupIntentNextActionVerifyWithMicrodeposits';
  /** The timestamp when the microdeposits are expected to land. */
  arrival_date?: Maybe<Scalars['Int']>;
  /** The URL for the hosted verification page, which allows customers to verify their bank account. */
  hosted_verification_url?: Maybe<Scalars['String']>;
  /** The type of the microdeposit sent to the customer. Used to distinguish between different verification methods. */
  microdeposit_type?: Maybe<Stripe_SetupIntentNextActionVerifyWithMicrodepositsMicrodepositTypeProperty>;
};

export enum Stripe_SetupIntentNextActionVerifyWithMicrodepositsMicrodepositTypeProperty {
  Amounts = 'amounts',
  DescriptorCode = 'descriptor_code'
}

export enum Stripe_SetupIntentObjectProperty {
  SetupIntent = 'setup_intent'
}

export type Stripe_SetupIntentOnBehalfOfProperty = WrappedString | Stripe_Account;

export type Stripe_SetupIntentPaymentMethodProperty = WrappedString | Stripe_PaymentMethod;

export type Stripe_SetupIntentPaymentMethodOptions = {
  __typename?: 'Stripe_SetupIntentPaymentMethodOptions';
  acss_debit?: Maybe<Stripe_SetupIntentPaymentMethodOptionsAcssDebitProperty>;
  card?: Maybe<Stripe_SetupIntentPaymentMethodOptionsCard>;
  sepa_debit?: Maybe<Stripe_SetupIntentPaymentMethodOptionsSepaDebitProperty>;
  us_bank_account?: Maybe<Stripe_SetupIntentPaymentMethodOptionsUsBankAccountProperty>;
};

export type Stripe_SetupIntentPaymentMethodOptionsAcssDebitProperty = Stripe_SetupIntentPaymentMethodOptionsAcssDebit | Stripe_SetupIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_SetupIntentPaymentMethodOptionsAcssDebit = {
  __typename?: 'Stripe_SetupIntentPaymentMethodOptionsAcssDebit';
  /** Currency supported by the bank account */
  currency?: Maybe<Stripe_SetupIntentPaymentMethodOptionsAcssDebitCurrencyProperty>;
  mandate_options?: Maybe<Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit>;
  /** Bank account verification method. */
  verification_method?: Maybe<Stripe_SetupIntentPaymentMethodOptionsAcssDebitVerificationMethodProperty>;
};

export enum Stripe_SetupIntentPaymentMethodOptionsAcssDebitCurrencyProperty {
  Cad = 'cad',
  Usd = 'usd'
}

export type Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit = {
  __typename?: 'Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit';
  /** A URL for custom mandate text */
  custom_mandate_url?: Maybe<Scalars['String']>;
  /** List of Stripe products where this mandate can be selected automatically. */
  default_for?: Maybe<Array<Maybe<Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitDefaultForProperty>>>;
  /** Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
  interval_description?: Maybe<Scalars['String']>;
  /** Payment schedule for the mandate. */
  payment_schedule?: Maybe<Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentScheduleProperty>;
  /** Transaction type of the mandate. */
  transaction_type?: Maybe<Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionTypeProperty>;
};

export enum Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitDefaultForProperty {
  Invoice = 'invoice',
  Subscription = 'subscription'
}

export enum Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentScheduleProperty {
  Combined = 'combined',
  Interval = 'interval',
  Sporadic = 'sporadic'
}

export enum Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionTypeProperty {
  Business = 'business',
  Personal = 'personal'
}

export enum Stripe_SetupIntentPaymentMethodOptionsAcssDebitVerificationMethodProperty {
  Automatic = 'automatic',
  Instant = 'instant',
  Microdeposits = 'microdeposits'
}

export type Stripe_SetupIntentTypeSpecificPaymentMethodOptionsClient = {
  __typename?: 'Stripe_SetupIntentTypeSpecificPaymentMethodOptionsClient';
  /** Bank account verification method. */
  verification_method?: Maybe<Stripe_SetupIntentTypeSpecificPaymentMethodOptionsClientVerificationMethodProperty>;
};

export enum Stripe_SetupIntentTypeSpecificPaymentMethodOptionsClientVerificationMethodProperty {
  Automatic = 'automatic',
  Instant = 'instant',
  Microdeposits = 'microdeposits'
}

export type Stripe_SetupIntentPaymentMethodOptionsCard = {
  __typename?: 'Stripe_SetupIntentPaymentMethodOptionsCard';
  mandate_options?: Maybe<Stripe_SetupIntentPaymentMethodOptionsCardMandateOptions>;
  /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
  request_three_d_secure?: Maybe<Stripe_SetupIntentPaymentMethodOptionsCardRequestThreeDSecureProperty>;
};

export type Stripe_SetupIntentPaymentMethodOptionsCardMandateOptions = {
  __typename?: 'Stripe_SetupIntentPaymentMethodOptionsCardMandateOptions';
  /** Amount to be charged for future payments. */
  amount?: Maybe<Scalars['Int']>;
  /** One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param. */
  amount_type?: Maybe<Stripe_SetupIntentPaymentMethodOptionsCardMandateOptionsAmountTypeProperty>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** A description of the mandate or subscription that is meant to be displayed to the customer. */
  description?: Maybe<Scalars['String']>;
  /** End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date. */
  end_date?: Maybe<Scalars['Int']>;
  /** Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`. */
  interval?: Maybe<Stripe_SetupIntentPaymentMethodOptionsCardMandateOptionsIntervalProperty>;
  /** The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`. */
  interval_count?: Maybe<Scalars['Int']>;
  /** Unique identifier for the mandate or subscription. */
  reference?: Maybe<Scalars['String']>;
  /** Start date of the mandate or subscription. Start date should not be lesser than yesterday. */
  start_date?: Maybe<Scalars['Int']>;
  /** Specifies the type of mandates supported. Possible values are `india`. */
  supported_types?: Maybe<Array<Maybe<Stripe_SetupIntentPaymentMethodOptionsCardMandateOptionsSupportedTypesProperty>>>;
};

export enum Stripe_SetupIntentPaymentMethodOptionsCardMandateOptionsAmountTypeProperty {
  Fixed = 'fixed',
  Maximum = 'maximum'
}

export enum Stripe_SetupIntentPaymentMethodOptionsCardMandateOptionsIntervalProperty {
  Day = 'day',
  Month = 'month',
  Sporadic = 'sporadic',
  Week = 'week',
  Year = 'year'
}

export enum Stripe_SetupIntentPaymentMethodOptionsCardMandateOptionsSupportedTypesProperty {
  India = 'india'
}

export enum Stripe_SetupIntentPaymentMethodOptionsCardRequestThreeDSecureProperty {
  Any = 'any',
  Automatic = 'automatic',
  ChallengeOnly = 'challenge_only'
}

export type Stripe_SetupIntentPaymentMethodOptionsSepaDebitProperty = Stripe_SetupIntentPaymentMethodOptionsSepaDebit | Stripe_SetupIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_SetupIntentPaymentMethodOptionsSepaDebit = {
  __typename?: 'Stripe_SetupIntentPaymentMethodOptionsSepaDebit';
  mandate_options?: Maybe<Stripe_SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit>;
};

export type Stripe_SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit = {
  __typename?: 'Stripe_SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_SetupIntentPaymentMethodOptionsUsBankAccountProperty = Stripe_SetupIntentPaymentMethodOptionsUsBankAccount | Stripe_SetupIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_SetupIntentPaymentMethodOptionsUsBankAccount = {
  __typename?: 'Stripe_SetupIntentPaymentMethodOptionsUsBankAccount';
  /** Bank account verification method. */
  verification_method?: Maybe<Stripe_SetupIntentPaymentMethodOptionsUsBankAccountVerificationMethodProperty>;
};

export enum Stripe_SetupIntentPaymentMethodOptionsUsBankAccountVerificationMethodProperty {
  Automatic = 'automatic',
  Instant = 'instant',
  Microdeposits = 'microdeposits'
}

export type Stripe_SetupIntentSingleUseMandateProperty = WrappedString | Stripe_Mandate;

export enum Stripe_SetupIntentStatusProperty {
  Canceled = 'canceled',
  Processing = 'processing',
  RequiresAction = 'requires_action',
  RequiresConfirmation = 'requires_confirmation',
  RequiresPaymentMethod = 'requires_payment_method',
  Succeeded = 'succeeded'
}

export type Stripe_SubscriptionsResourcePendingUpdate = {
  __typename?: 'Stripe_SubscriptionsResourcePendingUpdate';
  /** If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. */
  billing_cycle_anchor?: Maybe<Scalars['Int']>;
  /** The point after which the changes reflected by this update will be discarded and no longer applied. */
  expires_at?: Maybe<Scalars['Int']>;
  /** List of subscription items, each with an attached plan, that will be set if the update is applied. */
  subscription_items?: Maybe<Array<Maybe<Stripe_SubscriptionItem>>>;
  /** Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied. */
  trial_end?: Maybe<Scalars['Int']>;
  /** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
  trial_from_plan?: Maybe<Scalars['Boolean']>;
};

export type Stripe_SubscriptionScheduleProperty = WrappedString | Stripe_SubscriptionSchedule;

export type Stripe_SubscriptionSchedule = {
  __typename?: 'Stripe_SubscriptionSchedule';
  /** Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch. */
  canceled_at?: Maybe<Scalars['Int']>;
  /** Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch. */
  completed_at?: Maybe<Scalars['Int']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  current_phase?: Maybe<Stripe_SubscriptionScheduleCurrentPhase>;
  customer?: Maybe<Stripe_SubscriptionScheduleCustomerProperty>;
  default_settings?: Maybe<Stripe_SubscriptionSchedulesResourceDefaultSettings>;
  /** Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` and `cancel`. */
  end_behavior?: Maybe<Stripe_SubscriptionScheduleEndBehaviorProperty>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_SubscriptionScheduleObjectProperty>;
  /** Configuration for the subscription schedule's phases. */
  phases?: Maybe<Array<Maybe<Stripe_SubscriptionSchedulePhaseConfiguration>>>;
  /** Time at which the subscription schedule was released. Measured in seconds since the Unix epoch. */
  released_at?: Maybe<Scalars['Int']>;
  /** ID of the subscription once managed by the subscription schedule (if it is released). */
  released_subscription?: Maybe<Scalars['String']>;
  /** The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules). */
  status?: Maybe<Stripe_SubscriptionScheduleStatusProperty>;
  subscription?: Maybe<Stripe_SubscriptionScheduleSubscriptionProperty>;
  test_clock?: Maybe<Stripe_SubscriptionScheduleTestClockProperty>;
};

export type Stripe_SubscriptionScheduleCurrentPhase = {
  __typename?: 'Stripe_SubscriptionScheduleCurrentPhase';
  /** The end of this phase of the subscription schedule. */
  end_date?: Maybe<Scalars['Int']>;
  /** The start of this phase of the subscription schedule. */
  start_date?: Maybe<Scalars['Int']>;
};

export type Stripe_SubscriptionScheduleCustomerProperty = WrappedString | Stripe_Customer | Stripe_DeletedCustomer;

export type Stripe_SubscriptionSchedulesResourceDefaultSettings = {
  __typename?: 'Stripe_SubscriptionSchedulesResourceDefaultSettings';
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule. */
  application_fee_percent?: Maybe<Scalars['Float']>;
  automatic_tax?: Maybe<Stripe_SubscriptionSchedulesResourceDefaultSettingsAutomaticTax>;
  /** Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle). */
  billing_cycle_anchor?: Maybe<Stripe_SubscriptionSchedulesResourceDefaultSettingsBillingCycleAnchorProperty>;
  billing_thresholds?: Maybe<Stripe_SubscriptionBillingThresholds>;
  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. */
  collection_method?: Maybe<Stripe_SubscriptionSchedulesResourceDefaultSettingsCollectionMethodProperty>;
  default_payment_method?: Maybe<Stripe_SubscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethodProperty>;
  invoice_settings?: Maybe<Stripe_InvoiceSettingSubscriptionScheduleSetting>;
  transfer_data?: Maybe<Stripe_SubscriptionTransferData>;
};

export type Stripe_SubscriptionSchedulesResourceDefaultSettingsAutomaticTax = {
  __typename?: 'Stripe_SubscriptionSchedulesResourceDefaultSettingsAutomaticTax';
  /** Whether Stripe automatically computes tax on invoices created during this phase. */
  enabled?: Maybe<Scalars['Boolean']>;
};

export enum Stripe_SubscriptionSchedulesResourceDefaultSettingsBillingCycleAnchorProperty {
  Automatic = 'automatic',
  PhaseStart = 'phase_start'
}

export enum Stripe_SubscriptionSchedulesResourceDefaultSettingsCollectionMethodProperty {
  ChargeAutomatically = 'charge_automatically',
  SendInvoice = 'send_invoice'
}

export type Stripe_SubscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethodProperty = WrappedString | Stripe_PaymentMethod;

export type Stripe_InvoiceSettingSubscriptionScheduleSetting = {
  __typename?: 'Stripe_InvoiceSettingSubscriptionScheduleSetting';
  /** Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`. */
  days_until_due?: Maybe<Scalars['Int']>;
};

export type Stripe_SubscriptionTransferData = {
  __typename?: 'Stripe_SubscriptionTransferData';
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount is transferred to the destination. */
  amount_percent?: Maybe<Scalars['Float']>;
  destination?: Maybe<Stripe_SubscriptionTransferDataDestinationProperty>;
};

export type Stripe_SubscriptionTransferDataDestinationProperty = WrappedString | Stripe_Account;

export enum Stripe_SubscriptionScheduleEndBehaviorProperty {
  Cancel = 'cancel',
  None = 'none',
  Release = 'release',
  Renew = 'renew'
}

export enum Stripe_SubscriptionScheduleObjectProperty {
  SubscriptionSchedule = 'subscription_schedule'
}

export type Stripe_SubscriptionSchedulePhaseConfiguration = {
  __typename?: 'Stripe_SubscriptionSchedulePhaseConfiguration';
  /** A list of prices and quantities that will generate invoice items appended to the first invoice for this phase. */
  add_invoice_items?: Maybe<Array<Maybe<Stripe_SubscriptionScheduleAddInvoiceItem>>>;
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule. */
  application_fee_percent?: Maybe<Scalars['Float']>;
  automatic_tax?: Maybe<Stripe_SchedulesPhaseAutomaticTax>;
  /** Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle). */
  billing_cycle_anchor?: Maybe<Stripe_SubscriptionSchedulePhaseConfigurationBillingCycleAnchorProperty>;
  billing_thresholds?: Maybe<Stripe_SubscriptionBillingThresholds>;
  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. */
  collection_method?: Maybe<Stripe_SubscriptionSchedulePhaseConfigurationCollectionMethodProperty>;
  coupon?: Maybe<Stripe_SubscriptionSchedulePhaseConfigurationCouponProperty>;
  default_payment_method?: Maybe<Stripe_SubscriptionSchedulePhaseConfigurationDefaultPaymentMethodProperty>;
  /** The default tax rates to apply to the subscription during this phase of the subscription schedule. */
  default_tax_rates?: Maybe<Array<Maybe<Stripe_TaxRate>>>;
  /** The end of this phase of the subscription schedule. */
  end_date?: Maybe<Scalars['Int']>;
  invoice_settings?: Maybe<Stripe_InvoiceSettingSubscriptionScheduleSetting>;
  /** Subscription items to configure the subscription to during this phase of the subscription schedule. */
  items?: Maybe<Array<Maybe<Stripe_SubscriptionScheduleConfigurationItem>>>;
  /** If the subscription schedule will prorate when transitioning to this phase. Possible values are `create_prorations` and `none`. */
  proration_behavior?: Maybe<Stripe_SubscriptionSchedulePhaseConfigurationProrationBehaviorProperty>;
  /** The start of this phase of the subscription schedule. */
  start_date?: Maybe<Scalars['Int']>;
  transfer_data?: Maybe<Stripe_SubscriptionTransferData>;
  /** When the trial ends within the phase. */
  trial_end?: Maybe<Scalars['Int']>;
};

export type Stripe_SubscriptionScheduleAddInvoiceItem = {
  __typename?: 'Stripe_SubscriptionScheduleAddInvoiceItem';
  price?: Maybe<Stripe_SubscriptionScheduleAddInvoiceItemPriceProperty>;
  /** The quantity of the invoice item. */
  quantity?: Maybe<Scalars['Int']>;
  /** The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item. */
  tax_rates?: Maybe<Array<Maybe<Stripe_TaxRate>>>;
};

export type Stripe_SubscriptionScheduleAddInvoiceItemPriceProperty = WrappedString | Stripe_Price | Stripe_DeletedPrice;

export type Stripe_DeletedPrice = {
  __typename?: 'Stripe_DeletedPrice';
  /** Always true for a deleted object */
  deleted?: Maybe<Scalars['Boolean']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_DeletedPriceObjectProperty>;
};

export enum Stripe_DeletedPriceObjectProperty {
  Price = 'price'
}

export type Stripe_SchedulesPhaseAutomaticTax = {
  __typename?: 'Stripe_SchedulesPhaseAutomaticTax';
  /** Whether Stripe automatically computes tax on invoices created during this phase. */
  enabled?: Maybe<Scalars['Boolean']>;
};

export enum Stripe_SubscriptionSchedulePhaseConfigurationBillingCycleAnchorProperty {
  Automatic = 'automatic',
  PhaseStart = 'phase_start'
}

export enum Stripe_SubscriptionSchedulePhaseConfigurationCollectionMethodProperty {
  ChargeAutomatically = 'charge_automatically',
  SendInvoice = 'send_invoice'
}

export type Stripe_SubscriptionSchedulePhaseConfigurationCouponProperty = WrappedString | Stripe_Coupon | Stripe_DeletedCoupon;

export type Stripe_DeletedCoupon = {
  __typename?: 'Stripe_DeletedCoupon';
  /** Always true for a deleted object */
  deleted?: Maybe<Scalars['Boolean']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_DeletedCouponObjectProperty>;
};

export enum Stripe_DeletedCouponObjectProperty {
  Coupon = 'coupon'
}

export type Stripe_SubscriptionSchedulePhaseConfigurationDefaultPaymentMethodProperty = WrappedString | Stripe_PaymentMethod;

export type Stripe_SubscriptionScheduleConfigurationItem = {
  __typename?: 'Stripe_SubscriptionScheduleConfigurationItem';
  billing_thresholds?: Maybe<Stripe_SubscriptionItemBillingThresholds>;
  price?: Maybe<Stripe_SubscriptionScheduleConfigurationItemPriceProperty>;
  /** Quantity of the plan to which the customer should be subscribed. */
  quantity?: Maybe<Scalars['Int']>;
  /** The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`. */
  tax_rates?: Maybe<Array<Maybe<Stripe_TaxRate>>>;
};

export type Stripe_SubscriptionScheduleConfigurationItemPriceProperty = WrappedString | Stripe_Price | Stripe_DeletedPrice;

export enum Stripe_SubscriptionSchedulePhaseConfigurationProrationBehaviorProperty {
  AlwaysInvoice = 'always_invoice',
  CreateProrations = 'create_prorations',
  None = 'none'
}

export enum Stripe_SubscriptionScheduleStatusProperty {
  Active = 'active',
  Canceled = 'canceled',
  Completed = 'completed',
  NotStarted = 'not_started',
  Released = 'released'
}

export type Stripe_SubscriptionScheduleSubscriptionProperty = WrappedString | Stripe_Subscription;

export type Stripe_SubscriptionScheduleTestClockProperty = WrappedString | Stripe_TestHelpersTestClock;

export type Stripe_TestHelpersTestClock = {
  __typename?: 'Stripe_TestHelpersTestClock';
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Time at which this clock is scheduled to auto delete. */
  deletes_after?: Maybe<Scalars['Int']>;
  /** Time at which all objects belonging to this clock are frozen. */
  frozen_time?: Maybe<Scalars['Int']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** The custom name supplied at creation. */
  name?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_TestHelpersTestClockObjectProperty>;
  /** The status of the Test Clock. */
  status?: Maybe<Stripe_TestHelpersTestClockStatusProperty>;
};

export enum Stripe_TestHelpersTestClockObjectProperty {
  TestHelpersDoTtestClock = 'test_helpersDOTtest_clock'
}

export enum Stripe_TestHelpersTestClockStatusProperty {
  Advancing = 'advancing',
  InternalFailure = 'internal_failure',
  Ready = 'ready'
}

export enum Stripe_SubscriptionStatusProperty {
  Active = 'active',
  Canceled = 'canceled',
  Incomplete = 'incomplete',
  IncompleteExpired = 'incomplete_expired',
  PastDue = 'past_due',
  Trialing = 'trialing',
  Unpaid = 'unpaid'
}

export type Stripe_SubscriptionTestClockProperty = WrappedString | Stripe_TestHelpersTestClock;

export type Stripe_QuotesResourceSubscriptionData = {
  __typename?: 'Stripe_QuotesResourceSubscriptionData';
  /** When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. This date is ignored if it is in the past when the quote is accepted. Measured in seconds since the Unix epoch. */
  effective_date?: Maybe<Scalars['Int']>;
  /** Integer representing the number of trial period days before the customer is charged for the first time. */
  trial_period_days?: Maybe<Scalars['Int']>;
};

export type Stripe_QuoteSubscriptionScheduleProperty = WrappedString | Stripe_SubscriptionSchedule;

export type Stripe_QuoteTestClockProperty = WrappedString | Stripe_TestHelpersTestClock;

export type Stripe_QuotesResourceTransferData = {
  __typename?: 'Stripe_QuotesResourceTransferData';
  /** The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination. */
  amount?: Maybe<Scalars['Int']>;
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount will be transferred to the destination. */
  amount_percent?: Maybe<Scalars['Float']>;
  destination?: Maybe<Stripe_QuotesResourceTransferDataDestinationProperty>;
};

export type Stripe_QuotesResourceTransferDataDestinationProperty = WrappedString | Stripe_Account;

export enum Stripe_InvoiceStatusProperty {
  Deleted = 'deleted',
  Draft = 'draft',
  Open = 'open',
  Paid = 'paid',
  Uncollectible = 'uncollectible',
  Void = 'void'
}

export type Stripe_InvoicesStatusTransitions = {
  __typename?: 'Stripe_InvoicesStatusTransitions';
  /** The time that the invoice draft was finalized. */
  finalized_at?: Maybe<Scalars['Int']>;
  /** The time that the invoice was marked uncollectible. */
  marked_uncollectible_at?: Maybe<Scalars['Int']>;
  /** The time that the invoice was paid. */
  paid_at?: Maybe<Scalars['Int']>;
  /** The time that the invoice was voided. */
  voided_at?: Maybe<Scalars['Int']>;
};

export type Stripe_InvoiceSubscriptionProperty = WrappedString | Stripe_Subscription;

export type Stripe_InvoiceTestClockProperty = WrappedString | Stripe_TestHelpersTestClock;

export type Stripe_InvoiceThresholdReason = {
  __typename?: 'Stripe_InvoiceThresholdReason';
  /** The total invoice amount threshold boundary if it triggered the threshold invoice. */
  amount_gte?: Maybe<Scalars['Int']>;
  /** Indicates which line items triggered a threshold invoice. */
  item_reasons?: Maybe<Array<Maybe<Stripe_InvoiceItemThresholdReason>>>;
};

export type Stripe_InvoiceItemThresholdReason = {
  __typename?: 'Stripe_InvoiceItemThresholdReason';
  /** The IDs of the line items that triggered the threshold invoice. */
  line_item_ids?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The quantity threshold boundary that applied to the given line item. */
  usage_gte?: Maybe<Scalars['Int']>;
};

export type Stripe_InvoiceTransferData = {
  __typename?: 'Stripe_InvoiceTransferData';
  /** The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination. */
  amount?: Maybe<Scalars['Int']>;
  destination?: Maybe<Stripe_InvoiceTransferDataDestinationProperty>;
};

export type Stripe_InvoiceTransferDataDestinationProperty = WrappedString | Stripe_Account;

export enum Stripe_ChargeObjectProperty {
  Charge = 'charge'
}

export type Stripe_ChargeOnBehalfOfProperty = WrappedString | Stripe_Account;

export type Stripe_ChargeOrderProperty = WrappedString | Stripe_Order;

export type Stripe_Order = {
  __typename?: 'Stripe_Order';
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order. */
  amount?: Maybe<Scalars['Int']>;
  /** The total amount that was returned to the customer. */
  amount_returned?: Maybe<Scalars['Int']>;
  /** ID of the Connect Application that created the order. */
  application?: Maybe<Scalars['String']>;
  /** A fee in cents that will be applied to the order and transferred to the application ownerâ€™s Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees documentation. */
  application_fee?: Maybe<Scalars['Int']>;
  charge?: Maybe<Stripe_OrderChargeProperty>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  customer?: Maybe<Scalars['String']>;
  /** The email address of the customer placing the order. */
  email?: Maybe<Scalars['String']>;
  /** External coupon code to load for this order. */
  external_coupon_code?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** List of items constituting the order. An order can have up to 25 items. */
  items?: Maybe<Array<Maybe<Stripe_OrderItem>>>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_OrderObjectProperty>;
  /** A list of returns that have taken place for this order. */
  returns?: Maybe<Stripe_OrderReturnsProperty>;
  /** The shipping method that is currently selected for this order, if any. If present, it is equal to one of the `id`s of shipping methods in the `shipping_methods` array. At order creation time, if there are multiple shipping methods, Stripe will automatically selected the first method. */
  selected_shipping_method?: Maybe<Scalars['String']>;
  shipping?: Maybe<Stripe_Shipping>;
  /** A list of supported shipping methods for this order. The desired shipping method can be specified either by updating the order, or when paying it. */
  shipping_methods?: Maybe<Array<Maybe<Stripe_ShippingMethod>>>;
  /** Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More details in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses). */
  status?: Maybe<Scalars['String']>;
  status_transitions?: Maybe<Stripe_StatusTransitions>;
  /** Time at which the object was last updated. Measured in seconds since the Unix epoch. */
  updated?: Maybe<Scalars['Int']>;
  /** The user's order ID if it is different from the Stripe order ID. */
  upstream_id?: Maybe<Scalars['String']>;
};

export type Stripe_OrderChargeProperty = WrappedString | Stripe_Charge;

export type Stripe_OrderItem = {
  __typename?: 'Stripe_OrderItem';
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item. */
  amount?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** Description of the line item, meant to be displayable to the user (e.g., `"Express shipping"`). */
  description?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_OrderItemObjectProperty>;
  parent?: Maybe<Stripe_OrderItemParentProperty>;
  /** A positive integer representing the number of instances of `parent` that are included in this order item. Applicable/present only if `type` is `sku`. */
  quantity?: Maybe<Scalars['Int']>;
  /** The type of line item. One of `sku`, `tax`, `shipping`, or `discount`. */
  type?: Maybe<Scalars['String']>;
};

export enum Stripe_OrderItemObjectProperty {
  OrderItem = 'order_item'
}

export type Stripe_OrderItemParentProperty = WrappedString | Stripe_Sku;

export type Stripe_Sku = {
  __typename?: 'Stripe_Sku';
  /** Whether the SKU is available for purchase. */
  active?: Maybe<Scalars['Boolean']>;
  /** A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`. */
  attributes?: Maybe<Scalars['JSONObject']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** The URL of an image for this SKU, meant to be displayable to the customer. */
  image?: Maybe<Scalars['String']>;
  inventory?: Maybe<Stripe_SkuInventory>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_SkuObjectProperty>;
  package_dimensions?: Maybe<Stripe_PackageDimensions>;
  /** The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge Â¥100, Japanese Yen being a zero-decimal currency). */
  price?: Maybe<Scalars['Int']>;
  product?: Maybe<Stripe_SkuProductProperty>;
  /** Time at which the object was last updated. Measured in seconds since the Unix epoch. */
  updated?: Maybe<Scalars['Int']>;
};

export type Stripe_SkuInventory = {
  __typename?: 'Stripe_SkuInventory';
  /** The count of inventory available. Will be present if and only if `type` is `finite`. */
  quantity?: Maybe<Scalars['Int']>;
  /** Inventory type. Possible values are `finite`, `bucket` (not quantified), and `infinite`. */
  type?: Maybe<Scalars['String']>;
  /** An indicator of the inventory available. Possible values are `in_stock`, `limited`, and `out_of_stock`. Will be present if and only if `type` is `bucket`. */
  value?: Maybe<Scalars['String']>;
};

export enum Stripe_SkuObjectProperty {
  Sku = 'sku'
}

export type Stripe_SkuProductProperty = WrappedString | Stripe_Product;

export enum Stripe_OrderObjectProperty {
  Order = 'order'
}

/** A list of returns that have taken place for this order. */
export type Stripe_OrderReturnsProperty = {
  __typename?: 'Stripe_OrderReturnsProperty';
  /** Details about each object. */
  data: Array<Stripe_OrderReturn>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Stripe_OrderReturnsObjectProperty;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Stripe_OrderReturn = {
  __typename?: 'Stripe_OrderReturn';
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the returned line item. */
  amount?: Maybe<Scalars['Int']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** The items included in this order return. */
  items?: Maybe<Array<Maybe<Stripe_OrderItem>>>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_OrderReturnObjectProperty>;
  order?: Maybe<Stripe_OrderReturnOrderProperty>;
  refund?: Maybe<Stripe_OrderReturnRefundProperty>;
};

export enum Stripe_OrderReturnObjectProperty {
  OrderReturn = 'order_return'
}

export type Stripe_OrderReturnOrderProperty = WrappedString | Stripe_Order;

export type Stripe_OrderReturnRefundProperty = WrappedString | Stripe_Refund;

export enum Stripe_OrderReturnsObjectProperty {
  List = 'list'
}

export type Stripe_ShippingMethod = {
  __typename?: 'Stripe_ShippingMethod';
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item. */
  amount?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  delivery_estimate?: Maybe<Stripe_DeliveryEstimate>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
};

export type Stripe_DeliveryEstimate = {
  __typename?: 'Stripe_DeliveryEstimate';
  /** If `type` is `"exact"`, `date` will be the expected delivery date in the format YYYY-MM-DD. */
  date?: Maybe<Scalars['String']>;
  /** If `type` is `"range"`, `earliest` will be be the earliest delivery date in the format YYYY-MM-DD. */
  earliest?: Maybe<Scalars['String']>;
  /** If `type` is `"range"`, `latest` will be the latest delivery date in the format YYYY-MM-DD. */
  latest?: Maybe<Scalars['String']>;
  /** The type of estimate. Must be either `"range"` or `"exact"`. */
  type?: Maybe<Scalars['String']>;
};

export type Stripe_StatusTransitions = {
  __typename?: 'Stripe_StatusTransitions';
  /** The time that the order was canceled. */
  canceled?: Maybe<Scalars['Int']>;
  /** The time that the order was fulfilled. */
  fulfiled?: Maybe<Scalars['Int']>;
  /** The time that the order was paid. */
  paid?: Maybe<Scalars['Int']>;
  /** The time that the order was returned. */
  returned?: Maybe<Scalars['Int']>;
};

export type Stripe_ChargeOutcome = {
  __typename?: 'Stripe_ChargeOutcome';
  /** Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement. */
  network_status?: Maybe<Scalars['String']>;
  /** An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details. */
  reason?: Maybe<Scalars['String']>;
  /** Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. This field is only available with Radar. */
  risk_level?: Maybe<Scalars['String']>;
  /** Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams. */
  risk_score?: Maybe<Scalars['Int']>;
  rule?: Maybe<Stripe_ChargeOutcomeRuleProperty>;
  /** A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer. */
  seller_message?: Maybe<Scalars['String']>;
  /** Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details. */
  type?: Maybe<Scalars['String']>;
};

export type Stripe_ChargeOutcomeRuleProperty = WrappedString | Stripe_Rule;

export type Stripe_Rule = {
  __typename?: 'Stripe_Rule';
  /** The action taken on the payment. */
  action?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** The predicate to evaluate the payment against. */
  predicate?: Maybe<Scalars['String']>;
};

export type Stripe_ChargePaymentIntentProperty = WrappedString | Stripe_PaymentIntent;

export type Stripe_PaymentMethodDetails = {
  __typename?: 'Stripe_PaymentMethodDetails';
  ach_credit_transfer?: Maybe<Stripe_PaymentMethodDetailsAchCreditTransfer>;
  ach_debit?: Maybe<Stripe_PaymentMethodDetailsAchDebit>;
  acss_debit?: Maybe<Stripe_PaymentMethodDetailsAcssDebit>;
  afterpay_clearpay?: Maybe<Stripe_PaymentMethodDetailsAfterpayClearpay>;
  alipay?: Maybe<Stripe_PaymentFlowsPrivatePaymentMethodsAlipayDetails>;
  au_becs_debit?: Maybe<Stripe_PaymentMethodDetailsAuBecsDebit>;
  bacs_debit?: Maybe<Stripe_PaymentMethodDetailsBacsDebit>;
  bancontact?: Maybe<Stripe_PaymentMethodDetailsBancontact>;
  boleto?: Maybe<Stripe_PaymentMethodDetailsBoleto>;
  card?: Maybe<Stripe_PaymentMethodDetailsCard>;
  card_present?: Maybe<Stripe_PaymentMethodDetailsCardPresent>;
  customer_balance?: Maybe<Stripe_PaymentMethodDetailsCustomerBalance>;
  eps?: Maybe<Stripe_PaymentMethodDetailsEps>;
  fpx?: Maybe<Stripe_PaymentMethodDetailsFpx>;
  giropay?: Maybe<Stripe_PaymentMethodDetailsGiropay>;
  grabpay?: Maybe<Stripe_PaymentMethodDetailsGrabpay>;
  ideal?: Maybe<Stripe_PaymentMethodDetailsIdeal>;
  interac_present?: Maybe<Stripe_PaymentMethodDetailsInteracPresent>;
  klarna?: Maybe<Stripe_PaymentMethodDetailsKlarna>;
  konbini?: Maybe<Stripe_PaymentMethodDetailsKonbini>;
  multibanco?: Maybe<Stripe_PaymentMethodDetailsMultibanco>;
  oxxo?: Maybe<Stripe_PaymentMethodDetailsOxxo>;
  p24?: Maybe<Stripe_PaymentMethodDetailsP24>;
  paynow?: Maybe<Stripe_PaymentMethodDetailsPaynow>;
  sepa_debit?: Maybe<Stripe_PaymentMethodDetailsSepaDebit>;
  sofort?: Maybe<Stripe_PaymentMethodDetailsSofort>;
  stripe_account?: Maybe<Stripe_PaymentMethodDetailsStripeAccount>;
  /**
   * The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `acss_debit`, `alipay`, `au_becs_debit`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`.
   * An additional hash is included on `payment_method_details` with a name matching this value.
   * It contains information specific to the payment method.
   */
  type?: Maybe<Scalars['String']>;
  us_bank_account?: Maybe<Stripe_PaymentMethodDetailsUsBankAccount>;
  wechat?: Maybe<Stripe_PaymentMethodDetailsWechat>;
  wechat_pay?: Maybe<Stripe_PaymentMethodDetailsWechatPay>;
};

export type Stripe_PaymentMethodDetailsAchCreditTransfer = {
  __typename?: 'Stripe_PaymentMethodDetailsAchCreditTransfer';
  /** Account number to transfer funds to. */
  account_number?: Maybe<Scalars['String']>;
  /** Name of the bank associated with the routing number. */
  bank_name?: Maybe<Scalars['String']>;
  /** Routing transit number for the bank account to transfer funds to. */
  routing_number?: Maybe<Scalars['String']>;
  /** SWIFT code of the bank associated with the routing number. */
  swift_code?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsAchDebit = {
  __typename?: 'Stripe_PaymentMethodDetailsAchDebit';
  /** Type of entity that holds the account. This can be either `individual` or `company`. */
  account_holder_type?: Maybe<Stripe_PaymentMethodDetailsAchDebitAccountHolderTypeProperty>;
  /** Name of the bank associated with the bank account. */
  bank_name?: Maybe<Scalars['String']>;
  /** Two-letter ISO code representing the country the bank account is located in. */
  country?: Maybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: Maybe<Scalars['String']>;
  /** Routing transit number of the bank account. */
  routing_number?: Maybe<Scalars['String']>;
};

export enum Stripe_PaymentMethodDetailsAchDebitAccountHolderTypeProperty {
  Company = 'company',
  Individual = 'individual'
}

export type Stripe_PaymentMethodDetailsAcssDebit = {
  __typename?: 'Stripe_PaymentMethodDetailsAcssDebit';
  /** Name of the bank associated with the bank account. */
  bank_name?: Maybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Institution number of the bank account */
  institution_number?: Maybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: Maybe<Scalars['String']>;
  /** ID of the mandate used to make this payment. */
  mandate?: Maybe<Scalars['String']>;
  /** Transit number of the bank account. */
  transit_number?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsAfterpayClearpay = {
  __typename?: 'Stripe_PaymentMethodDetailsAfterpayClearpay';
  /** Order identifier shown to the merchant in Afterpayâ€™s online portal. */
  reference?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentFlowsPrivatePaymentMethodsAlipayDetails = {
  __typename?: 'Stripe_PaymentFlowsPrivatePaymentMethodsAlipayDetails';
  /** Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same. */
  buyer_id?: Maybe<Scalars['String']>;
  /** Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Transaction ID of this particular Alipay transaction. */
  transaction_id?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsAuBecsDebit = {
  __typename?: 'Stripe_PaymentMethodDetailsAuBecsDebit';
  /** Bank-State-Branch number of the bank account. */
  bsb_number?: Maybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: Maybe<Scalars['String']>;
  /** ID of the mandate used to make this payment. */
  mandate?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsBacsDebit = {
  __typename?: 'Stripe_PaymentMethodDetailsBacsDebit';
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: Maybe<Scalars['String']>;
  /** ID of the mandate used to make this payment. */
  mandate?: Maybe<Scalars['String']>;
  /** Sort code of the bank account. (e.g., `10-20-30`) */
  sort_code?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsBancontact = {
  __typename?: 'Stripe_PaymentMethodDetailsBancontact';
  /** Bank code of bank associated with the bank account. */
  bank_code?: Maybe<Scalars['String']>;
  /** Name of the bank associated with the bank account. */
  bank_name?: Maybe<Scalars['String']>;
  /** Bank Identifier Code of the bank associated with the bank account. */
  bic?: Maybe<Scalars['String']>;
  generated_sepa_debit?: Maybe<Stripe_PaymentMethodDetailsBancontactGeneratedSepaDebitProperty>;
  generated_sepa_debit_mandate?: Maybe<Stripe_PaymentMethodDetailsBancontactGeneratedSepaDebitMandateProperty>;
  /** Last four characters of the IBAN. */
  iban_last4?: Maybe<Scalars['String']>;
  /**
   * Preferred language of the Bancontact authorization page that the customer is redirected to.
   * Can be one of `en`, `de`, `fr`, or `nl`
   */
  preferred_language?: Maybe<Stripe_PaymentMethodDetailsBancontactPreferredLanguageProperty>;
  /**
   * Owner's verified full name. Values are verified or provided by Bancontact directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsBancontactGeneratedSepaDebitProperty = WrappedString | Stripe_PaymentMethod;

export type Stripe_PaymentMethodDetailsBancontactGeneratedSepaDebitMandateProperty = WrappedString | Stripe_Mandate;

export enum Stripe_PaymentMethodDetailsBancontactPreferredLanguageProperty {
  De = 'de',
  En = 'en',
  Fr = 'fr',
  Nl = 'nl'
}

export type Stripe_PaymentMethodDetailsBoleto = {
  __typename?: 'Stripe_PaymentMethodDetailsBoleto';
  /** The tax ID of the customer (CPF for individuals consumers or CNPJ for businesses consumers) */
  tax_id?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsCard = {
  __typename?: 'Stripe_PaymentMethodDetailsCard';
  /** Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  brand?: Maybe<Scalars['String']>;
  checks?: Maybe<Stripe_PaymentMethodDetailsCardChecks>;
  /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
  country?: Maybe<Scalars['String']>;
  /** Two-digit number representing the card's expiration month. */
  exp_month?: Maybe<Scalars['Int']>;
  /** Four-digit number representing the card's expiration year. */
  exp_year?: Maybe<Scalars['Int']>;
  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   */
  fingerprint?: Maybe<Scalars['String']>;
  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: Maybe<Scalars['String']>;
  installments?: Maybe<Stripe_PaymentMethodDetailsCardInstallments>;
  /** The last four digits of the card. */
  last4?: Maybe<Scalars['String']>;
  /** ID of the mandate used to make this payment or created by it. */
  mandate?: Maybe<Scalars['String']>;
  /** Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  network?: Maybe<Scalars['String']>;
  three_d_secure?: Maybe<Stripe_ThreeDSecureDetails>;
  wallet?: Maybe<Stripe_PaymentMethodDetailsCardWallet>;
};

export type Stripe_PaymentMethodDetailsCardChecks = {
  __typename?: 'Stripe_PaymentMethodDetailsCardChecks';
  /** If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  address_line1_check?: Maybe<Scalars['String']>;
  /** If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  address_postal_code_check?: Maybe<Scalars['String']>;
  /** If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  cvc_check?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsCardInstallments = {
  __typename?: 'Stripe_PaymentMethodDetailsCardInstallments';
  plan?: Maybe<Stripe_PaymentMethodDetailsCardInstallmentsPlan>;
};

export type Stripe_PaymentMethodDetailsCardInstallmentsPlan = {
  __typename?: 'Stripe_PaymentMethodDetailsCardInstallmentsPlan';
  /** For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card. */
  count?: Maybe<Scalars['Int']>;
  /**
   * For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
   * One of `month`.
   */
  interval?: Maybe<Stripe_PaymentMethodDetailsCardInstallmentsPlanIntervalProperty>;
  /** Type of installment plan, one of `fixed_count`. */
  type?: Maybe<Stripe_PaymentMethodDetailsCardInstallmentsPlanTypeProperty>;
};

export enum Stripe_PaymentMethodDetailsCardInstallmentsPlanIntervalProperty {
  Month = 'month'
}

export enum Stripe_PaymentMethodDetailsCardInstallmentsPlanTypeProperty {
  FixedCount = 'fixed_count'
}

export type Stripe_PaymentMethodDetailsCardWallet = {
  __typename?: 'Stripe_PaymentMethodDetailsCardWallet';
  amex_express_checkout?: Maybe<Stripe_PaymentMethodDetailsCardWalletAmexExpressCheckout>;
  apple_pay?: Maybe<Stripe_PaymentMethodDetailsCardWalletApplePay>;
  /** (For tokenized numbers only.) The last four digits of the device account number. */
  dynamic_last4?: Maybe<Scalars['String']>;
  google_pay?: Maybe<Stripe_PaymentMethodDetailsCardWalletGooglePay>;
  masterpass?: Maybe<Stripe_PaymentMethodDetailsCardWalletMasterpass>;
  samsung_pay?: Maybe<Stripe_PaymentMethodDetailsCardWalletSamsungPay>;
  /** The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type. */
  type?: Maybe<Stripe_PaymentMethodDetailsCardWalletTypeProperty>;
  visa_checkout?: Maybe<Stripe_PaymentMethodDetailsCardWalletVisaCheckout>;
};

export type Stripe_PaymentMethodDetailsCardWalletAmexExpressCheckout = {
  __typename?: 'Stripe_PaymentMethodDetailsCardWalletAmexExpressCheckout';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodDetailsCardWalletApplePay = {
  __typename?: 'Stripe_PaymentMethodDetailsCardWalletApplePay';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodDetailsCardWalletGooglePay = {
  __typename?: 'Stripe_PaymentMethodDetailsCardWalletGooglePay';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodDetailsCardWalletMasterpass = {
  __typename?: 'Stripe_PaymentMethodDetailsCardWalletMasterpass';
  billing_address?: Maybe<Stripe_Address>;
  /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  email?: Maybe<Scalars['String']>;
  /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  name?: Maybe<Scalars['String']>;
  shipping_address?: Maybe<Stripe_Address>;
};

export type Stripe_PaymentMethodDetailsCardWalletSamsungPay = {
  __typename?: 'Stripe_PaymentMethodDetailsCardWalletSamsungPay';
  result?: Maybe<Scalars['JSONObject']>;
};

export enum Stripe_PaymentMethodDetailsCardWalletTypeProperty {
  AmexExpressCheckout = 'amex_express_checkout',
  ApplePay = 'apple_pay',
  GooglePay = 'google_pay',
  Masterpass = 'masterpass',
  SamsungPay = 'samsung_pay',
  VisaCheckout = 'visa_checkout'
}

export type Stripe_PaymentMethodDetailsCardWalletVisaCheckout = {
  __typename?: 'Stripe_PaymentMethodDetailsCardWalletVisaCheckout';
  billing_address?: Maybe<Stripe_Address>;
  /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  email?: Maybe<Scalars['String']>;
  /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  name?: Maybe<Scalars['String']>;
  shipping_address?: Maybe<Stripe_Address>;
};

export type Stripe_PaymentMethodDetailsCustomerBalance = {
  __typename?: 'Stripe_PaymentMethodDetailsCustomerBalance';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodDetailsEps = {
  __typename?: 'Stripe_PaymentMethodDetailsEps';
  /** The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`. */
  bank?: Maybe<Stripe_PaymentMethodDetailsEpsBankProperty>;
  /**
   * Owner's verified full name. Values are verified or provided by EPS directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   * EPS rarely provides this information so the attribute is usually empty.
   */
  verified_name?: Maybe<Scalars['String']>;
};

export enum Stripe_PaymentMethodDetailsEpsBankProperty {
  ArzteUndApothekerBank = 'arzte_und_apotheker_bank',
  AustrianAnadiBankAg = 'austrian_anadi_bank_ag',
  BankAustria = 'bank_austria',
  BankhausCarlSpangler = 'bankhaus_carl_spangler',
  BankhausSchelhammerUndSchatteraAg = 'bankhaus_schelhammer_und_schattera_ag',
  BawagPskAg = 'bawag_psk_ag',
  BksBankAg = 'bks_bank_ag',
  BrullKallmusBankAg = 'brull_kallmus_bank_ag',
  BtvVierLanderBank = 'btv_vier_lander_bank',
  CapitalBankGraweGruppeAg = 'capital_bank_grawe_gruppe_ag',
  Dolomitenbank = 'dolomitenbank',
  EasybankAg = 'easybank_ag',
  ErsteBankUndSparkassen = 'erste_bank_und_sparkassen',
  HypoAlpeadriabankInternationalAg = 'hypo_alpeadriabank_international_ag',
  HypoBankBurgenlandAktiengesellschaft = 'hypo_bank_burgenland_aktiengesellschaft',
  HypoNoeLbFurNiederosterreichUWien = 'hypo_noe_lb_fur_niederosterreich_u_wien',
  HypoOberosterreichSalzburgSteiermark = 'hypo_oberosterreich_salzburg_steiermark',
  HypoTirolBankAg = 'hypo_tirol_bank_ag',
  HypoVorarlbergBankAg = 'hypo_vorarlberg_bank_ag',
  MarchfelderBank = 'marchfelder_bank',
  OberbankAg = 'oberbank_ag',
  RaiffeisenBankengruppeOsterreich = 'raiffeisen_bankengruppe_osterreich',
  SchoellerbankAg = 'schoellerbank_ag',
  SpardaBankWien = 'sparda_bank_wien',
  VolksbankGruppe = 'volksbank_gruppe',
  VolkskreditbankAg = 'volkskreditbank_ag',
  VrBankBraunau = 'vr_bank_braunau'
}

export type Stripe_PaymentMethodDetailsFpx = {
  __typename?: 'Stripe_PaymentMethodDetailsFpx';
  /** The customer's bank. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`. */
  bank?: Maybe<Stripe_PaymentMethodDetailsFpxBankProperty>;
  /** Unique transaction id generated by FPX for every request from the merchant */
  transaction_id?: Maybe<Scalars['String']>;
};

export enum Stripe_PaymentMethodDetailsFpxBankProperty {
  AffinBank = 'affin_bank',
  Agrobank = 'agrobank',
  AllianceBank = 'alliance_bank',
  Ambank = 'ambank',
  BankIslam = 'bank_islam',
  BankMuamalat = 'bank_muamalat',
  BankRakyat = 'bank_rakyat',
  Bsn = 'bsn',
  Cimb = 'cimb',
  DeutscheBank = 'deutsche_bank',
  HongLeongBank = 'hong_leong_bank',
  Hsbc = 'hsbc',
  Kfh = 'kfh',
  Maybank2e = 'maybank2e',
  Maybank2u = 'maybank2u',
  Ocbc = 'ocbc',
  PbEnterprise = 'pb_enterprise',
  PublicBank = 'public_bank',
  Rhb = 'rhb',
  StandardChartered = 'standard_chartered',
  Uob = 'uob'
}

export type Stripe_PaymentMethodDetailsGiropay = {
  __typename?: 'Stripe_PaymentMethodDetailsGiropay';
  /** Bank code of bank associated with the bank account. */
  bank_code?: Maybe<Scalars['String']>;
  /** Name of the bank associated with the bank account. */
  bank_name?: Maybe<Scalars['String']>;
  /** Bank Identifier Code of the bank associated with the bank account. */
  bic?: Maybe<Scalars['String']>;
  /**
   * Owner's verified full name. Values are verified or provided by Giropay directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   * Giropay rarely provides this information so the attribute is usually empty.
   */
  verified_name?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsGrabpay = {
  __typename?: 'Stripe_PaymentMethodDetailsGrabpay';
  /** Unique transaction id generated by GrabPay */
  transaction_id?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsIdeal = {
  __typename?: 'Stripe_PaymentMethodDetailsIdeal';
  /** The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`. */
  bank?: Maybe<Stripe_PaymentMethodDetailsIdealBankProperty>;
  /** The Bank Identifier Code of the customer's bank. */
  bic?: Maybe<Stripe_PaymentMethodDetailsIdealBicProperty>;
  generated_sepa_debit?: Maybe<Stripe_PaymentMethodDetailsIdealGeneratedSepaDebitProperty>;
  generated_sepa_debit_mandate?: Maybe<Stripe_PaymentMethodDetailsIdealGeneratedSepaDebitMandateProperty>;
  /** Last four characters of the IBAN. */
  iban_last4?: Maybe<Scalars['String']>;
  /**
   * Owner's verified full name. Values are verified or provided by iDEAL directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: Maybe<Scalars['String']>;
};

export enum Stripe_PaymentMethodDetailsIdealBankProperty {
  AbnAmro = 'abn_amro',
  AsnBank = 'asn_bank',
  Bunq = 'bunq',
  Handelsbanken = 'handelsbanken',
  Ing = 'ing',
  Knab = 'knab',
  Moneyou = 'moneyou',
  Rabobank = 'rabobank',
  Regiobank = 'regiobank',
  Revolut = 'revolut',
  SnsBank = 'sns_bank',
  TriodosBank = 'triodos_bank',
  VanLanschot = 'van_lanschot'
}

export enum Stripe_PaymentMethodDetailsIdealBicProperty {
  Abnanl2A = 'ABNANL2A',
  Asnbnl21 = 'ASNBNL21',
  Bunqnl2A = 'BUNQNL2A',
  Fvlbnl22 = 'FVLBNL22',
  Handnl2A = 'HANDNL2A',
  Ingbnl2A = 'INGBNL2A',
  Knabnl2H = 'KNABNL2H',
  Moyonl21 = 'MOYONL21',
  Rabonl2U = 'RABONL2U',
  Rbrbnl21 = 'RBRBNL21',
  Revolt21 = 'REVOLT21',
  Snsbnl2A = 'SNSBNL2A',
  Trionl2U = 'TRIONL2U'
}

export type Stripe_PaymentMethodDetailsIdealGeneratedSepaDebitProperty = WrappedString | Stripe_PaymentMethod;

export type Stripe_PaymentMethodDetailsIdealGeneratedSepaDebitMandateProperty = WrappedString | Stripe_Mandate;

export type Stripe_PaymentMethodDetailsInteracPresent = {
  __typename?: 'Stripe_PaymentMethodDetailsInteracPresent';
  /** Card brand. Can be `interac`, `mastercard` or `visa`. */
  brand?: Maybe<Scalars['String']>;
  /** The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay. */
  cardholder_name?: Maybe<Scalars['String']>;
  /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
  country?: Maybe<Scalars['String']>;
  /** Authorization response cryptogram. */
  emv_auth_data?: Maybe<Scalars['String']>;
  /** Two-digit number representing the card's expiration month. */
  exp_month?: Maybe<Scalars['Int']>;
  /** Four-digit number representing the card's expiration year. */
  exp_year?: Maybe<Scalars['Int']>;
  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   */
  fingerprint?: Maybe<Scalars['String']>;
  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: Maybe<Scalars['String']>;
  /** ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod. */
  generated_card?: Maybe<Scalars['String']>;
  /** The last four digits of the card. */
  last4?: Maybe<Scalars['String']>;
  /** Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  network?: Maybe<Scalars['String']>;
  /** EMV tag 5F2D. Preferred languages specified by the integrated circuit chip. */
  preferred_locales?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** How card details were read in this transaction. */
  read_method?: Maybe<Stripe_PaymentMethodDetailsInteracPresentReadMethodProperty>;
  receipt?: Maybe<Stripe_PaymentMethodDetailsInteracPresentReceipt>;
};

export enum Stripe_PaymentMethodDetailsInteracPresentReadMethodProperty {
  ContactEmv = 'contact_emv',
  ContactlessEmv = 'contactless_emv',
  ContactlessMagstripeMode = 'contactless_magstripe_mode',
  MagneticStripeFallback = 'magnetic_stripe_fallback',
  MagneticStripeTrack2 = 'magnetic_stripe_track2'
}

export type Stripe_PaymentMethodDetailsInteracPresentReceipt = {
  __typename?: 'Stripe_PaymentMethodDetailsInteracPresentReceipt';
  /** The type of account being debited or credited */
  account_type?: Maybe<Stripe_PaymentMethodDetailsInteracPresentReceiptAccountTypeProperty>;
  /** EMV tag 9F26, cryptogram generated by the integrated circuit chip. */
  application_cryptogram?: Maybe<Scalars['String']>;
  /** Mnenomic of the Application Identifier. */
  application_preferred_name?: Maybe<Scalars['String']>;
  /** Identifier for this transaction. */
  authorization_code?: Maybe<Scalars['String']>;
  /** EMV tag 8A. A code returned by the card issuer. */
  authorization_response_code?: Maybe<Scalars['String']>;
  /** How the cardholder verified ownership of the card. */
  cardholder_verification_method?: Maybe<Scalars['String']>;
  /** EMV tag 84. Similar to the application identifier stored on the integrated circuit chip. */
  dedicated_file_name?: Maybe<Scalars['String']>;
  /** The outcome of a series of EMV functions performed by the card reader. */
  terminal_verification_results?: Maybe<Scalars['String']>;
  /** An indication of various EMV functions performed during the transaction. */
  transaction_status_information?: Maybe<Scalars['String']>;
};

export enum Stripe_PaymentMethodDetailsInteracPresentReceiptAccountTypeProperty {
  Checking = 'checking',
  Savings = 'savings',
  Unknown = 'unknown'
}

export type Stripe_PaymentMethodDetailsKlarna = {
  __typename?: 'Stripe_PaymentMethodDetailsKlarna';
  /**
   * The Klarna payment method used for this transaction.
   * Can be one of `pay_later`, `pay_now`, `pay_with_financing`, or `pay_in_installments`
   */
  payment_method_category?: Maybe<Scalars['String']>;
  /**
   * Preferred language of the Klarna authorization page that the customer is redirected to.
   * Can be one of `de-AT`, `en-AT`, `nl-BE`, `fr-BE`, `en-BE`, `de-DE`, `en-DE`, `da-DK`, `en-DK`, `es-ES`, `en-ES`, `fi-FI`, `sv-FI`, `en-FI`, `en-GB`, `en-IE`, `it-IT`, `en-IT`, `nl-NL`, `en-NL`, `nb-NO`, `en-NO`, `sv-SE`, `en-SE`, `en-US`, `es-US`, `fr-FR`, or `en-FR`
   */
  preferred_locale?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsKonbini = {
  __typename?: 'Stripe_PaymentMethodDetailsKonbini';
  store?: Maybe<Stripe_PaymentMethodDetailsKonbiniStore>;
};

export type Stripe_PaymentMethodDetailsKonbiniStore = {
  __typename?: 'Stripe_PaymentMethodDetailsKonbiniStore';
  /** The name of the convenience store chain where the payment was completed. */
  chain?: Maybe<Stripe_PaymentMethodDetailsKonbiniStoreChainProperty>;
};

export enum Stripe_PaymentMethodDetailsKonbiniStoreChainProperty {
  Familymart = 'familymart',
  Lawson = 'lawson',
  Ministop = 'ministop',
  Seicomart = 'seicomart'
}

export type Stripe_PaymentMethodDetailsMultibanco = {
  __typename?: 'Stripe_PaymentMethodDetailsMultibanco';
  /** Entity number associated with this Multibanco payment. */
  entity?: Maybe<Scalars['String']>;
  /** Reference number associated with this Multibanco payment. */
  reference?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsOxxo = {
  __typename?: 'Stripe_PaymentMethodDetailsOxxo';
  /** OXXO reference number */
  number?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsP24 = {
  __typename?: 'Stripe_PaymentMethodDetailsP24';
  /** The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`. */
  bank?: Maybe<Stripe_PaymentMethodDetailsP24BankProperty>;
  /** Unique reference for this Przelewy24 payment. */
  reference?: Maybe<Scalars['String']>;
  /**
   * Owner's verified full name. Values are verified or provided by Przelewy24 directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   * Przelewy24 rarely provides this information so the attribute is usually empty.
   */
  verified_name?: Maybe<Scalars['String']>;
};

export enum Stripe_PaymentMethodDetailsP24BankProperty {
  AliorBank = 'alior_bank',
  BankMillennium = 'bank_millennium',
  BankNowyBfgSa = 'bank_nowy_bfg_sa',
  BankPekaoSa = 'bank_pekao_sa',
  BankiSpbdzielcze = 'banki_spbdzielcze',
  Blik = 'blik',
  BnpParibas = 'bnp_paribas',
  Boz = 'boz',
  CitiHandlowy = 'citi_handlowy',
  CreditAgricole = 'credit_agricole',
  Envelobank = 'envelobank',
  EtransferPocztowy24 = 'etransfer_pocztowy24',
  GetinBank = 'getin_bank',
  Ideabank = 'ideabank',
  Ing = 'ing',
  Inteligo = 'inteligo',
  MbankMtransfer = 'mbank_mtransfer',
  NestPrzelew = 'nest_przelew',
  NoblePay = 'noble_pay',
  PbacZIpko = 'pbac_z_ipko',
  PlusBank = 'plus_bank',
  SantanderPrzelew24 = 'santander_przelew24',
  TmobileUsbugiBankowe = 'tmobile_usbugi_bankowe',
  ToyotaBank = 'toyota_bank',
  VolkswagenBank = 'volkswagen_bank'
}

export type Stripe_PaymentMethodDetailsPaynow = {
  __typename?: 'Stripe_PaymentMethodDetailsPaynow';
  /** Reference number associated with this PayNow payment */
  reference?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsSepaDebit = {
  __typename?: 'Stripe_PaymentMethodDetailsSepaDebit';
  /** Bank code of bank associated with the bank account. */
  bank_code?: Maybe<Scalars['String']>;
  /** Branch code of bank associated with the bank account. */
  branch_code?: Maybe<Scalars['String']>;
  /** Two-letter ISO code representing the country the bank account is located in. */
  country?: Maybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Last four characters of the IBAN. */
  last4?: Maybe<Scalars['String']>;
  /** ID of the mandate used to make this payment. */
  mandate?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsSofort = {
  __typename?: 'Stripe_PaymentMethodDetailsSofort';
  /** Bank code of bank associated with the bank account. */
  bank_code?: Maybe<Scalars['String']>;
  /** Name of the bank associated with the bank account. */
  bank_name?: Maybe<Scalars['String']>;
  /** Bank Identifier Code of the bank associated with the bank account. */
  bic?: Maybe<Scalars['String']>;
  /** Two-letter ISO code representing the country the bank account is located in. */
  country?: Maybe<Scalars['String']>;
  generated_sepa_debit?: Maybe<Stripe_PaymentMethodDetailsSofortGeneratedSepaDebitProperty>;
  generated_sepa_debit_mandate?: Maybe<Stripe_PaymentMethodDetailsSofortGeneratedSepaDebitMandateProperty>;
  /** Last four characters of the IBAN. */
  iban_last4?: Maybe<Scalars['String']>;
  /**
   * Preferred language of the SOFORT authorization page that the customer is redirected to.
   * Can be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`
   */
  preferred_language?: Maybe<Stripe_PaymentMethodDetailsSofortPreferredLanguageProperty>;
  /**
   * Owner's verified full name. Values are verified or provided by SOFORT directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsSofortGeneratedSepaDebitProperty = WrappedString | Stripe_PaymentMethod;

export type Stripe_PaymentMethodDetailsSofortGeneratedSepaDebitMandateProperty = WrappedString | Stripe_Mandate;

export enum Stripe_PaymentMethodDetailsSofortPreferredLanguageProperty {
  De = 'de',
  En = 'en',
  Es = 'es',
  Fr = 'fr',
  It = 'it',
  Nl = 'nl',
  Pl = 'pl'
}

export type Stripe_PaymentMethodDetailsStripeAccount = {
  __typename?: 'Stripe_PaymentMethodDetailsStripeAccount';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodDetailsUsBankAccount = {
  __typename?: 'Stripe_PaymentMethodDetailsUsBankAccount';
  /** Account holder type: individual or company. */
  account_holder_type?: Maybe<Stripe_PaymentMethodDetailsUsBankAccountAccountHolderTypeProperty>;
  /** Account type: checkings or savings. Defaults to checking if omitted. */
  account_type?: Maybe<Stripe_PaymentMethodDetailsUsBankAccountAccountTypeProperty>;
  /** Name of the bank associated with the bank account. */
  bank_name?: Maybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: Maybe<Scalars['String']>;
  /** Routing number of the bank account. */
  routing_number?: Maybe<Scalars['String']>;
};

export enum Stripe_PaymentMethodDetailsUsBankAccountAccountHolderTypeProperty {
  Company = 'company',
  Individual = 'individual'
}

export enum Stripe_PaymentMethodDetailsUsBankAccountAccountTypeProperty {
  Checking = 'checking',
  Savings = 'savings'
}

export type Stripe_PaymentMethodDetailsWechat = {
  __typename?: 'Stripe_PaymentMethodDetailsWechat';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodDetailsWechatPay = {
  __typename?: 'Stripe_PaymentMethodDetailsWechatPay';
  /** Uniquely identifies this particular WeChat Pay account. You can use this attribute to check whether two WeChat accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Transaction ID of this particular WeChat Pay transaction. */
  transaction_id?: Maybe<Scalars['String']>;
};

/** A list of refunds that have been applied to the charge. */
export type Stripe_ChargeRefundsProperty = {
  __typename?: 'Stripe_ChargeRefundsProperty';
  /** Details about each object. */
  data: Array<Stripe_Refund>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Stripe_ChargeRefundsObjectProperty;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export enum Stripe_ChargeRefundsObjectProperty {
  List = 'list'
}

export type Stripe_ChargeReviewProperty = WrappedString | Stripe_Review;

export type Stripe_Review = {
  __typename?: 'Stripe_Review';
  /** The ZIP or postal code of the card used, if applicable. */
  billing_zip?: Maybe<Scalars['String']>;
  charge?: Maybe<Stripe_ReviewChargeProperty>;
  /** The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`. */
  closed_reason?: Maybe<Stripe_ReviewClosedReasonProperty>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** The IP address where the payment originated. */
  ip_address?: Maybe<Scalars['String']>;
  ip_address_location?: Maybe<Stripe_RadarReviewResourceLocation>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_ReviewObjectProperty>;
  /** If `true`, the review needs action. */
  open?: Maybe<Scalars['Boolean']>;
  /** The reason the review was opened. One of `rule` or `manual`. */
  opened_reason?: Maybe<Stripe_ReviewOpenedReasonProperty>;
  payment_intent?: Maybe<Stripe_ReviewPaymentIntentProperty>;
  /** The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`. */
  reason?: Maybe<Scalars['String']>;
  session?: Maybe<Stripe_RadarReviewResourceSession>;
};

export type Stripe_ReviewChargeProperty = WrappedString | Stripe_Charge;

export enum Stripe_ReviewClosedReasonProperty {
  Approved = 'approved',
  Disputed = 'disputed',
  Redacted = 'redacted',
  Refunded = 'refunded',
  RefundedAsFraud = 'refunded_as_fraud'
}

export type Stripe_RadarReviewResourceLocation = {
  __typename?: 'Stripe_RadarReviewResourceLocation';
  /** The city where the payment originated. */
  city?: Maybe<Scalars['String']>;
  /** Two-letter ISO code representing the country where the payment originated. */
  country?: Maybe<Scalars['String']>;
  /** The geographic latitude where the payment originated. */
  latitude?: Maybe<Scalars['Float']>;
  /** The geographic longitude where the payment originated. */
  longitude?: Maybe<Scalars['Float']>;
  /** The state/county/province/region where the payment originated. */
  region?: Maybe<Scalars['String']>;
};

export enum Stripe_ReviewObjectProperty {
  Review = 'review'
}

export enum Stripe_ReviewOpenedReasonProperty {
  Manual = 'manual',
  Rule = 'rule'
}

export type Stripe_ReviewPaymentIntentProperty = WrappedString | Stripe_PaymentIntent;

export type Stripe_RadarReviewResourceSession = {
  __typename?: 'Stripe_RadarReviewResourceSession';
  /** The browser used in this browser session (e.g., `Chrome`). */
  browser?: Maybe<Scalars['String']>;
  /** Information about the device used for the browser session (e.g., `Samsung SM-G930T`). */
  device?: Maybe<Scalars['String']>;
  /** The platform for the browser session (e.g., `Macintosh`). */
  platform?: Maybe<Scalars['String']>;
  /** The version for the browser session (e.g., `61.0.3163.100`). */
  version?: Maybe<Scalars['String']>;
};

export type Stripe_ChargeSourceTransferProperty = WrappedString | Stripe_Transfer;

export enum Stripe_ChargeStatusProperty {
  Failed = 'failed',
  Pending = 'pending',
  Succeeded = 'succeeded'
}

export type Stripe_ChargeTransferProperty = WrappedString | Stripe_Transfer;

export type Stripe_ChargeTransferData = {
  __typename?: 'Stripe_ChargeTransferData';
  /** The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account. */
  amount?: Maybe<Scalars['Int']>;
  destination?: Maybe<Stripe_ChargeTransferDataDestinationProperty>;
};

export type Stripe_ChargeTransferDataDestinationProperty = WrappedString | Stripe_Account;

export enum Stripe_PaymentIntentChargesObjectProperty {
  List = 'list'
}

export enum Stripe_PaymentIntentConfirmationMethodProperty {
  Automatic = 'automatic',
  Manual = 'manual'
}

export type Stripe_PaymentIntentInvoiceProperty = WrappedString | Stripe_Invoice;

export type Stripe_PaymentIntentNextAction = {
  __typename?: 'Stripe_PaymentIntentNextAction';
  alipay_handle_redirect?: Maybe<Stripe_PaymentIntentNextActionAlipayHandleRedirect>;
  boleto_display_details?: Maybe<Stripe_PaymentIntentNextActionBoleto>;
  card_await_notification?: Maybe<Stripe_PaymentIntentNextActionCardAwaitNotification>;
  display_bank_transfer_instructions?: Maybe<Stripe_PaymentIntentNextActionDisplayBankTransferInstructions>;
  konbini_display_details?: Maybe<Stripe_PaymentIntentNextActionKonbini>;
  oxxo_display_details?: Maybe<Stripe_PaymentIntentNextActionDisplayOxxoDetails>;
  paynow_display_qr_code?: Maybe<Stripe_PaymentIntentNextActionPaynowDisplayQrCode>;
  redirect_to_url?: Maybe<Stripe_PaymentIntentNextActionRedirectToUrl>;
  /** Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`. */
  type?: Maybe<Scalars['String']>;
  /** When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js. */
  use_stripe_sdk?: Maybe<Scalars['JSONObject']>;
  verify_with_microdeposits?: Maybe<Stripe_PaymentIntentNextActionVerifyWithMicrodeposits>;
  wechat_pay_display_qr_code?: Maybe<Stripe_PaymentIntentNextActionWechatPayDisplayQrCode>;
  wechat_pay_redirect_to_android_app?: Maybe<Stripe_PaymentIntentNextActionWechatPayRedirectToAndroidApp>;
  wechat_pay_redirect_to_ios_app?: Maybe<Stripe_PaymentIntentNextActionWechatPayRedirectToIosApp>;
};

export type Stripe_PaymentIntentNextActionAlipayHandleRedirect = {
  __typename?: 'Stripe_PaymentIntentNextActionAlipayHandleRedirect';
  /** The native data to be used with Alipay SDK you must redirect your customer to in order to authenticate the payment in an Android App. */
  native_data?: Maybe<Scalars['String']>;
  /** The native URL you must redirect your customer to in order to authenticate the payment in an iOS App. */
  native_url?: Maybe<Scalars['String']>;
  /** If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
  return_url?: Maybe<Scalars['String']>;
  /** The URL you must redirect your customer to in order to authenticate the payment. */
  url?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentIntentNextActionBoleto = {
  __typename?: 'Stripe_PaymentIntentNextActionBoleto';
  /** The timestamp after which the boleto expires. */
  expires_at?: Maybe<Scalars['Int']>;
  /** The URL to the hosted boleto voucher page, which allows customers to view the boleto voucher. */
  hosted_voucher_url?: Maybe<Scalars['String']>;
  /** The boleto number. */
  number?: Maybe<Scalars['String']>;
  /** The URL to the downloadable boleto voucher PDF. */
  pdf?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentIntentNextActionCardAwaitNotification = {
  __typename?: 'Stripe_PaymentIntentNextActionCardAwaitNotification';
  /** The time that payment will be attempted. If customer approval is required, they need to provide approval before this time. */
  charge_attempt_at?: Maybe<Scalars['Int']>;
  /** For payments greater than INR 5000, the customer must provide explicit approval of the payment with their bank. For payments of lower amount, no customer action is required. */
  customer_approval_required?: Maybe<Scalars['Boolean']>;
};

export type Stripe_PaymentIntentNextActionDisplayBankTransferInstructions = {
  __typename?: 'Stripe_PaymentIntentNextActionDisplayBankTransferInstructions';
  /** The remaining amount that needs to be transferred to complete the payment. */
  amount_remaining?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** A list of financial addresses that can be used to fund the customer balance */
  financial_addresses?: Maybe<Array<Maybe<Stripe_FundingInstructionsBankTransferFinancialAddress>>>;
  /** A string identifying this payment. Instruct your customer to include this code in the reference or memo field of their bank transfer. */
  reference?: Maybe<Scalars['String']>;
  /** Type of bank transfer */
  type?: Maybe<Stripe_PaymentIntentNextActionDisplayBankTransferInstructionsTypeProperty>;
};

export type Stripe_FundingInstructionsBankTransferFinancialAddress = {
  __typename?: 'Stripe_FundingInstructionsBankTransferFinancialAddress';
  /** The payment networks supported by this FinancialAddress */
  supported_networks?: Maybe<Array<Maybe<Stripe_FundingInstructionsBankTransferFinancialAddressSupportedNetworksProperty>>>;
  /** The type of financial address */
  type?: Maybe<Stripe_FundingInstructionsBankTransferFinancialAddressTypeProperty>;
  zengin?: Maybe<Stripe_FundingInstructionsBankTransferZenginRecord>;
};

export enum Stripe_FundingInstructionsBankTransferFinancialAddressSupportedNetworksProperty {
  Sepa = 'sepa',
  Zengin = 'zengin'
}

export enum Stripe_FundingInstructionsBankTransferFinancialAddressTypeProperty {
  Iban = 'iban',
  Zengin = 'zengin'
}

export type Stripe_FundingInstructionsBankTransferZenginRecord = {
  __typename?: 'Stripe_FundingInstructionsBankTransferZenginRecord';
  result?: Maybe<Scalars['JSONObject']>;
};

export enum Stripe_PaymentIntentNextActionDisplayBankTransferInstructionsTypeProperty {
  JpBankTransfer = 'jp_bank_transfer'
}

export type Stripe_PaymentIntentNextActionKonbini = {
  __typename?: 'Stripe_PaymentIntentNextActionKonbini';
  /** The timestamp at which the pending Konbini payment expires. */
  expires_at?: Maybe<Scalars['Int']>;
  /** The URL for the Konbini payment instructions page, which allows customers to view and print a Konbini voucher. */
  hosted_voucher_url?: Maybe<Scalars['String']>;
  stores?: Maybe<Stripe_PaymentIntentNextActionKonbiniStores>;
};

export type Stripe_PaymentIntentNextActionKonbiniStores = {
  __typename?: 'Stripe_PaymentIntentNextActionKonbiniStores';
  familymart?: Maybe<Stripe_PaymentIntentNextActionKonbiniFamilymart>;
  lawson?: Maybe<Stripe_PaymentIntentNextActionKonbiniLawson>;
  ministop?: Maybe<Stripe_PaymentIntentNextActionKonbiniMinistop>;
  seicomart?: Maybe<Stripe_PaymentIntentNextActionKonbiniSeicomart>;
};

export type Stripe_PaymentIntentNextActionKonbiniFamilymart = {
  __typename?: 'Stripe_PaymentIntentNextActionKonbiniFamilymart';
  /** The confirmation number. */
  confirmation_number?: Maybe<Scalars['String']>;
  /** The payment code. */
  payment_code?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentIntentNextActionKonbiniLawson = {
  __typename?: 'Stripe_PaymentIntentNextActionKonbiniLawson';
  /** The confirmation number. */
  confirmation_number?: Maybe<Scalars['String']>;
  /** The payment code. */
  payment_code?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentIntentNextActionKonbiniMinistop = {
  __typename?: 'Stripe_PaymentIntentNextActionKonbiniMinistop';
  /** The confirmation number. */
  confirmation_number?: Maybe<Scalars['String']>;
  /** The payment code. */
  payment_code?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentIntentNextActionKonbiniSeicomart = {
  __typename?: 'Stripe_PaymentIntentNextActionKonbiniSeicomart';
  /** The confirmation number. */
  confirmation_number?: Maybe<Scalars['String']>;
  /** The payment code. */
  payment_code?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentIntentNextActionDisplayOxxoDetails = {
  __typename?: 'Stripe_PaymentIntentNextActionDisplayOxxoDetails';
  /** The timestamp after which the OXXO voucher expires. */
  expires_after?: Maybe<Scalars['Int']>;
  /** The URL for the hosted OXXO voucher page, which allows customers to view and print an OXXO voucher. */
  hosted_voucher_url?: Maybe<Scalars['String']>;
  /** OXXO reference number. */
  number?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentIntentNextActionPaynowDisplayQrCode = {
  __typename?: 'Stripe_PaymentIntentNextActionPaynowDisplayQrCode';
  /** The raw data string used to generate QR code, it should be used together with QR code library. */
  data?: Maybe<Scalars['String']>;
  /** The image_url_png string used to render QR code */
  image_url_png?: Maybe<Scalars['String']>;
  /** The image_url_svg string used to render QR code */
  image_url_svg?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentIntentNextActionRedirectToUrl = {
  __typename?: 'Stripe_PaymentIntentNextActionRedirectToUrl';
  /** If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
  return_url?: Maybe<Scalars['String']>;
  /** The URL you must redirect your customer to in order to authenticate the payment. */
  url?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentIntentNextActionVerifyWithMicrodeposits = {
  __typename?: 'Stripe_PaymentIntentNextActionVerifyWithMicrodeposits';
  /** The timestamp when the microdeposits are expected to land. */
  arrival_date?: Maybe<Scalars['Int']>;
  /** The URL for the hosted verification page, which allows customers to verify their bank account. */
  hosted_verification_url?: Maybe<Scalars['String']>;
  /** The type of the microdeposit sent to the customer. Used to distinguish between different verification methods. */
  microdeposit_type?: Maybe<Stripe_PaymentIntentNextActionVerifyWithMicrodepositsMicrodepositTypeProperty>;
};

export enum Stripe_PaymentIntentNextActionVerifyWithMicrodepositsMicrodepositTypeProperty {
  Amounts = 'amounts',
  DescriptorCode = 'descriptor_code'
}

export type Stripe_PaymentIntentNextActionWechatPayDisplayQrCode = {
  __typename?: 'Stripe_PaymentIntentNextActionWechatPayDisplayQrCode';
  /** The data being used to generate QR code */
  data?: Maybe<Scalars['String']>;
  /** The base64 image data for a pre-generated QR code */
  image_data_url?: Maybe<Scalars['String']>;
  /** The image_url_png string used to render QR code */
  image_url_png?: Maybe<Scalars['String']>;
  /** The image_url_svg string used to render QR code */
  image_url_svg?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentIntentNextActionWechatPayRedirectToAndroidApp = {
  __typename?: 'Stripe_PaymentIntentNextActionWechatPayRedirectToAndroidApp';
  /** app_id is the APP ID registered on WeChat open platform */
  app_id?: Maybe<Scalars['String']>;
  /** nonce_str is a random string */
  nonce_str?: Maybe<Scalars['String']>;
  /** package is static value */
  package?: Maybe<Scalars['String']>;
  /** an unique merchant ID assigned by WeChat Pay */
  partner_id?: Maybe<Scalars['String']>;
  /** an unique trading ID assigned by WeChat Pay */
  prepay_id?: Maybe<Scalars['String']>;
  /** A signature */
  sign?: Maybe<Scalars['String']>;
  /** Specifies the current time in epoch format */
  timestamp?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentIntentNextActionWechatPayRedirectToIosApp = {
  __typename?: 'Stripe_PaymentIntentNextActionWechatPayRedirectToIosApp';
  /** An universal link that redirect to WeChat Pay app */
  native_url?: Maybe<Scalars['String']>;
};

export enum Stripe_PaymentIntentObjectProperty {
  PaymentIntent = 'payment_intent'
}

export type Stripe_PaymentIntentOnBehalfOfProperty = WrappedString | Stripe_Account;

export type Stripe_PaymentIntentPaymentMethodProperty = WrappedString | Stripe_PaymentMethod;

export type Stripe_PaymentIntentPaymentMethodOptions = {
  __typename?: 'Stripe_PaymentIntentPaymentMethodOptions';
  acss_debit?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsAcssDebitProperty>;
  afterpay_clearpay?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsAfterpayClearpayProperty>;
  alipay?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsAlipayProperty>;
  au_becs_debit?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsAuBecsDebitProperty>;
  bacs_debit?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsBacsDebitProperty>;
  bancontact?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsBancontactProperty>;
  boleto?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsBoletoProperty>;
  card?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsCardProperty>;
  card_present?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsCardPresentProperty>;
  customer_balance?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsCustomerBalanceProperty>;
  eps?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsEpsProperty>;
  fpx?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsFpxProperty>;
  giropay?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsGiropayProperty>;
  grabpay?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsGrabpayProperty>;
  ideal?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsIdealProperty>;
  interac_present?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsInteracPresentProperty>;
  klarna?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsKlarnaProperty>;
  konbini?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsKonbiniProperty>;
  oxxo?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsOxxoProperty>;
  p24?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsP24Property>;
  paynow?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsPaynowProperty>;
  sepa_debit?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsSepaDebitProperty>;
  sofort?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsSofortProperty>;
  us_bank_account?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsUsBankAccountProperty>;
  wechat_pay?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsWechatPayProperty>;
};

export type Stripe_PaymentIntentPaymentMethodOptionsAcssDebitProperty = Stripe_PaymentIntentPaymentMethodOptionsAcssDebit | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentIntentPaymentMethodOptionsAcssDebit = {
  __typename?: 'Stripe_PaymentIntentPaymentMethodOptionsAcssDebit';
  mandate_options?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsAcssDebitSetupFutureUsageProperty>;
  /** Bank account verification method. */
  verification_method?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsAcssDebitVerificationMethodProperty>;
};

export type Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit = {
  __typename?: 'Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit';
  /** A URL for custom mandate text */
  custom_mandate_url?: Maybe<Scalars['String']>;
  /** Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
  interval_description?: Maybe<Scalars['String']>;
  /** Payment schedule for the mandate. */
  payment_schedule?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentScheduleProperty>;
  /** Transaction type of the mandate. */
  transaction_type?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionTypeProperty>;
};

export enum Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentScheduleProperty {
  Combined = 'combined',
  Interval = 'interval',
  Sporadic = 'sporadic'
}

export enum Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionTypeProperty {
  Business = 'business',
  Personal = 'personal'
}

export enum Stripe_PaymentIntentPaymentMethodOptionsAcssDebitSetupFutureUsageProperty {
  None = 'none',
  OffSession = 'off_session',
  OnSession = 'on_session'
}

export enum Stripe_PaymentIntentPaymentMethodOptionsAcssDebitVerificationMethodProperty {
  Automatic = 'automatic',
  Instant = 'instant',
  Microdeposits = 'microdeposits'
}

export type Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient = {
  __typename?: 'Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient';
  /** Controls when the funds will be captured from the customer's account. */
  capture_method?: Maybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethodProperty>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsageProperty>;
  /** Bank account verification method. */
  verification_method?: Maybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethodProperty>;
};

export enum Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethodProperty {
  Manual = 'manual'
}

export enum Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsageProperty {
  None = 'none',
  OffSession = 'off_session',
  OnSession = 'on_session'
}

export enum Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethodProperty {
  Automatic = 'automatic',
  Instant = 'instant',
  Microdeposits = 'microdeposits'
}

export type Stripe_PaymentIntentPaymentMethodOptionsAfterpayClearpayProperty = Stripe_PaymentMethodOptionsAfterpayClearpay | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentMethodOptionsAfterpayClearpay = {
  __typename?: 'Stripe_PaymentMethodOptionsAfterpayClearpay';
  /** Controls when the funds will be captured from the customer's account. */
  capture_method?: Maybe<Stripe_PaymentMethodOptionsAfterpayClearpayCaptureMethodProperty>;
  /**
   * Order identifier shown to the customer in Afterpayâ€™s online portal. We recommend using a value that helps you answer any questions a customer might have about
   * the payment. The identifier is limited to 128 characters and may contain only letters, digits, underscores, backslashes and dashes.
   */
  reference?: Maybe<Scalars['String']>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentMethodOptionsAfterpayClearpaySetupFutureUsageProperty>;
};

export enum Stripe_PaymentMethodOptionsAfterpayClearpayCaptureMethodProperty {
  Manual = 'manual'
}

export enum Stripe_PaymentMethodOptionsAfterpayClearpaySetupFutureUsageProperty {
  None = 'none'
}

export type Stripe_PaymentIntentPaymentMethodOptionsAlipayProperty = Stripe_PaymentMethodOptionsAlipay | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentMethodOptionsAlipay = {
  __typename?: 'Stripe_PaymentMethodOptionsAlipay';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentMethodOptionsAlipaySetupFutureUsageProperty>;
};

export enum Stripe_PaymentMethodOptionsAlipaySetupFutureUsageProperty {
  None = 'none',
  OffSession = 'off_session'
}

export type Stripe_PaymentIntentPaymentMethodOptionsAuBecsDebitProperty = Stripe_PaymentIntentPaymentMethodOptionsAuBecsDebit | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentIntentPaymentMethodOptionsAuBecsDebit = {
  __typename?: 'Stripe_PaymentIntentPaymentMethodOptionsAuBecsDebit';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsAuBecsDebitSetupFutureUsageProperty>;
};

export enum Stripe_PaymentIntentPaymentMethodOptionsAuBecsDebitSetupFutureUsageProperty {
  None = 'none',
  OffSession = 'off_session',
  OnSession = 'on_session'
}

export type Stripe_PaymentIntentPaymentMethodOptionsBacsDebitProperty = Stripe_PaymentMethodOptionsBacsDebit | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentMethodOptionsBacsDebit = {
  __typename?: 'Stripe_PaymentMethodOptionsBacsDebit';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentMethodOptionsBacsDebitSetupFutureUsageProperty>;
};

export enum Stripe_PaymentMethodOptionsBacsDebitSetupFutureUsageProperty {
  None = 'none',
  OffSession = 'off_session',
  OnSession = 'on_session'
}

export type Stripe_PaymentIntentPaymentMethodOptionsBancontactProperty = Stripe_PaymentMethodOptionsBancontact | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentMethodOptionsBancontact = {
  __typename?: 'Stripe_PaymentMethodOptionsBancontact';
  /** Preferred language of the Bancontact authorization page that the customer is redirected to. */
  preferred_language?: Maybe<Stripe_PaymentMethodOptionsBancontactPreferredLanguageProperty>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentMethodOptionsBancontactSetupFutureUsageProperty>;
};

export enum Stripe_PaymentMethodOptionsBancontactPreferredLanguageProperty {
  De = 'de',
  En = 'en',
  Fr = 'fr',
  Nl = 'nl'
}

export enum Stripe_PaymentMethodOptionsBancontactSetupFutureUsageProperty {
  None = 'none',
  OffSession = 'off_session'
}

export type Stripe_PaymentIntentPaymentMethodOptionsBoletoProperty = Stripe_PaymentMethodOptionsBoleto | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentMethodOptionsBoleto = {
  __typename?: 'Stripe_PaymentMethodOptionsBoleto';
  /** The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time. */
  expires_after_days?: Maybe<Scalars['Int']>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentMethodOptionsBoletoSetupFutureUsageProperty>;
};

export enum Stripe_PaymentMethodOptionsBoletoSetupFutureUsageProperty {
  None = 'none',
  OffSession = 'off_session',
  OnSession = 'on_session'
}

export type Stripe_PaymentIntentPaymentMethodOptionsCardProperty = Stripe_PaymentIntentPaymentMethodOptionsCard | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentIntentPaymentMethodOptionsCard = {
  __typename?: 'Stripe_PaymentIntentPaymentMethodOptionsCard';
  /** Controls when the funds will be captured from the customer's account. */
  capture_method?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsCardCaptureMethodProperty>;
  installments?: Maybe<Stripe_PaymentMethodOptionsCardInstallments>;
  mandate_options?: Maybe<Stripe_PaymentMethodOptionsCardMandateOptions>;
  /** Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time. */
  network?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsCardNetworkProperty>;
  /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
  request_three_d_secure?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsCardRequestThreeDSecureProperty>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsCardSetupFutureUsageProperty>;
};

export enum Stripe_PaymentIntentPaymentMethodOptionsCardCaptureMethodProperty {
  Manual = 'manual'
}

export type Stripe_PaymentMethodOptionsCardInstallments = {
  __typename?: 'Stripe_PaymentMethodOptionsCardInstallments';
  /** Installment plans that may be selected for this PaymentIntent. */
  available_plans?: Maybe<Array<Maybe<Stripe_PaymentMethodDetailsCardInstallmentsPlan>>>;
  /** Whether Installments are enabled for this PaymentIntent. */
  enabled?: Maybe<Scalars['Boolean']>;
  plan?: Maybe<Stripe_PaymentMethodDetailsCardInstallmentsPlan>;
};

export type Stripe_PaymentMethodOptionsCardMandateOptions = {
  __typename?: 'Stripe_PaymentMethodOptionsCardMandateOptions';
  /** Amount to be charged for future payments. */
  amount?: Maybe<Scalars['Int']>;
  /** One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param. */
  amount_type?: Maybe<Stripe_PaymentMethodOptionsCardMandateOptionsAmountTypeProperty>;
  /** A description of the mandate or subscription that is meant to be displayed to the customer. */
  description?: Maybe<Scalars['String']>;
  /** End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date. */
  end_date?: Maybe<Scalars['Int']>;
  /** Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`. */
  interval?: Maybe<Stripe_PaymentMethodOptionsCardMandateOptionsIntervalProperty>;
  /** The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`. */
  interval_count?: Maybe<Scalars['Int']>;
  /** Unique identifier for the mandate or subscription. */
  reference?: Maybe<Scalars['String']>;
  /** Start date of the mandate or subscription. Start date should not be lesser than yesterday. */
  start_date?: Maybe<Scalars['Int']>;
  /** Specifies the type of mandates supported. Possible values are `india`. */
  supported_types?: Maybe<Array<Maybe<Stripe_PaymentMethodOptionsCardMandateOptionsSupportedTypesProperty>>>;
};

export enum Stripe_PaymentMethodOptionsCardMandateOptionsAmountTypeProperty {
  Fixed = 'fixed',
  Maximum = 'maximum'
}

export enum Stripe_PaymentMethodOptionsCardMandateOptionsIntervalProperty {
  Day = 'day',
  Month = 'month',
  Sporadic = 'sporadic',
  Week = 'week',
  Year = 'year'
}

export enum Stripe_PaymentMethodOptionsCardMandateOptionsSupportedTypesProperty {
  India = 'india'
}

export enum Stripe_PaymentIntentPaymentMethodOptionsCardNetworkProperty {
  Amex = 'amex',
  CartesBancaires = 'cartes_bancaires',
  Diners = 'diners',
  Discover = 'discover',
  Interac = 'interac',
  Jcb = 'jcb',
  Mastercard = 'mastercard',
  Unionpay = 'unionpay',
  Unknown = 'unknown',
  Visa = 'visa'
}

export enum Stripe_PaymentIntentPaymentMethodOptionsCardRequestThreeDSecureProperty {
  Any = 'any',
  Automatic = 'automatic',
  ChallengeOnly = 'challenge_only'
}

export enum Stripe_PaymentIntentPaymentMethodOptionsCardSetupFutureUsageProperty {
  None = 'none',
  OffSession = 'off_session',
  OnSession = 'on_session'
}

export type Stripe_PaymentIntentPaymentMethodOptionsCardPresentProperty = Stripe_PaymentMethodOptionsCardPresent | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentMethodOptionsCardPresent = {
  __typename?: 'Stripe_PaymentMethodOptionsCardPresent';
  /** Request ability to capture this payment beyond the standard [authorization validity window](https://stripe.com/docs/terminal/features/extended-authorizations#authorization-validity) */
  request_extended_authorization?: Maybe<Scalars['Boolean']>;
  /** Request ability to [increment](https://stripe.com/docs/terminal/features/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https://stripe.com/docs/api/payment_intents/confirm) response to verify support. */
  request_incremental_authorization_support?: Maybe<Scalars['Boolean']>;
};

export type Stripe_PaymentIntentPaymentMethodOptionsCustomerBalanceProperty = Stripe_PaymentMethodOptionsCustomerBalance | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentMethodOptionsCustomerBalance = {
  __typename?: 'Stripe_PaymentMethodOptionsCustomerBalance';
  bank_transfer?: Maybe<Stripe_PaymentMethodOptionsCustomerBalanceBankTransfer>;
  /** The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`. */
  funding_type?: Maybe<Stripe_PaymentMethodOptionsCustomerBalanceFundingTypeProperty>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentMethodOptionsCustomerBalanceSetupFutureUsageProperty>;
};

export type Stripe_PaymentMethodOptionsCustomerBalanceBankTransfer = {
  __typename?: 'Stripe_PaymentMethodOptionsCustomerBalanceBankTransfer';
  /**
   * List of address types that should be returned in the financial_addresses response. If not specified, all valid types will be returned.
   *
   * Permitted values include: `zengin`.
   */
  requested_address_types?: Maybe<Array<Maybe<Stripe_PaymentMethodOptionsCustomerBalanceBankTransferRequestedAddressTypesProperty>>>;
  /** The bank transfer type that this PaymentIntent is allowed to use for funding. Permitted values include: `us_bank_account`, `eu_bank_account`, `id_bank_account`, `gb_bank_account`, `jp_bank_account`, `mx_bank_account`, `eu_bank_transfer`, `gb_bank_transfer`, `id_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`. */
  type?: Maybe<Stripe_PaymentMethodOptionsCustomerBalanceBankTransferTypeProperty>;
};

export enum Stripe_PaymentMethodOptionsCustomerBalanceBankTransferRequestedAddressTypesProperty {
  Zengin = 'zengin'
}

export enum Stripe_PaymentMethodOptionsCustomerBalanceBankTransferTypeProperty {
  EuBankAccount = 'eu_bank_account',
  EuBankTransfer = 'eu_bank_transfer',
  GbBankAccount = 'gb_bank_account',
  GbBankTransfer = 'gb_bank_transfer',
  IdBankAccount = 'id_bank_account',
  IdBankTransfer = 'id_bank_transfer',
  JpBankAccount = 'jp_bank_account',
  JpBankTransfer = 'jp_bank_transfer',
  MxBankAccount = 'mx_bank_account',
  MxBankTransfer = 'mx_bank_transfer',
  UsBankAccount = 'us_bank_account',
  UsBankTransfer = 'us_bank_transfer'
}

export enum Stripe_PaymentMethodOptionsCustomerBalanceFundingTypeProperty {
  BankTransfer = 'bank_transfer'
}

export enum Stripe_PaymentMethodOptionsCustomerBalanceSetupFutureUsageProperty {
  None = 'none'
}

export type Stripe_PaymentIntentPaymentMethodOptionsEpsProperty = Stripe_PaymentIntentPaymentMethodOptionsEps | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentIntentPaymentMethodOptionsEps = {
  __typename?: 'Stripe_PaymentIntentPaymentMethodOptionsEps';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsEpsSetupFutureUsageProperty>;
};

export enum Stripe_PaymentIntentPaymentMethodOptionsEpsSetupFutureUsageProperty {
  None = 'none'
}

export type Stripe_PaymentIntentPaymentMethodOptionsFpxProperty = Stripe_PaymentMethodOptionsFpx | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentMethodOptionsFpx = {
  __typename?: 'Stripe_PaymentMethodOptionsFpx';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentMethodOptionsFpxSetupFutureUsageProperty>;
};

export enum Stripe_PaymentMethodOptionsFpxSetupFutureUsageProperty {
  None = 'none'
}

export type Stripe_PaymentIntentPaymentMethodOptionsGiropayProperty = Stripe_PaymentMethodOptionsGiropay | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentMethodOptionsGiropay = {
  __typename?: 'Stripe_PaymentMethodOptionsGiropay';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentMethodOptionsGiropaySetupFutureUsageProperty>;
};

export enum Stripe_PaymentMethodOptionsGiropaySetupFutureUsageProperty {
  None = 'none'
}

export type Stripe_PaymentIntentPaymentMethodOptionsGrabpayProperty = Stripe_PaymentMethodOptionsGrabpay | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentMethodOptionsGrabpay = {
  __typename?: 'Stripe_PaymentMethodOptionsGrabpay';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentMethodOptionsGrabpaySetupFutureUsageProperty>;
};

export enum Stripe_PaymentMethodOptionsGrabpaySetupFutureUsageProperty {
  None = 'none'
}

export type Stripe_PaymentIntentPaymentMethodOptionsIdealProperty = Stripe_PaymentMethodOptionsIdeal | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentMethodOptionsIdeal = {
  __typename?: 'Stripe_PaymentMethodOptionsIdeal';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentMethodOptionsIdealSetupFutureUsageProperty>;
};

export enum Stripe_PaymentMethodOptionsIdealSetupFutureUsageProperty {
  None = 'none',
  OffSession = 'off_session'
}

export type Stripe_PaymentIntentPaymentMethodOptionsInteracPresentProperty = Stripe_PaymentMethodOptionsInteracPresent | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentMethodOptionsInteracPresent = {
  __typename?: 'Stripe_PaymentMethodOptionsInteracPresent';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentIntentPaymentMethodOptionsKlarnaProperty = Stripe_PaymentMethodOptionsKlarna | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentMethodOptionsKlarna = {
  __typename?: 'Stripe_PaymentMethodOptionsKlarna';
  /** Controls when the funds will be captured from the customer's account. */
  capture_method?: Maybe<Stripe_PaymentMethodOptionsKlarnaCaptureMethodProperty>;
  /** Preferred locale of the Klarna checkout page that the customer is redirected to. */
  preferred_locale?: Maybe<Scalars['String']>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentMethodOptionsKlarnaSetupFutureUsageProperty>;
};

export enum Stripe_PaymentMethodOptionsKlarnaCaptureMethodProperty {
  Manual = 'manual'
}

export enum Stripe_PaymentMethodOptionsKlarnaSetupFutureUsageProperty {
  None = 'none'
}

export type Stripe_PaymentIntentPaymentMethodOptionsKonbiniProperty = Stripe_PaymentMethodOptionsKonbini | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentMethodOptionsKonbini = {
  __typename?: 'Stripe_PaymentMethodOptionsKonbini';
  /** An optional 10 to 11 digit numeric-only string determining the confirmation code at applicable convenience stores. */
  confirmation_number?: Maybe<Scalars['String']>;
  /** The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST. */
  expires_after_days?: Maybe<Scalars['Int']>;
  /** The timestamp at which the Konbini payment instructions will expire. Only one of `expires_after_days` or `expires_at` may be set. */
  expires_at?: Maybe<Scalars['Int']>;
  /** A product descriptor of up to 22 characters, which will appear to customers at the convenience store. */
  product_description?: Maybe<Scalars['String']>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentMethodOptionsKonbiniSetupFutureUsageProperty>;
};

export enum Stripe_PaymentMethodOptionsKonbiniSetupFutureUsageProperty {
  None = 'none'
}

export type Stripe_PaymentIntentPaymentMethodOptionsOxxoProperty = Stripe_PaymentMethodOptionsOxxo | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentMethodOptionsOxxo = {
  __typename?: 'Stripe_PaymentMethodOptionsOxxo';
  /** The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time. */
  expires_after_days?: Maybe<Scalars['Int']>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentMethodOptionsOxxoSetupFutureUsageProperty>;
};

export enum Stripe_PaymentMethodOptionsOxxoSetupFutureUsageProperty {
  None = 'none'
}

export type Stripe_PaymentIntentPaymentMethodOptionsP24Property = Stripe_PaymentMethodOptionsP24 | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentMethodOptionsP24 = {
  __typename?: 'Stripe_PaymentMethodOptionsP24';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentMethodOptionsP24SetupFutureUsageProperty>;
};

export enum Stripe_PaymentMethodOptionsP24SetupFutureUsageProperty {
  None = 'none'
}

export type Stripe_PaymentIntentPaymentMethodOptionsPaynowProperty = Stripe_PaymentMethodOptionsPaynow | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentMethodOptionsPaynow = {
  __typename?: 'Stripe_PaymentMethodOptionsPaynow';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentMethodOptionsPaynowSetupFutureUsageProperty>;
};

export enum Stripe_PaymentMethodOptionsPaynowSetupFutureUsageProperty {
  None = 'none'
}

export type Stripe_PaymentIntentPaymentMethodOptionsSepaDebitProperty = Stripe_PaymentIntentPaymentMethodOptionsSepaDebit | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentIntentPaymentMethodOptionsSepaDebit = {
  __typename?: 'Stripe_PaymentIntentPaymentMethodOptionsSepaDebit';
  mandate_options?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsSepaDebitSetupFutureUsageProperty>;
};

export type Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit = {
  __typename?: 'Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit';
  result?: Maybe<Scalars['JSONObject']>;
};

export enum Stripe_PaymentIntentPaymentMethodOptionsSepaDebitSetupFutureUsageProperty {
  None = 'none',
  OffSession = 'off_session',
  OnSession = 'on_session'
}

export type Stripe_PaymentIntentPaymentMethodOptionsSofortProperty = Stripe_PaymentMethodOptionsSofort | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentMethodOptionsSofort = {
  __typename?: 'Stripe_PaymentMethodOptionsSofort';
  /** Preferred language of the SOFORT authorization page that the customer is redirected to. */
  preferred_language?: Maybe<Stripe_PaymentMethodOptionsSofortPreferredLanguageProperty>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentMethodOptionsSofortSetupFutureUsageProperty>;
};

export enum Stripe_PaymentMethodOptionsSofortPreferredLanguageProperty {
  De = 'de',
  En = 'en',
  Es = 'es',
  Fr = 'fr',
  It = 'it',
  Nl = 'nl',
  Pl = 'pl'
}

export enum Stripe_PaymentMethodOptionsSofortSetupFutureUsageProperty {
  None = 'none',
  OffSession = 'off_session'
}

export type Stripe_PaymentIntentPaymentMethodOptionsUsBankAccountProperty = Stripe_PaymentIntentPaymentMethodOptionsUsBankAccount | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentIntentPaymentMethodOptionsUsBankAccount = {
  __typename?: 'Stripe_PaymentIntentPaymentMethodOptionsUsBankAccount';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsUsBankAccountSetupFutureUsageProperty>;
  /** Bank account verification method. */
  verification_method?: Maybe<Stripe_PaymentIntentPaymentMethodOptionsUsBankAccountVerificationMethodProperty>;
};

export enum Stripe_PaymentIntentPaymentMethodOptionsUsBankAccountSetupFutureUsageProperty {
  None = 'none',
  OffSession = 'off_session',
  OnSession = 'on_session'
}

export enum Stripe_PaymentIntentPaymentMethodOptionsUsBankAccountVerificationMethodProperty {
  Automatic = 'automatic',
  Instant = 'instant',
  Microdeposits = 'microdeposits'
}

export type Stripe_PaymentIntentPaymentMethodOptionsWechatPayProperty = Stripe_PaymentMethodOptionsWechatPay | Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type Stripe_PaymentMethodOptionsWechatPay = {
  __typename?: 'Stripe_PaymentMethodOptionsWechatPay';
  /** The app ID registered with WeChat Pay. Only required when client is ios or android. */
  app_id?: Maybe<Scalars['String']>;
  /** The client type that the end customer will pay from */
  client?: Maybe<Stripe_PaymentMethodOptionsWechatPayClientProperty>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: Maybe<Stripe_PaymentMethodOptionsWechatPaySetupFutureUsageProperty>;
};

export enum Stripe_PaymentMethodOptionsWechatPayClientProperty {
  Android = 'android',
  Ios = 'ios',
  Web = 'web'
}

export enum Stripe_PaymentMethodOptionsWechatPaySetupFutureUsageProperty {
  None = 'none'
}

export type Stripe_PaymentIntentProcessing = {
  __typename?: 'Stripe_PaymentIntentProcessing';
  card?: Maybe<Stripe_PaymentIntentCardProcessing>;
  /** Type of the payment method for which payment is in `processing` state, one of `card`. */
  type?: Maybe<Stripe_PaymentIntentProcessingTypeProperty>;
};

export type Stripe_PaymentIntentCardProcessing = {
  __typename?: 'Stripe_PaymentIntentCardProcessing';
  customer_notification?: Maybe<Stripe_PaymentIntentProcessingCustomerNotification>;
};

export type Stripe_PaymentIntentProcessingCustomerNotification = {
  __typename?: 'Stripe_PaymentIntentProcessingCustomerNotification';
  /** Whether customer approval has been requested for this payment. For payments greater than INR 5000 or mandate amount, the customer must provide explicit approval of the payment with their bank. */
  approval_requested?: Maybe<Scalars['Boolean']>;
  /** If customer approval is required, they need to provide approval before this time. */
  completes_at?: Maybe<Scalars['Int']>;
};

export enum Stripe_PaymentIntentProcessingTypeProperty {
  Card = 'card'
}

export type Stripe_PaymentIntentReviewProperty = WrappedString | Stripe_Review;

export enum Stripe_PaymentIntentSetupFutureUsageProperty {
  OffSession = 'off_session',
  OnSession = 'on_session'
}

export enum Stripe_PaymentIntentStatusProperty {
  Canceled = 'canceled',
  Processing = 'processing',
  RequiresAction = 'requires_action',
  RequiresCapture = 'requires_capture',
  RequiresConfirmation = 'requires_confirmation',
  RequiresPaymentMethod = 'requires_payment_method',
  Succeeded = 'succeeded'
}

export type Stripe_TransferData = {
  __typename?: 'Stripe_TransferData';
  /** Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
  amount?: Maybe<Scalars['Int']>;
  destination?: Maybe<Stripe_TransferDataDestinationProperty>;
};

export type Stripe_TransferDataDestinationProperty = WrappedString | Stripe_Account;

export type Stripe_Invoiceitem = {
  __typename?: 'Stripe_Invoiceitem';
  /** Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`. */
  amount?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  customer?: Maybe<Scalars['String']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  date?: Maybe<Scalars['Int']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** If true, discounts will apply to this invoice item. Always false for prorations. */
  discountable?: Maybe<Scalars['Boolean']>;
  /** The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. */
  discounts?: Maybe<Array<Maybe<Stripe_InvoiceitemDiscountsProperty>>>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  invoice?: Maybe<Stripe_InvoiceitemInvoiceProperty>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_InvoiceitemObjectProperty>;
  period?: Maybe<Stripe_InvoiceLineItemPeriod>;
  price?: Maybe<Stripe_Price>;
  /** Whether the invoice item was created automatically as a proration adjustment when the customer switched plans. */
  proration?: Maybe<Scalars['Boolean']>;
  /** Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for. */
  quantity?: Maybe<Scalars['Int']>;
  subscription?: Maybe<Stripe_InvoiceitemSubscriptionProperty>;
  /** The subscription item that this invoice item has been created for, if any. */
  subscription_item?: Maybe<Scalars['String']>;
  /** The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. */
  tax_rates?: Maybe<Array<Maybe<Stripe_TaxRate>>>;
  test_clock?: Maybe<Stripe_InvoiceitemTestClockProperty>;
  /** Unit amount (in the `currency` specified) of the invoice item. */
  unit_amount?: Maybe<Scalars['Int']>;
  /** Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. */
  unit_amount_decimal?: Maybe<Scalars['String']>;
};

export type Stripe_InvoiceitemDiscountsProperty = WrappedString | Stripe_Discount;

export type Stripe_InvoiceitemInvoiceProperty = WrappedString | Stripe_Invoice;

export enum Stripe_InvoiceitemObjectProperty {
  Invoiceitem = 'invoiceitem'
}

export type Stripe_InvoiceitemSubscriptionProperty = WrappedString | Stripe_Subscription;

export type Stripe_InvoiceitemTestClockProperty = WrappedString | Stripe_TestHelpersTestClock;

export type ShipEngine_Label = {
  __typename?: 'ShipEngine_Label';
  label_id?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  shipment_id?: Maybe<Scalars['String']>;
  ship_date?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['String']>;
  tracking_number?: Maybe<Scalars['String']>;
  batch_id?: Maybe<Scalars['String']>;
  carrier_id?: Maybe<Scalars['String']>;
  charge_event?: Maybe<Scalars['String']>;
  service_code?: Maybe<Scalars['String']>;
  package_code?: Maybe<Scalars['String']>;
  voided_at?: Maybe<Scalars['String']>;
  label_format?: Maybe<Scalars['String']>;
  display_scheme?: Maybe<Scalars['String']>;
  label_layout?: Maybe<Scalars['String']>;
  label_image_id?: Maybe<Scalars['String']>;
  carrier_code?: Maybe<Scalars['String']>;
  tracking_status?: Maybe<Scalars['String']>;
  label_download?: Maybe<ShipEngine_LabelDownload>;
  trackable?: Maybe<Scalars['Boolean']>;
  packages?: Maybe<Array<Maybe<ShipEngine_Package>>>;
};

export type ShipEngine_LabelDownload = {
  __typename?: 'ShipEngine_LabelDownload';
  href?: Maybe<Scalars['String']>;
  pdf?: Maybe<Scalars['String']>;
  png?: Maybe<Scalars['String']>;
  zpl?: Maybe<Scalars['String']>;
};

export type ShipEngine_Package = {
  __typename?: 'ShipEngine_Package';
  package_id?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  package_code?: Maybe<Scalars['String']>;
  tracking_number?: Maybe<Scalars['String']>;
  label_download?: Maybe<ShipEngine_LabelDownload>;
  weight?: Maybe<ShipEngine_Weight>;
  dimensions?: Maybe<ShipEngine_Dimensions>;
};

export type ShipEngine_Weight = {
  __typename?: 'ShipEngine_Weight';
  value?: Maybe<Scalars['Float']>;
  unit?: Maybe<Scalars['String']>;
};

export type ShipEngine_Dimensions = {
  __typename?: 'ShipEngine_Dimensions';
  length?: Maybe<Scalars['Float']>;
  width?: Maybe<Scalars['Float']>;
  height?: Maybe<Scalars['Float']>;
  unit?: Maybe<Scalars['String']>;
};

export type Stripe_ApiErrorsSourceProperty = Stripe_BankAccount | Stripe_Card | Stripe_Source;

export enum Stripe_ApiErrorsTypeProperty {
  ApiError = 'api_error',
  CardError = 'card_error',
  IdempotencyError = 'idempotency_error',
  InvalidRequestError = 'invalid_request_error'
}

export type Stripe_SetupAttemptSetupIntentProperty = WrappedString | Stripe_SetupIntent;

export type Stripe_Networks = {
  __typename?: 'Stripe_Networks';
  /** All available networks for the card. */
  available?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The preferred network for the card. */
  preferred?: Maybe<Scalars['String']>;
};

export type Stripe_ThreeDSecureUsage = {
  __typename?: 'Stripe_ThreeDSecureUsage';
  /** Whether 3D Secure is supported on this card. */
  supported?: Maybe<Scalars['Boolean']>;
};

export type Stripe_PaymentMethodCardWallet = {
  __typename?: 'Stripe_PaymentMethodCardWallet';
  amex_express_checkout?: Maybe<Stripe_PaymentMethodCardWalletAmexExpressCheckout>;
  apple_pay?: Maybe<Stripe_PaymentMethodCardWalletApplePay>;
  /** (For tokenized numbers only.) The last four digits of the device account number. */
  dynamic_last4?: Maybe<Scalars['String']>;
  google_pay?: Maybe<Stripe_PaymentMethodCardWalletGooglePay>;
  masterpass?: Maybe<Stripe_PaymentMethodCardWalletMasterpass>;
  samsung_pay?: Maybe<Stripe_PaymentMethodCardWalletSamsungPay>;
  /** The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type. */
  type?: Maybe<Stripe_PaymentMethodCardWalletTypeProperty>;
  visa_checkout?: Maybe<Stripe_PaymentMethodCardWalletVisaCheckout>;
};

export type Stripe_PaymentMethodCardWalletAmexExpressCheckout = {
  __typename?: 'Stripe_PaymentMethodCardWalletAmexExpressCheckout';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodCardWalletApplePay = {
  __typename?: 'Stripe_PaymentMethodCardWalletApplePay';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodCardWalletGooglePay = {
  __typename?: 'Stripe_PaymentMethodCardWalletGooglePay';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodCardWalletMasterpass = {
  __typename?: 'Stripe_PaymentMethodCardWalletMasterpass';
  billing_address?: Maybe<Stripe_Address>;
  /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  email?: Maybe<Scalars['String']>;
  /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  name?: Maybe<Scalars['String']>;
  shipping_address?: Maybe<Stripe_Address>;
};

export type Stripe_PaymentMethodCardWalletSamsungPay = {
  __typename?: 'Stripe_PaymentMethodCardWalletSamsungPay';
  result?: Maybe<Scalars['JSONObject']>;
};

export enum Stripe_PaymentMethodCardWalletTypeProperty {
  AmexExpressCheckout = 'amex_express_checkout',
  ApplePay = 'apple_pay',
  GooglePay = 'google_pay',
  Masterpass = 'masterpass',
  SamsungPay = 'samsung_pay',
  VisaCheckout = 'visa_checkout'
}

export type Stripe_PaymentMethodCardWalletVisaCheckout = {
  __typename?: 'Stripe_PaymentMethodCardWalletVisaCheckout';
  billing_address?: Maybe<Stripe_Address>;
  /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  email?: Maybe<Scalars['String']>;
  /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  name?: Maybe<Scalars['String']>;
  shipping_address?: Maybe<Stripe_Address>;
};

export type Stripe_PaymentMethodCardPresent = {
  __typename?: 'Stripe_PaymentMethodCardPresent';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodCustomerProperty = WrappedString | Stripe_Customer;

export type Stripe_PaymentMethodCustomerBalance = {
  __typename?: 'Stripe_PaymentMethodCustomerBalance';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodEps = {
  __typename?: 'Stripe_PaymentMethodEps';
  /** The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`. */
  bank?: Maybe<Stripe_PaymentMethodEpsBankProperty>;
};

export enum Stripe_PaymentMethodEpsBankProperty {
  ArzteUndApothekerBank = 'arzte_und_apotheker_bank',
  AustrianAnadiBankAg = 'austrian_anadi_bank_ag',
  BankAustria = 'bank_austria',
  BankhausCarlSpangler = 'bankhaus_carl_spangler',
  BankhausSchelhammerUndSchatteraAg = 'bankhaus_schelhammer_und_schattera_ag',
  BawagPskAg = 'bawag_psk_ag',
  BksBankAg = 'bks_bank_ag',
  BrullKallmusBankAg = 'brull_kallmus_bank_ag',
  BtvVierLanderBank = 'btv_vier_lander_bank',
  CapitalBankGraweGruppeAg = 'capital_bank_grawe_gruppe_ag',
  Dolomitenbank = 'dolomitenbank',
  EasybankAg = 'easybank_ag',
  ErsteBankUndSparkassen = 'erste_bank_und_sparkassen',
  HypoAlpeadriabankInternationalAg = 'hypo_alpeadriabank_international_ag',
  HypoBankBurgenlandAktiengesellschaft = 'hypo_bank_burgenland_aktiengesellschaft',
  HypoNoeLbFurNiederosterreichUWien = 'hypo_noe_lb_fur_niederosterreich_u_wien',
  HypoOberosterreichSalzburgSteiermark = 'hypo_oberosterreich_salzburg_steiermark',
  HypoTirolBankAg = 'hypo_tirol_bank_ag',
  HypoVorarlbergBankAg = 'hypo_vorarlberg_bank_ag',
  MarchfelderBank = 'marchfelder_bank',
  OberbankAg = 'oberbank_ag',
  RaiffeisenBankengruppeOsterreich = 'raiffeisen_bankengruppe_osterreich',
  SchoellerbankAg = 'schoellerbank_ag',
  SpardaBankWien = 'sparda_bank_wien',
  VolksbankGruppe = 'volksbank_gruppe',
  VolkskreditbankAg = 'volkskreditbank_ag',
  VrBankBraunau = 'vr_bank_braunau'
}

export type Stripe_PaymentMethodFpx = {
  __typename?: 'Stripe_PaymentMethodFpx';
  /** The customer's bank, if provided. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`. */
  bank?: Maybe<Stripe_PaymentMethodFpxBankProperty>;
};

export enum Stripe_PaymentMethodFpxBankProperty {
  AffinBank = 'affin_bank',
  Agrobank = 'agrobank',
  AllianceBank = 'alliance_bank',
  Ambank = 'ambank',
  BankIslam = 'bank_islam',
  BankMuamalat = 'bank_muamalat',
  BankRakyat = 'bank_rakyat',
  Bsn = 'bsn',
  Cimb = 'cimb',
  DeutscheBank = 'deutsche_bank',
  HongLeongBank = 'hong_leong_bank',
  Hsbc = 'hsbc',
  Kfh = 'kfh',
  Maybank2e = 'maybank2e',
  Maybank2u = 'maybank2u',
  Ocbc = 'ocbc',
  PbEnterprise = 'pb_enterprise',
  PublicBank = 'public_bank',
  Rhb = 'rhb',
  StandardChartered = 'standard_chartered',
  Uob = 'uob'
}

export type Stripe_PaymentMethodGiropay = {
  __typename?: 'Stripe_PaymentMethodGiropay';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodGrabpay = {
  __typename?: 'Stripe_PaymentMethodGrabpay';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodIdeal = {
  __typename?: 'Stripe_PaymentMethodIdeal';
  /** The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`. */
  bank?: Maybe<Stripe_PaymentMethodIdealBankProperty>;
  /** The Bank Identifier Code of the customer's bank, if the bank was provided. */
  bic?: Maybe<Stripe_PaymentMethodIdealBicProperty>;
};

export enum Stripe_PaymentMethodIdealBankProperty {
  AbnAmro = 'abn_amro',
  AsnBank = 'asn_bank',
  Bunq = 'bunq',
  Handelsbanken = 'handelsbanken',
  Ing = 'ing',
  Knab = 'knab',
  Moneyou = 'moneyou',
  Rabobank = 'rabobank',
  Regiobank = 'regiobank',
  Revolut = 'revolut',
  SnsBank = 'sns_bank',
  TriodosBank = 'triodos_bank',
  VanLanschot = 'van_lanschot'
}

export enum Stripe_PaymentMethodIdealBicProperty {
  Abnanl2A = 'ABNANL2A',
  Asnbnl21 = 'ASNBNL21',
  Bunqnl2A = 'BUNQNL2A',
  Fvlbnl22 = 'FVLBNL22',
  Handnl2A = 'HANDNL2A',
  Ingbnl2A = 'INGBNL2A',
  Knabnl2H = 'KNABNL2H',
  Moyonl21 = 'MOYONL21',
  Rabonl2U = 'RABONL2U',
  Rbrbnl21 = 'RBRBNL21',
  Revolt21 = 'REVOLT21',
  Snsbnl2A = 'SNSBNL2A',
  Trionl2U = 'TRIONL2U'
}

export type Stripe_PaymentMethodInteracPresent = {
  __typename?: 'Stripe_PaymentMethodInteracPresent';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodKlarna = {
  __typename?: 'Stripe_PaymentMethodKlarna';
  dob?: Maybe<Stripe_PaymentFlowsPrivatePaymentMethodsKlarnaDob>;
};

export type Stripe_PaymentFlowsPrivatePaymentMethodsKlarnaDob = {
  __typename?: 'Stripe_PaymentFlowsPrivatePaymentMethodsKlarnaDob';
  /** The day of birth, between 1 and 31. */
  day?: Maybe<Scalars['Int']>;
  /** The month of birth, between 1 and 12. */
  month?: Maybe<Scalars['Int']>;
  /** The four-digit year of birth. */
  year?: Maybe<Scalars['Int']>;
};

export type Stripe_PaymentMethodKonbini = {
  __typename?: 'Stripe_PaymentMethodKonbini';
  result?: Maybe<Scalars['JSONObject']>;
};

export enum Stripe_PaymentMethodObjectProperty {
  PaymentMethod = 'payment_method'
}

export type Stripe_PaymentMethodOxxo = {
  __typename?: 'Stripe_PaymentMethodOxxo';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodP24 = {
  __typename?: 'Stripe_PaymentMethodP24';
  /** The customer's bank, if provided. */
  bank?: Maybe<Stripe_PaymentMethodP24BankProperty>;
};

export enum Stripe_PaymentMethodP24BankProperty {
  AliorBank = 'alior_bank',
  BankMillennium = 'bank_millennium',
  BankNowyBfgSa = 'bank_nowy_bfg_sa',
  BankPekaoSa = 'bank_pekao_sa',
  BankiSpbdzielcze = 'banki_spbdzielcze',
  Blik = 'blik',
  BnpParibas = 'bnp_paribas',
  Boz = 'boz',
  CitiHandlowy = 'citi_handlowy',
  CreditAgricole = 'credit_agricole',
  Envelobank = 'envelobank',
  EtransferPocztowy24 = 'etransfer_pocztowy24',
  GetinBank = 'getin_bank',
  Ideabank = 'ideabank',
  Ing = 'ing',
  Inteligo = 'inteligo',
  MbankMtransfer = 'mbank_mtransfer',
  NestPrzelew = 'nest_przelew',
  NoblePay = 'noble_pay',
  PbacZIpko = 'pbac_z_ipko',
  PlusBank = 'plus_bank',
  SantanderPrzelew24 = 'santander_przelew24',
  TmobileUsbugiBankowe = 'tmobile_usbugi_bankowe',
  ToyotaBank = 'toyota_bank',
  VolkswagenBank = 'volkswagen_bank'
}

export type Stripe_PaymentMethodPaynow = {
  __typename?: 'Stripe_PaymentMethodPaynow';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodSepaDebit = {
  __typename?: 'Stripe_PaymentMethodSepaDebit';
  /** Bank code of bank associated with the bank account. */
  bank_code?: Maybe<Scalars['String']>;
  /** Branch code of bank associated with the bank account. */
  branch_code?: Maybe<Scalars['String']>;
  /** Two-letter ISO code representing the country the bank account is located in. */
  country?: Maybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  generated_from?: Maybe<Stripe_SepaDebitGeneratedFrom>;
  /** Last four characters of the IBAN. */
  last4?: Maybe<Scalars['String']>;
};

export type Stripe_SepaDebitGeneratedFrom = {
  __typename?: 'Stripe_SepaDebitGeneratedFrom';
  charge?: Maybe<Stripe_SepaDebitGeneratedFromChargeProperty>;
  setup_attempt?: Maybe<Stripe_SepaDebitGeneratedFromSetupAttemptProperty>;
};

export type Stripe_SepaDebitGeneratedFromChargeProperty = WrappedString | Stripe_Charge;

export type Stripe_SepaDebitGeneratedFromSetupAttemptProperty = WrappedString | Stripe_SetupAttempt;

export type Stripe_PaymentMethodSofort = {
  __typename?: 'Stripe_PaymentMethodSofort';
  /** Two-letter ISO code representing the country the bank account is located in. */
  country?: Maybe<Scalars['String']>;
};

export enum Stripe_PaymentMethodTypeProperty {
  AcssDebit = 'acss_debit',
  AfterpayClearpay = 'afterpay_clearpay',
  Alipay = 'alipay',
  AuBecsDebit = 'au_becs_debit',
  BacsDebit = 'bacs_debit',
  Bancontact = 'bancontact',
  Boleto = 'boleto',
  Card = 'card',
  CardPresent = 'card_present',
  CustomerBalance = 'customer_balance',
  Eps = 'eps',
  Fpx = 'fpx',
  Giropay = 'giropay',
  Grabpay = 'grabpay',
  Ideal = 'ideal',
  InteracPresent = 'interac_present',
  Klarna = 'klarna',
  Konbini = 'konbini',
  Oxxo = 'oxxo',
  P24 = 'p24',
  Paynow = 'paynow',
  SepaDebit = 'sepa_debit',
  Sofort = 'sofort',
  UsBankAccount = 'us_bank_account',
  WechatPay = 'wechat_pay'
}

export type Stripe_PaymentMethodUsBankAccount = {
  __typename?: 'Stripe_PaymentMethodUsBankAccount';
  /** Account holder type: individual or company. */
  account_holder_type?: Maybe<Stripe_PaymentMethodUsBankAccountAccountHolderTypeProperty>;
  /** Account type: checkings or savings. Defaults to checking if omitted. */
  account_type?: Maybe<Stripe_PaymentMethodUsBankAccountAccountTypeProperty>;
  /** The name of the bank. */
  bank_name?: Maybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: Maybe<Scalars['String']>;
  /** Routing number of the bank account. */
  routing_number?: Maybe<Scalars['String']>;
};

export enum Stripe_PaymentMethodUsBankAccountAccountHolderTypeProperty {
  Company = 'company',
  Individual = 'individual'
}

export enum Stripe_PaymentMethodUsBankAccountAccountTypeProperty {
  Checking = 'checking',
  Savings = 'savings'
}

export type Stripe_PaymentMethodWechatPay = {
  __typename?: 'Stripe_PaymentMethodWechatPay';
  result?: Maybe<Scalars['JSONObject']>;
};

export enum Stripe_CustomerObjectProperty {
  Customer = 'customer'
}

/** The customer's payment sources, if any. */
export type Stripe_CustomerSourcesProperty = {
  __typename?: 'Stripe_CustomerSourcesProperty';
  /** Details about each object. */
  data: Array<Stripe_CustomerSourcesDataProperty>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Stripe_CustomerSourcesObjectProperty;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Stripe_CustomerSourcesDataProperty = Stripe_AlipayAccount | Stripe_BankAccount | Stripe_BitcoinReceiver | Stripe_Card | Stripe_Source;

export enum Stripe_CustomerSourcesObjectProperty {
  List = 'list'
}

/** The customer's current subscriptions, if any. */
export type Stripe_CustomerSubscriptionsProperty = {
  __typename?: 'Stripe_CustomerSubscriptionsProperty';
  /** Details about each object. */
  data: Array<Stripe_Subscription>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Stripe_CustomerSubscriptionsObjectProperty;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export enum Stripe_CustomerSubscriptionsObjectProperty {
  List = 'list'
}

export type Stripe_CustomerTax = {
  __typename?: 'Stripe_CustomerTax';
  /** Surfaces if automatic tax computation is possible given the current customer location information. */
  automatic_tax?: Maybe<Stripe_CustomerTaxAutomaticTaxProperty>;
  /** A recent IP address of the customer used for tax reporting and tax location inference. */
  ip_address?: Maybe<Scalars['String']>;
  location?: Maybe<Stripe_CustomerTaxLocation>;
};

export enum Stripe_CustomerTaxAutomaticTaxProperty {
  Failed = 'failed',
  NotCollecting = 'not_collecting',
  Supported = 'supported',
  UnrecognizedLocation = 'unrecognized_location'
}

export type Stripe_CustomerTaxLocation = {
  __typename?: 'Stripe_CustomerTaxLocation';
  /** The customer's country as identified by Stripe Tax. */
  country?: Maybe<Scalars['String']>;
  /** The data source used to infer the customer's location. */
  source?: Maybe<Stripe_CustomerTaxLocationSourceProperty>;
  /** The customer's state, county, province, or region as identified by Stripe Tax. */
  state?: Maybe<Scalars['String']>;
};

export enum Stripe_CustomerTaxLocationSourceProperty {
  BillingAddress = 'billing_address',
  IpAddress = 'ip_address',
  PaymentMethod = 'payment_method',
  ShippingDestination = 'shipping_destination'
}

export enum Stripe_CustomerTaxExemptProperty {
  Exempt = 'exempt',
  None = 'none',
  Reverse = 'reverse'
}

/** The customer's tax IDs. */
export type Stripe_CustomerTaxIdsProperty = {
  __typename?: 'Stripe_CustomerTaxIdsProperty';
  /** Details about each object. */
  data: Array<Stripe_TaxId>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Stripe_CustomerTaxIdsObjectProperty;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export enum Stripe_CustomerTaxIdsObjectProperty {
  List = 'list'
}

export type Stripe_CustomerTestClockProperty = WrappedString | Stripe_TestHelpersTestClock;

export type Voucherify_LoyaltyCard = {
  __typename?: 'Voucherify_LoyaltyCard';
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  campaign?: Maybe<Scalars['String']>;
  campaign_id?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  loyalty_card?: Maybe<Voucherify_LoyaltyCardStats>;
  active?: Maybe<Scalars['Boolean']>;
  assets?: Maybe<Voucherify_LoyaltyCardAssets>;
};

export type Voucherify_LoyaltyCardStats = {
  __typename?: 'Voucherify_LoyaltyCardStats';
  points?: Maybe<Scalars['Int']>;
  balance?: Maybe<Scalars['Int']>;
};

export type Voucherify_LoyaltyCardAssets = {
  __typename?: 'Voucherify_LoyaltyCardAssets';
  qr?: Maybe<Voucherify_LoyaltyCardAsset>;
  barcode?: Maybe<Voucherify_LoyaltyCardAsset>;
};

export type Voucherify_LoyaltyCardAsset = {
  __typename?: 'Voucherify_LoyaltyCardAsset';
  id?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentIntentPaginatedList = {
  __typename?: 'Stripe_PaymentIntentPaginatedList';
  items: Array<Stripe_PaymentIntent>;
  total: Scalars['Int'];
};

export type TsWhereStripePaymentIntentInput = {
  amount?: InputMaybe<TsWhereIntegerInput>;
  amount_capturable?: InputMaybe<TsWhereIntegerInput>;
  amount_details?: InputMaybe<TsWhereStripe_PaymentFlowsAmountDetailsInput>;
  amount_received?: InputMaybe<TsWhereIntegerInput>;
  application?: InputMaybe<TsWhereStripe_ApplicationWrappedStringUnionInput>;
  application_fee_amount?: InputMaybe<TsWhereIntegerInput>;
  automatic_payment_methods?: InputMaybe<TsWhereStripe_PaymentFlowsAutomaticPaymentMethodsPaymentIntentInput>;
  canceled_at?: InputMaybe<TsWhereIntegerInput>;
  cancellation_reason?: InputMaybe<TsWhereInput>;
  capture_method?: InputMaybe<TsWhereInput>;
  charges?: InputMaybe<TsWhereStripe_PaymentIntentChargesInput>;
  client_secret?: InputMaybe<TsWhereStringInput>;
  confirmation_method?: InputMaybe<TsWhereInput>;
  created?: InputMaybe<TsWhereIntegerInput>;
  currency?: InputMaybe<TsWhereStringInput>;
  customer?: InputMaybe<TsWhereStringInput>;
  description?: InputMaybe<TsWhereStringInput>;
  id?: InputMaybe<TsWhereStringInput>;
  invoice?: InputMaybe<TsWhereStripe_InvoiceWrappedStringUnionInput>;
  last_payment_error?: InputMaybe<TsWhereStripe_ApiErrorsInput>;
  livemode?: InputMaybe<TsWhereBooleanInput>;
  next_action?: InputMaybe<TsWhereStripe_PaymentIntentNextActionInput>;
  object?: InputMaybe<TsWhereInput>;
  on_behalf_of?: InputMaybe<TsWhereStripe_AccountWrappedStringUnionInput>;
  payment_method?: InputMaybe<TsWhereStripe_PaymentMethodWrappedStringUnionInput>;
  payment_method_options?: InputMaybe<TsWhereStripe_PaymentIntentPaymentMethodOptionsInput>;
  payment_method_types?: InputMaybe<TsWhereStripe_PaymentIntentPaymentMethodTypesInput>;
  processing?: InputMaybe<TsWhereStripe_PaymentIntentProcessingInput>;
  receipt_email?: InputMaybe<TsWhereStringInput>;
  review?: InputMaybe<TsWhereStripe_ReviewWrappedStringUnionInput>;
  setup_future_usage?: InputMaybe<TsWhereInput>;
  shipping?: InputMaybe<TsWhereStripe_ShippingInput>;
  statement_descriptor?: InputMaybe<TsWhereStringInput>;
  statement_descriptor_suffix?: InputMaybe<TsWhereStringInput>;
  status?: InputMaybe<TsWhereInput>;
  transfer_data?: InputMaybe<TsWhereStripe_TransferDataInput>;
  transfer_group?: InputMaybe<TsWhereStringInput>;
  invoiceItems?: InputMaybe<TsWhereStripe_InvoiceitemInput>;
  sessionItems?: InputMaybe<TsWhereStripe_ItemInput>;
  shipment?: InputMaybe<TsWhereShipEngine_LabelInput>;
  _shapeId?: InputMaybe<TsWhereIdInput>;
  _id?: InputMaybe<TsWhereIdInput>;
  AND?: InputMaybe<Array<InputMaybe<TsWhereStripePaymentIntentInput>>>;
  OR?: InputMaybe<Array<InputMaybe<TsWhereStripePaymentIntentInput>>>;
  NOT?: InputMaybe<TsWhereStripePaymentIntentInput>;
};

export type ProfilePaginatedList = {
  __typename?: 'ProfilePaginatedList';
  items: Array<Profile>;
  total: Scalars['Int'];
};

export type TsWhereProfileInput = {
  id?: InputMaybe<TsWhereStringInput>;
  name?: InputMaybe<TsWhereStringInput>;
  email?: InputMaybe<TsWhereStringInput>;
  bio?: InputMaybe<TsWhereStringInput>;
  avatar?: InputMaybe<TsWhereAssetRelationshipInput>;
  shopifyCustomerId?: InputMaybe<TsWhereStringInput>;
  stripeCustomerId?: InputMaybe<TsWhereStringInput>;
  _shapeId?: InputMaybe<TsWhereIdInput>;
  _id?: InputMaybe<TsWhereIdInput>;
  _version?: InputMaybe<TsWhereIntegerInput>;
  _shapeName?: InputMaybe<TsWhereStringInput>;
  _createdAt?: InputMaybe<TsWhereDateInput>;
  _updatedAt?: InputMaybe<TsWhereDateInput>;
  _schemaVersion?: InputMaybe<TsWhereNumberInput>;
  _status?: InputMaybe<TsWhereWorkflowInput>;
  _contentTypeId?: InputMaybe<TsWhereIdInput>;
  _contentTypeName?: InputMaybe<TsWhereStringInput>;
  AND?: InputMaybe<Array<InputMaybe<TsWhereProfileInput>>>;
  OR?: InputMaybe<Array<InputMaybe<TsWhereProfileInput>>>;
  NOT?: InputMaybe<TsWhereProfileInput>;
};

export type Stripe_ListProductsResponse = {
  __typename?: 'Stripe_ListProductsResponse';
  /** Details about each object. */
  data?: Maybe<Array<Maybe<Stripe_Product>>>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more?: Maybe<Scalars['Boolean']>;
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object?: Maybe<Stripe_ListProductsResponseObjectProperty>;
  /** The URL where this list can be accessed. */
  url?: Maybe<Scalars['String']>;
};

export enum Stripe_ListProductsResponseObjectProperty {
  List = 'list'
}

export type ProfileNewsletterStatus = {
  __typename?: 'ProfileNewsletterStatus';
  listId?: Maybe<Scalars['String']>;
  listName?: Maybe<Scalars['String']>;
  subscribed?: Maybe<Scalars['Boolean']>;
};

export type Stripe_ListInvoiceLinesResponse = {
  __typename?: 'Stripe_ListInvoiceLinesResponse';
  /** Details about each object. */
  data?: Maybe<Array<Maybe<Stripe_LineItem>>>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more?: Maybe<Scalars['Boolean']>;
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object?: Maybe<Stripe_ListInvoiceLinesResponseObjectProperty>;
  /** The URL where this list can be accessed. */
  url?: Maybe<Scalars['String']>;
};

export enum Stripe_ListInvoiceLinesResponseObjectProperty {
  List = 'list'
}

export type Stripe_ListPaymentIntentsResponse = {
  __typename?: 'Stripe_ListPaymentIntentsResponse';
  data?: Maybe<Array<Maybe<Stripe_PaymentIntent>>>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more?: Maybe<Scalars['Boolean']>;
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object?: Maybe<Stripe_ListPaymentIntentsResponseObjectProperty>;
  /** The URL where this list can be accessed. */
  url?: Maybe<Scalars['String']>;
};

export enum Stripe_ListPaymentIntentsResponseObjectProperty {
  List = 'list'
}

export type NavigationData = TsSearchable & {
  __typename?: 'NavigationData';
  message?: Maybe<Scalars['String']>;
  links?: Maybe<NavigationDataLinks>;
  _shapeId?: Maybe<Scalars['String']>;
  _id?: Maybe<Scalars['ID']>;
  _version?: Maybe<Scalars['Int']>;
  _shapeName?: Maybe<Scalars['String']>;
  _createdAt?: Maybe<Scalars['String']>;
  _createdBy?: Maybe<TsUser>;
  _updatedAt?: Maybe<Scalars['String']>;
  _updatedBy?: Maybe<TsUser>;
  _schemaVersion?: Maybe<Scalars['Float']>;
  /** @deprecated Use _status instead */
  _enabled?: Maybe<Scalars['Boolean']>;
  /** @deprecated Use a custom date field instead */
  _enabledAt?: Maybe<Scalars['String']>;
  _status?: Maybe<DefaultWorkflow>;
  _contentTypeId?: Maybe<Scalars['String']>;
  _contentTypeName?: Maybe<Scalars['String']>;
  searchSummary?: Maybe<Scalars['String']>;
};

export type NavigationDataLinks = {
  __typename?: 'NavigationDataLinks';
  categories?: Maybe<Array<Maybe<NavigationDataLinksCategories>>>;
  pages?: Maybe<Array<Maybe<NavigationDataLinksPages>>>;
};

export type NavigationDataLinksCategories = {
  __typename?: 'NavigationDataLinksCategories';
  name?: Maybe<Scalars['String']>;
  featured?: Maybe<Array<Maybe<NavigationDataLinksCategoriesFeatured>>>;
  collection?: Maybe<Array<Maybe<NavigationDataLinksCategoriesCollection>>>;
  categories?: Maybe<Array<Maybe<NavigationDataLinksCategoriesCategories>>>;
  brands?: Maybe<Array<Maybe<NavigationDataLinksCategoriesBrands>>>;
};

export type NavigationDataLinksCategoriesFeatured = {
  __typename?: 'NavigationDataLinksCategoriesFeatured';
  name?: Maybe<Scalars['String']>;
  href?: Maybe<Scalars['String']>;
};

export type NavigationDataLinksCategoriesCollection = {
  __typename?: 'NavigationDataLinksCategoriesCollection';
  name?: Maybe<Scalars['String']>;
  href?: Maybe<Scalars['String']>;
};

export type NavigationDataLinksCategoriesCategories = {
  __typename?: 'NavigationDataLinksCategoriesCategories';
  name?: Maybe<Scalars['String']>;
  href?: Maybe<Scalars['String']>;
};

export type NavigationDataLinksCategoriesBrands = {
  __typename?: 'NavigationDataLinksCategoriesBrands';
  name?: Maybe<Scalars['String']>;
  href?: Maybe<Scalars['String']>;
};

export type NavigationDataLinksPages = {
  __typename?: 'NavigationDataLinksPages';
  name?: Maybe<Scalars['String']>;
  href?: Maybe<Scalars['String']>;
};

export type Footer = TsSearchable & {
  __typename?: 'Footer';
  navigation?: Maybe<FooterNavigation>;
  newsletter?: Maybe<FooterNewsletter>;
  _shapeId?: Maybe<Scalars['String']>;
  _id?: Maybe<Scalars['ID']>;
  _version?: Maybe<Scalars['Int']>;
  _shapeName?: Maybe<Scalars['String']>;
  _createdAt?: Maybe<Scalars['String']>;
  _createdBy?: Maybe<TsUser>;
  _updatedAt?: Maybe<Scalars['String']>;
  _updatedBy?: Maybe<TsUser>;
  _schemaVersion?: Maybe<Scalars['Float']>;
  /** @deprecated Use _status instead */
  _enabled?: Maybe<Scalars['Boolean']>;
  /** @deprecated Use a custom date field instead */
  _enabledAt?: Maybe<Scalars['String']>;
  _status?: Maybe<DefaultWorkflow>;
  _contentTypeId?: Maybe<Scalars['String']>;
  _contentTypeName?: Maybe<Scalars['String']>;
  searchSummary?: Maybe<Scalars['String']>;
};

export type FooterNavigation = {
  __typename?: 'FooterNavigation';
  sections?: Maybe<Array<Maybe<FooterNavigationSections>>>;
};

export type FooterNavigationSections = {
  __typename?: 'FooterNavigationSections';
  name?: Maybe<Scalars['String']>;
  items?: Maybe<Array<Maybe<NavigationLink>>>;
};

export type NavigationLink = {
  __typename?: 'NavigationLink';
  name?: Maybe<Scalars['String']>;
  href?: Maybe<Scalars['String']>;
};

export type FooterNewsletter = {
  __typename?: 'FooterNewsletter';
  text?: Maybe<Text>;
};

/** Reusable text shape */
export type Text = {
  __typename?: 'Text';
  primary?: Maybe<Scalars['String']>;
  secondary?: Maybe<Scalars['String']>;
  button?: Maybe<Scalars['String']>;
};

export enum Shopify_ProductSortKeys {
  Title = 'TITLE',
  ProductType = 'PRODUCT_TYPE',
  Vendor = 'VENDOR',
  InventoryTotal = 'INVENTORY_TOTAL',
  UpdatedAt = 'UPDATED_AT',
  CreatedAt = 'CREATED_AT',
  PublishedAt = 'PUBLISHED_AT',
  Id = 'ID',
  Relevance = 'RELEVANCE'
}

/** A customer represents a customer account with the shop. Customer accounts store contact information for the customer, saving logged-in customers the trouble of having to provide it at every checkout. */
export type ShopifyStorefront_Customer = {
  __typename?: 'ShopifyStorefront_Customer';
  /** Indicates whether the customer has consented to be sent marketing material via email. */
  acceptsMarketing: Scalars['Boolean'];
  /** A list of addresses for the customer. */
  addresses: ShopifyStorefront_MailingAddressConnection;
  /** The date and time when the customer was created. */
  createdAt: Scalars['DateTime'];
  /** The customerâ€™s default address. */
  defaultAddress?: Maybe<ShopifyStorefront_MailingAddress>;
  /** The customerâ€™s name, email or phone number. */
  displayName: Scalars['String'];
  /** The customerâ€™s email address. */
  email?: Maybe<Scalars['String']>;
  /** The customerâ€™s first name. */
  firstName?: Maybe<Scalars['String']>;
  /** A unique identifier for the customer. */
  id: Scalars['ID'];
  /** The customer's most recently updated, incomplete checkout. */
  lastIncompleteCheckout?: Maybe<ShopifyStorefront_Checkout>;
  /** The customerâ€™s last name. */
  lastName?: Maybe<Scalars['String']>;
  /** Returns a metafield found by namespace and key. */
  metafield?: Maybe<ShopifyStorefront_Metafield>;
  /**
   * A paginated list of metafields associated with the resource.
   * @deprecated The `metafields` field will be removed in the future in favor of using [aliases](https://graphql.org/learn/queries/#aliases) with the `metafield` field.
   *
   */
  metafields: ShopifyStorefront_MetafieldConnection;
  /** The orders associated with the customer. */
  orders: ShopifyStorefront_OrderConnection;
  /** The customerâ€™s phone number. */
  phone?: Maybe<Scalars['String']>;
  /**
   * A comma separated list of tags that have been added to the customer.
   * Additional access scope required: unauthenticated_read_customer_tags.
   */
  tags: Array<Scalars['String']>;
  /** The date and time when the customer information was updated. */
  updatedAt: Scalars['DateTime'];
};


/** A customer represents a customer account with the shop. Customer accounts store contact information for the customer, saving logged-in customers the trouble of having to provide it at every checkout. */
export type ShopifyStorefront_CustomerAddressesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** A customer represents a customer account with the shop. Customer accounts store contact information for the customer, saving logged-in customers the trouble of having to provide it at every checkout. */
export type ShopifyStorefront_CustomerMetafieldArgs = {
  namespace: Scalars['String'];
  key: Scalars['String'];
};


/** A customer represents a customer account with the shop. Customer accounts store contact information for the customer, saving logged-in customers the trouble of having to provide it at every checkout. */
export type ShopifyStorefront_CustomerMetafieldsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** A customer represents a customer account with the shop. Customer accounts store contact information for the customer, saving logged-in customers the trouble of having to provide it at every checkout. */
export type ShopifyStorefront_CustomerOrdersArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<ShopifyStorefront_OrderSortKeys>;
  query?: InputMaybe<Scalars['String']>;
};

/** An auto-generated type for paginating through multiple MailingAddresses. */
export type ShopifyStorefront_MailingAddressConnection = {
  __typename?: 'ShopifyStorefront_MailingAddressConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_MailingAddressEdge>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one MailingAddress and a cursor during pagination. */
export type ShopifyStorefront_MailingAddressEdge = {
  __typename?: 'ShopifyStorefront_MailingAddressEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of MailingAddressEdge. */
  node: ShopifyStorefront_MailingAddress;
};

/** Represents a mailing address for customers and shipping. */
export type ShopifyStorefront_MailingAddress = {
  __typename?: 'ShopifyStorefront_MailingAddress';
  /** The first line of the address. Typically the street address or PO Box number. */
  address1?: Maybe<Scalars['String']>;
  /** The second line of the address. Typically the number of the apartment, suite, or unit. */
  address2?: Maybe<Scalars['String']>;
  /** The name of the city, district, village, or town. */
  city?: Maybe<Scalars['String']>;
  /** The name of the customer's company or organization. */
  company?: Maybe<Scalars['String']>;
  /** The name of the country. */
  country?: Maybe<Scalars['String']>;
  /**
   * The two-letter code for the country of the address.
   *
   * For example, US.
   * @deprecated Use `countryCodeV2` instead
   */
  countryCode?: Maybe<Scalars['String']>;
  /**
   * The two-letter code for the country of the address.
   *
   * For example, US.
   */
  countryCodeV2?: Maybe<ShopifyStorefront_CountryCode>;
  /** The first name of the customer. */
  firstName?: Maybe<Scalars['String']>;
  /** A formatted version of the address, customized by the provided arguments. */
  formatted: Array<Scalars['String']>;
  /** A comma-separated list of the values for city, province, and country. */
  formattedArea?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The last name of the customer. */
  lastName?: Maybe<Scalars['String']>;
  /** The latitude coordinate of the customer address. */
  latitude?: Maybe<Scalars['Float']>;
  /** The longitude coordinate of the customer address. */
  longitude?: Maybe<Scalars['Float']>;
  /** The full name of the customer, based on firstName and lastName. */
  name?: Maybe<Scalars['String']>;
  /**
   * A unique phone number for the customer.
   *
   * Formatted using E.164 standard. For example, _+16135551111_.
   */
  phone?: Maybe<Scalars['String']>;
  /** The region of the address, such as the province, state, or district. */
  province?: Maybe<Scalars['String']>;
  /**
   * The two-letter code for the region.
   *
   * For example, ON.
   */
  provinceCode?: Maybe<Scalars['String']>;
  /** The zip or postal code of the address. */
  zip?: Maybe<Scalars['String']>;
};


/** Represents a mailing address for customers and shipping. */
export type ShopifyStorefront_MailingAddressFormattedArgs = {
  withName?: InputMaybe<Scalars['Boolean']>;
  withCompany?: InputMaybe<Scalars['Boolean']>;
};

export enum ShopifyStorefront_CountryCode {
  Af = 'AF',
  Ax = 'AX',
  Al = 'AL',
  Dz = 'DZ',
  Ad = 'AD',
  Ao = 'AO',
  Ai = 'AI',
  Ag = 'AG',
  Ar = 'AR',
  Am = 'AM',
  Aw = 'AW',
  Ac = 'AC',
  Au = 'AU',
  At = 'AT',
  Az = 'AZ',
  Bs = 'BS',
  Bh = 'BH',
  Bd = 'BD',
  Bb = 'BB',
  By = 'BY',
  Be = 'BE',
  Bz = 'BZ',
  Bj = 'BJ',
  Bm = 'BM',
  Bt = 'BT',
  Bo = 'BO',
  Ba = 'BA',
  Bw = 'BW',
  Bv = 'BV',
  Br = 'BR',
  Io = 'IO',
  Bn = 'BN',
  Bg = 'BG',
  Bf = 'BF',
  Bi = 'BI',
  Kh = 'KH',
  Ca = 'CA',
  Cv = 'CV',
  Bq = 'BQ',
  Ky = 'KY',
  Cf = 'CF',
  Td = 'TD',
  Cl = 'CL',
  Cn = 'CN',
  Cx = 'CX',
  Cc = 'CC',
  Co = 'CO',
  Km = 'KM',
  Cg = 'CG',
  Cd = 'CD',
  Ck = 'CK',
  Cr = 'CR',
  Hr = 'HR',
  Cu = 'CU',
  Cw = 'CW',
  Cy = 'CY',
  Cz = 'CZ',
  Ci = 'CI',
  Dk = 'DK',
  Dj = 'DJ',
  Dm = 'DM',
  Do = 'DO',
  Ec = 'EC',
  Eg = 'EG',
  Sv = 'SV',
  Gq = 'GQ',
  Er = 'ER',
  Ee = 'EE',
  Sz = 'SZ',
  Et = 'ET',
  Fk = 'FK',
  Fo = 'FO',
  Fj = 'FJ',
  Fi = 'FI',
  Fr = 'FR',
  Gf = 'GF',
  Pf = 'PF',
  Tf = 'TF',
  Ga = 'GA',
  Gm = 'GM',
  Ge = 'GE',
  De = 'DE',
  Gh = 'GH',
  Gi = 'GI',
  Gr = 'GR',
  Gl = 'GL',
  Gd = 'GD',
  Gp = 'GP',
  Gt = 'GT',
  Gg = 'GG',
  Gn = 'GN',
  Gw = 'GW',
  Gy = 'GY',
  Ht = 'HT',
  Hm = 'HM',
  Va = 'VA',
  Hn = 'HN',
  Hk = 'HK',
  Hu = 'HU',
  Is = 'IS',
  In = 'IN',
  Id = 'ID',
  Ir = 'IR',
  Iq = 'IQ',
  Ie = 'IE',
  Im = 'IM',
  Il = 'IL',
  It = 'IT',
  Jm = 'JM',
  Jp = 'JP',
  Je = 'JE',
  Jo = 'JO',
  Kz = 'KZ',
  Ke = 'KE',
  Ki = 'KI',
  Kp = 'KP',
  Xk = 'XK',
  Kw = 'KW',
  Kg = 'KG',
  La = 'LA',
  Lv = 'LV',
  Lb = 'LB',
  Ls = 'LS',
  Lr = 'LR',
  Ly = 'LY',
  Li = 'LI',
  Lt = 'LT',
  Lu = 'LU',
  Mo = 'MO',
  Mg = 'MG',
  Mw = 'MW',
  My = 'MY',
  Mv = 'MV',
  Ml = 'ML',
  Mt = 'MT',
  Mq = 'MQ',
  Mr = 'MR',
  Mu = 'MU',
  Yt = 'YT',
  Mx = 'MX',
  Md = 'MD',
  Mc = 'MC',
  Mn = 'MN',
  Me = 'ME',
  Ms = 'MS',
  Ma = 'MA',
  Mz = 'MZ',
  Mm = 'MM',
  Na = 'NA',
  Nr = 'NR',
  Np = 'NP',
  Nl = 'NL',
  An = 'AN',
  Nc = 'NC',
  Nz = 'NZ',
  Ni = 'NI',
  Ne = 'NE',
  Ng = 'NG',
  Nu = 'NU',
  Nf = 'NF',
  Mk = 'MK',
  No = 'NO',
  Om = 'OM',
  Pk = 'PK',
  Ps = 'PS',
  Pa = 'PA',
  Pg = 'PG',
  Py = 'PY',
  Pe = 'PE',
  Ph = 'PH',
  Pn = 'PN',
  Pl = 'PL',
  Pt = 'PT',
  Qa = 'QA',
  Cm = 'CM',
  Re = 'RE',
  Ro = 'RO',
  Ru = 'RU',
  Rw = 'RW',
  Bl = 'BL',
  Sh = 'SH',
  Kn = 'KN',
  Lc = 'LC',
  Mf = 'MF',
  Pm = 'PM',
  Ws = 'WS',
  Sm = 'SM',
  St = 'ST',
  Sa = 'SA',
  Sn = 'SN',
  Rs = 'RS',
  Sc = 'SC',
  Sl = 'SL',
  Sg = 'SG',
  Sx = 'SX',
  Sk = 'SK',
  Si = 'SI',
  Sb = 'SB',
  So = 'SO',
  Za = 'ZA',
  Gs = 'GS',
  Kr = 'KR',
  Ss = 'SS',
  Es = 'ES',
  Lk = 'LK',
  Vc = 'VC',
  Sd = 'SD',
  Sr = 'SR',
  Sj = 'SJ',
  Se = 'SE',
  Ch = 'CH',
  Sy = 'SY',
  Tw = 'TW',
  Tj = 'TJ',
  Tz = 'TZ',
  Th = 'TH',
  Tl = 'TL',
  Tg = 'TG',
  Tk = 'TK',
  To = 'TO',
  Tt = 'TT',
  Ta = 'TA',
  Tn = 'TN',
  Tr = 'TR',
  Tm = 'TM',
  Tc = 'TC',
  Tv = 'TV',
  Ug = 'UG',
  Ua = 'UA',
  Ae = 'AE',
  Gb = 'GB',
  Us = 'US',
  Um = 'UM',
  Uy = 'UY',
  Uz = 'UZ',
  Vu = 'VU',
  Ve = 'VE',
  Vn = 'VN',
  Vg = 'VG',
  Wf = 'WF',
  Eh = 'EH',
  Ye = 'YE',
  Zm = 'ZM',
  Zw = 'ZW',
  Zz = 'ZZ'
}

/**
 * Returns information about pagination in a connection, in accordance with the
 * [Relay specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).
 */
export type ShopifyStorefront_PageInfo = {
  __typename?: 'ShopifyStorefront_PageInfo';
  /** Whether there are more pages to fetch following the current page. */
  hasNextPage: Scalars['Boolean'];
  /** Whether there are any pages prior to the current page. */
  hasPreviousPage: Scalars['Boolean'];
};

/** A container for all the information required to checkout items and pay. */
export type ShopifyStorefront_Checkout = {
  __typename?: 'ShopifyStorefront_Checkout';
  /** The gift cards used on the checkout. */
  appliedGiftCards: Array<ShopifyStorefront_AppliedGiftCard>;
  /**
   * The available shipping rates for this Checkout.
   * Should only be used when checkout `requiresShipping` is `true` and
   * the shipping address is valid.
   */
  availableShippingRates?: Maybe<ShopifyStorefront_AvailableShippingRates>;
  /** The identity of the customer associated with the checkout. */
  buyerIdentity: ShopifyStorefront_CheckoutBuyerIdentity;
  /** The date and time when the checkout was completed. */
  completedAt?: Maybe<Scalars['DateTime']>;
  /** The date and time when the checkout was created. */
  createdAt: Scalars['DateTime'];
  /** The currency code for the checkout. */
  currencyCode: ShopifyStorefront_CurrencyCode;
  /** A list of extra information that is added to the checkout. */
  customAttributes: Array<ShopifyStorefront_Attribute>;
  /** Discounts that have been applied on the checkout. */
  discountApplications: ShopifyStorefront_DiscountApplicationConnection;
  /** The email attached to this checkout. */
  email?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** A list of line item objects, each one containing information about an item in the checkout. */
  lineItems: ShopifyStorefront_CheckoutLineItemConnection;
  /** The sum of all the prices of all the items in the checkout. Duties, taxes, shipping and discounts excluded. */
  lineItemsSubtotalPrice: ShopifyStorefront_MoneyV2;
  /** The note associated with the checkout. */
  note?: Maybe<Scalars['String']>;
  /** The resulting order from a paid checkout. */
  order?: Maybe<ShopifyStorefront_Order>;
  /** The Order Status Page for this Checkout, null when checkout is not completed. */
  orderStatusUrl?: Maybe<Scalars['Url']>;
  /**
   * The amount left to be paid. This is equal to the cost of the line items, taxes and shipping minus discounts and gift cards.
   * @deprecated Use `paymentDueV2` instead
   */
  paymentDue: Scalars['Money'];
  /** The amount left to be paid. This is equal to the cost of the line items, duties, taxes and shipping minus discounts and gift cards. */
  paymentDueV2: ShopifyStorefront_MoneyV2;
  /**
   * Whether or not the Checkout is ready and can be completed. Checkouts may
   * have asynchronous operations that can take time to finish. If you want
   * to complete a checkout or ensure all the fields are populated and up to
   * date, polling is required until the value is true.
   */
  ready: Scalars['Boolean'];
  /** States whether or not the fulfillment requires shipping. */
  requiresShipping: Scalars['Boolean'];
  /** The shipping address to where the line items will be shipped. */
  shippingAddress?: Maybe<ShopifyStorefront_MailingAddress>;
  /** The discounts that have been allocated onto the shipping line by discount applications. */
  shippingDiscountAllocations: Array<ShopifyStorefront_DiscountAllocation>;
  /** Once a shipping rate is selected by the customer it is transitioned to a `shipping_line` object. */
  shippingLine?: Maybe<ShopifyStorefront_ShippingRate>;
  /**
   * Price of the checkout before shipping and taxes.
   * @deprecated Use `subtotalPriceV2` instead
   */
  subtotalPrice: Scalars['Money'];
  /** Price of the checkout before duties, shipping and taxes. */
  subtotalPriceV2: ShopifyStorefront_MoneyV2;
  /** Whether the checkout is tax exempt. */
  taxExempt: Scalars['Boolean'];
  /** Whether taxes are included in the line item and shipping line prices. */
  taxesIncluded: Scalars['Boolean'];
  /** The sum of all the duties applied to the line items in the checkout. */
  totalDuties?: Maybe<ShopifyStorefront_MoneyV2>;
  /**
   * The sum of all the prices of all the items in the checkout, taxes and discounts included.
   * @deprecated Use `totalPriceV2` instead
   */
  totalPrice: Scalars['Money'];
  /** The sum of all the prices of all the items in the checkout, duties, taxes and discounts included. */
  totalPriceV2: ShopifyStorefront_MoneyV2;
  /**
   * The sum of all the taxes applied to the line items and shipping lines in the checkout.
   * @deprecated Use `totalTaxV2` instead
   */
  totalTax: Scalars['Money'];
  /** The sum of all the taxes applied to the line items and shipping lines in the checkout. */
  totalTaxV2: ShopifyStorefront_MoneyV2;
  /** The date and time when the checkout was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The url pointing to the checkout accessible from the web. */
  webUrl: Scalars['Url'];
};


/** A container for all the information required to checkout items and pay. */
export type ShopifyStorefront_CheckoutDiscountApplicationsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** A container for all the information required to checkout items and pay. */
export type ShopifyStorefront_CheckoutLineItemsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** Details about the gift card used on the checkout. */
export type ShopifyStorefront_AppliedGiftCard = {
  __typename?: 'ShopifyStorefront_AppliedGiftCard';
  /**
   * The amount that was taken from the gift card by applying it.
   * @deprecated Use `amountUsedV2` instead
   */
  amountUsed: Scalars['Money'];
  /** The amount that was taken from the gift card by applying it. */
  amountUsedV2: ShopifyStorefront_MoneyV2;
  /**
   * The amount left on the gift card.
   * @deprecated Use `balanceV2` instead
   */
  balance: Scalars['Money'];
  /** The amount left on the gift card. */
  balanceV2: ShopifyStorefront_MoneyV2;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The last characters of the gift card. */
  lastCharacters: Scalars['String'];
  /** The amount that was applied to the checkout in its currency. */
  presentmentAmountUsed: ShopifyStorefront_MoneyV2;
};

/** A monetary value with currency. */
export type ShopifyStorefront_MoneyV2 = {
  __typename?: 'ShopifyStorefront_MoneyV2';
  /** Decimal money amount. */
  amount: Scalars['Decimal'];
  /** Currency of the money. */
  currencyCode: ShopifyStorefront_CurrencyCode;
};

export enum ShopifyStorefront_CurrencyCode {
  Usd = 'USD',
  Eur = 'EUR',
  Gbp = 'GBP',
  Cad = 'CAD',
  Afn = 'AFN',
  All = 'ALL',
  Dzd = 'DZD',
  Aoa = 'AOA',
  Ars = 'ARS',
  Amd = 'AMD',
  Awg = 'AWG',
  Aud = 'AUD',
  Bbd = 'BBD',
  Azn = 'AZN',
  Bdt = 'BDT',
  Bsd = 'BSD',
  Bhd = 'BHD',
  Bif = 'BIF',
  Bzd = 'BZD',
  Bmd = 'BMD',
  Btn = 'BTN',
  Bam = 'BAM',
  Brl = 'BRL',
  Bob = 'BOB',
  Bwp = 'BWP',
  Bnd = 'BND',
  Bgn = 'BGN',
  Mmk = 'MMK',
  Khr = 'KHR',
  Cve = 'CVE',
  Kyd = 'KYD',
  Xaf = 'XAF',
  Clp = 'CLP',
  Cny = 'CNY',
  Cop = 'COP',
  Kmf = 'KMF',
  Cdf = 'CDF',
  Crc = 'CRC',
  Hrk = 'HRK',
  Czk = 'CZK',
  Dkk = 'DKK',
  Dop = 'DOP',
  Xcd = 'XCD',
  Egp = 'EGP',
  Etb = 'ETB',
  Xpf = 'XPF',
  Fjd = 'FJD',
  Gmd = 'GMD',
  Ghs = 'GHS',
  Gtq = 'GTQ',
  Gyd = 'GYD',
  Gel = 'GEL',
  Htg = 'HTG',
  Hnl = 'HNL',
  Hkd = 'HKD',
  Huf = 'HUF',
  Isk = 'ISK',
  Inr = 'INR',
  Idr = 'IDR',
  Ils = 'ILS',
  Iqd = 'IQD',
  Jmd = 'JMD',
  Jpy = 'JPY',
  Jep = 'JEP',
  Jod = 'JOD',
  Kzt = 'KZT',
  Kes = 'KES',
  Kwd = 'KWD',
  Kgs = 'KGS',
  Lak = 'LAK',
  Lvl = 'LVL',
  Lbp = 'LBP',
  Lsl = 'LSL',
  Lrd = 'LRD',
  Ltl = 'LTL',
  Mga = 'MGA',
  Mkd = 'MKD',
  Mop = 'MOP',
  Mwk = 'MWK',
  Mvr = 'MVR',
  Mxn = 'MXN',
  Myr = 'MYR',
  Mur = 'MUR',
  Mdl = 'MDL',
  Mad = 'MAD',
  Mnt = 'MNT',
  Mzn = 'MZN',
  Nad = 'NAD',
  Npr = 'NPR',
  Ang = 'ANG',
  Nzd = 'NZD',
  Nio = 'NIO',
  Ngn = 'NGN',
  Nok = 'NOK',
  Omr = 'OMR',
  Pab = 'PAB',
  Pkr = 'PKR',
  Pgk = 'PGK',
  Pyg = 'PYG',
  Pen = 'PEN',
  Php = 'PHP',
  Pln = 'PLN',
  Qar = 'QAR',
  Ron = 'RON',
  Rub = 'RUB',
  Rwf = 'RWF',
  Wst = 'WST',
  Sar = 'SAR',
  Std = 'STD',
  Rsd = 'RSD',
  Scr = 'SCR',
  Sgd = 'SGD',
  Sdg = 'SDG',
  Syp = 'SYP',
  Zar = 'ZAR',
  Krw = 'KRW',
  Ssp = 'SSP',
  Sbd = 'SBD',
  Lkr = 'LKR',
  Srd = 'SRD',
  Szl = 'SZL',
  Sek = 'SEK',
  Chf = 'CHF',
  Twd = 'TWD',
  Thb = 'THB',
  Tzs = 'TZS',
  Ttd = 'TTD',
  Tnd = 'TND',
  Try = 'TRY',
  Tmt = 'TMT',
  Ugx = 'UGX',
  Uah = 'UAH',
  Aed = 'AED',
  Uyu = 'UYU',
  Uzs = 'UZS',
  Vuv = 'VUV',
  Vnd = 'VND',
  Xof = 'XOF',
  Yer = 'YER',
  Zmw = 'ZMW',
  Byn = 'BYN',
  Byr = 'BYR',
  Djf = 'DJF',
  Ern = 'ERN',
  Fkp = 'FKP',
  Gip = 'GIP',
  Gnf = 'GNF',
  Irr = 'IRR',
  Kid = 'KID',
  Lyd = 'LYD',
  Mru = 'MRU',
  Sll = 'SLL',
  Shp = 'SHP',
  Sos = 'SOS',
  Tjs = 'TJS',
  Top = 'TOP',
  Vef = 'VEF',
  Ves = 'VES',
  Xxx = 'XXX'
}

/** A collection of available shipping rates for a checkout. */
export type ShopifyStorefront_AvailableShippingRates = {
  __typename?: 'ShopifyStorefront_AvailableShippingRates';
  /**
   * Whether or not the shipping rates are ready.
   * The `shippingRates` field is `null` when this value is `false`.
   * This field should be polled until its value becomes `true`.
   */
  ready: Scalars['Boolean'];
  /** The fetched shipping rates. `null` until the `ready` field is `true`. */
  shippingRates?: Maybe<Array<Maybe<ShopifyStorefront_ShippingRate>>>;
};

/** A shipping rate to be applied to a checkout. */
export type ShopifyStorefront_ShippingRate = {
  __typename?: 'ShopifyStorefront_ShippingRate';
  /** Human-readable unique identifier for this shipping rate. */
  handle: Scalars['String'];
  /**
   * Price of this shipping rate.
   * @deprecated Use `priceV2` instead
   */
  price: Scalars['Money'];
  /** Price of this shipping rate. */
  priceV2: ShopifyStorefront_MoneyV2;
  /** Title of this shipping rate. */
  title: Scalars['String'];
};

/** The identity of the customer associated with the checkout. */
export type ShopifyStorefront_CheckoutBuyerIdentity = {
  __typename?: 'ShopifyStorefront_CheckoutBuyerIdentity';
  /** The country code for the checkout. For example, `CA`. */
  countryCode?: Maybe<ShopifyStorefront_CountryCode>;
};

/** Represents a generic custom attribute. */
export type ShopifyStorefront_Attribute = {
  __typename?: 'ShopifyStorefront_Attribute';
  /** Key or name of the attribute. */
  key: Scalars['String'];
  /** Value of the attribute. */
  value?: Maybe<Scalars['String']>;
};

/** An auto-generated type for paginating through multiple DiscountApplications. */
export type ShopifyStorefront_DiscountApplicationConnection = {
  __typename?: 'ShopifyStorefront_DiscountApplicationConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_DiscountApplicationEdge>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one DiscountApplication and a cursor during pagination. */
export type ShopifyStorefront_DiscountApplicationEdge = {
  __typename?: 'ShopifyStorefront_DiscountApplicationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of DiscountApplicationEdge. */
  node: ShopifyStorefront_DiscountApplication;
};

/**
 * Discount applications capture the intentions of a discount source at
 * the time of application.
 */
export type ShopifyStorefront_DiscountApplication = {
  __typename?: 'ShopifyStorefront_DiscountApplication';
  /** The method by which the discount's value is allocated to its entitled items. */
  allocationMethod: ShopifyStorefront_DiscountApplicationAllocationMethod;
  /** Which lines of targetType that the discount is allocated over. */
  targetSelection: ShopifyStorefront_DiscountApplicationTargetSelection;
  /** The type of line that the discount is applicable towards. */
  targetType: ShopifyStorefront_DiscountApplicationTargetType;
  /** The value of the discount application. */
  value: ShopifyStorefront_PricingValue;
};

export enum ShopifyStorefront_DiscountApplicationAllocationMethod {
  Across = 'ACROSS',
  Each = 'EACH',
  One = 'ONE'
}

export enum ShopifyStorefront_DiscountApplicationTargetSelection {
  All = 'ALL',
  Entitled = 'ENTITLED',
  Explicit = 'EXPLICIT'
}

export enum ShopifyStorefront_DiscountApplicationTargetType {
  LineItem = 'LINE_ITEM',
  ShippingLine = 'SHIPPING_LINE'
}

/** The price value (fixed or percentage) for a discount application. */
export type ShopifyStorefront_PricingValue = ShopifyStorefront_MoneyV2 | ShopifyStorefront_PricingPercentageValue;

/** The value of the percentage pricing object. */
export type ShopifyStorefront_PricingPercentageValue = {
  __typename?: 'ShopifyStorefront_PricingPercentageValue';
  /** The percentage value of the object. */
  percentage: Scalars['Float'];
};

/** An auto-generated type for paginating through multiple CheckoutLineItems. */
export type ShopifyStorefront_CheckoutLineItemConnection = {
  __typename?: 'ShopifyStorefront_CheckoutLineItemConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_CheckoutLineItemEdge>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one CheckoutLineItem and a cursor during pagination. */
export type ShopifyStorefront_CheckoutLineItemEdge = {
  __typename?: 'ShopifyStorefront_CheckoutLineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of CheckoutLineItemEdge. */
  node: ShopifyStorefront_CheckoutLineItem;
};

/** A single line item in the checkout, grouped by variant and attributes. */
export type ShopifyStorefront_CheckoutLineItem = {
  __typename?: 'ShopifyStorefront_CheckoutLineItem';
  /** Extra information in the form of an array of Key-Value pairs about the line item. */
  customAttributes: Array<ShopifyStorefront_Attribute>;
  /** The discounts that have been allocated onto the checkout line item by discount applications. */
  discountAllocations: Array<ShopifyStorefront_DiscountAllocation>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The quantity of the line item. */
  quantity: Scalars['Int'];
  /** Title of the line item. Defaults to the product's title. */
  title: Scalars['String'];
  /** Unit price of the line item. */
  unitPrice?: Maybe<ShopifyStorefront_MoneyV2>;
  /** Product variant of the line item. */
  variant?: Maybe<ShopifyStorefront_ProductVariant>;
};

/** An amount discounting the line that has been allocated by a discount. */
export type ShopifyStorefront_DiscountAllocation = {
  __typename?: 'ShopifyStorefront_DiscountAllocation';
  /** Amount of discount allocated. */
  allocatedAmount: ShopifyStorefront_MoneyV2;
  /** The discount this allocated amount originated from. */
  discountApplication: ShopifyStorefront_DiscountApplication;
};

/** A product variant represents a different version of a product, such as differing sizes or differing colors. */
export type ShopifyStorefront_ProductVariant = {
  __typename?: 'ShopifyStorefront_ProductVariant';
  /** Indicates if the product variant is available for sale. */
  availableForSale: Scalars['Boolean'];
  /** The barcode (for example, ISBN, UPC, or GTIN) associated with the variant. */
  barcode?: Maybe<Scalars['String']>;
  /**
   * The compare at price of the variant. This can be used to mark a variant as on sale, when `compareAtPrice` is higher than `price`.
   * @deprecated Use `compareAtPriceV2` instead
   */
  compareAtPrice?: Maybe<Scalars['Money']>;
  /** The compare at price of the variant. This can be used to mark a variant as on sale, when `compareAtPriceV2` is higher than `priceV2`. */
  compareAtPriceV2?: Maybe<ShopifyStorefront_MoneyV2>;
  /** Whether a product is out of stock but still available for purchase (used for backorders). */
  currentlyNotInStock: Scalars['Boolean'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** Image associated with the product variant. This field falls back to the product image if no image is available. */
  image?: Maybe<ShopifyStorefront_Image>;
  /** Returns a metafield found by namespace and key. */
  metafield?: Maybe<ShopifyStorefront_Metafield>;
  /**
   * A paginated list of metafields associated with the resource.
   * @deprecated The `metafields` field will be removed in the future in favor of using [aliases](https://graphql.org/learn/queries/#aliases) with the `metafield` field.
   *
   */
  metafields: ShopifyStorefront_MetafieldConnection;
  /**
   * The product variantâ€™s price.
   * @deprecated Use `priceV2` instead
   */
  price: Scalars['Money'];
  /** The product variantâ€™s price. */
  priceV2: ShopifyStorefront_MoneyV2;
  /** The product object that the product variant belongs to. */
  product: ShopifyStorefront_Product;
  /** The total sellable quantity of the variant for online sales channels. */
  quantityAvailable?: Maybe<Scalars['Int']>;
  /** Whether a customer needs to provide a shipping address when placing an order for the product variant. */
  requiresShipping: Scalars['Boolean'];
  /** List of product options applied to the variant. */
  selectedOptions: Array<ShopifyStorefront_SelectedOption>;
  /** Represents an association between a variant and a selling plan. Selling plan allocations describe which selling plans are available for each variant, and what their impact is on pricing. */
  sellingPlanAllocations: ShopifyStorefront_SellingPlanAllocationConnection;
  /** The SKU (stock keeping unit) associated with the variant. */
  sku?: Maybe<Scalars['String']>;
  /** The in-store pickup availability of this variant by location. */
  storeAvailability: ShopifyStorefront_StoreAvailabilityConnection;
  /** The product variantâ€™s title. */
  title: Scalars['String'];
  /** The unit price value for the variant based on the variant's measurement. */
  unitPrice?: Maybe<ShopifyStorefront_MoneyV2>;
  /** The unit price measurement for the variant. */
  unitPriceMeasurement?: Maybe<ShopifyStorefront_UnitPriceMeasurement>;
  /** The weight of the product variant in the unit system specified with `weight_unit`. */
  weight?: Maybe<Scalars['Float']>;
  /** Unit of measurement for weight. */
  weightUnit: ShopifyStorefront_WeightUnit;
};


/** A product variant represents a different version of a product, such as differing sizes or differing colors. */
export type ShopifyStorefront_ProductVariantMetafieldArgs = {
  namespace: Scalars['String'];
  key: Scalars['String'];
};


/** A product variant represents a different version of a product, such as differing sizes or differing colors. */
export type ShopifyStorefront_ProductVariantMetafieldsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** A product variant represents a different version of a product, such as differing sizes or differing colors. */
export type ShopifyStorefront_ProductVariantSellingPlanAllocationsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** A product variant represents a different version of a product, such as differing sizes or differing colors. */
export type ShopifyStorefront_ProductVariantStoreAvailabilityArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** Represents an image resource. */
export type ShopifyStorefront_Image = {
  __typename?: 'ShopifyStorefront_Image';
  /** A word or phrase to share the nature or contents of an image. */
  altText?: Maybe<Scalars['String']>;
  /** The original height of the image in pixels. Returns `null` if the image is not hosted by Shopify. */
  height?: Maybe<Scalars['Int']>;
  /** A unique identifier for the image. */
  id?: Maybe<Scalars['ID']>;
  /**
   * The location of the original image as a URL.
   *
   * If there are any existing transformations in the original source URL, they will remain and not be stripped.
   * @deprecated Use `url` instead
   */
  originalSrc: Scalars['Url'];
  /**
   * The location of the image as a URL.
   * @deprecated Use `url` instead
   */
  src: Scalars['Url'];
  /**
   * The location of the transformed image as a URL.
   *
   * All transformation arguments are considered "best-effort". If they can be applied to an image, they will be.
   * Otherwise any transformations which an image type does not support will be ignored.
   * @deprecated Use `url(transform:)` instead
   */
  transformedSrc: Scalars['Url'];
  /**
   * The location of the image as a URL.
   *
   * If no transform options are specified, then the original image will be preserved including any pre-applied transforms.
   *
   * All transformation options are considered "best-effort". Any transformation that the original image type doesn't support will be ignored.
   *
   * If you need multiple variations of the same image, then you can use [GraphQL aliases](https://graphql.org/learn/queries/#aliases).
   */
  url: Scalars['Url'];
  /** The original width of the image in pixels. Returns `null` if the image is not hosted by Shopify. */
  width?: Maybe<Scalars['Int']>;
};


/** Represents an image resource. */
export type ShopifyStorefront_ImageTransformedSrcArgs = {
  maxWidth?: InputMaybe<Scalars['Int']>;
  maxHeight?: InputMaybe<Scalars['Int']>;
  crop?: InputMaybe<ShopifyStorefront_CropRegion>;
  scale?: InputMaybe<Scalars['Int']>;
  preferredContentType?: InputMaybe<ShopifyStorefront_ImageContentType>;
};


/** Represents an image resource. */
export type ShopifyStorefront_ImageUrlArgs = {
  transform?: InputMaybe<ShopifyStorefront_ImageTransformInput>;
};

export enum ShopifyStorefront_CropRegion {
  Center = 'CENTER',
  Top = 'TOP',
  Bottom = 'BOTTOM',
  Left = 'LEFT',
  Right = 'RIGHT'
}

export enum ShopifyStorefront_ImageContentType {
  Png = 'PNG',
  Jpg = 'JPG',
  Webp = 'WEBP'
}

/**
 * The available options for transforming an image.
 *
 * All transformation options are considered "best-effort". Any transformation that the original image type doesn't support will be ignored.
 */
export type ShopifyStorefront_ImageTransformInput = {
  /** Crop the image according to the specified region. */
  crop?: InputMaybe<ShopifyStorefront_CropRegion>;
  /** Image width in pixels between 1 and 5760. */
  maxWidth?: InputMaybe<Scalars['Int']>;
  /** Image height in pixels between 1 and 5760. */
  maxHeight?: InputMaybe<Scalars['Int']>;
  /** Image size multiplier for high-resolution retina displays. Must be within 1..3. */
  scale?: InputMaybe<Scalars['Int']>;
  /**
   * Convert the source image into the preferred content type.
   * Supported conversions: `.svg` to `.png`, any file type to `.jpg`, and any file type to `.webp`.
   */
  preferredContentType?: InputMaybe<ShopifyStorefront_ImageContentType>;
};

/**
 * Metafields represent custom metadata attached to a resource. Metafields can be sorted into namespaces and are
 * comprised of keys, values, and value types.
 */
export type ShopifyStorefront_Metafield = {
  __typename?: 'ShopifyStorefront_Metafield';
  /** The date and time when the storefront metafield was created. */
  createdAt: Scalars['DateTime'];
  /** The description of a metafield. */
  description?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The key name for a metafield. */
  key: Scalars['String'];
  /** The namespace for a metafield. */
  namespace: Scalars['String'];
  /** The parent object that the metafield belongs to. */
  parentResource: ShopifyStorefront_MetafieldParentResource;
  /** Returns a reference object if the metafield definition's type is a resource reference. */
  reference?: Maybe<ShopifyStorefront_MetafieldReference>;
  /**
   * The type name of the metafield.
   * See the list of [supported types](https://shopify.dev/apps/metafields/definitions/types).
   */
  type: Scalars['String'];
  /** The date and time when the storefront metafield was updated. */
  updatedAt: Scalars['DateTime'];
  /** The value of a metafield. */
  value: Scalars['String'];
};

/** A resource that the metafield belongs to. */
export type ShopifyStorefront_MetafieldParentResource = ShopifyStorefront_Article | ShopifyStorefront_Blog | ShopifyStorefront_Collection | ShopifyStorefront_Customer | ShopifyStorefront_Order | ShopifyStorefront_Page | ShopifyStorefront_Product | ShopifyStorefront_ProductVariant | ShopifyStorefront_Shop;

/** An article in an online store blog. */
export type ShopifyStorefront_Article = {
  __typename?: 'ShopifyStorefront_Article';
  /**
   * The article's author.
   * @deprecated Use `authorV2` instead
   */
  author: ShopifyStorefront_ArticleAuthor;
  /** The article's author. */
  authorV2?: Maybe<ShopifyStorefront_ArticleAuthor>;
  /** The blog that the article belongs to. */
  blog: ShopifyStorefront_Blog;
  /** List of comments posted on the article. */
  comments: ShopifyStorefront_CommentConnection;
  /** Stripped content of the article, single line with HTML tags removed. */
  content: Scalars['String'];
  /** The content of the article, complete with HTML formatting. */
  contentHtml: Scalars['Html'];
  /** Stripped excerpt of the article, single line with HTML tags removed. */
  excerpt?: Maybe<Scalars['String']>;
  /** The excerpt of the article, complete with HTML formatting. */
  excerptHtml?: Maybe<Scalars['Html']>;
  /** A human-friendly unique string for the Article automatically generated from its title. */
  handle: Scalars['String'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The image associated with the article. */
  image?: Maybe<ShopifyStorefront_Image>;
  /** Returns a metafield found by namespace and key. */
  metafield?: Maybe<ShopifyStorefront_Metafield>;
  /**
   * A paginated list of metafields associated with the resource.
   * @deprecated The `metafields` field will be removed in the future in favor of using [aliases](https://graphql.org/learn/queries/#aliases) with the `metafield` field.
   *
   */
  metafields: ShopifyStorefront_MetafieldConnection;
  /** The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel. */
  onlineStoreUrl?: Maybe<Scalars['Url']>;
  /** The date and time when the article was published. */
  publishedAt: Scalars['DateTime'];
  /** The articleâ€™s SEO information. */
  seo?: Maybe<ShopifyStorefront_Seo>;
  /** A categorization that a article can be tagged with. */
  tags: Array<Scalars['String']>;
  /** The articleâ€™s name. */
  title: Scalars['String'];
};


/** An article in an online store blog. */
export type ShopifyStorefront_ArticleCommentsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** An article in an online store blog. */
export type ShopifyStorefront_ArticleContentArgs = {
  truncateAt?: InputMaybe<Scalars['Int']>;
};


/** An article in an online store blog. */
export type ShopifyStorefront_ArticleExcerptArgs = {
  truncateAt?: InputMaybe<Scalars['Int']>;
};


/** An article in an online store blog. */
export type ShopifyStorefront_ArticleMetafieldArgs = {
  namespace: Scalars['String'];
  key: Scalars['String'];
};


/** An article in an online store blog. */
export type ShopifyStorefront_ArticleMetafieldsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** The author of an article. */
export type ShopifyStorefront_ArticleAuthor = {
  __typename?: 'ShopifyStorefront_ArticleAuthor';
  /** The author's bio. */
  bio?: Maybe<Scalars['String']>;
  /** The authorâ€™s email. */
  email: Scalars['String'];
  /** The author's first name. */
  firstName: Scalars['String'];
  /** The author's last name. */
  lastName: Scalars['String'];
  /** The author's full name. */
  name: Scalars['String'];
};

/** An online store blog. */
export type ShopifyStorefront_Blog = {
  __typename?: 'ShopifyStorefront_Blog';
  /** Find an article by its handle. */
  articleByHandle?: Maybe<ShopifyStorefront_Article>;
  /** List of the blog's articles. */
  articles: ShopifyStorefront_ArticleConnection;
  /** The authors who have contributed to the blog. */
  authors: Array<ShopifyStorefront_ArticleAuthor>;
  /** A human-friendly unique string for the Blog automatically generated from its title. */
  handle: Scalars['String'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** Returns a metafield found by namespace and key. */
  metafield?: Maybe<ShopifyStorefront_Metafield>;
  /**
   * A paginated list of metafields associated with the resource.
   * @deprecated The `metafields` field will be removed in the future in favor of using [aliases](https://graphql.org/learn/queries/#aliases) with the `metafield` field.
   *
   */
  metafields: ShopifyStorefront_MetafieldConnection;
  /** The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel. */
  onlineStoreUrl?: Maybe<Scalars['Url']>;
  /** The blog's SEO information. */
  seo?: Maybe<ShopifyStorefront_Seo>;
  /** The blogsâ€™s title. */
  title: Scalars['String'];
};


/** An online store blog. */
export type ShopifyStorefront_BlogArticleByHandleArgs = {
  handle: Scalars['String'];
};


/** An online store blog. */
export type ShopifyStorefront_BlogArticlesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<ShopifyStorefront_ArticleSortKeys>;
  query?: InputMaybe<Scalars['String']>;
};


/** An online store blog. */
export type ShopifyStorefront_BlogMetafieldArgs = {
  namespace: Scalars['String'];
  key: Scalars['String'];
};


/** An online store blog. */
export type ShopifyStorefront_BlogMetafieldsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** An auto-generated type for paginating through multiple Articles. */
export type ShopifyStorefront_ArticleConnection = {
  __typename?: 'ShopifyStorefront_ArticleConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_ArticleEdge>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one Article and a cursor during pagination. */
export type ShopifyStorefront_ArticleEdge = {
  __typename?: 'ShopifyStorefront_ArticleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of ArticleEdge. */
  node: ShopifyStorefront_Article;
};

export enum ShopifyStorefront_ArticleSortKeys {
  Title = 'TITLE',
  BlogTitle = 'BLOG_TITLE',
  Author = 'AUTHOR',
  UpdatedAt = 'UPDATED_AT',
  PublishedAt = 'PUBLISHED_AT',
  Id = 'ID',
  Relevance = 'RELEVANCE'
}

/** An auto-generated type for paginating through multiple Metafields. */
export type ShopifyStorefront_MetafieldConnection = {
  __typename?: 'ShopifyStorefront_MetafieldConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_MetafieldEdge>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one Metafield and a cursor during pagination. */
export type ShopifyStorefront_MetafieldEdge = {
  __typename?: 'ShopifyStorefront_MetafieldEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of MetafieldEdge. */
  node: ShopifyStorefront_Metafield;
};

/** SEO information. */
export type ShopifyStorefront_Seo = {
  __typename?: 'ShopifyStorefront_SEO';
  /** The meta description. */
  description?: Maybe<Scalars['String']>;
  /** The SEO title. */
  title?: Maybe<Scalars['String']>;
};

/** An auto-generated type for paginating through multiple Comments. */
export type ShopifyStorefront_CommentConnection = {
  __typename?: 'ShopifyStorefront_CommentConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_CommentEdge>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one Comment and a cursor during pagination. */
export type ShopifyStorefront_CommentEdge = {
  __typename?: 'ShopifyStorefront_CommentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of CommentEdge. */
  node: ShopifyStorefront_Comment;
};

/** A comment on an article. */
export type ShopifyStorefront_Comment = {
  __typename?: 'ShopifyStorefront_Comment';
  /** The commentâ€™s author. */
  author: ShopifyStorefront_CommentAuthor;
  /** Stripped content of the comment, single line with HTML tags removed. */
  content: Scalars['String'];
  /** The content of the comment, complete with HTML formatting. */
  contentHtml: Scalars['Html'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
};


/** A comment on an article. */
export type ShopifyStorefront_CommentContentArgs = {
  truncateAt?: InputMaybe<Scalars['Int']>;
};

/** The author of a comment. */
export type ShopifyStorefront_CommentAuthor = {
  __typename?: 'ShopifyStorefront_CommentAuthor';
  /** The author's email. */
  email: Scalars['String'];
  /** The authorâ€™s name. */
  name: Scalars['String'];
};

/** A collection represents a grouping of products that a shop owner can create to organize them or make their shops easier to browse. */
export type ShopifyStorefront_Collection = {
  __typename?: 'ShopifyStorefront_Collection';
  /** Stripped description of the collection, single line with HTML tags removed. */
  description: Scalars['String'];
  /** The description of the collection, complete with HTML formatting. */
  descriptionHtml: Scalars['Html'];
  /**
   * A human-friendly unique string for the collection automatically generated from its title.
   * Limit of 255 characters.
   */
  handle: Scalars['String'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** Image associated with the collection. */
  image?: Maybe<ShopifyStorefront_Image>;
  /** Returns a metafield found by namespace and key. */
  metafield?: Maybe<ShopifyStorefront_Metafield>;
  /**
   * A paginated list of metafields associated with the resource.
   * @deprecated The `metafields` field will be removed in the future in favor of using [aliases](https://graphql.org/learn/queries/#aliases) with the `metafield` field.
   *
   */
  metafields: ShopifyStorefront_MetafieldConnection;
  /** The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel. */
  onlineStoreUrl?: Maybe<Scalars['Url']>;
  /** List of products in the collection. */
  products: ShopifyStorefront_ProductConnection;
  /** The collectionâ€™s name. Limit of 255 characters. */
  title: Scalars['String'];
  /** The date and time when the collection was last modified. */
  updatedAt: Scalars['DateTime'];
};


/** A collection represents a grouping of products that a shop owner can create to organize them or make their shops easier to browse. */
export type ShopifyStorefront_CollectionDescriptionArgs = {
  truncateAt?: InputMaybe<Scalars['Int']>;
};


/** A collection represents a grouping of products that a shop owner can create to organize them or make their shops easier to browse. */
export type ShopifyStorefront_CollectionMetafieldArgs = {
  namespace: Scalars['String'];
  key: Scalars['String'];
};


/** A collection represents a grouping of products that a shop owner can create to organize them or make their shops easier to browse. */
export type ShopifyStorefront_CollectionMetafieldsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** A collection represents a grouping of products that a shop owner can create to organize them or make their shops easier to browse. */
export type ShopifyStorefront_CollectionProductsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<ShopifyStorefront_ProductCollectionSortKeys>;
  filters?: InputMaybe<Array<InputMaybe<ShopifyStorefront_ProductFilterInput>>>;
};

/** An auto-generated type for paginating through multiple Products. */
export type ShopifyStorefront_ProductConnection = {
  __typename?: 'ShopifyStorefront_ProductConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_ProductEdge>;
  /** A list of available filters. */
  filters: Array<ShopifyStorefront_Filter>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one Product and a cursor during pagination. */
export type ShopifyStorefront_ProductEdge = {
  __typename?: 'ShopifyStorefront_ProductEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of ProductEdge. */
  node: ShopifyStorefront_Product;
};

/**
 * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
 */
export type ShopifyStorefront_Product = {
  __typename?: 'ShopifyStorefront_Product';
  /** Indicates if at least one product variant is available for sale. */
  availableForSale: Scalars['Boolean'];
  /** List of collections a product belongs to. */
  collections: ShopifyStorefront_CollectionConnection;
  /** The compare at price of the product across all variants. */
  compareAtPriceRange: ShopifyStorefront_ProductPriceRange;
  /** The date and time when the product was created. */
  createdAt: Scalars['DateTime'];
  /** Stripped description of the product, single line with HTML tags removed. */
  description: Scalars['String'];
  /** The description of the product, complete with HTML formatting. */
  descriptionHtml: Scalars['Html'];
  /**
   * The featured image for the product.
   *
   * This field is functionally equivalent to `images(first: 1)`.
   */
  featuredImage?: Maybe<ShopifyStorefront_Image>;
  /**
   * A human-friendly unique string for the Product automatically generated from its title.
   * They are used by the Liquid templating language to refer to objects.
   */
  handle: Scalars['String'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** List of images associated with the product. */
  images: ShopifyStorefront_ImageConnection;
  /** The media associated with the product. */
  media: ShopifyStorefront_MediaConnection;
  /** Returns a metafield found by namespace and key. */
  metafield?: Maybe<ShopifyStorefront_Metafield>;
  /**
   * A paginated list of metafields associated with the resource.
   * @deprecated The `metafields` field will be removed in the future in favor of using [aliases](https://graphql.org/learn/queries/#aliases) with the `metafield` field.
   *
   */
  metafields: ShopifyStorefront_MetafieldConnection;
  /** The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel. */
  onlineStoreUrl?: Maybe<Scalars['Url']>;
  /** List of product options. */
  options: Array<ShopifyStorefront_ProductOption>;
  /** The price range. */
  priceRange: ShopifyStorefront_ProductPriceRange;
  /** A categorization that a product can be tagged with, commonly used for filtering and searching. */
  productType: Scalars['String'];
  /** The date and time when the product was published to the channel. */
  publishedAt: Scalars['DateTime'];
  /** Whether the product can only be purchased with a selling plan. */
  requiresSellingPlan: Scalars['Boolean'];
  /** A list of a product's available selling plan groups. A selling plan group represents a selling method. For example, 'Subscribe and save' is a selling method where customers pay for goods or services per delivery. A selling plan group contains individual selling plans. */
  sellingPlanGroups: ShopifyStorefront_SellingPlanGroupConnection;
  /** The product's SEO information. */
  seo: ShopifyStorefront_Seo;
  /**
   * A comma separated list of tags that have been added to the product.
   * Additional access scope required for private apps: unauthenticated_read_product_tags.
   */
  tags: Array<Scalars['String']>;
  /** The productâ€™s title. */
  title: Scalars['String'];
  /** The total quantity of inventory in stock for this Product. */
  totalInventory?: Maybe<Scalars['Int']>;
  /**
   * The date and time when the product was last modified.
   * A product's `updatedAt` value can change for different reasons. For example, if an order
   * is placed for a product that has inventory tracking set up, then the inventory adjustment
   * is counted as an update.
   */
  updatedAt: Scalars['DateTime'];
  /**
   * Find a productâ€™s variant based on its selected options.
   * This is useful for converting a userâ€™s selection of product options into a single matching variant.
   * If there is not a variant for the selected options, `null` will be returned.
   */
  variantBySelectedOptions?: Maybe<ShopifyStorefront_ProductVariant>;
  /** List of the productâ€™s variants. */
  variants: ShopifyStorefront_ProductVariantConnection;
  /** The productâ€™s vendor name. */
  vendor: Scalars['String'];
};


/**
 * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
 */
export type ShopifyStorefront_ProductCollectionsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
 */
export type ShopifyStorefront_ProductDescriptionArgs = {
  truncateAt?: InputMaybe<Scalars['Int']>;
};


/**
 * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
 */
export type ShopifyStorefront_ProductImagesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<ShopifyStorefront_ProductImageSortKeys>;
};


/**
 * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
 */
export type ShopifyStorefront_ProductMediaArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<ShopifyStorefront_ProductMediaSortKeys>;
};


/**
 * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
 */
export type ShopifyStorefront_ProductMetafieldArgs = {
  namespace: Scalars['String'];
  key: Scalars['String'];
};


/**
 * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
 */
export type ShopifyStorefront_ProductMetafieldsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
 */
export type ShopifyStorefront_ProductOptionsArgs = {
  first?: InputMaybe<Scalars['Int']>;
};


/**
 * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
 */
export type ShopifyStorefront_ProductSellingPlanGroupsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
 */
export type ShopifyStorefront_ProductVariantBySelectedOptionsArgs = {
  selectedOptions: Array<ShopifyStorefront_SelectedOptionInput>;
};


/**
 * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
 */
export type ShopifyStorefront_ProductVariantsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<ShopifyStorefront_ProductVariantSortKeys>;
};

/** An auto-generated type for paginating through multiple Collections. */
export type ShopifyStorefront_CollectionConnection = {
  __typename?: 'ShopifyStorefront_CollectionConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_CollectionEdge>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one Collection and a cursor during pagination. */
export type ShopifyStorefront_CollectionEdge = {
  __typename?: 'ShopifyStorefront_CollectionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of CollectionEdge. */
  node: ShopifyStorefront_Collection;
};

/** The price range of the product. */
export type ShopifyStorefront_ProductPriceRange = {
  __typename?: 'ShopifyStorefront_ProductPriceRange';
  /** The highest variant's price. */
  maxVariantPrice: ShopifyStorefront_MoneyV2;
  /** The lowest variant's price. */
  minVariantPrice: ShopifyStorefront_MoneyV2;
};

/** An auto-generated type for paginating through multiple Images. */
export type ShopifyStorefront_ImageConnection = {
  __typename?: 'ShopifyStorefront_ImageConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_ImageEdge>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one Image and a cursor during pagination. */
export type ShopifyStorefront_ImageEdge = {
  __typename?: 'ShopifyStorefront_ImageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of ImageEdge. */
  node: ShopifyStorefront_Image;
};

export enum ShopifyStorefront_ProductImageSortKeys {
  CreatedAt = 'CREATED_AT',
  Position = 'POSITION',
  Id = 'ID',
  Relevance = 'RELEVANCE'
}

/** An auto-generated type for paginating through multiple Media. */
export type ShopifyStorefront_MediaConnection = {
  __typename?: 'ShopifyStorefront_MediaConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_MediaEdge>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one Media and a cursor during pagination. */
export type ShopifyStorefront_MediaEdge = {
  __typename?: 'ShopifyStorefront_MediaEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of MediaEdge. */
  node: ShopifyStorefront_Media;
};

/** Represents a media interface. */
export type ShopifyStorefront_Media = {
  __typename?: 'ShopifyStorefront_Media';
  /** A word or phrase to share the nature or contents of a media. */
  alt?: Maybe<Scalars['String']>;
  /** The media content type. */
  mediaContentType: ShopifyStorefront_MediaContentType;
  /** The preview image for the media. */
  previewImage?: Maybe<ShopifyStorefront_Image>;
};

export enum ShopifyStorefront_MediaContentType {
  ExternalVideo = 'EXTERNAL_VIDEO',
  Image = 'IMAGE',
  Model_3D = 'MODEL_3D',
  Video = 'VIDEO'
}

export enum ShopifyStorefront_ProductMediaSortKeys {
  Position = 'POSITION',
  Id = 'ID',
  Relevance = 'RELEVANCE'
}

/**
 * Product property names like "Size", "Color", and "Material" that the customers can select.
 * Variants are selected based on permutations of these options.
 * 255 characters limit each.
 */
export type ShopifyStorefront_ProductOption = {
  __typename?: 'ShopifyStorefront_ProductOption';
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The product optionâ€™s name. */
  name: Scalars['String'];
  /** The corresponding value to the product option name. */
  values: Array<Scalars['String']>;
};

/** An auto-generated type for paginating through multiple SellingPlanGroups. */
export type ShopifyStorefront_SellingPlanGroupConnection = {
  __typename?: 'ShopifyStorefront_SellingPlanGroupConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_SellingPlanGroupEdge>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one SellingPlanGroup and a cursor during pagination. */
export type ShopifyStorefront_SellingPlanGroupEdge = {
  __typename?: 'ShopifyStorefront_SellingPlanGroupEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of SellingPlanGroupEdge. */
  node: ShopifyStorefront_SellingPlanGroup;
};

/** Represents a selling method. For example, 'Subscribe and save' is a selling method where customers pay for goods or services per delivery. A selling plan group contains individual selling plans. */
export type ShopifyStorefront_SellingPlanGroup = {
  __typename?: 'ShopifyStorefront_SellingPlanGroup';
  /** A display friendly name for the app that created the selling plan group. */
  appName?: Maybe<Scalars['String']>;
  /** The name of the selling plan group. */
  name: Scalars['String'];
  /** Represents the selling plan options available in the drop-down list in the storefront. For example, 'Delivery every week' or 'Delivery every 2 weeks' specifies the delivery frequency options for the product. */
  options: Array<ShopifyStorefront_SellingPlanGroupOption>;
  /** A list of selling plans in a selling plan group. A selling plan is a representation of how products and variants can be sold and purchased. For example, an individual selling plan could be '6 weeks of prepaid granola, delivered weekly'. */
  sellingPlans: ShopifyStorefront_SellingPlanConnection;
};


/** Represents a selling method. For example, 'Subscribe and save' is a selling method where customers pay for goods or services per delivery. A selling plan group contains individual selling plans. */
export type ShopifyStorefront_SellingPlanGroupSellingPlansArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** Represents an option on a selling plan group that's available in the drop-down list in the storefront. */
export type ShopifyStorefront_SellingPlanGroupOption = {
  __typename?: 'ShopifyStorefront_SellingPlanGroupOption';
  /** The name of the option. For example, 'Delivery every'. */
  name: Scalars['String'];
  /** The values for the options specified by the selling plans in the selling plan group. For example, '1 week', '2 weeks', '3 weeks'. */
  values: Array<Scalars['String']>;
};

/** An auto-generated type for paginating through multiple SellingPlans. */
export type ShopifyStorefront_SellingPlanConnection = {
  __typename?: 'ShopifyStorefront_SellingPlanConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_SellingPlanEdge>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one SellingPlan and a cursor during pagination. */
export type ShopifyStorefront_SellingPlanEdge = {
  __typename?: 'ShopifyStorefront_SellingPlanEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of SellingPlanEdge. */
  node: ShopifyStorefront_SellingPlan;
};

/** Represents how products and variants can be sold and purchased. */
export type ShopifyStorefront_SellingPlan = {
  __typename?: 'ShopifyStorefront_SellingPlan';
  /** The description of the selling plan. */
  description?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The name of the selling plan. For example, '6 weeks of prepaid granola, delivered weekly'. */
  name: Scalars['String'];
  /** The selling plan options available in the drop-down list in the storefront. For example, 'Delivery every week' or 'Delivery every 2 weeks' specifies the delivery frequency options for the product. */
  options: Array<ShopifyStorefront_SellingPlanOption>;
  /** The price adjustments that a selling plan makes when a variant is purchased with a selling plan. */
  priceAdjustments: Array<ShopifyStorefront_SellingPlanPriceAdjustment>;
  /** Whether purchasing the selling plan will result in multiple deliveries. */
  recurringDeliveries: Scalars['Boolean'];
};

/** An option provided by a Selling Plan. */
export type ShopifyStorefront_SellingPlanOption = {
  __typename?: 'ShopifyStorefront_SellingPlanOption';
  /** The name of the option (ie "Delivery every"). */
  name?: Maybe<Scalars['String']>;
  /** The value of the option (ie "Month"). */
  value?: Maybe<Scalars['String']>;
};

/** Represents by how much the price of a variant associated with a selling plan is adjusted. Each variant can have up to two price adjustments. */
export type ShopifyStorefront_SellingPlanPriceAdjustment = {
  __typename?: 'ShopifyStorefront_SellingPlanPriceAdjustment';
  /** The type of price adjustment. An adjustment value can have one of three types: percentage, amount off, or a new price. */
  adjustmentValue: ShopifyStorefront_SellingPlanPriceAdjustmentValue;
  /** The number of orders that the price adjustment applies to If the price adjustment always applies, then this field is `null`. */
  orderCount?: Maybe<Scalars['Int']>;
};

/** Represents by how much the price of a variant associated with a selling plan is adjusted. Each variant can have up to two price adjustments. */
export type ShopifyStorefront_SellingPlanPriceAdjustmentValue = ShopifyStorefront_SellingPlanFixedAmountPriceAdjustment | ShopifyStorefront_SellingPlanFixedPriceAdjustment | ShopifyStorefront_SellingPlanPercentagePriceAdjustment;

/** A fixed amount that's deducted from the original variant price. For example, $10.00 off. */
export type ShopifyStorefront_SellingPlanFixedAmountPriceAdjustment = {
  __typename?: 'ShopifyStorefront_SellingPlanFixedAmountPriceAdjustment';
  /** The money value of the price adjustment. */
  adjustmentAmount: ShopifyStorefront_MoneyV2;
};

/** A fixed price adjustment for a variant that's purchased with a selling plan. */
export type ShopifyStorefront_SellingPlanFixedPriceAdjustment = {
  __typename?: 'ShopifyStorefront_SellingPlanFixedPriceAdjustment';
  /** A new price of the variant when it's purchased with the selling plan. */
  price: ShopifyStorefront_MoneyV2;
};

/** A percentage amount that's deducted from the original variant price. For example, 10% off. */
export type ShopifyStorefront_SellingPlanPercentagePriceAdjustment = {
  __typename?: 'ShopifyStorefront_SellingPlanPercentagePriceAdjustment';
  /** The percentage value of the price adjustment. */
  adjustmentPercentage: Scalars['Int'];
};

/** Specifies the input fields required for a selected option. */
export type ShopifyStorefront_SelectedOptionInput = {
  /** The product optionâ€™s name. */
  name: Scalars['String'];
  /** The product optionâ€™s value. */
  value: Scalars['String'];
};

/** An auto-generated type for paginating through multiple ProductVariants. */
export type ShopifyStorefront_ProductVariantConnection = {
  __typename?: 'ShopifyStorefront_ProductVariantConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_ProductVariantEdge>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one ProductVariant and a cursor during pagination. */
export type ShopifyStorefront_ProductVariantEdge = {
  __typename?: 'ShopifyStorefront_ProductVariantEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of ProductVariantEdge. */
  node: ShopifyStorefront_ProductVariant;
};

export enum ShopifyStorefront_ProductVariantSortKeys {
  Title = 'TITLE',
  Sku = 'SKU',
  Position = 'POSITION',
  Id = 'ID',
  Relevance = 'RELEVANCE'
}

/** A filter that is supported on the parent field. */
export type ShopifyStorefront_Filter = {
  __typename?: 'ShopifyStorefront_Filter';
  /** A unique identifier. */
  id: Scalars['String'];
  /** A human-friendly string for this filter. */
  label: Scalars['String'];
  /** An enumeration that denotes the type of data this filter represents. */
  type: ShopifyStorefront_FilterType;
  /** The list of values for this filter. */
  values: Array<ShopifyStorefront_FilterValue>;
};

export enum ShopifyStorefront_FilterType {
  List = 'LIST',
  PriceRange = 'PRICE_RANGE'
}

/** A selectable value within a filter. */
export type ShopifyStorefront_FilterValue = {
  __typename?: 'ShopifyStorefront_FilterValue';
  /** The number of results that match this filter value. */
  count: Scalars['Int'];
  /** A unique identifier. */
  id: Scalars['String'];
  /**
   * An input object that can be used to filter by this value on the parent field.
   *
   * The value is provided as a helper for building dynamic filtering UI. For example, if you have a list of selected `FilterValue` objects, you can combine their respective `input` values to use in a subsequent query.
   */
  input: Scalars['Json'];
  /** A human-friendly string for this filter value. */
  label: Scalars['String'];
};

export enum ShopifyStorefront_ProductCollectionSortKeys {
  Title = 'TITLE',
  Price = 'PRICE',
  BestSelling = 'BEST_SELLING',
  Created = 'CREATED',
  Id = 'ID',
  Manual = 'MANUAL',
  CollectionDefault = 'COLLECTION_DEFAULT',
  Relevance = 'RELEVANCE'
}

/** A filter used to view a subset of products in a collection. */
export type ShopifyStorefront_ProductFilterInput = {
  /** Filter on if the product is available for sale. */
  available?: InputMaybe<Scalars['Boolean']>;
  /** A variant option to filter on. */
  variantOption?: InputMaybe<ShopifyStorefront_VariantOptionFilterInput>;
  /** The product type to filter on. */
  productType?: InputMaybe<Scalars['String']>;
  /** The product vendor to filter on. */
  productVendor?: InputMaybe<Scalars['String']>;
  /** A range of prices to filter with-in. */
  price?: InputMaybe<ShopifyStorefront_PriceRangeFilterInput>;
  /** A product metafield to filter on. */
  productMetafield?: InputMaybe<ShopifyStorefront_MetafieldFilterInput>;
  /** A variant metafield to filter on. */
  variantMetafield?: InputMaybe<ShopifyStorefront_MetafieldFilterInput>;
};

/** A filter used to view a subset of products in a collection matching a specific variant option. */
export type ShopifyStorefront_VariantOptionFilterInput = {
  /** The name of the variant option to filter on. */
  name: Scalars['String'];
  /** The value of the variant option to filter on. */
  value: Scalars['String'];
};

/** A filter used to view a subset of products in a collection matching a specific price range. */
export type ShopifyStorefront_PriceRangeFilterInput = {
  /** The minimum price in the range. Defaults to zero. */
  min?: InputMaybe<Scalars['Float']>;
  /** The maximum price in the range. Empty indicates no max price. */
  max?: InputMaybe<Scalars['Float']>;
};

/**
 * A filter used to view a subset of products in a collection matching a specific metafield value.
 *
 * Only the following metafield types are currently supported:
 * - `number_integer`
 * - `number_decimal`
 * - `single_line_text_field`
 * - `boolean` as of 2022-04.
 */
export type ShopifyStorefront_MetafieldFilterInput = {
  /** The namespace of the metafield to filter on. */
  namespace: Scalars['String'];
  /** The key of the metafield to filter on. */
  key: Scalars['String'];
  /** The value of the metafield. */
  value: Scalars['String'];
};

/** An order is a customerâ€™s completed request to purchase one or more products from a shop. An order is created when a customer completes the checkout process, during which time they provides an email address, billing address and payment information. */
export type ShopifyStorefront_Order = {
  __typename?: 'ShopifyStorefront_Order';
  /** The reason for the order's cancellation. Returns `null` if the order wasn't canceled. */
  cancelReason?: Maybe<ShopifyStorefront_OrderCancelReason>;
  /** The date and time when the order was canceled. Returns null if the order wasn't canceled. */
  canceledAt?: Maybe<Scalars['DateTime']>;
  /** The code of the currency used for the payment. */
  currencyCode: ShopifyStorefront_CurrencyCode;
  /** The subtotal of line items and their discounts, excluding line items that have been removed. Does not contain order-level discounts, duties, shipping costs, or shipping discounts. Taxes are not included unless the order is a taxes-included order. */
  currentSubtotalPrice: ShopifyStorefront_MoneyV2;
  /** The total cost of duties for the order, including refunds. */
  currentTotalDuties?: Maybe<ShopifyStorefront_MoneyV2>;
  /** The total amount of the order, including duties, taxes and discounts, minus amounts for line items that have been removed. */
  currentTotalPrice: ShopifyStorefront_MoneyV2;
  /** The total of all taxes applied to the order, excluding taxes for returned line items. */
  currentTotalTax: ShopifyStorefront_MoneyV2;
  /** The locale code in which this specific order happened. */
  customerLocale?: Maybe<Scalars['String']>;
  /** The unique URL that the customer can use to access the order. */
  customerUrl?: Maybe<Scalars['Url']>;
  /** Discounts that have been applied on the order. */
  discountApplications: ShopifyStorefront_DiscountApplicationConnection;
  /** Whether the order has had any edits applied or not. */
  edited: Scalars['Boolean'];
  /** The customer's email address. */
  email?: Maybe<Scalars['String']>;
  /** The financial status of the order. */
  financialStatus?: Maybe<ShopifyStorefront_OrderFinancialStatus>;
  /** The fulfillment status for the order. */
  fulfillmentStatus: ShopifyStorefront_OrderFulfillmentStatus;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** List of the orderâ€™s line items. */
  lineItems: ShopifyStorefront_OrderLineItemConnection;
  /** Returns a metafield found by namespace and key. */
  metafield?: Maybe<ShopifyStorefront_Metafield>;
  /**
   * A paginated list of metafields associated with the resource.
   * @deprecated The `metafields` field will be removed in the future in favor of using [aliases](https://graphql.org/learn/queries/#aliases) with the `metafield` field.
   *
   */
  metafields: ShopifyStorefront_MetafieldConnection;
  /**
   * Unique identifier for the order that appears on the order.
   * For example, _#1000_ or _Store1001.
   */
  name: Scalars['String'];
  /** A unique numeric identifier for the order for use by shop owner and customer. */
  orderNumber: Scalars['Int'];
  /** The total cost of duties charged at checkout. */
  originalTotalDuties?: Maybe<ShopifyStorefront_MoneyV2>;
  /** The total price of the order before any applied edits. */
  originalTotalPrice: ShopifyStorefront_MoneyV2;
  /** The customer's phone number for receiving SMS notifications. */
  phone?: Maybe<Scalars['String']>;
  /**
   * The date and time when the order was imported.
   * This value can be set to dates in the past when importing from other systems.
   * If no value is provided, it will be auto-generated based on current date and time.
   */
  processedAt: Scalars['DateTime'];
  /** The address to where the order will be shipped. */
  shippingAddress?: Maybe<ShopifyStorefront_MailingAddress>;
  /** The discounts that have been allocated onto the shipping line by discount applications. */
  shippingDiscountAllocations: Array<ShopifyStorefront_DiscountAllocation>;
  /** The unique URL for the order's status page. */
  statusUrl: Scalars['Url'];
  /**
   * Price of the order before shipping and taxes.
   * @deprecated Use `subtotalPriceV2` instead
   */
  subtotalPrice?: Maybe<Scalars['Money']>;
  /** Price of the order before duties, shipping and taxes. */
  subtotalPriceV2?: Maybe<ShopifyStorefront_MoneyV2>;
  /** List of the orderâ€™s successful fulfillments. */
  successfulFulfillments?: Maybe<Array<Maybe<ShopifyStorefront_Fulfillment>>>;
  /**
   * The sum of all the prices of all the items in the order, taxes and discounts included (must be positive).
   * @deprecated Use `totalPriceV2` instead
   */
  totalPrice: Scalars['Money'];
  /** The sum of all the prices of all the items in the order, duties, taxes and discounts included (must be positive). */
  totalPriceV2: ShopifyStorefront_MoneyV2;
  /**
   * The total amount that has been refunded.
   * @deprecated Use `totalRefundedV2` instead
   */
  totalRefunded: Scalars['Money'];
  /** The total amount that has been refunded. */
  totalRefundedV2: ShopifyStorefront_MoneyV2;
  /**
   * The total cost of shipping.
   * @deprecated Use `totalShippingPriceV2` instead
   */
  totalShippingPrice: Scalars['Money'];
  /** The total cost of shipping. */
  totalShippingPriceV2: ShopifyStorefront_MoneyV2;
  /**
   * The total cost of taxes.
   * @deprecated Use `totalTaxV2` instead
   */
  totalTax?: Maybe<Scalars['Money']>;
  /** The total cost of taxes. */
  totalTaxV2?: Maybe<ShopifyStorefront_MoneyV2>;
};


/** An order is a customerâ€™s completed request to purchase one or more products from a shop. An order is created when a customer completes the checkout process, during which time they provides an email address, billing address and payment information. */
export type ShopifyStorefront_OrderDiscountApplicationsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** An order is a customerâ€™s completed request to purchase one or more products from a shop. An order is created when a customer completes the checkout process, during which time they provides an email address, billing address and payment information. */
export type ShopifyStorefront_OrderLineItemsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** An order is a customerâ€™s completed request to purchase one or more products from a shop. An order is created when a customer completes the checkout process, during which time they provides an email address, billing address and payment information. */
export type ShopifyStorefront_OrderMetafieldArgs = {
  namespace: Scalars['String'];
  key: Scalars['String'];
};


/** An order is a customerâ€™s completed request to purchase one or more products from a shop. An order is created when a customer completes the checkout process, during which time they provides an email address, billing address and payment information. */
export type ShopifyStorefront_OrderMetafieldsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** An order is a customerâ€™s completed request to purchase one or more products from a shop. An order is created when a customer completes the checkout process, during which time they provides an email address, billing address and payment information. */
export type ShopifyStorefront_OrderSuccessfulFulfillmentsArgs = {
  first?: InputMaybe<Scalars['Int']>;
};

export enum ShopifyStorefront_OrderCancelReason {
  Customer = 'CUSTOMER',
  Fraud = 'FRAUD',
  Inventory = 'INVENTORY',
  Declined = 'DECLINED',
  Other = 'OTHER'
}

export enum ShopifyStorefront_OrderFinancialStatus {
  Pending = 'PENDING',
  Authorized = 'AUTHORIZED',
  PartiallyPaid = 'PARTIALLY_PAID',
  PartiallyRefunded = 'PARTIALLY_REFUNDED',
  Voided = 'VOIDED',
  Paid = 'PAID',
  Refunded = 'REFUNDED'
}

export enum ShopifyStorefront_OrderFulfillmentStatus {
  Unfulfilled = 'UNFULFILLED',
  PartiallyFulfilled = 'PARTIALLY_FULFILLED',
  Fulfilled = 'FULFILLED',
  Restocked = 'RESTOCKED',
  PendingFulfillment = 'PENDING_FULFILLMENT',
  Open = 'OPEN',
  InProgress = 'IN_PROGRESS',
  OnHold = 'ON_HOLD',
  Scheduled = 'SCHEDULED'
}

/** An auto-generated type for paginating through multiple OrderLineItems. */
export type ShopifyStorefront_OrderLineItemConnection = {
  __typename?: 'ShopifyStorefront_OrderLineItemConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_OrderLineItemEdge>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one OrderLineItem and a cursor during pagination. */
export type ShopifyStorefront_OrderLineItemEdge = {
  __typename?: 'ShopifyStorefront_OrderLineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of OrderLineItemEdge. */
  node: ShopifyStorefront_OrderLineItem;
};

/** Represents a single line in an order. There is one line item for each distinct product variant. */
export type ShopifyStorefront_OrderLineItem = {
  __typename?: 'ShopifyStorefront_OrderLineItem';
  /** The number of entries associated to the line item minus the items that have been removed. */
  currentQuantity: Scalars['Int'];
  /** List of custom attributes associated to the line item. */
  customAttributes: Array<ShopifyStorefront_Attribute>;
  /** The discounts that have been allocated onto the order line item by discount applications. */
  discountAllocations: Array<ShopifyStorefront_DiscountAllocation>;
  /** The total price of the line item, including discounts, and displayed in the presentment currency. */
  discountedTotalPrice: ShopifyStorefront_MoneyV2;
  /** The total price of the line item, not including any discounts. The total price is calculated using the original unit price multiplied by the quantity, and it is displayed in the presentment currency. */
  originalTotalPrice: ShopifyStorefront_MoneyV2;
  /** The number of products variants associated to the line item. */
  quantity: Scalars['Int'];
  /** The title of the product combined with title of the variant. */
  title: Scalars['String'];
  /** The product variant object associated to the line item. */
  variant?: Maybe<ShopifyStorefront_ProductVariant>;
};

/** Represents a single fulfillment in an order. */
export type ShopifyStorefront_Fulfillment = {
  __typename?: 'ShopifyStorefront_Fulfillment';
  /** List of the fulfillment's line items. */
  fulfillmentLineItems: ShopifyStorefront_FulfillmentLineItemConnection;
  /** The name of the tracking company. */
  trackingCompany?: Maybe<Scalars['String']>;
  /**
   * Tracking information associated with the fulfillment,
   * such as the tracking number and tracking URL.
   */
  trackingInfo: Array<ShopifyStorefront_FulfillmentTrackingInfo>;
};


/** Represents a single fulfillment in an order. */
export type ShopifyStorefront_FulfillmentFulfillmentLineItemsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** Represents a single fulfillment in an order. */
export type ShopifyStorefront_FulfillmentTrackingInfoArgs = {
  first?: InputMaybe<Scalars['Int']>;
};

/** An auto-generated type for paginating through multiple FulfillmentLineItems. */
export type ShopifyStorefront_FulfillmentLineItemConnection = {
  __typename?: 'ShopifyStorefront_FulfillmentLineItemConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_FulfillmentLineItemEdge>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination. */
export type ShopifyStorefront_FulfillmentLineItemEdge = {
  __typename?: 'ShopifyStorefront_FulfillmentLineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of FulfillmentLineItemEdge. */
  node: ShopifyStorefront_FulfillmentLineItem;
};

/** Represents a single line item in a fulfillment. There is at most one fulfillment line item for each order line item. */
export type ShopifyStorefront_FulfillmentLineItem = {
  __typename?: 'ShopifyStorefront_FulfillmentLineItem';
  /** The associated order's line item. */
  lineItem: ShopifyStorefront_OrderLineItem;
  /** The amount fulfilled in this fulfillment. */
  quantity: Scalars['Int'];
};

/** Tracking information associated with the fulfillment. */
export type ShopifyStorefront_FulfillmentTrackingInfo = {
  __typename?: 'ShopifyStorefront_FulfillmentTrackingInfo';
  /** The tracking number of the fulfillment. */
  number?: Maybe<Scalars['String']>;
  /** The URL to track the fulfillment. */
  url?: Maybe<Scalars['Url']>;
};

/** Shopify merchants can create pages to hold static HTML content. Each Page object represents a custom page on the online store. */
export type ShopifyStorefront_Page = {
  __typename?: 'ShopifyStorefront_Page';
  /** The description of the page, complete with HTML formatting. */
  body: Scalars['Html'];
  /** Summary of the page body. */
  bodySummary: Scalars['String'];
  /** The timestamp of the page creation. */
  createdAt: Scalars['DateTime'];
  /** A human-friendly unique string for the page automatically generated from its title. */
  handle: Scalars['String'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** Returns a metafield found by namespace and key. */
  metafield?: Maybe<ShopifyStorefront_Metafield>;
  /**
   * A paginated list of metafields associated with the resource.
   * @deprecated The `metafields` field will be removed in the future in favor of using [aliases](https://graphql.org/learn/queries/#aliases) with the `metafield` field.
   *
   */
  metafields: ShopifyStorefront_MetafieldConnection;
  /** The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel. */
  onlineStoreUrl?: Maybe<Scalars['Url']>;
  /** The page's SEO information. */
  seo?: Maybe<ShopifyStorefront_Seo>;
  /** The title of the page. */
  title: Scalars['String'];
  /** The timestamp of the latest page update. */
  updatedAt: Scalars['DateTime'];
};


/** Shopify merchants can create pages to hold static HTML content. Each Page object represents a custom page on the online store. */
export type ShopifyStorefront_PageMetafieldArgs = {
  namespace: Scalars['String'];
  key: Scalars['String'];
};


/** Shopify merchants can create pages to hold static HTML content. Each Page object represents a custom page on the online store. */
export type ShopifyStorefront_PageMetafieldsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** Shop represents a collection of the general settings and information about the shop. */
export type ShopifyStorefront_Shop = {
  __typename?: 'ShopifyStorefront_Shop';
  /** A description of the shop. */
  description?: Maybe<Scalars['String']>;
  /** Returns a metafield found by namespace and key. */
  metafield?: Maybe<ShopifyStorefront_Metafield>;
  /**
   * A paginated list of metafields associated with the resource.
   * @deprecated The `metafields` field will be removed in the future in favor of using [aliases](https://graphql.org/learn/queries/#aliases) with the `metafield` field.
   *
   */
  metafields: ShopifyStorefront_MetafieldConnection;
  /** A string representing the way currency is formatted when the currency isnâ€™t specified. */
  moneyFormat: Scalars['String'];
  /** The shopâ€™s name. */
  name: Scalars['String'];
  /** Settings related to payments. */
  paymentSettings: ShopifyStorefront_PaymentSettings;
  /** The shopâ€™s primary domain. */
  primaryDomain: ShopifyStorefront_Domain;
  /** The shopâ€™s privacy policy. */
  privacyPolicy?: Maybe<ShopifyStorefront_ShopPolicy>;
  /** The shopâ€™s refund policy. */
  refundPolicy?: Maybe<ShopifyStorefront_ShopPolicy>;
  /** The shopâ€™s shipping policy. */
  shippingPolicy?: Maybe<ShopifyStorefront_ShopPolicy>;
  /** Countries that the shop ships to. */
  shipsToCountries: Array<ShopifyStorefront_CountryCode>;
  /** The shopâ€™s subscription policy. */
  subscriptionPolicy?: Maybe<ShopifyStorefront_ShopPolicyWithDefault>;
  /** The shopâ€™s terms of service. */
  termsOfService?: Maybe<ShopifyStorefront_ShopPolicy>;
};


/** Shop represents a collection of the general settings and information about the shop. */
export type ShopifyStorefront_ShopMetafieldArgs = {
  namespace: Scalars['String'];
  key: Scalars['String'];
};


/** Shop represents a collection of the general settings and information about the shop. */
export type ShopifyStorefront_ShopMetafieldsArgs = {
  namespace?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** Settings related to payments. */
export type ShopifyStorefront_PaymentSettings = {
  __typename?: 'ShopifyStorefront_PaymentSettings';
  /** List of the card brands which the shop accepts. */
  acceptedCardBrands: Array<ShopifyStorefront_CardBrand>;
  /** The url pointing to the endpoint to vault credit cards. */
  cardVaultUrl: Scalars['Url'];
  /** The country where the shop is located. */
  countryCode: ShopifyStorefront_CountryCode;
  /** The three-letter code for the shop's primary currency. */
  currencyCode: ShopifyStorefront_CurrencyCode;
  /** A list of enabled currencies (ISO 4217 format) that the shop accepts. Merchants can enable currencies from their Shopify Payments settings in the Shopify admin. */
  enabledPresentmentCurrencies: Array<ShopifyStorefront_CurrencyCode>;
  /** The shopâ€™s Shopify Payments account id. */
  shopifyPaymentsAccountId?: Maybe<Scalars['String']>;
  /** List of the digital wallets which the shop supports. */
  supportedDigitalWallets: Array<ShopifyStorefront_DigitalWallet>;
};

export enum ShopifyStorefront_CardBrand {
  Visa = 'VISA',
  Mastercard = 'MASTERCARD',
  Discover = 'DISCOVER',
  AmericanExpress = 'AMERICAN_EXPRESS',
  DinersClub = 'DINERS_CLUB',
  Jcb = 'JCB'
}

export enum ShopifyStorefront_DigitalWallet {
  ApplePay = 'APPLE_PAY',
  AndroidPay = 'ANDROID_PAY',
  GooglePay = 'GOOGLE_PAY',
  ShopifyPay = 'SHOPIFY_PAY'
}

/** Represents a web address. */
export type ShopifyStorefront_Domain = {
  __typename?: 'ShopifyStorefront_Domain';
  /** The host name of the domain (eg: `example.com`). */
  host: Scalars['String'];
  /** Whether SSL is enabled or not. */
  sslEnabled: Scalars['Boolean'];
  /** The URL of the domain (eg: `https://example.com`). */
  url: Scalars['Url'];
};

/** Policy that a merchant has configured for their store, such as their refund or privacy policy. */
export type ShopifyStorefront_ShopPolicy = {
  __typename?: 'ShopifyStorefront_ShopPolicy';
  /** Policy text, maximum size of 64kb. */
  body: Scalars['String'];
  /** Policyâ€™s handle. */
  handle: Scalars['String'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** Policyâ€™s title. */
  title: Scalars['String'];
  /** Public URL to the policy. */
  url: Scalars['Url'];
};

/**
 * A policy for the store that comes with a default value, such as a subscription policy.
 * If the merchant hasn't configured a policy for their store, then the policy will return the default value.
 * Otherwise, the policy will return the merchant-configured value.
 */
export type ShopifyStorefront_ShopPolicyWithDefault = {
  __typename?: 'ShopifyStorefront_ShopPolicyWithDefault';
  /** The text of the policy. Maximum size: 64KB. */
  body: Scalars['String'];
  /** The handle of the policy. */
  handle: Scalars['String'];
  /** The unique identifier of the policy. A default policy doesn't have an ID. */
  id?: Maybe<Scalars['ID']>;
  /** The title of the policy. */
  title: Scalars['String'];
  /** Public URL to the policy. */
  url: Scalars['Url'];
};

/** Returns the resource which is being referred to by a metafield. */
export type ShopifyStorefront_MetafieldReference = ShopifyStorefront_MediaImage | ShopifyStorefront_Page | ShopifyStorefront_Product | ShopifyStorefront_ProductVariant;

/** Represents a Shopify hosted image. */
export type ShopifyStorefront_MediaImage = {
  __typename?: 'ShopifyStorefront_MediaImage';
  /** A word or phrase to share the nature or contents of a media. */
  alt?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The image for the media. */
  image?: Maybe<ShopifyStorefront_Image>;
  /** The media content type. */
  mediaContentType: ShopifyStorefront_MediaContentType;
  /** The preview image for the media. */
  previewImage?: Maybe<ShopifyStorefront_Image>;
};

/**
 * Properties used by customers to select a product variant.
 * Products can have multiple options, like different sizes or colors.
 */
export type ShopifyStorefront_SelectedOption = {
  __typename?: 'ShopifyStorefront_SelectedOption';
  /** The product optionâ€™s name. */
  name: Scalars['String'];
  /** The product optionâ€™s value. */
  value: Scalars['String'];
};

/** An auto-generated type for paginating through multiple SellingPlanAllocations. */
export type ShopifyStorefront_SellingPlanAllocationConnection = {
  __typename?: 'ShopifyStorefront_SellingPlanAllocationConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_SellingPlanAllocationEdge>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one SellingPlanAllocation and a cursor during pagination. */
export type ShopifyStorefront_SellingPlanAllocationEdge = {
  __typename?: 'ShopifyStorefront_SellingPlanAllocationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of SellingPlanAllocationEdge. */
  node: ShopifyStorefront_SellingPlanAllocation;
};

/** Represents an association between a variant and a selling plan. Selling plan allocations describe the options offered for each variant, and the price of the variant when purchased with a selling plan. */
export type ShopifyStorefront_SellingPlanAllocation = {
  __typename?: 'ShopifyStorefront_SellingPlanAllocation';
  /** A list of price adjustments, with a maximum of two. When there are two, the first price adjustment goes into effect at the time of purchase, while the second one starts after a certain number of orders. A price adjustment represents how a selling plan affects pricing when a variant is purchased with a selling plan. Prices display in the customer's currency if the shop is configured for it. */
  priceAdjustments: Array<ShopifyStorefront_SellingPlanAllocationPriceAdjustment>;
  /** A representation of how products and variants can be sold and purchased. For example, an individual selling plan could be '6 weeks of prepaid granola, delivered weekly'. */
  sellingPlan: ShopifyStorefront_SellingPlan;
};

/** The resulting prices for variants when they're purchased with a specific selling plan. */
export type ShopifyStorefront_SellingPlanAllocationPriceAdjustment = {
  __typename?: 'ShopifyStorefront_SellingPlanAllocationPriceAdjustment';
  /** The price of the variant when it's purchased without a selling plan for the same number of deliveries. For example, if a customer purchases 6 deliveries of $10.00 granola separately, then the price is 6 x $10.00 = $60.00. */
  compareAtPrice: ShopifyStorefront_MoneyV2;
  /** The effective price for a single delivery. For example, for a prepaid subscription plan that includes 6 deliveries at the price of $48.00, the per delivery price is $8.00. */
  perDeliveryPrice: ShopifyStorefront_MoneyV2;
  /** The price of the variant when it's purchased with a selling plan For example, for a prepaid subscription plan that includes 6 deliveries of $10.00 granola, where the customer gets 20% off, the price is 6 x $10.00 x 0.80 = $48.00. */
  price: ShopifyStorefront_MoneyV2;
  /** The resulting price per unit for the variant associated with the selling plan. If the variant isn't sold by quantity or measurement, then this field returns `null`. */
  unitPrice?: Maybe<ShopifyStorefront_MoneyV2>;
};

/** An auto-generated type for paginating through multiple StoreAvailabilities. */
export type ShopifyStorefront_StoreAvailabilityConnection = {
  __typename?: 'ShopifyStorefront_StoreAvailabilityConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_StoreAvailabilityEdge>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one StoreAvailability and a cursor during pagination. */
export type ShopifyStorefront_StoreAvailabilityEdge = {
  __typename?: 'ShopifyStorefront_StoreAvailabilityEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of StoreAvailabilityEdge. */
  node: ShopifyStorefront_StoreAvailability;
};

/**
 * The availability of a product variant at a particular location.
 * Local pick-up must be enabled in the  store's shipping settings, otherwise this will return an empty result.
 */
export type ShopifyStorefront_StoreAvailability = {
  __typename?: 'ShopifyStorefront_StoreAvailability';
  /** Whether or not this product variant is in-stock at this location. */
  available: Scalars['Boolean'];
  /** The location where this product variant is stocked at. */
  location: ShopifyStorefront_Location;
  /** Returns the estimated amount of time it takes for pickup to be ready (Example: Usually ready in 24 hours). */
  pickUpTime: Scalars['String'];
};

/** Represents a location where product inventory is held. */
export type ShopifyStorefront_Location = {
  __typename?: 'ShopifyStorefront_Location';
  /** The address of the location. */
  address: ShopifyStorefront_LocationAddress;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The name of the location. */
  name: Scalars['String'];
};

/** Represents the address of a location. */
export type ShopifyStorefront_LocationAddress = {
  __typename?: 'ShopifyStorefront_LocationAddress';
  /** The first line of the address for the location. */
  address1?: Maybe<Scalars['String']>;
  /** The second line of the address for the location. */
  address2?: Maybe<Scalars['String']>;
  /** The city of the location. */
  city?: Maybe<Scalars['String']>;
  /** The country of the location. */
  country?: Maybe<Scalars['String']>;
  /** The country code of the location. */
  countryCode?: Maybe<Scalars['String']>;
  /** A formatted version of the address for the location. */
  formatted: Array<Scalars['String']>;
  /** The latitude coordinates of the location. */
  latitude?: Maybe<Scalars['Float']>;
  /** The longitude coordinates of the location. */
  longitude?: Maybe<Scalars['Float']>;
  /** The phone number of the location. */
  phone?: Maybe<Scalars['String']>;
  /** The province of the location. */
  province?: Maybe<Scalars['String']>;
  /** The code for the province, state, or district of the address of the location. */
  provinceCode?: Maybe<Scalars['String']>;
  /** The ZIP code of the location. */
  zip?: Maybe<Scalars['String']>;
};

/** The measurement used to calculate a unit price for a product variant (e.g. $9.99 / 100ml). */
export type ShopifyStorefront_UnitPriceMeasurement = {
  __typename?: 'ShopifyStorefront_UnitPriceMeasurement';
  /** The type of unit of measurement for the unit price measurement. */
  measuredType?: Maybe<ShopifyStorefront_UnitPriceMeasurementMeasuredType>;
  /** The quantity unit for the unit price measurement. */
  quantityUnit?: Maybe<ShopifyStorefront_UnitPriceMeasurementMeasuredUnit>;
  /** The quantity value for the unit price measurement. */
  quantityValue: Scalars['Float'];
  /** The reference unit for the unit price measurement. */
  referenceUnit?: Maybe<ShopifyStorefront_UnitPriceMeasurementMeasuredUnit>;
  /** The reference value for the unit price measurement. */
  referenceValue: Scalars['Int'];
};

export enum ShopifyStorefront_UnitPriceMeasurementMeasuredType {
  Volume = 'VOLUME',
  Weight = 'WEIGHT',
  Length = 'LENGTH',
  Area = 'AREA'
}

export enum ShopifyStorefront_UnitPriceMeasurementMeasuredUnit {
  Ml = 'ML',
  Cl = 'CL',
  L = 'L',
  M3 = 'M3',
  Mg = 'MG',
  G = 'G',
  Kg = 'KG',
  Mm = 'MM',
  Cm = 'CM',
  M = 'M',
  M2 = 'M2'
}

export enum ShopifyStorefront_WeightUnit {
  Kilograms = 'KILOGRAMS',
  Grams = 'GRAMS',
  Pounds = 'POUNDS',
  Ounces = 'OUNCES'
}

/** An auto-generated type for paginating through multiple Orders. */
export type ShopifyStorefront_OrderConnection = {
  __typename?: 'ShopifyStorefront_OrderConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_OrderEdge>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one Order and a cursor during pagination. */
export type ShopifyStorefront_OrderEdge = {
  __typename?: 'ShopifyStorefront_OrderEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of OrderEdge. */
  node: ShopifyStorefront_Order;
};

export enum ShopifyStorefront_OrderSortKeys {
  ProcessedAt = 'PROCESSED_AT',
  TotalPrice = 'TOTAL_PRICE',
  Id = 'ID',
  Relevance = 'RELEVANCE'
}

export type Storefront = TsSearchable & {
  __typename?: 'Storefront';
  components: Array<StorefrontComponentsProperty>;
  _shapeId?: Maybe<Scalars['String']>;
  _id?: Maybe<Scalars['ID']>;
  _version?: Maybe<Scalars['Int']>;
  _shapeName?: Maybe<Scalars['String']>;
  _createdAt?: Maybe<Scalars['String']>;
  _createdBy?: Maybe<TsUser>;
  _updatedAt?: Maybe<Scalars['String']>;
  _updatedBy?: Maybe<TsUser>;
  _schemaVersion?: Maybe<Scalars['Float']>;
  /** @deprecated Use _status instead */
  _enabled?: Maybe<Scalars['Boolean']>;
  /** @deprecated Use a custom date field instead */
  _enabledAt?: Maybe<Scalars['String']>;
  _status?: Maybe<DefaultWorkflow>;
  _contentTypeId?: Maybe<Scalars['String']>;
  _contentTypeName?: Maybe<Scalars['String']>;
  searchSummary?: Maybe<Scalars['String']>;
};

export type StorefrontComponentsProperty = OffersComponent | HeroComponent | CollectionsComponent | BackgroundImageComponent | SaleComponent | TestimonialsComponent;

export type OffersComponent = {
  __typename?: 'OffersComponent';
  offers: Array<Offer>;
};

export type Offer = {
  __typename?: 'Offer';
  href: Scalars['String'];
  name: Scalars['String'];
  description: Scalars['String'];
};

export type HeroComponent = {
  __typename?: 'HeroComponent';
  primaryText: Scalars['String'];
  secondaryText: Scalars['String'];
  buttonText: Scalars['String'];
  image: Scalars['String'];
};

export type CollectionsComponent = {
  __typename?: 'CollectionsComponent';
  collections: Array<Collection>;
};

export type Collection = {
  __typename?: 'Collection';
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  imageSrc?: Maybe<Scalars['String']>;
  imageAlt?: Maybe<Scalars['String']>;
  href?: Maybe<Scalars['String']>;
};

export type BackgroundImageComponent = {
  __typename?: 'BackgroundImageComponent';
  image: Scalars['String'];
};

export type SaleComponent = {
  __typename?: 'SaleComponent';
  primaryText: Scalars['String'];
  secondaryText: Scalars['String'];
  buttonText: Scalars['String'];
};

export type TestimonialsComponent = {
  __typename?: 'TestimonialsComponent';
  testimonials: Array<Scalars['JSONObject']>;
};

/** Asset search results */
export type AssetSearchResults = {
  __typename?: 'AssetSearchResults';
  results: Array<Asset>;
  total: Scalars['Int'];
};

/** TsStaticSite search results */
export type TsStaticSiteSearchResults = {
  __typename?: 'TsStaticSiteSearchResults';
  results: Array<TsStaticSite>;
  total: Scalars['Int'];
};

/** Profile search results */
export type ProfileSearchResults = {
  __typename?: 'ProfileSearchResults';
  results: Array<Profile>;
  total: Scalars['Int'];
};

/** TSSearchable search results */
export type TsSearchableSearchResults = {
  __typename?: 'TSSearchableSearchResults';
  results: Array<TsSearchable>;
  total: Scalars['Int'];
};

/** This query allow you to pass context to your queries */
export type WithContext = {
  __typename?: 'WithContext';
  taxonomySuggest?: Maybe<TsSuggestionPaginatedList>;
  /** List Versions for a piece of content */
  getContentVersion?: Maybe<TsVersionResponse>;
  /** List Versions for a piece of content */
  getContentVersionList?: Maybe<TsVersionsPaginatedList>;
  /** Get a Asset by ID */
  getAsset?: Maybe<Asset>;
  /** Returns a list Asset in natural order. */
  getAssetList?: Maybe<AssetPaginatedList>;
  /** Get a TsStaticSite by ID */
  getTsStaticSite?: Maybe<TsStaticSite>;
  /** Returns a list TsStaticSite in natural order. */
  getTsStaticSiteList?: Maybe<TsStaticSitePaginatedList>;
  ReviewsIo_listProductReviews?: Maybe<ReviewsIo_ListProductReviewsResponse>;
  /** Get Stripe products from the TakeShape API Index */
  getIndexedProductList?: Maybe<Stripe_ProductPaginatedList>;
  /** Get the signed in user's profile from ShapeDB */
  getMyProfile?: Maybe<Profile>;
  /** Get the signed in user's subscriptions from Stripe */
  getMySubscriptions?: Maybe<Array<Maybe<Stripe_Subscription>>>;
  /** Get the signed-in user's payments from Stripe */
  getMyPayments_UNINDEXED?: Maybe<Array<Maybe<Stripe_PaymentIntent>>>;
  /** Get the signed-in user's payments from Stripe */
  getMyPayments_INDEXED?: Maybe<Stripe_PaymentIntentPaginatedList>;
  /** Get the signed-in user's payments from Stripe */
  getMyPayments?: Maybe<Array<Maybe<Stripe_PaymentIntent>>>;
  /** Get the signed-in user's payments from Stripe */
  getMyPaymentsIndexed?: Maybe<Stripe_PaymentIntentPaginatedList>;
  /** Get a profile by ID */
  getProfile?: Maybe<Profile>;
  /** Returns a list of profiles in natural order. */
  getProfileList?: Maybe<ProfilePaginatedList>;
  /** <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p> */
  Stripe_listProducts?: Maybe<Stripe_ListProductsResponse>;
  /** <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p> */
  Stripe_getProduct?: Maybe<Stripe_Product>;
  /** Get a loyalty card from Voucherify */
  getMyLoyaltyCard?: Maybe<Voucherify_LoyaltyCard>;
  getMyNewsletterSubscriptions?: Maybe<Array<Maybe<ProfileNewsletterStatus>>>;
  /** <p>When retrieving an invoice, youâ€™ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
  Stripe_listInvoiceLines?: Maybe<Stripe_ListInvoiceLinesResponse>;
  /** <p>Returns a list of PaymentIntents.</p> */
  Stripe_listPaymentIntents?: Maybe<Stripe_ListPaymentIntentsResponse>;
  /** Get a NavigationData by ID */
  getNavigationData?: Maybe<NavigationData>;
  /** Get a Footer by ID */
  getFooter?: Maybe<Footer>;
  Shopify_productVariants?: Maybe<Shopify_ProductVariantConnection>;
  Shopify_products?: Maybe<Shopify_ProductConnection>;
  Shopify_product?: Maybe<Shopify_Product>;
  Shopify_customer?: Maybe<Shopify_Customer>;
  Shopify_customerPaymentMethod?: Maybe<Shopify_CustomerPaymentMethod>;
  ShopifyStorefront_customer?: Maybe<ShopifyStorefront_Customer>;
  getMyCustomer?: Maybe<ShopifyStorefront_Customer>;
  getMyAdminCustomer?: Maybe<Shopify_Customer>;
  /** Get a Storefront by ID */
  getStorefront?: Maybe<Storefront>;
  searchAssetIndex?: Maybe<AssetSearchResults>;
  searchTsStaticSiteIndex?: Maybe<TsStaticSiteSearchResults>;
  searchProfileIndex?: Maybe<ProfileSearchResults>;
  search?: Maybe<TsSearchableSearchResults>;
};


/** This query allow you to pass context to your queries */
export type WithContextTaxonomySuggestArgs = {
  shapeNames?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  shapeIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  contentTypeNames?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  contentTypeIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  terms?: InputMaybe<Scalars['String']>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<Scalars['JSON']>;
  sort?: InputMaybe<Array<InputMaybe<TsSearchSort>>>;
};


/** This query allow you to pass context to your queries */
export type WithContextGetContentVersionArgs = {
  id: Scalars['ID'];
  version: Scalars['Int'];
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};


/** This query allow you to pass context to your queries */
export type WithContextGetContentVersionListArgs = {
  id: Scalars['ID'];
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
};


/** This query allow you to pass context to your queries */
export type WithContextGetAssetArgs = {
  _id: Scalars['ID'];
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};


/** This query allow you to pass context to your queries */
export type WithContextGetAssetListArgs = {
  terms?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<Scalars['JSONObject']>;
  sort?: InputMaybe<Array<InputMaybe<TsSearchSortInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
  onlyEnabled?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<TsWhereAssetInput>;
};


/** This query allow you to pass context to your queries */
export type WithContextGetTsStaticSiteArgs = {
  _id: Scalars['ID'];
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};


/** This query allow you to pass context to your queries */
export type WithContextGetTsStaticSiteListArgs = {
  terms?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<Scalars['JSONObject']>;
  sort?: InputMaybe<Array<InputMaybe<TsSearchSortInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
  onlyEnabled?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<TsWhereTsStaticSiteInput>;
};


/** This query allow you to pass context to your queries */
export type WithContextReviewsIo_ListProductReviewsArgs = {
  sku?: InputMaybe<Scalars['String']>;
  mpn?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['String']>;
  per_page?: InputMaybe<Scalars['String']>;
  photos?: InputMaybe<Scalars['Int']>;
  verified_only?: InputMaybe<Scalars['Int']>;
  comments_only?: InputMaybe<Scalars['Int']>;
  minRating?: InputMaybe<Scalars['Int']>;
  include_unpublished_images?: InputMaybe<Scalars['Int']>;
  include_moderated?: InputMaybe<Scalars['Int']>;
  order_id?: InputMaybe<Scalars['String']>;
  min_date?: InputMaybe<Scalars['String']>;
  max_date?: InputMaybe<Scalars['String']>;
};


/** This query allow you to pass context to your queries */
export type WithContextGetIndexedProductListArgs = {
  terms?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<Scalars['JSONObject']>;
  sort?: InputMaybe<Array<InputMaybe<TsSearchSortInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
  onlyEnabled?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<TsWhereStripeProductInput>;
};


/** This query allow you to pass context to your queries */
export type WithContextGetMySubscriptionsArgs = {
  expand?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** This query allow you to pass context to your queries */
export type WithContextGetMyPayments_UnindexedArgs = {
  expand?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  limit?: InputMaybe<Scalars['Float']>;
  created?: InputMaybe<Scalars['JSON']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
};


/** This query allow you to pass context to your queries */
export type WithContextGetMyPayments_IndexedArgs = {
  terms?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<Scalars['JSONObject']>;
  sort?: InputMaybe<Array<InputMaybe<TsSearchSortInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
  onlyEnabled?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<TsWhereStripePaymentIntentInput>;
};


/** This query allow you to pass context to your queries */
export type WithContextGetMyPaymentsArgs = {
  expand?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  limit?: InputMaybe<Scalars['Float']>;
  created?: InputMaybe<Scalars['JSON']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
};


/** This query allow you to pass context to your queries */
export type WithContextGetMyPaymentsIndexedArgs = {
  terms?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<Scalars['JSONObject']>;
  sort?: InputMaybe<Array<InputMaybe<TsSearchSortInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
  onlyEnabled?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<TsWhereStripePaymentIntentInput>;
};


/** This query allow you to pass context to your queries */
export type WithContextGetProfileArgs = {
  _id: Scalars['ID'];
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};


/** This query allow you to pass context to your queries */
export type WithContextGetProfileListArgs = {
  terms?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<Scalars['JSONObject']>;
  sort?: InputMaybe<Array<InputMaybe<TsSearchSortInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
  onlyEnabled?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<TsWhereProfileInput>;
};


/** This query allow you to pass context to your queries */
export type WithContextStripe_ListProductsArgs = {
  active?: InputMaybe<Scalars['Boolean']>;
  created?: InputMaybe<Scalars['JSON']>;
  ending_before?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  ids?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  limit?: InputMaybe<Scalars['Int']>;
  shippable?: InputMaybe<Scalars['Boolean']>;
  starting_after?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};


/** This query allow you to pass context to your queries */
export type WithContextStripe_GetProductArgs = {
  expand?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id: Scalars['String'];
};


/** This query allow you to pass context to your queries */
export type WithContextStripe_ListInvoiceLinesArgs = {
  ending_before?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  invoice: Scalars['String'];
  limit?: InputMaybe<Scalars['Int']>;
  starting_after?: InputMaybe<Scalars['String']>;
};


/** This query allow you to pass context to your queries */
export type WithContextStripe_ListPaymentIntentsArgs = {
  created?: InputMaybe<Scalars['JSON']>;
  customer?: InputMaybe<Scalars['String']>;
  ending_before?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  limit?: InputMaybe<Scalars['Int']>;
  starting_after?: InputMaybe<Scalars['String']>;
};


/** This query allow you to pass context to your queries */
export type WithContextGetNavigationDataArgs = {
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};


/** This query allow you to pass context to your queries */
export type WithContextGetFooterArgs = {
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};


/** This query allow you to pass context to your queries */
export type WithContextShopify_ProductVariantsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_ProductVariantSortKeys>;
  query?: InputMaybe<Scalars['String']>;
  savedSearchId?: InputMaybe<Scalars['ID']>;
};


/** This query allow you to pass context to your queries */
export type WithContextShopify_ProductsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<Shopify_ProductSortKeys>;
  query?: InputMaybe<Scalars['String']>;
  savedSearchId?: InputMaybe<Scalars['ID']>;
};


/** This query allow you to pass context to your queries */
export type WithContextShopify_ProductArgs = {
  id: Scalars['ID'];
};


/** This query allow you to pass context to your queries */
export type WithContextShopify_CustomerArgs = {
  id: Scalars['ID'];
};


/** This query allow you to pass context to your queries */
export type WithContextShopify_CustomerPaymentMethodArgs = {
  id: Scalars['ID'];
  showRevoked?: InputMaybe<Scalars['Boolean']>;
};


/** This query allow you to pass context to your queries */
export type WithContextShopifyStorefront_CustomerArgs = {
  customerAccessToken: Scalars['String'];
};


/** This query allow you to pass context to your queries */
export type WithContextGetStorefrontArgs = {
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};


/** This query allow you to pass context to your queries */
export type WithContextSearchAssetIndexArgs = {
  terms?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<Scalars['JSONObject']>;
  sort?: InputMaybe<Array<InputMaybe<TsSearchSortInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<TsWhereAssetInput>;
};


/** This query allow you to pass context to your queries */
export type WithContextSearchTsStaticSiteIndexArgs = {
  terms?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<Scalars['JSONObject']>;
  sort?: InputMaybe<Array<InputMaybe<TsSearchSortInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<TsWhereTsStaticSiteInput>;
};


/** This query allow you to pass context to your queries */
export type WithContextSearchProfileIndexArgs = {
  terms?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<Scalars['JSONObject']>;
  sort?: InputMaybe<Array<InputMaybe<TsSearchSortInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<TsWhereProfileInput>;
};


/** This query allow you to pass context to your queries */
export type WithContextSearchArgs = {
  terms?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<Scalars['JSONObject']>;
  sort?: InputMaybe<Array<InputMaybe<TsSearchSortInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
  shapeNames?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  shapeIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  contentTypeNames?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  contentTypeIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  where?: InputMaybe<TsWhereInput>;
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Initiate upload process for asset(s) */
  uploadAssets?: Maybe<Array<Maybe<Upload>>>;
  /** Replace an asset file */
  replaceAsset?: Maybe<Upload>;
  /** Update Asset */
  updateAsset?: Maybe<UpdateAssetResult>;
  /** Create Asset */
  createAsset?: Maybe<CreateAssetResult>;
  /** Duplicate Asset */
  duplicateAsset?: Maybe<DuplicateAssetResult>;
  /** Delete Asset */
  deleteAsset?: Maybe<DeleteAssetResult>;
  /** Update TsStaticSite */
  updateTsStaticSite?: Maybe<UpdateTsStaticSiteResult>;
  /** Create TsStaticSite */
  createTsStaticSite?: Maybe<CreateTsStaticSiteResult>;
  /** Duplicate TsStaticSite */
  duplicateTsStaticSite?: Maybe<DuplicateTsStaticSiteResult>;
  /** Delete TsStaticSite */
  deleteTsStaticSite?: Maybe<DeleteTsStaticSiteResult>;
  /** Create a shipment with ShipEngine. */
  createShipment?: Maybe<ShipEngine_Label>;
  /** A privileged user or webhook can upsert a user's profile in ShapeDB. */
  upsertProfile?: Maybe<Profile>;
  /** Upsert the signed-in user's profile in ShapeDB. */
  upsertMyProfile?: Maybe<Profile>;
  /** Upsert the signed-in user's Stripe customer */
  upsertMyCustomer?: Maybe<Stripe_Customer>;
  /** Delete the signed-in user's subscription in Stripe */
  deleteMySubscription?: Maybe<Stripe_Subscription>;
  /** Create a Shopify storefront cart. */
  createMyCheckoutSession?: Maybe<ShopifyStorefront_Cart>;
  /** Create a Shopify storefront cart. */
  createMyCheckout?: Maybe<ShopifyStorefront_Cart>;
  subscribeMyEmailToNewsletter?: Maybe<Klaviyo_AddMembersResponse>;
  unsubscribeMyEmailFromNewsletter?: Maybe<Klaviyo_200Ok>;
  /** Create a Stripe checkout session for the signed-in user */
  createMyCheckoutSession_Stripe?: Maybe<Stripe_CheckoutSession>;
  /** Update Profile */
  updateProfile?: Maybe<UpdateProfileResult>;
  /** Create Profile */
  createProfile?: Maybe<CreateProfileResult>;
  /** Duplicate Profile */
  duplicateProfile?: Maybe<DuplicateProfileResult>;
  /** Delete Profile */
  deleteProfile?: Maybe<DeleteProfileResult>;
  /** Create an order in Voucherify */
  Voucherify_createOrder?: Maybe<Voucherify_Order>;
  Klaviyo_addMembers?: Maybe<Klaviyo_AddMembersResponse>;
  Klaviyo_removeMembers?: Maybe<Klaviyo_200Ok>;
  /** <p>Returns a list of Checkout Sessions.</p> */
  listCheckoutSessions?: Maybe<Stripe_ListCheckoutSessionsResponse>;
  ReviewsIo_createInvitation?: Maybe<ReviewsIo_CreateInvitationResponse>;
  /** Update NavigationData */
  updateNavigationData?: Maybe<UpdateNavigationDataResult>;
  /** Update Footer */
  updateFooter?: Maybe<UpdateFooterResult>;
  ShopifyStorefront_cartCreate?: Maybe<ShopifyStorefront_CartCreatePayload>;
  createMyCart?: Maybe<ShopifyStorefront_CartCreatePayload>;
  ShopifyStorefront_customerAccessTokenCreate?: Maybe<ShopifyStorefront_CustomerAccessTokenCreatePayload>;
  ShopifyStorefront_customerCreate?: Maybe<ShopifyStorefront_CustomerCreatePayload>;
  createCustomer?: Maybe<CreateCustomerPayload>;
  ShopifyStorefront_customerRecover?: Maybe<ShopifyStorefront_CustomerRecoverPayload>;
  ShopifyStorefront_customerUpdate?: Maybe<ShopifyStorefront_CustomerUpdatePayload>;
  ShopifyStorefront_customerAddressUpdate?: Maybe<ShopifyStorefront_CustomerAddressUpdatePayload>;
  updateMyCustomer?: Maybe<ShopifyStorefront_CustomerUpdatePayload>;
  updateMyCustomerAddress?: Maybe<ShopifyStorefront_CustomerAddressUpdatePayload>;
  Gorgias_createTicket?: Maybe<Gorgias_CreateTicketResponse>;
  /** Update Storefront */
  updateStorefront?: Maybe<UpdateStorefrontResult>;
};


export type MutationUploadAssetsArgs = {
  projectId?: InputMaybe<Scalars['ID']>;
  files: Array<InputMaybe<TsFile>>;
};


export type MutationReplaceAssetArgs = {
  projectId?: InputMaybe<Scalars['ID']>;
  _id: Scalars['ID'];
  _version: Scalars['Int'];
  file: TsFile;
};


export type MutationUpdateAssetArgs = {
  input: UpdateAssetInput;
  clientMutationId?: InputMaybe<Scalars['String']>;
  structure?: InputMaybe<Array<InputMaybe<ContentStructureInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};


export type MutationCreateAssetArgs = {
  input: CreateAssetInput;
  clientMutationId?: InputMaybe<Scalars['String']>;
};


export type MutationDuplicateAssetArgs = {
  input: DuplicateAssetInput;
  clientMutationId?: InputMaybe<Scalars['String']>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};


export type MutationDeleteAssetArgs = {
  input: DeleteAssetInput;
  clientMutationId?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateTsStaticSiteArgs = {
  input: UpdateTsStaticSiteInput;
  clientMutationId?: InputMaybe<Scalars['String']>;
  structure?: InputMaybe<Array<InputMaybe<ContentStructureInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};


export type MutationCreateTsStaticSiteArgs = {
  input: CreateTsStaticSiteInput;
  clientMutationId?: InputMaybe<Scalars['String']>;
};


export type MutationDuplicateTsStaticSiteArgs = {
  input: DuplicateTsStaticSiteInput;
  clientMutationId?: InputMaybe<Scalars['String']>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};


export type MutationDeleteTsStaticSiteArgs = {
  input: DeleteTsStaticSiteInput;
  clientMutationId?: InputMaybe<Scalars['String']>;
};


export type MutationCreateShipmentArgs = {
  shipment_id?: InputMaybe<Scalars['String']>;
  carrier_id?: InputMaybe<Scalars['String']>;
  service_code?: InputMaybe<Scalars['String']>;
  external_order_id?: InputMaybe<Scalars['String']>;
  external_shipment_id?: InputMaybe<Scalars['String']>;
  ship_date?: InputMaybe<Scalars['String']>;
  created_at?: InputMaybe<Scalars['String']>;
  modified_at?: InputMaybe<Scalars['String']>;
  shipment_status?: InputMaybe<Scalars['String']>;
  origin_type?: InputMaybe<Scalars['String']>;
  insurance_provider?: InputMaybe<Scalars['String']>;
  order_source_code?: InputMaybe<Scalars['String']>;
  packages?: InputMaybe<Array<InputMaybe<ShipEngine_PackageInput>>>;
  ship_to?: InputMaybe<ShipEngine_AddressInput>;
  ship_from?: InputMaybe<ShipEngine_AddressInput>;
};


export type MutationUpsertProfileArgs = {
  id: Scalars['String'];
  email: Scalars['String'];
};


export type MutationUpsertMyProfileArgs = {
  name?: InputMaybe<Scalars['String']>;
  bio?: InputMaybe<Scalars['String']>;
  avatarId?: InputMaybe<Scalars['String']>;
};


export type MutationUpsertMyCustomerArgs = {
  name?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  address?: InputMaybe<UpsertMyCustomerPropertiesAddressPropertyInput>;
};


export type MutationDeleteMySubscriptionArgs = {
  subscriptionId: Scalars['String'];
};


export type MutationCreateMyCheckoutSessionArgs = {
  lines: Array<CreateMyCheckoutSessionPropertiesLinesItemsPropertyInput>;
};


export type MutationCreateMyCheckoutArgs = {
  email?: InputMaybe<Scalars['String']>;
  lines: Array<CreateMyCheckoutPropertiesLinesItemsPropertyInput>;
};


export type MutationSubscribeMyEmailToNewsletterArgs = {
  list_id: Scalars['String'];
};


export type MutationUnsubscribeMyEmailFromNewsletterArgs = {
  list_id: Scalars['String'];
};


export type MutationCreateMyCheckoutSession_StripeArgs = {
  redirectUrl: Scalars['String'];
  mode: Scalars['String'];
  lineItems: Array<CreateMyCheckoutSession_StripePropertiesLineItemsItemsPropertyInput>;
};


export type MutationUpdateProfileArgs = {
  input: UpdateProfileInput;
  clientMutationId?: InputMaybe<Scalars['String']>;
  structure?: InputMaybe<Array<InputMaybe<ContentStructureInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};


export type MutationCreateProfileArgs = {
  input: CreateProfileInput;
  clientMutationId?: InputMaybe<Scalars['String']>;
};


export type MutationDuplicateProfileArgs = {
  input: DuplicateProfileInput;
  clientMutationId?: InputMaybe<Scalars['String']>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};


export type MutationDeleteProfileArgs = {
  input: DeleteProfileInput;
  clientMutationId?: InputMaybe<Scalars['String']>;
};


export type MutationVoucherify_CreateOrderArgs = {
  email?: InputMaybe<Scalars['String']>;
  amount?: InputMaybe<Scalars['Float']>;
  status?: InputMaybe<Scalars['String']>;
  items?: InputMaybe<Array<InputMaybe<Voucherify_OrderItemInput>>>;
};


export type MutationKlaviyo_AddMembersArgs = {
  input?: InputMaybe<AddListMembersInput>;
  list_id: Scalars['String'];
};


export type MutationKlaviyo_RemoveMembersArgs = {
  input?: InputMaybe<Klaviyo_RemoveMembersPropertiesPropertyInput>;
  list_id: Scalars['String'];
};


export type MutationListCheckoutSessionsArgs = {
  ending_before?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  limit?: InputMaybe<Scalars['Int']>;
  payment_intent?: InputMaybe<Scalars['String']>;
  starting_after?: InputMaybe<Scalars['String']>;
  subscription?: InputMaybe<Scalars['String']>;
};


export type MutationReviewsIo_CreateInvitationArgs = {
  input?: InputMaybe<ReviewsIo_CreateInvitationPropertiesPropertyInput>;
};


export type MutationUpdateNavigationDataArgs = {
  input: UpdateNavigationDataInput;
  clientMutationId?: InputMaybe<Scalars['String']>;
  structure?: InputMaybe<Array<InputMaybe<ContentStructureInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};


export type MutationUpdateFooterArgs = {
  input: UpdateFooterInput;
  clientMutationId?: InputMaybe<Scalars['String']>;
  structure?: InputMaybe<Array<InputMaybe<ContentStructureInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};


export type MutationShopifyStorefront_CartCreateArgs = {
  input?: InputMaybe<ShopifyStorefront_CartInput>;
};


export type MutationCreateMyCartArgs = {
  input?: InputMaybe<ShopifyStorefront_CartInput>;
};


export type MutationShopifyStorefront_CustomerAccessTokenCreateArgs = {
  input: ShopifyStorefront_CustomerAccessTokenCreateInput;
};


export type MutationShopifyStorefront_CustomerCreateArgs = {
  input: ShopifyStorefront_CustomerCreateInput;
};


export type MutationCreateCustomerArgs = {
  input: CreateCustomerPropertiesPropertyInput;
};


export type MutationShopifyStorefront_CustomerRecoverArgs = {
  email: Scalars['String'];
};


export type MutationShopifyStorefront_CustomerUpdateArgs = {
  customerAccessToken: Scalars['String'];
  customer: ShopifyStorefront_CustomerUpdateInput;
};


export type MutationShopifyStorefront_CustomerAddressUpdateArgs = {
  customerAccessToken: Scalars['String'];
  id: Scalars['ID'];
  address: ShopifyStorefront_MailingAddressInput;
};


export type MutationUpdateMyCustomerArgs = {
  customerAccessToken?: InputMaybe<Scalars['String']>;
  customer: ShopifyStorefront_CustomerUpdateInput;
};


export type MutationUpdateMyCustomerAddressArgs = {
  customerAccessToken?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  address: ShopifyStorefront_MailingAddressInput;
};


export type MutationGorgias_CreateTicketArgs = {
  message?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
};


export type MutationUpdateStorefrontArgs = {
  input: UpdateStorefrontInput;
  clientMutationId?: InputMaybe<Scalars['String']>;
  structure?: InputMaybe<Array<InputMaybe<ContentStructureInput>>>;
  locale?: InputMaybe<Scalars['String']>;
  enableLocaleFallback?: InputMaybe<Scalars['Boolean']>;
};

/** A project file stored on s3 */
export type Upload = {
  __typename?: 'Upload';
  uploadUrl?: Maybe<Scalars['ID']>;
  asset?: Maybe<Asset>;
};

export type TsFile = {
  name: Scalars['String'];
  type: Scalars['String'];
};

export type UpdateAssetResult = {
  __typename?: 'UpdateAssetResult';
  clientMutationId?: Maybe<Scalars['String']>;
  result?: Maybe<Asset>;
};

/** update Asset input */
export type UpdateAssetInput = {
  _id: Scalars['ID'];
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  filename?: InputMaybe<Scalars['String']>;
  caption?: InputMaybe<Scalars['JSON']>;
  credit?: InputMaybe<Scalars['JSON']>;
  path?: InputMaybe<Scalars['String']>;
  mimeType?: InputMaybe<Scalars['String']>;
  sourceUrl?: InputMaybe<Scalars['String']>;
  uploadStatus?: InputMaybe<Scalars['String']>;
  _shapeId?: InputMaybe<Scalars['String']>;
  _version?: InputMaybe<Scalars['Int']>;
  _shapeName?: InputMaybe<Scalars['String']>;
  _createdAt?: InputMaybe<Scalars['String']>;
  _createdBy?: InputMaybe<Scalars['String']>;
  _updatedAt?: InputMaybe<Scalars['String']>;
  _updatedBy?: InputMaybe<Scalars['String']>;
  _schemaVersion?: InputMaybe<Scalars['Float']>;
  _enabled?: InputMaybe<Scalars['Boolean']>;
  _enabledAt?: InputMaybe<Scalars['String']>;
  _status?: InputMaybe<DefaultWorkflow>;
  _contentTypeId?: InputMaybe<Scalars['String']>;
  _contentTypeName?: InputMaybe<Scalars['String']>;
  s3Key?: InputMaybe<Scalars['String']>;
};

/** Describes a structural update to an array of data. */
export type ContentStructureInput = {
  /** A deep path to the array being updated (e.g. a.b[1].c). */
  path: Scalars['String'];
  /** An array where the indices represent the to index, and the values represent the from index.For example to transform ["a","b","c","d"] into ["c","a"], this value would be [2,0]. */
  structure?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
};

export type CreateAssetResult = {
  __typename?: 'CreateAssetResult';
  clientMutationId?: Maybe<Scalars['String']>;
  result?: Maybe<Asset>;
};

/** create Asset input */
export type CreateAssetInput = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  filename: Scalars['String'];
  caption?: InputMaybe<Scalars['JSON']>;
  credit?: InputMaybe<Scalars['JSON']>;
  path: Scalars['String'];
  mimeType?: InputMaybe<Scalars['String']>;
  sourceUrl?: InputMaybe<Scalars['String']>;
  uploadStatus?: InputMaybe<Scalars['String']>;
  _shapeId?: InputMaybe<Scalars['String']>;
  _id?: InputMaybe<Scalars['ID']>;
  _version?: InputMaybe<Scalars['Int']>;
  _shapeName?: InputMaybe<Scalars['String']>;
  _createdAt?: InputMaybe<Scalars['String']>;
  _createdBy?: InputMaybe<Scalars['String']>;
  _updatedAt?: InputMaybe<Scalars['String']>;
  _updatedBy?: InputMaybe<Scalars['String']>;
  _schemaVersion?: InputMaybe<Scalars['Float']>;
  _enabled?: InputMaybe<Scalars['Boolean']>;
  _enabledAt?: InputMaybe<Scalars['String']>;
  _status?: InputMaybe<DefaultWorkflow>;
  _contentTypeId?: InputMaybe<Scalars['String']>;
  _contentTypeName?: InputMaybe<Scalars['String']>;
  s3Key?: InputMaybe<Scalars['String']>;
};

export type DuplicateAssetResult = {
  __typename?: 'DuplicateAssetResult';
  clientMutationId?: Maybe<Scalars['String']>;
  result?: Maybe<Asset>;
};

/** duplicate Asset input */
export type DuplicateAssetInput = {
  _id: Scalars['ID'];
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  filename?: InputMaybe<Scalars['String']>;
  caption?: InputMaybe<Scalars['JSON']>;
  credit?: InputMaybe<Scalars['JSON']>;
  path?: InputMaybe<Scalars['String']>;
  mimeType?: InputMaybe<Scalars['String']>;
  sourceUrl?: InputMaybe<Scalars['String']>;
  uploadStatus?: InputMaybe<Scalars['String']>;
  _shapeId?: InputMaybe<Scalars['String']>;
  _version?: InputMaybe<Scalars['Int']>;
  _shapeName?: InputMaybe<Scalars['String']>;
  _createdAt?: InputMaybe<Scalars['String']>;
  _createdBy?: InputMaybe<Scalars['String']>;
  _updatedAt?: InputMaybe<Scalars['String']>;
  _updatedBy?: InputMaybe<Scalars['String']>;
  _schemaVersion?: InputMaybe<Scalars['Float']>;
  _enabled?: InputMaybe<Scalars['Boolean']>;
  _enabledAt?: InputMaybe<Scalars['String']>;
  _status?: InputMaybe<DefaultWorkflow>;
  _contentTypeId?: InputMaybe<Scalars['String']>;
  _contentTypeName?: InputMaybe<Scalars['String']>;
  s3Key?: InputMaybe<Scalars['String']>;
};

export type DeleteAssetResult = {
  __typename?: 'DeleteAssetResult';
  clientMutationId?: Maybe<Scalars['String']>;
  result?: Maybe<Scalars['Boolean']>;
};

/** delete Asset input */
export type DeleteAssetInput = {
  _id: Scalars['ID'];
};

export type UpdateTsStaticSiteResult = {
  __typename?: 'UpdateTsStaticSiteResult';
  clientMutationId?: Maybe<Scalars['String']>;
  result?: Maybe<TsStaticSite>;
};

/** update TsStaticSite input */
export type UpdateTsStaticSiteInput = {
  _id: Scalars['ID'];
  title?: InputMaybe<Scalars['String']>;
  baseUrl?: InputMaybe<Scalars['String']>;
  provider?: InputMaybe<Scalars['String']>;
  idKey?: InputMaybe<Scalars['String']>;
  secretKey?: InputMaybe<Scalars['String']>;
  destination?: InputMaybe<Scalars['String']>;
  privateAcl?: InputMaybe<Scalars['Boolean']>;
  environmentVariables?: InputMaybe<Array<InputMaybe<TsStaticSiteEnvironmentVariablesInput>>>;
  triggers?: InputMaybe<Array<InputMaybe<TsStaticSiteTriggersInput>>>;
  templateHash?: InputMaybe<Scalars['String']>;
  _shapeId?: InputMaybe<Scalars['String']>;
  _version?: InputMaybe<Scalars['Int']>;
  _shapeName?: InputMaybe<Scalars['String']>;
  _createdAt?: InputMaybe<Scalars['String']>;
  _createdBy?: InputMaybe<Scalars['String']>;
  _updatedAt?: InputMaybe<Scalars['String']>;
  _updatedBy?: InputMaybe<Scalars['String']>;
  _schemaVersion?: InputMaybe<Scalars['Float']>;
  _enabled?: InputMaybe<Scalars['Boolean']>;
  _enabledAt?: InputMaybe<Scalars['String']>;
  _status?: InputMaybe<DefaultWorkflow>;
  _contentTypeId?: InputMaybe<Scalars['String']>;
  _contentTypeName?: InputMaybe<Scalars['String']>;
};

export type TsStaticSiteEnvironmentVariablesInput = {
  name?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['String']>;
};

export type TsStaticSiteTriggersInput = {
  contentTypeId?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['String']>;
};

export type CreateTsStaticSiteResult = {
  __typename?: 'CreateTsStaticSiteResult';
  clientMutationId?: Maybe<Scalars['String']>;
  result?: Maybe<TsStaticSite>;
};

/** create TsStaticSite input */
export type CreateTsStaticSiteInput = {
  title: Scalars['String'];
  baseUrl?: InputMaybe<Scalars['String']>;
  provider?: Scalars['String'];
  idKey?: InputMaybe<Scalars['String']>;
  secretKey?: InputMaybe<Scalars['String']>;
  destination: Scalars['String'];
  privateAcl?: InputMaybe<Scalars['Boolean']>;
  environmentVariables?: InputMaybe<Array<InputMaybe<TsStaticSiteEnvironmentVariablesInput>>>;
  triggers?: InputMaybe<Array<InputMaybe<TsStaticSiteTriggersInput>>>;
  templateHash?: InputMaybe<Scalars['String']>;
  _shapeId?: InputMaybe<Scalars['String']>;
  _id?: InputMaybe<Scalars['ID']>;
  _version?: InputMaybe<Scalars['Int']>;
  _shapeName?: InputMaybe<Scalars['String']>;
  _createdAt?: InputMaybe<Scalars['String']>;
  _createdBy?: InputMaybe<Scalars['String']>;
  _updatedAt?: InputMaybe<Scalars['String']>;
  _updatedBy?: InputMaybe<Scalars['String']>;
  _schemaVersion?: InputMaybe<Scalars['Float']>;
  _enabled?: InputMaybe<Scalars['Boolean']>;
  _enabledAt?: InputMaybe<Scalars['String']>;
  _status?: InputMaybe<DefaultWorkflow>;
  _contentTypeId?: InputMaybe<Scalars['String']>;
  _contentTypeName?: InputMaybe<Scalars['String']>;
};

export type DuplicateTsStaticSiteResult = {
  __typename?: 'DuplicateTsStaticSiteResult';
  clientMutationId?: Maybe<Scalars['String']>;
  result?: Maybe<TsStaticSite>;
};

/** duplicate TsStaticSite input */
export type DuplicateTsStaticSiteInput = {
  _id: Scalars['ID'];
  title?: InputMaybe<Scalars['String']>;
  baseUrl?: InputMaybe<Scalars['String']>;
  provider?: InputMaybe<Scalars['String']>;
  idKey?: InputMaybe<Scalars['String']>;
  secretKey?: InputMaybe<Scalars['String']>;
  destination?: InputMaybe<Scalars['String']>;
  privateAcl?: InputMaybe<Scalars['Boolean']>;
  environmentVariables?: InputMaybe<Array<InputMaybe<TsStaticSiteEnvironmentVariablesInput>>>;
  triggers?: InputMaybe<Array<InputMaybe<TsStaticSiteTriggersInput>>>;
  templateHash?: InputMaybe<Scalars['String']>;
  _shapeId?: InputMaybe<Scalars['String']>;
  _version?: InputMaybe<Scalars['Int']>;
  _shapeName?: InputMaybe<Scalars['String']>;
  _createdAt?: InputMaybe<Scalars['String']>;
  _createdBy?: InputMaybe<Scalars['String']>;
  _updatedAt?: InputMaybe<Scalars['String']>;
  _updatedBy?: InputMaybe<Scalars['String']>;
  _schemaVersion?: InputMaybe<Scalars['Float']>;
  _enabled?: InputMaybe<Scalars['Boolean']>;
  _enabledAt?: InputMaybe<Scalars['String']>;
  _status?: InputMaybe<DefaultWorkflow>;
  _contentTypeId?: InputMaybe<Scalars['String']>;
  _contentTypeName?: InputMaybe<Scalars['String']>;
};

export type DeleteTsStaticSiteResult = {
  __typename?: 'DeleteTsStaticSiteResult';
  clientMutationId?: Maybe<Scalars['String']>;
  result?: Maybe<Scalars['Boolean']>;
};

/** delete TsStaticSite input */
export type DeleteTsStaticSiteInput = {
  _id: Scalars['ID'];
};

export type ShipEngine_PackageInput = {
  package_id?: InputMaybe<Scalars['Int']>;
  description?: InputMaybe<Scalars['String']>;
  package_code?: InputMaybe<Scalars['String']>;
  tracking_number?: InputMaybe<Scalars['String']>;
  label_download?: InputMaybe<ShipEngine_LabelDownloadInput>;
  weight?: InputMaybe<ShipEngine_WeightInput>;
  dimensions?: InputMaybe<ShipEngine_DimensionsInput>;
};

export type ShipEngine_LabelDownloadInput = {
  href?: InputMaybe<Scalars['String']>;
  pdf?: InputMaybe<Scalars['String']>;
  png?: InputMaybe<Scalars['String']>;
  zpl?: InputMaybe<Scalars['String']>;
};

export type ShipEngine_WeightInput = {
  value?: InputMaybe<Scalars['Float']>;
  unit?: InputMaybe<Scalars['String']>;
};

export type ShipEngine_DimensionsInput = {
  length?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
  height?: InputMaybe<Scalars['Float']>;
  unit?: InputMaybe<Scalars['String']>;
};

export type ShipEngine_AddressInput = {
  name?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  address_line1?: InputMaybe<Scalars['String']>;
  address_line2?: InputMaybe<Scalars['String']>;
  city_locality?: InputMaybe<Scalars['String']>;
  state_province?: InputMaybe<Scalars['String']>;
  postal_code?: InputMaybe<Scalars['String']>;
  country_code?: InputMaybe<Scalars['String']>;
  address_residential_indicator?: InputMaybe<Scalars['String']>;
};

export type UpsertMyCustomerPropertiesAddressPropertyInput = {
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  postal_code?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

/** A cart represents the merchandise that a buyer intends to purchase, and the estimated cost associated with the cart. To learn how to interact with a cart during a customer's session, refer to [Manage a cart with the Storefront API](https://shopify.dev/api/examples/cart). */
export type ShopifyStorefront_Cart = {
  __typename?: 'ShopifyStorefront_Cart';
  /** The attributes associated with the cart. Attributes are represented as key-value pairs. */
  attributes: Array<ShopifyStorefront_Attribute>;
  /** Information about the buyer that is interacting with the cart. */
  buyerIdentity: ShopifyStorefront_CartBuyerIdentity;
  /** The URL of the checkout for the cart. */
  checkoutUrl: Scalars['Url'];
  /** The date and time when the cart was created. */
  createdAt: Scalars['DateTime'];
  /** The case-insensitive discount codes that the customer added at checkout. */
  discountCodes: Array<ShopifyStorefront_CartDiscountCode>;
  /** The estimated costs that the buyer will pay at checkout. The estimated costs are subject to change and changes will be reflected at checkout. The `estimatedCost` field uses the `buyerIdentity` field to determine [international pricing](https://shopify.dev/api/examples/international-pricing#create-a-cart). */
  estimatedCost: ShopifyStorefront_CartEstimatedCost;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** A list of lines containing information about the items the customer intends to purchase. */
  lines: ShopifyStorefront_CartLineConnection;
  /** A note that is associated with the cart. For example, the note can be a personalized message to the buyer. */
  note?: Maybe<Scalars['String']>;
  /** The date and time when the cart was updated. */
  updatedAt: Scalars['DateTime'];
};


/** A cart represents the merchandise that a buyer intends to purchase, and the estimated cost associated with the cart. To learn how to interact with a cart during a customer's session, refer to [Manage a cart with the Storefront API](https://shopify.dev/api/examples/cart). */
export type ShopifyStorefront_CartLinesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** Represents information about the buyer that is interacting with the cart. */
export type ShopifyStorefront_CartBuyerIdentity = {
  __typename?: 'ShopifyStorefront_CartBuyerIdentity';
  /** The country where the buyer is located. */
  countryCode?: Maybe<ShopifyStorefront_CountryCode>;
  /** The customer account associated with the cart. */
  customer?: Maybe<ShopifyStorefront_Customer>;
  /** The email address of the buyer that is interacting with the cart. */
  email?: Maybe<Scalars['String']>;
  /** The phone number of the buyer that is interacting with the cart. */
  phone?: Maybe<Scalars['String']>;
};

/** The discount codes applied to the cart. */
export type ShopifyStorefront_CartDiscountCode = {
  __typename?: 'ShopifyStorefront_CartDiscountCode';
  /** Whether the discount code is applicable to the cart's current contents. */
  applicable: Scalars['Boolean'];
  /** The code for the discount. */
  code: Scalars['String'];
};

/**
 * The estimated costs that the buyer will pay at checkout.
 * It uses [`CartBuyerIdentity`](https://shopify.dev/api/storefront/reference/cart/cartbuyeridentity) to determine
 * [international pricing](https://shopify.dev/api/examples/international-pricing#create-a-cart).
 */
export type ShopifyStorefront_CartEstimatedCost = {
  __typename?: 'ShopifyStorefront_CartEstimatedCost';
  /** The estimated amount, before taxes and discounts, for the customer to pay. */
  subtotalAmount: ShopifyStorefront_MoneyV2;
  /** The estimated total amount for the customer to pay. */
  totalAmount: ShopifyStorefront_MoneyV2;
  /** The estimated duty amount for the customer to pay at checkout. */
  totalDutyAmount?: Maybe<ShopifyStorefront_MoneyV2>;
  /** The estimated tax amount for the customer to pay at checkout. */
  totalTaxAmount?: Maybe<ShopifyStorefront_MoneyV2>;
};

/** An auto-generated type for paginating through multiple CartLines. */
export type ShopifyStorefront_CartLineConnection = {
  __typename?: 'ShopifyStorefront_CartLineConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_CartLineEdge>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one CartLine and a cursor during pagination. */
export type ShopifyStorefront_CartLineEdge = {
  __typename?: 'ShopifyStorefront_CartLineEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of CartLineEdge. */
  node: ShopifyStorefront_CartLine;
};

/** Represents information about the merchandise in the cart. */
export type ShopifyStorefront_CartLine = {
  __typename?: 'ShopifyStorefront_CartLine';
  /** The attributes associated with the cart line. Attributes are represented as key-value pairs. */
  attributes: Array<ShopifyStorefront_Attribute>;
  /** The discounts that have been applied to the cart line. */
  discountAllocations: Array<ShopifyStorefront_CartDiscountAllocation>;
  /** The estimated cost of the merchandise that the buyer will pay for at checkout. The estimated costs are subject to change and changes will be reflected at checkout. */
  estimatedCost: ShopifyStorefront_CartLineEstimatedCost;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The merchandise that the buyer intends to purchase. */
  merchandise: ShopifyStorefront_Merchandise;
  /** The quantity of the merchandise that the customer intends to purchase. */
  quantity: Scalars['Int'];
  /** The selling plan associated with the cart line and the effect that each selling plan has on variants when they're purchased. */
  sellingPlanAllocation?: Maybe<ShopifyStorefront_SellingPlanAllocation>;
};

/** The discounts that have been applied to the cart line. */
export type ShopifyStorefront_CartDiscountAllocation = {
  __typename?: 'ShopifyStorefront_CartDiscountAllocation';
  /** The discounted amount that has been applied to the cart line. */
  discountedAmount: ShopifyStorefront_MoneyV2;
};

/** The estimated cost of the merchandise line that the buyer will pay at checkout. */
export type ShopifyStorefront_CartLineEstimatedCost = {
  __typename?: 'ShopifyStorefront_CartLineEstimatedCost';
  /** The estimated cost of the merchandise line before discounts. */
  subtotalAmount: ShopifyStorefront_MoneyV2;
  /** The estimated total cost of the merchandise line. */
  totalAmount: ShopifyStorefront_MoneyV2;
};

/** The merchandise to be purchased at checkout. */
export type ShopifyStorefront_Merchandise = ShopifyStorefront_ProductVariant;

export type CreateMyCheckoutSessionPropertiesLinesItemsPropertyInput = {
  quantity: Scalars['Int'];
  merchandiseId: Scalars['String'];
  sellingPlanId?: InputMaybe<Scalars['String']>;
};

export type CreateMyCheckoutPropertiesLinesItemsPropertyInput = {
  quantity: Scalars['Int'];
  merchandiseId: Scalars['String'];
  sellingPlanId?: InputMaybe<Scalars['String']>;
};

export type Klaviyo_AddMembersResponse = {
  __typename?: 'Klaviyo_AddMembersResponse';
  items?: Maybe<Array<Maybe<Klaviyo_AddMembersResponseItemsProperty>>>;
};

export type Klaviyo_AddMembersResponseItemsProperty = {
  __typename?: 'Klaviyo_AddMembersResponseItemsProperty';
  id?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone_number?: Maybe<Scalars['String']>;
};

export type Klaviyo_200Ok = {
  __typename?: 'Klaviyo_200Ok';
  result?: Maybe<Scalars['JSONObject']>;
};

export type Stripe_CheckoutSession = {
  __typename?: 'Stripe_CheckoutSession';
  after_expiration?: Maybe<Stripe_PaymentPagesCheckoutSessionAfterExpiration>;
  /** Enables user redeemable promotion codes. */
  allow_promotion_codes?: Maybe<Scalars['Boolean']>;
  /** Total of all items before discounts or taxes are applied. */
  amount_subtotal?: Maybe<Scalars['Int']>;
  /** Total of all items after discounts and taxes are applied. */
  amount_total?: Maybe<Scalars['Int']>;
  automatic_tax?: Maybe<Stripe_PaymentPagesCheckoutSessionAutomaticTax>;
  /** Describes whether Checkout should collect the customer's billing address. */
  billing_address_collection?: Maybe<Stripe_CheckoutSessionBillingAddressCollectionProperty>;
  /** The URL the customer will be directed to if they decide to cancel payment and return to your website. */
  cancel_url?: Maybe<Scalars['String']>;
  /**
   * A unique string to reference the Checkout Session. This can be a
   * customer ID, a cart ID, or similar, and can be used to reconcile the
   * Session with your internal systems.
   */
  client_reference_id?: Maybe<Scalars['String']>;
  consent?: Maybe<Stripe_PaymentPagesCheckoutSessionConsent>;
  consent_collection?: Maybe<Stripe_PaymentPagesCheckoutSessionConsentCollection>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  customer?: Maybe<Scalars['String']>;
  /** Configure whether a Checkout Session creates a Customer when the Checkout Session completes. */
  customer_creation?: Maybe<Stripe_CheckoutSessionCustomerCreationProperty>;
  customer_details?: Maybe<Stripe_PaymentPagesCheckoutSessionCustomerDetails>;
  /**
   * If provided, this value will be used when the Customer object is created.
   * If not provided, customers will be asked to enter their email address.
   * Use this parameter to prefill customer data if you already have an email
   * on file. To access information about the customer once the payment flow is
   * complete, use the `customer` attribute.
   */
  customer_email?: Maybe<Scalars['String']>;
  /** The timestamp at which the Checkout Session will expire. */
  expires_at?: Maybe<Scalars['Int']>;
  /**
   * Unique identifier for the object. Used to pass to `redirectToCheckout`
   * in Stripe.js.
   */
  id?: Maybe<Scalars['String']>;
  /** The line items purchased by the customer. */
  line_items?: Maybe<Stripe_CheckoutSessionLineItemsProperty>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used. */
  locale?: Maybe<Stripe_CheckoutSessionLocaleProperty>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** The mode of the Checkout Session. */
  mode?: Maybe<Stripe_CheckoutSessionModeProperty>;
  object?: Maybe<Scalars['String']>;
  payment_intent?: Maybe<Stripe_CheckoutSessionPaymentIntentProperty>;
  payment_link?: Maybe<Stripe_CheckoutSessionPaymentLinkProperty>;
  payment_method_options?: Maybe<Stripe_CheckoutSessionPaymentMethodOptions>;
  /**
   * A list of the types of payment methods (e.g. card) this Checkout
   * Session is allowed to accept.
   */
  payment_method_types?: Maybe<Array<Maybe<Scalars['String']>>>;
  /**
   * The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`.
   * You can use this value to decide when to fulfill your customer's order.
   */
  payment_status?: Maybe<Stripe_CheckoutSessionPaymentStatusProperty>;
  phone_number_collection?: Maybe<Stripe_PaymentPagesCheckoutSessionPhoneNumberCollection>;
  /** The ID of the original expired Checkout Session that triggered the recovery flow. */
  recovered_from?: Maybe<Scalars['String']>;
  setup_intent?: Maybe<Stripe_CheckoutSessionSetupIntentProperty>;
  shipping?: Maybe<Stripe_Shipping>;
  shipping_address_collection?: Maybe<Stripe_PaymentPagesCheckoutSessionShippingAddressCollection>;
  /** The shipping rate options applied to this Session. */
  shipping_options?: Maybe<Array<Maybe<Stripe_PaymentPagesCheckoutSessionShippingOption>>>;
  shipping_rate?: Maybe<Stripe_CheckoutSessionShippingRateProperty>;
  /** The status of the Checkout Session, one of `open`, `complete`, or `expired`. */
  status?: Maybe<Stripe_CheckoutSessionStatusProperty>;
  /**
   * Describes the type of transaction being performed by Checkout in order to customize
   * relevant text on the page, such as the submit button. `submit_type` can only be
   * specified on Checkout Sessions in `payment` mode, but not Checkout Sessions
   * in `subscription` or `setup` mode.
   */
  submit_type?: Maybe<Stripe_CheckoutSessionSubmitTypeProperty>;
  subscription?: Maybe<Stripe_CheckoutSessionSubscriptionProperty>;
  /**
   * The URL the customer will be directed to after the payment or
   * subscription creation is successful.
   */
  success_url?: Maybe<Scalars['String']>;
  tax_id_collection?: Maybe<Stripe_PaymentPagesCheckoutSessionTaxIdCollection>;
  total_details?: Maybe<Stripe_PaymentPagesCheckoutSessionTotalDetails>;
  /** The URL to the Checkout Session. Redirect customers to this URL to take them to Checkout. If youâ€™re using [Custom Domains](https://stripe.com/docs/payments/checkout/custom-domains), the URL will use your subdomain. Otherwise, itâ€™ll use `checkout.stripe.com.` */
  url?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentPagesCheckoutSessionAfterExpiration = {
  __typename?: 'Stripe_PaymentPagesCheckoutSessionAfterExpiration';
  recovery?: Maybe<Stripe_PaymentPagesCheckoutSessionAfterExpirationRecovery>;
};

export type Stripe_PaymentPagesCheckoutSessionAfterExpirationRecovery = {
  __typename?: 'Stripe_PaymentPagesCheckoutSessionAfterExpirationRecovery';
  /** Enables user redeemable promotion codes on the recovered Checkout Sessions. Defaults to `false` */
  allow_promotion_codes?: Maybe<Scalars['Boolean']>;
  /**
   * If `true`, a recovery url will be generated to recover this Checkout Session if it
   * expires before a transaction is completed. It will be attached to the
   * Checkout Session object upon expiration.
   */
  enabled?: Maybe<Scalars['Boolean']>;
  /** The timestamp at which the recovery URL will expire. */
  expires_at?: Maybe<Scalars['Int']>;
  /** URL that creates a new Checkout Session when clicked that is a copy of this expired Checkout Session */
  url?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentPagesCheckoutSessionAutomaticTax = {
  __typename?: 'Stripe_PaymentPagesCheckoutSessionAutomaticTax';
  /** Indicates whether automatic tax is enabled for the session */
  enabled?: Maybe<Scalars['Boolean']>;
  /** The status of the most recent automated tax calculation for this session. */
  status?: Maybe<Stripe_PaymentPagesCheckoutSessionAutomaticTaxStatusProperty>;
};

export enum Stripe_PaymentPagesCheckoutSessionAutomaticTaxStatusProperty {
  Complete = 'complete',
  Failed = 'failed',
  RequiresLocationInputs = 'requires_location_inputs'
}

export enum Stripe_CheckoutSessionBillingAddressCollectionProperty {
  Auto = 'auto',
  Required = 'required'
}

export type Stripe_PaymentPagesCheckoutSessionConsent = {
  __typename?: 'Stripe_PaymentPagesCheckoutSessionConsent';
  /**
   * If `opt_in`, the customer consents to receiving promotional communications
   * from the merchant about this Checkout Session.
   */
  promotions?: Maybe<Stripe_PaymentPagesCheckoutSessionConsentPromotionsProperty>;
};

export enum Stripe_PaymentPagesCheckoutSessionConsentPromotionsProperty {
  OptIn = 'opt_in',
  OptOut = 'opt_out'
}

export type Stripe_PaymentPagesCheckoutSessionConsentCollection = {
  __typename?: 'Stripe_PaymentPagesCheckoutSessionConsentCollection';
  /**
   * If set to `auto`, enables the collection of customer consent for promotional communications. The Checkout
   * Session will determine whether to display an option to opt into promotional communication
   * from the merchant depending on the customer's locale. Only available to US merchants.
   */
  promotions?: Maybe<Stripe_PaymentPagesCheckoutSessionConsentCollectionPromotionsProperty>;
};

export enum Stripe_PaymentPagesCheckoutSessionConsentCollectionPromotionsProperty {
  Auto = 'auto'
}

export enum Stripe_CheckoutSessionCustomerCreationProperty {
  Always = 'always',
  IfRequired = 'if_required'
}

export type Stripe_PaymentPagesCheckoutSessionCustomerDetails = {
  __typename?: 'Stripe_PaymentPagesCheckoutSessionCustomerDetails';
  address?: Maybe<Stripe_Address>;
  /**
   * The email associated with the Customer, if one exists, on the Checkout Session at the time of checkout or at time of session expiry.
   * Otherwise, if the customer has consented to promotional content, this value is the most recent valid email provided by the customer on the Checkout form.
   */
  email?: Maybe<Scalars['String']>;
  /** The customer's name at the time of checkout. Note: This property is populated only for sessions on or after March 30, 2022. */
  name?: Maybe<Scalars['String']>;
  /** The customer's phone number at the time of checkout */
  phone?: Maybe<Scalars['String']>;
  /** The customerâ€™s tax exempt status at time of checkout. */
  tax_exempt?: Maybe<Stripe_PaymentPagesCheckoutSessionCustomerDetailsTaxExemptProperty>;
  /** The customerâ€™s tax IDs at time of checkout. */
  tax_ids?: Maybe<Array<Maybe<Stripe_PaymentPagesCheckoutSessionTaxId>>>;
};

export enum Stripe_PaymentPagesCheckoutSessionCustomerDetailsTaxExemptProperty {
  Exempt = 'exempt',
  None = 'none',
  Reverse = 'reverse'
}

export type Stripe_PaymentPagesCheckoutSessionTaxId = {
  __typename?: 'Stripe_PaymentPagesCheckoutSessionTaxId';
  /** The type of the tax ID, one of `eu_vat`, `br_cnpj`, `br_cpf`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, or `unknown` */
  type?: Maybe<Stripe_PaymentPagesCheckoutSessionTaxIdTypeProperty>;
  /** The value of the tax ID. */
  value?: Maybe<Scalars['String']>;
};

export enum Stripe_PaymentPagesCheckoutSessionTaxIdTypeProperty {
  AeTrn = 'ae_trn',
  AuAbn = 'au_abn',
  AuArn = 'au_arn',
  BgUic = 'bg_uic',
  BrCnpj = 'br_cnpj',
  BrCpf = 'br_cpf',
  CaBn = 'ca_bn',
  CaGstHst = 'ca_gst_hst',
  CaPstBc = 'ca_pst_bc',
  CaPstMb = 'ca_pst_mb',
  CaPstSk = 'ca_pst_sk',
  CaQst = 'ca_qst',
  ChVat = 'ch_vat',
  ClTin = 'cl_tin',
  EsCif = 'es_cif',
  EuVat = 'eu_vat',
  GbVat = 'gb_vat',
  GeVat = 'ge_vat',
  HkBr = 'hk_br',
  HuTin = 'hu_tin',
  IdNpwp = 'id_npwp',
  IlVat = 'il_vat',
  InGst = 'in_gst',
  IsVat = 'is_vat',
  JpCn = 'jp_cn',
  JpRn = 'jp_rn',
  KrBrn = 'kr_brn',
  LiUid = 'li_uid',
  MxRfc = 'mx_rfc',
  MyFrp = 'my_frp',
  MyItn = 'my_itn',
  MySst = 'my_sst',
  NoVat = 'no_vat',
  NzGst = 'nz_gst',
  RuInn = 'ru_inn',
  RuKpp = 'ru_kpp',
  SaVat = 'sa_vat',
  SgGst = 'sg_gst',
  SgUen = 'sg_uen',
  SiTin = 'si_tin',
  ThVat = 'th_vat',
  TwVat = 'tw_vat',
  UaVat = 'ua_vat',
  Unknown = 'unknown',
  UsEin = 'us_ein',
  ZaVat = 'za_vat'
}

/** The line items purchased by the customer. */
export type Stripe_CheckoutSessionLineItemsProperty = {
  __typename?: 'Stripe_CheckoutSessionLineItemsProperty';
  /** Details about each object. */
  data: Array<Stripe_Item>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Stripe_CheckoutSessionLineItemsObjectProperty;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export enum Stripe_CheckoutSessionLineItemsObjectProperty {
  List = 'list'
}

export enum Stripe_CheckoutSessionLocaleProperty {
  Auto = 'auto',
  Bg = 'bg',
  Cs = 'cs',
  Da = 'da',
  De = 'de',
  El = 'el',
  En = 'en',
  EnDashgb = 'enDASHGB',
  Es = 'es',
  EsDash419 = 'esDASH419',
  Et = 'et',
  Fi = 'fi',
  Fil = 'fil',
  Fr = 'fr',
  FrDashca = 'frDASHCA',
  Hr = 'hr',
  Hu = 'hu',
  Id = 'id',
  It = 'it',
  Ja = 'ja',
  Ko = 'ko',
  Lt = 'lt',
  Lv = 'lv',
  Ms = 'ms',
  Mt = 'mt',
  Nb = 'nb',
  Nl = 'nl',
  Pl = 'pl',
  Pt = 'pt',
  PtDashbr = 'ptDASHBR',
  Ro = 'ro',
  Ru = 'ru',
  Sk = 'sk',
  Sl = 'sl',
  Sv = 'sv',
  Th = 'th',
  Tr = 'tr',
  Vi = 'vi',
  Zh = 'zh',
  ZhDashhk = 'zhDASHHK',
  ZhDashtw = 'zhDASHTW'
}

export enum Stripe_CheckoutSessionModeProperty {
  Payment = 'payment',
  Setup = 'setup',
  Subscription = 'subscription'
}

export type Stripe_CheckoutSessionPaymentIntentProperty = WrappedString | Stripe_PaymentIntent;

export type Stripe_CheckoutSessionPaymentLinkProperty = WrappedString | Stripe_PaymentLink;

export type Stripe_PaymentLink = {
  __typename?: 'Stripe_PaymentLink';
  /** Whether the payment link's `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated. */
  active?: Maybe<Scalars['Boolean']>;
  after_completion?: Maybe<Stripe_PaymentLinksResourceAfterCompletion>;
  /** Whether user redeemable promotion codes are enabled. */
  allow_promotion_codes?: Maybe<Scalars['Boolean']>;
  /** The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. */
  application_fee_amount?: Maybe<Scalars['Int']>;
  /** This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. */
  application_fee_percent?: Maybe<Scalars['Float']>;
  automatic_tax?: Maybe<Stripe_PaymentLinksResourceAutomaticTax>;
  /** Configuration for collecting the customer's billing address. */
  billing_address_collection?: Maybe<Stripe_PaymentLinkBillingAddressCollectionProperty>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** The line items representing what is being sold. */
  line_items?: Maybe<Stripe_PaymentLinkLineItemsProperty>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_PaymentLinkObjectProperty>;
  on_behalf_of?: Maybe<Stripe_PaymentLinkOnBehalfOfProperty>;
  /** The list of payment method types that customers can use. When `null`, Stripe will dynamically show relevant payment methods you've enabled in your [payment method settings](https://dashboard.stripe.com/settings/payment_methods). */
  payment_method_types?: Maybe<Array<Maybe<Stripe_PaymentLinkPaymentMethodTypesProperty>>>;
  phone_number_collection?: Maybe<Stripe_PaymentLinksResourcePhoneNumberCollection>;
  shipping_address_collection?: Maybe<Stripe_PaymentLinksResourceShippingAddressCollection>;
  subscription_data?: Maybe<Stripe_PaymentLinksResourceSubscriptionData>;
  transfer_data?: Maybe<Stripe_PaymentLinksResourceTransferData>;
  /** The public URL that can be shared with customers. */
  url?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentLinksResourceAfterCompletion = {
  __typename?: 'Stripe_PaymentLinksResourceAfterCompletion';
  hosted_confirmation?: Maybe<Stripe_PaymentLinksResourceCompletionBehaviorConfirmationPage>;
  redirect?: Maybe<Stripe_PaymentLinksResourceCompletionBehaviorRedirect>;
  /** The specified behavior after the purchase is complete. */
  type?: Maybe<Stripe_PaymentLinksResourceAfterCompletionTypeProperty>;
};

export type Stripe_PaymentLinksResourceCompletionBehaviorConfirmationPage = {
  __typename?: 'Stripe_PaymentLinksResourceCompletionBehaviorConfirmationPage';
  /** The custom message that is displayed to the customer after the purchase is complete. */
  custom_message?: Maybe<Scalars['String']>;
};

export type Stripe_PaymentLinksResourceCompletionBehaviorRedirect = {
  __typename?: 'Stripe_PaymentLinksResourceCompletionBehaviorRedirect';
  /** The URL the customer will be redirected to after the purchase is complete. */
  url?: Maybe<Scalars['String']>;
};

export enum Stripe_PaymentLinksResourceAfterCompletionTypeProperty {
  HostedConfirmation = 'hosted_confirmation',
  Redirect = 'redirect'
}

export type Stripe_PaymentLinksResourceAutomaticTax = {
  __typename?: 'Stripe_PaymentLinksResourceAutomaticTax';
  /** If `true`, tax will be calculated automatically using the customer's location. */
  enabled?: Maybe<Scalars['Boolean']>;
};

export enum Stripe_PaymentLinkBillingAddressCollectionProperty {
  Auto = 'auto',
  Required = 'required'
}

/** The line items representing what is being sold. */
export type Stripe_PaymentLinkLineItemsProperty = {
  __typename?: 'Stripe_PaymentLinkLineItemsProperty';
  /** Details about each object. */
  data: Array<Stripe_Item>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Stripe_PaymentLinkLineItemsObjectProperty;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export enum Stripe_PaymentLinkLineItemsObjectProperty {
  List = 'list'
}

export enum Stripe_PaymentLinkObjectProperty {
  PaymentLink = 'payment_link'
}

export type Stripe_PaymentLinkOnBehalfOfProperty = WrappedString | Stripe_Account;

export enum Stripe_PaymentLinkPaymentMethodTypesProperty {
  Card = 'card'
}

export type Stripe_PaymentLinksResourcePhoneNumberCollection = {
  __typename?: 'Stripe_PaymentLinksResourcePhoneNumberCollection';
  /** If `true`, a phone number will be collected during checkout. */
  enabled?: Maybe<Scalars['Boolean']>;
};

export type Stripe_PaymentLinksResourceShippingAddressCollection = {
  __typename?: 'Stripe_PaymentLinksResourceShippingAddressCollection';
  /** An array of two-letter ISO country codes representing which countries Checkout should provide as options for shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`. */
  allowed_countries?: Maybe<Array<Maybe<Stripe_PaymentLinksResourceShippingAddressCollectionAllowedCountriesProperty>>>;
};

export enum Stripe_PaymentLinksResourceShippingAddressCollectionAllowedCountriesProperty {
  Ac = 'AC',
  Ad = 'AD',
  Ae = 'AE',
  Af = 'AF',
  Ag = 'AG',
  Ai = 'AI',
  Al = 'AL',
  Am = 'AM',
  Ao = 'AO',
  Aq = 'AQ',
  Ar = 'AR',
  At = 'AT',
  Au = 'AU',
  Aw = 'AW',
  Ax = 'AX',
  Az = 'AZ',
  Ba = 'BA',
  Bb = 'BB',
  Bd = 'BD',
  Be = 'BE',
  Bf = 'BF',
  Bg = 'BG',
  Bh = 'BH',
  Bi = 'BI',
  Bj = 'BJ',
  Bl = 'BL',
  Bm = 'BM',
  Bn = 'BN',
  Bo = 'BO',
  Bq = 'BQ',
  Br = 'BR',
  Bs = 'BS',
  Bt = 'BT',
  Bv = 'BV',
  Bw = 'BW',
  By = 'BY',
  Bz = 'BZ',
  Ca = 'CA',
  Cd = 'CD',
  Cf = 'CF',
  Cg = 'CG',
  Ch = 'CH',
  Ci = 'CI',
  Ck = 'CK',
  Cl = 'CL',
  Cm = 'CM',
  Cn = 'CN',
  Co = 'CO',
  Cr = 'CR',
  Cv = 'CV',
  Cw = 'CW',
  Cy = 'CY',
  Cz = 'CZ',
  De = 'DE',
  Dj = 'DJ',
  Dk = 'DK',
  Dm = 'DM',
  Do = 'DO',
  Dz = 'DZ',
  Ec = 'EC',
  Ee = 'EE',
  Eg = 'EG',
  Eh = 'EH',
  Er = 'ER',
  Es = 'ES',
  Et = 'ET',
  Fi = 'FI',
  Fj = 'FJ',
  Fk = 'FK',
  Fo = 'FO',
  Fr = 'FR',
  Ga = 'GA',
  Gb = 'GB',
  Gd = 'GD',
  Ge = 'GE',
  Gf = 'GF',
  Gg = 'GG',
  Gh = 'GH',
  Gi = 'GI',
  Gl = 'GL',
  Gm = 'GM',
  Gn = 'GN',
  Gp = 'GP',
  Gq = 'GQ',
  Gr = 'GR',
  Gs = 'GS',
  Gt = 'GT',
  Gu = 'GU',
  Gw = 'GW',
  Gy = 'GY',
  Hk = 'HK',
  Hn = 'HN',
  Hr = 'HR',
  Ht = 'HT',
  Hu = 'HU',
  Id = 'ID',
  Ie = 'IE',
  Il = 'IL',
  Im = 'IM',
  In = 'IN',
  Io = 'IO',
  Iq = 'IQ',
  Is = 'IS',
  It = 'IT',
  Je = 'JE',
  Jm = 'JM',
  Jo = 'JO',
  Jp = 'JP',
  Ke = 'KE',
  Kg = 'KG',
  Kh = 'KH',
  Ki = 'KI',
  Km = 'KM',
  Kn = 'KN',
  Kr = 'KR',
  Kw = 'KW',
  Ky = 'KY',
  Kz = 'KZ',
  La = 'LA',
  Lb = 'LB',
  Lc = 'LC',
  Li = 'LI',
  Lk = 'LK',
  Lr = 'LR',
  Ls = 'LS',
  Lt = 'LT',
  Lu = 'LU',
  Lv = 'LV',
  Ly = 'LY',
  Ma = 'MA',
  Mc = 'MC',
  Md = 'MD',
  Me = 'ME',
  Mf = 'MF',
  Mg = 'MG',
  Mk = 'MK',
  Ml = 'ML',
  Mm = 'MM',
  Mn = 'MN',
  Mo = 'MO',
  Mq = 'MQ',
  Mr = 'MR',
  Ms = 'MS',
  Mt = 'MT',
  Mu = 'MU',
  Mv = 'MV',
  Mw = 'MW',
  Mx = 'MX',
  My = 'MY',
  Mz = 'MZ',
  Na = 'NA',
  Nc = 'NC',
  Ne = 'NE',
  Ng = 'NG',
  Ni = 'NI',
  Nl = 'NL',
  No = 'NO',
  Np = 'NP',
  Nr = 'NR',
  Nu = 'NU',
  Nz = 'NZ',
  Om = 'OM',
  Pa = 'PA',
  Pe = 'PE',
  Pf = 'PF',
  Pg = 'PG',
  Ph = 'PH',
  Pk = 'PK',
  Pl = 'PL',
  Pm = 'PM',
  Pn = 'PN',
  Pr = 'PR',
  Ps = 'PS',
  Pt = 'PT',
  Py = 'PY',
  Qa = 'QA',
  Re = 'RE',
  Ro = 'RO',
  Rs = 'RS',
  Ru = 'RU',
  Rw = 'RW',
  Sa = 'SA',
  Sb = 'SB',
  Sc = 'SC',
  Se = 'SE',
  Sg = 'SG',
  Sh = 'SH',
  Si = 'SI',
  Sj = 'SJ',
  Sk = 'SK',
  Sl = 'SL',
  Sm = 'SM',
  Sn = 'SN',
  So = 'SO',
  Sr = 'SR',
  Ss = 'SS',
  St = 'ST',
  Sv = 'SV',
  Sx = 'SX',
  Sz = 'SZ',
  Ta = 'TA',
  Tc = 'TC',
  Td = 'TD',
  Tf = 'TF',
  Tg = 'TG',
  Th = 'TH',
  Tj = 'TJ',
  Tk = 'TK',
  Tl = 'TL',
  Tm = 'TM',
  Tn = 'TN',
  To = 'TO',
  Tr = 'TR',
  Tt = 'TT',
  Tv = 'TV',
  Tw = 'TW',
  Tz = 'TZ',
  Ua = 'UA',
  Ug = 'UG',
  Us = 'US',
  Uy = 'UY',
  Uz = 'UZ',
  Va = 'VA',
  Vc = 'VC',
  Ve = 'VE',
  Vg = 'VG',
  Vn = 'VN',
  Vu = 'VU',
  Wf = 'WF',
  Ws = 'WS',
  Xk = 'XK',
  Ye = 'YE',
  Yt = 'YT',
  Za = 'ZA',
  Zm = 'ZM',
  Zw = 'ZW',
  Zz = 'ZZ'
}

export type Stripe_PaymentLinksResourceSubscriptionData = {
  __typename?: 'Stripe_PaymentLinksResourceSubscriptionData';
  /** Integer representing the number of trial period days before the customer is charged for the first time. */
  trial_period_days?: Maybe<Scalars['Int']>;
};

export type Stripe_PaymentLinksResourceTransferData = {
  __typename?: 'Stripe_PaymentLinksResourceTransferData';
  /** The amount in %s that will be transferred to the destination account. By default, the entire amount is transferred to the destination. */
  amount?: Maybe<Scalars['Int']>;
  destination?: Maybe<Stripe_PaymentLinksResourceTransferDataDestinationProperty>;
};

export type Stripe_PaymentLinksResourceTransferDataDestinationProperty = WrappedString | Stripe_Account;

export type Stripe_CheckoutSessionPaymentMethodOptions = {
  __typename?: 'Stripe_CheckoutSessionPaymentMethodOptions';
  acss_debit?: Maybe<Stripe_CheckoutAcssDebitPaymentMethodOptions>;
  boleto?: Maybe<Stripe_CheckoutBoletoPaymentMethodOptions>;
  konbini?: Maybe<Stripe_CheckoutKonbiniPaymentMethodOptions>;
  oxxo?: Maybe<Stripe_CheckoutOxxoPaymentMethodOptions>;
  us_bank_account?: Maybe<Stripe_CheckoutUsBankAccountPaymentMethodOptions>;
};

export type Stripe_CheckoutAcssDebitPaymentMethodOptions = {
  __typename?: 'Stripe_CheckoutAcssDebitPaymentMethodOptions';
  /** Currency supported by the bank account. Returned when the Session is in `setup` mode. */
  currency?: Maybe<Stripe_CheckoutAcssDebitPaymentMethodOptionsCurrencyProperty>;
  mandate_options?: Maybe<Stripe_CheckoutAcssDebitMandateOptions>;
  /** Bank account verification method. */
  verification_method?: Maybe<Stripe_CheckoutAcssDebitPaymentMethodOptionsVerificationMethodProperty>;
};

export enum Stripe_CheckoutAcssDebitPaymentMethodOptionsCurrencyProperty {
  Cad = 'cad',
  Usd = 'usd'
}

export type Stripe_CheckoutAcssDebitMandateOptions = {
  __typename?: 'Stripe_CheckoutAcssDebitMandateOptions';
  /** A URL for custom mandate text */
  custom_mandate_url?: Maybe<Scalars['String']>;
  /** List of Stripe products where this mandate can be selected automatically. Returned when the Session is in `setup` mode. */
  default_for?: Maybe<Array<Maybe<Stripe_CheckoutAcssDebitMandateOptionsDefaultForProperty>>>;
  /** Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
  interval_description?: Maybe<Scalars['String']>;
  /** Payment schedule for the mandate. */
  payment_schedule?: Maybe<Stripe_CheckoutAcssDebitMandateOptionsPaymentScheduleProperty>;
  /** Transaction type of the mandate. */
  transaction_type?: Maybe<Stripe_CheckoutAcssDebitMandateOptionsTransactionTypeProperty>;
};

export enum Stripe_CheckoutAcssDebitMandateOptionsDefaultForProperty {
  Invoice = 'invoice',
  Subscription = 'subscription'
}

export enum Stripe_CheckoutAcssDebitMandateOptionsPaymentScheduleProperty {
  Combined = 'combined',
  Interval = 'interval',
  Sporadic = 'sporadic'
}

export enum Stripe_CheckoutAcssDebitMandateOptionsTransactionTypeProperty {
  Business = 'business',
  Personal = 'personal'
}

export enum Stripe_CheckoutAcssDebitPaymentMethodOptionsVerificationMethodProperty {
  Automatic = 'automatic',
  Instant = 'instant',
  Microdeposits = 'microdeposits'
}

export type Stripe_CheckoutBoletoPaymentMethodOptions = {
  __typename?: 'Stripe_CheckoutBoletoPaymentMethodOptions';
  /** The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time. */
  expires_after_days?: Maybe<Scalars['Int']>;
};

export type Stripe_CheckoutKonbiniPaymentMethodOptions = {
  __typename?: 'Stripe_CheckoutKonbiniPaymentMethodOptions';
  /** The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST. */
  expires_after_days?: Maybe<Scalars['Int']>;
};

export type Stripe_CheckoutOxxoPaymentMethodOptions = {
  __typename?: 'Stripe_CheckoutOxxoPaymentMethodOptions';
  /** The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time. */
  expires_after_days?: Maybe<Scalars['Int']>;
};

export type Stripe_CheckoutUsBankAccountPaymentMethodOptions = {
  __typename?: 'Stripe_CheckoutUsBankAccountPaymentMethodOptions';
  /** Bank account verification method. */
  verification_method?: Maybe<Stripe_CheckoutUsBankAccountPaymentMethodOptionsVerificationMethodProperty>;
};

export enum Stripe_CheckoutUsBankAccountPaymentMethodOptionsVerificationMethodProperty {
  Automatic = 'automatic',
  Instant = 'instant'
}

export enum Stripe_CheckoutSessionPaymentStatusProperty {
  NoPaymentRequired = 'no_payment_required',
  Paid = 'paid',
  Unpaid = 'unpaid'
}

export type Stripe_PaymentPagesCheckoutSessionPhoneNumberCollection = {
  __typename?: 'Stripe_PaymentPagesCheckoutSessionPhoneNumberCollection';
  /** Indicates whether phone number collection is enabled for the session */
  enabled?: Maybe<Scalars['Boolean']>;
};

export type Stripe_CheckoutSessionSetupIntentProperty = WrappedString | Stripe_SetupIntent;

export type Stripe_PaymentPagesCheckoutSessionShippingAddressCollection = {
  __typename?: 'Stripe_PaymentPagesCheckoutSessionShippingAddressCollection';
  /**
   * An array of two-letter ISO country codes representing which countries Checkout should provide as options for
   * shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`.
   */
  allowed_countries?: Maybe<Array<Maybe<Stripe_PaymentPagesCheckoutSessionShippingAddressCollectionAllowedCountriesProperty>>>;
};

export enum Stripe_PaymentPagesCheckoutSessionShippingAddressCollectionAllowedCountriesProperty {
  Ac = 'AC',
  Ad = 'AD',
  Ae = 'AE',
  Af = 'AF',
  Ag = 'AG',
  Ai = 'AI',
  Al = 'AL',
  Am = 'AM',
  Ao = 'AO',
  Aq = 'AQ',
  Ar = 'AR',
  At = 'AT',
  Au = 'AU',
  Aw = 'AW',
  Ax = 'AX',
  Az = 'AZ',
  Ba = 'BA',
  Bb = 'BB',
  Bd = 'BD',
  Be = 'BE',
  Bf = 'BF',
  Bg = 'BG',
  Bh = 'BH',
  Bi = 'BI',
  Bj = 'BJ',
  Bl = 'BL',
  Bm = 'BM',
  Bn = 'BN',
  Bo = 'BO',
  Bq = 'BQ',
  Br = 'BR',
  Bs = 'BS',
  Bt = 'BT',
  Bv = 'BV',
  Bw = 'BW',
  By = 'BY',
  Bz = 'BZ',
  Ca = 'CA',
  Cd = 'CD',
  Cf = 'CF',
  Cg = 'CG',
  Ch = 'CH',
  Ci = 'CI',
  Ck = 'CK',
  Cl = 'CL',
  Cm = 'CM',
  Cn = 'CN',
  Co = 'CO',
  Cr = 'CR',
  Cv = 'CV',
  Cw = 'CW',
  Cy = 'CY',
  Cz = 'CZ',
  De = 'DE',
  Dj = 'DJ',
  Dk = 'DK',
  Dm = 'DM',
  Do = 'DO',
  Dz = 'DZ',
  Ec = 'EC',
  Ee = 'EE',
  Eg = 'EG',
  Eh = 'EH',
  Er = 'ER',
  Es = 'ES',
  Et = 'ET',
  Fi = 'FI',
  Fj = 'FJ',
  Fk = 'FK',
  Fo = 'FO',
  Fr = 'FR',
  Ga = 'GA',
  Gb = 'GB',
  Gd = 'GD',
  Ge = 'GE',
  Gf = 'GF',
  Gg = 'GG',
  Gh = 'GH',
  Gi = 'GI',
  Gl = 'GL',
  Gm = 'GM',
  Gn = 'GN',
  Gp = 'GP',
  Gq = 'GQ',
  Gr = 'GR',
  Gs = 'GS',
  Gt = 'GT',
  Gu = 'GU',
  Gw = 'GW',
  Gy = 'GY',
  Hk = 'HK',
  Hn = 'HN',
  Hr = 'HR',
  Ht = 'HT',
  Hu = 'HU',
  Id = 'ID',
  Ie = 'IE',
  Il = 'IL',
  Im = 'IM',
  In = 'IN',
  Io = 'IO',
  Iq = 'IQ',
  Is = 'IS',
  It = 'IT',
  Je = 'JE',
  Jm = 'JM',
  Jo = 'JO',
  Jp = 'JP',
  Ke = 'KE',
  Kg = 'KG',
  Kh = 'KH',
  Ki = 'KI',
  Km = 'KM',
  Kn = 'KN',
  Kr = 'KR',
  Kw = 'KW',
  Ky = 'KY',
  Kz = 'KZ',
  La = 'LA',
  Lb = 'LB',
  Lc = 'LC',
  Li = 'LI',
  Lk = 'LK',
  Lr = 'LR',
  Ls = 'LS',
  Lt = 'LT',
  Lu = 'LU',
  Lv = 'LV',
  Ly = 'LY',
  Ma = 'MA',
  Mc = 'MC',
  Md = 'MD',
  Me = 'ME',
  Mf = 'MF',
  Mg = 'MG',
  Mk = 'MK',
  Ml = 'ML',
  Mm = 'MM',
  Mn = 'MN',
  Mo = 'MO',
  Mq = 'MQ',
  Mr = 'MR',
  Ms = 'MS',
  Mt = 'MT',
  Mu = 'MU',
  Mv = 'MV',
  Mw = 'MW',
  Mx = 'MX',
  My = 'MY',
  Mz = 'MZ',
  Na = 'NA',
  Nc = 'NC',
  Ne = 'NE',
  Ng = 'NG',
  Ni = 'NI',
  Nl = 'NL',
  No = 'NO',
  Np = 'NP',
  Nr = 'NR',
  Nu = 'NU',
  Nz = 'NZ',
  Om = 'OM',
  Pa = 'PA',
  Pe = 'PE',
  Pf = 'PF',
  Pg = 'PG',
  Ph = 'PH',
  Pk = 'PK',
  Pl = 'PL',
  Pm = 'PM',
  Pn = 'PN',
  Pr = 'PR',
  Ps = 'PS',
  Pt = 'PT',
  Py = 'PY',
  Qa = 'QA',
  Re = 'RE',
  Ro = 'RO',
  Rs = 'RS',
  Ru = 'RU',
  Rw = 'RW',
  Sa = 'SA',
  Sb = 'SB',
  Sc = 'SC',
  Se = 'SE',
  Sg = 'SG',
  Sh = 'SH',
  Si = 'SI',
  Sj = 'SJ',
  Sk = 'SK',
  Sl = 'SL',
  Sm = 'SM',
  Sn = 'SN',
  So = 'SO',
  Sr = 'SR',
  Ss = 'SS',
  St = 'ST',
  Sv = 'SV',
  Sx = 'SX',
  Sz = 'SZ',
  Ta = 'TA',
  Tc = 'TC',
  Td = 'TD',
  Tf = 'TF',
  Tg = 'TG',
  Th = 'TH',
  Tj = 'TJ',
  Tk = 'TK',
  Tl = 'TL',
  Tm = 'TM',
  Tn = 'TN',
  To = 'TO',
  Tr = 'TR',
  Tt = 'TT',
  Tv = 'TV',
  Tw = 'TW',
  Tz = 'TZ',
  Ua = 'UA',
  Ug = 'UG',
  Us = 'US',
  Uy = 'UY',
  Uz = 'UZ',
  Va = 'VA',
  Vc = 'VC',
  Ve = 'VE',
  Vg = 'VG',
  Vn = 'VN',
  Vu = 'VU',
  Wf = 'WF',
  Ws = 'WS',
  Xk = 'XK',
  Ye = 'YE',
  Yt = 'YT',
  Za = 'ZA',
  Zm = 'ZM',
  Zw = 'ZW',
  Zz = 'ZZ'
}

export type Stripe_PaymentPagesCheckoutSessionShippingOption = {
  __typename?: 'Stripe_PaymentPagesCheckoutSessionShippingOption';
  /** A non-negative integer in cents representing how much to charge. */
  shipping_amount?: Maybe<Scalars['Int']>;
  shipping_rate?: Maybe<Stripe_PaymentPagesCheckoutSessionShippingOptionShippingRateProperty>;
};

export type Stripe_PaymentPagesCheckoutSessionShippingOptionShippingRateProperty = WrappedString | Stripe_ShippingRate;

export type Stripe_ShippingRate = {
  __typename?: 'Stripe_ShippingRate';
  /** Whether the shipping rate can be used for new purchases. Defaults to `true`. */
  active?: Maybe<Scalars['Boolean']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  delivery_estimate?: Maybe<Stripe_ShippingRateDeliveryEstimate>;
  /** The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions. */
  display_name?: Maybe<Scalars['String']>;
  fixed_amount?: Maybe<Stripe_ShippingRateFixedAmount>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Stripe_ShippingRateObjectProperty>;
  /** Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. */
  tax_behavior?: Maybe<Stripe_ShippingRateTaxBehaviorProperty>;
  tax_code?: Maybe<Stripe_ShippingRateTaxCodeProperty>;
  /** The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now. */
  type?: Maybe<Stripe_ShippingRateTypeProperty>;
};

export type Stripe_ShippingRateDeliveryEstimate = {
  __typename?: 'Stripe_ShippingRateDeliveryEstimate';
  maximum?: Maybe<Stripe_ShippingRateDeliveryEstimateBound>;
  minimum?: Maybe<Stripe_ShippingRateDeliveryEstimateBound>;
};

export type Stripe_ShippingRateDeliveryEstimateBound = {
  __typename?: 'Stripe_ShippingRateDeliveryEstimateBound';
  /** A unit of time. */
  unit?: Maybe<Stripe_ShippingRateDeliveryEstimateBoundUnitProperty>;
  /** Must be greater than 0. */
  value?: Maybe<Scalars['Int']>;
};

export enum Stripe_ShippingRateDeliveryEstimateBoundUnitProperty {
  BusinessDay = 'business_day',
  Day = 'day',
  Hour = 'hour',
  Month = 'month',
  Week = 'week'
}

export type Stripe_ShippingRateFixedAmount = {
  __typename?: 'Stripe_ShippingRateFixedAmount';
  /** A non-negative integer in cents representing how much to charge. */
  amount?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
};

export enum Stripe_ShippingRateObjectProperty {
  ShippingRate = 'shipping_rate'
}

export enum Stripe_ShippingRateTaxBehaviorProperty {
  Exclusive = 'exclusive',
  Inclusive = 'inclusive',
  Unspecified = 'unspecified'
}

export type Stripe_ShippingRateTaxCodeProperty = WrappedString | Stripe_TaxCode;

export enum Stripe_ShippingRateTypeProperty {
  FixedAmount = 'fixed_amount'
}

export type Stripe_CheckoutSessionShippingRateProperty = WrappedString | Stripe_ShippingRate;

export enum Stripe_CheckoutSessionStatusProperty {
  Complete = 'complete',
  Expired = 'expired',
  Open = 'open'
}

export enum Stripe_CheckoutSessionSubmitTypeProperty {
  Auto = 'auto',
  Book = 'book',
  Donate = 'donate',
  Pay = 'pay'
}

export type Stripe_CheckoutSessionSubscriptionProperty = WrappedString | Stripe_Subscription;

export type Stripe_PaymentPagesCheckoutSessionTaxIdCollection = {
  __typename?: 'Stripe_PaymentPagesCheckoutSessionTaxIdCollection';
  /** Indicates whether tax ID collection is enabled for the session */
  enabled?: Maybe<Scalars['Boolean']>;
};

export type Stripe_PaymentPagesCheckoutSessionTotalDetails = {
  __typename?: 'Stripe_PaymentPagesCheckoutSessionTotalDetails';
  /** This is the sum of all the discounts. */
  amount_discount?: Maybe<Scalars['Int']>;
  /** This is the sum of all the shipping amounts. */
  amount_shipping?: Maybe<Scalars['Int']>;
  /** This is the sum of all the tax amounts. */
  amount_tax?: Maybe<Scalars['Int']>;
  breakdown?: Maybe<Stripe_PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown>;
};

export type Stripe_PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown = {
  __typename?: 'Stripe_PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown';
  /** The aggregated discounts. */
  discounts?: Maybe<Array<Maybe<Stripe_LineItemsDiscountAmount>>>;
  /** The aggregated tax amounts by rate. */
  taxes?: Maybe<Array<Maybe<Stripe_LineItemsTaxAmount>>>;
};

export type CreateMyCheckoutSession_StripePropertiesLineItemsItemsPropertyInput = {
  price?: InputMaybe<Scalars['String']>;
  quantity?: InputMaybe<Scalars['Int']>;
};

export type UpdateProfileResult = {
  __typename?: 'UpdateProfileResult';
  clientMutationId?: Maybe<Scalars['String']>;
  result?: Maybe<Profile>;
};

/** update Profile input */
export type UpdateProfileInput = {
  _id: Scalars['ID'];
  id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  bio?: InputMaybe<Scalars['String']>;
  avatar?: InputMaybe<TsRelationshipInput>;
  shopifyCustomerId?: InputMaybe<Scalars['String']>;
  stripeCustomerId?: InputMaybe<Scalars['String']>;
  orders?: InputMaybe<Array<InputMaybe<Stripe_InvoiceInput>>>;
  _shapeId?: InputMaybe<Scalars['String']>;
  _version?: InputMaybe<Scalars['Int']>;
  _shapeName?: InputMaybe<Scalars['String']>;
  _createdAt?: InputMaybe<Scalars['String']>;
  _createdBy?: InputMaybe<Scalars['String']>;
  _updatedAt?: InputMaybe<Scalars['String']>;
  _updatedBy?: InputMaybe<Scalars['String']>;
  _schemaVersion?: InputMaybe<Scalars['Float']>;
  _enabled?: InputMaybe<Scalars['Boolean']>;
  _enabledAt?: InputMaybe<Scalars['String']>;
  _status?: InputMaybe<DefaultWorkflow>;
  _contentTypeId?: InputMaybe<Scalars['String']>;
  _contentTypeName?: InputMaybe<Scalars['String']>;
};

export type TsRelationshipInput = {
  shapeId?: InputMaybe<Scalars['String']>;
  shapeName?: InputMaybe<Scalars['String']>;
  contentTypeId?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
};

export type Stripe_InvoiceInput = {
  /** The country of the business associated with this invoice, most often the business creating the invoice. */
  account_country?: InputMaybe<Scalars['String']>;
  /** The public name of the business associated with this invoice, most often the business creating the invoice. */
  account_name?: InputMaybe<Scalars['String']>;
  /** The account tax IDs associated with the invoice. Only editable when the invoice is a draft. */
  account_tax_ids?: InputMaybe<Array<InputMaybe<TaxIdWrappedStringInputUnion>>>;
  /** Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`. */
  amount_due?: InputMaybe<Scalars['Int']>;
  /** The amount, in %s, that was paid. */
  amount_paid?: InputMaybe<Scalars['Int']>;
  /** The amount remaining, in %s, that is due. */
  amount_remaining?: InputMaybe<Scalars['Int']>;
  /** The fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid. */
  application_fee_amount?: InputMaybe<Scalars['Int']>;
  /** Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule. */
  attempt_count?: InputMaybe<Scalars['Int']>;
  /** Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users. */
  attempted?: InputMaybe<Scalars['Boolean']>;
  /** Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action. */
  auto_advance?: InputMaybe<Scalars['Boolean']>;
  automatic_tax?: InputMaybe<Stripe_AutomaticTaxInput>;
  /** Indicates the reason why the invoice was created. `subscription_cycle` indicates an invoice created by a subscription advancing into a new period. `subscription_create` indicates an invoice created due to creating a subscription. `subscription_update` indicates an invoice created due to updating a subscription. `subscription` is set for all old invoices to indicate either a change to a subscription or a period advancement. `manual` is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The `upcoming` value is reserved for simulated invoices per the upcoming invoice endpoint. `subscription_threshold` indicates an invoice created due to a billing threshold being reached. */
  billing_reason?: InputMaybe<UpdateProfileResultBillingReason>;
  charge?: InputMaybe<ChargeWrappedStringInputUnion>;
  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. */
  collection_method?: InputMaybe<UpdateProfileResultCollectionMethod>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  /** Custom fields displayed on the invoice. */
  custom_fields?: InputMaybe<Array<InputMaybe<Stripe_InvoiceSettingCustomFieldInput>>>;
  customer?: InputMaybe<Scalars['String']>;
  customer_address?: InputMaybe<Stripe_AddressInput>;
  /** The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated. */
  customer_email?: InputMaybe<Scalars['String']>;
  /** The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated. */
  customer_name?: InputMaybe<Scalars['String']>;
  /** The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated. */
  customer_phone?: InputMaybe<Scalars['String']>;
  customer_shipping?: InputMaybe<Stripe_ShippingInput>;
  /** The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated. */
  customer_tax_exempt?: InputMaybe<UpdateProfileResultCustomerTaxExempt>;
  /** The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated. */
  customer_tax_ids?: InputMaybe<Array<InputMaybe<Stripe_InvoicesResourceInvoiceTaxIdInput>>>;
  default_payment_method?: InputMaybe<PaymentMethodWrappedStringInputUnion>;
  default_source?: InputMaybe<AlipayAccountBankAccountBitcoinReceiverCardSourceWrappedStringInputUnion>;
  /** The tax rates applied to this invoice, if any. */
  default_tax_rates?: InputMaybe<Array<InputMaybe<Stripe_TaxRateInput>>>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard. */
  description?: InputMaybe<Scalars['String']>;
  discount?: InputMaybe<Stripe_DiscountInput>;
  discounts?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`. */
  due_date?: InputMaybe<Scalars['Int']>;
  /** Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null. */
  ending_balance?: InputMaybe<Scalars['Int']>;
  /** Footer displayed on the invoice. */
  footer?: InputMaybe<Scalars['String']>;
  /** The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null. */
  hosted_invoice_url?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null. */
  invoice_pdf?: InputMaybe<Scalars['String']>;
  last_finalization_error?: InputMaybe<Stripe_ApiErrorsInput>;
  /** The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any. */
  lines?: InputMaybe<UpdateProfilePropertiesPropertiesOrdersItemsPropertiesLinesPropertyInput>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`. */
  next_payment_attempt?: InputMaybe<Scalars['Int']>;
  /** A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified. */
  number?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  on_behalf_of?: InputMaybe<AccountWrappedStringInputUnion>;
  /** Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance. */
  paid?: InputMaybe<Scalars['Boolean']>;
  /** Returns true if the invoice was manually marked paid, returns false if the invoice hasn't been paid yet or was paid on Stripe. */
  paid_out_of_band?: InputMaybe<Scalars['Boolean']>;
  payment_intent?: InputMaybe<PaymentIntentWrappedStringInputUnion>;
  payment_settings?: InputMaybe<Stripe_InvoicesPaymentSettingsInput>;
  /** End of the usage period during which invoice items were added to this invoice. */
  period_end?: InputMaybe<Scalars['Int']>;
  /** Start of the usage period during which invoice items were added to this invoice. */
  period_start?: InputMaybe<Scalars['Int']>;
  /** Total amount of all post-payment credit notes issued for this invoice. */
  post_payment_credit_notes_amount?: InputMaybe<Scalars['Int']>;
  /** Total amount of all pre-payment credit notes issued for this invoice. */
  pre_payment_credit_notes_amount?: InputMaybe<Scalars['Int']>;
  quote?: InputMaybe<QuoteWrappedStringInputUnion>;
  /** This is the transaction number that appears on email receipts sent for this invoice. */
  receipt_number?: InputMaybe<Scalars['String']>;
  /** Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance. */
  starting_balance?: InputMaybe<Scalars['Int']>;
  /** Extra information about an invoice for the customer's credit card statement. */
  statement_descriptor?: InputMaybe<Scalars['String']>;
  /** The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview) */
  status?: InputMaybe<UpdateProfileResultStatus>;
  status_transitions?: InputMaybe<Stripe_InvoicesStatusTransitionsInput>;
  subscription?: InputMaybe<SubscriptionWrappedStringInputUnion>;
  /** Only set for upcoming invoices that preview prorations. The time used to calculate prorations. */
  subscription_proration_date?: InputMaybe<Scalars['Int']>;
  /** Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated */
  subtotal?: InputMaybe<Scalars['Int']>;
  /** The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice. */
  tax?: InputMaybe<Scalars['Int']>;
  test_clock?: InputMaybe<TestHelpersTestClockWrappedStringInputUnion>;
  threshold_reason?: InputMaybe<Stripe_InvoiceThresholdReasonInput>;
  /** Total after discounts and taxes. */
  total?: InputMaybe<Scalars['Int']>;
  /** The aggregate amounts calculated per discount across all line items. */
  total_discount_amounts?: InputMaybe<Array<InputMaybe<Stripe_DiscountsResourceDiscountAmountInput>>>;
  /** The aggregate amounts calculated per tax rate for all line items. */
  total_tax_amounts?: InputMaybe<Array<InputMaybe<Stripe_InvoiceTaxAmountInput>>>;
  transfer_data?: InputMaybe<Stripe_InvoiceTransferDataInput>;
  /** Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created. */
  webhooks_delivered_at?: InputMaybe<Scalars['Int']>;
};

export type TaxIdWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  taxId?: InputMaybe<Stripe_TaxIdInput>;
};

export type WrappedStringInput = {
  value: Scalars['String'];
};

export type Stripe_TaxIdInput = {
  /** Two-letter ISO code representing the country of the tax ID. */
  country?: InputMaybe<Scalars['String']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  customer?: InputMaybe<CustomerWrappedStringInputUnion>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  /** Type of the tax ID, one of `ae_trn`, `au_abn`, `au_arn`, `bg_uic`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `es_cif`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `th_vat`, `tw_vat`, `ua_vat`, `us_ein`, or `za_vat`. Note that some legacy tax IDs have type `unknown` */
  type?: InputMaybe<UpdateProfileResultType>;
  /** Value of the tax ID. */
  value?: InputMaybe<Scalars['String']>;
  verification?: InputMaybe<Stripe_TaxIdVerificationInput>;
};

export type CustomerWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  customer?: InputMaybe<Stripe_CustomerInput>;
};

export type Stripe_CustomerInput = {
  address?: InputMaybe<Stripe_AddressInput>;
  /** Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized. */
  balance?: InputMaybe<Scalars['Int']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes. */
  currency?: InputMaybe<Scalars['String']>;
  default_source?: InputMaybe<AlipayAccountBankAccountBitcoinReceiverCardSourceWrappedStringInputUnion>;
  /**
   * When the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed. When the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.
   *
   * If an invoice is marked uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't get reset to `false`.
   */
  delinquent?: InputMaybe<Scalars['Boolean']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: InputMaybe<Scalars['String']>;
  discount?: InputMaybe<Stripe_DiscountInput>;
  /** The customer's email address. */
  email?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** The prefix for the customer used to generate unique invoice numbers. */
  invoice_prefix?: InputMaybe<Scalars['String']>;
  invoice_settings?: InputMaybe<Stripe_InvoiceSettingCustomerSettingInput>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** The customer's full name or business name. */
  name?: InputMaybe<Scalars['String']>;
  /** The suffix of the customer's next invoice number, e.g., 0001. */
  next_invoice_sequence?: InputMaybe<Scalars['Int']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  /** The customer's phone number. */
  phone?: InputMaybe<Scalars['String']>;
  /** The customer's preferred locales (languages), ordered by preference. */
  preferred_locales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  shipping?: InputMaybe<Stripe_ShippingInput>;
  /** The customer's payment sources, if any. */
  sources?: InputMaybe<PropertiesCustomerPropertiesSourcesPropertyInput>;
  /** The customer's current subscriptions, if any. */
  subscriptions?: InputMaybe<PropertiesCustomerPropertiesSubscriptionsPropertyInput>;
  tax?: InputMaybe<Stripe_CustomerTaxInput>;
  /** Describes the customer's tax exemption status. One of `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the text **"Reverse charge"**. */
  tax_exempt?: InputMaybe<UpdateProfileResultTaxExempt>;
  /** The customer's tax IDs. */
  tax_ids?: InputMaybe<PropertiesCustomerPropertiesTaxIdsPropertyInput>;
  test_clock?: InputMaybe<TestHelpersTestClockWrappedStringInputUnion>;
};

export type Stripe_AddressInput = {
  /** City, district, suburb, town, or village. */
  city?: InputMaybe<Scalars['String']>;
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: InputMaybe<Scalars['String']>;
  /** Address line 1 (e.g., street, PO Box, or company name). */
  line1?: InputMaybe<Scalars['String']>;
  /** Address line 2 (e.g., apartment, suite, unit, or building). */
  line2?: InputMaybe<Scalars['String']>;
  /** ZIP or postal code. */
  postal_code?: InputMaybe<Scalars['String']>;
  /** State, county, province, or region. */
  state?: InputMaybe<Scalars['String']>;
};

export type AlipayAccountBankAccountBitcoinReceiverCardSourceWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  alipayAccount?: InputMaybe<Stripe_AlipayAccountInput>;
  bankAccount?: InputMaybe<Stripe_BankAccountInput>;
  bitcoinReceiver?: InputMaybe<Stripe_BitcoinReceiverInput>;
  card?: InputMaybe<Stripe_CardInput>;
  source?: InputMaybe<Stripe_SourceInput>;
};

export type Stripe_AlipayAccountInput = {
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  customer?: InputMaybe<Scalars['String']>;
  /** Uniquely identifies the account and will be the same across all Alipay account objects that are linked to the same Alipay account. */
  fingerprint?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  /** If the Alipay account object is not reusable, the exact amount that you can create a charge for. */
  payment_amount?: InputMaybe<Scalars['Int']>;
  /** If the Alipay account object is not reusable, the exact currency that you can create a charge for. */
  payment_currency?: InputMaybe<Scalars['String']>;
  /** True if you can create multiple payments using this account. If the account is reusable, then you can freely choose the amount of each payment. */
  reusable?: InputMaybe<Scalars['Boolean']>;
  /** Whether this Alipay account object has ever been used for a payment. */
  used?: InputMaybe<Scalars['Boolean']>;
  /** The username for the Alipay account. */
  username?: InputMaybe<Scalars['String']>;
};

export enum UpdateProfileResultObject {
  Invoice = 'invoice'
}

export type Stripe_BankAccountInput = {
  account?: InputMaybe<AccountWrappedStringInputUnion>;
  /** The name of the person or business that owns the bank account. */
  account_holder_name?: InputMaybe<Scalars['String']>;
  /** The type of entity that holds the account. This can be either `individual` or `company`. */
  account_holder_type?: InputMaybe<Scalars['String']>;
  /** The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`. */
  account_type?: InputMaybe<Scalars['String']>;
  /** A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout. */
  available_payout_methods?: InputMaybe<Array<InputMaybe<UpdateProfileResultAvailablePayoutMethods>>>;
  /** Name of the bank associated with the routing number (e.g., `WELLS FARGO`). */
  bank_name?: InputMaybe<Scalars['String']>;
  /** Two-letter ISO code representing the country the bank account is located in. */
  country?: InputMaybe<Scalars['String']>;
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
  currency?: InputMaybe<Scalars['String']>;
  customer?: InputMaybe<Scalars['String']>;
  /** Whether this bank account is the default external account for its currency. */
  default_for_currency?: InputMaybe<Scalars['Boolean']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** The last four digits of the bank account number. */
  last4?: InputMaybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  /** The routing transit number for the bank account. */
  routing_number?: InputMaybe<Scalars['String']>;
  /**
   * For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isnâ€™t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a transfer sent to this bank account fails, we'll set the status to `errored` and will not continue to send transfers until the bank details are updated.
   *
   * For external accounts, possible values are `new` and `errored`. Validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
   */
  status?: InputMaybe<Scalars['String']>;
};

export type AccountWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  account?: InputMaybe<Stripe_AccountInput>;
};

export type Stripe_AccountInput = {
  business_profile?: InputMaybe<Stripe_AccountBusinessProfileInput>;
  /** The business type. */
  business_type?: InputMaybe<UpdateProfileResultBusinessType>;
  capabilities?: InputMaybe<Stripe_AccountCapabilitiesInput>;
  /** Whether the account can create live charges. */
  charges_enabled?: InputMaybe<Scalars['Boolean']>;
  company?: InputMaybe<Stripe_LegalEntityCompanyInput>;
  controller?: InputMaybe<Stripe_AccountUnificationAccountControllerInput>;
  /** The account's country. */
  country?: InputMaybe<Scalars['String']>;
  /** Time at which the account was connected. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). */
  default_currency?: InputMaybe<Scalars['String']>;
  /** Whether account details have been submitted. Standard accounts cannot receive payouts before this is true. */
  details_submitted?: InputMaybe<Scalars['Boolean']>;
  /** An email address associated with the account. You can treat this as metadata: it is not used for authentication or messaging account holders. */
  email?: InputMaybe<Scalars['String']>;
  /** External accounts (bank accounts and debit cards) currently attached to this account */
  external_accounts?: InputMaybe<PropertiesAccountPropertiesExternalAccountsPropertyInput>;
  future_requirements?: InputMaybe<Stripe_AccountFutureRequirementsInput>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  individual?: InputMaybe<Stripe_PersonInput>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  /** Whether Stripe can send payouts to this account. */
  payouts_enabled?: InputMaybe<Scalars['Boolean']>;
  requirements?: InputMaybe<Stripe_AccountRequirementsInput>;
  settings?: InputMaybe<Stripe_AccountSettingsInput>;
  tos_acceptance?: InputMaybe<Stripe_AccountTosAcceptanceInput>;
  /** The Stripe account type. Can be `standard`, `express`, or `custom`. */
  type?: InputMaybe<UpdateProfileResultType>;
};

export type Stripe_AccountBusinessProfileInput = {
  /** [The merchant category code for the account](https://stripe.com/docs/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide. */
  mcc?: InputMaybe<Scalars['String']>;
  /** The customer-facing business name. */
  name?: InputMaybe<Scalars['String']>;
  /** Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes. */
  product_description?: InputMaybe<Scalars['String']>;
  support_address?: InputMaybe<Stripe_AddressInput>;
  /** A publicly available email address for sending support issues to. */
  support_email?: InputMaybe<Scalars['String']>;
  /** A publicly available phone number to call with support issues. */
  support_phone?: InputMaybe<Scalars['String']>;
  /** A publicly available website for handling support issues. */
  support_url?: InputMaybe<Scalars['String']>;
  /** The business's publicly available website. */
  url?: InputMaybe<Scalars['String']>;
};

export enum UpdateProfileResultBusinessType {
  Company = 'company',
  GovernmentEntity = 'government_entity',
  Individual = 'individual',
  NonProfit = 'non_profit'
}

export type Stripe_AccountCapabilitiesInput = {
  /** The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges. */
  acss_debit_payments?: InputMaybe<UpdateProfileResultAcssDebitPayments>;
  /** The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges. */
  afterpay_clearpay_payments?: InputMaybe<UpdateProfileResultAfterpayClearpayPayments>;
  /** The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges. */
  au_becs_debit_payments?: InputMaybe<UpdateProfileResultAuBecsDebitPayments>;
  /** The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges. */
  bacs_debit_payments?: InputMaybe<UpdateProfileResultBacsDebitPayments>;
  /** The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges. */
  bancontact_payments?: InputMaybe<UpdateProfileResultBancontactPayments>;
  /** The status of the customer_balance payments capability of the account, or whether the account can directly process customer_balance charges. */
  bank_transfer_payments?: InputMaybe<UpdateProfileResultBankTransferPayments>;
  /** The status of the boleto payments capability of the account, or whether the account can directly process boleto charges. */
  boleto_payments?: InputMaybe<UpdateProfileResultBoletoPayments>;
  /** The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards */
  card_issuing?: InputMaybe<UpdateProfileResultCardIssuing>;
  /** The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges. */
  card_payments?: InputMaybe<UpdateProfileResultCardPayments>;
  /** The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency. */
  cartes_bancaires_payments?: InputMaybe<UpdateProfileResultCartesBancairesPayments>;
  /** The status of the EPS payments capability of the account, or whether the account can directly process EPS charges. */
  eps_payments?: InputMaybe<UpdateProfileResultEpsPayments>;
  /** The status of the FPX payments capability of the account, or whether the account can directly process FPX charges. */
  fpx_payments?: InputMaybe<UpdateProfileResultFpxPayments>;
  /** The status of the giropay payments capability of the account, or whether the account can directly process giropay charges. */
  giropay_payments?: InputMaybe<UpdateProfileResultGiropayPayments>;
  /** The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges. */
  grabpay_payments?: InputMaybe<UpdateProfileResultGrabpayPayments>;
  /** The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges. */
  ideal_payments?: InputMaybe<UpdateProfileResultIdealPayments>;
  /** The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency. */
  jcb_payments?: InputMaybe<UpdateProfileResultJcbPayments>;
  /** The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges. */
  klarna_payments?: InputMaybe<UpdateProfileResultKlarnaPayments>;
  /** The status of the konbini payments capability of the account, or whether the account can directly process konbini charges. */
  konbini_payments?: InputMaybe<UpdateProfileResultKonbiniPayments>;
  /** The status of the legacy payments capability of the account. */
  legacy_payments?: InputMaybe<UpdateProfileResultLegacyPayments>;
  /** The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges. */
  oxxo_payments?: InputMaybe<UpdateProfileResultOxxoPayments>;
  /** The status of the P24 payments capability of the account, or whether the account can directly process P24 charges. */
  p24_payments?: InputMaybe<UpdateProfileResultP24Payments>;
  /** The status of the paynow payments capability of the account, or whether the account can directly process paynow charges. */
  paynow_payments?: InputMaybe<UpdateProfileResultPaynowPayments>;
  /** The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges. */
  sepa_debit_payments?: InputMaybe<UpdateProfileResultSepaDebitPayments>;
  /** The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges. */
  sofort_payments?: InputMaybe<UpdateProfileResultSofortPayments>;
  /** The status of the tax reporting 1099-K (US) capability of the account. */
  tax_reporting_us_1099_k?: InputMaybe<UpdateProfileResultTaxReportingUs1099K>;
  /** The status of the tax reporting 1099-MISC (US) capability of the account. */
  tax_reporting_us_1099_misc?: InputMaybe<UpdateProfileResultTaxReportingUs1099Misc>;
  /** The status of the transfers capability of the account, or whether your platform can transfer funds to the account. */
  transfers?: InputMaybe<UpdateProfileResultTransfers>;
  /** The status of the US bank account ACH payments capability of the account, or whether the account can directly process US bank account charges. */
  us_bank_account_ach_payments?: InputMaybe<UpdateProfileResultUsBankAccountAchPayments>;
};

export enum UpdateProfileResultAcssDebitPayments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultAfterpayClearpayPayments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultAuBecsDebitPayments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultBacsDebitPayments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultBancontactPayments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultBankTransferPayments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultBoletoPayments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultCardIssuing {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultCardPayments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultCartesBancairesPayments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultEpsPayments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultFpxPayments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultGiropayPayments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultGrabpayPayments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultIdealPayments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultJcbPayments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultKlarnaPayments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultKonbiniPayments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultLegacyPayments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultOxxoPayments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultP24Payments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultPaynowPayments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultSepaDebitPayments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultSofortPayments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultTaxReportingUs1099K {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultTaxReportingUs1099Misc {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultTransfers {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export enum UpdateProfileResultUsBankAccountAchPayments {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending'
}

export type Stripe_LegalEntityCompanyInput = {
  address?: InputMaybe<Stripe_AddressInput>;
  address_kana?: InputMaybe<Stripe_LegalEntityJapanAddressInput>;
  address_kanji?: InputMaybe<Stripe_LegalEntityJapanAddressInput>;
  /** Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided). */
  directors_provided?: InputMaybe<Scalars['Boolean']>;
  /** Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided. */
  executives_provided?: InputMaybe<Scalars['Boolean']>;
  /** The company's legal name. */
  name?: InputMaybe<Scalars['String']>;
  /** The Kana variation of the company's legal name (Japan only). */
  name_kana?: InputMaybe<Scalars['String']>;
  /** The Kanji variation of the company's legal name (Japan only). */
  name_kanji?: InputMaybe<Scalars['String']>;
  /** Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together). */
  owners_provided?: InputMaybe<Scalars['Boolean']>;
  ownership_declaration?: InputMaybe<Stripe_LegalEntityUboDeclarationInput>;
  /** The company's phone number (used for verification). */
  phone?: InputMaybe<Scalars['String']>;
  /** The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details. */
  structure?: InputMaybe<UpdateProfileResultStructure>;
  /** Whether the company's business ID number was provided. */
  tax_id_provided?: InputMaybe<Scalars['Boolean']>;
  /** The jurisdiction in which the `tax_id` is registered (Germany-based companies only). */
  tax_id_registrar?: InputMaybe<Scalars['String']>;
  /** Whether the company's business VAT number was provided. */
  vat_id_provided?: InputMaybe<Scalars['Boolean']>;
  verification?: InputMaybe<Stripe_LegalEntityCompanyVerificationInput>;
};

export type Stripe_LegalEntityJapanAddressInput = {
  /** City/Ward. */
  city?: InputMaybe<Scalars['String']>;
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: InputMaybe<Scalars['String']>;
  /** Block/Building number. */
  line1?: InputMaybe<Scalars['String']>;
  /** Building details. */
  line2?: InputMaybe<Scalars['String']>;
  /** ZIP or postal code. */
  postal_code?: InputMaybe<Scalars['String']>;
  /** Prefecture. */
  state?: InputMaybe<Scalars['String']>;
  /** Town/cho-me. */
  town?: InputMaybe<Scalars['String']>;
};

export type Stripe_LegalEntityUboDeclarationInput = {
  /** The Unix timestamp marking when the beneficial owner attestation was made. */
  date?: InputMaybe<Scalars['Int']>;
  /** The IP address from which the beneficial owner attestation was made. */
  ip?: InputMaybe<Scalars['String']>;
  /** The user-agent string from the browser where the beneficial owner attestation was made. */
  user_agent?: InputMaybe<Scalars['String']>;
};

export enum UpdateProfileResultStructure {
  FreeZoneEstablishment = 'free_zone_establishment',
  FreeZoneLlc = 'free_zone_llc',
  GovernmentInstrumentality = 'government_instrumentality',
  GovernmentalUnit = 'governmental_unit',
  IncorporatedNonProfit = 'incorporated_non_profit',
  LimitedLiabilityPartnership = 'limited_liability_partnership',
  Llc = 'llc',
  MultiMemberLlc = 'multi_member_llc',
  PrivateCompany = 'private_company',
  PrivateCorporation = 'private_corporation',
  PrivatePartnership = 'private_partnership',
  PublicCompany = 'public_company',
  PublicCorporation = 'public_corporation',
  PublicPartnership = 'public_partnership',
  SingleMemberLlc = 'single_member_llc',
  SoleEstablishment = 'sole_establishment',
  SoleProprietorship = 'sole_proprietorship',
  TaxExemptGovernmentInstrumentality = 'tax_exempt_government_instrumentality',
  UnincorporatedAssociation = 'unincorporated_association',
  UnincorporatedNonProfit = 'unincorporated_non_profit'
}

export type Stripe_LegalEntityCompanyVerificationInput = {
  document?: InputMaybe<Stripe_LegalEntityCompanyVerificationDocumentInput>;
};

export type Stripe_LegalEntityCompanyVerificationDocumentInput = {
  back?: InputMaybe<FileWrappedStringInputUnion>;
  /** A user-displayable string describing the verification state of this document. */
  details?: InputMaybe<Scalars['String']>;
  /** One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document. */
  details_code?: InputMaybe<Scalars['String']>;
  front?: InputMaybe<FileWrappedStringInputUnion>;
};

export type FileWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  file?: InputMaybe<Stripe_FileInput>;
};

export type Stripe_FileInput = {
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** The time at which the file expires and is no longer available in epoch seconds. */
  expires_at?: InputMaybe<Scalars['Int']>;
  /** A filename for the file, suitable for saving to a filesystem. */
  filename?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** A list of [file links](https://stripe.com/docs/api#file_links) that point at this file. */
  links?: InputMaybe<PropertiesFilePropertiesLinksPropertyInput>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  /** The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file. */
  purpose?: InputMaybe<UpdateProfileResultPurpose>;
  /** The size in bytes of the file object. */
  size?: InputMaybe<Scalars['Int']>;
  /** A user friendly title for the document. */
  title?: InputMaybe<Scalars['String']>;
  /** The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`). */
  type?: InputMaybe<Scalars['String']>;
  /** The URL from which the file can be downloaded using your live secret API key. */
  url?: InputMaybe<Scalars['String']>;
};

/** A list of [file links](https://stripe.com/docs/api#file_links) that point at this file. */
export type PropertiesFilePropertiesLinksPropertyInput = {
  /** Details about each object. */
  data: Array<Stripe_FileLinkInput>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: UpdateProfileResultObject;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Stripe_FileLinkInput = {
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Whether this link is already expired. */
  expired?: InputMaybe<Scalars['Boolean']>;
  /** Time at which the link expires. */
  expires_at?: InputMaybe<Scalars['Int']>;
  file?: InputMaybe<FileWrappedStringInputUnion>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  /** The publicly accessible URL to download the file. */
  url?: InputMaybe<Scalars['String']>;
};

export enum UpdateProfileResultPurpose {
  AccountRequirement = 'account_requirement',
  AdditionalVerification = 'additional_verification',
  BusinessIcon = 'business_icon',
  BusinessLogo = 'business_logo',
  CustomerSignature = 'customer_signature',
  DisputeEvidence = 'dispute_evidence',
  DocumentProviderIdentityDocument = 'document_provider_identity_document',
  FinanceReportRun = 'finance_report_run',
  IdentityDocument = 'identity_document',
  IdentityDocumentDownloadable = 'identity_document_downloadable',
  PciDocument = 'pci_document',
  Selfie = 'selfie',
  SigmaScheduledQuery = 'sigma_scheduled_query',
  TaxDocumentUserUpload = 'tax_document_user_upload'
}

export type Stripe_AccountUnificationAccountControllerInput = {
  /** `true` if the Connect application retrieving the resource controls the account and can therefore exercise [platform controls](https://stripe.com/docs/connect/platform-controls-for-standard-accounts). Otherwise, this field is null. */
  is_controller?: InputMaybe<Scalars['Boolean']>;
  /** The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself. */
  type?: InputMaybe<UpdateProfileResultType>;
};

export enum UpdateProfileResultType {
  AeTrn = 'ae_trn',
  AuAbn = 'au_abn',
  AuArn = 'au_arn',
  BgUic = 'bg_uic',
  BrCnpj = 'br_cnpj',
  BrCpf = 'br_cpf',
  CaBn = 'ca_bn',
  CaGstHst = 'ca_gst_hst',
  CaPstBc = 'ca_pst_bc',
  CaPstMb = 'ca_pst_mb',
  CaPstSk = 'ca_pst_sk',
  CaQst = 'ca_qst',
  ChVat = 'ch_vat',
  ClTin = 'cl_tin',
  EsCif = 'es_cif',
  EuVat = 'eu_vat',
  GbVat = 'gb_vat',
  GeVat = 'ge_vat',
  HkBr = 'hk_br',
  HuTin = 'hu_tin',
  IdNpwp = 'id_npwp',
  IlVat = 'il_vat',
  InGst = 'in_gst',
  IsVat = 'is_vat',
  JpCn = 'jp_cn',
  JpRn = 'jp_rn',
  KrBrn = 'kr_brn',
  LiUid = 'li_uid',
  MxRfc = 'mx_rfc',
  MyFrp = 'my_frp',
  MyItn = 'my_itn',
  MySst = 'my_sst',
  NoVat = 'no_vat',
  NzGst = 'nz_gst',
  RuInn = 'ru_inn',
  RuKpp = 'ru_kpp',
  SaVat = 'sa_vat',
  SgGst = 'sg_gst',
  SgUen = 'sg_uen',
  SiTin = 'si_tin',
  ThVat = 'th_vat',
  TwVat = 'tw_vat',
  UaVat = 'ua_vat',
  Unknown = 'unknown',
  UsEin = 'us_ein',
  ZaVat = 'za_vat'
}

/** External accounts (bank accounts and debit cards) currently attached to this account */
export type PropertiesAccountPropertiesExternalAccountsPropertyInput = {
  /** The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards. */
  data: Array<BankAccountCardInputUnion>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: UpdateProfileResultObject;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type BankAccountCardInputUnion = {
  bankAccount?: InputMaybe<Stripe_BankAccountInput>;
  card?: InputMaybe<Stripe_CardInput>;
};

export type Stripe_CardInput = {
  account?: InputMaybe<AccountWrappedStringInputUnion>;
  /** City/District/Suburb/Town/Village. */
  address_city?: InputMaybe<Scalars['String']>;
  /** Billing address country, if provided when creating card. */
  address_country?: InputMaybe<Scalars['String']>;
  /** Address line 1 (Street address/PO Box/Company name). */
  address_line1?: InputMaybe<Scalars['String']>;
  /** If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  address_line1_check?: InputMaybe<Scalars['String']>;
  /** Address line 2 (Apartment/Suite/Unit/Building). */
  address_line2?: InputMaybe<Scalars['String']>;
  /** State/County/Province/Region. */
  address_state?: InputMaybe<Scalars['String']>;
  /** ZIP or postal code. */
  address_zip?: InputMaybe<Scalars['String']>;
  /** If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  address_zip_check?: InputMaybe<Scalars['String']>;
  /** A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout. */
  available_payout_methods?: InputMaybe<Array<InputMaybe<UpdateProfileResultAvailablePayoutMethods>>>;
  /** Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`. */
  brand?: InputMaybe<Scalars['String']>;
  /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
  country?: InputMaybe<Scalars['String']>;
  /** Three-letter [ISO code for currency](https://stripe.com/docs/payouts). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency. */
  currency?: InputMaybe<Scalars['String']>;
  customer?: InputMaybe<Scalars['String']>;
  /** If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge). */
  cvc_check?: InputMaybe<Scalars['String']>;
  /** Whether this card is the default external account for its currency. */
  default_for_currency?: InputMaybe<Scalars['Boolean']>;
  /** (For tokenized numbers only.) The last four digits of the device account number. */
  dynamic_last4?: InputMaybe<Scalars['String']>;
  /** Two-digit number representing the card's expiration month. */
  exp_month?: InputMaybe<Scalars['Int']>;
  /** Four-digit number representing the card's expiration year. */
  exp_year?: InputMaybe<Scalars['Int']>;
  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   */
  fingerprint?: InputMaybe<Scalars['String']>;
  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** The last four digits of the card. */
  last4?: InputMaybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** Cardholder name. */
  name?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  recipient?: InputMaybe<RecipientWrappedStringInputUnion>;
  /** For external accounts, possible values are `new` and `errored`. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated. */
  status?: InputMaybe<Scalars['String']>;
  /** If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null. */
  tokenization_method?: InputMaybe<Scalars['String']>;
};

export enum UpdateProfileResultAvailablePayoutMethods {
  Instant = 'instant',
  Standard = 'standard'
}

export type RecipientWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  recipient?: InputMaybe<Stripe_RecipientInput>;
};

export type Stripe_RecipientInput = {
  active_account?: InputMaybe<Stripe_BankAccountInput>;
  cards?: InputMaybe<PropertiesRecipientPropertiesCardsPropertyInput>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  default_card?: InputMaybe<CardWrappedStringInputUnion>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  migrated_to?: InputMaybe<AccountWrappedStringInputUnion>;
  /** Full, legal name of the recipient. */
  name?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  rolled_back_from?: InputMaybe<AccountWrappedStringInputUnion>;
  /** Type of the recipient, one of `individual` or `corporation`. */
  type?: InputMaybe<Scalars['String']>;
};

export type PropertiesRecipientPropertiesCardsPropertyInput = {
  data: Array<Stripe_CardInput>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: UpdateProfileResultObject;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type CardWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  card?: InputMaybe<Stripe_CardInput>;
};

export type Stripe_AccountFutureRequirementsInput = {
  /** Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
  alternatives?: InputMaybe<Array<InputMaybe<Stripe_AccountRequirementsAlternativeInput>>>;
  /** Date on which `future_requirements` merges with the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on its enablement state prior to transitioning. */
  current_deadline?: InputMaybe<Scalars['Int']>;
  /** Fields that need to be collected to keep the account enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash. */
  currently_due?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** This is typed as a string for consistency with `requirements.disabled_reason`, but it safe to assume `future_requirements.disabled_reason` is empty because fields in `future_requirements` will never disable the account. */
  disabled_reason?: InputMaybe<Scalars['String']>;
  /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
  errors?: InputMaybe<Array<InputMaybe<Stripe_AccountRequirementsErrorInput>>>;
  /** Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well. */
  eventually_due?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`. */
  past_due?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. */
  pending_verification?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type Stripe_AccountRequirementsAlternativeInput = {
  /** Fields that can be provided to satisfy all fields in `original_fields_due`. */
  alternative_fields_due?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Fields that are due and can be satisfied by providing all fields in `alternative_fields_due`. */
  original_fields_due?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type Stripe_AccountRequirementsErrorInput = {
  /** The code for the type of error. */
  code?: InputMaybe<UpdateProfileResultCode>;
  /** An informative message that indicates the error type and provides additional details about the error. */
  reason?: InputMaybe<Scalars['String']>;
  /** The specific user onboarding requirement field (in the requirements hash) that needs to be resolved. */
  requirement?: InputMaybe<Scalars['String']>;
};

export enum UpdateProfileResultCode {
  InvalidAddressCityStatePostalCode = 'invalid_address_city_state_postal_code',
  InvalidStreetAddress = 'invalid_street_address',
  InvalidValueOther = 'invalid_value_other',
  VerificationDocumentAddressMismatch = 'verification_document_address_mismatch',
  VerificationDocumentAddressMissing = 'verification_document_address_missing',
  VerificationDocumentCorrupt = 'verification_document_corrupt',
  VerificationDocumentCountryNotSupported = 'verification_document_country_not_supported',
  VerificationDocumentDobMismatch = 'verification_document_dob_mismatch',
  VerificationDocumentDuplicateType = 'verification_document_duplicate_type',
  VerificationDocumentExpired = 'verification_document_expired',
  VerificationDocumentFailedCopy = 'verification_document_failed_copy',
  VerificationDocumentFailedGreyscale = 'verification_document_failed_greyscale',
  VerificationDocumentFailedOther = 'verification_document_failed_other',
  VerificationDocumentFailedTestMode = 'verification_document_failed_test_mode',
  VerificationDocumentFraudulent = 'verification_document_fraudulent',
  VerificationDocumentIdNumberMismatch = 'verification_document_id_number_mismatch',
  VerificationDocumentIdNumberMissing = 'verification_document_id_number_missing',
  VerificationDocumentIncomplete = 'verification_document_incomplete',
  VerificationDocumentInvalid = 'verification_document_invalid',
  VerificationDocumentIssueOrExpiryDateMissing = 'verification_document_issue_or_expiry_date_missing',
  VerificationDocumentManipulated = 'verification_document_manipulated',
  VerificationDocumentMissingBack = 'verification_document_missing_back',
  VerificationDocumentMissingFront = 'verification_document_missing_front',
  VerificationDocumentNameMismatch = 'verification_document_name_mismatch',
  VerificationDocumentNameMissing = 'verification_document_name_missing',
  VerificationDocumentNationalityMismatch = 'verification_document_nationality_mismatch',
  VerificationDocumentNotReadable = 'verification_document_not_readable',
  VerificationDocumentNotSigned = 'verification_document_not_signed',
  VerificationDocumentNotUploaded = 'verification_document_not_uploaded',
  VerificationDocumentPhotoMismatch = 'verification_document_photo_mismatch',
  VerificationDocumentTooLarge = 'verification_document_too_large',
  VerificationDocumentTypeNotSupported = 'verification_document_type_not_supported',
  VerificationFailedAddressMatch = 'verification_failed_address_match',
  VerificationFailedBusinessIecNumber = 'verification_failed_business_iec_number',
  VerificationFailedDocumentMatch = 'verification_failed_document_match',
  VerificationFailedIdNumberMatch = 'verification_failed_id_number_match',
  VerificationFailedKeyedIdentity = 'verification_failed_keyed_identity',
  VerificationFailedKeyedMatch = 'verification_failed_keyed_match',
  VerificationFailedNameMatch = 'verification_failed_name_match',
  VerificationFailedOther = 'verification_failed_other',
  VerificationFailedTaxIdMatch = 'verification_failed_tax_id_match',
  VerificationFailedTaxIdNotIssued = 'verification_failed_tax_id_not_issued',
  VerificationMissingExecutives = 'verification_missing_executives',
  VerificationMissingOwners = 'verification_missing_owners',
  VerificationRequiresAdditionalMemorandumOfAssociations = 'verification_requires_additional_memorandum_of_associations'
}

export type Stripe_PersonInput = {
  /** The account the person is associated with. */
  account?: InputMaybe<Scalars['String']>;
  address?: InputMaybe<Stripe_AddressInput>;
  address_kana?: InputMaybe<Stripe_LegalEntityJapanAddressInput>;
  address_kanji?: InputMaybe<Stripe_LegalEntityJapanAddressInput>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  dob?: InputMaybe<Stripe_LegalEntityDobInput>;
  /** The person's email address. */
  email?: InputMaybe<Scalars['String']>;
  /** The person's first name. */
  first_name?: InputMaybe<Scalars['String']>;
  /** The Kana variation of the person's first name (Japan only). */
  first_name_kana?: InputMaybe<Scalars['String']>;
  /** The Kanji variation of the person's first name (Japan only). */
  first_name_kanji?: InputMaybe<Scalars['String']>;
  /** A list of alternate names or aliases that the person is known by. */
  full_name_aliases?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  future_requirements?: InputMaybe<Stripe_PersonFutureRequirementsInput>;
  /** The person's gender (International regulations require either "male" or "female"). */
  gender?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Whether the person's `id_number` was provided. */
  id_number_provided?: InputMaybe<Scalars['Boolean']>;
  /** The person's last name. */
  last_name?: InputMaybe<Scalars['String']>;
  /** The Kana variation of the person's last name (Japan only). */
  last_name_kana?: InputMaybe<Scalars['String']>;
  /** The Kanji variation of the person's last name (Japan only). */
  last_name_kanji?: InputMaybe<Scalars['String']>;
  /** The person's maiden name. */
  maiden_name?: InputMaybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** The country where the person is a national. */
  nationality?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  /** The person's phone number. */
  phone?: InputMaybe<Scalars['String']>;
  /** Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
  political_exposure?: InputMaybe<UpdateProfileResultPoliticalExposure>;
  relationship?: InputMaybe<Stripe_PersonRelationshipInput>;
  requirements?: InputMaybe<Stripe_PersonRequirementsInput>;
  /** Whether the last four digits of the person's Social Security number have been provided (U.S. only). */
  ssn_last_4_provided?: InputMaybe<Scalars['Boolean']>;
  verification?: InputMaybe<Stripe_LegalEntityPersonVerificationInput>;
};

export type Stripe_LegalEntityDobInput = {
  /** The day of birth, between 1 and 31. */
  day?: InputMaybe<Scalars['Int']>;
  /** The month of birth, between 1 and 12. */
  month?: InputMaybe<Scalars['Int']>;
  /** The four-digit year of birth. */
  year?: InputMaybe<Scalars['Int']>;
};

export type Stripe_PersonFutureRequirementsInput = {
  /** Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
  alternatives?: InputMaybe<Array<InputMaybe<Stripe_AccountRequirementsAlternativeInput>>>;
  /** Fields that need to be collected to keep the person's account enabled. If not collected by the account's `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash, and may immediately become `past_due`, but the account may also be given a grace period depending on the account's enablement state prior to transition. */
  currently_due?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
  errors?: InputMaybe<Array<InputMaybe<Stripe_AccountRequirementsErrorInput>>>;
  /** Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `future_requirements[current_deadline]` becomes set. */
  eventually_due?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Fields that weren't collected by the account's `requirements.current_deadline`. These fields need to be collected to enable the person's account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`. */
  past_due?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. */
  pending_verification?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export enum UpdateProfileResultPoliticalExposure {
  Existing = 'existing',
  None = 'none'
}

export type Stripe_PersonRelationshipInput = {
  /** Whether the person is a director of the account's legal entity. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations. */
  director?: InputMaybe<Scalars['Boolean']>;
  /** Whether the person has significant responsibility to control, manage, or direct the organization. */
  executive?: InputMaybe<Scalars['Boolean']>;
  /** Whether the person is an owner of the accountâ€™s legal entity. */
  owner?: InputMaybe<Scalars['Boolean']>;
  /** The percent owned by the person of the account's legal entity. */
  percent_ownership?: InputMaybe<Scalars['Float']>;
  /** Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account. */
  representative?: InputMaybe<Scalars['Boolean']>;
  /** The person's title (e.g., CEO, Support Engineer). */
  title?: InputMaybe<Scalars['String']>;
};

export type Stripe_PersonRequirementsInput = {
  /** Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
  alternatives?: InputMaybe<Array<InputMaybe<Stripe_AccountRequirementsAlternativeInput>>>;
  /** Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
  currently_due?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
  errors?: InputMaybe<Array<InputMaybe<Stripe_AccountRequirementsErrorInput>>>;
  /** Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `current_deadline` becomes set. */
  eventually_due?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable the person's account. */
  past_due?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. */
  pending_verification?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type Stripe_LegalEntityPersonVerificationInput = {
  additional_document?: InputMaybe<Stripe_LegalEntityPersonVerificationDocumentInput>;
  /** A user-displayable string describing the verification state for the person. For example, this may say "Provided identity information could not be verified". */
  details?: InputMaybe<Scalars['String']>;
  /** One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person. */
  details_code?: InputMaybe<Scalars['String']>;
  document?: InputMaybe<Stripe_LegalEntityPersonVerificationDocumentInput>;
  /** The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`. */
  status?: InputMaybe<Scalars['String']>;
};

export type Stripe_LegalEntityPersonVerificationDocumentInput = {
  back?: InputMaybe<FileWrappedStringInputUnion>;
  /** A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read". */
  details?: InputMaybe<Scalars['String']>;
  /** One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document. */
  details_code?: InputMaybe<Scalars['String']>;
  front?: InputMaybe<FileWrappedStringInputUnion>;
};

export type Stripe_AccountRequirementsInput = {
  /** Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
  alternatives?: InputMaybe<Array<InputMaybe<Stripe_AccountRequirementsAlternativeInput>>>;
  /** Date by which the fields in `currently_due` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected. */
  current_deadline?: InputMaybe<Scalars['Int']>;
  /** Fields that need to be collected to keep the account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
  currently_due?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** If the account is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`. */
  disabled_reason?: InputMaybe<Scalars['String']>;
  /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
  errors?: InputMaybe<Array<InputMaybe<Stripe_AccountRequirementsErrorInput>>>;
  /** Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set. */
  eventually_due?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the account. */
  past_due?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. */
  pending_verification?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type Stripe_AccountSettingsInput = {
  bacs_debit_payments?: InputMaybe<Stripe_AccountBacsDebitPaymentsSettingsInput>;
  branding?: InputMaybe<Stripe_AccountBrandingSettingsInput>;
  card_issuing?: InputMaybe<Stripe_AccountCardIssuingSettingsInput>;
  card_payments?: InputMaybe<Stripe_AccountCardPaymentsSettingsInput>;
  dashboard?: InputMaybe<Stripe_AccountDashboardSettingsInput>;
  payments?: InputMaybe<Stripe_AccountPaymentsSettingsInput>;
  payouts?: InputMaybe<Stripe_AccountPayoutSettingsInput>;
  sepa_debit_payments?: InputMaybe<Stripe_AccountSepaDebitPaymentsSettingsInput>;
};

export type Stripe_AccountBacsDebitPaymentsSettingsInput = {
  /** The Bacs Direct Debit Display Name for this account. For payments made with Bacs Direct Debit, this will appear on the mandate, and as the statement descriptor. */
  display_name?: InputMaybe<Scalars['String']>;
};

export type Stripe_AccountBrandingSettingsInput = {
  icon?: InputMaybe<FileWrappedStringInputUnion>;
  logo?: InputMaybe<FileWrappedStringInputUnion>;
  /** A CSS hex color value representing the primary branding color for this account */
  primary_color?: InputMaybe<Scalars['String']>;
  /** A CSS hex color value representing the secondary branding color for this account */
  secondary_color?: InputMaybe<Scalars['String']>;
};

export type Stripe_AccountCardIssuingSettingsInput = {
  tos_acceptance?: InputMaybe<Stripe_CardIssuingAccountTermsOfServiceInput>;
};

export type Stripe_CardIssuingAccountTermsOfServiceInput = {
  /** The Unix timestamp marking when the account representative accepted the service agreement. */
  date?: InputMaybe<Scalars['Int']>;
  /** The IP address from which the account representative accepted the service agreement. */
  ip?: InputMaybe<Scalars['String']>;
  /** The user agent of the browser from which the account representative accepted the service agreement. */
  user_agent?: InputMaybe<Scalars['String']>;
};

export type Stripe_AccountCardPaymentsSettingsInput = {
  decline_on?: InputMaybe<Stripe_AccountDeclineChargeOnInput>;
  /** The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion. */
  statement_descriptor_prefix?: InputMaybe<Scalars['String']>;
};

export type Stripe_AccountDeclineChargeOnInput = {
  /** Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification. */
  avs_failure?: InputMaybe<Scalars['Boolean']>;
  /** Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification. */
  cvc_failure?: InputMaybe<Scalars['Boolean']>;
};

export type Stripe_AccountDashboardSettingsInput = {
  /** The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts. */
  display_name?: InputMaybe<Scalars['String']>;
  /** The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). */
  timezone?: InputMaybe<Scalars['String']>;
};

export type Stripe_AccountPaymentsSettingsInput = {
  /** The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. */
  statement_descriptor?: InputMaybe<Scalars['String']>;
  /** The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only) */
  statement_descriptor_kana?: InputMaybe<Scalars['String']>;
  /** The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only) */
  statement_descriptor_kanji?: InputMaybe<Scalars['String']>;
};

export type Stripe_AccountPayoutSettingsInput = {
  /** A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See our [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances) documentation for details. Default value is `false` for Custom accounts, otherwise `true`. */
  debit_negative_balances?: InputMaybe<Scalars['Boolean']>;
  schedule?: InputMaybe<Stripe_TransferScheduleInput>;
  /** The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard. */
  statement_descriptor?: InputMaybe<Scalars['String']>;
};

export type Stripe_TransferScheduleInput = {
  /** The number of days charges for the account will be held before being paid out. */
  delay_days?: InputMaybe<Scalars['Int']>;
  /** How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`. */
  interval?: InputMaybe<Scalars['String']>;
  /** The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months. */
  monthly_anchor?: InputMaybe<Scalars['Int']>;
  /** The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly. */
  weekly_anchor?: InputMaybe<Scalars['String']>;
};

export type Stripe_AccountSepaDebitPaymentsSettingsInput = {
  /** SEPA creditor identifier that identifies the company making the payment. */
  creditor_id?: InputMaybe<Scalars['String']>;
};

export type Stripe_AccountTosAcceptanceInput = {
  /** The Unix timestamp marking when the account representative accepted their service agreement */
  date?: InputMaybe<Scalars['Int']>;
  /** The IP address from which the account representative accepted their service agreement */
  ip?: InputMaybe<Scalars['String']>;
  /** The user's service agreement type */
  service_agreement?: InputMaybe<Scalars['String']>;
  /** The user agent of the browser from which the account representative accepted their service agreement */
  user_agent?: InputMaybe<Scalars['String']>;
};

export type Stripe_BitcoinReceiverInput = {
  /** True when this bitcoin receiver has received a non-zero amount of bitcoin. */
  active?: InputMaybe<Scalars['Boolean']>;
  /** The amount of `currency` that you are collecting as payment. */
  amount?: InputMaybe<Scalars['Int']>;
  /** The amount of `currency` to which `bitcoin_amount_received` has been converted. */
  amount_received?: InputMaybe<Scalars['Int']>;
  /** The amount of bitcoin that the customer should send to fill the receiver. The `bitcoin_amount` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin. */
  bitcoin_amount?: InputMaybe<Scalars['Int']>;
  /** The amount of bitcoin that has been sent by the customer to this receiver. */
  bitcoin_amount_received?: InputMaybe<Scalars['Int']>;
  /** This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets). */
  bitcoin_uri?: InputMaybe<Scalars['String']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which the bitcoin will be converted. */
  currency?: InputMaybe<Scalars['String']>;
  /** The customer ID of the bitcoin receiver. */
  customer?: InputMaybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: InputMaybe<Scalars['String']>;
  /** The customer's email address, set by the API call that creates the receiver. */
  email?: InputMaybe<Scalars['String']>;
  /** This flag is initially false and updates to true when the customer sends the `bitcoin_amount` to this receiver. */
  filled?: InputMaybe<Scalars['Boolean']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver. */
  inbound_address?: InputMaybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  /** The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key. */
  payment?: InputMaybe<Scalars['String']>;
  /** The refund address of this bitcoin receiver. */
  refund_address?: InputMaybe<Scalars['String']>;
  /** A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key. */
  transactions?: InputMaybe<PropertiesBitcoinReceiverPropertiesTransactionsPropertyInput>;
  /** This receiver contains uncaptured funds that can be used for a payment or refunded. */
  uncaptured_funds?: InputMaybe<Scalars['Boolean']>;
  /** Indicate if this source is used for payment. */
  used_for_payment?: InputMaybe<Scalars['Boolean']>;
};

/** A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key. */
export type PropertiesBitcoinReceiverPropertiesTransactionsPropertyInput = {
  /** Details about each object. */
  data: Array<Stripe_BitcoinTransactionInput>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: UpdateProfileResultObject;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Stripe_BitcoinTransactionInput = {
  /** The amount of `currency` that the transaction was converted to in real-time. */
  amount?: InputMaybe<Scalars['Int']>;
  /** The amount of bitcoin contained in the transaction. */
  bitcoin_amount?: InputMaybe<Scalars['Int']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which this transaction was converted. */
  currency?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  /** The receiver to which this transaction was sent. */
  receiver?: InputMaybe<Scalars['String']>;
};

export type Stripe_SourceInput = {
  ach_credit_transfer?: InputMaybe<Stripe_SourceTypeAchCreditTransferInput>;
  ach_debit?: InputMaybe<Stripe_SourceTypeAchDebitInput>;
  acss_debit?: InputMaybe<Stripe_SourceTypeAcssDebitInput>;
  alipay?: InputMaybe<Stripe_SourceTypeAlipayInput>;
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. */
  amount?: InputMaybe<Scalars['Int']>;
  au_becs_debit?: InputMaybe<Stripe_SourceTypeAuBecsDebitInput>;
  bancontact?: InputMaybe<Stripe_SourceTypeBancontactInput>;
  card?: InputMaybe<Stripe_SourceTypeCardInput>;
  card_present?: InputMaybe<Stripe_SourceTypeCardPresentInput>;
  /** The client secret of the source. Used for client-side retrieval using a publishable key. */
  client_secret?: InputMaybe<Scalars['String']>;
  code_verification?: InputMaybe<Stripe_SourceCodeVerificationFlowInput>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources. */
  currency?: InputMaybe<Scalars['String']>;
  /** The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer. */
  customer?: InputMaybe<Scalars['String']>;
  eps?: InputMaybe<Stripe_SourceTypeEpsInput>;
  /** The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. */
  flow?: InputMaybe<Scalars['String']>;
  giropay?: InputMaybe<Stripe_SourceTypeGiropayInput>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  ideal?: InputMaybe<Stripe_SourceTypeIdealInput>;
  klarna?: InputMaybe<Stripe_SourceTypeKlarnaInput>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  multibanco?: InputMaybe<Stripe_SourceTypeMultibancoInput>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  owner?: InputMaybe<Stripe_SourceOwnerInput>;
  p24?: InputMaybe<Stripe_SourceTypeP24Input>;
  receiver?: InputMaybe<Stripe_SourceReceiverFlowInput>;
  redirect?: InputMaybe<Stripe_SourceRedirectFlowInput>;
  sepa_debit?: InputMaybe<Stripe_SourceTypeSepaDebitInput>;
  sofort?: InputMaybe<Stripe_SourceTypeSofortInput>;
  source_order?: InputMaybe<Stripe_SourceOrderInput>;
  /** Extra information about a source. This will appear on your customer's statement every time you charge the source. */
  statement_descriptor?: InputMaybe<Scalars['String']>;
  /** The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge. */
  status?: InputMaybe<Scalars['String']>;
  three_d_secure?: InputMaybe<Stripe_SourceTypeThreeDSecureInput>;
  /** The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used. */
  type?: InputMaybe<UpdateProfileResultType>;
  /** Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned. */
  usage?: InputMaybe<Scalars['String']>;
  wechat?: InputMaybe<Stripe_SourceTypeWechatInput>;
};

export type Stripe_SourceTypeAchCreditTransferInput = {
  account_number?: InputMaybe<Scalars['String']>;
  bank_name?: InputMaybe<Scalars['String']>;
  fingerprint?: InputMaybe<Scalars['String']>;
  refund_account_holder_name?: InputMaybe<Scalars['String']>;
  refund_account_holder_type?: InputMaybe<Scalars['String']>;
  refund_routing_number?: InputMaybe<Scalars['String']>;
  routing_number?: InputMaybe<Scalars['String']>;
  swift_code?: InputMaybe<Scalars['String']>;
};

export type Stripe_SourceTypeAchDebitInput = {
  bank_name?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  fingerprint?: InputMaybe<Scalars['String']>;
  last4?: InputMaybe<Scalars['String']>;
  routing_number?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Scalars['String']>;
};

export type Stripe_SourceTypeAcssDebitInput = {
  bank_address_city?: InputMaybe<Scalars['String']>;
  bank_address_line_1?: InputMaybe<Scalars['String']>;
  bank_address_line_2?: InputMaybe<Scalars['String']>;
  bank_address_postal_code?: InputMaybe<Scalars['String']>;
  bank_name?: InputMaybe<Scalars['String']>;
  category?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  fingerprint?: InputMaybe<Scalars['String']>;
  last4?: InputMaybe<Scalars['String']>;
  routing_number?: InputMaybe<Scalars['String']>;
};

export type Stripe_SourceTypeAlipayInput = {
  data_string?: InputMaybe<Scalars['String']>;
  native_url?: InputMaybe<Scalars['String']>;
  statement_descriptor?: InputMaybe<Scalars['String']>;
};

export type Stripe_SourceTypeAuBecsDebitInput = {
  bsb_number?: InputMaybe<Scalars['String']>;
  fingerprint?: InputMaybe<Scalars['String']>;
  last4?: InputMaybe<Scalars['String']>;
};

export type Stripe_SourceTypeBancontactInput = {
  bank_code?: InputMaybe<Scalars['String']>;
  bank_name?: InputMaybe<Scalars['String']>;
  bic?: InputMaybe<Scalars['String']>;
  iban_last4?: InputMaybe<Scalars['String']>;
  preferred_language?: InputMaybe<Scalars['String']>;
  statement_descriptor?: InputMaybe<Scalars['String']>;
};

export type Stripe_SourceTypeCardInput = {
  address_line1_check?: InputMaybe<Scalars['String']>;
  address_zip_check?: InputMaybe<Scalars['String']>;
  brand?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  cvc_check?: InputMaybe<Scalars['String']>;
  dynamic_last4?: InputMaybe<Scalars['String']>;
  exp_month?: InputMaybe<Scalars['Int']>;
  exp_year?: InputMaybe<Scalars['Int']>;
  fingerprint?: InputMaybe<Scalars['String']>;
  funding?: InputMaybe<Scalars['String']>;
  last4?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  three_d_secure?: InputMaybe<Scalars['String']>;
  tokenization_method?: InputMaybe<Scalars['String']>;
};

export type Stripe_SourceTypeCardPresentInput = {
  application_cryptogram?: InputMaybe<Scalars['String']>;
  application_preferred_name?: InputMaybe<Scalars['String']>;
  authorization_code?: InputMaybe<Scalars['String']>;
  authorization_response_code?: InputMaybe<Scalars['String']>;
  brand?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  cvm_type?: InputMaybe<Scalars['String']>;
  data_type?: InputMaybe<Scalars['String']>;
  dedicated_file_name?: InputMaybe<Scalars['String']>;
  emv_auth_data?: InputMaybe<Scalars['String']>;
  evidence_customer_signature?: InputMaybe<Scalars['String']>;
  evidence_transaction_certificate?: InputMaybe<Scalars['String']>;
  exp_month?: InputMaybe<Scalars['Int']>;
  exp_year?: InputMaybe<Scalars['Int']>;
  fingerprint?: InputMaybe<Scalars['String']>;
  funding?: InputMaybe<Scalars['String']>;
  last4?: InputMaybe<Scalars['String']>;
  pos_device_id?: InputMaybe<Scalars['String']>;
  pos_entry_mode?: InputMaybe<Scalars['String']>;
  read_method?: InputMaybe<Scalars['String']>;
  reader?: InputMaybe<Scalars['String']>;
  terminal_verification_results?: InputMaybe<Scalars['String']>;
  transaction_status_information?: InputMaybe<Scalars['String']>;
};

export type Stripe_SourceCodeVerificationFlowInput = {
  /** The number of attempts remaining to authenticate the source object with a verification code. */
  attempts_remaining?: InputMaybe<Scalars['Int']>;
  /** The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0). */
  status?: InputMaybe<Scalars['String']>;
};

export type Stripe_SourceTypeEpsInput = {
  reference?: InputMaybe<Scalars['String']>;
  statement_descriptor?: InputMaybe<Scalars['String']>;
};

export type Stripe_SourceTypeGiropayInput = {
  bank_code?: InputMaybe<Scalars['String']>;
  bank_name?: InputMaybe<Scalars['String']>;
  bic?: InputMaybe<Scalars['String']>;
  statement_descriptor?: InputMaybe<Scalars['String']>;
};

export type Stripe_SourceTypeIdealInput = {
  bank?: InputMaybe<Scalars['String']>;
  bic?: InputMaybe<Scalars['String']>;
  iban_last4?: InputMaybe<Scalars['String']>;
  statement_descriptor?: InputMaybe<Scalars['String']>;
};

export type Stripe_SourceTypeKlarnaInput = {
  background_image_url?: InputMaybe<Scalars['String']>;
  client_token?: InputMaybe<Scalars['String']>;
  first_name?: InputMaybe<Scalars['String']>;
  last_name?: InputMaybe<Scalars['String']>;
  locale?: InputMaybe<Scalars['String']>;
  logo_url?: InputMaybe<Scalars['String']>;
  page_title?: InputMaybe<Scalars['String']>;
  pay_later_asset_urls_descriptive?: InputMaybe<Scalars['String']>;
  pay_later_asset_urls_standard?: InputMaybe<Scalars['String']>;
  pay_later_name?: InputMaybe<Scalars['String']>;
  pay_later_redirect_url?: InputMaybe<Scalars['String']>;
  pay_now_asset_urls_descriptive?: InputMaybe<Scalars['String']>;
  pay_now_asset_urls_standard?: InputMaybe<Scalars['String']>;
  pay_now_name?: InputMaybe<Scalars['String']>;
  pay_now_redirect_url?: InputMaybe<Scalars['String']>;
  pay_over_time_asset_urls_descriptive?: InputMaybe<Scalars['String']>;
  pay_over_time_asset_urls_standard?: InputMaybe<Scalars['String']>;
  pay_over_time_name?: InputMaybe<Scalars['String']>;
  pay_over_time_redirect_url?: InputMaybe<Scalars['String']>;
  payment_method_categories?: InputMaybe<Scalars['String']>;
  purchase_country?: InputMaybe<Scalars['String']>;
  purchase_type?: InputMaybe<Scalars['String']>;
  redirect_url?: InputMaybe<Scalars['String']>;
  shipping_delay?: InputMaybe<Scalars['Int']>;
  shipping_first_name?: InputMaybe<Scalars['String']>;
  shipping_last_name?: InputMaybe<Scalars['String']>;
};

export type Stripe_SourceTypeMultibancoInput = {
  entity?: InputMaybe<Scalars['String']>;
  reference?: InputMaybe<Scalars['String']>;
  refund_account_holder_address_city?: InputMaybe<Scalars['String']>;
  refund_account_holder_address_country?: InputMaybe<Scalars['String']>;
  refund_account_holder_address_line1?: InputMaybe<Scalars['String']>;
  refund_account_holder_address_line2?: InputMaybe<Scalars['String']>;
  refund_account_holder_address_postal_code?: InputMaybe<Scalars['String']>;
  refund_account_holder_address_state?: InputMaybe<Scalars['String']>;
  refund_account_holder_name?: InputMaybe<Scalars['String']>;
  refund_iban?: InputMaybe<Scalars['String']>;
};

export type Stripe_SourceOwnerInput = {
  address?: InputMaybe<Stripe_AddressInput>;
  /** Owner's email address. */
  email?: InputMaybe<Scalars['String']>;
  /** Owner's full name. */
  name?: InputMaybe<Scalars['String']>;
  /** Owner's phone number (including extension). */
  phone?: InputMaybe<Scalars['String']>;
  verified_address?: InputMaybe<Stripe_AddressInput>;
  /** Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  verified_email?: InputMaybe<Scalars['String']>;
  /** Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  verified_name?: InputMaybe<Scalars['String']>;
  /** Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  verified_phone?: InputMaybe<Scalars['String']>;
};

export type Stripe_SourceTypeP24Input = {
  reference?: InputMaybe<Scalars['String']>;
};

export type Stripe_SourceReceiverFlowInput = {
  /** The address of the receiver source. This is the value that should be communicated to the customer to send their funds to. */
  address?: InputMaybe<Scalars['String']>;
  /** The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency. */
  amount_charged?: InputMaybe<Scalars['Int']>;
  /** The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency. */
  amount_received?: InputMaybe<Scalars['Int']>;
  /** The total amount that was returned to the customer. The amount returned is expressed in the source's currency. */
  amount_returned?: InputMaybe<Scalars['Int']>;
  /** Type of refund attribute method, one of `email`, `manual`, or `none`. */
  refund_attributes_method?: InputMaybe<Scalars['String']>;
  /** Type of refund attribute status, one of `missing`, `requested`, or `available`. */
  refund_attributes_status?: InputMaybe<Scalars['String']>;
};

export type Stripe_SourceRedirectFlowInput = {
  /** The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`. */
  failure_reason?: InputMaybe<Scalars['String']>;
  /** The URL you provide to redirect the customer to after they authenticated their payment. */
  return_url?: InputMaybe<Scalars['String']>;
  /** The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused). */
  status?: InputMaybe<Scalars['String']>;
  /** The URL provided to you to redirect a customer to as part of a `redirect` authentication flow. */
  url?: InputMaybe<Scalars['String']>;
};

export type Stripe_SourceTypeSepaDebitInput = {
  bank_code?: InputMaybe<Scalars['String']>;
  branch_code?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  fingerprint?: InputMaybe<Scalars['String']>;
  last4?: InputMaybe<Scalars['String']>;
  mandate_reference?: InputMaybe<Scalars['String']>;
  mandate_url?: InputMaybe<Scalars['String']>;
};

export type Stripe_SourceTypeSofortInput = {
  bank_code?: InputMaybe<Scalars['String']>;
  bank_name?: InputMaybe<Scalars['String']>;
  bic?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  iban_last4?: InputMaybe<Scalars['String']>;
  preferred_language?: InputMaybe<Scalars['String']>;
  statement_descriptor?: InputMaybe<Scalars['String']>;
};

export type Stripe_SourceOrderInput = {
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order. */
  amount?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  /** The email address of the customer placing the order. */
  email?: InputMaybe<Scalars['String']>;
  /** List of items constituting the order. */
  items?: InputMaybe<Array<InputMaybe<Stripe_SourceOrderItemInput>>>;
  shipping?: InputMaybe<Stripe_ShippingInput>;
};

export type Stripe_SourceOrderItemInput = {
  /** The amount (price) for this order item. */
  amount?: InputMaybe<Scalars['Int']>;
  /** This currency of this order item. Required when `amount` is present. */
  currency?: InputMaybe<Scalars['String']>;
  /** Human-readable description for this order item. */
  description?: InputMaybe<Scalars['String']>;
  /** The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU). */
  parent?: InputMaybe<Scalars['String']>;
  /** The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered. */
  quantity?: InputMaybe<Scalars['Int']>;
  /** The type of this order item. Must be `sku`, `tax`, or `shipping`. */
  type?: InputMaybe<Scalars['String']>;
};

export type Stripe_ShippingInput = {
  address?: InputMaybe<Stripe_AddressInput>;
  /** The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. */
  carrier?: InputMaybe<Scalars['String']>;
  /** Recipient name. */
  name?: InputMaybe<Scalars['String']>;
  /** Recipient phone (including extension). */
  phone?: InputMaybe<Scalars['String']>;
  /** The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
  tracking_number?: InputMaybe<Scalars['String']>;
};

export type Stripe_SourceTypeThreeDSecureInput = {
  address_line1_check?: InputMaybe<Scalars['String']>;
  address_zip_check?: InputMaybe<Scalars['String']>;
  authenticated?: InputMaybe<Scalars['Boolean']>;
  brand?: InputMaybe<Scalars['String']>;
  card?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  customer?: InputMaybe<Scalars['String']>;
  cvc_check?: InputMaybe<Scalars['String']>;
  dynamic_last4?: InputMaybe<Scalars['String']>;
  exp_month?: InputMaybe<Scalars['Int']>;
  exp_year?: InputMaybe<Scalars['Int']>;
  fingerprint?: InputMaybe<Scalars['String']>;
  funding?: InputMaybe<Scalars['String']>;
  last4?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  three_d_secure?: InputMaybe<Scalars['String']>;
  tokenization_method?: InputMaybe<Scalars['String']>;
};

export type Stripe_SourceTypeWechatInput = {
  prepay_id?: InputMaybe<Scalars['String']>;
  qr_code_url?: InputMaybe<Scalars['String']>;
  statement_descriptor?: InputMaybe<Scalars['String']>;
};

export type Stripe_DiscountInput = {
  /** The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode. */
  checkout_session?: InputMaybe<Scalars['String']>;
  coupon?: InputMaybe<Stripe_CouponInput>;
  customer?: InputMaybe<Scalars['String']>;
  /** If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null. */
  end?: InputMaybe<Scalars['Int']>;
  /** The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array. */
  id?: InputMaybe<Scalars['String']>;
  /** The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice. */
  invoice?: InputMaybe<Scalars['String']>;
  /** The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item. */
  invoice_item?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  promotion_code?: InputMaybe<PromotionCodeWrappedStringInputUnion>;
  /** Date that the coupon was applied. */
  start?: InputMaybe<Scalars['Int']>;
  /** The subscription that this coupon is applied to, if it is applied to a particular subscription. */
  subscription?: InputMaybe<Scalars['String']>;
};

export type Stripe_CouponInput = {
  /** Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer. */
  amount_off?: InputMaybe<Scalars['Int']>;
  applies_to?: InputMaybe<Stripe_CouponAppliesToInput>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off. */
  currency?: InputMaybe<Scalars['String']>;
  /** One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount. */
  duration?: InputMaybe<UpdateProfileResultDuration>;
  /** If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`. */
  duration_in_months?: InputMaybe<Scalars['Int']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid. */
  max_redemptions?: InputMaybe<Scalars['Int']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** Name of the coupon displayed to customers on for instance invoices or receipts. */
  name?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  /** Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a %s100 invoice %s50 instead. */
  percent_off?: InputMaybe<Scalars['Float']>;
  /** Date after which the coupon can no longer be redeemed. */
  redeem_by?: InputMaybe<Scalars['Int']>;
  /** Number of times this coupon has been applied to a customer. */
  times_redeemed?: InputMaybe<Scalars['Int']>;
  /** Taking account of the above properties, whether this coupon can still be applied to a customer. */
  valid?: InputMaybe<Scalars['Boolean']>;
};

export type Stripe_CouponAppliesToInput = {
  /** A list of product IDs this coupon applies to */
  products?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export enum UpdateProfileResultDuration {
  Forever = 'forever',
  Once = 'once',
  Repeating = 'repeating'
}

export type PromotionCodeWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  promotionCode?: InputMaybe<Stripe_PromotionCodeInput>;
};

export type Stripe_PromotionCodeInput = {
  /** Whether the promotion code is currently active. A promotion code is only active if the coupon is also valid. */
  active?: InputMaybe<Scalars['Boolean']>;
  /** The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer. */
  code?: InputMaybe<Scalars['String']>;
  coupon?: InputMaybe<Stripe_CouponInput>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  customer?: InputMaybe<CustomerDeletedCustomerWrappedStringInputUnion>;
  /** Date at which the promotion code can no longer be redeemed. */
  expires_at?: InputMaybe<Scalars['Int']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Maximum number of times this promotion code can be redeemed. */
  max_redemptions?: InputMaybe<Scalars['Int']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  restrictions?: InputMaybe<Stripe_PromotionCodesResourceRestrictionsInput>;
  /** Number of times this promotion code has been used. */
  times_redeemed?: InputMaybe<Scalars['Int']>;
};

export type CustomerDeletedCustomerWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  customer?: InputMaybe<Stripe_CustomerInput>;
  deletedCustomer?: InputMaybe<Stripe_DeletedCustomerInput>;
};

export type Stripe_DeletedCustomerInput = {
  /** Always true for a deleted object */
  deleted?: InputMaybe<Scalars['Boolean']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
};

export type Stripe_PromotionCodesResourceRestrictionsInput = {
  /** A Boolean indicating if the Promotion Code should only be redeemed for Customers without any successful payments or invoices */
  first_time_transaction?: InputMaybe<Scalars['Boolean']>;
  /** Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work). */
  minimum_amount?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO code](https://stripe.com/docs/currencies) for minimum_amount */
  minimum_amount_currency?: InputMaybe<Scalars['String']>;
};

export type Stripe_InvoiceSettingCustomerSettingInput = {
  /** Default custom fields to be displayed on invoices for this customer. */
  custom_fields?: InputMaybe<Array<InputMaybe<Stripe_InvoiceSettingCustomFieldInput>>>;
  default_payment_method?: InputMaybe<PaymentMethodWrappedStringInputUnion>;
  /** Default footer to be displayed on invoices for this customer. */
  footer?: InputMaybe<Scalars['String']>;
};

export type Stripe_InvoiceSettingCustomFieldInput = {
  /** The name of the custom field. */
  name?: InputMaybe<Scalars['String']>;
  /** The value of the custom field. */
  value?: InputMaybe<Scalars['String']>;
};

export type PaymentMethodWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  paymentMethod?: InputMaybe<Stripe_PaymentMethodInput>;
};

export type Stripe_PaymentMethodInput = {
  acss_debit?: InputMaybe<Stripe_PaymentMethodAcssDebitInput>;
  afterpay_clearpay?: InputMaybe<Stripe_PaymentMethodAfterpayClearpayInput>;
  alipay?: InputMaybe<Stripe_PaymentFlowsPrivatePaymentMethodsAlipayInput>;
  au_becs_debit?: InputMaybe<Stripe_PaymentMethodAuBecsDebitInput>;
  bacs_debit?: InputMaybe<Stripe_PaymentMethodBacsDebitInput>;
  bancontact?: InputMaybe<Stripe_PaymentMethodBancontactInput>;
  billing_details?: InputMaybe<Stripe_BillingDetailsInput>;
  boleto?: InputMaybe<Stripe_PaymentMethodBoletoInput>;
  card?: InputMaybe<Stripe_PaymentMethodCardInput>;
  card_present?: InputMaybe<Stripe_PaymentMethodCardPresentInput>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  customer?: InputMaybe<CustomerWrappedStringInputUnion>;
  customer_balance?: InputMaybe<Stripe_PaymentMethodCustomerBalanceInput>;
  eps?: InputMaybe<Stripe_PaymentMethodEpsInput>;
  fpx?: InputMaybe<Stripe_PaymentMethodFpxInput>;
  giropay?: InputMaybe<Stripe_PaymentMethodGiropayInput>;
  grabpay?: InputMaybe<Stripe_PaymentMethodGrabpayInput>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  ideal?: InputMaybe<Stripe_PaymentMethodIdealInput>;
  interac_present?: InputMaybe<Stripe_PaymentMethodInteracPresentInput>;
  klarna?: InputMaybe<Stripe_PaymentMethodKlarnaInput>;
  konbini?: InputMaybe<Stripe_PaymentMethodKonbiniInput>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  oxxo?: InputMaybe<Stripe_PaymentMethodOxxoInput>;
  p24?: InputMaybe<Stripe_PaymentMethodP24Input>;
  paynow?: InputMaybe<Stripe_PaymentMethodPaynowInput>;
  sepa_debit?: InputMaybe<Stripe_PaymentMethodSepaDebitInput>;
  sofort?: InputMaybe<Stripe_PaymentMethodSofortInput>;
  /** The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type. */
  type?: InputMaybe<UpdateProfileResultType>;
  us_bank_account?: InputMaybe<Stripe_PaymentMethodUsBankAccountInput>;
  wechat_pay?: InputMaybe<Stripe_PaymentMethodWechatPayInput>;
};

export type Stripe_PaymentMethodAcssDebitInput = {
  /** Name of the bank associated with the bank account. */
  bank_name?: InputMaybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: InputMaybe<Scalars['String']>;
  /** Institution number of the bank account. */
  institution_number?: InputMaybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: InputMaybe<Scalars['String']>;
  /** Transit number of the bank account. */
  transit_number?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodAfterpayClearpayInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentFlowsPrivatePaymentMethodsAlipayInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodAuBecsDebitInput = {
  /** Six-digit number identifying bank and branch associated with this bank account. */
  bsb_number?: InputMaybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: InputMaybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodBacsDebitInput = {
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: InputMaybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: InputMaybe<Scalars['String']>;
  /** Sort code of the bank account. (e.g., `10-20-30`) */
  sort_code?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodBancontactInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_BillingDetailsInput = {
  address?: InputMaybe<Stripe_AddressInput>;
  /** Email address. */
  email?: InputMaybe<Scalars['String']>;
  /** Full name. */
  name?: InputMaybe<Scalars['String']>;
  /** Billing phone number (including extension). */
  phone?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodBoletoInput = {
  /** Uniquely identifies the customer tax id (CNPJ or CPF) */
  tax_id?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodCardInput = {
  /** Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  brand?: InputMaybe<Scalars['String']>;
  checks?: InputMaybe<Stripe_PaymentMethodCardChecksInput>;
  /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
  country?: InputMaybe<Scalars['String']>;
  /** Two-digit number representing the card's expiration month. */
  exp_month?: InputMaybe<Scalars['Int']>;
  /** Four-digit number representing the card's expiration year. */
  exp_year?: InputMaybe<Scalars['Int']>;
  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   */
  fingerprint?: InputMaybe<Scalars['String']>;
  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: InputMaybe<Scalars['String']>;
  generated_from?: InputMaybe<Stripe_PaymentMethodCardGeneratedCardInput>;
  /** The last four digits of the card. */
  last4?: InputMaybe<Scalars['String']>;
  networks?: InputMaybe<Stripe_NetworksInput>;
  three_d_secure_usage?: InputMaybe<Stripe_ThreeDSecureUsageInput>;
  wallet?: InputMaybe<Stripe_PaymentMethodCardWalletInput>;
};

export type Stripe_PaymentMethodCardChecksInput = {
  /** If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  address_line1_check?: InputMaybe<Scalars['String']>;
  /** If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  address_postal_code_check?: InputMaybe<Scalars['String']>;
  /** If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  cvc_check?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodCardGeneratedCardInput = {
  /** The charge that created this object. */
  charge?: InputMaybe<Scalars['String']>;
  payment_method_details?: InputMaybe<Stripe_CardGeneratedFromPaymentMethodDetailsInput>;
  setup_attempt?: InputMaybe<SetupAttemptWrappedStringInputUnion>;
};

export type Stripe_CardGeneratedFromPaymentMethodDetailsInput = {
  card_present?: InputMaybe<Stripe_PaymentMethodDetailsCardPresentInput>;
  /** The type of payment method transaction-specific details from the transaction that generated this `card` payment method. Always `card_present`. */
  type?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsCardPresentInput = {
  /** The authorized amount */
  amount_authorized?: InputMaybe<Scalars['Int']>;
  /** Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  brand?: InputMaybe<Scalars['String']>;
  /** When using manual capture, a future timestamp after which the charge will be automatically refunded if uncaptured. */
  capture_before?: InputMaybe<Scalars['Int']>;
  /** The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay. */
  cardholder_name?: InputMaybe<Scalars['String']>;
  /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
  country?: InputMaybe<Scalars['String']>;
  /** Authorization response cryptogram. */
  emv_auth_data?: InputMaybe<Scalars['String']>;
  /** Two-digit number representing the card's expiration month. */
  exp_month?: InputMaybe<Scalars['Int']>;
  /** Four-digit number representing the card's expiration year. */
  exp_year?: InputMaybe<Scalars['Int']>;
  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   */
  fingerprint?: InputMaybe<Scalars['String']>;
  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: InputMaybe<Scalars['String']>;
  /** ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod. */
  generated_card?: InputMaybe<Scalars['String']>;
  /** Whether this [PaymentIntent](https://stripe.com/docs/api/payment_intents) is eligible for incremental authorizations. Request support using [request_incremental_authorization_support](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-payment_method_options-card_present-request_incremental_authorization_support). */
  incremental_authorization_supported?: InputMaybe<Scalars['Boolean']>;
  /** The last four digits of the card. */
  last4?: InputMaybe<Scalars['String']>;
  /** Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  network?: InputMaybe<Scalars['String']>;
  /** Defines whether the authorized amount can be over-captured or not */
  overcapture_supported?: InputMaybe<Scalars['Boolean']>;
  /** How card details were read in this transaction. */
  read_method?: InputMaybe<UpdateProfileResultReadMethod>;
  receipt?: InputMaybe<Stripe_PaymentMethodDetailsCardPresentReceiptInput>;
};

export enum UpdateProfileResultReadMethod {
  ContactEmv = 'contact_emv',
  ContactlessEmv = 'contactless_emv',
  ContactlessMagstripeMode = 'contactless_magstripe_mode',
  MagneticStripeFallback = 'magnetic_stripe_fallback',
  MagneticStripeTrack2 = 'magnetic_stripe_track2'
}

export type Stripe_PaymentMethodDetailsCardPresentReceiptInput = {
  /** The type of account being debited or credited */
  account_type?: InputMaybe<UpdateProfileResultAccountType>;
  /** EMV tag 9F26, cryptogram generated by the integrated circuit chip. */
  application_cryptogram?: InputMaybe<Scalars['String']>;
  /** Mnenomic of the Application Identifier. */
  application_preferred_name?: InputMaybe<Scalars['String']>;
  /** Identifier for this transaction. */
  authorization_code?: InputMaybe<Scalars['String']>;
  /** EMV tag 8A. A code returned by the card issuer. */
  authorization_response_code?: InputMaybe<Scalars['String']>;
  /** How the cardholder verified ownership of the card. */
  cardholder_verification_method?: InputMaybe<Scalars['String']>;
  /** EMV tag 84. Similar to the application identifier stored on the integrated circuit chip. */
  dedicated_file_name?: InputMaybe<Scalars['String']>;
  /** The outcome of a series of EMV functions performed by the card reader. */
  terminal_verification_results?: InputMaybe<Scalars['String']>;
  /** An indication of various EMV functions performed during the transaction. */
  transaction_status_information?: InputMaybe<Scalars['String']>;
};

export enum UpdateProfileResultAccountType {
  Checking = 'checking',
  Credit = 'credit',
  Prepaid = 'prepaid',
  Unknown = 'unknown'
}

export type SetupAttemptWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  setupAttempt?: InputMaybe<Stripe_SetupAttemptInput>;
};

export type Stripe_SetupAttemptInput = {
  application?: InputMaybe<ApplicationWrappedStringInputUnion>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  customer?: InputMaybe<CustomerDeletedCustomerWrappedStringInputUnion>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  on_behalf_of?: InputMaybe<AccountWrappedStringInputUnion>;
  payment_method?: InputMaybe<PaymentMethodWrappedStringInputUnion>;
  payment_method_details?: InputMaybe<Stripe_SetupAttemptPaymentMethodDetailsInput>;
  setup_error?: InputMaybe<Stripe_ApiErrorsInput>;
  setup_intent?: InputMaybe<SetupIntentWrappedStringInputUnion>;
  /** Status of this SetupAttempt, one of `requires_confirmation`, `requires_action`, `processing`, `succeeded`, `failed`, or `abandoned`. */
  status?: InputMaybe<Scalars['String']>;
  /** The value of [usage](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-usage) on the SetupIntent at the time of this confirmation, one of `off_session` or `on_session`. */
  usage?: InputMaybe<Scalars['String']>;
};

export type ApplicationWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  application?: InputMaybe<Stripe_ApplicationInput>;
};

export type Stripe_ApplicationInput = {
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** The name of the application. */
  name?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
};

export type Stripe_SetupAttemptPaymentMethodDetailsInput = {
  acss_debit?: InputMaybe<Stripe_SetupAttemptPaymentMethodDetailsAcssDebitInput>;
  au_becs_debit?: InputMaybe<Stripe_SetupAttemptPaymentMethodDetailsAuBecsDebitInput>;
  bacs_debit?: InputMaybe<Stripe_SetupAttemptPaymentMethodDetailsBacsDebitInput>;
  bancontact?: InputMaybe<Stripe_SetupAttemptPaymentMethodDetailsBancontactInput>;
  boleto?: InputMaybe<Stripe_SetupAttemptPaymentMethodDetailsBoletoInput>;
  card?: InputMaybe<Stripe_SetupAttemptPaymentMethodDetailsCardInput>;
  card_present?: InputMaybe<Stripe_SetupAttemptPaymentMethodDetailsCardPresentInput>;
  ideal?: InputMaybe<Stripe_SetupAttemptPaymentMethodDetailsIdealInput>;
  sepa_debit?: InputMaybe<Stripe_SetupAttemptPaymentMethodDetailsSepaDebitInput>;
  sofort?: InputMaybe<Stripe_SetupAttemptPaymentMethodDetailsSofortInput>;
  /** The type of the payment method used in the SetupIntent (e.g., `card`). An additional hash is included on `payment_method_details` with a name matching this value. It contains confirmation-specific information for the payment method. */
  type?: InputMaybe<Scalars['String']>;
  us_bank_account?: InputMaybe<Stripe_SetupAttemptPaymentMethodDetailsUsBankAccountInput>;
};

export type Stripe_SetupAttemptPaymentMethodDetailsAcssDebitInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_SetupAttemptPaymentMethodDetailsAuBecsDebitInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_SetupAttemptPaymentMethodDetailsBacsDebitInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_SetupAttemptPaymentMethodDetailsBancontactInput = {
  /** Bank code of bank associated with the bank account. */
  bank_code?: InputMaybe<Scalars['String']>;
  /** Name of the bank associated with the bank account. */
  bank_name?: InputMaybe<Scalars['String']>;
  /** Bank Identifier Code of the bank associated with the bank account. */
  bic?: InputMaybe<Scalars['String']>;
  generated_sepa_debit?: InputMaybe<PaymentMethodWrappedStringInputUnion>;
  generated_sepa_debit_mandate?: InputMaybe<MandateWrappedStringInputUnion>;
  /** Last four characters of the IBAN. */
  iban_last4?: InputMaybe<Scalars['String']>;
  /**
   * Preferred language of the Bancontact authorization page that the customer is redirected to.
   * Can be one of `en`, `de`, `fr`, or `nl`
   */
  preferred_language?: InputMaybe<UpdateProfileResultPreferredLanguage>;
  /**
   * Owner's verified full name. Values are verified or provided by Bancontact directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: InputMaybe<Scalars['String']>;
};

export type MandateWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  mandate?: InputMaybe<Stripe_MandateInput>;
};

export type Stripe_MandateInput = {
  customer_acceptance?: InputMaybe<Stripe_CustomerAcceptanceInput>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  multi_use?: InputMaybe<Stripe_MandateMultiUseInput>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  payment_method?: InputMaybe<PaymentMethodWrappedStringInputUnion>;
  payment_method_details?: InputMaybe<Stripe_MandatePaymentMethodDetailsInput>;
  single_use?: InputMaybe<Stripe_MandateSingleUseInput>;
  /** The status of the mandate, which indicates whether it can be used to initiate a payment. */
  status?: InputMaybe<UpdateProfileResultStatus>;
  /** The type of the mandate. */
  type?: InputMaybe<UpdateProfileResultType>;
};

export type Stripe_CustomerAcceptanceInput = {
  /** The time at which the customer accepted the Mandate. */
  accepted_at?: InputMaybe<Scalars['Int']>;
  offline?: InputMaybe<Stripe_OfflineAcceptanceInput>;
  online?: InputMaybe<Stripe_OnlineAcceptanceInput>;
  /** The type of customer acceptance information included with the Mandate. One of `online` or `offline`. */
  type?: InputMaybe<UpdateProfileResultType>;
};

export type Stripe_OfflineAcceptanceInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_OnlineAcceptanceInput = {
  /** The IP address from which the Mandate was accepted by the customer. */
  ip_address?: InputMaybe<Scalars['String']>;
  /** The user agent of the browser from which the Mandate was accepted by the customer. */
  user_agent?: InputMaybe<Scalars['String']>;
};

export type Stripe_MandateMultiUseInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_MandatePaymentMethodDetailsInput = {
  acss_debit?: InputMaybe<Stripe_MandateAcssDebitInput>;
  au_becs_debit?: InputMaybe<Stripe_MandateAuBecsDebitInput>;
  bacs_debit?: InputMaybe<Stripe_MandateBacsDebitInput>;
  card?: InputMaybe<Stripe_CardMandatePaymentMethodDetailsInput>;
  sepa_debit?: InputMaybe<Stripe_MandateSepaDebitInput>;
  /** The type of the payment method associated with this mandate. An additional hash is included on `payment_method_details` with a name matching this value. It contains mandate information specific to the payment method. */
  type?: InputMaybe<Scalars['String']>;
  us_bank_account?: InputMaybe<Stripe_MandateUsBankAccountInput>;
};

export type Stripe_MandateAcssDebitInput = {
  /** List of Stripe products where this mandate can be selected automatically. */
  default_for?: InputMaybe<Array<InputMaybe<UpdateProfileResultDefaultFor>>>;
  /** Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
  interval_description?: InputMaybe<Scalars['String']>;
  /** Payment schedule for the mandate. */
  payment_schedule?: InputMaybe<UpdateProfileResultPaymentSchedule>;
  /** Transaction type of the mandate. */
  transaction_type?: InputMaybe<UpdateProfileResultTransactionType>;
};

export enum UpdateProfileResultDefaultFor {
  Invoice = 'invoice',
  Subscription = 'subscription'
}

export enum UpdateProfileResultPaymentSchedule {
  Combined = 'combined',
  Interval = 'interval',
  Sporadic = 'sporadic'
}

export enum UpdateProfileResultTransactionType {
  Business = 'business',
  Personal = 'personal'
}

export type Stripe_MandateAuBecsDebitInput = {
  /** The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively. */
  url?: InputMaybe<Scalars['String']>;
};

export type Stripe_MandateBacsDebitInput = {
  /** The status of the mandate on the Bacs network. Can be one of `pending`, `revoked`, `refused`, or `accepted`. */
  network_status?: InputMaybe<UpdateProfileResultNetworkStatus>;
  /** The unique reference identifying the mandate on the Bacs network. */
  reference?: InputMaybe<Scalars['String']>;
  /** The URL that will contain the mandate that the customer has signed. */
  url?: InputMaybe<Scalars['String']>;
};

export enum UpdateProfileResultNetworkStatus {
  Accepted = 'accepted',
  Pending = 'pending',
  Refused = 'refused',
  Revoked = 'revoked'
}

export type Stripe_CardMandatePaymentMethodDetailsInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_MandateSepaDebitInput = {
  /** The unique reference of the mandate. */
  reference?: InputMaybe<Scalars['String']>;
  /** The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively. */
  url?: InputMaybe<Scalars['String']>;
};

export type Stripe_MandateUsBankAccountInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_MandateSingleUseInput = {
  /** On a single use mandate, the amount of the payment. */
  amount?: InputMaybe<Scalars['Int']>;
  /** On a single use mandate, the currency of the payment. */
  currency?: InputMaybe<Scalars['String']>;
};

export enum UpdateProfileResultStatus {
  Deleted = 'deleted',
  Draft = 'draft',
  Open = 'open',
  Paid = 'paid',
  Uncollectible = 'uncollectible',
  Void = 'void'
}

export enum UpdateProfileResultPreferredLanguage {
  De = 'de',
  En = 'en',
  Fr = 'fr',
  Nl = 'nl'
}

export type Stripe_SetupAttemptPaymentMethodDetailsBoletoInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_SetupAttemptPaymentMethodDetailsCardInput = {
  three_d_secure?: InputMaybe<Stripe_ThreeDSecureDetailsInput>;
};

export type Stripe_ThreeDSecureDetailsInput = {
  /**
   * For authenticated transactions: how the customer was authenticated by
   * the issuing bank.
   */
  authentication_flow?: InputMaybe<UpdateProfileResultAuthenticationFlow>;
  /** Indicates the outcome of 3D Secure authentication. */
  result?: InputMaybe<UpdateProfileResultResult>;
  /**
   * Additional information about why 3D Secure succeeded or failed based
   * on the `result`.
   */
  result_reason?: InputMaybe<UpdateProfileResultResultReason>;
  /** The version of 3D Secure that was used. */
  version?: InputMaybe<UpdateProfileResultVersion>;
};

export enum UpdateProfileResultAuthenticationFlow {
  Challenge = 'challenge',
  Frictionless = 'frictionless'
}

export enum UpdateProfileResultResult {
  AttemptAcknowledged = 'attempt_acknowledged',
  Authenticated = 'authenticated',
  Failed = 'failed',
  NotSupported = 'not_supported',
  ProcessingError = 'processing_error'
}

export enum UpdateProfileResultResultReason {
  Abandoned = 'abandoned',
  Bypassed = 'bypassed',
  Canceled = 'canceled',
  CardNotEnrolled = 'card_not_enrolled',
  NetworkNotSupported = 'network_not_supported',
  ProtocolError = 'protocol_error',
  Rejected = 'rejected'
}

export enum UpdateProfileResultVersion {
  Onedot0Dot2 = 'ONEDOT0DOT2',
  Twodot1Dot0 = 'TWODOT1DOT0',
  Twodot2Dot0 = 'TWODOT2DOT0'
}

export type Stripe_SetupAttemptPaymentMethodDetailsCardPresentInput = {
  generated_card?: InputMaybe<PaymentMethodWrappedStringInputUnion>;
};

export type Stripe_SetupAttemptPaymentMethodDetailsIdealInput = {
  /** The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`. */
  bank?: InputMaybe<UpdateProfileResultBank>;
  /** The Bank Identifier Code of the customer's bank. */
  bic?: InputMaybe<UpdateProfileResultBic>;
  generated_sepa_debit?: InputMaybe<PaymentMethodWrappedStringInputUnion>;
  generated_sepa_debit_mandate?: InputMaybe<MandateWrappedStringInputUnion>;
  /** Last four characters of the IBAN. */
  iban_last4?: InputMaybe<Scalars['String']>;
  /**
   * Owner's verified full name. Values are verified or provided by iDEAL directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: InputMaybe<Scalars['String']>;
};

export enum UpdateProfileResultBank {
  AbnAmro = 'abn_amro',
  AsnBank = 'asn_bank',
  Bunq = 'bunq',
  Handelsbanken = 'handelsbanken',
  Ing = 'ing',
  Knab = 'knab',
  Moneyou = 'moneyou',
  Rabobank = 'rabobank',
  Regiobank = 'regiobank',
  Revolut = 'revolut',
  SnsBank = 'sns_bank',
  TriodosBank = 'triodos_bank',
  VanLanschot = 'van_lanschot'
}

export enum UpdateProfileResultBic {
  Abnanl2A = 'ABNANL2A',
  Asnbnl21 = 'ASNBNL21',
  Bunqnl2A = 'BUNQNL2A',
  Fvlbnl22 = 'FVLBNL22',
  Handnl2A = 'HANDNL2A',
  Ingbnl2A = 'INGBNL2A',
  Knabnl2H = 'KNABNL2H',
  Moyonl21 = 'MOYONL21',
  Rabonl2U = 'RABONL2U',
  Rbrbnl21 = 'RBRBNL21',
  Revolt21 = 'REVOLT21',
  Snsbnl2A = 'SNSBNL2A',
  Trionl2U = 'TRIONL2U'
}

export type Stripe_SetupAttemptPaymentMethodDetailsSepaDebitInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_SetupAttemptPaymentMethodDetailsSofortInput = {
  /** Bank code of bank associated with the bank account. */
  bank_code?: InputMaybe<Scalars['String']>;
  /** Name of the bank associated with the bank account. */
  bank_name?: InputMaybe<Scalars['String']>;
  /** Bank Identifier Code of the bank associated with the bank account. */
  bic?: InputMaybe<Scalars['String']>;
  generated_sepa_debit?: InputMaybe<PaymentMethodWrappedStringInputUnion>;
  generated_sepa_debit_mandate?: InputMaybe<MandateWrappedStringInputUnion>;
  /** Last four characters of the IBAN. */
  iban_last4?: InputMaybe<Scalars['String']>;
  /**
   * Preferred language of the Sofort authorization page that the customer is redirected to.
   * Can be one of `en`, `de`, `fr`, or `nl`
   */
  preferred_language?: InputMaybe<UpdateProfileResultPreferredLanguage>;
  /**
   * Owner's verified full name. Values are verified or provided by Sofort directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: InputMaybe<Scalars['String']>;
};

export type Stripe_SetupAttemptPaymentMethodDetailsUsBankAccountInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_ApiErrorsInput = {
  /** For card errors, the ID of the failed charge. */
  charge?: InputMaybe<Scalars['String']>;
  /** For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported. */
  code?: InputMaybe<Scalars['String']>;
  /** For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one. */
  decline_code?: InputMaybe<Scalars['String']>;
  /** A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported. */
  doc_url?: InputMaybe<Scalars['String']>;
  /** A human-readable message providing more details about the error. For card errors, these messages can be shown to your users. */
  message?: InputMaybe<Scalars['String']>;
  /** If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field. */
  param?: InputMaybe<Scalars['String']>;
  payment_intent?: InputMaybe<Stripe_PaymentIntentInput>;
  payment_method?: InputMaybe<Stripe_PaymentMethodInput>;
  /** If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors. */
  payment_method_type?: InputMaybe<Scalars['String']>;
  setup_intent?: InputMaybe<Stripe_SetupIntentInput>;
  source?: InputMaybe<BankAccountCardSourceInputUnion>;
  /** The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error` */
  type?: InputMaybe<UpdateProfileResultType>;
};

export type Stripe_PaymentIntentInput = {
  /** Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
  amount?: InputMaybe<Scalars['Int']>;
  /** Amount that can be captured from this PaymentIntent. */
  amount_capturable?: InputMaybe<Scalars['Int']>;
  amount_details?: InputMaybe<Stripe_PaymentFlowsAmountDetailsInput>;
  /** Amount that was collected by this PaymentIntent. */
  amount_received?: InputMaybe<Scalars['Int']>;
  application?: InputMaybe<ApplicationWrappedStringInputUnion>;
  /** The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
  application_fee_amount?: InputMaybe<Scalars['Int']>;
  automatic_payment_methods?: InputMaybe<Stripe_PaymentFlowsAutomaticPaymentMethodsPaymentIntentInput>;
  /** Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch. */
  canceled_at?: InputMaybe<Scalars['Int']>;
  /** Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`). */
  cancellation_reason?: InputMaybe<UpdateProfileResultCancellationReason>;
  /** Controls when the funds will be captured from the customer's account. */
  capture_method?: InputMaybe<UpdateProfileResultCaptureMethod>;
  /** Charges that were created by this PaymentIntent, if any. */
  charges?: InputMaybe<UpdateProfilePropertiesPropertiesOrdersItemsPropertiesLastFinalizationErrorPropertiesPaymentIntentPropertiesChargesPropertyInput>;
  /**
   * The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.
   *
   * The client secret can be used to complete a payment from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
   *
   * Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?ui=elements) and learn about how `client_secret` should be handled.
   */
  client_secret?: InputMaybe<Scalars['String']>;
  confirmation_method?: InputMaybe<UpdateProfileResultConfirmationMethod>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  customer?: InputMaybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  invoice?: InputMaybe<InvoiceWrappedStringInputUnion>;
  last_payment_error?: InputMaybe<Stripe_ApiErrorsInput>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. For more information, see the [documentation](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata). */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  next_action?: InputMaybe<Stripe_PaymentIntentNextActionInput>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  on_behalf_of?: InputMaybe<AccountWrappedStringInputUnion>;
  payment_method?: InputMaybe<PaymentMethodWrappedStringInputUnion>;
  payment_method_options?: InputMaybe<Stripe_PaymentIntentPaymentMethodOptionsInput>;
  /** The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. */
  payment_method_types?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  processing?: InputMaybe<Stripe_PaymentIntentProcessingInput>;
  /** Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails). */
  receipt_email?: InputMaybe<Scalars['String']>;
  review?: InputMaybe<ReviewWrappedStringInputUnion>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
  shipping?: InputMaybe<Stripe_ShippingInput>;
  /** For non-card charges, you can use this value as the complete description that appears on your customersâ€™ statements. Must contain at least one letter, maximum 22 characters. */
  statement_descriptor?: InputMaybe<Scalars['String']>;
  /** Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor thatâ€™s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
  statement_descriptor_suffix?: InputMaybe<Scalars['String']>;
  /** Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses). */
  status?: InputMaybe<UpdateProfileResultStatus>;
  transfer_data?: InputMaybe<Stripe_TransferDataInput>;
  /** A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
  transfer_group?: InputMaybe<Scalars['String']>;
  invoiceItems?: InputMaybe<Array<InputMaybe<Stripe_InvoiceitemInput>>>;
  /** The Stripe checkout session associated with this payment. */
  sessionItems?: InputMaybe<Array<InputMaybe<Stripe_ItemInput>>>;
  _shapeId?: InputMaybe<Scalars['String']>;
  _id?: InputMaybe<Scalars['ID']>;
};

export type Stripe_PaymentFlowsAmountDetailsInput = {
  tip?: InputMaybe<Stripe_PaymentFlowsAmountDetailsResourceTipInput>;
};

export type Stripe_PaymentFlowsAmountDetailsResourceTipInput = {
  /** Portion of the amount that corresponds to a tip. */
  amount?: InputMaybe<Scalars['Int']>;
};

export type Stripe_PaymentFlowsAutomaticPaymentMethodsPaymentIntentInput = {
  /** Automatically calculates compatible payment methods */
  enabled?: InputMaybe<Scalars['Boolean']>;
};

export enum UpdateProfileResultCancellationReason {
  Abandoned = 'abandoned',
  Automatic = 'automatic',
  Duplicate = 'duplicate',
  FailedInvoice = 'failed_invoice',
  Fraudulent = 'fraudulent',
  RequestedByCustomer = 'requested_by_customer',
  VoidInvoice = 'void_invoice'
}

export enum UpdateProfileResultCaptureMethod {
  Automatic = 'automatic',
  Manual = 'manual'
}

/** Charges that were created by this PaymentIntent, if any. */
export type UpdateProfilePropertiesPropertiesOrdersItemsPropertiesLastFinalizationErrorPropertiesPaymentIntentPropertiesChargesPropertyInput = {
  /** This list only contains the latest charge, even if there were previously multiple unsuccessful charges. To view all previous charges for a PaymentIntent, you can filter the charges list using the `payment_intent` [parameter](https://stripe.com/docs/api/charges/list#list_charges-payment_intent). */
  data: Array<Stripe_ChargeInput>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: UpdateProfileResultObject;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Stripe_ChargeInput = {
  /** Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
  amount?: InputMaybe<Scalars['Int']>;
  /** Amount in %s captured (can be less than the amount attribute on the charge if a partial capture was made). */
  amount_captured?: InputMaybe<Scalars['Int']>;
  /** Amount in %s refunded (can be less than the amount attribute on the charge if a partial refund was issued). */
  amount_refunded?: InputMaybe<Scalars['Int']>;
  application?: InputMaybe<ApplicationWrappedStringInputUnion>;
  application_fee?: InputMaybe<ApplicationFeeWrappedStringInputUnion>;
  /** The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details. */
  application_fee_amount?: InputMaybe<Scalars['Int']>;
  balance_transaction?: InputMaybe<BalanceTransactionWrappedStringInputUnion>;
  billing_details?: InputMaybe<Stripe_BillingDetailsInput>;
  /** The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined. */
  calculated_statement_descriptor?: InputMaybe<Scalars['String']>;
  /** If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured. */
  captured?: InputMaybe<Scalars['Boolean']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  customer?: InputMaybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: InputMaybe<Scalars['String']>;
  /** Whether the charge has been disputed. */
  disputed?: InputMaybe<Scalars['Boolean']>;
  failure_balance_transaction?: InputMaybe<BalanceTransactionWrappedStringInputUnion>;
  /** Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes). */
  failure_code?: InputMaybe<Scalars['String']>;
  /** Message to user further explaining reason for charge failure if available. */
  failure_message?: InputMaybe<Scalars['String']>;
  fraud_details?: InputMaybe<Stripe_ChargeFraudDetailsInput>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  invoice?: InputMaybe<InvoiceWrappedStringInputUnion>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  on_behalf_of?: InputMaybe<AccountWrappedStringInputUnion>;
  order?: InputMaybe<OrderWrappedStringInputUnion>;
  outcome?: InputMaybe<Stripe_ChargeOutcomeInput>;
  /** `true` if the charge succeeded, or was successfully authorized for later capture. */
  paid?: InputMaybe<Scalars['Boolean']>;
  payment_intent?: InputMaybe<PaymentIntentWrappedStringInputUnion>;
  /** ID of the payment method used in this charge. */
  payment_method?: InputMaybe<Scalars['String']>;
  payment_method_details?: InputMaybe<Stripe_PaymentMethodDetailsInput>;
  /** This is the email address that the receipt for this charge was sent to. */
  receipt_email?: InputMaybe<Scalars['String']>;
  /** This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent. */
  receipt_number?: InputMaybe<Scalars['String']>;
  /** This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt. */
  receipt_url?: InputMaybe<Scalars['String']>;
  /** Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false. */
  refunded?: InputMaybe<Scalars['Boolean']>;
  /** A list of refunds that have been applied to the charge. */
  refunds?: InputMaybe<UpdateProfilePropertiesPropertiesOrdersItemsPropertiesLastFinalizationErrorPropertiesPaymentIntentPropertiesChargesPropertiesDataItemsPropertiesRefundsPropertyInput>;
  review?: InputMaybe<ReviewWrappedStringInputUnion>;
  shipping?: InputMaybe<Stripe_ShippingInput>;
  source_transfer?: InputMaybe<TransferWrappedStringInputUnion>;
  /** For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customersâ€™ statements. Must contain at least one letter, maximum 22 characters. */
  statement_descriptor?: InputMaybe<Scalars['String']>;
  /** Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor thatâ€™s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
  statement_descriptor_suffix?: InputMaybe<Scalars['String']>;
  /** The status of the payment is either `succeeded`, `pending`, or `failed`. */
  status?: InputMaybe<UpdateProfileResultStatus>;
  transfer?: InputMaybe<TransferWrappedStringInputUnion>;
  transfer_data?: InputMaybe<Stripe_ChargeTransferDataInput>;
  /** A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
  transfer_group?: InputMaybe<Scalars['String']>;
};

export type ApplicationFeeWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  applicationFee?: InputMaybe<Stripe_ApplicationFeeInput>;
};

export type Stripe_ApplicationFeeInput = {
  account?: InputMaybe<AccountWrappedStringInputUnion>;
  /** Amount earned, in %s. */
  amount?: InputMaybe<Scalars['Int']>;
  /** Amount in %s refunded (can be less than the amount attribute on the fee if a partial refund was issued) */
  amount_refunded?: InputMaybe<Scalars['Int']>;
  application?: InputMaybe<ApplicationWrappedStringInputUnion>;
  balance_transaction?: InputMaybe<BalanceTransactionWrappedStringInputUnion>;
  charge?: InputMaybe<ChargeWrappedStringInputUnion>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  originating_transaction?: InputMaybe<ChargeWrappedStringInputUnion>;
  /** Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false. */
  refunded?: InputMaybe<Scalars['Boolean']>;
  /** A list of refunds that have been applied to the fee. */
  refunds?: InputMaybe<PropertiesApplicationFeePropertiesRefundsPropertyInput>;
};

export type BalanceTransactionWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  balanceTransaction?: InputMaybe<Stripe_BalanceTransactionInput>;
};

export type Stripe_BalanceTransactionInput = {
  /** Gross amount of the transaction, in %s. */
  amount?: InputMaybe<Scalars['Int']>;
  /** The date the transaction's net funds will become available in the Stripe balance. */
  available_on?: InputMaybe<Scalars['Int']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: InputMaybe<Scalars['String']>;
  /** The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the `amount` in currency A, times `exchange_rate`, would be the `amount` in currency B. For example, suppose you charged a customer 10.00 EUR. Then the PaymentIntent's `amount` would be `1000` and `currency` would be `eur`. Suppose this was converted into 12.34 USD in your Stripe account. Then the BalanceTransaction's `amount` would be `1234`, `currency` would be `usd`, and `exchange_rate` would be `1.234`. */
  exchange_rate?: InputMaybe<Scalars['Float']>;
  /** Fees (in %s) paid for this transaction. */
  fee?: InputMaybe<Scalars['Int']>;
  /** Detailed breakdown of fees (in %s) paid for this transaction. */
  fee_details?: InputMaybe<Array<InputMaybe<Stripe_FeeInput>>>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Net amount of the transaction, in %s. */
  net?: InputMaybe<Scalars['Int']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  /** [Learn more](https://stripe.com/docs/reports/reporting-categories) about how reporting categories can help you understand balance transactions from an accounting perspective. */
  reporting_category?: InputMaybe<Scalars['String']>;
  source?: InputMaybe<ApplicationFeeChargeConnectCollectionTransferDisputeFeeRefundIssuingAuthorizationIssuingDisputeIssuingTransactionPayoutPlatformTaxFeeRefundReserveTransactionTaxDeductedAtSourceTopupTransferTransferReversalWrappedStringInputUnion>;
  /** If the transaction's net funds are available in the Stripe balance yet. Either `available` or `pending`. */
  status?: InputMaybe<Scalars['String']>;
  /** Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. [Learn more](https://stripe.com/docs/reports/balance-transaction-types) about balance transaction types and what they represent. If you are looking to classify transactions for accounting purposes, you might want to consider `reporting_category` instead. */
  type?: InputMaybe<UpdateProfileResultType>;
};

export type Stripe_FeeInput = {
  /** Amount of the fee, in cents. */
  amount?: InputMaybe<Scalars['Int']>;
  /** ID of the Connect application that earned the fee. */
  application?: InputMaybe<Scalars['String']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: InputMaybe<Scalars['String']>;
  /** Type of the fee, one of: `application_fee`, `stripe_fee` or `tax`. */
  type?: InputMaybe<Scalars['String']>;
};

export type ApplicationFeeChargeConnectCollectionTransferDisputeFeeRefundIssuingAuthorizationIssuingDisputeIssuingTransactionPayoutPlatformTaxFeeRefundReserveTransactionTaxDeductedAtSourceTopupTransferTransferReversalWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  applicationFee?: InputMaybe<Stripe_ApplicationFeeInput>;
  charge?: InputMaybe<Stripe_ChargeInput>;
  connectCollectionTransfer?: InputMaybe<Stripe_ConnectCollectionTransferInput>;
  dispute?: InputMaybe<Stripe_DisputeInput>;
  feeRefund?: InputMaybe<Stripe_FeeRefundInput>;
  issuingAuthorization?: InputMaybe<Stripe_IssuingAuthorizationInput>;
  issuingDispute?: InputMaybe<Stripe_IssuingDisputeInput>;
  issuingTransaction?: InputMaybe<Stripe_IssuingTransactionInput>;
  payout?: InputMaybe<Stripe_PayoutInput>;
  platformTaxFee?: InputMaybe<Stripe_PlatformTaxFeeInput>;
  refund?: InputMaybe<Stripe_RefundInput>;
  reserveTransaction?: InputMaybe<Stripe_ReserveTransactionInput>;
  taxDeductedAtSource?: InputMaybe<Stripe_TaxDeductedAtSourceInput>;
  topup?: InputMaybe<Stripe_TopupInput>;
  transfer?: InputMaybe<Stripe_TransferInput>;
  transferReversal?: InputMaybe<Stripe_TransferReversalInput>;
};

export type Stripe_ConnectCollectionTransferInput = {
  /** Amount transferred, in %s. */
  amount?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  destination?: InputMaybe<AccountWrappedStringInputUnion>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
};

export type Stripe_DisputeInput = {
  /** Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed). */
  amount?: InputMaybe<Scalars['Int']>;
  /** List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute. */
  balance_transactions?: InputMaybe<Array<InputMaybe<Stripe_BalanceTransactionInput>>>;
  charge?: InputMaybe<ChargeWrappedStringInputUnion>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  evidence?: InputMaybe<Stripe_DisputeEvidenceInput>;
  evidence_details?: InputMaybe<Stripe_DisputeEvidenceDetailsInput>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute. */
  is_charge_refundable?: InputMaybe<Scalars['Boolean']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  payment_intent?: InputMaybe<PaymentIntentWrappedStringInputUnion>;
  /** Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories). */
  reason?: InputMaybe<Scalars['String']>;
  /** Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `charge_refunded`, `won`, or `lost`. */
  status?: InputMaybe<UpdateProfileResultStatus>;
};

export type ChargeWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  charge?: InputMaybe<Stripe_ChargeInput>;
};

export type Stripe_DisputeEvidenceInput = {
  /** Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity. */
  access_activity_log?: InputMaybe<Scalars['String']>;
  /** The billing address provided by the customer. */
  billing_address?: InputMaybe<Scalars['String']>;
  cancellation_policy?: InputMaybe<FileWrappedStringInputUnion>;
  /** An explanation of how and when the customer was shown your refund policy prior to purchase. */
  cancellation_policy_disclosure?: InputMaybe<Scalars['String']>;
  /** A justification for why the customer's subscription was not canceled. */
  cancellation_rebuttal?: InputMaybe<Scalars['String']>;
  customer_communication?: InputMaybe<FileWrappedStringInputUnion>;
  /** The email address of the customer. */
  customer_email_address?: InputMaybe<Scalars['String']>;
  /** The name of the customer. */
  customer_name?: InputMaybe<Scalars['String']>;
  /** The IP address that the customer used when making the purchase. */
  customer_purchase_ip?: InputMaybe<Scalars['String']>;
  customer_signature?: InputMaybe<FileWrappedStringInputUnion>;
  duplicate_charge_documentation?: InputMaybe<FileWrappedStringInputUnion>;
  /** An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate. */
  duplicate_charge_explanation?: InputMaybe<Scalars['String']>;
  /** The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge. */
  duplicate_charge_id?: InputMaybe<Scalars['String']>;
  /** A description of the product or service that was sold. */
  product_description?: InputMaybe<Scalars['String']>;
  receipt?: InputMaybe<FileWrappedStringInputUnion>;
  refund_policy?: InputMaybe<FileWrappedStringInputUnion>;
  /** Documentation demonstrating that the customer was shown your refund policy prior to purchase. */
  refund_policy_disclosure?: InputMaybe<Scalars['String']>;
  /** A justification for why the customer is not entitled to a refund. */
  refund_refusal_explanation?: InputMaybe<Scalars['String']>;
  /** The date on which the customer received or began receiving the purchased service, in a clear human-readable format. */
  service_date?: InputMaybe<Scalars['String']>;
  service_documentation?: InputMaybe<FileWrappedStringInputUnion>;
  /** The address to which a physical product was shipped. You should try to include as complete address information as possible. */
  shipping_address?: InputMaybe<Scalars['String']>;
  /** The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas. */
  shipping_carrier?: InputMaybe<Scalars['String']>;
  /** The date on which a physical product began its route to the shipping address, in a clear human-readable format. */
  shipping_date?: InputMaybe<Scalars['String']>;
  shipping_documentation?: InputMaybe<FileWrappedStringInputUnion>;
  /** The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
  shipping_tracking_number?: InputMaybe<Scalars['String']>;
  uncategorized_file?: InputMaybe<FileWrappedStringInputUnion>;
  /** Any additional evidence or statements. */
  uncategorized_text?: InputMaybe<Scalars['String']>;
};

export type Stripe_DisputeEvidenceDetailsInput = {
  /** Date by which evidence must be submitted in order to successfully challenge dispute. Will be null if the customer's bank or credit card company doesn't allow a response for this particular dispute. */
  due_by?: InputMaybe<Scalars['Int']>;
  /** Whether evidence has been staged for this dispute. */
  has_evidence?: InputMaybe<Scalars['Boolean']>;
  /** Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed. */
  past_due?: InputMaybe<Scalars['Boolean']>;
  /** The number of times evidence has been submitted. Typically, you may only submit evidence once. */
  submission_count?: InputMaybe<Scalars['Int']>;
};

export type PaymentIntentWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  paymentIntent?: InputMaybe<Stripe_PaymentIntentInput>;
};

export type Stripe_FeeRefundInput = {
  /** Amount, in %s. */
  amount?: InputMaybe<Scalars['Int']>;
  balance_transaction?: InputMaybe<BalanceTransactionWrappedStringInputUnion>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  fee?: InputMaybe<ApplicationFeeWrappedStringInputUnion>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
};

export type Stripe_IssuingAuthorizationInput = {
  /** The total amount that was authorized or rejected. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  amount?: InputMaybe<Scalars['Int']>;
  amount_details?: InputMaybe<Stripe_IssuingAuthorizationAmountDetailsInput>;
  /** Whether the authorization has been approved. */
  approved?: InputMaybe<Scalars['Boolean']>;
  /** How the card details were provided. */
  authorization_method?: InputMaybe<UpdateProfileResultAuthorizationMethod>;
  /** List of balance transactions associated with this authorization. */
  balance_transactions?: InputMaybe<Array<InputMaybe<Stripe_BalanceTransactionInput>>>;
  card?: InputMaybe<Stripe_IssuingCardInput>;
  cardholder?: InputMaybe<IssuingCardholderWrappedStringInputUnion>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  merchant_amount?: InputMaybe<Scalars['Int']>;
  /** The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  merchant_currency?: InputMaybe<Scalars['String']>;
  merchant_data?: InputMaybe<Stripe_IssuingAuthorizationMerchantDataInput>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  pending_request?: InputMaybe<Stripe_IssuingAuthorizationPendingRequestInput>;
  /** History of every time `pending_request` was approved/denied, either by you directly or by Stripe (e.g. based on your `spending_controls`). If the merchant changes the authorization by performing an [incremental authorization](https://stripe.com/docs/issuing/purchases/authorizations), you can look at this field to see the previous requests for the authorization. */
  request_history?: InputMaybe<Array<InputMaybe<Stripe_IssuingAuthorizationRequestInput>>>;
  /** The current status of the authorization in its lifecycle. */
  status?: InputMaybe<UpdateProfileResultStatus>;
  /** List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization. */
  transactions?: InputMaybe<Array<InputMaybe<Stripe_IssuingTransactionInput>>>;
  verification_data?: InputMaybe<Stripe_IssuingAuthorizationVerificationDataInput>;
  /** The digital wallet used for this authorization. One of `apple_pay`, `google_pay`, or `samsung_pay`. */
  wallet?: InputMaybe<Scalars['String']>;
};

export type Stripe_IssuingAuthorizationAmountDetailsInput = {
  /** The fee charged by the ATM for the cash withdrawal. */
  atm_fee?: InputMaybe<Scalars['Int']>;
};

export enum UpdateProfileResultAuthorizationMethod {
  Chip = 'chip',
  Contactless = 'contactless',
  KeyedIn = 'keyed_in',
  Online = 'online',
  Swipe = 'swipe'
}

export type Stripe_IssuingCardInput = {
  /** The brand of the card. */
  brand?: InputMaybe<Scalars['String']>;
  /** The reason why the card was canceled. */
  cancellation_reason?: InputMaybe<UpdateProfileResultCancellationReason>;
  cardholder?: InputMaybe<Stripe_IssuingCardholderInput>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  /** The card's CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint. */
  cvc?: InputMaybe<Scalars['String']>;
  /** The expiration month of the card. */
  exp_month?: InputMaybe<Scalars['Int']>;
  /** The expiration year of the card. */
  exp_year?: InputMaybe<Scalars['Int']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** The last 4 digits of the card number. */
  last4?: InputMaybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint. */
  number?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  replaced_by?: InputMaybe<IssuingCardWrappedStringInputUnion>;
  replacement_for?: InputMaybe<IssuingCardWrappedStringInputUnion>;
  /** The reason why the previous card needed to be replaced. */
  replacement_reason?: InputMaybe<UpdateProfileResultReplacementReason>;
  shipping?: InputMaybe<Stripe_IssuingCardShippingInput>;
  spending_controls?: InputMaybe<Stripe_IssuingCardAuthorizationControlsInput>;
  /** Whether authorizations can be approved on this card. */
  status?: InputMaybe<UpdateProfileResultStatus>;
  /** The type of the card. */
  type?: InputMaybe<UpdateProfileResultType>;
  wallets?: InputMaybe<Stripe_IssuingCardWalletsInput>;
};

export type Stripe_IssuingCardholderInput = {
  billing?: InputMaybe<Stripe_IssuingCardholderAddressInput>;
  company?: InputMaybe<Stripe_IssuingCardholderCompanyInput>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** The cardholder's email address. */
  email?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  individual?: InputMaybe<Stripe_IssuingCardholderIndividualInput>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** The cardholder's name. This will be printed on cards issued to them. */
  name?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  /** The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details. */
  phone_number?: InputMaybe<Scalars['String']>;
  requirements?: InputMaybe<Stripe_IssuingCardholderRequirementsInput>;
  spending_controls?: InputMaybe<Stripe_IssuingCardholderAuthorizationControlsInput>;
  /** Specifies whether to permit authorizations on this cardholder's cards. */
  status?: InputMaybe<UpdateProfileResultStatus>;
  /** One of `individual` or `company`. */
  type?: InputMaybe<UpdateProfileResultType>;
};

export type Stripe_IssuingCardholderAddressInput = {
  address?: InputMaybe<Stripe_AddressInput>;
};

export type Stripe_IssuingCardholderCompanyInput = {
  /** Whether the company's business ID number was provided. */
  tax_id_provided?: InputMaybe<Scalars['Boolean']>;
};

export type Stripe_IssuingCardholderIndividualInput = {
  dob?: InputMaybe<Stripe_IssuingCardholderIndividualDobInput>;
  /** The first name of this cardholder. */
  first_name?: InputMaybe<Scalars['String']>;
  /** The last name of this cardholder. */
  last_name?: InputMaybe<Scalars['String']>;
  verification?: InputMaybe<Stripe_IssuingCardholderVerificationInput>;
};

export type Stripe_IssuingCardholderIndividualDobInput = {
  /** The day of birth, between 1 and 31. */
  day?: InputMaybe<Scalars['Int']>;
  /** The month of birth, between 1 and 12. */
  month?: InputMaybe<Scalars['Int']>;
  /** The four-digit year of birth. */
  year?: InputMaybe<Scalars['Int']>;
};

export type Stripe_IssuingCardholderVerificationInput = {
  document?: InputMaybe<Stripe_IssuingCardholderIdDocumentInput>;
};

export type Stripe_IssuingCardholderIdDocumentInput = {
  back?: InputMaybe<FileWrappedStringInputUnion>;
  front?: InputMaybe<FileWrappedStringInputUnion>;
};

export type Stripe_IssuingCardholderRequirementsInput = {
  /** If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason. */
  disabled_reason?: InputMaybe<UpdateProfileResultDisabledReason>;
  /** Array of fields that need to be collected in order to verify and re-enable the cardholder. */
  past_due?: InputMaybe<Array<InputMaybe<UpdateProfileResultPastDue>>>;
};

export enum UpdateProfileResultDisabledReason {
  Listed = 'listed',
  RejectedDoTlisted = 'rejectedDOTlisted',
  UnderReview = 'under_review'
}

export enum UpdateProfileResultPastDue {
  CompanyDoTtaxId = 'companyDOTtax_id',
  IndividualDoTdobDoTday = 'individualDOTdobDOTday',
  IndividualDoTdobDoTmonth = 'individualDOTdobDOTmonth',
  IndividualDoTdobDoTyear = 'individualDOTdobDOTyear',
  IndividualDoTfirstName = 'individualDOTfirst_name',
  IndividualDoTlastName = 'individualDOTlast_name',
  IndividualDoTverificationDoTdocument = 'individualDOTverificationDOTdocument'
}

export type Stripe_IssuingCardholderAuthorizationControlsInput = {
  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`. */
  allowed_categories?: InputMaybe<Array<InputMaybe<UpdateProfileResultAllowedCategories>>>;
  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`. */
  blocked_categories?: InputMaybe<Array<InputMaybe<UpdateProfileResultBlockedCategories>>>;
  /** Limit spending with amount-based rules that apply across this cardholder's cards. */
  spending_limits?: InputMaybe<Array<InputMaybe<Stripe_IssuingCardholderSpendingLimitInput>>>;
  /** Currency of the amounts within `spending_limits`. */
  spending_limits_currency?: InputMaybe<Scalars['String']>;
};

export enum UpdateProfileResultAllowedCategories {
  AcRefrigerationRepair = 'ac_refrigeration_repair',
  AccountingBookkeepingServices = 'accounting_bookkeeping_services',
  AdvertisingServices = 'advertising_services',
  AgriculturalCooperative = 'agricultural_cooperative',
  AirlinesAirCarriers = 'airlines_air_carriers',
  AirportsFlyingFields = 'airports_flying_fields',
  AmbulanceServices = 'ambulance_services',
  AmusementParksCarnivals = 'amusement_parks_carnivals',
  AntiqueReproductions = 'antique_reproductions',
  AntiqueShops = 'antique_shops',
  Aquariums = 'aquariums',
  ArchitecturalSurveyingServices = 'architectural_surveying_services',
  ArtDealersAndGalleries = 'art_dealers_and_galleries',
  ArtistsSupplyAndCraftShops = 'artists_supply_and_craft_shops',
  AutoAndHomeSupplyStores = 'auto_and_home_supply_stores',
  AutoBodyRepairShops = 'auto_body_repair_shops',
  AutoPaintShops = 'auto_paint_shops',
  AutoServiceShops = 'auto_service_shops',
  AutomatedCashDisburse = 'automated_cash_disburse',
  AutomatedFuelDispensers = 'automated_fuel_dispensers',
  AutomobileAssociations = 'automobile_associations',
  AutomotivePartsAndAccessoriesStores = 'automotive_parts_and_accessories_stores',
  AutomotiveTireStores = 'automotive_tire_stores',
  BailAndBondPayments = 'bail_and_bond_payments',
  Bakeries = 'bakeries',
  BandsOrchestras = 'bands_orchestras',
  BarberAndBeautyShops = 'barber_and_beauty_shops',
  BettingCasinoGambling = 'betting_casino_gambling',
  BicycleShops = 'bicycle_shops',
  BilliardPoolEstablishments = 'billiard_pool_establishments',
  BoatDealers = 'boat_dealers',
  BoatRentalsAndLeases = 'boat_rentals_and_leases',
  BookStores = 'book_stores',
  BooksPeriodicalsAndNewspapers = 'books_periodicals_and_newspapers',
  BowlingAlleys = 'bowling_alleys',
  BusLines = 'bus_lines',
  BusinessSecretarialSchools = 'business_secretarial_schools',
  BuyingShoppingServices = 'buying_shopping_services',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'cable_satellite_and_other_pay_television_and_radio',
  CameraAndPhotographicSupplyStores = 'camera_and_photographic_supply_stores',
  CandyNutAndConfectioneryStores = 'candy_nut_and_confectionery_stores',
  CarAndTruckDealersNewUsed = 'car_and_truck_dealers_new_used',
  CarAndTruckDealersUsedOnly = 'car_and_truck_dealers_used_only',
  CarRentalAgencies = 'car_rental_agencies',
  CarWashes = 'car_washes',
  CarpentryServices = 'carpentry_services',
  CarpetUpholsteryCleaning = 'carpet_upholstery_cleaning',
  Caterers = 'caterers',
  CharitableAndSocialServiceOrganizationsFundraising = 'charitable_and_social_service_organizations_fundraising',
  ChemicalsAndAlliedProducts = 'chemicals_and_allied_products',
  ChildCareServices = 'child_care_services',
  ChildrensAndInfantsWearStores = 'childrens_and_infants_wear_stores',
  ChiropodistsPodiatrists = 'chiropodists_podiatrists',
  Chiropractors = 'chiropractors',
  CigarStoresAndStands = 'cigar_stores_and_stands',
  CivicSocialFraternalAssociations = 'civic_social_fraternal_associations',
  CleaningAndMaintenance = 'cleaning_and_maintenance',
  ClothingRental = 'clothing_rental',
  CollegesUniversities = 'colleges_universities',
  CommercialEquipment = 'commercial_equipment',
  CommercialFootwear = 'commercial_footwear',
  CommercialPhotographyArtAndGraphics = 'commercial_photography_art_and_graphics',
  CommuterTransportAndFerries = 'commuter_transport_and_ferries',
  ComputerNetworkServices = 'computer_network_services',
  ComputerProgramming = 'computer_programming',
  ComputerRepair = 'computer_repair',
  ComputerSoftwareStores = 'computer_software_stores',
  ComputersPeripheralsAndSoftware = 'computers_peripherals_and_software',
  ConcreteWorkServices = 'concrete_work_services',
  ConstructionMaterials = 'construction_materials',
  ConsultingPublicRelations = 'consulting_public_relations',
  CorrespondenceSchools = 'correspondence_schools',
  CosmeticStores = 'cosmetic_stores',
  CounselingServices = 'counseling_services',
  CountryClubs = 'country_clubs',
  CourierServices = 'courier_services',
  CourtCosts = 'court_costs',
  CreditReportingAgencies = 'credit_reporting_agencies',
  CruiseLines = 'cruise_lines',
  DairyProductsStores = 'dairy_products_stores',
  DanceHallStudiosSchools = 'dance_hall_studios_schools',
  DatingEscortServices = 'dating_escort_services',
  DentistsOrthodontists = 'dentists_orthodontists',
  DepartmentStores = 'department_stores',
  DetectiveAgencies = 'detective_agencies',
  DigitalGoodsApplications = 'digital_goods_applications',
  DigitalGoodsGames = 'digital_goods_games',
  DigitalGoodsLargeVolume = 'digital_goods_large_volume',
  DigitalGoodsMedia = 'digital_goods_media',
  DirectMarketingCatalogMerchant = 'direct_marketing_catalog_merchant',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'direct_marketing_combination_catalog_and_retail_merchant',
  DirectMarketingInboundTelemarketing = 'direct_marketing_inbound_telemarketing',
  DirectMarketingInsuranceServices = 'direct_marketing_insurance_services',
  DirectMarketingOther = 'direct_marketing_other',
  DirectMarketingOutboundTelemarketing = 'direct_marketing_outbound_telemarketing',
  DirectMarketingSubscription = 'direct_marketing_subscription',
  DirectMarketingTravel = 'direct_marketing_travel',
  DiscountStores = 'discount_stores',
  Doctors = 'doctors',
  DoorToDoorSales = 'door_to_door_sales',
  DraperyWindowCoveringAndUpholsteryStores = 'drapery_window_covering_and_upholstery_stores',
  DrinkingPlaces = 'drinking_places',
  DrugStoresAndPharmacies = 'drug_stores_and_pharmacies',
  DrugsDrugProprietariesAndDruggistSundries = 'drugs_drug_proprietaries_and_druggist_sundries',
  DryCleaners = 'dry_cleaners',
  DurableGoods = 'durable_goods',
  DutyFreeStores = 'duty_free_stores',
  EatingPlacesRestaurants = 'eating_places_restaurants',
  EducationalServices = 'educational_services',
  ElectricRazorStores = 'electric_razor_stores',
  ElectricalPartsAndEquipment = 'electrical_parts_and_equipment',
  ElectricalServices = 'electrical_services',
  ElectronicsRepairShops = 'electronics_repair_shops',
  ElectronicsStores = 'electronics_stores',
  ElementarySecondarySchools = 'elementary_secondary_schools',
  EmploymentTempAgencies = 'employment_temp_agencies',
  EquipmentRental = 'equipment_rental',
  ExterminatingServices = 'exterminating_services',
  FamilyClothingStores = 'family_clothing_stores',
  FastFoodRestaurants = 'fast_food_restaurants',
  FinancialInstitutions = 'financial_institutions',
  FinesGovernmentAdministrativeEntities = 'fines_government_administrative_entities',
  FireplaceFireplaceScreensAndAccessoriesStores = 'fireplace_fireplace_screens_and_accessories_stores',
  FloorCoveringStores = 'floor_covering_stores',
  Florists = 'florists',
  FloristsSuppliesNurseryStockAndFlowers = 'florists_supplies_nursery_stock_and_flowers',
  FreezerAndLockerMeatProvisioners = 'freezer_and_locker_meat_provisioners',
  FuelDealersNonAutomotive = 'fuel_dealers_non_automotive',
  FuneralServicesCrematories = 'funeral_services_crematories',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'furniture_home_furnishings_and_equipment_stores_except_appliances',
  FurnitureRepairRefinishing = 'furniture_repair_refinishing',
  FurriersAndFurShops = 'furriers_and_fur_shops',
  GeneralServices = 'general_services',
  GiftCardNoveltyAndSouvenirShops = 'gift_card_novelty_and_souvenir_shops',
  GlassPaintAndWallpaperStores = 'glass_paint_and_wallpaper_stores',
  GlasswareCrystalStores = 'glassware_crystal_stores',
  GolfCoursesPublic = 'golf_courses_public',
  GovernmentServices = 'government_services',
  GroceryStoresSupermarkets = 'grocery_stores_supermarkets',
  HardwareEquipmentAndSupplies = 'hardware_equipment_and_supplies',
  HardwareStores = 'hardware_stores',
  HealthAndBeautySpas = 'health_and_beauty_spas',
  HearingAidsSalesAndSupplies = 'hearing_aids_sales_and_supplies',
  HeatingPlumbingAC = 'heating_plumbing_a_c',
  HobbyToyAndGameShops = 'hobby_toy_and_game_shops',
  HomeSupplyWarehouseStores = 'home_supply_warehouse_stores',
  Hospitals = 'hospitals',
  HotelsMotelsAndResorts = 'hotels_motels_and_resorts',
  HouseholdApplianceStores = 'household_appliance_stores',
  IndustrialSupplies = 'industrial_supplies',
  InformationRetrievalServices = 'information_retrieval_services',
  InsuranceDefault = 'insurance_default',
  InsuranceUnderwritingPremiums = 'insurance_underwriting_premiums',
  IntraCompanyPurchases = 'intra_company_purchases',
  JewelryStoresWatchesClocksAndSilverwareStores = 'jewelry_stores_watches_clocks_and_silverware_stores',
  LandscapingServices = 'landscaping_services',
  Laundries = 'laundries',
  LaundryCleaningServices = 'laundry_cleaning_services',
  LegalServicesAttorneys = 'legal_services_attorneys',
  LuggageAndLeatherGoodsStores = 'luggage_and_leather_goods_stores',
  LumberBuildingMaterialsStores = 'lumber_building_materials_stores',
  ManualCashDisburse = 'manual_cash_disburse',
  MarinasServiceAndSupplies = 'marinas_service_and_supplies',
  MasonryStoneworkAndPlaster = 'masonry_stonework_and_plaster',
  MassageParlors = 'massage_parlors',
  MedicalAndDentalLabs = 'medical_and_dental_labs',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies',
  MedicalServices = 'medical_services',
  MembershipOrganizations = 'membership_organizations',
  MensAndBoysClothingAndAccessoriesStores = 'mens_and_boys_clothing_and_accessories_stores',
  MensWomensClothingStores = 'mens_womens_clothing_stores',
  MetalServiceCenters = 'metal_service_centers',
  Miscellaneous = 'miscellaneous',
  MiscellaneousApparelAndAccessoryShops = 'miscellaneous_apparel_and_accessory_shops',
  MiscellaneousAutoDealers = 'miscellaneous_auto_dealers',
  MiscellaneousBusinessServices = 'miscellaneous_business_services',
  MiscellaneousFoodStores = 'miscellaneous_food_stores',
  MiscellaneousGeneralMerchandise = 'miscellaneous_general_merchandise',
  MiscellaneousGeneralServices = 'miscellaneous_general_services',
  MiscellaneousHomeFurnishingSpecialtyStores = 'miscellaneous_home_furnishing_specialty_stores',
  MiscellaneousPublishingAndPrinting = 'miscellaneous_publishing_and_printing',
  MiscellaneousRecreationServices = 'miscellaneous_recreation_services',
  MiscellaneousRepairShops = 'miscellaneous_repair_shops',
  MiscellaneousSpecialtyRetail = 'miscellaneous_specialty_retail',
  MobileHomeDealers = 'mobile_home_dealers',
  MotionPictureTheaters = 'motion_picture_theaters',
  MotorFreightCarriersAndTrucking = 'motor_freight_carriers_and_trucking',
  MotorHomesDealers = 'motor_homes_dealers',
  MotorVehicleSuppliesAndNewParts = 'motor_vehicle_supplies_and_new_parts',
  MotorcycleShopsAndDealers = 'motorcycle_shops_and_dealers',
  MotorcycleShopsDealers = 'motorcycle_shops_dealers',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'music_stores_musical_instruments_pianos_and_sheet_music',
  NewsDealersAndNewsstands = 'news_dealers_and_newsstands',
  NonFiMoneyOrders = 'non_fi_money_orders',
  NonFiStoredValueCardPurchaseLoad = 'non_fi_stored_value_card_purchase_load',
  NondurableGoods = 'nondurable_goods',
  NurseriesLawnAndGardenSupplyStores = 'nurseries_lawn_and_garden_supply_stores',
  NursingPersonalCare = 'nursing_personal_care',
  OfficeAndCommercialFurniture = 'office_and_commercial_furniture',
  OpticiansEyeglasses = 'opticians_eyeglasses',
  OptometristsOphthalmologist = 'optometrists_ophthalmologist',
  OrthopedicGoodsProstheticDevices = 'orthopedic_goods_prosthetic_devices',
  Osteopaths = 'osteopaths',
  PackageStoresBeerWineAndLiquor = 'package_stores_beer_wine_and_liquor',
  PaintsVarnishesAndSupplies = 'paints_varnishes_and_supplies',
  ParkingLotsGarages = 'parking_lots_garages',
  PassengerRailways = 'passenger_railways',
  PawnShops = 'pawn_shops',
  PetShopsPetFoodAndSupplies = 'pet_shops_pet_food_and_supplies',
  PetroleumAndPetroleumProducts = 'petroleum_and_petroleum_products',
  PhotoDeveloping = 'photo_developing',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'photographic_photocopy_microfilm_equipment_and_supplies',
  PhotographicStudios = 'photographic_studios',
  PictureVideoProduction = 'picture_video_production',
  PieceGoodsNotionsAndOtherDryGoods = 'piece_goods_notions_and_other_dry_goods',
  PlumbingHeatingEquipmentAndSupplies = 'plumbing_heating_equipment_and_supplies',
  PoliticalOrganizations = 'political_organizations',
  PostalServicesGovernmentOnly = 'postal_services_government_only',
  PreciousStonesAndMetalsWatchesAndJewelry = 'precious_stones_and_metals_watches_and_jewelry',
  ProfessionalServices = 'professional_services',
  PublicWarehousingAndStorage = 'public_warehousing_and_storage',
  QuickCopyReproAndBlueprint = 'quick_copy_repro_and_blueprint',
  Railroads = 'railroads',
  RealEstateAgentsAndManagersRentals = 'real_estate_agents_and_managers_rentals',
  RecordStores = 'record_stores',
  RecreationalVehicleRentals = 'recreational_vehicle_rentals',
  ReligiousGoodsStores = 'religious_goods_stores',
  ReligiousOrganizations = 'religious_organizations',
  RoofingSidingSheetMetal = 'roofing_siding_sheet_metal',
  SecretarialSupportServices = 'secretarial_support_services',
  SecurityBrokersDealers = 'security_brokers_dealers',
  ServiceStations = 'service_stations',
  SewingNeedleworkFabricAndPieceGoodsStores = 'sewing_needlework_fabric_and_piece_goods_stores',
  ShoeRepairHatCleaning = 'shoe_repair_hat_cleaning',
  ShoeStores = 'shoe_stores',
  SmallApplianceRepair = 'small_appliance_repair',
  SnowmobileDealers = 'snowmobile_dealers',
  SpecialTradeServices = 'special_trade_services',
  SpecialtyCleaning = 'specialty_cleaning',
  SportingGoodsStores = 'sporting_goods_stores',
  SportingRecreationCamps = 'sporting_recreation_camps',
  SportsAndRidingApparelStores = 'sports_and_riding_apparel_stores',
  SportsClubsFields = 'sports_clubs_fields',
  StampAndCoinStores = 'stamp_and_coin_stores',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'stationary_office_supplies_printing_and_writing_paper',
  StationeryStoresOfficeAndSchoolSupplyStores = 'stationery_stores_office_and_school_supply_stores',
  SwimmingPoolsSales = 'swimming_pools_sales',
  TUiTravelGermany = 't_ui_travel_germany',
  TailorsAlterations = 'tailors_alterations',
  TaxPaymentsGovernmentAgencies = 'tax_payments_government_agencies',
  TaxPreparationServices = 'tax_preparation_services',
  TaxicabsLimousines = 'taxicabs_limousines',
  TelecommunicationEquipmentAndTelephoneSales = 'telecommunication_equipment_and_telephone_sales',
  TelecommunicationServices = 'telecommunication_services',
  TelegraphServices = 'telegraph_services',
  TentAndAwningShops = 'tent_and_awning_shops',
  TestingLaboratories = 'testing_laboratories',
  TheatricalTicketAgencies = 'theatrical_ticket_agencies',
  Timeshares = 'timeshares',
  TireRetreadingAndRepair = 'tire_retreading_and_repair',
  TollsBridgeFees = 'tolls_bridge_fees',
  TouristAttractionsAndExhibits = 'tourist_attractions_and_exhibits',
  TowingServices = 'towing_services',
  TrailerParksCampgrounds = 'trailer_parks_campgrounds',
  TransportationServices = 'transportation_services',
  TravelAgenciesTourOperators = 'travel_agencies_tour_operators',
  TruckStopIteration = 'truck_stop_iteration',
  TruckUtilityTrailerRentals = 'truck_utility_trailer_rentals',
  TypesettingPlateMakingAndRelatedServices = 'typesetting_plate_making_and_related_services',
  TypewriterStores = 'typewriter_stores',
  USFederalGovernmentAgenciesOrDepartments = 'u_s_federal_government_agencies_or_departments',
  UniformsCommercialClothing = 'uniforms_commercial_clothing',
  UsedMerchandiseAndSecondhandStores = 'used_merchandise_and_secondhand_stores',
  Utilities = 'utilities',
  VarietyStores = 'variety_stores',
  VeterinaryServices = 'veterinary_services',
  VideoAmusementGameSupplies = 'video_amusement_game_supplies',
  VideoGameArcades = 'video_game_arcades',
  VideoTapeRentalStores = 'video_tape_rental_stores',
  VocationalTradeSchools = 'vocational_trade_schools',
  WatchJewelryRepair = 'watch_jewelry_repair',
  WeldingRepair = 'welding_repair',
  WholesaleClubs = 'wholesale_clubs',
  WigAndToupeeStores = 'wig_and_toupee_stores',
  WiresMoneyOrders = 'wires_money_orders',
  WomensAccessoryAndSpecialtyShops = 'womens_accessory_and_specialty_shops',
  WomensReadyToWearStores = 'womens_ready_to_wear_stores',
  WreckingAndSalvageYards = 'wrecking_and_salvage_yards'
}

export enum UpdateProfileResultBlockedCategories {
  AcRefrigerationRepair = 'ac_refrigeration_repair',
  AccountingBookkeepingServices = 'accounting_bookkeeping_services',
  AdvertisingServices = 'advertising_services',
  AgriculturalCooperative = 'agricultural_cooperative',
  AirlinesAirCarriers = 'airlines_air_carriers',
  AirportsFlyingFields = 'airports_flying_fields',
  AmbulanceServices = 'ambulance_services',
  AmusementParksCarnivals = 'amusement_parks_carnivals',
  AntiqueReproductions = 'antique_reproductions',
  AntiqueShops = 'antique_shops',
  Aquariums = 'aquariums',
  ArchitecturalSurveyingServices = 'architectural_surveying_services',
  ArtDealersAndGalleries = 'art_dealers_and_galleries',
  ArtistsSupplyAndCraftShops = 'artists_supply_and_craft_shops',
  AutoAndHomeSupplyStores = 'auto_and_home_supply_stores',
  AutoBodyRepairShops = 'auto_body_repair_shops',
  AutoPaintShops = 'auto_paint_shops',
  AutoServiceShops = 'auto_service_shops',
  AutomatedCashDisburse = 'automated_cash_disburse',
  AutomatedFuelDispensers = 'automated_fuel_dispensers',
  AutomobileAssociations = 'automobile_associations',
  AutomotivePartsAndAccessoriesStores = 'automotive_parts_and_accessories_stores',
  AutomotiveTireStores = 'automotive_tire_stores',
  BailAndBondPayments = 'bail_and_bond_payments',
  Bakeries = 'bakeries',
  BandsOrchestras = 'bands_orchestras',
  BarberAndBeautyShops = 'barber_and_beauty_shops',
  BettingCasinoGambling = 'betting_casino_gambling',
  BicycleShops = 'bicycle_shops',
  BilliardPoolEstablishments = 'billiard_pool_establishments',
  BoatDealers = 'boat_dealers',
  BoatRentalsAndLeases = 'boat_rentals_and_leases',
  BookStores = 'book_stores',
  BooksPeriodicalsAndNewspapers = 'books_periodicals_and_newspapers',
  BowlingAlleys = 'bowling_alleys',
  BusLines = 'bus_lines',
  BusinessSecretarialSchools = 'business_secretarial_schools',
  BuyingShoppingServices = 'buying_shopping_services',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'cable_satellite_and_other_pay_television_and_radio',
  CameraAndPhotographicSupplyStores = 'camera_and_photographic_supply_stores',
  CandyNutAndConfectioneryStores = 'candy_nut_and_confectionery_stores',
  CarAndTruckDealersNewUsed = 'car_and_truck_dealers_new_used',
  CarAndTruckDealersUsedOnly = 'car_and_truck_dealers_used_only',
  CarRentalAgencies = 'car_rental_agencies',
  CarWashes = 'car_washes',
  CarpentryServices = 'carpentry_services',
  CarpetUpholsteryCleaning = 'carpet_upholstery_cleaning',
  Caterers = 'caterers',
  CharitableAndSocialServiceOrganizationsFundraising = 'charitable_and_social_service_organizations_fundraising',
  ChemicalsAndAlliedProducts = 'chemicals_and_allied_products',
  ChildCareServices = 'child_care_services',
  ChildrensAndInfantsWearStores = 'childrens_and_infants_wear_stores',
  ChiropodistsPodiatrists = 'chiropodists_podiatrists',
  Chiropractors = 'chiropractors',
  CigarStoresAndStands = 'cigar_stores_and_stands',
  CivicSocialFraternalAssociations = 'civic_social_fraternal_associations',
  CleaningAndMaintenance = 'cleaning_and_maintenance',
  ClothingRental = 'clothing_rental',
  CollegesUniversities = 'colleges_universities',
  CommercialEquipment = 'commercial_equipment',
  CommercialFootwear = 'commercial_footwear',
  CommercialPhotographyArtAndGraphics = 'commercial_photography_art_and_graphics',
  CommuterTransportAndFerries = 'commuter_transport_and_ferries',
  ComputerNetworkServices = 'computer_network_services',
  ComputerProgramming = 'computer_programming',
  ComputerRepair = 'computer_repair',
  ComputerSoftwareStores = 'computer_software_stores',
  ComputersPeripheralsAndSoftware = 'computers_peripherals_and_software',
  ConcreteWorkServices = 'concrete_work_services',
  ConstructionMaterials = 'construction_materials',
  ConsultingPublicRelations = 'consulting_public_relations',
  CorrespondenceSchools = 'correspondence_schools',
  CosmeticStores = 'cosmetic_stores',
  CounselingServices = 'counseling_services',
  CountryClubs = 'country_clubs',
  CourierServices = 'courier_services',
  CourtCosts = 'court_costs',
  CreditReportingAgencies = 'credit_reporting_agencies',
  CruiseLines = 'cruise_lines',
  DairyProductsStores = 'dairy_products_stores',
  DanceHallStudiosSchools = 'dance_hall_studios_schools',
  DatingEscortServices = 'dating_escort_services',
  DentistsOrthodontists = 'dentists_orthodontists',
  DepartmentStores = 'department_stores',
  DetectiveAgencies = 'detective_agencies',
  DigitalGoodsApplications = 'digital_goods_applications',
  DigitalGoodsGames = 'digital_goods_games',
  DigitalGoodsLargeVolume = 'digital_goods_large_volume',
  DigitalGoodsMedia = 'digital_goods_media',
  DirectMarketingCatalogMerchant = 'direct_marketing_catalog_merchant',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'direct_marketing_combination_catalog_and_retail_merchant',
  DirectMarketingInboundTelemarketing = 'direct_marketing_inbound_telemarketing',
  DirectMarketingInsuranceServices = 'direct_marketing_insurance_services',
  DirectMarketingOther = 'direct_marketing_other',
  DirectMarketingOutboundTelemarketing = 'direct_marketing_outbound_telemarketing',
  DirectMarketingSubscription = 'direct_marketing_subscription',
  DirectMarketingTravel = 'direct_marketing_travel',
  DiscountStores = 'discount_stores',
  Doctors = 'doctors',
  DoorToDoorSales = 'door_to_door_sales',
  DraperyWindowCoveringAndUpholsteryStores = 'drapery_window_covering_and_upholstery_stores',
  DrinkingPlaces = 'drinking_places',
  DrugStoresAndPharmacies = 'drug_stores_and_pharmacies',
  DrugsDrugProprietariesAndDruggistSundries = 'drugs_drug_proprietaries_and_druggist_sundries',
  DryCleaners = 'dry_cleaners',
  DurableGoods = 'durable_goods',
  DutyFreeStores = 'duty_free_stores',
  EatingPlacesRestaurants = 'eating_places_restaurants',
  EducationalServices = 'educational_services',
  ElectricRazorStores = 'electric_razor_stores',
  ElectricalPartsAndEquipment = 'electrical_parts_and_equipment',
  ElectricalServices = 'electrical_services',
  ElectronicsRepairShops = 'electronics_repair_shops',
  ElectronicsStores = 'electronics_stores',
  ElementarySecondarySchools = 'elementary_secondary_schools',
  EmploymentTempAgencies = 'employment_temp_agencies',
  EquipmentRental = 'equipment_rental',
  ExterminatingServices = 'exterminating_services',
  FamilyClothingStores = 'family_clothing_stores',
  FastFoodRestaurants = 'fast_food_restaurants',
  FinancialInstitutions = 'financial_institutions',
  FinesGovernmentAdministrativeEntities = 'fines_government_administrative_entities',
  FireplaceFireplaceScreensAndAccessoriesStores = 'fireplace_fireplace_screens_and_accessories_stores',
  FloorCoveringStores = 'floor_covering_stores',
  Florists = 'florists',
  FloristsSuppliesNurseryStockAndFlowers = 'florists_supplies_nursery_stock_and_flowers',
  FreezerAndLockerMeatProvisioners = 'freezer_and_locker_meat_provisioners',
  FuelDealersNonAutomotive = 'fuel_dealers_non_automotive',
  FuneralServicesCrematories = 'funeral_services_crematories',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'furniture_home_furnishings_and_equipment_stores_except_appliances',
  FurnitureRepairRefinishing = 'furniture_repair_refinishing',
  FurriersAndFurShops = 'furriers_and_fur_shops',
  GeneralServices = 'general_services',
  GiftCardNoveltyAndSouvenirShops = 'gift_card_novelty_and_souvenir_shops',
  GlassPaintAndWallpaperStores = 'glass_paint_and_wallpaper_stores',
  GlasswareCrystalStores = 'glassware_crystal_stores',
  GolfCoursesPublic = 'golf_courses_public',
  GovernmentServices = 'government_services',
  GroceryStoresSupermarkets = 'grocery_stores_supermarkets',
  HardwareEquipmentAndSupplies = 'hardware_equipment_and_supplies',
  HardwareStores = 'hardware_stores',
  HealthAndBeautySpas = 'health_and_beauty_spas',
  HearingAidsSalesAndSupplies = 'hearing_aids_sales_and_supplies',
  HeatingPlumbingAC = 'heating_plumbing_a_c',
  HobbyToyAndGameShops = 'hobby_toy_and_game_shops',
  HomeSupplyWarehouseStores = 'home_supply_warehouse_stores',
  Hospitals = 'hospitals',
  HotelsMotelsAndResorts = 'hotels_motels_and_resorts',
  HouseholdApplianceStores = 'household_appliance_stores',
  IndustrialSupplies = 'industrial_supplies',
  InformationRetrievalServices = 'information_retrieval_services',
  InsuranceDefault = 'insurance_default',
  InsuranceUnderwritingPremiums = 'insurance_underwriting_premiums',
  IntraCompanyPurchases = 'intra_company_purchases',
  JewelryStoresWatchesClocksAndSilverwareStores = 'jewelry_stores_watches_clocks_and_silverware_stores',
  LandscapingServices = 'landscaping_services',
  Laundries = 'laundries',
  LaundryCleaningServices = 'laundry_cleaning_services',
  LegalServicesAttorneys = 'legal_services_attorneys',
  LuggageAndLeatherGoodsStores = 'luggage_and_leather_goods_stores',
  LumberBuildingMaterialsStores = 'lumber_building_materials_stores',
  ManualCashDisburse = 'manual_cash_disburse',
  MarinasServiceAndSupplies = 'marinas_service_and_supplies',
  MasonryStoneworkAndPlaster = 'masonry_stonework_and_plaster',
  MassageParlors = 'massage_parlors',
  MedicalAndDentalLabs = 'medical_and_dental_labs',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies',
  MedicalServices = 'medical_services',
  MembershipOrganizations = 'membership_organizations',
  MensAndBoysClothingAndAccessoriesStores = 'mens_and_boys_clothing_and_accessories_stores',
  MensWomensClothingStores = 'mens_womens_clothing_stores',
  MetalServiceCenters = 'metal_service_centers',
  Miscellaneous = 'miscellaneous',
  MiscellaneousApparelAndAccessoryShops = 'miscellaneous_apparel_and_accessory_shops',
  MiscellaneousAutoDealers = 'miscellaneous_auto_dealers',
  MiscellaneousBusinessServices = 'miscellaneous_business_services',
  MiscellaneousFoodStores = 'miscellaneous_food_stores',
  MiscellaneousGeneralMerchandise = 'miscellaneous_general_merchandise',
  MiscellaneousGeneralServices = 'miscellaneous_general_services',
  MiscellaneousHomeFurnishingSpecialtyStores = 'miscellaneous_home_furnishing_specialty_stores',
  MiscellaneousPublishingAndPrinting = 'miscellaneous_publishing_and_printing',
  MiscellaneousRecreationServices = 'miscellaneous_recreation_services',
  MiscellaneousRepairShops = 'miscellaneous_repair_shops',
  MiscellaneousSpecialtyRetail = 'miscellaneous_specialty_retail',
  MobileHomeDealers = 'mobile_home_dealers',
  MotionPictureTheaters = 'motion_picture_theaters',
  MotorFreightCarriersAndTrucking = 'motor_freight_carriers_and_trucking',
  MotorHomesDealers = 'motor_homes_dealers',
  MotorVehicleSuppliesAndNewParts = 'motor_vehicle_supplies_and_new_parts',
  MotorcycleShopsAndDealers = 'motorcycle_shops_and_dealers',
  MotorcycleShopsDealers = 'motorcycle_shops_dealers',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'music_stores_musical_instruments_pianos_and_sheet_music',
  NewsDealersAndNewsstands = 'news_dealers_and_newsstands',
  NonFiMoneyOrders = 'non_fi_money_orders',
  NonFiStoredValueCardPurchaseLoad = 'non_fi_stored_value_card_purchase_load',
  NondurableGoods = 'nondurable_goods',
  NurseriesLawnAndGardenSupplyStores = 'nurseries_lawn_and_garden_supply_stores',
  NursingPersonalCare = 'nursing_personal_care',
  OfficeAndCommercialFurniture = 'office_and_commercial_furniture',
  OpticiansEyeglasses = 'opticians_eyeglasses',
  OptometristsOphthalmologist = 'optometrists_ophthalmologist',
  OrthopedicGoodsProstheticDevices = 'orthopedic_goods_prosthetic_devices',
  Osteopaths = 'osteopaths',
  PackageStoresBeerWineAndLiquor = 'package_stores_beer_wine_and_liquor',
  PaintsVarnishesAndSupplies = 'paints_varnishes_and_supplies',
  ParkingLotsGarages = 'parking_lots_garages',
  PassengerRailways = 'passenger_railways',
  PawnShops = 'pawn_shops',
  PetShopsPetFoodAndSupplies = 'pet_shops_pet_food_and_supplies',
  PetroleumAndPetroleumProducts = 'petroleum_and_petroleum_products',
  PhotoDeveloping = 'photo_developing',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'photographic_photocopy_microfilm_equipment_and_supplies',
  PhotographicStudios = 'photographic_studios',
  PictureVideoProduction = 'picture_video_production',
  PieceGoodsNotionsAndOtherDryGoods = 'piece_goods_notions_and_other_dry_goods',
  PlumbingHeatingEquipmentAndSupplies = 'plumbing_heating_equipment_and_supplies',
  PoliticalOrganizations = 'political_organizations',
  PostalServicesGovernmentOnly = 'postal_services_government_only',
  PreciousStonesAndMetalsWatchesAndJewelry = 'precious_stones_and_metals_watches_and_jewelry',
  ProfessionalServices = 'professional_services',
  PublicWarehousingAndStorage = 'public_warehousing_and_storage',
  QuickCopyReproAndBlueprint = 'quick_copy_repro_and_blueprint',
  Railroads = 'railroads',
  RealEstateAgentsAndManagersRentals = 'real_estate_agents_and_managers_rentals',
  RecordStores = 'record_stores',
  RecreationalVehicleRentals = 'recreational_vehicle_rentals',
  ReligiousGoodsStores = 'religious_goods_stores',
  ReligiousOrganizations = 'religious_organizations',
  RoofingSidingSheetMetal = 'roofing_siding_sheet_metal',
  SecretarialSupportServices = 'secretarial_support_services',
  SecurityBrokersDealers = 'security_brokers_dealers',
  ServiceStations = 'service_stations',
  SewingNeedleworkFabricAndPieceGoodsStores = 'sewing_needlework_fabric_and_piece_goods_stores',
  ShoeRepairHatCleaning = 'shoe_repair_hat_cleaning',
  ShoeStores = 'shoe_stores',
  SmallApplianceRepair = 'small_appliance_repair',
  SnowmobileDealers = 'snowmobile_dealers',
  SpecialTradeServices = 'special_trade_services',
  SpecialtyCleaning = 'specialty_cleaning',
  SportingGoodsStores = 'sporting_goods_stores',
  SportingRecreationCamps = 'sporting_recreation_camps',
  SportsAndRidingApparelStores = 'sports_and_riding_apparel_stores',
  SportsClubsFields = 'sports_clubs_fields',
  StampAndCoinStores = 'stamp_and_coin_stores',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'stationary_office_supplies_printing_and_writing_paper',
  StationeryStoresOfficeAndSchoolSupplyStores = 'stationery_stores_office_and_school_supply_stores',
  SwimmingPoolsSales = 'swimming_pools_sales',
  TUiTravelGermany = 't_ui_travel_germany',
  TailorsAlterations = 'tailors_alterations',
  TaxPaymentsGovernmentAgencies = 'tax_payments_government_agencies',
  TaxPreparationServices = 'tax_preparation_services',
  TaxicabsLimousines = 'taxicabs_limousines',
  TelecommunicationEquipmentAndTelephoneSales = 'telecommunication_equipment_and_telephone_sales',
  TelecommunicationServices = 'telecommunication_services',
  TelegraphServices = 'telegraph_services',
  TentAndAwningShops = 'tent_and_awning_shops',
  TestingLaboratories = 'testing_laboratories',
  TheatricalTicketAgencies = 'theatrical_ticket_agencies',
  Timeshares = 'timeshares',
  TireRetreadingAndRepair = 'tire_retreading_and_repair',
  TollsBridgeFees = 'tolls_bridge_fees',
  TouristAttractionsAndExhibits = 'tourist_attractions_and_exhibits',
  TowingServices = 'towing_services',
  TrailerParksCampgrounds = 'trailer_parks_campgrounds',
  TransportationServices = 'transportation_services',
  TravelAgenciesTourOperators = 'travel_agencies_tour_operators',
  TruckStopIteration = 'truck_stop_iteration',
  TruckUtilityTrailerRentals = 'truck_utility_trailer_rentals',
  TypesettingPlateMakingAndRelatedServices = 'typesetting_plate_making_and_related_services',
  TypewriterStores = 'typewriter_stores',
  USFederalGovernmentAgenciesOrDepartments = 'u_s_federal_government_agencies_or_departments',
  UniformsCommercialClothing = 'uniforms_commercial_clothing',
  UsedMerchandiseAndSecondhandStores = 'used_merchandise_and_secondhand_stores',
  Utilities = 'utilities',
  VarietyStores = 'variety_stores',
  VeterinaryServices = 'veterinary_services',
  VideoAmusementGameSupplies = 'video_amusement_game_supplies',
  VideoGameArcades = 'video_game_arcades',
  VideoTapeRentalStores = 'video_tape_rental_stores',
  VocationalTradeSchools = 'vocational_trade_schools',
  WatchJewelryRepair = 'watch_jewelry_repair',
  WeldingRepair = 'welding_repair',
  WholesaleClubs = 'wholesale_clubs',
  WigAndToupeeStores = 'wig_and_toupee_stores',
  WiresMoneyOrders = 'wires_money_orders',
  WomensAccessoryAndSpecialtyShops = 'womens_accessory_and_specialty_shops',
  WomensReadyToWearStores = 'womens_ready_to_wear_stores',
  WreckingAndSalvageYards = 'wrecking_and_salvage_yards'
}

export type Stripe_IssuingCardholderSpendingLimitInput = {
  /** Maximum amount allowed to spend per interval. */
  amount?: InputMaybe<Scalars['Int']>;
  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories. */
  categories?: InputMaybe<Array<InputMaybe<UpdateProfileResultCategories>>>;
  /** Interval (or event) to which the amount applies. */
  interval?: InputMaybe<UpdateProfileResultInterval>;
};

export enum UpdateProfileResultCategories {
  AcRefrigerationRepair = 'ac_refrigeration_repair',
  AccountingBookkeepingServices = 'accounting_bookkeeping_services',
  AdvertisingServices = 'advertising_services',
  AgriculturalCooperative = 'agricultural_cooperative',
  AirlinesAirCarriers = 'airlines_air_carriers',
  AirportsFlyingFields = 'airports_flying_fields',
  AmbulanceServices = 'ambulance_services',
  AmusementParksCarnivals = 'amusement_parks_carnivals',
  AntiqueReproductions = 'antique_reproductions',
  AntiqueShops = 'antique_shops',
  Aquariums = 'aquariums',
  ArchitecturalSurveyingServices = 'architectural_surveying_services',
  ArtDealersAndGalleries = 'art_dealers_and_galleries',
  ArtistsSupplyAndCraftShops = 'artists_supply_and_craft_shops',
  AutoAndHomeSupplyStores = 'auto_and_home_supply_stores',
  AutoBodyRepairShops = 'auto_body_repair_shops',
  AutoPaintShops = 'auto_paint_shops',
  AutoServiceShops = 'auto_service_shops',
  AutomatedCashDisburse = 'automated_cash_disburse',
  AutomatedFuelDispensers = 'automated_fuel_dispensers',
  AutomobileAssociations = 'automobile_associations',
  AutomotivePartsAndAccessoriesStores = 'automotive_parts_and_accessories_stores',
  AutomotiveTireStores = 'automotive_tire_stores',
  BailAndBondPayments = 'bail_and_bond_payments',
  Bakeries = 'bakeries',
  BandsOrchestras = 'bands_orchestras',
  BarberAndBeautyShops = 'barber_and_beauty_shops',
  BettingCasinoGambling = 'betting_casino_gambling',
  BicycleShops = 'bicycle_shops',
  BilliardPoolEstablishments = 'billiard_pool_establishments',
  BoatDealers = 'boat_dealers',
  BoatRentalsAndLeases = 'boat_rentals_and_leases',
  BookStores = 'book_stores',
  BooksPeriodicalsAndNewspapers = 'books_periodicals_and_newspapers',
  BowlingAlleys = 'bowling_alleys',
  BusLines = 'bus_lines',
  BusinessSecretarialSchools = 'business_secretarial_schools',
  BuyingShoppingServices = 'buying_shopping_services',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'cable_satellite_and_other_pay_television_and_radio',
  CameraAndPhotographicSupplyStores = 'camera_and_photographic_supply_stores',
  CandyNutAndConfectioneryStores = 'candy_nut_and_confectionery_stores',
  CarAndTruckDealersNewUsed = 'car_and_truck_dealers_new_used',
  CarAndTruckDealersUsedOnly = 'car_and_truck_dealers_used_only',
  CarRentalAgencies = 'car_rental_agencies',
  CarWashes = 'car_washes',
  CarpentryServices = 'carpentry_services',
  CarpetUpholsteryCleaning = 'carpet_upholstery_cleaning',
  Caterers = 'caterers',
  CharitableAndSocialServiceOrganizationsFundraising = 'charitable_and_social_service_organizations_fundraising',
  ChemicalsAndAlliedProducts = 'chemicals_and_allied_products',
  ChildCareServices = 'child_care_services',
  ChildrensAndInfantsWearStores = 'childrens_and_infants_wear_stores',
  ChiropodistsPodiatrists = 'chiropodists_podiatrists',
  Chiropractors = 'chiropractors',
  CigarStoresAndStands = 'cigar_stores_and_stands',
  CivicSocialFraternalAssociations = 'civic_social_fraternal_associations',
  CleaningAndMaintenance = 'cleaning_and_maintenance',
  ClothingRental = 'clothing_rental',
  CollegesUniversities = 'colleges_universities',
  CommercialEquipment = 'commercial_equipment',
  CommercialFootwear = 'commercial_footwear',
  CommercialPhotographyArtAndGraphics = 'commercial_photography_art_and_graphics',
  CommuterTransportAndFerries = 'commuter_transport_and_ferries',
  ComputerNetworkServices = 'computer_network_services',
  ComputerProgramming = 'computer_programming',
  ComputerRepair = 'computer_repair',
  ComputerSoftwareStores = 'computer_software_stores',
  ComputersPeripheralsAndSoftware = 'computers_peripherals_and_software',
  ConcreteWorkServices = 'concrete_work_services',
  ConstructionMaterials = 'construction_materials',
  ConsultingPublicRelations = 'consulting_public_relations',
  CorrespondenceSchools = 'correspondence_schools',
  CosmeticStores = 'cosmetic_stores',
  CounselingServices = 'counseling_services',
  CountryClubs = 'country_clubs',
  CourierServices = 'courier_services',
  CourtCosts = 'court_costs',
  CreditReportingAgencies = 'credit_reporting_agencies',
  CruiseLines = 'cruise_lines',
  DairyProductsStores = 'dairy_products_stores',
  DanceHallStudiosSchools = 'dance_hall_studios_schools',
  DatingEscortServices = 'dating_escort_services',
  DentistsOrthodontists = 'dentists_orthodontists',
  DepartmentStores = 'department_stores',
  DetectiveAgencies = 'detective_agencies',
  DigitalGoodsApplications = 'digital_goods_applications',
  DigitalGoodsGames = 'digital_goods_games',
  DigitalGoodsLargeVolume = 'digital_goods_large_volume',
  DigitalGoodsMedia = 'digital_goods_media',
  DirectMarketingCatalogMerchant = 'direct_marketing_catalog_merchant',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'direct_marketing_combination_catalog_and_retail_merchant',
  DirectMarketingInboundTelemarketing = 'direct_marketing_inbound_telemarketing',
  DirectMarketingInsuranceServices = 'direct_marketing_insurance_services',
  DirectMarketingOther = 'direct_marketing_other',
  DirectMarketingOutboundTelemarketing = 'direct_marketing_outbound_telemarketing',
  DirectMarketingSubscription = 'direct_marketing_subscription',
  DirectMarketingTravel = 'direct_marketing_travel',
  DiscountStores = 'discount_stores',
  Doctors = 'doctors',
  DoorToDoorSales = 'door_to_door_sales',
  DraperyWindowCoveringAndUpholsteryStores = 'drapery_window_covering_and_upholstery_stores',
  DrinkingPlaces = 'drinking_places',
  DrugStoresAndPharmacies = 'drug_stores_and_pharmacies',
  DrugsDrugProprietariesAndDruggistSundries = 'drugs_drug_proprietaries_and_druggist_sundries',
  DryCleaners = 'dry_cleaners',
  DurableGoods = 'durable_goods',
  DutyFreeStores = 'duty_free_stores',
  EatingPlacesRestaurants = 'eating_places_restaurants',
  EducationalServices = 'educational_services',
  ElectricRazorStores = 'electric_razor_stores',
  ElectricalPartsAndEquipment = 'electrical_parts_and_equipment',
  ElectricalServices = 'electrical_services',
  ElectronicsRepairShops = 'electronics_repair_shops',
  ElectronicsStores = 'electronics_stores',
  ElementarySecondarySchools = 'elementary_secondary_schools',
  EmploymentTempAgencies = 'employment_temp_agencies',
  EquipmentRental = 'equipment_rental',
  ExterminatingServices = 'exterminating_services',
  FamilyClothingStores = 'family_clothing_stores',
  FastFoodRestaurants = 'fast_food_restaurants',
  FinancialInstitutions = 'financial_institutions',
  FinesGovernmentAdministrativeEntities = 'fines_government_administrative_entities',
  FireplaceFireplaceScreensAndAccessoriesStores = 'fireplace_fireplace_screens_and_accessories_stores',
  FloorCoveringStores = 'floor_covering_stores',
  Florists = 'florists',
  FloristsSuppliesNurseryStockAndFlowers = 'florists_supplies_nursery_stock_and_flowers',
  FreezerAndLockerMeatProvisioners = 'freezer_and_locker_meat_provisioners',
  FuelDealersNonAutomotive = 'fuel_dealers_non_automotive',
  FuneralServicesCrematories = 'funeral_services_crematories',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'furniture_home_furnishings_and_equipment_stores_except_appliances',
  FurnitureRepairRefinishing = 'furniture_repair_refinishing',
  FurriersAndFurShops = 'furriers_and_fur_shops',
  GeneralServices = 'general_services',
  GiftCardNoveltyAndSouvenirShops = 'gift_card_novelty_and_souvenir_shops',
  GlassPaintAndWallpaperStores = 'glass_paint_and_wallpaper_stores',
  GlasswareCrystalStores = 'glassware_crystal_stores',
  GolfCoursesPublic = 'golf_courses_public',
  GovernmentServices = 'government_services',
  GroceryStoresSupermarkets = 'grocery_stores_supermarkets',
  HardwareEquipmentAndSupplies = 'hardware_equipment_and_supplies',
  HardwareStores = 'hardware_stores',
  HealthAndBeautySpas = 'health_and_beauty_spas',
  HearingAidsSalesAndSupplies = 'hearing_aids_sales_and_supplies',
  HeatingPlumbingAC = 'heating_plumbing_a_c',
  HobbyToyAndGameShops = 'hobby_toy_and_game_shops',
  HomeSupplyWarehouseStores = 'home_supply_warehouse_stores',
  Hospitals = 'hospitals',
  HotelsMotelsAndResorts = 'hotels_motels_and_resorts',
  HouseholdApplianceStores = 'household_appliance_stores',
  IndustrialSupplies = 'industrial_supplies',
  InformationRetrievalServices = 'information_retrieval_services',
  InsuranceDefault = 'insurance_default',
  InsuranceUnderwritingPremiums = 'insurance_underwriting_premiums',
  IntraCompanyPurchases = 'intra_company_purchases',
  JewelryStoresWatchesClocksAndSilverwareStores = 'jewelry_stores_watches_clocks_and_silverware_stores',
  LandscapingServices = 'landscaping_services',
  Laundries = 'laundries',
  LaundryCleaningServices = 'laundry_cleaning_services',
  LegalServicesAttorneys = 'legal_services_attorneys',
  LuggageAndLeatherGoodsStores = 'luggage_and_leather_goods_stores',
  LumberBuildingMaterialsStores = 'lumber_building_materials_stores',
  ManualCashDisburse = 'manual_cash_disburse',
  MarinasServiceAndSupplies = 'marinas_service_and_supplies',
  MasonryStoneworkAndPlaster = 'masonry_stonework_and_plaster',
  MassageParlors = 'massage_parlors',
  MedicalAndDentalLabs = 'medical_and_dental_labs',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies',
  MedicalServices = 'medical_services',
  MembershipOrganizations = 'membership_organizations',
  MensAndBoysClothingAndAccessoriesStores = 'mens_and_boys_clothing_and_accessories_stores',
  MensWomensClothingStores = 'mens_womens_clothing_stores',
  MetalServiceCenters = 'metal_service_centers',
  Miscellaneous = 'miscellaneous',
  MiscellaneousApparelAndAccessoryShops = 'miscellaneous_apparel_and_accessory_shops',
  MiscellaneousAutoDealers = 'miscellaneous_auto_dealers',
  MiscellaneousBusinessServices = 'miscellaneous_business_services',
  MiscellaneousFoodStores = 'miscellaneous_food_stores',
  MiscellaneousGeneralMerchandise = 'miscellaneous_general_merchandise',
  MiscellaneousGeneralServices = 'miscellaneous_general_services',
  MiscellaneousHomeFurnishingSpecialtyStores = 'miscellaneous_home_furnishing_specialty_stores',
  MiscellaneousPublishingAndPrinting = 'miscellaneous_publishing_and_printing',
  MiscellaneousRecreationServices = 'miscellaneous_recreation_services',
  MiscellaneousRepairShops = 'miscellaneous_repair_shops',
  MiscellaneousSpecialtyRetail = 'miscellaneous_specialty_retail',
  MobileHomeDealers = 'mobile_home_dealers',
  MotionPictureTheaters = 'motion_picture_theaters',
  MotorFreightCarriersAndTrucking = 'motor_freight_carriers_and_trucking',
  MotorHomesDealers = 'motor_homes_dealers',
  MotorVehicleSuppliesAndNewParts = 'motor_vehicle_supplies_and_new_parts',
  MotorcycleShopsAndDealers = 'motorcycle_shops_and_dealers',
  MotorcycleShopsDealers = 'motorcycle_shops_dealers',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'music_stores_musical_instruments_pianos_and_sheet_music',
  NewsDealersAndNewsstands = 'news_dealers_and_newsstands',
  NonFiMoneyOrders = 'non_fi_money_orders',
  NonFiStoredValueCardPurchaseLoad = 'non_fi_stored_value_card_purchase_load',
  NondurableGoods = 'nondurable_goods',
  NurseriesLawnAndGardenSupplyStores = 'nurseries_lawn_and_garden_supply_stores',
  NursingPersonalCare = 'nursing_personal_care',
  OfficeAndCommercialFurniture = 'office_and_commercial_furniture',
  OpticiansEyeglasses = 'opticians_eyeglasses',
  OptometristsOphthalmologist = 'optometrists_ophthalmologist',
  OrthopedicGoodsProstheticDevices = 'orthopedic_goods_prosthetic_devices',
  Osteopaths = 'osteopaths',
  PackageStoresBeerWineAndLiquor = 'package_stores_beer_wine_and_liquor',
  PaintsVarnishesAndSupplies = 'paints_varnishes_and_supplies',
  ParkingLotsGarages = 'parking_lots_garages',
  PassengerRailways = 'passenger_railways',
  PawnShops = 'pawn_shops',
  PetShopsPetFoodAndSupplies = 'pet_shops_pet_food_and_supplies',
  PetroleumAndPetroleumProducts = 'petroleum_and_petroleum_products',
  PhotoDeveloping = 'photo_developing',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'photographic_photocopy_microfilm_equipment_and_supplies',
  PhotographicStudios = 'photographic_studios',
  PictureVideoProduction = 'picture_video_production',
  PieceGoodsNotionsAndOtherDryGoods = 'piece_goods_notions_and_other_dry_goods',
  PlumbingHeatingEquipmentAndSupplies = 'plumbing_heating_equipment_and_supplies',
  PoliticalOrganizations = 'political_organizations',
  PostalServicesGovernmentOnly = 'postal_services_government_only',
  PreciousStonesAndMetalsWatchesAndJewelry = 'precious_stones_and_metals_watches_and_jewelry',
  ProfessionalServices = 'professional_services',
  PublicWarehousingAndStorage = 'public_warehousing_and_storage',
  QuickCopyReproAndBlueprint = 'quick_copy_repro_and_blueprint',
  Railroads = 'railroads',
  RealEstateAgentsAndManagersRentals = 'real_estate_agents_and_managers_rentals',
  RecordStores = 'record_stores',
  RecreationalVehicleRentals = 'recreational_vehicle_rentals',
  ReligiousGoodsStores = 'religious_goods_stores',
  ReligiousOrganizations = 'religious_organizations',
  RoofingSidingSheetMetal = 'roofing_siding_sheet_metal',
  SecretarialSupportServices = 'secretarial_support_services',
  SecurityBrokersDealers = 'security_brokers_dealers',
  ServiceStations = 'service_stations',
  SewingNeedleworkFabricAndPieceGoodsStores = 'sewing_needlework_fabric_and_piece_goods_stores',
  ShoeRepairHatCleaning = 'shoe_repair_hat_cleaning',
  ShoeStores = 'shoe_stores',
  SmallApplianceRepair = 'small_appliance_repair',
  SnowmobileDealers = 'snowmobile_dealers',
  SpecialTradeServices = 'special_trade_services',
  SpecialtyCleaning = 'specialty_cleaning',
  SportingGoodsStores = 'sporting_goods_stores',
  SportingRecreationCamps = 'sporting_recreation_camps',
  SportsAndRidingApparelStores = 'sports_and_riding_apparel_stores',
  SportsClubsFields = 'sports_clubs_fields',
  StampAndCoinStores = 'stamp_and_coin_stores',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'stationary_office_supplies_printing_and_writing_paper',
  StationeryStoresOfficeAndSchoolSupplyStores = 'stationery_stores_office_and_school_supply_stores',
  SwimmingPoolsSales = 'swimming_pools_sales',
  TUiTravelGermany = 't_ui_travel_germany',
  TailorsAlterations = 'tailors_alterations',
  TaxPaymentsGovernmentAgencies = 'tax_payments_government_agencies',
  TaxPreparationServices = 'tax_preparation_services',
  TaxicabsLimousines = 'taxicabs_limousines',
  TelecommunicationEquipmentAndTelephoneSales = 'telecommunication_equipment_and_telephone_sales',
  TelecommunicationServices = 'telecommunication_services',
  TelegraphServices = 'telegraph_services',
  TentAndAwningShops = 'tent_and_awning_shops',
  TestingLaboratories = 'testing_laboratories',
  TheatricalTicketAgencies = 'theatrical_ticket_agencies',
  Timeshares = 'timeshares',
  TireRetreadingAndRepair = 'tire_retreading_and_repair',
  TollsBridgeFees = 'tolls_bridge_fees',
  TouristAttractionsAndExhibits = 'tourist_attractions_and_exhibits',
  TowingServices = 'towing_services',
  TrailerParksCampgrounds = 'trailer_parks_campgrounds',
  TransportationServices = 'transportation_services',
  TravelAgenciesTourOperators = 'travel_agencies_tour_operators',
  TruckStopIteration = 'truck_stop_iteration',
  TruckUtilityTrailerRentals = 'truck_utility_trailer_rentals',
  TypesettingPlateMakingAndRelatedServices = 'typesetting_plate_making_and_related_services',
  TypewriterStores = 'typewriter_stores',
  USFederalGovernmentAgenciesOrDepartments = 'u_s_federal_government_agencies_or_departments',
  UniformsCommercialClothing = 'uniforms_commercial_clothing',
  UsedMerchandiseAndSecondhandStores = 'used_merchandise_and_secondhand_stores',
  Utilities = 'utilities',
  VarietyStores = 'variety_stores',
  VeterinaryServices = 'veterinary_services',
  VideoAmusementGameSupplies = 'video_amusement_game_supplies',
  VideoGameArcades = 'video_game_arcades',
  VideoTapeRentalStores = 'video_tape_rental_stores',
  VocationalTradeSchools = 'vocational_trade_schools',
  WatchJewelryRepair = 'watch_jewelry_repair',
  WeldingRepair = 'welding_repair',
  WholesaleClubs = 'wholesale_clubs',
  WigAndToupeeStores = 'wig_and_toupee_stores',
  WiresMoneyOrders = 'wires_money_orders',
  WomensAccessoryAndSpecialtyShops = 'womens_accessory_and_specialty_shops',
  WomensReadyToWearStores = 'womens_ready_to_wear_stores',
  WreckingAndSalvageYards = 'wrecking_and_salvage_yards'
}

export enum UpdateProfileResultInterval {
  AllTime = 'all_time',
  Daily = 'daily',
  Monthly = 'monthly',
  PerAuthorization = 'per_authorization',
  Weekly = 'weekly',
  Yearly = 'yearly'
}

export type IssuingCardWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  issuingCard?: InputMaybe<Stripe_IssuingCardInput>;
};

export enum UpdateProfileResultReplacementReason {
  Damaged = 'damaged',
  Expired = 'expired',
  Lost = 'lost',
  Stolen = 'stolen'
}

export type Stripe_IssuingCardShippingInput = {
  address?: InputMaybe<Stripe_AddressInput>;
  /** The delivery company that shipped a card. */
  carrier?: InputMaybe<UpdateProfileResultCarrier>;
  /** A unix timestamp representing a best estimate of when the card will be delivered. */
  eta?: InputMaybe<Scalars['Int']>;
  /** Recipient name. */
  name?: InputMaybe<Scalars['String']>;
  /** Shipment service, such as `standard` or `express`. */
  service?: InputMaybe<UpdateProfileResultService>;
  /** The delivery status of the card. */
  status?: InputMaybe<UpdateProfileResultStatus>;
  /** A tracking number for a card shipment. */
  tracking_number?: InputMaybe<Scalars['String']>;
  /** A link to the shipping carrier's site where you can view detailed information about a card shipment. */
  tracking_url?: InputMaybe<Scalars['String']>;
  /** Packaging options. */
  type?: InputMaybe<UpdateProfileResultType>;
};

export enum UpdateProfileResultCarrier {
  Dhl = 'dhl',
  Fedex = 'fedex',
  RoyalMail = 'royal_mail',
  Usps = 'usps'
}

export enum UpdateProfileResultService {
  Express = 'express',
  Priority = 'priority',
  Standard = 'standard'
}

export type Stripe_IssuingCardAuthorizationControlsInput = {
  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`. */
  allowed_categories?: InputMaybe<Array<InputMaybe<UpdateProfileResultAllowedCategories>>>;
  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`. */
  blocked_categories?: InputMaybe<Array<InputMaybe<UpdateProfileResultBlockedCategories>>>;
  /** Limit spending with amount-based rules that apply across any cards this card replaced (i.e., its `replacement_for` card and _that_ card's `replacement_for` card, up the chain). */
  spending_limits?: InputMaybe<Array<InputMaybe<Stripe_IssuingCardSpendingLimitInput>>>;
  /** Currency of the amounts within `spending_limits`. Always the same as the currency of the card. */
  spending_limits_currency?: InputMaybe<Scalars['String']>;
};

export type Stripe_IssuingCardSpendingLimitInput = {
  /** Maximum amount allowed to spend per interval. */
  amount?: InputMaybe<Scalars['Int']>;
  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories. */
  categories?: InputMaybe<Array<InputMaybe<UpdateProfileResultCategories>>>;
  /** Interval (or event) to which the amount applies. */
  interval?: InputMaybe<UpdateProfileResultInterval>;
};

export type Stripe_IssuingCardWalletsInput = {
  apple_pay?: InputMaybe<Stripe_IssuingCardApplePayInput>;
  google_pay?: InputMaybe<Stripe_IssuingCardGooglePayInput>;
  /** Unique identifier for a card used with digital wallets */
  primary_account_identifier?: InputMaybe<Scalars['String']>;
};

export type Stripe_IssuingCardApplePayInput = {
  /** Apple Pay Eligibility */
  eligible?: InputMaybe<Scalars['Boolean']>;
  /** Reason the card is ineligible for Apple Pay */
  ineligible_reason?: InputMaybe<UpdateProfileResultIneligibleReason>;
};

export enum UpdateProfileResultIneligibleReason {
  MissingAgreement = 'missing_agreement',
  MissingCardholderContact = 'missing_cardholder_contact',
  UnsupportedRegion = 'unsupported_region'
}

export type Stripe_IssuingCardGooglePayInput = {
  /** Google Pay Eligibility */
  eligible?: InputMaybe<Scalars['Boolean']>;
  /** Reason the card is ineligible for Google Pay */
  ineligible_reason?: InputMaybe<UpdateProfileResultIneligibleReason>;
};

export type IssuingCardholderWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  issuingCardholder?: InputMaybe<Stripe_IssuingCardholderInput>;
};

export type Stripe_IssuingAuthorizationMerchantDataInput = {
  /** A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values. */
  category?: InputMaybe<Scalars['String']>;
  /** The merchant category code for the sellerâ€™s business */
  category_code?: InputMaybe<Scalars['String']>;
  /** City where the seller is located */
  city?: InputMaybe<Scalars['String']>;
  /** Country where the seller is located */
  country?: InputMaybe<Scalars['String']>;
  /** Name of the seller */
  name?: InputMaybe<Scalars['String']>;
  /** Identifier assigned to the seller by the card brand */
  network_id?: InputMaybe<Scalars['String']>;
  /** Postal code where the seller is located */
  postal_code?: InputMaybe<Scalars['String']>;
  /** State where the seller is located */
  state?: InputMaybe<Scalars['String']>;
};

export type Stripe_IssuingAuthorizationPendingRequestInput = {
  /** The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  amount?: InputMaybe<Scalars['Int']>;
  amount_details?: InputMaybe<Stripe_IssuingAuthorizationAmountDetailsInput>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  /** If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization. */
  is_amount_controllable?: InputMaybe<Scalars['Boolean']>;
  /** The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  merchant_amount?: InputMaybe<Scalars['Int']>;
  /** The local currency the merchant is requesting to authorize. */
  merchant_currency?: InputMaybe<Scalars['String']>;
};

export type Stripe_IssuingAuthorizationRequestInput = {
  /** The `pending_request.amount` at the time of the request, presented in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved. */
  amount?: InputMaybe<Scalars['Int']>;
  amount_details?: InputMaybe<Stripe_IssuingAuthorizationAmountDetailsInput>;
  /** Whether this request was approved. */
  approved?: InputMaybe<Scalars['Boolean']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  /** The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  merchant_amount?: InputMaybe<Scalars['Int']>;
  /** The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  merchant_currency?: InputMaybe<Scalars['String']>;
  /** The reason for the approval or decline. */
  reason?: InputMaybe<UpdateProfileResultReason>;
};

export enum UpdateProfileResultReason {
  AccountDisabled = 'account_disabled',
  CardActive = 'card_active',
  CardInactive = 'card_inactive',
  CardholderInactive = 'cardholder_inactive',
  CardholderVerificationRequired = 'cardholder_verification_required',
  InsufficientFunds = 'insufficient_funds',
  NotAllowed = 'not_allowed',
  SpendingControls = 'spending_controls',
  SuspectedFraud = 'suspected_fraud',
  VerificationFailed = 'verification_failed',
  WebhookApproved = 'webhook_approved',
  WebhookDeclined = 'webhook_declined',
  WebhookTimeout = 'webhook_timeout'
}

export type Stripe_IssuingTransactionInput = {
  /** The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  amount?: InputMaybe<Scalars['Int']>;
  amount_details?: InputMaybe<Stripe_IssuingTransactionAmountDetailsInput>;
  authorization?: InputMaybe<IssuingAuthorizationWrappedStringInputUnion>;
  balance_transaction?: InputMaybe<BalanceTransactionWrappedStringInputUnion>;
  card?: InputMaybe<IssuingCardWrappedStringInputUnion>;
  cardholder?: InputMaybe<IssuingCardholderWrappedStringInputUnion>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  dispute?: InputMaybe<IssuingDisputeWrappedStringInputUnion>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency. */
  merchant_amount?: InputMaybe<Scalars['Int']>;
  /** The currency with which the merchant is taking payment. */
  merchant_currency?: InputMaybe<Scalars['String']>;
  merchant_data?: InputMaybe<Stripe_IssuingAuthorizationMerchantDataInput>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  purchase_details?: InputMaybe<Stripe_IssuingTransactionPurchaseDetailsInput>;
  /** The nature of the transaction. */
  type?: InputMaybe<UpdateProfileResultType>;
  /** The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. */
  wallet?: InputMaybe<UpdateProfileResultWallet>;
};

export type Stripe_IssuingTransactionAmountDetailsInput = {
  /** The fee charged by the ATM for the cash withdrawal. */
  atm_fee?: InputMaybe<Scalars['Int']>;
};

export type IssuingAuthorizationWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  issuingAuthorization?: InputMaybe<Stripe_IssuingAuthorizationInput>;
};

export type IssuingDisputeWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  issuingDispute?: InputMaybe<Stripe_IssuingDisputeInput>;
};

export type Stripe_IssuingDisputeInput = {
  /** Disputed amount. Usually the amount of the `transaction`, but can differ (usually because of currency fluctuation). */
  amount?: InputMaybe<Scalars['Int']>;
  /** List of balance transactions associated with the dispute. */
  balance_transactions?: InputMaybe<Array<InputMaybe<Stripe_BalanceTransactionInput>>>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** The currency the `transaction` was made in. */
  currency?: InputMaybe<Scalars['String']>;
  evidence?: InputMaybe<Stripe_IssuingDisputeEvidenceInput>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  /** Current status of the dispute. */
  status?: InputMaybe<UpdateProfileResultStatus>;
  transaction?: InputMaybe<IssuingTransactionWrappedStringInputUnion>;
};

export type Stripe_IssuingDisputeEvidenceInput = {
  canceled?: InputMaybe<Stripe_IssuingDisputeCanceledEvidenceInput>;
  duplicate?: InputMaybe<Stripe_IssuingDisputeDuplicateEvidenceInput>;
  fraudulent?: InputMaybe<Stripe_IssuingDisputeFraudulentEvidenceInput>;
  merchandise_not_as_described?: InputMaybe<Stripe_IssuingDisputeMerchandiseNotAsDescribedEvidenceInput>;
  not_received?: InputMaybe<Stripe_IssuingDisputeNotReceivedEvidenceInput>;
  other?: InputMaybe<Stripe_IssuingDisputeOtherEvidenceInput>;
  /** The reason for filing the dispute. Its value will match the field containing the evidence. */
  reason?: InputMaybe<UpdateProfileResultReason>;
  service_not_as_described?: InputMaybe<Stripe_IssuingDisputeServiceNotAsDescribedEvidenceInput>;
};

export type Stripe_IssuingDisputeCanceledEvidenceInput = {
  additional_documentation?: InputMaybe<FileWrappedStringInputUnion>;
  /** Date when order was canceled. */
  canceled_at?: InputMaybe<Scalars['Int']>;
  /** Whether the cardholder was provided with a cancellation policy. */
  cancellation_policy_provided?: InputMaybe<Scalars['Boolean']>;
  /** Reason for canceling the order. */
  cancellation_reason?: InputMaybe<Scalars['String']>;
  /** Date when the cardholder expected to receive the product. */
  expected_at?: InputMaybe<Scalars['Int']>;
  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: InputMaybe<Scalars['String']>;
  /** Description of the merchandise or service that was purchased. */
  product_description?: InputMaybe<Scalars['String']>;
  /** Whether the product was a merchandise or service. */
  product_type?: InputMaybe<UpdateProfileResultProductType>;
  /** Result of cardholder's attempt to return the product. */
  return_status?: InputMaybe<UpdateProfileResultReturnStatus>;
  /** Date when the product was returned or attempted to be returned. */
  returned_at?: InputMaybe<Scalars['Int']>;
};

export enum UpdateProfileResultProductType {
  Merchandise = 'merchandise',
  Service = 'service'
}

export enum UpdateProfileResultReturnStatus {
  MerchantRejected = 'merchant_rejected',
  Successful = 'successful'
}

export type Stripe_IssuingDisputeDuplicateEvidenceInput = {
  additional_documentation?: InputMaybe<FileWrappedStringInputUnion>;
  card_statement?: InputMaybe<FileWrappedStringInputUnion>;
  cash_receipt?: InputMaybe<FileWrappedStringInputUnion>;
  check_image?: InputMaybe<FileWrappedStringInputUnion>;
  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: InputMaybe<Scalars['String']>;
  /** Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one. */
  original_transaction?: InputMaybe<Scalars['String']>;
};

export type Stripe_IssuingDisputeFraudulentEvidenceInput = {
  additional_documentation?: InputMaybe<FileWrappedStringInputUnion>;
  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: InputMaybe<Scalars['String']>;
};

export type Stripe_IssuingDisputeMerchandiseNotAsDescribedEvidenceInput = {
  additional_documentation?: InputMaybe<FileWrappedStringInputUnion>;
  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: InputMaybe<Scalars['String']>;
  /** Date when the product was received. */
  received_at?: InputMaybe<Scalars['Int']>;
  /** Description of the cardholder's attempt to return the product. */
  return_description?: InputMaybe<Scalars['String']>;
  /** Result of cardholder's attempt to return the product. */
  return_status?: InputMaybe<UpdateProfileResultReturnStatus>;
  /** Date when the product was returned or attempted to be returned. */
  returned_at?: InputMaybe<Scalars['Int']>;
};

export type Stripe_IssuingDisputeNotReceivedEvidenceInput = {
  additional_documentation?: InputMaybe<FileWrappedStringInputUnion>;
  /** Date when the cardholder expected to receive the product. */
  expected_at?: InputMaybe<Scalars['Int']>;
  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: InputMaybe<Scalars['String']>;
  /** Description of the merchandise or service that was purchased. */
  product_description?: InputMaybe<Scalars['String']>;
  /** Whether the product was a merchandise or service. */
  product_type?: InputMaybe<UpdateProfileResultProductType>;
};

export type Stripe_IssuingDisputeOtherEvidenceInput = {
  additional_documentation?: InputMaybe<FileWrappedStringInputUnion>;
  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: InputMaybe<Scalars['String']>;
  /** Description of the merchandise or service that was purchased. */
  product_description?: InputMaybe<Scalars['String']>;
  /** Whether the product was a merchandise or service. */
  product_type?: InputMaybe<UpdateProfileResultProductType>;
};

export type Stripe_IssuingDisputeServiceNotAsDescribedEvidenceInput = {
  additional_documentation?: InputMaybe<FileWrappedStringInputUnion>;
  /** Date when order was canceled. */
  canceled_at?: InputMaybe<Scalars['Int']>;
  /** Reason for canceling the order. */
  cancellation_reason?: InputMaybe<Scalars['String']>;
  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: InputMaybe<Scalars['String']>;
  /** Date when the product was received. */
  received_at?: InputMaybe<Scalars['Int']>;
};

export type IssuingTransactionWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  issuingTransaction?: InputMaybe<Stripe_IssuingTransactionInput>;
};

export type Stripe_IssuingTransactionPurchaseDetailsInput = {
  flight?: InputMaybe<Stripe_IssuingTransactionFlightDataInput>;
  fuel?: InputMaybe<Stripe_IssuingTransactionFuelDataInput>;
  lodging?: InputMaybe<Stripe_IssuingTransactionLodgingDataInput>;
  /** The line items in the purchase. */
  receipt?: InputMaybe<Array<InputMaybe<Stripe_IssuingTransactionReceiptDataInput>>>;
  /** A merchant-specific order number. */
  reference?: InputMaybe<Scalars['String']>;
};

export type Stripe_IssuingTransactionFlightDataInput = {
  /** The time that the flight departed. */
  departure_at?: InputMaybe<Scalars['Int']>;
  /** The name of the passenger. */
  passenger_name?: InputMaybe<Scalars['String']>;
  /** Whether the ticket is refundable. */
  refundable?: InputMaybe<Scalars['Boolean']>;
  /** The legs of the trip. */
  segments?: InputMaybe<Array<InputMaybe<Stripe_IssuingTransactionFlightDataLegInput>>>;
  /** The travel agency that issued the ticket. */
  travel_agency?: InputMaybe<Scalars['String']>;
};

export type Stripe_IssuingTransactionFlightDataLegInput = {
  /** The three-letter IATA airport code of the flight's destination. */
  arrival_airport_code?: InputMaybe<Scalars['String']>;
  /** The airline carrier code. */
  carrier?: InputMaybe<Scalars['String']>;
  /** The three-letter IATA airport code that the flight departed from. */
  departure_airport_code?: InputMaybe<Scalars['String']>;
  /** The flight number. */
  flight_number?: InputMaybe<Scalars['String']>;
  /** The flight's service class. */
  service_class?: InputMaybe<Scalars['String']>;
  /** Whether a stopover is allowed on this flight. */
  stopover_allowed?: InputMaybe<Scalars['Boolean']>;
};

export type Stripe_IssuingTransactionFuelDataInput = {
  /** The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`. */
  type?: InputMaybe<Scalars['String']>;
  /** The units for `volume_decimal`. One of `us_gallon` or `liter`. */
  unit?: InputMaybe<Scalars['String']>;
  /** The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places. */
  unit_cost_decimal?: InputMaybe<Scalars['String']>;
  /** The volume of the fuel that was pumped, represented as a decimal string with at most 12 decimal places. */
  volume_decimal?: InputMaybe<Scalars['String']>;
};

export type Stripe_IssuingTransactionLodgingDataInput = {
  /** The time of checking into the lodging. */
  check_in_at?: InputMaybe<Scalars['Int']>;
  /** The number of nights stayed at the lodging. */
  nights?: InputMaybe<Scalars['Int']>;
};

export type Stripe_IssuingTransactionReceiptDataInput = {
  /** The description of the item. The maximum length of this field is 26 characters. */
  description?: InputMaybe<Scalars['String']>;
  /** The quantity of the item. */
  quantity?: InputMaybe<Scalars['Float']>;
  /** The total for this line item in cents. */
  total?: InputMaybe<Scalars['Int']>;
  /** The unit cost of the item in cents. */
  unit_cost?: InputMaybe<Scalars['Int']>;
};

export enum UpdateProfileResultWallet {
  ApplePay = 'apple_pay',
  GooglePay = 'google_pay',
  SamsungPay = 'samsung_pay'
}

export type Stripe_IssuingAuthorizationVerificationDataInput = {
  /** Whether the cardholder provided an address first line and if it matched the cardholderâ€™s `billing.address.line1`. */
  address_line1_check?: InputMaybe<UpdateProfileResultAddressLine1Check>;
  /** Whether the cardholder provided a postal code and if it matched the cardholderâ€™s `billing.address.postal_code`. */
  address_postal_code_check?: InputMaybe<UpdateProfileResultAddressPostalCodeCheck>;
  /** Whether the cardholder provided a CVC and if it matched Stripeâ€™s record. */
  cvc_check?: InputMaybe<UpdateProfileResultCvcCheck>;
  /** Whether the cardholder provided an expiry date and if it matched Stripeâ€™s record. */
  expiry_check?: InputMaybe<UpdateProfileResultExpiryCheck>;
};

export enum UpdateProfileResultAddressLine1Check {
  Match = 'match',
  Mismatch = 'mismatch',
  NotProvided = 'not_provided'
}

export enum UpdateProfileResultAddressPostalCodeCheck {
  Match = 'match',
  Mismatch = 'mismatch',
  NotProvided = 'not_provided'
}

export enum UpdateProfileResultCvcCheck {
  Match = 'match',
  Mismatch = 'mismatch',
  NotProvided = 'not_provided'
}

export enum UpdateProfileResultExpiryCheck {
  Match = 'match',
  Mismatch = 'mismatch',
  NotProvided = 'not_provided'
}

export type Stripe_PayoutInput = {
  /** Amount (in %s) to be transferred to your bank account or debit card. */
  amount?: InputMaybe<Scalars['Int']>;
  /** Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays. */
  arrival_date?: InputMaybe<Scalars['Int']>;
  /** Returns `true` if the payout was created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule), and `false` if it was [requested manually](https://stripe.com/docs/payouts#manual-payouts). */
  automatic?: InputMaybe<Scalars['Boolean']>;
  balance_transaction?: InputMaybe<BalanceTransactionWrappedStringInputUnion>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: InputMaybe<Scalars['String']>;
  destination?: InputMaybe<BankAccountCardDeletedBankAccountDeletedCardWrappedStringInputUnion>;
  failure_balance_transaction?: InputMaybe<BalanceTransactionWrappedStringInputUnion>;
  /** Error code explaining reason for payout failure if available. See [Types of payout failures](https://stripe.com/docs/api#payout_failures) for a list of failure codes. */
  failure_code?: InputMaybe<Scalars['String']>;
  /** Message to user further explaining reason for payout failure if available. */
  failure_message?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces](https://stripe.com/blog/instant-payouts-for-marketplaces) for more information.) */
  method?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  original_payout?: InputMaybe<PayoutWrappedStringInputUnion>;
  reversed_by?: InputMaybe<PayoutWrappedStringInputUnion>;
  /** The source balance this payout came from. One of `card`, `fpx`, or `bank_account`. */
  source_type?: InputMaybe<Scalars['String']>;
  /** Extra information about a payout to be displayed on the user's bank statement. */
  statement_descriptor?: InputMaybe<Scalars['String']>;
  /** Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it is submitted to the bank, when it becomes `in_transit`. The status then changes to `paid` if the transaction goes through, or to `failed` or `canceled` (within 5 business days). Some failed payouts may initially show as `paid` but then change to `failed`. */
  status?: InputMaybe<Scalars['String']>;
  /** Can be `bank_account` or `card`. */
  type?: InputMaybe<UpdateProfileResultType>;
};

export type BankAccountCardDeletedBankAccountDeletedCardWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  bankAccount?: InputMaybe<Stripe_BankAccountInput>;
  card?: InputMaybe<Stripe_CardInput>;
  deletedBankAccount?: InputMaybe<Stripe_DeletedBankAccountInput>;
  deletedCard?: InputMaybe<Stripe_DeletedCardInput>;
};

export type Stripe_DeletedBankAccountInput = {
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
  currency?: InputMaybe<Scalars['String']>;
  /** Always true for a deleted object */
  deleted?: InputMaybe<Scalars['Boolean']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
};

export type Stripe_DeletedCardInput = {
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
  currency?: InputMaybe<Scalars['String']>;
  /** Always true for a deleted object */
  deleted?: InputMaybe<Scalars['Boolean']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
};

export type PayoutWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  payout?: InputMaybe<Stripe_PayoutInput>;
};

export type Stripe_PlatformTaxFeeInput = {
  /** The Connected account that incurred this charge. */
  account?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  /** The payment object that caused this tax to be inflicted. */
  source_transaction?: InputMaybe<Scalars['String']>;
  /** The type of tax (VAT). */
  type?: InputMaybe<Scalars['String']>;
};

export type Stripe_RefundInput = {
  /** Amount, in %s. */
  amount?: InputMaybe<Scalars['Int']>;
  balance_transaction?: InputMaybe<BalanceTransactionWrappedStringInputUnion>;
  charge?: InputMaybe<ChargeWrappedStringInputUnion>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only) */
  description?: InputMaybe<Scalars['String']>;
  failure_balance_transaction?: InputMaybe<BalanceTransactionWrappedStringInputUnion>;
  /** If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`. */
  failure_reason?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  next_action?: InputMaybe<Stripe_RefundNextActionInput>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  payment_intent?: InputMaybe<PaymentIntentWrappedStringInputUnion>;
  /** Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`). */
  reason?: InputMaybe<UpdateProfileResultReason>;
  /** This is the transaction number that appears on email receipts sent for this refund. */
  receipt_number?: InputMaybe<Scalars['String']>;
  source_transfer_reversal?: InputMaybe<TransferReversalWrappedStringInputUnion>;
  /** Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details. */
  status?: InputMaybe<Scalars['String']>;
  transfer_reversal?: InputMaybe<TransferReversalWrappedStringInputUnion>;
};

export type Stripe_RefundNextActionInput = {
  display_details?: InputMaybe<Stripe_RefundNextActionDisplayDetailsInput>;
  /** Type of the next action to perform. */
  type?: InputMaybe<Scalars['String']>;
};

export type Stripe_RefundNextActionDisplayDetailsInput = {
  email_sent?: InputMaybe<Stripe_EmailSentInput>;
  /** The expiry timestamp. */
  expires_at?: InputMaybe<Scalars['Int']>;
};

export type Stripe_EmailSentInput = {
  /** The timestamp when the email was sent. */
  email_sent_at?: InputMaybe<Scalars['Int']>;
  /** The recipient's email address. */
  email_sent_to?: InputMaybe<Scalars['String']>;
};

export type TransferReversalWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  transferReversal?: InputMaybe<Stripe_TransferReversalInput>;
};

export type Stripe_TransferReversalInput = {
  /** Amount, in %s. */
  amount?: InputMaybe<Scalars['Int']>;
  balance_transaction?: InputMaybe<BalanceTransactionWrappedStringInputUnion>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  destination_payment_refund?: InputMaybe<RefundWrappedStringInputUnion>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  source_refund?: InputMaybe<RefundWrappedStringInputUnion>;
  transfer?: InputMaybe<TransferWrappedStringInputUnion>;
};

export type RefundWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  refund?: InputMaybe<Stripe_RefundInput>;
};

export type TransferWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  transfer?: InputMaybe<Stripe_TransferInput>;
};

export type Stripe_TransferInput = {
  /** Amount in %s to be transferred. */
  amount?: InputMaybe<Scalars['Int']>;
  /** Amount in %s reversed (can be less than the amount attribute on the transfer if a partial reversal was issued). */
  amount_reversed?: InputMaybe<Scalars['Int']>;
  balance_transaction?: InputMaybe<BalanceTransactionWrappedStringInputUnion>;
  /** Time that this record of the transfer was first created. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: InputMaybe<Scalars['String']>;
  destination?: InputMaybe<AccountWrappedStringInputUnion>;
  destination_payment?: InputMaybe<ChargeWrappedStringInputUnion>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  /** A list of reversals that have been applied to the transfer. */
  reversals?: InputMaybe<PropertiesTransferPropertiesReversalsPropertyInput>;
  /** Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false. */
  reversed?: InputMaybe<Scalars['Boolean']>;
  source_transaction?: InputMaybe<ChargeWrappedStringInputUnion>;
  /** The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`. */
  source_type?: InputMaybe<Scalars['String']>;
  /** A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
  transfer_group?: InputMaybe<Scalars['String']>;
};

/** A list of reversals that have been applied to the transfer. */
export type PropertiesTransferPropertiesReversalsPropertyInput = {
  /** Details about each object. */
  data: Array<Stripe_TransferReversalInput>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: UpdateProfileResultObject;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Stripe_ReserveTransactionInput = {
  amount?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
};

export type Stripe_TaxDeductedAtSourceInput = {
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  /** The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period. */
  period_end?: InputMaybe<Scalars['Int']>;
  /** The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period. */
  period_start?: InputMaybe<Scalars['Int']>;
  /** The TAN that was supplied to Stripe when TDS was assessed */
  tax_deduction_account_number?: InputMaybe<Scalars['String']>;
};

export type Stripe_TopupInput = {
  /** Amount transferred. */
  amount?: InputMaybe<Scalars['Int']>;
  balance_transaction?: InputMaybe<BalanceTransactionWrappedStringInputUnion>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: InputMaybe<Scalars['String']>;
  /** Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up. */
  expected_availability_date?: InputMaybe<Scalars['Int']>;
  /** Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes). */
  failure_code?: InputMaybe<Scalars['String']>;
  /** Message to user further explaining reason for top-up failure if available. */
  failure_message?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  source?: InputMaybe<Stripe_SourceInput>;
  /** Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter. */
  statement_descriptor?: InputMaybe<Scalars['String']>;
  /** The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`. */
  status?: InputMaybe<UpdateProfileResultStatus>;
  /** A string that identifies this top-up as part of a group. */
  transfer_group?: InputMaybe<Scalars['String']>;
};

/** A list of refunds that have been applied to the fee. */
export type PropertiesApplicationFeePropertiesRefundsPropertyInput = {
  /** Details about each object. */
  data: Array<Stripe_FeeRefundInput>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: UpdateProfileResultObject;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Stripe_ChargeFraudDetailsInput = {
  /** Assessments from Stripe. If set, the value is `fraudulent`. */
  stripe_report?: InputMaybe<Scalars['String']>;
  /** Assessments reported by you. If set, possible values of are `safe` and `fraudulent`. */
  user_report?: InputMaybe<Scalars['String']>;
};

export type InvoiceWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  invoice?: InputMaybe<Stripe_InvoiceInput>;
};

export type OrderWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  order?: InputMaybe<Stripe_OrderInput>;
};

export type Stripe_OrderInput = {
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order. */
  amount?: InputMaybe<Scalars['Int']>;
  /** The total amount that was returned to the customer. */
  amount_returned?: InputMaybe<Scalars['Int']>;
  /** ID of the Connect Application that created the order. */
  application?: InputMaybe<Scalars['String']>;
  /** A fee in cents that will be applied to the order and transferred to the application ownerâ€™s Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees documentation. */
  application_fee?: InputMaybe<Scalars['Int']>;
  charge?: InputMaybe<ChargeWrappedStringInputUnion>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  customer?: InputMaybe<Scalars['String']>;
  /** The email address of the customer placing the order. */
  email?: InputMaybe<Scalars['String']>;
  /** External coupon code to load for this order. */
  external_coupon_code?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** List of items constituting the order. An order can have up to 25 items. */
  items?: InputMaybe<Array<InputMaybe<Stripe_OrderItemInput>>>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  /** A list of returns that have taken place for this order. */
  returns?: InputMaybe<PropertiesOrderPropertiesReturnsPropertyInput>;
  /** The shipping method that is currently selected for this order, if any. If present, it is equal to one of the `id`s of shipping methods in the `shipping_methods` array. At order creation time, if there are multiple shipping methods, Stripe will automatically selected the first method. */
  selected_shipping_method?: InputMaybe<Scalars['String']>;
  shipping?: InputMaybe<Stripe_ShippingInput>;
  /** A list of supported shipping methods for this order. The desired shipping method can be specified either by updating the order, or when paying it. */
  shipping_methods?: InputMaybe<Array<InputMaybe<Stripe_ShippingMethodInput>>>;
  /** Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More details in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses). */
  status?: InputMaybe<Scalars['String']>;
  status_transitions?: InputMaybe<Stripe_StatusTransitionsInput>;
  /** Time at which the object was last updated. Measured in seconds since the Unix epoch. */
  updated?: InputMaybe<Scalars['Int']>;
  /** The user's order ID if it is different from the Stripe order ID. */
  upstream_id?: InputMaybe<Scalars['String']>;
};

export type Stripe_OrderItemInput = {
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item. */
  amount?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  /** Description of the line item, meant to be displayable to the user (e.g., `"Express shipping"`). */
  description?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  parent?: InputMaybe<SkuWrappedStringInputUnion>;
  /** A positive integer representing the number of instances of `parent` that are included in this order item. Applicable/present only if `type` is `sku`. */
  quantity?: InputMaybe<Scalars['Int']>;
  /** The type of line item. One of `sku`, `tax`, `shipping`, or `discount`. */
  type?: InputMaybe<Scalars['String']>;
};

export type SkuWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  sku?: InputMaybe<Stripe_SkuInput>;
};

export type Stripe_SkuInput = {
  /** Whether the SKU is available for purchase. */
  active?: InputMaybe<Scalars['Boolean']>;
  /** A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`. */
  attributes?: InputMaybe<Scalars['JSONObject']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** The URL of an image for this SKU, meant to be displayable to the customer. */
  image?: InputMaybe<Scalars['String']>;
  inventory?: InputMaybe<Stripe_SkuInventoryInput>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  package_dimensions?: InputMaybe<Stripe_PackageDimensionsInput>;
  /** The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge Â¥100, Japanese Yen being a zero-decimal currency). */
  price?: InputMaybe<Scalars['Int']>;
  product?: InputMaybe<ProductWrappedStringInputUnion>;
  /** Time at which the object was last updated. Measured in seconds since the Unix epoch. */
  updated?: InputMaybe<Scalars['Int']>;
};

export type Stripe_SkuInventoryInput = {
  /** The count of inventory available. Will be present if and only if `type` is `finite`. */
  quantity?: InputMaybe<Scalars['Int']>;
  /** Inventory type. Possible values are `finite`, `bucket` (not quantified), and `infinite`. */
  type?: InputMaybe<Scalars['String']>;
  /** An indicator of the inventory available. Possible values are `in_stock`, `limited`, and `out_of_stock`. Will be present if and only if `type` is `bucket`. */
  value?: InputMaybe<Scalars['String']>;
};

export type Stripe_PackageDimensionsInput = {
  /** Height, in inches. */
  height?: InputMaybe<Scalars['Float']>;
  /** Length, in inches. */
  length?: InputMaybe<Scalars['Float']>;
  /** Weight, in ounces. */
  weight?: InputMaybe<Scalars['Float']>;
  /** Width, in inches. */
  width?: InputMaybe<Scalars['Float']>;
};

export type ProductWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  product?: InputMaybe<Stripe_ProductInput>;
};

export type Stripe_ProductInput = {
  /** Whether the product is currently available for purchase. */
  active?: InputMaybe<Scalars['Boolean']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes. */
  description?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** A list of up to 8 URLs of images for this product, meant to be displayable to the customer. */
  images?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** The product's name, meant to be displayable to the customer. */
  name?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  package_dimensions?: InputMaybe<Stripe_PackageDimensionsInput>;
  /** Whether this product is shipped (i.e., physical goods). */
  shippable?: InputMaybe<Scalars['Boolean']>;
  /** Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used. */
  statement_descriptor?: InputMaybe<Scalars['String']>;
  tax_code?: InputMaybe<TaxCodeWrappedStringInputUnion>;
  /** A label that represents units of this product in Stripe and on customersâ€™ receipts and invoices. When set, this will be included in associated invoice line item descriptions. */
  unit_label?: InputMaybe<Scalars['String']>;
  /** Time at which the object was last updated. Measured in seconds since the Unix epoch. */
  updated?: InputMaybe<Scalars['Int']>;
  /** A URL of a publicly-accessible webpage for this product. */
  url?: InputMaybe<Scalars['String']>;
  prices?: InputMaybe<Array<InputMaybe<Stripe_PriceInput>>>;
  _shapeId?: InputMaybe<Scalars['String']>;
  _id?: InputMaybe<Scalars['ID']>;
};

export type TaxCodeWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  taxCode?: InputMaybe<Stripe_TaxCodeInput>;
};

export type Stripe_TaxCodeInput = {
  /** A detailed description of which types of products the tax code represents. */
  description?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** A short name for the tax code. */
  name?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
};

export type Stripe_PriceInput = {
  /** Whether the price can be used for new purchases. */
  active?: InputMaybe<Scalars['Boolean']>;
  /** Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes. */
  billing_scheme?: InputMaybe<UpdateProfileResultBillingScheme>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters. */
  lookup_key?: InputMaybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** A brief description of the price, hidden from customers. */
  nickname?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  recurring?: InputMaybe<Stripe_RecurringInput>;
  /** Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed. */
  tax_behavior?: InputMaybe<UpdateProfileResultTaxBehavior>;
  /** Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
  tiers?: InputMaybe<Array<InputMaybe<Stripe_PriceTierInput>>>;
  /** Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows. */
  tiers_mode?: InputMaybe<UpdateProfileResultTiersMode>;
  transform_quantity?: InputMaybe<Stripe_TransformQuantityInput>;
  /** One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase. */
  type?: InputMaybe<UpdateProfileResultType>;
  /** The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`. */
  unit_amount?: InputMaybe<Scalars['Int']>;
  /** The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`. */
  unit_amount_decimal?: InputMaybe<Scalars['String']>;
};

export enum UpdateProfileResultBillingScheme {
  PerUnit = 'per_unit',
  Tiered = 'tiered'
}

export type Stripe_RecurringInput = {
  /** Specifies a usage aggregation strategy for prices of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`. */
  aggregate_usage?: InputMaybe<UpdateProfileResultAggregateUsage>;
  /** The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`. */
  interval?: InputMaybe<UpdateProfileResultInterval>;
  /** The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. */
  interval_count?: InputMaybe<Scalars['Int']>;
  /** Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`. */
  usage_type?: InputMaybe<UpdateProfileResultUsageType>;
};

export enum UpdateProfileResultAggregateUsage {
  LastDuringPeriod = 'last_during_period',
  LastEver = 'last_ever',
  Max = 'max',
  Sum = 'sum'
}

export enum UpdateProfileResultUsageType {
  Licensed = 'licensed',
  Metered = 'metered'
}

export enum UpdateProfileResultTaxBehavior {
  Exclusive = 'exclusive',
  Inclusive = 'inclusive',
  Unspecified = 'unspecified'
}

export type Stripe_PriceTierInput = {
  /** Price for the entire tier. */
  flat_amount?: InputMaybe<Scalars['Int']>;
  /** Same as `flat_amount`, but contains a decimal value with at most 12 decimal places. */
  flat_amount_decimal?: InputMaybe<Scalars['String']>;
  /** Per unit price for units relevant to the tier. */
  unit_amount?: InputMaybe<Scalars['Int']>;
  /** Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. */
  unit_amount_decimal?: InputMaybe<Scalars['String']>;
  /** Up to and including to this quantity will be contained in the tier. */
  up_to?: InputMaybe<Scalars['Int']>;
};

export enum UpdateProfileResultTiersMode {
  Graduated = 'graduated',
  Volume = 'volume'
}

export type Stripe_TransformQuantityInput = {
  /** Divide usage by this number. */
  divide_by?: InputMaybe<Scalars['Int']>;
  /** After division, either round the result `up` or `down`. */
  round?: InputMaybe<UpdateProfileResultRound>;
};

export enum UpdateProfileResultRound {
  Down = 'down',
  Up = 'up'
}

/** A list of returns that have taken place for this order. */
export type PropertiesOrderPropertiesReturnsPropertyInput = {
  /** Details about each object. */
  data: Array<Stripe_OrderReturnInput>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: UpdateProfileResultObject;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Stripe_OrderReturnInput = {
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the returned line item. */
  amount?: InputMaybe<Scalars['Int']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** The items included in this order return. */
  items?: InputMaybe<Array<InputMaybe<Stripe_OrderItemInput>>>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  order?: InputMaybe<OrderWrappedStringInputUnion>;
  refund?: InputMaybe<RefundWrappedStringInputUnion>;
};

export type Stripe_ShippingMethodInput = {
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item. */
  amount?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  delivery_estimate?: InputMaybe<Stripe_DeliveryEstimateInput>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
};

export type Stripe_DeliveryEstimateInput = {
  /** If `type` is `"exact"`, `date` will be the expected delivery date in the format YYYY-MM-DD. */
  date?: InputMaybe<Scalars['String']>;
  /** If `type` is `"range"`, `earliest` will be be the earliest delivery date in the format YYYY-MM-DD. */
  earliest?: InputMaybe<Scalars['String']>;
  /** If `type` is `"range"`, `latest` will be the latest delivery date in the format YYYY-MM-DD. */
  latest?: InputMaybe<Scalars['String']>;
  /** The type of estimate. Must be either `"range"` or `"exact"`. */
  type?: InputMaybe<Scalars['String']>;
};

export type Stripe_StatusTransitionsInput = {
  /** The time that the order was canceled. */
  canceled?: InputMaybe<Scalars['Int']>;
  /** The time that the order was fulfilled. */
  fulfiled?: InputMaybe<Scalars['Int']>;
  /** The time that the order was paid. */
  paid?: InputMaybe<Scalars['Int']>;
  /** The time that the order was returned. */
  returned?: InputMaybe<Scalars['Int']>;
};

export type Stripe_ChargeOutcomeInput = {
  /** Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement. */
  network_status?: InputMaybe<Scalars['String']>;
  /** An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details. */
  reason?: InputMaybe<Scalars['String']>;
  /** Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. This field is only available with Radar. */
  risk_level?: InputMaybe<Scalars['String']>;
  /** Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams. */
  risk_score?: InputMaybe<Scalars['Int']>;
  rule?: InputMaybe<RuleWrappedStringInputUnion>;
  /** A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer. */
  seller_message?: InputMaybe<Scalars['String']>;
  /** Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details. */
  type?: InputMaybe<Scalars['String']>;
};

export type RuleWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  rule?: InputMaybe<Stripe_RuleInput>;
};

export type Stripe_RuleInput = {
  /** The action taken on the payment. */
  action?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** The predicate to evaluate the payment against. */
  predicate?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsInput = {
  ach_credit_transfer?: InputMaybe<Stripe_PaymentMethodDetailsAchCreditTransferInput>;
  ach_debit?: InputMaybe<Stripe_PaymentMethodDetailsAchDebitInput>;
  acss_debit?: InputMaybe<Stripe_PaymentMethodDetailsAcssDebitInput>;
  afterpay_clearpay?: InputMaybe<Stripe_PaymentMethodDetailsAfterpayClearpayInput>;
  alipay?: InputMaybe<Stripe_PaymentFlowsPrivatePaymentMethodsAlipayDetailsInput>;
  au_becs_debit?: InputMaybe<Stripe_PaymentMethodDetailsAuBecsDebitInput>;
  bacs_debit?: InputMaybe<Stripe_PaymentMethodDetailsBacsDebitInput>;
  bancontact?: InputMaybe<Stripe_PaymentMethodDetailsBancontactInput>;
  boleto?: InputMaybe<Stripe_PaymentMethodDetailsBoletoInput>;
  card?: InputMaybe<Stripe_PaymentMethodDetailsCardInput>;
  card_present?: InputMaybe<Stripe_PaymentMethodDetailsCardPresentInput>;
  customer_balance?: InputMaybe<Stripe_PaymentMethodDetailsCustomerBalanceInput>;
  eps?: InputMaybe<Stripe_PaymentMethodDetailsEpsInput>;
  fpx?: InputMaybe<Stripe_PaymentMethodDetailsFpxInput>;
  giropay?: InputMaybe<Stripe_PaymentMethodDetailsGiropayInput>;
  grabpay?: InputMaybe<Stripe_PaymentMethodDetailsGrabpayInput>;
  ideal?: InputMaybe<Stripe_PaymentMethodDetailsIdealInput>;
  interac_present?: InputMaybe<Stripe_PaymentMethodDetailsInteracPresentInput>;
  klarna?: InputMaybe<Stripe_PaymentMethodDetailsKlarnaInput>;
  konbini?: InputMaybe<Stripe_PaymentMethodDetailsKonbiniInput>;
  multibanco?: InputMaybe<Stripe_PaymentMethodDetailsMultibancoInput>;
  oxxo?: InputMaybe<Stripe_PaymentMethodDetailsOxxoInput>;
  p24?: InputMaybe<Stripe_PaymentMethodDetailsP24Input>;
  paynow?: InputMaybe<Stripe_PaymentMethodDetailsPaynowInput>;
  sepa_debit?: InputMaybe<Stripe_PaymentMethodDetailsSepaDebitInput>;
  sofort?: InputMaybe<Stripe_PaymentMethodDetailsSofortInput>;
  stripe_account?: InputMaybe<Stripe_PaymentMethodDetailsStripeAccountInput>;
  /**
   * The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `acss_debit`, `alipay`, `au_becs_debit`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`.
   * An additional hash is included on `payment_method_details` with a name matching this value.
   * It contains information specific to the payment method.
   */
  type?: InputMaybe<Scalars['String']>;
  us_bank_account?: InputMaybe<Stripe_PaymentMethodDetailsUsBankAccountInput>;
  wechat?: InputMaybe<Stripe_PaymentMethodDetailsWechatInput>;
  wechat_pay?: InputMaybe<Stripe_PaymentMethodDetailsWechatPayInput>;
};

export type Stripe_PaymentMethodDetailsAchCreditTransferInput = {
  /** Account number to transfer funds to. */
  account_number?: InputMaybe<Scalars['String']>;
  /** Name of the bank associated with the routing number. */
  bank_name?: InputMaybe<Scalars['String']>;
  /** Routing transit number for the bank account to transfer funds to. */
  routing_number?: InputMaybe<Scalars['String']>;
  /** SWIFT code of the bank associated with the routing number. */
  swift_code?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsAchDebitInput = {
  /** Type of entity that holds the account. This can be either `individual` or `company`. */
  account_holder_type?: InputMaybe<UpdateProfileResultAccountHolderType>;
  /** Name of the bank associated with the bank account. */
  bank_name?: InputMaybe<Scalars['String']>;
  /** Two-letter ISO code representing the country the bank account is located in. */
  country?: InputMaybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: InputMaybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: InputMaybe<Scalars['String']>;
  /** Routing transit number of the bank account. */
  routing_number?: InputMaybe<Scalars['String']>;
};

export enum UpdateProfileResultAccountHolderType {
  Company = 'company',
  Individual = 'individual'
}

export type Stripe_PaymentMethodDetailsAcssDebitInput = {
  /** Name of the bank associated with the bank account. */
  bank_name?: InputMaybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: InputMaybe<Scalars['String']>;
  /** Institution number of the bank account */
  institution_number?: InputMaybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: InputMaybe<Scalars['String']>;
  /** ID of the mandate used to make this payment. */
  mandate?: InputMaybe<Scalars['String']>;
  /** Transit number of the bank account. */
  transit_number?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsAfterpayClearpayInput = {
  /** Order identifier shown to the merchant in Afterpayâ€™s online portal. */
  reference?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentFlowsPrivatePaymentMethodsAlipayDetailsInput = {
  /** Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same. */
  buyer_id?: InputMaybe<Scalars['String']>;
  /** Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same. */
  fingerprint?: InputMaybe<Scalars['String']>;
  /** Transaction ID of this particular Alipay transaction. */
  transaction_id?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsAuBecsDebitInput = {
  /** Bank-State-Branch number of the bank account. */
  bsb_number?: InputMaybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: InputMaybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: InputMaybe<Scalars['String']>;
  /** ID of the mandate used to make this payment. */
  mandate?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsBacsDebitInput = {
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: InputMaybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: InputMaybe<Scalars['String']>;
  /** ID of the mandate used to make this payment. */
  mandate?: InputMaybe<Scalars['String']>;
  /** Sort code of the bank account. (e.g., `10-20-30`) */
  sort_code?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsBancontactInput = {
  /** Bank code of bank associated with the bank account. */
  bank_code?: InputMaybe<Scalars['String']>;
  /** Name of the bank associated with the bank account. */
  bank_name?: InputMaybe<Scalars['String']>;
  /** Bank Identifier Code of the bank associated with the bank account. */
  bic?: InputMaybe<Scalars['String']>;
  generated_sepa_debit?: InputMaybe<PaymentMethodWrappedStringInputUnion>;
  generated_sepa_debit_mandate?: InputMaybe<MandateWrappedStringInputUnion>;
  /** Last four characters of the IBAN. */
  iban_last4?: InputMaybe<Scalars['String']>;
  /**
   * Preferred language of the Bancontact authorization page that the customer is redirected to.
   * Can be one of `en`, `de`, `fr`, or `nl`
   */
  preferred_language?: InputMaybe<UpdateProfileResultPreferredLanguage>;
  /**
   * Owner's verified full name. Values are verified or provided by Bancontact directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsBoletoInput = {
  /** The tax ID of the customer (CPF for individuals consumers or CNPJ for businesses consumers) */
  tax_id?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsCardInput = {
  /** Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  brand?: InputMaybe<Scalars['String']>;
  checks?: InputMaybe<Stripe_PaymentMethodDetailsCardChecksInput>;
  /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
  country?: InputMaybe<Scalars['String']>;
  /** Two-digit number representing the card's expiration month. */
  exp_month?: InputMaybe<Scalars['Int']>;
  /** Four-digit number representing the card's expiration year. */
  exp_year?: InputMaybe<Scalars['Int']>;
  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   */
  fingerprint?: InputMaybe<Scalars['String']>;
  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: InputMaybe<Scalars['String']>;
  installments?: InputMaybe<Stripe_PaymentMethodDetailsCardInstallmentsInput>;
  /** The last four digits of the card. */
  last4?: InputMaybe<Scalars['String']>;
  /** ID of the mandate used to make this payment or created by it. */
  mandate?: InputMaybe<Scalars['String']>;
  /** Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  network?: InputMaybe<Scalars['String']>;
  three_d_secure?: InputMaybe<Stripe_ThreeDSecureDetailsInput>;
  wallet?: InputMaybe<Stripe_PaymentMethodDetailsCardWalletInput>;
};

export type Stripe_PaymentMethodDetailsCardChecksInput = {
  /** If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  address_line1_check?: InputMaybe<Scalars['String']>;
  /** If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  address_postal_code_check?: InputMaybe<Scalars['String']>;
  /** If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  cvc_check?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsCardInstallmentsInput = {
  plan?: InputMaybe<Stripe_PaymentMethodDetailsCardInstallmentsPlanInput>;
};

export type Stripe_PaymentMethodDetailsCardInstallmentsPlanInput = {
  /** For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card. */
  count?: InputMaybe<Scalars['Int']>;
  /**
   * For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
   * One of `month`.
   */
  interval?: InputMaybe<UpdateProfileResultInterval>;
  /** Type of installment plan, one of `fixed_count`. */
  type?: InputMaybe<UpdateProfileResultType>;
};

export type Stripe_PaymentMethodDetailsCardWalletInput = {
  amex_express_checkout?: InputMaybe<Stripe_PaymentMethodDetailsCardWalletAmexExpressCheckoutInput>;
  apple_pay?: InputMaybe<Stripe_PaymentMethodDetailsCardWalletApplePayInput>;
  /** (For tokenized numbers only.) The last four digits of the device account number. */
  dynamic_last4?: InputMaybe<Scalars['String']>;
  google_pay?: InputMaybe<Stripe_PaymentMethodDetailsCardWalletGooglePayInput>;
  masterpass?: InputMaybe<Stripe_PaymentMethodDetailsCardWalletMasterpassInput>;
  samsung_pay?: InputMaybe<Stripe_PaymentMethodDetailsCardWalletSamsungPayInput>;
  /** The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type. */
  type?: InputMaybe<UpdateProfileResultType>;
  visa_checkout?: InputMaybe<Stripe_PaymentMethodDetailsCardWalletVisaCheckoutInput>;
};

export type Stripe_PaymentMethodDetailsCardWalletAmexExpressCheckoutInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodDetailsCardWalletApplePayInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodDetailsCardWalletGooglePayInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodDetailsCardWalletMasterpassInput = {
  billing_address?: InputMaybe<Stripe_AddressInput>;
  /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  email?: InputMaybe<Scalars['String']>;
  /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  name?: InputMaybe<Scalars['String']>;
  shipping_address?: InputMaybe<Stripe_AddressInput>;
};

export type Stripe_PaymentMethodDetailsCardWalletSamsungPayInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodDetailsCardWalletVisaCheckoutInput = {
  billing_address?: InputMaybe<Stripe_AddressInput>;
  /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  email?: InputMaybe<Scalars['String']>;
  /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  name?: InputMaybe<Scalars['String']>;
  shipping_address?: InputMaybe<Stripe_AddressInput>;
};

export type Stripe_PaymentMethodDetailsCustomerBalanceInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodDetailsEpsInput = {
  /** The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`. */
  bank?: InputMaybe<UpdateProfileResultBank>;
  /**
   * Owner's verified full name. Values are verified or provided by EPS directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   * EPS rarely provides this information so the attribute is usually empty.
   */
  verified_name?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsFpxInput = {
  /** The customer's bank. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`. */
  bank?: InputMaybe<UpdateProfileResultBank>;
  /** Unique transaction id generated by FPX for every request from the merchant */
  transaction_id?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsGiropayInput = {
  /** Bank code of bank associated with the bank account. */
  bank_code?: InputMaybe<Scalars['String']>;
  /** Name of the bank associated with the bank account. */
  bank_name?: InputMaybe<Scalars['String']>;
  /** Bank Identifier Code of the bank associated with the bank account. */
  bic?: InputMaybe<Scalars['String']>;
  /**
   * Owner's verified full name. Values are verified or provided by Giropay directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   * Giropay rarely provides this information so the attribute is usually empty.
   */
  verified_name?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsGrabpayInput = {
  /** Unique transaction id generated by GrabPay */
  transaction_id?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsIdealInput = {
  /** The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`. */
  bank?: InputMaybe<UpdateProfileResultBank>;
  /** The Bank Identifier Code of the customer's bank. */
  bic?: InputMaybe<UpdateProfileResultBic>;
  generated_sepa_debit?: InputMaybe<PaymentMethodWrappedStringInputUnion>;
  generated_sepa_debit_mandate?: InputMaybe<MandateWrappedStringInputUnion>;
  /** Last four characters of the IBAN. */
  iban_last4?: InputMaybe<Scalars['String']>;
  /**
   * Owner's verified full name. Values are verified or provided by iDEAL directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsInteracPresentInput = {
  /** Card brand. Can be `interac`, `mastercard` or `visa`. */
  brand?: InputMaybe<Scalars['String']>;
  /** The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay. */
  cardholder_name?: InputMaybe<Scalars['String']>;
  /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
  country?: InputMaybe<Scalars['String']>;
  /** Authorization response cryptogram. */
  emv_auth_data?: InputMaybe<Scalars['String']>;
  /** Two-digit number representing the card's expiration month. */
  exp_month?: InputMaybe<Scalars['Int']>;
  /** Four-digit number representing the card's expiration year. */
  exp_year?: InputMaybe<Scalars['Int']>;
  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   */
  fingerprint?: InputMaybe<Scalars['String']>;
  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: InputMaybe<Scalars['String']>;
  /** ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod. */
  generated_card?: InputMaybe<Scalars['String']>;
  /** The last four digits of the card. */
  last4?: InputMaybe<Scalars['String']>;
  /** Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  network?: InputMaybe<Scalars['String']>;
  /** EMV tag 5F2D. Preferred languages specified by the integrated circuit chip. */
  preferred_locales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** How card details were read in this transaction. */
  read_method?: InputMaybe<UpdateProfileResultReadMethod>;
  receipt?: InputMaybe<Stripe_PaymentMethodDetailsInteracPresentReceiptInput>;
};

export type Stripe_PaymentMethodDetailsInteracPresentReceiptInput = {
  /** The type of account being debited or credited */
  account_type?: InputMaybe<UpdateProfileResultAccountType>;
  /** EMV tag 9F26, cryptogram generated by the integrated circuit chip. */
  application_cryptogram?: InputMaybe<Scalars['String']>;
  /** Mnenomic of the Application Identifier. */
  application_preferred_name?: InputMaybe<Scalars['String']>;
  /** Identifier for this transaction. */
  authorization_code?: InputMaybe<Scalars['String']>;
  /** EMV tag 8A. A code returned by the card issuer. */
  authorization_response_code?: InputMaybe<Scalars['String']>;
  /** How the cardholder verified ownership of the card. */
  cardholder_verification_method?: InputMaybe<Scalars['String']>;
  /** EMV tag 84. Similar to the application identifier stored on the integrated circuit chip. */
  dedicated_file_name?: InputMaybe<Scalars['String']>;
  /** The outcome of a series of EMV functions performed by the card reader. */
  terminal_verification_results?: InputMaybe<Scalars['String']>;
  /** An indication of various EMV functions performed during the transaction. */
  transaction_status_information?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsKlarnaInput = {
  /**
   * The Klarna payment method used for this transaction.
   * Can be one of `pay_later`, `pay_now`, `pay_with_financing`, or `pay_in_installments`
   */
  payment_method_category?: InputMaybe<Scalars['String']>;
  /**
   * Preferred language of the Klarna authorization page that the customer is redirected to.
   * Can be one of `de-AT`, `en-AT`, `nl-BE`, `fr-BE`, `en-BE`, `de-DE`, `en-DE`, `da-DK`, `en-DK`, `es-ES`, `en-ES`, `fi-FI`, `sv-FI`, `en-FI`, `en-GB`, `en-IE`, `it-IT`, `en-IT`, `nl-NL`, `en-NL`, `nb-NO`, `en-NO`, `sv-SE`, `en-SE`, `en-US`, `es-US`, `fr-FR`, or `en-FR`
   */
  preferred_locale?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsKonbiniInput = {
  store?: InputMaybe<Stripe_PaymentMethodDetailsKonbiniStoreInput>;
};

export type Stripe_PaymentMethodDetailsKonbiniStoreInput = {
  /** The name of the convenience store chain where the payment was completed. */
  chain?: InputMaybe<UpdateProfileResultChain>;
};

export enum UpdateProfileResultChain {
  Familymart = 'familymart',
  Lawson = 'lawson',
  Ministop = 'ministop',
  Seicomart = 'seicomart'
}

export type Stripe_PaymentMethodDetailsMultibancoInput = {
  /** Entity number associated with this Multibanco payment. */
  entity?: InputMaybe<Scalars['String']>;
  /** Reference number associated with this Multibanco payment. */
  reference?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsOxxoInput = {
  /** OXXO reference number */
  number?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsP24Input = {
  /** The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`. */
  bank?: InputMaybe<UpdateProfileResultBank>;
  /** Unique reference for this Przelewy24 payment. */
  reference?: InputMaybe<Scalars['String']>;
  /**
   * Owner's verified full name. Values are verified or provided by Przelewy24 directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   * Przelewy24 rarely provides this information so the attribute is usually empty.
   */
  verified_name?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsPaynowInput = {
  /** Reference number associated with this PayNow payment */
  reference?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsSepaDebitInput = {
  /** Bank code of bank associated with the bank account. */
  bank_code?: InputMaybe<Scalars['String']>;
  /** Branch code of bank associated with the bank account. */
  branch_code?: InputMaybe<Scalars['String']>;
  /** Two-letter ISO code representing the country the bank account is located in. */
  country?: InputMaybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: InputMaybe<Scalars['String']>;
  /** Last four characters of the IBAN. */
  last4?: InputMaybe<Scalars['String']>;
  /** ID of the mandate used to make this payment. */
  mandate?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsSofortInput = {
  /** Bank code of bank associated with the bank account. */
  bank_code?: InputMaybe<Scalars['String']>;
  /** Name of the bank associated with the bank account. */
  bank_name?: InputMaybe<Scalars['String']>;
  /** Bank Identifier Code of the bank associated with the bank account. */
  bic?: InputMaybe<Scalars['String']>;
  /** Two-letter ISO code representing the country the bank account is located in. */
  country?: InputMaybe<Scalars['String']>;
  generated_sepa_debit?: InputMaybe<PaymentMethodWrappedStringInputUnion>;
  generated_sepa_debit_mandate?: InputMaybe<MandateWrappedStringInputUnion>;
  /** Last four characters of the IBAN. */
  iban_last4?: InputMaybe<Scalars['String']>;
  /**
   * Preferred language of the SOFORT authorization page that the customer is redirected to.
   * Can be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`
   */
  preferred_language?: InputMaybe<UpdateProfileResultPreferredLanguage>;
  /**
   * Owner's verified full name. Values are verified or provided by SOFORT directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsStripeAccountInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodDetailsUsBankAccountInput = {
  /** Account holder type: individual or company. */
  account_holder_type?: InputMaybe<UpdateProfileResultAccountHolderType>;
  /** Account type: checkings or savings. Defaults to checking if omitted. */
  account_type?: InputMaybe<UpdateProfileResultAccountType>;
  /** Name of the bank associated with the bank account. */
  bank_name?: InputMaybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: InputMaybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: InputMaybe<Scalars['String']>;
  /** Routing number of the bank account. */
  routing_number?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodDetailsWechatInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodDetailsWechatPayInput = {
  /** Uniquely identifies this particular WeChat Pay account. You can use this attribute to check whether two WeChat accounts are the same. */
  fingerprint?: InputMaybe<Scalars['String']>;
  /** Transaction ID of this particular WeChat Pay transaction. */
  transaction_id?: InputMaybe<Scalars['String']>;
};

/** A list of refunds that have been applied to the charge. */
export type UpdateProfilePropertiesPropertiesOrdersItemsPropertiesLastFinalizationErrorPropertiesPaymentIntentPropertiesChargesPropertiesDataItemsPropertiesRefundsPropertyInput = {
  /** Details about each object. */
  data: Array<Stripe_RefundInput>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: UpdateProfileResultObject;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type ReviewWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  review?: InputMaybe<Stripe_ReviewInput>;
};

export type Stripe_ReviewInput = {
  /** The ZIP or postal code of the card used, if applicable. */
  billing_zip?: InputMaybe<Scalars['String']>;
  charge?: InputMaybe<ChargeWrappedStringInputUnion>;
  /** The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`. */
  closed_reason?: InputMaybe<UpdateProfileResultClosedReason>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** The IP address where the payment originated. */
  ip_address?: InputMaybe<Scalars['String']>;
  ip_address_location?: InputMaybe<Stripe_RadarReviewResourceLocationInput>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  /** If `true`, the review needs action. */
  open?: InputMaybe<Scalars['Boolean']>;
  /** The reason the review was opened. One of `rule` or `manual`. */
  opened_reason?: InputMaybe<UpdateProfileResultOpenedReason>;
  payment_intent?: InputMaybe<PaymentIntentWrappedStringInputUnion>;
  /** The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`. */
  reason?: InputMaybe<Scalars['String']>;
  session?: InputMaybe<Stripe_RadarReviewResourceSessionInput>;
};

export enum UpdateProfileResultClosedReason {
  Approved = 'approved',
  Disputed = 'disputed',
  Redacted = 'redacted',
  Refunded = 'refunded',
  RefundedAsFraud = 'refunded_as_fraud'
}

export type Stripe_RadarReviewResourceLocationInput = {
  /** The city where the payment originated. */
  city?: InputMaybe<Scalars['String']>;
  /** Two-letter ISO code representing the country where the payment originated. */
  country?: InputMaybe<Scalars['String']>;
  /** The geographic latitude where the payment originated. */
  latitude?: InputMaybe<Scalars['Float']>;
  /** The geographic longitude where the payment originated. */
  longitude?: InputMaybe<Scalars['Float']>;
  /** The state/county/province/region where the payment originated. */
  region?: InputMaybe<Scalars['String']>;
};

export enum UpdateProfileResultOpenedReason {
  Manual = 'manual',
  Rule = 'rule'
}

export type Stripe_RadarReviewResourceSessionInput = {
  /** The browser used in this browser session (e.g., `Chrome`). */
  browser?: InputMaybe<Scalars['String']>;
  /** Information about the device used for the browser session (e.g., `Samsung SM-G930T`). */
  device?: InputMaybe<Scalars['String']>;
  /** The platform for the browser session (e.g., `Macintosh`). */
  platform?: InputMaybe<Scalars['String']>;
  /** The version for the browser session (e.g., `61.0.3163.100`). */
  version?: InputMaybe<Scalars['String']>;
};

export type Stripe_ChargeTransferDataInput = {
  /** The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account. */
  amount?: InputMaybe<Scalars['Int']>;
  destination?: InputMaybe<AccountWrappedStringInputUnion>;
};

export enum UpdateProfileResultConfirmationMethod {
  Automatic = 'automatic',
  Manual = 'manual'
}

export type Stripe_PaymentIntentNextActionInput = {
  alipay_handle_redirect?: InputMaybe<Stripe_PaymentIntentNextActionAlipayHandleRedirectInput>;
  boleto_display_details?: InputMaybe<Stripe_PaymentIntentNextActionBoletoInput>;
  card_await_notification?: InputMaybe<Stripe_PaymentIntentNextActionCardAwaitNotificationInput>;
  display_bank_transfer_instructions?: InputMaybe<Stripe_PaymentIntentNextActionDisplayBankTransferInstructionsInput>;
  konbini_display_details?: InputMaybe<Stripe_PaymentIntentNextActionKonbiniInput>;
  oxxo_display_details?: InputMaybe<Stripe_PaymentIntentNextActionDisplayOxxoDetailsInput>;
  paynow_display_qr_code?: InputMaybe<Stripe_PaymentIntentNextActionPaynowDisplayQrCodeInput>;
  redirect_to_url?: InputMaybe<Stripe_PaymentIntentNextActionRedirectToUrlInput>;
  /** Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`. */
  type?: InputMaybe<Scalars['String']>;
  /** When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js. */
  use_stripe_sdk?: InputMaybe<Scalars['JSONObject']>;
  verify_with_microdeposits?: InputMaybe<Stripe_PaymentIntentNextActionVerifyWithMicrodepositsInput>;
  wechat_pay_display_qr_code?: InputMaybe<Stripe_PaymentIntentNextActionWechatPayDisplayQrCodeInput>;
  wechat_pay_redirect_to_android_app?: InputMaybe<Stripe_PaymentIntentNextActionWechatPayRedirectToAndroidAppInput>;
  wechat_pay_redirect_to_ios_app?: InputMaybe<Stripe_PaymentIntentNextActionWechatPayRedirectToIosAppInput>;
};

export type Stripe_PaymentIntentNextActionAlipayHandleRedirectInput = {
  /** The native data to be used with Alipay SDK you must redirect your customer to in order to authenticate the payment in an Android App. */
  native_data?: InputMaybe<Scalars['String']>;
  /** The native URL you must redirect your customer to in order to authenticate the payment in an iOS App. */
  native_url?: InputMaybe<Scalars['String']>;
  /** If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
  return_url?: InputMaybe<Scalars['String']>;
  /** The URL you must redirect your customer to in order to authenticate the payment. */
  url?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentIntentNextActionBoletoInput = {
  /** The timestamp after which the boleto expires. */
  expires_at?: InputMaybe<Scalars['Int']>;
  /** The URL to the hosted boleto voucher page, which allows customers to view the boleto voucher. */
  hosted_voucher_url?: InputMaybe<Scalars['String']>;
  /** The boleto number. */
  number?: InputMaybe<Scalars['String']>;
  /** The URL to the downloadable boleto voucher PDF. */
  pdf?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentIntentNextActionCardAwaitNotificationInput = {
  /** The time that payment will be attempted. If customer approval is required, they need to provide approval before this time. */
  charge_attempt_at?: InputMaybe<Scalars['Int']>;
  /** For payments greater than INR 5000, the customer must provide explicit approval of the payment with their bank. For payments of lower amount, no customer action is required. */
  customer_approval_required?: InputMaybe<Scalars['Boolean']>;
};

export type Stripe_PaymentIntentNextActionDisplayBankTransferInstructionsInput = {
  /** The remaining amount that needs to be transferred to complete the payment. */
  amount_remaining?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  /** A list of financial addresses that can be used to fund the customer balance */
  financial_addresses?: InputMaybe<Array<InputMaybe<Stripe_FundingInstructionsBankTransferFinancialAddressInput>>>;
  /** A string identifying this payment. Instruct your customer to include this code in the reference or memo field of their bank transfer. */
  reference?: InputMaybe<Scalars['String']>;
  /** Type of bank transfer */
  type?: InputMaybe<UpdateProfileResultType>;
};

export type Stripe_FundingInstructionsBankTransferFinancialAddressInput = {
  /** The payment networks supported by this FinancialAddress */
  supported_networks?: InputMaybe<Array<InputMaybe<UpdateProfileResultSupportedNetworks>>>;
  /** The type of financial address */
  type?: InputMaybe<UpdateProfileResultType>;
  zengin?: InputMaybe<Stripe_FundingInstructionsBankTransferZenginRecordInput>;
};

export enum UpdateProfileResultSupportedNetworks {
  Sepa = 'sepa',
  Zengin = 'zengin'
}

export type Stripe_FundingInstructionsBankTransferZenginRecordInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentIntentNextActionKonbiniInput = {
  /** The timestamp at which the pending Konbini payment expires. */
  expires_at?: InputMaybe<Scalars['Int']>;
  /** The URL for the Konbini payment instructions page, which allows customers to view and print a Konbini voucher. */
  hosted_voucher_url?: InputMaybe<Scalars['String']>;
  stores?: InputMaybe<Stripe_PaymentIntentNextActionKonbiniStoresInput>;
};

export type Stripe_PaymentIntentNextActionKonbiniStoresInput = {
  familymart?: InputMaybe<Stripe_PaymentIntentNextActionKonbiniFamilymartInput>;
  lawson?: InputMaybe<Stripe_PaymentIntentNextActionKonbiniLawsonInput>;
  ministop?: InputMaybe<Stripe_PaymentIntentNextActionKonbiniMinistopInput>;
  seicomart?: InputMaybe<Stripe_PaymentIntentNextActionKonbiniSeicomartInput>;
};

export type Stripe_PaymentIntentNextActionKonbiniFamilymartInput = {
  /** The confirmation number. */
  confirmation_number?: InputMaybe<Scalars['String']>;
  /** The payment code. */
  payment_code?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentIntentNextActionKonbiniLawsonInput = {
  /** The confirmation number. */
  confirmation_number?: InputMaybe<Scalars['String']>;
  /** The payment code. */
  payment_code?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentIntentNextActionKonbiniMinistopInput = {
  /** The confirmation number. */
  confirmation_number?: InputMaybe<Scalars['String']>;
  /** The payment code. */
  payment_code?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentIntentNextActionKonbiniSeicomartInput = {
  /** The confirmation number. */
  confirmation_number?: InputMaybe<Scalars['String']>;
  /** The payment code. */
  payment_code?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentIntentNextActionDisplayOxxoDetailsInput = {
  /** The timestamp after which the OXXO voucher expires. */
  expires_after?: InputMaybe<Scalars['Int']>;
  /** The URL for the hosted OXXO voucher page, which allows customers to view and print an OXXO voucher. */
  hosted_voucher_url?: InputMaybe<Scalars['String']>;
  /** OXXO reference number. */
  number?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentIntentNextActionPaynowDisplayQrCodeInput = {
  /** The raw data string used to generate QR code, it should be used together with QR code library. */
  data?: InputMaybe<Scalars['String']>;
  /** The image_url_png string used to render QR code */
  image_url_png?: InputMaybe<Scalars['String']>;
  /** The image_url_svg string used to render QR code */
  image_url_svg?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentIntentNextActionRedirectToUrlInput = {
  /** If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
  return_url?: InputMaybe<Scalars['String']>;
  /** The URL you must redirect your customer to in order to authenticate the payment. */
  url?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentIntentNextActionVerifyWithMicrodepositsInput = {
  /** The timestamp when the microdeposits are expected to land. */
  arrival_date?: InputMaybe<Scalars['Int']>;
  /** The URL for the hosted verification page, which allows customers to verify their bank account. */
  hosted_verification_url?: InputMaybe<Scalars['String']>;
  /** The type of the microdeposit sent to the customer. Used to distinguish between different verification methods. */
  microdeposit_type?: InputMaybe<UpdateProfileResultMicrodepositType>;
};

export enum UpdateProfileResultMicrodepositType {
  Amounts = 'amounts',
  DescriptorCode = 'descriptor_code'
}

export type Stripe_PaymentIntentNextActionWechatPayDisplayQrCodeInput = {
  /** The data being used to generate QR code */
  data?: InputMaybe<Scalars['String']>;
  /** The base64 image data for a pre-generated QR code */
  image_data_url?: InputMaybe<Scalars['String']>;
  /** The image_url_png string used to render QR code */
  image_url_png?: InputMaybe<Scalars['String']>;
  /** The image_url_svg string used to render QR code */
  image_url_svg?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentIntentNextActionWechatPayRedirectToAndroidAppInput = {
  /** app_id is the APP ID registered on WeChat open platform */
  app_id?: InputMaybe<Scalars['String']>;
  /** nonce_str is a random string */
  nonce_str?: InputMaybe<Scalars['String']>;
  /** package is static value */
  package?: InputMaybe<Scalars['String']>;
  /** an unique merchant ID assigned by WeChat Pay */
  partner_id?: InputMaybe<Scalars['String']>;
  /** an unique trading ID assigned by WeChat Pay */
  prepay_id?: InputMaybe<Scalars['String']>;
  /** A signature */
  sign?: InputMaybe<Scalars['String']>;
  /** Specifies the current time in epoch format */
  timestamp?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentIntentNextActionWechatPayRedirectToIosAppInput = {
  /** An universal link that redirect to WeChat Pay app */
  native_url?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentIntentPaymentMethodOptionsInput = {
  acss_debit?: InputMaybe<PaymentIntentPaymentMethodOptionsAcssDebitPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion>;
  afterpay_clearpay?: InputMaybe<PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsAfterpayClearpayInputUnion>;
  alipay?: InputMaybe<PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsAlipayInputUnion>;
  au_becs_debit?: InputMaybe<PaymentIntentPaymentMethodOptionsAuBecsDebitPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion>;
  bacs_debit?: InputMaybe<PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsBacsDebitInputUnion>;
  bancontact?: InputMaybe<PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsBancontactInputUnion>;
  boleto?: InputMaybe<PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsBoletoInputUnion>;
  card?: InputMaybe<PaymentIntentPaymentMethodOptionsCardPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion>;
  card_present?: InputMaybe<PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsCardPresentInputUnion>;
  customer_balance?: InputMaybe<PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsCustomerBalanceInputUnion>;
  eps?: InputMaybe<PaymentIntentPaymentMethodOptionsEpsPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion>;
  fpx?: InputMaybe<PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsFpxInputUnion>;
  giropay?: InputMaybe<PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsGiropayInputUnion>;
  grabpay?: InputMaybe<PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsGrabpayInputUnion>;
  ideal?: InputMaybe<PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsIdealInputUnion>;
  interac_present?: InputMaybe<PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsInteracPresentInputUnion>;
  klarna?: InputMaybe<PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsKlarnaInputUnion>;
  konbini?: InputMaybe<PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsKonbiniInputUnion>;
  oxxo?: InputMaybe<PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsOxxoInputUnion>;
  p24?: InputMaybe<PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsP24InputUnion>;
  paynow?: InputMaybe<PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsPaynowInputUnion>;
  sepa_debit?: InputMaybe<PaymentIntentPaymentMethodOptionsSepaDebitPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion>;
  sofort?: InputMaybe<PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsSofortInputUnion>;
  us_bank_account?: InputMaybe<PaymentIntentPaymentMethodOptionsUsBankAccountPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion>;
  wechat_pay?: InputMaybe<PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsWechatPayInputUnion>;
};

export type PaymentIntentPaymentMethodOptionsAcssDebitPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion = {
  paymentIntentPaymentMethodOptionsAcssDebit?: InputMaybe<Stripe_PaymentIntentPaymentMethodOptionsAcssDebitInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentIntentPaymentMethodOptionsAcssDebitInput = {
  mandate_options?: InputMaybe<Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitInput>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
  /** Bank account verification method. */
  verification_method?: InputMaybe<UpdateProfileResultVerificationMethod>;
};

export type Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitInput = {
  /** A URL for custom mandate text */
  custom_mandate_url?: InputMaybe<Scalars['String']>;
  /** Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
  interval_description?: InputMaybe<Scalars['String']>;
  /** Payment schedule for the mandate. */
  payment_schedule?: InputMaybe<UpdateProfileResultPaymentSchedule>;
  /** Transaction type of the mandate. */
  transaction_type?: InputMaybe<UpdateProfileResultTransactionType>;
};

export enum UpdateProfileResultSetupFutureUsage {
  OffSession = 'off_session',
  OnSession = 'on_session'
}

export enum UpdateProfileResultVerificationMethod {
  Automatic = 'automatic',
  Instant = 'instant',
  Microdeposits = 'microdeposits'
}

export type Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput = {
  /** Controls when the funds will be captured from the customer's account. */
  capture_method?: InputMaybe<UpdateProfileResultCaptureMethod>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
  /** Bank account verification method. */
  verification_method?: InputMaybe<UpdateProfileResultVerificationMethod>;
};

export type PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsAfterpayClearpayInputUnion = {
  paymentMethodOptionsAfterpayClearpay?: InputMaybe<Stripe_PaymentMethodOptionsAfterpayClearpayInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentMethodOptionsAfterpayClearpayInput = {
  /** Controls when the funds will be captured from the customer's account. */
  capture_method?: InputMaybe<UpdateProfileResultCaptureMethod>;
  /**
   * Order identifier shown to the customer in Afterpayâ€™s online portal. We recommend using a value that helps you answer any questions a customer might have about
   * the payment. The identifier is limited to 128 characters and may contain only letters, digits, underscores, backslashes and dashes.
   */
  reference?: InputMaybe<Scalars['String']>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
};

export type PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsAlipayInputUnion = {
  paymentMethodOptionsAlipay?: InputMaybe<Stripe_PaymentMethodOptionsAlipayInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentMethodOptionsAlipayInput = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
};

export type PaymentIntentPaymentMethodOptionsAuBecsDebitPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion = {
  paymentIntentPaymentMethodOptionsAuBecsDebit?: InputMaybe<Stripe_PaymentIntentPaymentMethodOptionsAuBecsDebitInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentIntentPaymentMethodOptionsAuBecsDebitInput = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
};

export type PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsBacsDebitInputUnion = {
  paymentMethodOptionsBacsDebit?: InputMaybe<Stripe_PaymentMethodOptionsBacsDebitInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentMethodOptionsBacsDebitInput = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
};

export type PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsBancontactInputUnion = {
  paymentMethodOptionsBancontact?: InputMaybe<Stripe_PaymentMethodOptionsBancontactInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentMethodOptionsBancontactInput = {
  /** Preferred language of the Bancontact authorization page that the customer is redirected to. */
  preferred_language?: InputMaybe<UpdateProfileResultPreferredLanguage>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
};

export type PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsBoletoInputUnion = {
  paymentMethodOptionsBoleto?: InputMaybe<Stripe_PaymentMethodOptionsBoletoInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentMethodOptionsBoletoInput = {
  /** The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time. */
  expires_after_days?: InputMaybe<Scalars['Int']>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
};

export type PaymentIntentPaymentMethodOptionsCardPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion = {
  paymentIntentPaymentMethodOptionsCard?: InputMaybe<Stripe_PaymentIntentPaymentMethodOptionsCardInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentIntentPaymentMethodOptionsCardInput = {
  /** Controls when the funds will be captured from the customer's account. */
  capture_method?: InputMaybe<UpdateProfileResultCaptureMethod>;
  installments?: InputMaybe<Stripe_PaymentMethodOptionsCardInstallmentsInput>;
  mandate_options?: InputMaybe<Stripe_PaymentMethodOptionsCardMandateOptionsInput>;
  /** Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time. */
  network?: InputMaybe<UpdateProfileResultNetwork>;
  /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
  request_three_d_secure?: InputMaybe<UpdateProfileResultRequestThreeDSecure>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
};

export type Stripe_PaymentMethodOptionsCardInstallmentsInput = {
  /** Installment plans that may be selected for this PaymentIntent. */
  available_plans?: InputMaybe<Array<InputMaybe<Stripe_PaymentMethodDetailsCardInstallmentsPlanInput>>>;
  /** Whether Installments are enabled for this PaymentIntent. */
  enabled?: InputMaybe<Scalars['Boolean']>;
  plan?: InputMaybe<Stripe_PaymentMethodDetailsCardInstallmentsPlanInput>;
};

export type Stripe_PaymentMethodOptionsCardMandateOptionsInput = {
  /** Amount to be charged for future payments. */
  amount?: InputMaybe<Scalars['Int']>;
  /** One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param. */
  amount_type?: InputMaybe<UpdateProfileResultAmountType>;
  /** A description of the mandate or subscription that is meant to be displayed to the customer. */
  description?: InputMaybe<Scalars['String']>;
  /** End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date. */
  end_date?: InputMaybe<Scalars['Int']>;
  /** Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`. */
  interval?: InputMaybe<UpdateProfileResultInterval>;
  /** The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`. */
  interval_count?: InputMaybe<Scalars['Int']>;
  /** Unique identifier for the mandate or subscription. */
  reference?: InputMaybe<Scalars['String']>;
  /** Start date of the mandate or subscription. Start date should not be lesser than yesterday. */
  start_date?: InputMaybe<Scalars['Int']>;
  /** Specifies the type of mandates supported. Possible values are `india`. */
  supported_types?: InputMaybe<Array<InputMaybe<UpdateProfileResultSupportedTypes>>>;
};

export enum UpdateProfileResultAmountType {
  Fixed = 'fixed',
  Maximum = 'maximum'
}

export enum UpdateProfileResultSupportedTypes {
  India = 'india'
}

export enum UpdateProfileResultNetwork {
  Amex = 'amex',
  CartesBancaires = 'cartes_bancaires',
  Diners = 'diners',
  Discover = 'discover',
  Interac = 'interac',
  Jcb = 'jcb',
  Mastercard = 'mastercard',
  Unionpay = 'unionpay',
  Unknown = 'unknown',
  Visa = 'visa'
}

export enum UpdateProfileResultRequestThreeDSecure {
  Any = 'any',
  Automatic = 'automatic',
  ChallengeOnly = 'challenge_only'
}

export type PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsCardPresentInputUnion = {
  paymentMethodOptionsCardPresent?: InputMaybe<Stripe_PaymentMethodOptionsCardPresentInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentMethodOptionsCardPresentInput = {
  /** Request ability to capture this payment beyond the standard [authorization validity window](https://stripe.com/docs/terminal/features/extended-authorizations#authorization-validity) */
  request_extended_authorization?: InputMaybe<Scalars['Boolean']>;
  /** Request ability to [increment](https://stripe.com/docs/terminal/features/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https://stripe.com/docs/api/payment_intents/confirm) response to verify support. */
  request_incremental_authorization_support?: InputMaybe<Scalars['Boolean']>;
};

export type PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsCustomerBalanceInputUnion = {
  paymentMethodOptionsCustomerBalance?: InputMaybe<Stripe_PaymentMethodOptionsCustomerBalanceInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentMethodOptionsCustomerBalanceInput = {
  bank_transfer?: InputMaybe<Stripe_PaymentMethodOptionsCustomerBalanceBankTransferInput>;
  /** The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`. */
  funding_type?: InputMaybe<UpdateProfileResultFundingType>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
};

export type Stripe_PaymentMethodOptionsCustomerBalanceBankTransferInput = {
  /**
   * List of address types that should be returned in the financial_addresses response. If not specified, all valid types will be returned.
   *
   * Permitted values include: `zengin`.
   */
  requested_address_types?: InputMaybe<Array<InputMaybe<UpdateProfileResultRequestedAddressTypes>>>;
  /** The bank transfer type that this PaymentIntent is allowed to use for funding. Permitted values include: `us_bank_account`, `eu_bank_account`, `id_bank_account`, `gb_bank_account`, `jp_bank_account`, `mx_bank_account`, `eu_bank_transfer`, `gb_bank_transfer`, `id_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`. */
  type?: InputMaybe<UpdateProfileResultType>;
};

export enum UpdateProfileResultRequestedAddressTypes {
  Zengin = 'zengin'
}

export enum UpdateProfileResultFundingType {
  BankTransfer = 'bank_transfer'
}

export type PaymentIntentPaymentMethodOptionsEpsPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion = {
  paymentIntentPaymentMethodOptionsEps?: InputMaybe<Stripe_PaymentIntentPaymentMethodOptionsEpsInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentIntentPaymentMethodOptionsEpsInput = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
};

export type PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsFpxInputUnion = {
  paymentMethodOptionsFpx?: InputMaybe<Stripe_PaymentMethodOptionsFpxInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentMethodOptionsFpxInput = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
};

export type PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsGiropayInputUnion = {
  paymentMethodOptionsGiropay?: InputMaybe<Stripe_PaymentMethodOptionsGiropayInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentMethodOptionsGiropayInput = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
};

export type PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsGrabpayInputUnion = {
  paymentMethodOptionsGrabpay?: InputMaybe<Stripe_PaymentMethodOptionsGrabpayInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentMethodOptionsGrabpayInput = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
};

export type PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsIdealInputUnion = {
  paymentMethodOptionsIdeal?: InputMaybe<Stripe_PaymentMethodOptionsIdealInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentMethodOptionsIdealInput = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
};

export type PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsInteracPresentInputUnion = {
  paymentMethodOptionsInteracPresent?: InputMaybe<Stripe_PaymentMethodOptionsInteracPresentInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentMethodOptionsInteracPresentInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsKlarnaInputUnion = {
  paymentMethodOptionsKlarna?: InputMaybe<Stripe_PaymentMethodOptionsKlarnaInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentMethodOptionsKlarnaInput = {
  /** Controls when the funds will be captured from the customer's account. */
  capture_method?: InputMaybe<UpdateProfileResultCaptureMethod>;
  /** Preferred locale of the Klarna checkout page that the customer is redirected to. */
  preferred_locale?: InputMaybe<Scalars['String']>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
};

export type PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsKonbiniInputUnion = {
  paymentMethodOptionsKonbini?: InputMaybe<Stripe_PaymentMethodOptionsKonbiniInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentMethodOptionsKonbiniInput = {
  /** An optional 10 to 11 digit numeric-only string determining the confirmation code at applicable convenience stores. */
  confirmation_number?: InputMaybe<Scalars['String']>;
  /** The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST. */
  expires_after_days?: InputMaybe<Scalars['Int']>;
  /** The timestamp at which the Konbini payment instructions will expire. Only one of `expires_after_days` or `expires_at` may be set. */
  expires_at?: InputMaybe<Scalars['Int']>;
  /** A product descriptor of up to 22 characters, which will appear to customers at the convenience store. */
  product_description?: InputMaybe<Scalars['String']>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
};

export type PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsOxxoInputUnion = {
  paymentMethodOptionsOxxo?: InputMaybe<Stripe_PaymentMethodOptionsOxxoInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentMethodOptionsOxxoInput = {
  /** The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time. */
  expires_after_days?: InputMaybe<Scalars['Int']>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
};

export type PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsP24InputUnion = {
  paymentMethodOptionsP24?: InputMaybe<Stripe_PaymentMethodOptionsP24Input>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentMethodOptionsP24Input = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
};

export type PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsPaynowInputUnion = {
  paymentMethodOptionsPaynow?: InputMaybe<Stripe_PaymentMethodOptionsPaynowInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentMethodOptionsPaynowInput = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
};

export type PaymentIntentPaymentMethodOptionsSepaDebitPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion = {
  paymentIntentPaymentMethodOptionsSepaDebit?: InputMaybe<Stripe_PaymentIntentPaymentMethodOptionsSepaDebitInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentIntentPaymentMethodOptionsSepaDebitInput = {
  mandate_options?: InputMaybe<Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebitInput>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
};

export type Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebitInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsSofortInputUnion = {
  paymentMethodOptionsSofort?: InputMaybe<Stripe_PaymentMethodOptionsSofortInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentMethodOptionsSofortInput = {
  /** Preferred language of the SOFORT authorization page that the customer is redirected to. */
  preferred_language?: InputMaybe<UpdateProfileResultPreferredLanguage>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
};

export type PaymentIntentPaymentMethodOptionsUsBankAccountPaymentIntentTypeSpecificPaymentMethodOptionsClientInputUnion = {
  paymentIntentPaymentMethodOptionsUsBankAccount?: InputMaybe<Stripe_PaymentIntentPaymentMethodOptionsUsBankAccountInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentIntentPaymentMethodOptionsUsBankAccountInput = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
  /** Bank account verification method. */
  verification_method?: InputMaybe<UpdateProfileResultVerificationMethod>;
};

export type PaymentIntentTypeSpecificPaymentMethodOptionsClientPaymentMethodOptionsWechatPayInputUnion = {
  paymentMethodOptionsWechatPay?: InputMaybe<Stripe_PaymentMethodOptionsWechatPayInput>;
  paymentIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_PaymentIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_PaymentMethodOptionsWechatPayInput = {
  /** The app ID registered with WeChat Pay. Only required when client is ios or android. */
  app_id?: InputMaybe<Scalars['String']>;
  /** The client type that the end customer will pay from */
  client?: InputMaybe<UpdateProfileResultClient>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: InputMaybe<UpdateProfileResultSetupFutureUsage>;
};

export enum UpdateProfileResultClient {
  Android = 'android',
  Ios = 'ios',
  Web = 'web'
}

export type Stripe_PaymentIntentProcessingInput = {
  card?: InputMaybe<Stripe_PaymentIntentCardProcessingInput>;
  /** Type of the payment method for which payment is in `processing` state, one of `card`. */
  type?: InputMaybe<UpdateProfileResultType>;
};

export type Stripe_PaymentIntentCardProcessingInput = {
  customer_notification?: InputMaybe<Stripe_PaymentIntentProcessingCustomerNotificationInput>;
};

export type Stripe_PaymentIntentProcessingCustomerNotificationInput = {
  /** Whether customer approval has been requested for this payment. For payments greater than INR 5000 or mandate amount, the customer must provide explicit approval of the payment with their bank. */
  approval_requested?: InputMaybe<Scalars['Boolean']>;
  /** If customer approval is required, they need to provide approval before this time. */
  completes_at?: InputMaybe<Scalars['Int']>;
};

export type Stripe_TransferDataInput = {
  /** Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
  amount?: InputMaybe<Scalars['Int']>;
  destination?: InputMaybe<AccountWrappedStringInputUnion>;
};

export type Stripe_InvoiceitemInput = {
  /** Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`. */
  amount?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  customer?: InputMaybe<Scalars['String']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  date?: InputMaybe<Scalars['Int']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: InputMaybe<Scalars['String']>;
  /** If true, discounts will apply to this invoice item. Always false for prorations. */
  discountable?: InputMaybe<Scalars['Boolean']>;
  /** The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. */
  discounts?: InputMaybe<Array<InputMaybe<DiscountWrappedStringInputUnion>>>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  invoice?: InputMaybe<InvoiceWrappedStringInputUnion>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  period?: InputMaybe<Stripe_InvoiceLineItemPeriodInput>;
  price?: InputMaybe<Stripe_PriceInput>;
  /** Whether the invoice item was created automatically as a proration adjustment when the customer switched plans. */
  proration?: InputMaybe<Scalars['Boolean']>;
  /** Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for. */
  quantity?: InputMaybe<Scalars['Int']>;
  subscription?: InputMaybe<SubscriptionWrappedStringInputUnion>;
  /** The subscription item that this invoice item has been created for, if any. */
  subscription_item?: InputMaybe<Scalars['String']>;
  /** The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. */
  tax_rates?: InputMaybe<Array<InputMaybe<Stripe_TaxRateInput>>>;
  test_clock?: InputMaybe<TestHelpersTestClockWrappedStringInputUnion>;
  /** Unit amount (in the `currency` specified) of the invoice item. */
  unit_amount?: InputMaybe<Scalars['Int']>;
  /** Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. */
  unit_amount_decimal?: InputMaybe<Scalars['String']>;
};

export type DiscountWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  discount?: InputMaybe<Stripe_DiscountInput>;
};

export type Stripe_InvoiceLineItemPeriodInput = {
  /** The end of the period, which must be greater than or equal to the start. */
  end?: InputMaybe<Scalars['Int']>;
  /** The start of the period. */
  start?: InputMaybe<Scalars['Int']>;
};

export type SubscriptionWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  subscription?: InputMaybe<Stripe_SubscriptionInput>;
};

export type Stripe_SubscriptionInput = {
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. */
  application_fee_percent?: InputMaybe<Scalars['Float']>;
  automatic_tax?: InputMaybe<Stripe_SubscriptionAutomaticTaxInput>;
  /** Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. */
  billing_cycle_anchor?: InputMaybe<Scalars['Int']>;
  billing_thresholds?: InputMaybe<Stripe_SubscriptionBillingThresholdsInput>;
  /** A date in the future at which the subscription will automatically get canceled */
  cancel_at?: InputMaybe<Scalars['Int']>;
  /** If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period. */
  cancel_at_period_end?: InputMaybe<Scalars['Boolean']>;
  /** If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state. */
  canceled_at?: InputMaybe<Scalars['Int']>;
  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. */
  collection_method?: InputMaybe<UpdateProfileResultCollectionMethod>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created. */
  current_period_end?: InputMaybe<Scalars['Int']>;
  /** Start of the current period that the subscription has been invoiced for. */
  current_period_start?: InputMaybe<Scalars['Int']>;
  customer?: InputMaybe<Scalars['String']>;
  /** Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`. */
  days_until_due?: InputMaybe<Scalars['Int']>;
  default_payment_method?: InputMaybe<PaymentMethodWrappedStringInputUnion>;
  default_source?: InputMaybe<AlipayAccountBankAccountBitcoinReceiverCardSourceWrappedStringInputUnion>;
  /** The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. */
  default_tax_rates?: InputMaybe<Array<InputMaybe<Stripe_TaxRateInput>>>;
  discount?: InputMaybe<Stripe_DiscountInput>;
  /** If the subscription has ended, the date the subscription ended. */
  ended_at?: InputMaybe<Scalars['Int']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** List of subscription items, each with an attached price. */
  items?: InputMaybe<PropertiesSubscriptionPropertiesItemsPropertyInput>;
  latest_invoice?: InputMaybe<InvoiceWrappedStringInputUnion>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`. */
  next_pending_invoice_item_invoice?: InputMaybe<Scalars['Int']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  pause_collection?: InputMaybe<Stripe_SubscriptionsResourcePauseCollectionInput>;
  payment_settings?: InputMaybe<Stripe_SubscriptionsResourcePaymentSettingsInput>;
  pending_invoice_item_interval?: InputMaybe<Stripe_SubscriptionPendingInvoiceItemIntervalInput>;
  pending_setup_intent?: InputMaybe<SetupIntentWrappedStringInputUnion>;
  pending_update?: InputMaybe<Stripe_SubscriptionsResourcePendingUpdateInput>;
  schedule?: InputMaybe<SubscriptionScheduleWrappedStringInputUnion>;
  /** Date when the subscription was first created. The date might differ from the `created` date due to backdating. */
  start_date?: InputMaybe<Scalars['Int']>;
  /**
   * Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`.
   *
   * For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated.
   *
   * A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.
   *
   * If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.
   *
   * If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
   */
  status?: InputMaybe<UpdateProfileResultStatus>;
  test_clock?: InputMaybe<TestHelpersTestClockWrappedStringInputUnion>;
  transfer_data?: InputMaybe<Stripe_SubscriptionTransferDataInput>;
  /** If the subscription has a trial, the end of that trial. */
  trial_end?: InputMaybe<Scalars['Int']>;
  /** If the subscription has a trial, the beginning of that trial. */
  trial_start?: InputMaybe<Scalars['Int']>;
};

export type Stripe_SubscriptionAutomaticTaxInput = {
  /** Whether Stripe automatically computes tax on this subscription. */
  enabled?: InputMaybe<Scalars['Boolean']>;
};

export type Stripe_SubscriptionBillingThresholdsInput = {
  /** Monetary threshold that triggers the subscription to create an invoice */
  amount_gte?: InputMaybe<Scalars['Int']>;
  /** Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`. */
  reset_billing_cycle_anchor?: InputMaybe<Scalars['Boolean']>;
};

export enum UpdateProfileResultCollectionMethod {
  ChargeAutomatically = 'charge_automatically',
  SendInvoice = 'send_invoice'
}

export type Stripe_TaxRateInput = {
  /** Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set. */
  active?: InputMaybe<Scalars['Boolean']>;
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: InputMaybe<Scalars['String']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers. */
  description?: InputMaybe<Scalars['String']>;
  /** The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page. */
  display_name?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** This specifies if the tax rate is inclusive or exclusive. */
  inclusive?: InputMaybe<Scalars['Boolean']>;
  /** The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customerâ€™s invoice. */
  jurisdiction?: InputMaybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  /** This represents the tax rate percent out of 100. */
  percentage?: InputMaybe<Scalars['Float']>;
  /** [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States. */
  state?: InputMaybe<Scalars['String']>;
  /** The high-level tax type, such as `vat` or `sales_tax`. */
  tax_type?: InputMaybe<UpdateProfileResultTaxType>;
};

export enum UpdateProfileResultTaxType {
  Gst = 'gst',
  Hst = 'hst',
  Jct = 'jct',
  Pst = 'pst',
  Qst = 'qst',
  Rst = 'rst',
  SalesTax = 'sales_tax',
  Vat = 'vat'
}

/** List of subscription items, each with an attached price. */
export type PropertiesSubscriptionPropertiesItemsPropertyInput = {
  /** Details about each object. */
  data: Array<Stripe_SubscriptionItemInput>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: UpdateProfileResultObject;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Stripe_SubscriptionItemInput = {
  billing_thresholds?: InputMaybe<Stripe_SubscriptionItemBillingThresholdsInput>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  price?: InputMaybe<Stripe_PriceInput>;
  /** The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed. */
  quantity?: InputMaybe<Scalars['Int']>;
  /** The `subscription` this `subscription_item` belongs to. */
  subscription?: InputMaybe<Scalars['String']>;
  /** The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`. */
  tax_rates?: InputMaybe<Array<InputMaybe<Stripe_TaxRateInput>>>;
};

export type Stripe_SubscriptionItemBillingThresholdsInput = {
  /** Usage threshold that triggers the subscription to create an invoice */
  usage_gte?: InputMaybe<Scalars['Int']>;
};

export type Stripe_SubscriptionsResourcePauseCollectionInput = {
  /** The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`. */
  behavior?: InputMaybe<UpdateProfileResultBehavior>;
  /** The time after which the subscription will resume collecting payments. */
  resumes_at?: InputMaybe<Scalars['Int']>;
};

export enum UpdateProfileResultBehavior {
  KeepAsDraft = 'keep_as_draft',
  MarkUncollectible = 'mark_uncollectible',
  Void = 'void'
}

export type Stripe_SubscriptionsResourcePaymentSettingsInput = {
  payment_method_options?: InputMaybe<Stripe_SubscriptionsResourcePaymentMethodOptionsInput>;
  /** The list of payment method types to provide to every invoice created by the subscription. If not set, Stripe attempts to automatically determine the types to use by looking at the invoiceâ€™s default payment method, the subscriptionâ€™s default payment method, the customerâ€™s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice). */
  payment_method_types?: InputMaybe<Array<InputMaybe<UpdateProfileResultPaymentMethodTypes>>>;
};

export type Stripe_SubscriptionsResourcePaymentMethodOptionsInput = {
  acss_debit?: InputMaybe<Stripe_InvoicePaymentMethodOptionsAcssDebitInput>;
  bancontact?: InputMaybe<Stripe_InvoicePaymentMethodOptionsBancontactInput>;
  card?: InputMaybe<Stripe_SubscriptionPaymentMethodOptionsCardInput>;
  customer_balance?: InputMaybe<Stripe_InvoicePaymentMethodOptionsCustomerBalanceInput>;
  konbini?: InputMaybe<Stripe_InvoicePaymentMethodOptionsKonbiniInput>;
  us_bank_account?: InputMaybe<Stripe_InvoicePaymentMethodOptionsUsBankAccountInput>;
};

export type Stripe_InvoicePaymentMethodOptionsAcssDebitInput = {
  mandate_options?: InputMaybe<Stripe_InvoicePaymentMethodOptionsAcssDebitMandateOptionsInput>;
  /** Bank account verification method. */
  verification_method?: InputMaybe<UpdateProfileResultVerificationMethod>;
};

export type Stripe_InvoicePaymentMethodOptionsAcssDebitMandateOptionsInput = {
  /** Transaction type of the mandate. */
  transaction_type?: InputMaybe<UpdateProfileResultTransactionType>;
};

export type Stripe_InvoicePaymentMethodOptionsBancontactInput = {
  /** Preferred language of the Bancontact authorization page that the customer is redirected to. */
  preferred_language?: InputMaybe<UpdateProfileResultPreferredLanguage>;
};

export type Stripe_SubscriptionPaymentMethodOptionsCardInput = {
  mandate_options?: InputMaybe<Stripe_InvoiceMandateOptionsCardInput>;
  /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
  request_three_d_secure?: InputMaybe<UpdateProfileResultRequestThreeDSecure>;
};

export type Stripe_InvoiceMandateOptionsCardInput = {
  /** Amount to be charged for future payments. */
  amount?: InputMaybe<Scalars['Int']>;
  /** One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param. */
  amount_type?: InputMaybe<UpdateProfileResultAmountType>;
  /** A description of the mandate or subscription that is meant to be displayed to the customer. */
  description?: InputMaybe<Scalars['String']>;
};

export type Stripe_InvoicePaymentMethodOptionsCustomerBalanceInput = {
  bank_transfer?: InputMaybe<Stripe_InvoicePaymentMethodOptionsCustomerBalanceBankTransferInput>;
  /** The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`. */
  funding_type?: InputMaybe<UpdateProfileResultFundingType>;
};

export type Stripe_InvoicePaymentMethodOptionsCustomerBalanceBankTransferInput = {
  /** The bank transfer type that can be used for funding. Permitted values include: `us_bank_account`, `eu_bank_account`, `id_bank_account`, `gb_bank_account`, `jp_bank_account`, `mx_bank_account`, `eu_bank_transfer`, `gb_bank_transfer`, `id_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`. */
  type?: InputMaybe<Scalars['String']>;
};

export type Stripe_InvoicePaymentMethodOptionsKonbiniInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_InvoicePaymentMethodOptionsUsBankAccountInput = {
  /** Bank account verification method. */
  verification_method?: InputMaybe<UpdateProfileResultVerificationMethod>;
};

export enum UpdateProfileResultPaymentMethodTypes {
  AchCreditTransfer = 'ach_credit_transfer',
  AchDebit = 'ach_debit',
  AcssDebit = 'acss_debit',
  AuBecsDebit = 'au_becs_debit',
  BacsDebit = 'bacs_debit',
  Bancontact = 'bancontact',
  Boleto = 'boleto',
  Card = 'card',
  CustomerBalance = 'customer_balance',
  Fpx = 'fpx',
  Giropay = 'giropay',
  Grabpay = 'grabpay',
  Ideal = 'ideal',
  Konbini = 'konbini',
  Paynow = 'paynow',
  SepaDebit = 'sepa_debit',
  Sofort = 'sofort',
  UsBankAccount = 'us_bank_account',
  WechatPay = 'wechat_pay'
}

export type Stripe_SubscriptionPendingInvoiceItemIntervalInput = {
  /** Specifies invoicing frequency. Either `day`, `week`, `month` or `year`. */
  interval?: InputMaybe<UpdateProfileResultInterval>;
  /** The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). */
  interval_count?: InputMaybe<Scalars['Int']>;
};

export type SetupIntentWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  setupIntent?: InputMaybe<Stripe_SetupIntentInput>;
};

export type Stripe_SetupIntentInput = {
  application?: InputMaybe<ApplicationWrappedStringInputUnion>;
  /** Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`. */
  cancellation_reason?: InputMaybe<UpdateProfileResultCancellationReason>;
  /**
   * The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.
   *
   * The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
   */
  client_secret?: InputMaybe<Scalars['String']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  customer?: InputMaybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  last_setup_error?: InputMaybe<Stripe_ApiErrorsInput>;
  latest_attempt?: InputMaybe<SetupAttemptWrappedStringInputUnion>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  mandate?: InputMaybe<MandateWrappedStringInputUnion>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  next_action?: InputMaybe<Stripe_SetupIntentNextActionInput>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  on_behalf_of?: InputMaybe<AccountWrappedStringInputUnion>;
  payment_method?: InputMaybe<PaymentMethodWrappedStringInputUnion>;
  payment_method_options?: InputMaybe<Stripe_SetupIntentPaymentMethodOptionsInput>;
  /** The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. */
  payment_method_types?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  single_use_mandate?: InputMaybe<MandateWrappedStringInputUnion>;
  /** [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`. */
  status?: InputMaybe<UpdateProfileResultStatus>;
  /**
   * Indicates how the payment method is intended to be used in the future.
   *
   * Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.
   */
  usage?: InputMaybe<Scalars['String']>;
};

export type Stripe_SetupIntentNextActionInput = {
  redirect_to_url?: InputMaybe<Stripe_SetupIntentNextActionRedirectToUrlInput>;
  /** Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`. */
  type?: InputMaybe<Scalars['String']>;
  /** When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js. */
  use_stripe_sdk?: InputMaybe<Scalars['JSONObject']>;
  verify_with_microdeposits?: InputMaybe<Stripe_SetupIntentNextActionVerifyWithMicrodepositsInput>;
};

export type Stripe_SetupIntentNextActionRedirectToUrlInput = {
  /** If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
  return_url?: InputMaybe<Scalars['String']>;
  /** The URL you must redirect your customer to in order to authenticate. */
  url?: InputMaybe<Scalars['String']>;
};

export type Stripe_SetupIntentNextActionVerifyWithMicrodepositsInput = {
  /** The timestamp when the microdeposits are expected to land. */
  arrival_date?: InputMaybe<Scalars['Int']>;
  /** The URL for the hosted verification page, which allows customers to verify their bank account. */
  hosted_verification_url?: InputMaybe<Scalars['String']>;
  /** The type of the microdeposit sent to the customer. Used to distinguish between different verification methods. */
  microdeposit_type?: InputMaybe<UpdateProfileResultMicrodepositType>;
};

export type Stripe_SetupIntentPaymentMethodOptionsInput = {
  acss_debit?: InputMaybe<SetupIntentPaymentMethodOptionsAcssDebitSetupIntentTypeSpecificPaymentMethodOptionsClientInputUnion>;
  card?: InputMaybe<Stripe_SetupIntentPaymentMethodOptionsCardInput>;
  sepa_debit?: InputMaybe<SetupIntentPaymentMethodOptionsSepaDebitSetupIntentTypeSpecificPaymentMethodOptionsClientInputUnion>;
  us_bank_account?: InputMaybe<SetupIntentPaymentMethodOptionsUsBankAccountSetupIntentTypeSpecificPaymentMethodOptionsClientInputUnion>;
};

export type SetupIntentPaymentMethodOptionsAcssDebitSetupIntentTypeSpecificPaymentMethodOptionsClientInputUnion = {
  setupIntentPaymentMethodOptionsAcssDebit?: InputMaybe<Stripe_SetupIntentPaymentMethodOptionsAcssDebitInput>;
  setupIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_SetupIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_SetupIntentPaymentMethodOptionsAcssDebitInput = {
  /** Currency supported by the bank account */
  currency?: InputMaybe<UpdateProfileResultCurrency>;
  mandate_options?: InputMaybe<Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitInput>;
  /** Bank account verification method. */
  verification_method?: InputMaybe<UpdateProfileResultVerificationMethod>;
};

export enum UpdateProfileResultCurrency {
  Cad = 'cad',
  Usd = 'usd'
}

export type Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitInput = {
  /** A URL for custom mandate text */
  custom_mandate_url?: InputMaybe<Scalars['String']>;
  /** List of Stripe products where this mandate can be selected automatically. */
  default_for?: InputMaybe<Array<InputMaybe<UpdateProfileResultDefaultFor>>>;
  /** Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
  interval_description?: InputMaybe<Scalars['String']>;
  /** Payment schedule for the mandate. */
  payment_schedule?: InputMaybe<UpdateProfileResultPaymentSchedule>;
  /** Transaction type of the mandate. */
  transaction_type?: InputMaybe<UpdateProfileResultTransactionType>;
};

export type Stripe_SetupIntentTypeSpecificPaymentMethodOptionsClientInput = {
  /** Bank account verification method. */
  verification_method?: InputMaybe<UpdateProfileResultVerificationMethod>;
};

export type Stripe_SetupIntentPaymentMethodOptionsCardInput = {
  mandate_options?: InputMaybe<Stripe_SetupIntentPaymentMethodOptionsCardMandateOptionsInput>;
  /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
  request_three_d_secure?: InputMaybe<UpdateProfileResultRequestThreeDSecure>;
};

export type Stripe_SetupIntentPaymentMethodOptionsCardMandateOptionsInput = {
  /** Amount to be charged for future payments. */
  amount?: InputMaybe<Scalars['Int']>;
  /** One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param. */
  amount_type?: InputMaybe<UpdateProfileResultAmountType>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  /** A description of the mandate or subscription that is meant to be displayed to the customer. */
  description?: InputMaybe<Scalars['String']>;
  /** End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date. */
  end_date?: InputMaybe<Scalars['Int']>;
  /** Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`. */
  interval?: InputMaybe<UpdateProfileResultInterval>;
  /** The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`. */
  interval_count?: InputMaybe<Scalars['Int']>;
  /** Unique identifier for the mandate or subscription. */
  reference?: InputMaybe<Scalars['String']>;
  /** Start date of the mandate or subscription. Start date should not be lesser than yesterday. */
  start_date?: InputMaybe<Scalars['Int']>;
  /** Specifies the type of mandates supported. Possible values are `india`. */
  supported_types?: InputMaybe<Array<InputMaybe<UpdateProfileResultSupportedTypes>>>;
};

export type SetupIntentPaymentMethodOptionsSepaDebitSetupIntentTypeSpecificPaymentMethodOptionsClientInputUnion = {
  setupIntentPaymentMethodOptionsSepaDebit?: InputMaybe<Stripe_SetupIntentPaymentMethodOptionsSepaDebitInput>;
  setupIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_SetupIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_SetupIntentPaymentMethodOptionsSepaDebitInput = {
  mandate_options?: InputMaybe<Stripe_SetupIntentPaymentMethodOptionsMandateOptionsSepaDebitInput>;
};

export type Stripe_SetupIntentPaymentMethodOptionsMandateOptionsSepaDebitInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type SetupIntentPaymentMethodOptionsUsBankAccountSetupIntentTypeSpecificPaymentMethodOptionsClientInputUnion = {
  setupIntentPaymentMethodOptionsUsBankAccount?: InputMaybe<Stripe_SetupIntentPaymentMethodOptionsUsBankAccountInput>;
  setupIntentTypeSpecificPaymentMethodOptionsClient?: InputMaybe<Stripe_SetupIntentTypeSpecificPaymentMethodOptionsClientInput>;
};

export type Stripe_SetupIntentPaymentMethodOptionsUsBankAccountInput = {
  /** Bank account verification method. */
  verification_method?: InputMaybe<UpdateProfileResultVerificationMethod>;
};

export type Stripe_SubscriptionsResourcePendingUpdateInput = {
  /** If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. */
  billing_cycle_anchor?: InputMaybe<Scalars['Int']>;
  /** The point after which the changes reflected by this update will be discarded and no longer applied. */
  expires_at?: InputMaybe<Scalars['Int']>;
  /** List of subscription items, each with an attached plan, that will be set if the update is applied. */
  subscription_items?: InputMaybe<Array<InputMaybe<Stripe_SubscriptionItemInput>>>;
  /** Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied. */
  trial_end?: InputMaybe<Scalars['Int']>;
  /** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
  trial_from_plan?: InputMaybe<Scalars['Boolean']>;
};

export type SubscriptionScheduleWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  subscriptionSchedule?: InputMaybe<Stripe_SubscriptionScheduleInput>;
};

export type Stripe_SubscriptionScheduleInput = {
  /** Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch. */
  canceled_at?: InputMaybe<Scalars['Int']>;
  /** Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch. */
  completed_at?: InputMaybe<Scalars['Int']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  current_phase?: InputMaybe<Stripe_SubscriptionScheduleCurrentPhaseInput>;
  customer?: InputMaybe<CustomerDeletedCustomerWrappedStringInputUnion>;
  default_settings?: InputMaybe<Stripe_SubscriptionSchedulesResourceDefaultSettingsInput>;
  /** Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` and `cancel`. */
  end_behavior?: InputMaybe<UpdateProfileResultEndBehavior>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  /** Configuration for the subscription schedule's phases. */
  phases?: InputMaybe<Array<InputMaybe<Stripe_SubscriptionSchedulePhaseConfigurationInput>>>;
  /** Time at which the subscription schedule was released. Measured in seconds since the Unix epoch. */
  released_at?: InputMaybe<Scalars['Int']>;
  /** ID of the subscription once managed by the subscription schedule (if it is released). */
  released_subscription?: InputMaybe<Scalars['String']>;
  /** The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules). */
  status?: InputMaybe<UpdateProfileResultStatus>;
  subscription?: InputMaybe<SubscriptionWrappedStringInputUnion>;
  test_clock?: InputMaybe<TestHelpersTestClockWrappedStringInputUnion>;
};

export type Stripe_SubscriptionScheduleCurrentPhaseInput = {
  /** The end of this phase of the subscription schedule. */
  end_date?: InputMaybe<Scalars['Int']>;
  /** The start of this phase of the subscription schedule. */
  start_date?: InputMaybe<Scalars['Int']>;
};

export type Stripe_SubscriptionSchedulesResourceDefaultSettingsInput = {
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule. */
  application_fee_percent?: InputMaybe<Scalars['Float']>;
  automatic_tax?: InputMaybe<Stripe_SubscriptionSchedulesResourceDefaultSettingsAutomaticTaxInput>;
  /** Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle). */
  billing_cycle_anchor?: InputMaybe<UpdateProfileResultBillingCycleAnchor>;
  billing_thresholds?: InputMaybe<Stripe_SubscriptionBillingThresholdsInput>;
  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. */
  collection_method?: InputMaybe<UpdateProfileResultCollectionMethod>;
  default_payment_method?: InputMaybe<PaymentMethodWrappedStringInputUnion>;
  invoice_settings?: InputMaybe<Stripe_InvoiceSettingSubscriptionScheduleSettingInput>;
  transfer_data?: InputMaybe<Stripe_SubscriptionTransferDataInput>;
};

export type Stripe_SubscriptionSchedulesResourceDefaultSettingsAutomaticTaxInput = {
  /** Whether Stripe automatically computes tax on invoices created during this phase. */
  enabled?: InputMaybe<Scalars['Boolean']>;
};

export enum UpdateProfileResultBillingCycleAnchor {
  Automatic = 'automatic',
  PhaseStart = 'phase_start'
}

export type Stripe_InvoiceSettingSubscriptionScheduleSettingInput = {
  /** Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`. */
  days_until_due?: InputMaybe<Scalars['Int']>;
};

export type Stripe_SubscriptionTransferDataInput = {
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount is transferred to the destination. */
  amount_percent?: InputMaybe<Scalars['Float']>;
  destination?: InputMaybe<AccountWrappedStringInputUnion>;
};

export enum UpdateProfileResultEndBehavior {
  Cancel = 'cancel',
  None = 'none',
  Release = 'release',
  Renew = 'renew'
}

export type Stripe_SubscriptionSchedulePhaseConfigurationInput = {
  /** A list of prices and quantities that will generate invoice items appended to the first invoice for this phase. */
  add_invoice_items?: InputMaybe<Array<InputMaybe<Stripe_SubscriptionScheduleAddInvoiceItemInput>>>;
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule. */
  application_fee_percent?: InputMaybe<Scalars['Float']>;
  automatic_tax?: InputMaybe<Stripe_SchedulesPhaseAutomaticTaxInput>;
  /** Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle). */
  billing_cycle_anchor?: InputMaybe<UpdateProfileResultBillingCycleAnchor>;
  billing_thresholds?: InputMaybe<Stripe_SubscriptionBillingThresholdsInput>;
  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. */
  collection_method?: InputMaybe<UpdateProfileResultCollectionMethod>;
  coupon?: InputMaybe<CouponDeletedCouponWrappedStringInputUnion>;
  default_payment_method?: InputMaybe<PaymentMethodWrappedStringInputUnion>;
  /** The default tax rates to apply to the subscription during this phase of the subscription schedule. */
  default_tax_rates?: InputMaybe<Array<InputMaybe<Stripe_TaxRateInput>>>;
  /** The end of this phase of the subscription schedule. */
  end_date?: InputMaybe<Scalars['Int']>;
  invoice_settings?: InputMaybe<Stripe_InvoiceSettingSubscriptionScheduleSettingInput>;
  /** Subscription items to configure the subscription to during this phase of the subscription schedule. */
  items?: InputMaybe<Array<InputMaybe<Stripe_SubscriptionScheduleConfigurationItemInput>>>;
  /** If the subscription schedule will prorate when transitioning to this phase. Possible values are `create_prorations` and `none`. */
  proration_behavior?: InputMaybe<UpdateProfileResultProrationBehavior>;
  /** The start of this phase of the subscription schedule. */
  start_date?: InputMaybe<Scalars['Int']>;
  transfer_data?: InputMaybe<Stripe_SubscriptionTransferDataInput>;
  /** When the trial ends within the phase. */
  trial_end?: InputMaybe<Scalars['Int']>;
};

export type Stripe_SubscriptionScheduleAddInvoiceItemInput = {
  price?: InputMaybe<DeletedPricePriceWrappedStringInputUnion>;
  /** The quantity of the invoice item. */
  quantity?: InputMaybe<Scalars['Int']>;
  /** The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item. */
  tax_rates?: InputMaybe<Array<InputMaybe<Stripe_TaxRateInput>>>;
};

export type DeletedPricePriceWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  price?: InputMaybe<Stripe_PriceInput>;
  deletedPrice?: InputMaybe<Stripe_DeletedPriceInput>;
};

export type Stripe_DeletedPriceInput = {
  /** Always true for a deleted object */
  deleted?: InputMaybe<Scalars['Boolean']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
};

export type Stripe_SchedulesPhaseAutomaticTaxInput = {
  /** Whether Stripe automatically computes tax on invoices created during this phase. */
  enabled?: InputMaybe<Scalars['Boolean']>;
};

export type CouponDeletedCouponWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  coupon?: InputMaybe<Stripe_CouponInput>;
  deletedCoupon?: InputMaybe<Stripe_DeletedCouponInput>;
};

export type Stripe_DeletedCouponInput = {
  /** Always true for a deleted object */
  deleted?: InputMaybe<Scalars['Boolean']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
};

export type Stripe_SubscriptionScheduleConfigurationItemInput = {
  billing_thresholds?: InputMaybe<Stripe_SubscriptionItemBillingThresholdsInput>;
  price?: InputMaybe<DeletedPricePriceWrappedStringInputUnion>;
  /** Quantity of the plan to which the customer should be subscribed. */
  quantity?: InputMaybe<Scalars['Int']>;
  /** The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`. */
  tax_rates?: InputMaybe<Array<InputMaybe<Stripe_TaxRateInput>>>;
};

export enum UpdateProfileResultProrationBehavior {
  AlwaysInvoice = 'always_invoice',
  CreateProrations = 'create_prorations',
  None = 'none'
}

export type TestHelpersTestClockWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  testHelpersTestClock?: InputMaybe<Stripe_TestHelpersTestClockInput>;
};

export type Stripe_TestHelpersTestClockInput = {
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Time at which this clock is scheduled to auto delete. */
  deletes_after?: InputMaybe<Scalars['Int']>;
  /** Time at which all objects belonging to this clock are frozen. */
  frozen_time?: InputMaybe<Scalars['Int']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** The custom name supplied at creation. */
  name?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  /** The status of the Test Clock. */
  status?: InputMaybe<UpdateProfileResultStatus>;
};

export type Stripe_ItemInput = {
  /** Total before any discounts or taxes are applied. */
  amount_subtotal?: InputMaybe<Scalars['Int']>;
  /** Total after discounts and taxes. */
  amount_total?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name. */
  description?: InputMaybe<Scalars['String']>;
  /** The discounts applied to the line item. */
  discounts?: InputMaybe<Array<InputMaybe<Stripe_LineItemsDiscountAmountInput>>>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  price?: InputMaybe<Stripe_PriceInput>;
  /** The quantity of products being purchased. */
  quantity?: InputMaybe<Scalars['Int']>;
  /** The taxes applied to the line item. */
  taxes?: InputMaybe<Array<InputMaybe<Stripe_LineItemsTaxAmountInput>>>;
};

export type Stripe_LineItemsDiscountAmountInput = {
  /** The amount discounted. */
  amount?: InputMaybe<Scalars['Int']>;
  discount?: InputMaybe<Stripe_DiscountInput>;
};

export type Stripe_LineItemsTaxAmountInput = {
  /** Amount of tax applied for this rate. */
  amount?: InputMaybe<Scalars['Int']>;
  rate?: InputMaybe<Stripe_TaxRateInput>;
};

export type BankAccountCardSourceInputUnion = {
  bankAccount?: InputMaybe<Stripe_BankAccountInput>;
  card?: InputMaybe<Stripe_CardInput>;
  source?: InputMaybe<Stripe_SourceInput>;
};

export type Stripe_NetworksInput = {
  /** All available networks for the card. */
  available?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** The preferred network for the card. */
  preferred?: InputMaybe<Scalars['String']>;
};

export type Stripe_ThreeDSecureUsageInput = {
  /** Whether 3D Secure is supported on this card. */
  supported?: InputMaybe<Scalars['Boolean']>;
};

export type Stripe_PaymentMethodCardWalletInput = {
  amex_express_checkout?: InputMaybe<Stripe_PaymentMethodCardWalletAmexExpressCheckoutInput>;
  apple_pay?: InputMaybe<Stripe_PaymentMethodCardWalletApplePayInput>;
  /** (For tokenized numbers only.) The last four digits of the device account number. */
  dynamic_last4?: InputMaybe<Scalars['String']>;
  google_pay?: InputMaybe<Stripe_PaymentMethodCardWalletGooglePayInput>;
  masterpass?: InputMaybe<Stripe_PaymentMethodCardWalletMasterpassInput>;
  samsung_pay?: InputMaybe<Stripe_PaymentMethodCardWalletSamsungPayInput>;
  /** The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type. */
  type?: InputMaybe<UpdateProfileResultType>;
  visa_checkout?: InputMaybe<Stripe_PaymentMethodCardWalletVisaCheckoutInput>;
};

export type Stripe_PaymentMethodCardWalletAmexExpressCheckoutInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodCardWalletApplePayInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodCardWalletGooglePayInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodCardWalletMasterpassInput = {
  billing_address?: InputMaybe<Stripe_AddressInput>;
  /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  email?: InputMaybe<Scalars['String']>;
  /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  name?: InputMaybe<Scalars['String']>;
  shipping_address?: InputMaybe<Stripe_AddressInput>;
};

export type Stripe_PaymentMethodCardWalletSamsungPayInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodCardWalletVisaCheckoutInput = {
  billing_address?: InputMaybe<Stripe_AddressInput>;
  /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  email?: InputMaybe<Scalars['String']>;
  /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  name?: InputMaybe<Scalars['String']>;
  shipping_address?: InputMaybe<Stripe_AddressInput>;
};

export type Stripe_PaymentMethodCardPresentInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodCustomerBalanceInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodEpsInput = {
  /** The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`. */
  bank?: InputMaybe<UpdateProfileResultBank>;
};

export type Stripe_PaymentMethodFpxInput = {
  /** The customer's bank, if provided. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`. */
  bank?: InputMaybe<UpdateProfileResultBank>;
};

export type Stripe_PaymentMethodGiropayInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodGrabpayInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodIdealInput = {
  /** The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`. */
  bank?: InputMaybe<UpdateProfileResultBank>;
  /** The Bank Identifier Code of the customer's bank, if the bank was provided. */
  bic?: InputMaybe<UpdateProfileResultBic>;
};

export type Stripe_PaymentMethodInteracPresentInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodKlarnaInput = {
  dob?: InputMaybe<Stripe_PaymentFlowsPrivatePaymentMethodsKlarnaDobInput>;
};

export type Stripe_PaymentFlowsPrivatePaymentMethodsKlarnaDobInput = {
  /** The day of birth, between 1 and 31. */
  day?: InputMaybe<Scalars['Int']>;
  /** The month of birth, between 1 and 12. */
  month?: InputMaybe<Scalars['Int']>;
  /** The four-digit year of birth. */
  year?: InputMaybe<Scalars['Int']>;
};

export type Stripe_PaymentMethodKonbiniInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodOxxoInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodP24Input = {
  /** The customer's bank, if provided. */
  bank?: InputMaybe<UpdateProfileResultBank>;
};

export type Stripe_PaymentMethodPaynowInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

export type Stripe_PaymentMethodSepaDebitInput = {
  /** Bank code of bank associated with the bank account. */
  bank_code?: InputMaybe<Scalars['String']>;
  /** Branch code of bank associated with the bank account. */
  branch_code?: InputMaybe<Scalars['String']>;
  /** Two-letter ISO code representing the country the bank account is located in. */
  country?: InputMaybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: InputMaybe<Scalars['String']>;
  generated_from?: InputMaybe<Stripe_SepaDebitGeneratedFromInput>;
  /** Last four characters of the IBAN. */
  last4?: InputMaybe<Scalars['String']>;
};

export type Stripe_SepaDebitGeneratedFromInput = {
  charge?: InputMaybe<ChargeWrappedStringInputUnion>;
  setup_attempt?: InputMaybe<SetupAttemptWrappedStringInputUnion>;
};

export type Stripe_PaymentMethodSofortInput = {
  /** Two-letter ISO code representing the country the bank account is located in. */
  country?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodUsBankAccountInput = {
  /** Account holder type: individual or company. */
  account_holder_type?: InputMaybe<UpdateProfileResultAccountHolderType>;
  /** Account type: checkings or savings. Defaults to checking if omitted. */
  account_type?: InputMaybe<UpdateProfileResultAccountType>;
  /** The name of the bank. */
  bank_name?: InputMaybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: InputMaybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: InputMaybe<Scalars['String']>;
  /** Routing number of the bank account. */
  routing_number?: InputMaybe<Scalars['String']>;
};

export type Stripe_PaymentMethodWechatPayInput = {
  result?: InputMaybe<Scalars['JSONObject']>;
};

/** The customer's payment sources, if any. */
export type PropertiesCustomerPropertiesSourcesPropertyInput = {
  /** Details about each object. */
  data: Array<AlipayAccountBankAccountBitcoinReceiverCardSourceInputUnion>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: UpdateProfileResultObject;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type AlipayAccountBankAccountBitcoinReceiverCardSourceInputUnion = {
  alipayAccount?: InputMaybe<Stripe_AlipayAccountInput>;
  bankAccount?: InputMaybe<Stripe_BankAccountInput>;
  bitcoinReceiver?: InputMaybe<Stripe_BitcoinReceiverInput>;
  card?: InputMaybe<Stripe_CardInput>;
  source?: InputMaybe<Stripe_SourceInput>;
};

/** The customer's current subscriptions, if any. */
export type PropertiesCustomerPropertiesSubscriptionsPropertyInput = {
  /** Details about each object. */
  data: Array<Stripe_SubscriptionInput>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: UpdateProfileResultObject;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Stripe_CustomerTaxInput = {
  /** Surfaces if automatic tax computation is possible given the current customer location information. */
  automatic_tax?: InputMaybe<UpdateProfileResultAutomaticTax>;
  /** A recent IP address of the customer used for tax reporting and tax location inference. */
  ip_address?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<Stripe_CustomerTaxLocationInput>;
};

export enum UpdateProfileResultAutomaticTax {
  Failed = 'failed',
  NotCollecting = 'not_collecting',
  Supported = 'supported',
  UnrecognizedLocation = 'unrecognized_location'
}

export type Stripe_CustomerTaxLocationInput = {
  /** The customer's country as identified by Stripe Tax. */
  country?: InputMaybe<Scalars['String']>;
  /** The data source used to infer the customer's location. */
  source?: InputMaybe<UpdateProfileResultSource>;
  /** The customer's state, county, province, or region as identified by Stripe Tax. */
  state?: InputMaybe<Scalars['String']>;
};

export enum UpdateProfileResultSource {
  BillingAddress = 'billing_address',
  IpAddress = 'ip_address',
  PaymentMethod = 'payment_method',
  ShippingDestination = 'shipping_destination'
}

export enum UpdateProfileResultTaxExempt {
  Exempt = 'exempt',
  None = 'none',
  Reverse = 'reverse'
}

/** The customer's tax IDs. */
export type PropertiesCustomerPropertiesTaxIdsPropertyInput = {
  /** Details about each object. */
  data: Array<Stripe_TaxIdInput>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: UpdateProfileResultObject;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Stripe_TaxIdVerificationInput = {
  /** Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`. */
  status?: InputMaybe<UpdateProfileResultStatus>;
  /** Verified address. */
  verified_address?: InputMaybe<Scalars['String']>;
  /** Verified name. */
  verified_name?: InputMaybe<Scalars['String']>;
};

export type Stripe_AutomaticTaxInput = {
  /** Whether Stripe automatically computes tax on this invoice. */
  enabled?: InputMaybe<Scalars['Boolean']>;
  /** The status of the most recent automated tax calculation for this invoice. */
  status?: InputMaybe<UpdateProfileResultStatus>;
};

export enum UpdateProfileResultBillingReason {
  AutomaticPendingInvoiceItemInvoice = 'automatic_pending_invoice_item_invoice',
  Manual = 'manual',
  QuoteAccept = 'quote_accept',
  Subscription = 'subscription',
  SubscriptionCreate = 'subscription_create',
  SubscriptionCycle = 'subscription_cycle',
  SubscriptionThreshold = 'subscription_threshold',
  SubscriptionUpdate = 'subscription_update',
  Upcoming = 'upcoming'
}

export enum UpdateProfileResultCustomerTaxExempt {
  Exempt = 'exempt',
  None = 'none',
  Reverse = 'reverse'
}

export type Stripe_InvoicesResourceInvoiceTaxIdInput = {
  /** The type of the tax ID, one of `eu_vat`, `br_cnpj`, `br_cpf`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, or `unknown` */
  type?: InputMaybe<UpdateProfileResultType>;
  /** The value of the tax ID. */
  value?: InputMaybe<Scalars['String']>;
};

/** The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any. */
export type UpdateProfilePropertiesPropertiesOrdersItemsPropertiesLinesPropertyInput = {
  /** Details about each object. */
  data: Array<Stripe_LineItemInput>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: UpdateProfileResultObject;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Stripe_LineItemInput = {
  /** The amount, in %s. */
  amount?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: InputMaybe<Scalars['String']>;
  /** The amount of discount calculated per discount for this line item. */
  discount_amounts?: InputMaybe<Array<InputMaybe<Stripe_DiscountsResourceDiscountAmountInput>>>;
  /** If true, discounts will apply to this line item. Always false for prorations. */
  discountable?: InputMaybe<Scalars['Boolean']>;
  /** The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. */
  discounts?: InputMaybe<Array<InputMaybe<DiscountWrappedStringInputUnion>>>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any. */
  invoice_item?: InputMaybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription` this will reflect the metadata of the subscription that caused the line item to be created. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  period?: InputMaybe<Stripe_InvoiceLineItemPeriodInput>;
  price?: InputMaybe<Stripe_PriceInput>;
  /** Whether this is a proration. */
  proration?: InputMaybe<Scalars['Boolean']>;
  proration_details?: InputMaybe<Stripe_InvoicesLineItemsProrationDetailsInput>;
  /** The quantity of the subscription, if the line item is a subscription or a proration. */
  quantity?: InputMaybe<Scalars['Int']>;
  /** The subscription that the invoice item pertains to, if any. */
  subscription?: InputMaybe<Scalars['String']>;
  /** The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription. */
  subscription_item?: InputMaybe<Scalars['String']>;
  /** The amount of tax calculated per tax rate for this line item */
  tax_amounts?: InputMaybe<Array<InputMaybe<Stripe_InvoiceTaxAmountInput>>>;
  /** The tax rates which apply to the line item. */
  tax_rates?: InputMaybe<Array<InputMaybe<Stripe_TaxRateInput>>>;
  /** A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`. */
  type?: InputMaybe<UpdateProfileResultType>;
};

export type Stripe_DiscountsResourceDiscountAmountInput = {
  /** The amount, in %s, of the discount. */
  amount?: InputMaybe<Scalars['Int']>;
  discount?: InputMaybe<DeletedDiscountDiscountWrappedStringInputUnion>;
};

export type DeletedDiscountDiscountWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  discount?: InputMaybe<Stripe_DiscountInput>;
  deletedDiscount?: InputMaybe<Stripe_DeletedDiscountInput>;
};

export type Stripe_DeletedDiscountInput = {
  /** The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode. */
  checkout_session?: InputMaybe<Scalars['String']>;
  coupon?: InputMaybe<Stripe_CouponInput>;
  customer?: InputMaybe<Scalars['String']>;
  /** Always true for a deleted object */
  deleted?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array. */
  id?: InputMaybe<Scalars['String']>;
  /** The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice. */
  invoice?: InputMaybe<Scalars['String']>;
  /** The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item. */
  invoice_item?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  promotion_code?: InputMaybe<PromotionCodeWrappedStringInputUnion>;
  /** Date that the coupon was applied. */
  start?: InputMaybe<Scalars['Int']>;
  /** The subscription that this coupon is applied to, if it is applied to a particular subscription. */
  subscription?: InputMaybe<Scalars['String']>;
};

export type Stripe_InvoicesLineItemsProrationDetailsInput = {
  credited_items?: InputMaybe<Stripe_InvoicesLineItemsCreditedItemsInput>;
};

export type Stripe_InvoicesLineItemsCreditedItemsInput = {
  /** Invoice containing the credited invoice line items */
  invoice?: InputMaybe<Scalars['String']>;
  /** Credited invoice line items */
  invoice_line_items?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type Stripe_InvoiceTaxAmountInput = {
  /** The amount, in %s, of the tax. */
  amount?: InputMaybe<Scalars['Int']>;
  /** Whether this tax amount is inclusive or exclusive. */
  inclusive?: InputMaybe<Scalars['Boolean']>;
  tax_rate?: InputMaybe<TaxRateWrappedStringInputUnion>;
};

export type TaxRateWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  taxRate?: InputMaybe<Stripe_TaxRateInput>;
};

export type Stripe_InvoicesPaymentSettingsInput = {
  payment_method_options?: InputMaybe<Stripe_InvoicesPaymentMethodOptionsInput>;
  /** The list of payment method types (e.g. card) to provide to the invoiceâ€™s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoiceâ€™s default payment method, the subscriptionâ€™s default payment method, the customerâ€™s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice). */
  payment_method_types?: InputMaybe<Array<InputMaybe<UpdateProfileResultPaymentMethodTypes>>>;
};

export type Stripe_InvoicesPaymentMethodOptionsInput = {
  acss_debit?: InputMaybe<Stripe_InvoicePaymentMethodOptionsAcssDebitInput>;
  bancontact?: InputMaybe<Stripe_InvoicePaymentMethodOptionsBancontactInput>;
  card?: InputMaybe<Stripe_InvoicePaymentMethodOptionsCardInput>;
  customer_balance?: InputMaybe<Stripe_InvoicePaymentMethodOptionsCustomerBalanceInput>;
  konbini?: InputMaybe<Stripe_InvoicePaymentMethodOptionsKonbiniInput>;
  us_bank_account?: InputMaybe<Stripe_InvoicePaymentMethodOptionsUsBankAccountInput>;
};

export type Stripe_InvoicePaymentMethodOptionsCardInput = {
  /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
  request_three_d_secure?: InputMaybe<UpdateProfileResultRequestThreeDSecure>;
};

export type QuoteWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  quote?: InputMaybe<Stripe_QuoteInput>;
};

export type Stripe_QuoteInput = {
  /** Total before any discounts or taxes are applied. */
  amount_subtotal?: InputMaybe<Scalars['Int']>;
  /** Total after discounts and taxes are applied. */
  amount_total?: InputMaybe<Scalars['Int']>;
  /** The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Only applicable if there are no line items with recurring prices on the quote. */
  application_fee_amount?: InputMaybe<Scalars['Int']>;
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. Only applicable if there are line items with recurring prices on the quote. */
  application_fee_percent?: InputMaybe<Scalars['Float']>;
  automatic_tax?: InputMaybe<Stripe_QuotesResourceAutomaticTaxInput>;
  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`. */
  collection_method?: InputMaybe<UpdateProfileResultCollectionMethod>;
  computed?: InputMaybe<Stripe_QuotesResourceComputedInput>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: InputMaybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: InputMaybe<Scalars['String']>;
  customer?: InputMaybe<Scalars['String']>;
  /** The tax rates applied to this quote. */
  default_tax_rates?: InputMaybe<Array<InputMaybe<TaxRateWrappedStringInputUnion>>>;
  /** A description that will be displayed on the quote PDF. */
  description?: InputMaybe<Scalars['String']>;
  /** The discounts applied to this quote. */
  discounts?: InputMaybe<Array<InputMaybe<DiscountWrappedStringInputUnion>>>;
  /** The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch. */
  expires_at?: InputMaybe<Scalars['Int']>;
  /** A footer that will be displayed on the quote PDF. */
  footer?: InputMaybe<Scalars['String']>;
  from_quote?: InputMaybe<Stripe_QuotesResourceFromQuoteInput>;
  /** A header that will be displayed on the quote PDF. */
  header?: InputMaybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  invoice?: InputMaybe<DeletedInvoiceInvoiceWrappedStringInputUnion>;
  invoice_settings?: InputMaybe<Stripe_InvoiceSettingQuoteSettingInput>;
  /** A list of items the customer is being quoted for. */
  line_items?: InputMaybe<PropertiesQuotePropertiesLineItemsPropertyInput>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: InputMaybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: InputMaybe<Scalars['JSONObject']>;
  /** A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize). */
  number?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
  on_behalf_of?: InputMaybe<AccountWrappedStringInputUnion>;
  /** The status of the quote. */
  status?: InputMaybe<UpdateProfileResultStatus>;
  status_transitions?: InputMaybe<Stripe_QuotesResourceStatusTransitionsInput>;
  subscription?: InputMaybe<SubscriptionWrappedStringInputUnion>;
  subscription_data?: InputMaybe<Stripe_QuotesResourceSubscriptionDataInput>;
  subscription_schedule?: InputMaybe<SubscriptionScheduleWrappedStringInputUnion>;
  test_clock?: InputMaybe<TestHelpersTestClockWrappedStringInputUnion>;
  total_details?: InputMaybe<Stripe_QuotesResourceTotalDetailsInput>;
  transfer_data?: InputMaybe<Stripe_QuotesResourceTransferDataInput>;
};

export type Stripe_QuotesResourceAutomaticTaxInput = {
  /** Automatically calculate taxes */
  enabled?: InputMaybe<Scalars['Boolean']>;
  /** The status of the most recent automated tax calculation for this quote. */
  status?: InputMaybe<UpdateProfileResultStatus>;
};

export type Stripe_QuotesResourceComputedInput = {
  recurring?: InputMaybe<Stripe_QuotesResourceRecurringInput>;
  upfront?: InputMaybe<Stripe_QuotesResourceUpfrontInput>;
};

export type Stripe_QuotesResourceRecurringInput = {
  /** Total before any discounts or taxes are applied. */
  amount_subtotal?: InputMaybe<Scalars['Int']>;
  /** Total after discounts and taxes are applied. */
  amount_total?: InputMaybe<Scalars['Int']>;
  /** The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`. */
  interval?: InputMaybe<UpdateProfileResultInterval>;
  /** The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. */
  interval_count?: InputMaybe<Scalars['Int']>;
  total_details?: InputMaybe<Stripe_QuotesResourceTotalDetailsInput>;
};

export type Stripe_QuotesResourceTotalDetailsInput = {
  /** This is the sum of all the discounts. */
  amount_discount?: InputMaybe<Scalars['Int']>;
  /** This is the sum of all the shipping amounts. */
  amount_shipping?: InputMaybe<Scalars['Int']>;
  /** This is the sum of all the tax amounts. */
  amount_tax?: InputMaybe<Scalars['Int']>;
  breakdown?: InputMaybe<Stripe_QuotesResourceTotalDetailsResourceBreakdownInput>;
};

export type Stripe_QuotesResourceTotalDetailsResourceBreakdownInput = {
  /** The aggregated discounts. */
  discounts?: InputMaybe<Array<InputMaybe<Stripe_LineItemsDiscountAmountInput>>>;
  /** The aggregated tax amounts by rate. */
  taxes?: InputMaybe<Array<InputMaybe<Stripe_LineItemsTaxAmountInput>>>;
};

export type Stripe_QuotesResourceUpfrontInput = {
  /** Total before any discounts or taxes are applied. */
  amount_subtotal?: InputMaybe<Scalars['Int']>;
  /** Total after discounts and taxes are applied. */
  amount_total?: InputMaybe<Scalars['Int']>;
  /** The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice. */
  line_items?: InputMaybe<PropertiesQuotePropertiesComputedPropertiesUpfrontPropertiesLineItemsPropertyInput>;
  total_details?: InputMaybe<Stripe_QuotesResourceTotalDetailsInput>;
};

/** The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice. */
export type PropertiesQuotePropertiesComputedPropertiesUpfrontPropertiesLineItemsPropertyInput = {
  /** Details about each object. */
  data: Array<Stripe_ItemInput>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: UpdateProfileResultObject;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Stripe_QuotesResourceFromQuoteInput = {
  /** Whether this quote is a revision of a different quote. */
  is_revision?: InputMaybe<Scalars['Boolean']>;
  quote?: InputMaybe<QuoteWrappedStringInputUnion>;
};

export type DeletedInvoiceInvoiceWrappedStringInputUnion = {
  wrappedString?: InputMaybe<WrappedStringInput>;
  invoice?: InputMaybe<Stripe_InvoiceInput>;
  deletedInvoice?: InputMaybe<Stripe_DeletedInvoiceInput>;
};

export type Stripe_DeletedInvoiceInput = {
  /** Always true for a deleted object */
  deleted?: InputMaybe<Scalars['Boolean']>;
  /** Unique identifier for the object. */
  id?: InputMaybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: InputMaybe<UpdateProfileResultObject>;
};

export type Stripe_InvoiceSettingQuoteSettingInput = {
  /** Number of days within which a customer must pay invoices generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`. */
  days_until_due?: InputMaybe<Scalars['Int']>;
};

/** A list of items the customer is being quoted for. */
export type PropertiesQuotePropertiesLineItemsPropertyInput = {
  /** Details about each object. */
  data: Array<Stripe_ItemInput>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: UpdateProfileResultObject;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Stripe_QuotesResourceStatusTransitionsInput = {
  /** The time that the quote was accepted. Measured in seconds since Unix epoch. */
  accepted_at?: InputMaybe<Scalars['Int']>;
  /** The time that the quote was canceled. Measured in seconds since Unix epoch. */
  canceled_at?: InputMaybe<Scalars['Int']>;
  /** The time that the quote was finalized. Measured in seconds since Unix epoch. */
  finalized_at?: InputMaybe<Scalars['Int']>;
};

export type Stripe_QuotesResourceSubscriptionDataInput = {
  /** When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. This date is ignored if it is in the past when the quote is accepted. Measured in seconds since the Unix epoch. */
  effective_date?: InputMaybe<Scalars['Int']>;
  /** Integer representing the number of trial period days before the customer is charged for the first time. */
  trial_period_days?: InputMaybe<Scalars['Int']>;
};

export type Stripe_QuotesResourceTransferDataInput = {
  /** The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination. */
  amount?: InputMaybe<Scalars['Int']>;
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount will be transferred to the destination. */
  amount_percent?: InputMaybe<Scalars['Float']>;
  destination?: InputMaybe<AccountWrappedStringInputUnion>;
};

export type Stripe_InvoicesStatusTransitionsInput = {
  /** The time that the invoice draft was finalized. */
  finalized_at?: InputMaybe<Scalars['Int']>;
  /** The time that the invoice was marked uncollectible. */
  marked_uncollectible_at?: InputMaybe<Scalars['Int']>;
  /** The time that the invoice was paid. */
  paid_at?: InputMaybe<Scalars['Int']>;
  /** The time that the invoice was voided. */
  voided_at?: InputMaybe<Scalars['Int']>;
};

export type Stripe_InvoiceThresholdReasonInput = {
  /** The total invoice amount threshold boundary if it triggered the threshold invoice. */
  amount_gte?: InputMaybe<Scalars['Int']>;
  /** Indicates which line items triggered a threshold invoice. */
  item_reasons?: InputMaybe<Array<InputMaybe<Stripe_InvoiceItemThresholdReasonInput>>>;
};

export type Stripe_InvoiceItemThresholdReasonInput = {
  /** The IDs of the line items that triggered the threshold invoice. */
  line_item_ids?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** The quantity threshold boundary that applied to the given line item. */
  usage_gte?: InputMaybe<Scalars['Int']>;
};

export type Stripe_InvoiceTransferDataInput = {
  /** The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination. */
  amount?: InputMaybe<Scalars['Int']>;
  destination?: InputMaybe<AccountWrappedStringInputUnion>;
};

export type CreateProfileResult = {
  __typename?: 'CreateProfileResult';
  clientMutationId?: Maybe<Scalars['String']>;
  result?: Maybe<Profile>;
};

/** create Profile input */
export type CreateProfileInput = {
  id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  bio?: InputMaybe<Scalars['String']>;
  avatar?: InputMaybe<TsRelationshipInput>;
  shopifyCustomerId?: InputMaybe<Scalars['String']>;
  stripeCustomerId?: InputMaybe<Scalars['String']>;
  orders?: InputMaybe<Array<InputMaybe<Stripe_InvoiceInput>>>;
  _shapeId?: InputMaybe<Scalars['String']>;
  _id?: InputMaybe<Scalars['ID']>;
  _version?: InputMaybe<Scalars['Int']>;
  _shapeName?: InputMaybe<Scalars['String']>;
  _createdAt?: InputMaybe<Scalars['String']>;
  _createdBy?: InputMaybe<Scalars['String']>;
  _updatedAt?: InputMaybe<Scalars['String']>;
  _updatedBy?: InputMaybe<Scalars['String']>;
  _schemaVersion?: InputMaybe<Scalars['Float']>;
  _enabled?: InputMaybe<Scalars['Boolean']>;
  _enabledAt?: InputMaybe<Scalars['String']>;
  _status?: InputMaybe<DefaultWorkflow>;
  _contentTypeId?: InputMaybe<Scalars['String']>;
  _contentTypeName?: InputMaybe<Scalars['String']>;
};

export type DuplicateProfileResult = {
  __typename?: 'DuplicateProfileResult';
  clientMutationId?: Maybe<Scalars['String']>;
  result?: Maybe<Profile>;
};

/** duplicate Profile input */
export type DuplicateProfileInput = {
  _id: Scalars['ID'];
  id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  bio?: InputMaybe<Scalars['String']>;
  avatar?: InputMaybe<TsRelationshipInput>;
  shopifyCustomerId?: InputMaybe<Scalars['String']>;
  stripeCustomerId?: InputMaybe<Scalars['String']>;
  orders?: InputMaybe<Array<InputMaybe<Stripe_InvoiceInput>>>;
  _shapeId?: InputMaybe<Scalars['String']>;
  _version?: InputMaybe<Scalars['Int']>;
  _shapeName?: InputMaybe<Scalars['String']>;
  _createdAt?: InputMaybe<Scalars['String']>;
  _createdBy?: InputMaybe<Scalars['String']>;
  _updatedAt?: InputMaybe<Scalars['String']>;
  _updatedBy?: InputMaybe<Scalars['String']>;
  _schemaVersion?: InputMaybe<Scalars['Float']>;
  _enabled?: InputMaybe<Scalars['Boolean']>;
  _enabledAt?: InputMaybe<Scalars['String']>;
  _status?: InputMaybe<DefaultWorkflow>;
  _contentTypeId?: InputMaybe<Scalars['String']>;
  _contentTypeName?: InputMaybe<Scalars['String']>;
};

export type DeleteProfileResult = {
  __typename?: 'DeleteProfileResult';
  clientMutationId?: Maybe<Scalars['String']>;
  result?: Maybe<Scalars['Boolean']>;
};

/** delete Profile input */
export type DeleteProfileInput = {
  _id: Scalars['ID'];
};

export type Voucherify_Order = {
  __typename?: 'Voucherify_Order';
  id?: Maybe<Scalars['String']>;
};

export type Voucherify_OrderItemInput = {
  name?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  quantity?: InputMaybe<Scalars['Int']>;
  price?: InputMaybe<Scalars['Int']>;
};

export type AddListMembersInput = {
  profiles: Array<Klaviyo_AddMembersPropertiesPropertiesProfilesItemsPropertyInput>;
};

export type Klaviyo_AddMembersPropertiesPropertiesProfilesItemsPropertyInput = {
  email?: InputMaybe<Scalars['String']>;
};

/**
 *
 * The profiles that you would like to remove from the list.
 *
 * Example:
 *
 * {
 *   "emails":["george.washington@klaviyo.com","abraham.lincoln@klaviyo.com"],
 *   "phone_numbers":["+13239169023"],
 *   "push_tokens":["03df25c845d460bcdad7802d2vf6fc1dfde97283bf75cc993eb6dca835ea2e2r"]
 * }
 *
 */
export type Klaviyo_RemoveMembersPropertiesPropertyInput = {
  emails?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  phone_numbers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  push_tokens?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type Stripe_ListCheckoutSessionsResponse = {
  __typename?: 'Stripe_ListCheckoutSessionsResponse';
  data?: Maybe<Array<Maybe<Stripe_CheckoutSession>>>;
  /** True if this list has another page of items after this one that can be fetched. */
  has_more?: Maybe<Scalars['Boolean']>;
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object?: Maybe<Stripe_ListCheckoutSessionsResponseObjectProperty>;
  /** The URL where this list can be accessed. */
  url?: Maybe<Scalars['String']>;
};

export enum Stripe_ListCheckoutSessionsResponseObjectProperty {
  List = 'list'
}

export type ReviewsIo_CreateInvitationResponse = {
  __typename?: 'ReviewsIo_CreateInvitationResponse';
  /** The status of a response */
  status?: Maybe<ReviewsIo_CreateInvitationResponseStatusProperty>;
  message?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export enum ReviewsIo_CreateInvitationResponseStatusProperty {
  Success = 'success',
  Error = 'error'
}

export type ReviewsIo_CreateInvitationPropertiesPropertyInput = {
  name?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  order_id?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<Array<InputMaybe<ReviewsIo_InvitationProductInput>>>;
  /** Template identifier */
  template_id?: InputMaybe<Scalars['String']>;
  date_send?: InputMaybe<Scalars['String']>;
  delay?: InputMaybe<Scalars['String']>;
  country_code?: InputMaybe<Scalars['String']>;
};

export type ReviewsIo_InvitationProductInput = {
  /** Product unique ID */
  sku?: InputMaybe<Scalars['String']>;
  /** Product name */
  name?: InputMaybe<Scalars['String']>;
  /** Product description */
  description?: InputMaybe<Scalars['String']>;
  /** Product image URL */
  image?: InputMaybe<Scalars['String']>;
  /** Product MPN */
  mpn?: InputMaybe<Scalars['String']>;
  /** Product GTIN */
  gtin?: InputMaybe<Scalars['String']>;
  /** Product brand */
  brand?: InputMaybe<Scalars['String']>;
  /** Product category */
  category?: InputMaybe<Scalars['String']>;
  /** Product custom property */
  custom?: InputMaybe<Scalars['String']>;
  /** Product page url */
  pageUrl?: InputMaybe<Scalars['String']>;
};

export type UpdateNavigationDataResult = {
  __typename?: 'UpdateNavigationDataResult';
  clientMutationId?: Maybe<Scalars['String']>;
  result?: Maybe<NavigationData>;
};

/** update NavigationData input */
export type UpdateNavigationDataInput = {
  message?: InputMaybe<Scalars['String']>;
  links?: InputMaybe<NavigationDataLinksInput>;
  _shapeId?: InputMaybe<Scalars['String']>;
  _id?: InputMaybe<Scalars['ID']>;
  _version?: InputMaybe<Scalars['Int']>;
  _shapeName?: InputMaybe<Scalars['String']>;
  _createdAt?: InputMaybe<Scalars['String']>;
  _createdBy?: InputMaybe<Scalars['String']>;
  _updatedAt?: InputMaybe<Scalars['String']>;
  _updatedBy?: InputMaybe<Scalars['String']>;
  _schemaVersion?: InputMaybe<Scalars['Float']>;
  _enabled?: InputMaybe<Scalars['Boolean']>;
  _enabledAt?: InputMaybe<Scalars['String']>;
  _status?: InputMaybe<DefaultWorkflow>;
  _contentTypeId?: InputMaybe<Scalars['String']>;
  _contentTypeName?: InputMaybe<Scalars['String']>;
};

export type NavigationDataLinksInput = {
  categories?: InputMaybe<Array<InputMaybe<NavigationDataLinksCategoriesInputUnion>>>;
  pages?: InputMaybe<Array<InputMaybe<NavigationDataLinksPagesInputUnion>>>;
};

export type NavigationDataLinksCategoriesInputUnion = {
  navigationDataLinksCategories?: InputMaybe<NavigationDataLinksCategoriesInput>;
};

export type NavigationDataLinksCategoriesInput = {
  name?: InputMaybe<Scalars['String']>;
  featured?: InputMaybe<Array<InputMaybe<NavigationDataLinksCategoriesFeaturedInputUnion>>>;
  collection?: InputMaybe<Array<InputMaybe<NavigationDataLinksCategoriesCollectionInputUnion>>>;
  categories?: InputMaybe<Array<InputMaybe<NavigationDataLinksCategoriesCategoriesInputUnion>>>;
  brands?: InputMaybe<Array<InputMaybe<NavigationDataLinksCategoriesBrandsInputUnion>>>;
};

export type NavigationDataLinksCategoriesFeaturedInputUnion = {
  navigationDataLinksCategoriesFeatured?: InputMaybe<NavigationDataLinksCategoriesFeaturedInput>;
};

export type NavigationDataLinksCategoriesFeaturedInput = {
  name?: InputMaybe<Scalars['String']>;
  href?: InputMaybe<Scalars['String']>;
};

export type NavigationDataLinksCategoriesCollectionInputUnion = {
  navigationDataLinksCategoriesCollection?: InputMaybe<NavigationDataLinksCategoriesCollectionInput>;
};

export type NavigationDataLinksCategoriesCollectionInput = {
  name?: InputMaybe<Scalars['String']>;
  href?: InputMaybe<Scalars['String']>;
};

export type NavigationDataLinksCategoriesCategoriesInputUnion = {
  navigationDataLinksCategoriesCategories?: InputMaybe<NavigationDataLinksCategoriesCategoriesInput>;
};

export type NavigationDataLinksCategoriesCategoriesInput = {
  name?: InputMaybe<Scalars['String']>;
  href?: InputMaybe<Scalars['String']>;
};

export type NavigationDataLinksCategoriesBrandsInputUnion = {
  navigationDataLinksCategoriesBrands?: InputMaybe<NavigationDataLinksCategoriesBrandsInput>;
};

export type NavigationDataLinksCategoriesBrandsInput = {
  name?: InputMaybe<Scalars['String']>;
  href?: InputMaybe<Scalars['String']>;
};

export type NavigationDataLinksPagesInputUnion = {
  navigationDataLinksPages?: InputMaybe<NavigationDataLinksPagesInput>;
};

export type NavigationDataLinksPagesInput = {
  name?: InputMaybe<Scalars['String']>;
  href?: InputMaybe<Scalars['String']>;
};

export type UpdateFooterResult = {
  __typename?: 'UpdateFooterResult';
  clientMutationId?: Maybe<Scalars['String']>;
  result?: Maybe<Footer>;
};

/** update Footer input */
export type UpdateFooterInput = {
  navigation?: InputMaybe<FooterNavigationInput>;
  newsletter?: InputMaybe<FooterNewsletterInput>;
  _shapeId?: InputMaybe<Scalars['String']>;
  _id?: InputMaybe<Scalars['ID']>;
  _version?: InputMaybe<Scalars['Int']>;
  _shapeName?: InputMaybe<Scalars['String']>;
  _createdAt?: InputMaybe<Scalars['String']>;
  _createdBy?: InputMaybe<Scalars['String']>;
  _updatedAt?: InputMaybe<Scalars['String']>;
  _updatedBy?: InputMaybe<Scalars['String']>;
  _schemaVersion?: InputMaybe<Scalars['Float']>;
  _enabled?: InputMaybe<Scalars['Boolean']>;
  _enabledAt?: InputMaybe<Scalars['String']>;
  _status?: InputMaybe<DefaultWorkflow>;
  _contentTypeId?: InputMaybe<Scalars['String']>;
  _contentTypeName?: InputMaybe<Scalars['String']>;
};

export type FooterNavigationInput = {
  sections?: InputMaybe<Array<InputMaybe<FooterNavigationSectionsInputUnion>>>;
};

export type FooterNavigationSectionsInputUnion = {
  footerNavigationSections?: InputMaybe<FooterNavigationSectionsInput>;
};

export type FooterNavigationSectionsInput = {
  name?: InputMaybe<Scalars['String']>;
  items?: InputMaybe<Array<InputMaybe<NavigationLinkInputUnion>>>;
};

export type NavigationLinkInputUnion = {
  navigationLink?: InputMaybe<NavigationLinkInput>;
};

export type NavigationLinkInput = {
  name?: InputMaybe<Scalars['String']>;
  href?: InputMaybe<Scalars['String']>;
};

export type FooterNewsletterInput = {
  text?: InputMaybe<TextInputUnion>;
};

export type TextInputUnion = {
  text?: InputMaybe<TextInput>;
};

export type TextInput = {
  primary?: InputMaybe<Scalars['String']>;
  secondary?: InputMaybe<Scalars['String']>;
  button?: InputMaybe<Scalars['String']>;
};

/** Return type for `cartCreate` mutation. */
export type ShopifyStorefront_CartCreatePayload = {
  __typename?: 'ShopifyStorefront_CartCreatePayload';
  /** The new cart. */
  cart?: Maybe<ShopifyStorefront_Cart>;
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyStorefront_CartUserError>;
};

/** Represents an error that happens during execution of a cart mutation. */
export type ShopifyStorefront_CartUserError = {
  __typename?: 'ShopifyStorefront_CartUserError';
  /** The error code. */
  code?: Maybe<ShopifyStorefront_CartErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The error message. */
  message: Scalars['String'];
};

export enum ShopifyStorefront_CartErrorCode {
  Invalid = 'INVALID',
  LessThan = 'LESS_THAN',
  InvalidMerchandiseLine = 'INVALID_MERCHANDISE_LINE',
  MissingDiscountCode = 'MISSING_DISCOUNT_CODE',
  MissingNote = 'MISSING_NOTE'
}

/** Specifies the input fields to create a cart. */
export type ShopifyStorefront_CartInput = {
  /** An array of key-value pairs that contains additional information about the cart. */
  attributes?: InputMaybe<Array<InputMaybe<ShopifyStorefront_AttributeInput>>>;
  /** A list of merchandise lines to add to the cart. */
  lines?: InputMaybe<Array<InputMaybe<ShopifyStorefront_CartLineInput>>>;
  /** The case-insensitive discount codes that the customer added at checkout. */
  discountCodes?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** A note that is associated with the cart. For example, the note can be a personalized message to the buyer. */
  note?: InputMaybe<Scalars['String']>;
  /** The customer associated with the cart. Used to determine [international pricing](https://shopify.dev/api/examples/international-pricing#create-a-checkout). Buyer identity should match the customer's shipping address. */
  buyerIdentity?: InputMaybe<ShopifyStorefront_CartBuyerIdentityInput>;
};

/** Specifies the input fields required for an attribute. */
export type ShopifyStorefront_AttributeInput = {
  /** Key or name of the attribute. */
  key: Scalars['String'];
  /** Value of the attribute. */
  value: Scalars['String'];
};

/** Specifies the input fields to create a merchandise line on a cart. */
export type ShopifyStorefront_CartLineInput = {
  /** An array of key-value pairs that contains additional information about the merchandise line. */
  attributes?: InputMaybe<Array<InputMaybe<ShopifyStorefront_AttributeInput>>>;
  /** The quantity of the merchandise. */
  quantity?: InputMaybe<Scalars['Int']>;
  /** The identifier of the merchandise that the buyer intends to purchase. */
  merchandiseId: Scalars['ID'];
  /** The identifier of the selling plan that the merchandise is being purchased with. */
  sellingPlanId?: InputMaybe<Scalars['ID']>;
};

/**
 * Specifies the input fields to update the buyer information associated with a cart.
 * Buyer identity is used to determine
 * [international pricing](https://shopify.dev/api/examples/international-pricing#create-a-checkout)
 * and should match the customer's shipping address.
 */
export type ShopifyStorefront_CartBuyerIdentityInput = {
  /** The email address of the buyer that is interacting with the cart. */
  email?: InputMaybe<Scalars['String']>;
  /** The phone number of the buyer that is interacting with the cart. */
  phone?: InputMaybe<Scalars['String']>;
  /** The country where the buyer is located. */
  countryCode?: InputMaybe<ShopifyStorefront_CountryCode>;
  /** The access token used to identify the customer associated with the cart. */
  customerAccessToken?: InputMaybe<Scalars['String']>;
};

/** Return type for `customerAccessTokenCreate` mutation. */
export type ShopifyStorefront_CustomerAccessTokenCreatePayload = {
  __typename?: 'ShopifyStorefront_CustomerAccessTokenCreatePayload';
  /** The newly created customer access token object. */
  customerAccessToken?: Maybe<ShopifyStorefront_CustomerAccessToken>;
  /** The list of errors that occurred from executing the mutation. */
  customerUserErrors: Array<ShopifyStorefront_CustomerUserError>;
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `customerUserErrors` instead
   */
  userErrors: Array<ShopifyStorefront_UserError>;
};

/** A CustomerAccessToken represents the unique token required to make modifications to the customer object. */
export type ShopifyStorefront_CustomerAccessToken = {
  __typename?: 'ShopifyStorefront_CustomerAccessToken';
  /** The customerâ€™s access token. */
  accessToken: Scalars['String'];
  /** The date and time when the customer access token expires. */
  expiresAt: Scalars['DateTime'];
};

/** Represents an error that happens during execution of a customer mutation. */
export type ShopifyStorefront_CustomerUserError = {
  __typename?: 'ShopifyStorefront_CustomerUserError';
  /** The error code. */
  code?: Maybe<ShopifyStorefront_CustomerErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The error message. */
  message: Scalars['String'];
};

export enum ShopifyStorefront_CustomerErrorCode {
  Blank = 'BLANK',
  Invalid = 'INVALID',
  Taken = 'TAKEN',
  TooLong = 'TOO_LONG',
  TooShort = 'TOO_SHORT',
  UnidentifiedCustomer = 'UNIDENTIFIED_CUSTOMER',
  CustomerDisabled = 'CUSTOMER_DISABLED',
  PasswordStartsOrEndsWithWhitespace = 'PASSWORD_STARTS_OR_ENDS_WITH_WHITESPACE',
  ContainsHtmlTags = 'CONTAINS_HTML_TAGS',
  ContainsUrl = 'CONTAINS_URL',
  TokenInvalid = 'TOKEN_INVALID',
  AlreadyEnabled = 'ALREADY_ENABLED',
  NotFound = 'NOT_FOUND',
  BadDomain = 'BAD_DOMAIN',
  InvalidMultipassRequest = 'INVALID_MULTIPASS_REQUEST'
}

/** Represents an error in the input of a mutation. */
export type ShopifyStorefront_UserError = {
  __typename?: 'ShopifyStorefront_UserError';
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The error message. */
  message: Scalars['String'];
};

/** Specifies the input fields required to create a customer access token. */
export type ShopifyStorefront_CustomerAccessTokenCreateInput = {
  /** The email associated to the customer. */
  email: Scalars['String'];
  /** The login password to be used by the customer. */
  password: Scalars['String'];
};

/** Return type for `customerCreate` mutation. */
export type ShopifyStorefront_CustomerCreatePayload = {
  __typename?: 'ShopifyStorefront_CustomerCreatePayload';
  /** The created customer object. */
  customer?: Maybe<ShopifyStorefront_Customer>;
  /** The list of errors that occurred from executing the mutation. */
  customerUserErrors: Array<ShopifyStorefront_CustomerUserError>;
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `customerUserErrors` instead
   */
  userErrors: Array<ShopifyStorefront_UserError>;
};

/** The fields required to create a new customer. */
export type ShopifyStorefront_CustomerCreateInput = {
  /** The customerâ€™s first name. */
  firstName?: InputMaybe<Scalars['String']>;
  /** The customerâ€™s last name. */
  lastName?: InputMaybe<Scalars['String']>;
  /** The customerâ€™s email. */
  email: Scalars['String'];
  /**
   * A unique phone number for the customer.
   *
   * Formatted using E.164 standard. For example, _+16135551111_.
   */
  phone?: InputMaybe<Scalars['String']>;
  /** The login password used by the customer. */
  password: Scalars['String'];
  /** Indicates whether the customer has consented to be sent marketing material via email. */
  acceptsMarketing?: InputMaybe<Scalars['Boolean']>;
};

export type CreateCustomerPayload = {
  __typename?: 'CreateCustomerPayload';
  customer?: Maybe<CreateCustomerPayloadCustomerProperty>;
};

export type CreateCustomerPayloadCustomerProperty = {
  __typename?: 'CreateCustomerPayloadCustomerProperty';
  id?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  verified_email?: Maybe<Scalars['Boolean']>;
};

export type CreateCustomerPropertiesPropertyInput = {
  firstName?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  phone?: InputMaybe<Scalars['String']>;
  password: Scalars['String'];
  acceptsMarketing?: InputMaybe<Scalars['Boolean']>;
};

/** Return type for `customerRecover` mutation. */
export type ShopifyStorefront_CustomerRecoverPayload = {
  __typename?: 'ShopifyStorefront_CustomerRecoverPayload';
  /** The list of errors that occurred from executing the mutation. */
  customerUserErrors: Array<ShopifyStorefront_CustomerUserError>;
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `customerUserErrors` instead
   */
  userErrors: Array<ShopifyStorefront_UserError>;
};

/** Return type for `customerUpdate` mutation. */
export type ShopifyStorefront_CustomerUpdatePayload = {
  __typename?: 'ShopifyStorefront_CustomerUpdatePayload';
  /** The updated customer object. */
  customer?: Maybe<ShopifyStorefront_Customer>;
  /**
   * The newly created customer access token. If the customer's password is updated, all previous access tokens
   * (including the one used to perform this mutation) become invalid, and a new token is generated.
   */
  customerAccessToken?: Maybe<ShopifyStorefront_CustomerAccessToken>;
  /** The list of errors that occurred from executing the mutation. */
  customerUserErrors: Array<ShopifyStorefront_CustomerUserError>;
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `customerUserErrors` instead
   */
  userErrors: Array<ShopifyStorefront_UserError>;
};

/** Specifies the fields required to update the Customer information. */
export type ShopifyStorefront_CustomerUpdateInput = {
  /** The customerâ€™s first name. */
  firstName?: InputMaybe<Scalars['String']>;
  /** The customerâ€™s last name. */
  lastName?: InputMaybe<Scalars['String']>;
  /** The customerâ€™s email. */
  email?: InputMaybe<Scalars['String']>;
  /**
   * A unique phone number for the customer.
   *
   * Formatted using E.164 standard. For example, _+16135551111_. To remove the phone number, specify `null`.
   */
  phone?: InputMaybe<Scalars['String']>;
  /** The login password used by the customer. */
  password?: InputMaybe<Scalars['String']>;
  /** Indicates whether the customer has consented to be sent marketing material via email. */
  acceptsMarketing?: InputMaybe<Scalars['Boolean']>;
};

/** Return type for `customerAddressUpdate` mutation. */
export type ShopifyStorefront_CustomerAddressUpdatePayload = {
  __typename?: 'ShopifyStorefront_CustomerAddressUpdatePayload';
  /** The customerâ€™s updated mailing address. */
  customerAddress?: Maybe<ShopifyStorefront_MailingAddress>;
  /** The list of errors that occurred from executing the mutation. */
  customerUserErrors: Array<ShopifyStorefront_CustomerUserError>;
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `customerUserErrors` instead
   */
  userErrors: Array<ShopifyStorefront_UserError>;
};

/** Specifies the fields accepted to create or update a mailing address. */
export type ShopifyStorefront_MailingAddressInput = {
  /** The first line of the address. Typically the street address or PO Box number. */
  address1?: InputMaybe<Scalars['String']>;
  /** The second line of the address. Typically the number of the apartment, suite, or unit. */
  address2?: InputMaybe<Scalars['String']>;
  /** The name of the city, district, village, or town. */
  city?: InputMaybe<Scalars['String']>;
  /** The name of the customer's company or organization. */
  company?: InputMaybe<Scalars['String']>;
  /** The name of the country. */
  country?: InputMaybe<Scalars['String']>;
  /** The first name of the customer. */
  firstName?: InputMaybe<Scalars['String']>;
  /** The last name of the customer. */
  lastName?: InputMaybe<Scalars['String']>;
  /**
   * A unique phone number for the customer.
   *
   * Formatted using E.164 standard. For example, _+16135551111_.
   */
  phone?: InputMaybe<Scalars['String']>;
  /** The region of the address, such as the province, state, or district. */
  province?: InputMaybe<Scalars['String']>;
  /** The zip or postal code of the address. */
  zip?: InputMaybe<Scalars['String']>;
};

export type Gorgias_CreateTicketResponse = {
  __typename?: 'Gorgias_CreateTicketResponse';
  id: Scalars['Int'];
};

export type UpdateStorefrontResult = {
  __typename?: 'UpdateStorefrontResult';
  clientMutationId?: Maybe<Scalars['String']>;
  result?: Maybe<Storefront>;
};

/** update Storefront input */
export type UpdateStorefrontInput = {
  components?: InputMaybe<Array<InputMaybe<BackgroundImageComponentCollectionsComponentHeroComponentOffersComponentSaleComponentTestimonialsComponentInputUnion>>>;
  _shapeId?: InputMaybe<Scalars['String']>;
  _id?: InputMaybe<Scalars['ID']>;
  _version?: InputMaybe<Scalars['Int']>;
  _shapeName?: InputMaybe<Scalars['String']>;
  _createdAt?: InputMaybe<Scalars['String']>;
  _createdBy?: InputMaybe<Scalars['String']>;
  _updatedAt?: InputMaybe<Scalars['String']>;
  _updatedBy?: InputMaybe<Scalars['String']>;
  _schemaVersion?: InputMaybe<Scalars['Float']>;
  _enabled?: InputMaybe<Scalars['Boolean']>;
  _enabledAt?: InputMaybe<Scalars['String']>;
  _status?: InputMaybe<DefaultWorkflow>;
  _contentTypeId?: InputMaybe<Scalars['String']>;
  _contentTypeName?: InputMaybe<Scalars['String']>;
};

export type BackgroundImageComponentCollectionsComponentHeroComponentOffersComponentSaleComponentTestimonialsComponentInputUnion = {
  offersComponent?: InputMaybe<OffersComponentInput>;
  heroComponent?: InputMaybe<HeroComponentInput>;
  collectionsComponent?: InputMaybe<CollectionsComponentInput>;
  backgroundImageComponent?: InputMaybe<BackgroundImageComponentInput>;
  saleComponent?: InputMaybe<SaleComponentInput>;
  testimonialsComponent?: InputMaybe<TestimonialsComponentInput>;
};

export type OffersComponentInput = {
  offers: Array<OfferInputUnion>;
};

export type OfferInputUnion = {
  offer?: InputMaybe<OfferInput>;
};

export type OfferInput = {
  href: Scalars['String'];
  name: Scalars['String'];
  description: Scalars['String'];
};

export type HeroComponentInput = {
  primaryText: Scalars['String'];
  secondaryText: Scalars['String'];
  buttonText: Scalars['String'];
  image: Scalars['String'];
};

export type CollectionsComponentInput = {
  collections: Array<CollectionInputUnion>;
};

export type CollectionInputUnion = {
  collection?: InputMaybe<CollectionInput>;
};

export type CollectionInput = {
  name?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  imageSrc?: InputMaybe<Scalars['String']>;
  imageAlt?: InputMaybe<Scalars['String']>;
  href?: InputMaybe<Scalars['String']>;
};

export type BackgroundImageComponentInput = {
  image: Scalars['String'];
};

export type SaleComponentInput = {
  primaryText: Scalars['String'];
  secondaryText: Scalars['String'];
  buttonText: Scalars['String'];
};

export type TestimonialsComponentInput = {
  testimonials: Array<Scalars['JSONObject']>;
};
